--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name wasm_bindgen_test --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 -C metadata=5288882f3f82eca7 -C extra-filename=-5288882f3f82eca7 --out-dir /usr/home/liquid/tmp/.tmp3gRTsY/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmp3gRTsY/target/debug/deps --extern console_error_panic_hook=/usr/home/liquid/tmp/.tmp3gRTsY/target/debug/deps/libconsole_error_panic_hook-e01f375ada644baf.rmeta --extern js_sys=/usr/home/liquid/tmp/.tmp3gRTsY/target/debug/deps/libjs_sys-e2e92f342399ffa3.rmeta --extern scoped_tls=/usr/home/liquid/tmp/.tmp3gRTsY/target/debug/deps/libscoped_tls-5b4a0b4fc645fa2b.rmeta --extern wasm_bindgen=/usr/home/liquid/tmp/.tmp3gRTsY/target/debug/deps/libwasm_bindgen-556f0b76b0891e97.rmeta --extern wasm_bindgen_futures=/usr/home/liquid/tmp/.tmp3gRTsY/target/debug/deps/libwasm_bindgen_futures-704d7589bc225b19.rmeta --extern wasm_bindgen_test_macro=/usr/home/liquid/tmp/.tmp3gRTsY/target/debug/deps/libwasm_bindgen_test_macro-16d4b10740ae8307.so -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-wasm-bindgen-test-0.3.29-Check-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
752,546,253 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
24,370,512 ( 3.24%)  ./malloc/malloc.c:_int_free
23,112,926 ( 3.07%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
18,395,273 ( 2.44%)  ./malloc/malloc.c:_int_malloc
17,079,759 ( 2.27%)  ./elf/dl-lookup.c:do_lookup_x
14,703,495 ( 1.95%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
14,653,651 ( 1.95%)  ./malloc/malloc.c:malloc
 7,377,272 ( 0.98%)  ./malloc/malloc.c:free
 5,430,102 ( 0.72%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 5,188,180 ( 0.69%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs:<proc_macro::bridge::server::Dispatcher<proc_macro::bridge::server::MarkedTypes<rustc_expand::proc_macro_server::Rustc>> as proc_macro::bridge::server::DispatcherTrait>::dispatch
 4,821,300 ( 0.64%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs:<std::collections::hash::map::DefaultHasher as core::hash::Hasher>::write
 3,408,264 ( 0.45%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 3,195,229 ( 0.42%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 3,000,939 ( 0.40%)  ./malloc/malloc.c:malloc_consolidate
 2,874,439 ( 0.38%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,555,788 ( 0.34%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,529,998 ( 0.34%)  ./elf/do-rel.h:_dl_relocate_object
 2,398,995 ( 0.32%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,366,056 ( 0.31%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 2,260,202 ( 0.30%)  ./malloc/malloc.c:realloc
 2,230,668 ( 0.30%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs:<proc_macro::bridge::api_tags::Method as proc_macro::bridge::rpc::DecodeMut<()>>::decode
 2,174,326 ( 0.29%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
 2,066,136 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:core::ptr::drop_in_place<proc_macro::bridge::scoped_cell::ScopedCell<T>::replace::PutBackOnDrop<proc_macro::bridge::client::BridgeStateL>>
 1,916,506 ( 0.25%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 1,818,515 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 1,806,476 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/scoped_cell.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 1,706,789 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs:<proc_macro::bridge::api_tags::Method as proc_macro::bridge::rpc::Encode<S>>::encode
 1,691,173 ( 0.22%)  ./elf/../sysdeps/x86_64/tls_get_addr.S:__tls_get_addr
 1,643,381 ( 0.22%)  ./elf/dl-lookup.c:check_match
 1,616,958 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 1,587,191 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 1,587,168 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 1,585,957 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs:<core::result::Result<T,E> as proc_macro::bridge::rpc::DecodeMut<S>>::decode
 1,574,931 ( 0.21%)  ./malloc/malloc.c:_int_realloc
 1,515,266 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
 1,504,762 ( 0.20%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 1,470,942 ( 0.20%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_span::def_id::DefId, rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>>::{closure#0}>
 1,469,406 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
 1,466,912 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next
 1,439,346 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 1,438,224 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
 1,437,296 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/closure.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 1,397,796 ( 0.19%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 1,367,173 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs:core::mem::replace
 1,362,217 ( 0.18%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
 1,338,919 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs:<proc_macro::bridge::api_tags::Method as proc_macro::bridge::rpc::Encode<S>>::encode
 1,304,445 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<alloc::rc::Rc<rustc_span::SourceFile>, proc_macro::bridge::client::SourceFile>, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<core::num::nonzero::NonZeroU32>
 1,292,808 ( 0.17%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
 1,259,900 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
 1,257,648 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs:core::ptr::drop_in_place<proc_macro::bridge::scoped_cell::ScopedCell<T>::replace::PutBackOnDrop<proc_macro::bridge::client::BridgeStateL>>
 1,257,524 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
 1,235,986 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
 1,203,709 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs:<u32 as proc_macro::bridge::rpc::Encode<S>>::encode
 1,189,862 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:core::ptr::read
 1,187,439 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 1,185,716 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs:core::ptr::mut_ptr::<impl *mut T>::guaranteed_eq
 1,177,081 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
 1,160,796 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/node.rs:<alloc::collections::btree::node::Handle<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>, alloc::collections::btree::node::marker::Leaf>, alloc::collections::btree::node::marker::Edge>>::insert_recursing
 1,148,938 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
 1,144,245 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 1,144,036 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_expand::proc_macro_server::Ident, proc_macro::bridge::client::Ident>, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<core::num::nonzero::NonZeroU32>
 1,121,902 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
 1,109,733 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 1,106,485 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
 1,102,362 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,101,022 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs:core::ptr::mut_ptr::<impl *mut T>::is_null
 1,099,279 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,097,096 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/traits.rs:core::str::traits::<impl core::cmp::PartialEq for str>::eq
 1,068,786 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
 1,062,521 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,062,351 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs:<std::collections::hash::map::DefaultHasher as core::hash::Hasher>::write
 1,039,531 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 1,022,625 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 1,021,977 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/cmp.rs:<[A] as core::slice::cmp::SlicePartialEq<B>>::equal
 1,004,249 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxtInner>::rollback_to
 1,002,966 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
   980,050 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token>::is_keyword
   977,813 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   944,893 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/non_null.rs:core::ptr::non_null::NonNull<T>::as_ptr
   943,957 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs:<rustc_ast::tokenstream::Cursor>::next_with_spacing
   925,756 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<alloc::rc::Rc<rustc_span::SourceFile>, proc_macro::bridge::client::SourceFile>, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<core::num::nonzero::NonZeroU32>
   923,933 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::map::BTreeMap<core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>>>::insert
   871,897 ( 0.12%)  ./malloc/malloc.c:calloc
   870,090 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/remove.rs:<alloc::collections::btree::node::Handle<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>, alloc::collections::btree::node::marker::Leaf>, alloc::collections::btree::node::marker::KV>>::remove_leaf_kv::<<alloc::collections::btree::map::entry::OccupiedEntry<core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>>>::remove_kv::{closure#0}>
   862,163 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   862,070 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/map/entry.rs:<alloc::collections::btree::map::entry::OccupiedEntry<core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>>>::remove_entry
   857,866 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs:<core::result::Result<T,E> as core::ops::try_trait::Try>::branch
   841,009 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs:<alloc::rc::Rc<alloc::vec::Vec<(rustc_ast::tokenstream::TokenTree, rustc_ast::tokenstream::Spacing)>> as core::ops::drop::Drop>::drop
   833,547 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs:<u32 as proc_macro::bridge::rpc::Encode<S>>::encode
   828,289 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs:stacker::remaining_stack
   825,139 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   821,998 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/proc-macro2-1.0.36/src/wrapper.rs:<proc_macro2::imp::TokenStream as core::iter::traits::collect::Extend<proc_macro2::TokenTree>>::extend
   817,328 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/raw_vec.rs:alloc::raw_vec::RawVec<T,A>::current_memory
   808,479 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs:<proc_macro::bridge::closure::Closure<_, _> as core::convert::From<&mut _>>::from::call::<proc_macro::bridge::buffer::Buffer<u8>, proc_macro::bridge::buffer::Buffer<u8>, <proc_macro::bridge::server::SameThread as proc_macro::bridge::server::ExecutionStrategy>::run_bridge_and_client<fn(proc_macro::TokenStream) -> proc_macro::TokenStream, proc_macro::bridge::server::Dispatcher<proc_macro::bridge::server::MarkedTypes<rustc_expand::proc_macro_server::Rustc>>>::{closure#0}>
   805,003 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:alloc::vec::Vec<T,A>::push
   804,881 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   802,728 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::TokenKind as core::clone::Clone>::clone
   798,400 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTableInner<alloc::alloc::Global>>::prepare_insert_slot
   796,135 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs:<rustc_infer::infer::region_constraints::RegionConstraintCollector>::make_subregion
   791,194 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::cmp::PartialEq>::eq
   780,248 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_expand::proc_macro_server::Ident, proc_macro::bridge::client::Ident>, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<core::num::nonzero::NonZeroU32>
   778,734 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs:<hashbrown::map::HashMap<rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
   762,749 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
   760,650 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/node.rs:<alloc::collections::btree::node::Handle<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>, alloc::collections::btree::node::marker::Leaf>, alloc::collections::btree::node::marker::Edge>>::insert_fit

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 23 ----------------------------------------
      .           use std::collections::BTreeMap;
      .           use std::ops::Range;
      .           use std::{cmp, fmt, mem};
      .           
      .           mod leak_check;
      .           
      .           pub use rustc_middle::infer::MemberConstraint;
      .           
 64,988 ( 0.01%)  #[derive(Default)]
      .           pub struct RegionConstraintStorage<'tcx> {
      .               /// For each `RegionVid`, the corresponding `RegionVariableOrigin`.
      .               var_infos: IndexVec<RegionVid, RegionVariableInfo>,
      .           
      .               data: RegionConstraintData<'tcx>,
      .           
      .               /// For a given pair of regions (R1, R2), maps to a region R3 that
      .               /// is designated as their LUB (edges R1 <= R3 and R2 <= R3
-- line 39 ----------------------------------------
-- line 64 ----------------------------------------
      .               storage: &'a mut RegionConstraintStorage<'tcx>,
      .               undo_log: &'a mut InferCtxtUndoLogs<'tcx>,
      .           }
      .           
      .           impl<'tcx> std::ops::Deref for RegionConstraintCollector<'_, 'tcx> {
      .               type Target = RegionConstraintStorage<'tcx>;
      .               #[inline]
      .               fn deref(&self) -> &RegionConstraintStorage<'tcx> {
  1,407 ( 0.00%)          self.storage
      .               }
      .           }
      .           
      .           impl<'tcx> std::ops::DerefMut for RegionConstraintCollector<'_, 'tcx> {
      .               #[inline]
      .               fn deref_mut(&mut self) -> &mut RegionConstraintStorage<'tcx> {
 11,001 ( 0.00%)          self.storage
      .               }
      .           }
      .           
      .           pub type VarInfos = IndexVec<RegionVid, RegionVariableInfo>;
      .           
      .           /// The full set of region constraints gathered up by the collector.
      .           /// Describes constraints between the region variables and other
      .           /// regions, as well as other conditions that must be verified, or
      .           /// assumptions that can be made.
 33,080 ( 0.00%)  #[derive(Debug, Default, Clone)]
      .           pub struct RegionConstraintData<'tcx> {
      .               /// Constraints of the form `A <= B`, where either `A` or `B` can
      .               /// be a region variable (or neither, as it happens).
      .               pub constraints: BTreeMap<Constraint<'tcx>, SubregionOrigin<'tcx>>,
      .           
      .               /// Constraints of the form `R0 member of [R1, ..., Rn]`, meaning that
      .               /// `R0` must be equal to one of the regions `R1..Rn`. These occur
      .               /// with `impl Trait` quite frequently.
-- line 97 ----------------------------------------
-- line 122 ----------------------------------------
      .               /// This hashmap is used to avoid that naive scenario. Basically
      .               /// we record the fact that `'a <= 'b` is implied by the fn
      .               /// signature, and then ignore the constraint when solving
      .               /// equations. This is a bit of a hack but seems to work.
      .               pub givens: FxHashSet<(Region<'tcx>, ty::RegionVid)>,
      .           }
      .           
      .           /// Represents a constraint that influences the inference process.
313,837 ( 0.04%)  #[derive(Clone, Copy, PartialEq, Eq, Debug, PartialOrd, Ord)]
      .           pub enum Constraint<'tcx> {
      .               /// A region variable is a subregion of another.
 63,932 ( 0.01%)      VarSubVar(RegionVid, RegionVid),
      .           
      .               /// A concrete region is a subregion of region variable.
 17,895 ( 0.00%)      RegSubVar(Region<'tcx>, RegionVid),
      .           
      .               /// A region variable is a subregion of a concrete region. This does not
      .               /// directly affect inference, but instead is checked after
      .               /// inference is complete.
 14,634 ( 0.00%)      VarSubReg(RegionVid, Region<'tcx>),
      .           
      .               /// A constraint where neither side is a variable. This does not
      .               /// directly affect inference, but instead is checked after
      .               /// inference is complete.
  1,265 ( 0.00%)      RegSubReg(Region<'tcx>, Region<'tcx>),
      .           }
      .           
      .           impl Constraint<'_> {
      .               pub fn involves_placeholders(&self) -> bool {
  1,086 ( 0.00%)          match self {
      .                       Constraint::VarSubVar(_, _) => false,
      .                       Constraint::VarSubReg(_, r) | Constraint::RegSubVar(r, _) => r.is_placeholder(),
      .                       Constraint::RegSubReg(r, s) => r.is_placeholder() || s.is_placeholder(),
      .                   }
      .               }
      .           }
      .           
      .           #[derive(Debug, Clone)]
-- line 159 ----------------------------------------
-- line 263 ----------------------------------------
      .               /// In other words, if we meet *all* bounds in `B`, that suffices.
      .               /// This is used when *some* bound in `B` is known to suffice, but
      .               /// we don't know which.
      .               AllBounds(Vec<VerifyBound<'tcx>>),
      .           }
      .           
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
      .           pub(crate) struct TwoRegions<'tcx> {
      3 ( 0.00%)      a: Region<'tcx>,
      3 ( 0.00%)      b: Region<'tcx>,
      .           }
      .           
      .           #[derive(Copy, Clone, PartialEq)]
      .           pub(crate) enum UndoLog<'tcx> {
      .               /// We added `RegionVid`.
      .               AddVar(RegionVid),
      .           
      .               /// We added the given `constraint`.
-- line 280 ----------------------------------------
-- line 304 ----------------------------------------
      .               pub universe: ty::UniverseIndex,
      .           }
      .           
      .           pub struct RegionSnapshot {
      .               any_unifications: bool,
      .           }
      .           
      .           impl<'tcx> RegionConstraintStorage<'tcx> {
 11,816 ( 0.00%)      pub fn new() -> Self {
      .                   Self::default()
 11,816 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub(crate) fn with_log<'a>(
      .                   &'a mut self,
      .                   undo_log: &'a mut InferCtxtUndoLogs<'tcx>,
      .               ) -> RegionConstraintCollector<'a, 'tcx> {
      .                   RegionConstraintCollector { storage: self, undo_log }
      .               }
      .           
      .               fn rollback_undo_entry(&mut self, undo_entry: UndoLog<'tcx>) {
 61,965 ( 0.01%)          match undo_entry {
      .                       AddVar(vid) => {
      .                           self.var_infos.pop().unwrap();
 19,800 ( 0.00%)                  assert_eq!(self.var_infos.len(), vid.index() as usize);
      .                       }
  7,443 ( 0.00%)              AddConstraint(ref constraint) => {
 29,772 ( 0.00%)                  self.data.constraints.remove(constraint);
      .                       }
      .                       AddVerify(index) => {
      .                           self.data.verifys.pop();
      .                           assert_eq!(self.data.verifys.len(), index);
      .                       }
      .                       AddGiven(sub, sup) => {
      .                           self.data.givens.remove(&(sub, sup));
      .                       }
-- line 339 ----------------------------------------
-- line 348 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> RegionConstraintCollector<'_, 'tcx> {
      .               pub fn num_region_vars(&self) -> usize {
      .                   self.var_infos.len()
      .               }
      .           
      .               pub fn region_constraint_data(&self) -> &RegionConstraintData<'tcx> {
  1,009 ( 0.00%)          &self.data
  1,009 ( 0.00%)      }
      .           
      .               /// Once all the constraints have been gathered, extract out the final data.
      .               ///
      .               /// Not legal during a snapshot.
      .               pub fn into_infos_and_data(self) -> (VarInfos, RegionConstraintData<'tcx>) {
  2,362 ( 0.00%)          assert!(!UndoLogs::<super::UndoLog<'_>>::in_snapshot(&self.undo_log));
      .                   (mem::take(&mut self.storage.var_infos), mem::take(&mut self.storage.data))
      .               }
      .           
      .               /// Takes (and clears) the current set of constraints. Note that
      .               /// the set of variables remains intact, but all relationships
      .               /// between them are reset. This is used during NLL checking to
      .               /// grab the set of constraints that arose from a particular
      .               /// operation.
-- line 371 ----------------------------------------
-- line 418 ----------------------------------------
      .           
      .               pub fn start_snapshot(&mut self) -> RegionSnapshot {
      .                   debug!("RegionConstraintCollector: start_snapshot");
      .                   RegionSnapshot { any_unifications: self.any_unifications }
      .               }
      .           
      .               pub fn rollback_to(&mut self, snapshot: RegionSnapshot) {
      .                   debug!("RegionConstraintCollector: rollback_to({:?})", snapshot);
 13,410 ( 0.00%)          self.any_unifications = snapshot.any_unifications;
      .               }
      .           
 66,006 ( 0.01%)      pub fn new_region_var(
      .                   &mut self,
      .                   universe: ty::UniverseIndex,
      .                   origin: RegionVariableOrigin,
      .               ) -> RegionVid {
 11,001 ( 0.00%)          let vid = self.var_infos.push(RegionVariableInfo { origin, universe });
      .           
 33,003 ( 0.00%)          let u_vid = self.unification_table().new_key(UnifiedRegion(None));
 11,001 ( 0.00%)          assert_eq!(vid, u_vid.vid);
      .                   self.undo_log.push(AddVar(vid));
      .                   debug!("created new region variable {:?} in {:?} with origin {:?}", vid, universe, origin);
      .                   vid
 88,008 ( 0.01%)      }
      .           
      .               /// Returns the universe for the given variable.
      .               pub fn var_universe(&self, vid: RegionVid) -> ty::UniverseIndex {
  5,195 ( 0.00%)          self.var_infos[vid].universe
      .               }
      .           
      .               /// Returns the origin for the given variable.
      .               pub fn var_origin(&self, vid: RegionVid) -> RegionVariableOrigin {
      .                   self.var_infos[vid].origin
      .               }
      .           
      .               fn add_constraint(&mut self, constraint: Constraint<'tcx>, origin: SubregionOrigin<'tcx>) {
      .                   // cannot add constraints once regions are resolved
      .                   debug!("RegionConstraintCollector: add_constraint({:?})", constraint);
      .           
      .                   // never overwrite an existing (constraint, origin) - only insert one if it isn't
      .                   // present in the map yet. This prevents origins from outside the snapshot being
      .                   // replaced with "less informative" origins e.g., during calls to `can_eq`
      .                   let undo_log = &mut self.undo_log;
100,650 ( 0.01%)          self.storage.data.constraints.entry(constraint).or_insert_with(|| {
 59,694 ( 0.01%)              undo_log.push(AddConstraint(constraint));
 39,796 ( 0.01%)              origin
      .                   });
      .               }
      .           
      .               fn add_verify(&mut self, verify: Verify<'tcx>) {
      .                   // cannot add verifys once regions are resolved
      .                   debug!("RegionConstraintCollector: add_verify({:?})", verify);
      .           
      .                   // skip no-op cases known to be satisfied
     66 ( 0.00%)          if let VerifyBound::AllBounds(ref bs) = verify.bound {
      .                       if bs.is_empty() {
      .                           return;
      .                       }
      .                   }
      .           
     33 ( 0.00%)          let index = self.data.verifys.len();
    495 ( 0.00%)          self.data.verifys.push(verify);
     33 ( 0.00%)          self.undo_log.push(AddVerify(index));
      .               }
      .           
      .               pub fn add_given(&mut self, sub: Region<'tcx>, sup: ty::RegionVid) {
      .                   // cannot add givens once regions are resolved
      .                   if self.data.givens.insert((sub, sup)) {
      .                       debug!("add_given({:?} <= {:?})", sub, sup);
      .           
      .                       self.undo_log.push(AddGiven(sub, sup));
      .                   }
      .               }
      .           
 50,100 ( 0.01%)      pub fn make_eqregion(
      .                   &mut self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   sub: Region<'tcx>,
      .                   sup: Region<'tcx>,
      .               ) {
 25,050 ( 0.00%)          if sub != sup {
      .                       // Eventually, it would be nice to add direct support for
      .                       // equating regions.
 33,240 ( 0.00%)              self.make_subregion(origin.clone(), sub, sup);
 37,395 ( 0.00%)              self.make_subregion(origin, sup, sub);
      .           
 20,775 ( 0.00%)              match (sub, sup) {
  6,198 ( 0.00%)                  (&ty::ReVar(sub), &ty::ReVar(sup)) => {
      .                               debug!("make_eqregion: unifying {:?} with {:?}", sub, sup);
 10,330 ( 0.00%)                      self.unification_table().union(sub, sup);
      .                               self.any_unifications = true;
      .                           }
      .                           (&ty::ReVar(vid), value) | (value, &ty::ReVar(vid)) => {
      .                               debug!("make_eqregion: unifying {:?} with {:?}", vid, value);
  8,356 ( 0.00%)                      self.unification_table().union_value(vid, UnifiedRegion(Some(value)));
      .                               self.any_unifications = true;
      .                           }
      .                           (_, _) => {}
      .                       }
      .                   }
 29,085 ( 0.00%)      }
      .           
      .               pub fn member_constraint(
      .                   &mut self,
      .                   opaque_type_def_id: DefId,
      .                   definition_span: Span,
      .                   hidden_ty: Ty<'tcx>,
      .                   member_region: ty::Region<'tcx>,
      .                   choice_regions: &Lrc<Vec<ty::Region<'tcx>>>,
-- line 526 ----------------------------------------
-- line 535 ----------------------------------------
      .                       opaque_type_def_id,
      .                       definition_span,
      .                       hidden_ty,
      .                       member_region,
      .                       choice_regions: choice_regions.clone(),
      .                   });
      .               }
      .           
142,624 ( 0.02%)      #[instrument(skip(self, origin), level = "debug")]
      .               pub fn make_subregion(
      .                   &mut self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   sub: Region<'tcx>,
      .                   sup: Region<'tcx>,
      .               ) {
      .                   // cannot add constraints once regions are resolved
      .                   debug!("origin = {:#?}", origin);
      .           
106,794 ( 0.01%)          match (sub, sup) {
      .                       (&ReLateBound(..), _) | (_, &ReLateBound(..)) => {
      .                           span_bug!(origin.span(), "cannot relate bound region: {:?} <= {:?}", sub, sup);
      .                       }
      .                       (_, &ReStatic) => {
      .                           // all regions are subregions of static, so we can ignore this
      .                       }
  5,171 ( 0.00%)              (&ReVar(sub_id), &ReVar(sup_id)) => {
 36,197 ( 0.00%)                  self.add_constraint(Constraint::VarSubVar(sub_id, sup_id), origin);
      .                       }
      .                       (_, &ReVar(sup_id)) => {
 16,009 ( 0.00%)                  self.add_constraint(Constraint::RegSubVar(sub, sup_id), origin);
      .                       }
  2,354 ( 0.00%)              (&ReVar(sub_id), _) => {
 16,478 ( 0.00%)                  self.add_constraint(Constraint::VarSubReg(sub_id, sup), origin);
      .                       }
      .                       _ => {
  1,750 ( 0.00%)                  self.add_constraint(Constraint::RegSubReg(sub, sup), origin);
      .                       }
      .                   }
      .               }
      .           
    165 ( 0.00%)      pub fn verify_generic_bound(
      .                   &mut self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   kind: GenericKind<'tcx>,
      .                   sub: Region<'tcx>,
      .                   bound: VerifyBound<'tcx>,
      .               ) {
    429 ( 0.00%)          self.add_verify(Verify { kind, origin, region: sub, bound });
    165 ( 0.00%)      }
      .           
      .               pub fn lub_regions(
      .                   &mut self,
      .                   tcx: TyCtxt<'tcx>,
      .                   origin: SubregionOrigin<'tcx>,
      .                   a: Region<'tcx>,
      .                   b: Region<'tcx>,
      .               ) -> Region<'tcx> {
-- line 591 ----------------------------------------
-- line 599 ----------------------------------------
      .                       _ if a == b => {
      .                           a // LUB(a,a) = a
      .                       }
      .           
      .                       _ => self.combine_vars(tcx, Lub, a, b, origin),
      .                   }
      .               }
      .           
    104 ( 0.00%)      pub fn glb_regions(
      .                   &mut self,
      .                   tcx: TyCtxt<'tcx>,
      .                   origin: SubregionOrigin<'tcx>,
      .                   a: Region<'tcx>,
      .                   b: Region<'tcx>,
      .               ) -> Region<'tcx> {
      .                   // cannot add constraints once regions are resolved
      .                   debug!("RegionConstraintCollector: glb_regions({:?}, {:?})", a, b);
     52 ( 0.00%)          match (a, b) {
      .                       (&ReStatic, r) | (r, &ReStatic) => {
      .                           r // static lives longer than everything else
      .                       }
      .           
     26 ( 0.00%)              _ if a == b => {
      .                           a // GLB(a,a) = a
      .                       }
      .           
    156 ( 0.00%)              _ => self.combine_vars(tcx, Glb, a, b, origin),
      .                   }
    104 ( 0.00%)      }
      .           
      .               /// Resolves the passed RegionVid to the root RegionVid in the unification table
      .               pub fn opportunistic_resolve_var(&mut self, rid: ty::RegionVid) -> ty::RegionVid {
  8,544 ( 0.00%)          self.unification_table().find(rid).vid
      .               }
      .           
      .               /// If the Region is a `ReVar`, then resolves it either to the root value in
      .               /// the unification table, if it exists, or to the root `ReVar` in the table.
      .               /// If the Region is not a `ReVar`, just returns the Region itself.
      .               pub fn opportunistic_resolve_region(
      .                   &mut self,
      .                   tcx: TyCtxt<'tcx>,
-- line 639 ----------------------------------------
-- line 647 ----------------------------------------
      .                               tcx.reuse_or_mk_region(region, ty::ReVar(root))
      .                           })
      .                       }
      .                       _ => region,
      .                   }
      .               }
      .           
      .               fn combine_map(&mut self, t: CombineMapType) -> &mut CombineMap<'tcx> {
    104 ( 0.00%)          match t {
      .                       Glb => &mut self.glbs,
      .                       Lub => &mut self.lubs,
      .                   }
      .               }
      .           
    156 ( 0.00%)      fn combine_vars(
      .                   &mut self,
      .                   tcx: TyCtxt<'tcx>,
      .                   t: CombineMapType,
      .                   a: Region<'tcx>,
      .                   b: Region<'tcx>,
      .                   origin: SubregionOrigin<'tcx>,
      .               ) -> Region<'tcx> {
      .                   let vars = TwoRegions { a, b };
      .                   if let Some(&c) = self.combine_map(t).get(&vars) {
      .                       return tcx.mk_region(ReVar(c));
      .                   }
      .                   let a_universe = self.universe(a);
      .                   let b_universe = self.universe(b);
      .                   let c_universe = cmp::max(a_universe, b_universe);
     65 ( 0.00%)          let c = self.new_region_var(c_universe, MiscVariable(origin.span()));
      .                   self.combine_map(t).insert(vars, c);
     13 ( 0.00%)          self.undo_log.push(AddCombination(t, vars));
     65 ( 0.00%)          let new_r = tcx.mk_region(ReVar(c));
    104 ( 0.00%)          for old_r in [a, b] {
     26 ( 0.00%)              match t {
    221 ( 0.00%)                  Glb => self.make_subregion(origin.clone(), new_r, old_r),
      .                           Lub => self.make_subregion(origin.clone(), old_r, new_r),
      .                       }
      .                   }
      .                   debug!("combine_vars() c={:?}", c);
      .                   new_r
    117 ( 0.00%)      }
      .           
      .               pub fn universe(&self, region: Region<'tcx>) -> ty::UniverseIndex {
  3,428 ( 0.00%)          match *region {
      .                       ty::ReStatic | ty::ReErased | ty::ReFree(..) | ty::ReEarlyBound(..) => {
      .                           ty::UniverseIndex::ROOT
      .                       }
      .                       ty::ReEmpty(ui) => ui,
      .                       ty::RePlaceholder(placeholder) => placeholder.universe,
    407 ( 0.00%)              ty::ReVar(vid) => self.var_universe(vid),
      .                       ty::ReLateBound(..) => bug!("universe(): encountered bound region {:?}", region),
      .                   }
      .               }
      .           
  1,655 ( 0.00%)      pub fn vars_since_snapshot(
      .                   &self,
      .                   value_count: usize,
      .               ) -> (Range<RegionVid>, Vec<RegionVariableOrigin>) {
      .                   let range = RegionVid::from(value_count)..RegionVid::from(self.unification_table.len());
  1,986 ( 0.00%)          (
      .                       range.clone(),
      .                       (range.start.index()..range.end.index())
      .                           .map(|index| self.var_infos[ty::RegionVid::from(index)].origin)
      .                           .collect(),
      .                   )
  1,986 ( 0.00%)      }
      .           
      .               /// See `InferCtxt::region_constraints_added_in_snapshot`.
  5,085 ( 0.00%)      pub fn region_constraints_added_in_snapshot(&self, mark: &Snapshot<'tcx>) -> Option<bool> {
  1,695 ( 0.00%)          self.undo_log
      .                       .region_constraints_in_snapshot(mark)
  1,366 ( 0.00%)              .map(|&elt| match elt {
    406 ( 0.00%)                  AddConstraint(constraint) => Some(constraint.involves_placeholders()),
      .                           _ => None,
      .                       })
      .                       .max()
      .                       .unwrap_or(None)
  6,780 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn unification_table(&mut self) -> super::UnificationTable<'_, 'tcx, RegionVidKey<'tcx>> {
 34,584 ( 0.00%)          ut::UnificationTable::with_log(&mut self.storage.unification_table, self.undo_log)
      .               }
      .           }
      .           
      .           impl fmt::Debug for RegionSnapshot {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   write!(f, "RegionSnapshot")
      .               }
      .           }
-- line 737 ----------------------------------------
-- line 750 ----------------------------------------
      .                   match *self {
      .                       GenericKind::Param(ref p) => write!(f, "{}", p),
      .                       GenericKind::Projection(ref p) => write!(f, "{}", p),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> GenericKind<'tcx> {
     50 ( 0.00%)      pub fn to_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    650 ( 0.00%)          match *self {
     52 ( 0.00%)              GenericKind::Param(ref p) => p.to_ty(tcx),
      6 ( 0.00%)              GenericKind::Projection(ref p) => tcx.mk_projection(p.item_def_id, p.substs),
      .                   }
     50 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> VerifyBound<'tcx> {
    192 ( 0.00%)      pub fn must_hold(&self) -> bool {
    268 ( 0.00%)          match self {
      .                       VerifyBound::IfEq(..) => false,
      .                       VerifyBound::OutlivedBy(ty::ReStatic) => true,
      .                       VerifyBound::OutlivedBy(_) => false,
      .                       VerifyBound::IsEmpty => false,
     51 ( 0.00%)              VerifyBound::AnyBound(bs) => bs.iter().any(|b| b.must_hold()),
      .                       VerifyBound::AllBounds(bs) => bs.iter().all(|b| b.must_hold()),
      .                   }
    224 ( 0.00%)      }
      .           
     95 ( 0.00%)      pub fn cannot_hold(&self) -> bool {
    138 ( 0.00%)          match self {
      .                       VerifyBound::IfEq(_, b) => b.cannot_hold(),
      .                       VerifyBound::IsEmpty => false,
      .                       VerifyBound::OutlivedBy(_) => false,
     14 ( 0.00%)              VerifyBound::AnyBound(bs) => bs.iter().all(|b| b.cannot_hold()),
      .                       VerifyBound::AllBounds(bs) => bs.iter().any(|b| b.cannot_hold()),
      .                   }
    133 ( 0.00%)      }
      .           
     36 ( 0.00%)      pub fn or(self, vb: VerifyBound<'tcx>) -> VerifyBound<'tcx> {
     48 ( 0.00%)          if self.must_hold() || vb.cannot_hold() {
      .                       self
     28 ( 0.00%)          } else if self.cannot_hold() || vb.must_hold() {
     20 ( 0.00%)              vb
      .                   } else {
     13 ( 0.00%)              VerifyBound::AnyBound(vec![self, vb])
      .                   }
     45 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> RegionConstraintData<'tcx> {
      .               /// Returns `true` if this region constraint data contains no constraints, and `false`
      .               /// otherwise.
      .               pub fn is_empty(&self) -> bool {
      .                   let RegionConstraintData { constraints, member_constraints, verifys, givens } = self;
    567 ( 0.00%)          constraints.is_empty()
      .                       && member_constraints.is_empty()
      .                       && verifys.is_empty()
      .                       && givens.is_empty()
      .               }
      .           }
      .           
      .           impl<'tcx> Rollback<UndoLog<'tcx>> for RegionConstraintStorage<'tcx> {
 61,965 ( 0.01%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
 49,572 ( 0.01%)          self.rollback_undo_entry(undo)
 61,965 ( 0.01%)      }
      .           }

410,273 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                 

-- line 23 ----------------------------------------
        .           use std::cmp::Ordering;
        .           use std::marker::PhantomData;
        .           use std::ops::Range;
        .           use ty::util::IntTypeExt;
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct TypeAndMut<'tcx> {
      278 ( 0.00%)      pub ty: Ty<'tcx>,
    1,390 ( 0.00%)      pub mutbl: hir::Mutability,
        .           }
        .           
        .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        .           #[derive(HashStable)]
        .           /// A "free" region `fr` can be interpreted as "some region
        .           /// at least as big as the scope `fr.scope`".
        .           pub struct FreeRegion {
    4,922 ( 0.00%)      pub scope: DefId,
    7,655 ( 0.00%)      pub bound_region: BoundRegionKind,
        .           }
        .           
   68,955 ( 0.01%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        .           #[derive(HashStable)]
        .           pub enum BoundRegionKind {
        .               /// An anonymous region parameter for a given fn (&T)
    5,570 ( 0.00%)      BrAnon(u32),
        .           
        .               /// Named region parameters for functions (a in &'a T)
        .               ///
        .               /// The `DefId` is needed to distinguish free regions in
        .               /// the event of shadowing.
       76 ( 0.00%)      BrNamed(DefId, Symbol),
        .           
        .               /// Anonymous region for the implicit env pointer parameter
        .               /// to a closure
        .               BrEnv,
        .           }
        .           
      240 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           #[derive(HashStable)]
        .           pub struct BoundRegion {
   12,911 ( 0.00%)      pub var: BoundVar,
   10,375 ( 0.00%)      pub kind: BoundRegionKind,
        .           }
        .           
        .           impl BoundRegionKind {
        .               pub fn is_named(&self) -> bool {
        .                   match *self {
        .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
        .                       _ => false,
        .                   }
        .               }
        .           }
        .           
        .           /// Defines the kinds of types.
        .           ///
        .           /// N.B., if you change this, you'll probably want to change the corresponding
        .           /// AST structure in `rustc_ast/src/ast.rs` as well.
2,012,854 ( 0.27%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
        .           #[derive(HashStable)]
        .           #[rustc_diagnostic_item = "TyKind"]
        .           pub enum TyKind<'tcx> {
        .               /// The primitive boolean type. Written as `bool`.
        .               Bool,
        .           
        .               /// The primitive character type; holds a Unicode scalar value
        .               /// (a non-surrogate code point). Written as `char`.
-- line 89 ----------------------------------------
-- line 99 ----------------------------------------
        .               Float(ty::FloatTy),
        .           
        .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
        .               ///
        .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
        .               /// That is, even after substitution it is possible that there are type
        .               /// variables. This happens when the `Adt` corresponds to an ADT
        .               /// definition and not a concrete use of it.
  192,105 ( 0.03%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
        .           
        .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
        .               Foreign(DefId),
        .           
        .               /// The pointee of a string slice. Written as `str`.
        .               Str,
        .           
        .               /// An array with the given length. Written as `[T; n]`.
    2,887 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
        .           
        .               /// The pointee of an array slice. Written as `[T]`.
        .               Slice(Ty<'tcx>),
        .           
        .               /// A raw pointer. Written as `*mut T` or `*const T`
        .               RawPtr(TypeAndMut<'tcx>),
        .           
        .               /// A reference; a pointer with an associated lifetime. Written as
        .               /// `&'a mut T` or `&'a T`.
  246,382 ( 0.03%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
        .           
        .               /// The anonymous type of a function declaration/definition. Each
        .               /// function has a unique type, which is output (for a function
        .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
        .               ///
        .               /// For example the type of `bar` here:
        .               ///
        .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .               ///
        .               /// ```rust
        .               /// fn foo() -> i32 { 1 }
        .               /// let bar: fn() -> i32 = foo;
        .               /// ```
        .               FnPtr(PolyFnSig<'tcx>),
        .           
        .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
   12,740 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
        .           
        .               /// The anonymous type of a closure. Used to represent the type of
        .               /// `|a| a`.
        .               Closure(DefId, SubstsRef<'tcx>),
        .           
        .               /// The anonymous type of a generator. Used to represent the type of
        .               /// `|a| yield a`.
    1,256 ( 0.00%)      Generator(DefId, SubstsRef<'tcx>, hir::Movability),
        .           
        .               /// A type representing the types stored inside a generator.
        .               /// This should only appear in GeneratorInteriors.
        .               GeneratorWitness(Binder<'tcx, &'tcx List<Ty<'tcx>>>),
        .           
        .               /// The never type `!`.
        .               Never,
        .           
-- line 167 ----------------------------------------
-- line 180 ----------------------------------------
        .               /// The substitutions are for the generics of the function in question.
        .               /// After typeck, the concrete type can be found in the `types` map.
        .               Opaque(DefId, SubstsRef<'tcx>),
        .           
        .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
        .               Param(ParamTy),
        .           
        .               /// Bound type variable, used only when preparing a trait query.
      604 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
        .           
        .               /// A placeholder type - universally quantified higher-ranked type.
        .               Placeholder(ty::PlaceholderType),
        .           
        .               /// A type variable used during type checking.
        .               Infer(InferTy),
        .           
        .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
        .               pub closure_kind_ty: T,
        .               pub closure_sig_as_fn_ptr_ty: T,
        .               pub tupled_upvars_ty: T,
        .           }
        .           
        .           impl<'tcx> ClosureSubsts<'tcx> {
        .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
        .               /// for the closure parent, alongside additional closure-specific components.
       10 ( 0.00%)      pub fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
        .               ) -> ClosureSubsts<'tcx> {
        .                   ClosureSubsts {
        .                       substs: tcx.mk_substs(
       20 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
       40 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
        .                                   .iter()
        .                                   .map(|&ty| ty.into()),
        .                           ),
        .                       ),
        .                   }
       20 ( 0.00%)      }
        .           
        .               /// Divides the closure substs into their respective components.
        .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
      185 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
        .                   match self.substs[..] {
    1,300 ( 0.00%)              [
      347 ( 0.00%)                  ref parent_substs @ ..,
      393 ( 0.00%)                  closure_kind_ty,
      176 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
      268 ( 0.00%)                  tupled_upvars_ty,
      740 ( 0.00%)              ] => ClosureSubstsParts {
        .                           parent_substs,
        .                           closure_kind_ty,
        .                           closure_sig_as_fn_ptr_ty,
        .                           tupled_upvars_ty,
        .                       },
        .                       _ => bug!("closure substs missing synthetics"),
        .                   }
      555 ( 0.00%)      }
        .           
        .               /// Returns `true` only if enough of the synthetic types are known to
        .               /// allow using all of the methods on `ClosureSubsts` without panicking.
        .               ///
        .               /// Used primarily by `ty::print::pretty` to be able to handle closure
        .               /// types that haven't had their synthetic types substituted in.
        2 ( 0.00%)      pub fn is_valid(self) -> bool {
        4 ( 0.00%)          self.substs.len() >= 3
        4 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
        4 ( 0.00%)      }
        .           
        .               /// Returns the substitutions of the closure's parent.
        .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
        .                   self.split().parent_substs
        .               }
        .           
        .               /// Returns an iterator over the list of types of captured paths by the closure.
        .               /// In case there was a type error in figuring out the types of the captured path, an
        .               /// empty iterator is returned.
        .               #[inline]
       54 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       75 ( 0.00%)          match self.tupled_upvars_ty().kind() {
        .                       TyKind::Error(_) => None,
       52 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
        .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
        .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
        .                   }
        .                   .into_iter()
        .                   .flatten()
       36 ( 0.00%)      }
        .           
        .               /// Returns the tuple type representing the upvars for this closure.
        .               #[inline]
        .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
      819 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
        .               }
        .           
        .               /// Returns the closure kind for this closure; may return a type
        .               /// variable during inference. To get the closure kind during
        .               /// inference, use `infcx.closure_kind(substs)`.
      103 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
        .                   self.split().closure_kind_ty.expect_ty()
      206 ( 0.00%)      }
        .           
        .               /// Returns the `fn` pointer type representing the closure signature for this
        .               /// closure.
        .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
        .               // type is known at the time of the creation of `ClosureSubsts`,
        .               // see `rustc_typeck::check::closure`.
        .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
        .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
        .               }
        .           
        .               /// Returns the closure kind for this closure; only usable outside
        .               /// of an inference context, because in that context we know that
        .               /// there are no type variables.
        .               ///
        .               /// If you have an inference context, use `infcx.closure_kind()`.
        4 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
        4 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
        8 ( 0.00%)      }
        .           
        .               /// Extracts the signature from the closure.
       95 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
        .                   let ty = self.sig_as_fn_ptr_ty();
      190 ( 0.00%)          match ty.kind() {
      380 ( 0.00%)              ty::FnPtr(sig) => *sig,
        .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
        .                   }
      285 ( 0.00%)      }
        .           }
        .           
        .           /// Similar to `ClosureSubsts`; see the above documentation for more.
        .           #[derive(Copy, Clone, Debug, TypeFoldable)]
        .           pub struct GeneratorSubsts<'tcx> {
        .               pub substs: SubstsRef<'tcx>,
        .           }
        .           
-- line 448 ----------------------------------------
-- line 453 ----------------------------------------
        .               pub return_ty: T,
        .               pub witness: T,
        .               pub tupled_upvars_ty: T,
        .           }
        .           
        .           impl<'tcx> GeneratorSubsts<'tcx> {
        .               /// Construct `GeneratorSubsts` from `GeneratorSubstsParts`, containing `Substs`
        .               /// for the generator parent, alongside additional generator-specific components.
        3 ( 0.00%)      pub fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   parts: GeneratorSubstsParts<'tcx, Ty<'tcx>>,
        .               ) -> GeneratorSubsts<'tcx> {
        .                   GeneratorSubsts {
        .                       substs: tcx.mk_substs(
        6 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
        9 ( 0.00%)                      [
        3 ( 0.00%)                          parts.resume_ty,
        .                                   parts.yield_ty,
        3 ( 0.00%)                          parts.return_ty,
        .                                   parts.witness,
        3 ( 0.00%)                          parts.tupled_upvars_ty,
        .                               ]
        .                               .iter()
        .                               .map(|&ty| ty.into()),
        .                           ),
        .                       ),
        .                   }
        6 ( 0.00%)      }
        .           
        .               /// Divides the generator substs into their respective components.
        .               /// The ordering assumed here must match that used by `GeneratorSubsts::new` above.
       86 ( 0.00%)      fn split(self) -> GeneratorSubstsParts<'tcx, GenericArg<'tcx>> {
        .                   match self.substs[..] {
      981 ( 0.00%)              [ref parent_substs @ .., resume_ty, yield_ty, return_ty, witness, tupled_upvars_ty] => {
      430 ( 0.00%)                  GeneratorSubstsParts {
        .                               parent_substs,
        .                               resume_ty,
        .                               yield_ty,
        .                               return_ty,
        .                               witness,
        .                               tupled_upvars_ty,
        .                           }
        .                       }
        .                       _ => bug!("generator substs missing synthetics"),
        .                   }
      258 ( 0.00%)      }
        .           
        .               /// Returns `true` only if enough of the synthetic types are known to
        .               /// allow using all of the methods on `GeneratorSubsts` without panicking.
        .               ///
        .               /// Used primarily by `ty::print::pretty` to be able to handle generator
        .               /// types that haven't had their synthetic types substituted in.
        3 ( 0.00%)      pub fn is_valid(self) -> bool {
        6 ( 0.00%)          self.substs.len() >= 5
        6 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
        6 ( 0.00%)      }
        .           
        .               /// Returns the substitutions of the generator's parent.
        .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
        .                   self.split().parent_substs
        .               }
        .           
        .               /// This describes the types that can be contained in a generator.
        .               /// It will be a type variable initially and unified in the last stages of typeck of a body.
        .               /// It contains a tuple of all the types that could end up on a generator frame.
        .               /// The state transformation MIR pass may only produce layouts which mention types
        .               /// in this tuple. Upvars are not counted here.
        9 ( 0.00%)      pub fn witness(self) -> Ty<'tcx> {
        .                   self.split().witness.expect_ty()
       18 ( 0.00%)      }
        .           
        .               /// Returns an iterator over the list of types of captured paths by the generator.
        .               /// In case there was a type error in figuring out the types of the captured path, an
        .               /// empty iterator is returned.
        .               #[inline]
       78 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       84 ( 0.00%)          match self.tupled_upvars_ty().kind() {
        .                       TyKind::Error(_) => None,
       56 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
        .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
        .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
        .                   }
        .                   .into_iter()
        .                   .flatten()
       52 ( 0.00%)      }
        .           
        .               /// Returns the tuple type representing the upvars for this generator.
        .               #[inline]
        .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
      334 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
        .               }
        .           
        .               /// Returns the type representing the resume type of the generator.
        6 ( 0.00%)      pub fn resume_ty(self) -> Ty<'tcx> {
        .                   self.split().resume_ty.expect_ty()
       12 ( 0.00%)      }
        .           
        .               /// Returns the type representing the yield type of the generator.
        3 ( 0.00%)      pub fn yield_ty(self) -> Ty<'tcx> {
        .                   self.split().yield_ty.expect_ty()
        6 ( 0.00%)      }
        .           
        .               /// Returns the type representing the return type of the generator.
        3 ( 0.00%)      pub fn return_ty(self) -> Ty<'tcx> {
        .                   self.split().return_ty.expect_ty()
        6 ( 0.00%)      }
        .           
        .               /// Returns the "generator signature", which consists of its yield
        .               /// and return types.
        .               ///
        .               /// N.B., some bits of the code prefers to see this wrapped in a
        .               /// binder, but it never contains bound regions. Probably this
        .               /// function should be removed.
      120 ( 0.00%)      pub fn poly_sig(self) -> PolyGenSig<'tcx> {
       30 ( 0.00%)          ty::Binder::dummy(self.sig())
      120 ( 0.00%)      }
        .           
        .               /// Returns the "generator signature", which consists of its resume, yield
        .               /// and return types.
       33 ( 0.00%)      pub fn sig(self) -> GenSig<'tcx> {
       99 ( 0.00%)          ty::GenSig {
        .                       resume_ty: self.resume_ty(),
        .                       yield_ty: self.yield_ty(),
        .                       return_ty: self.return_ty(),
        .                   }
       99 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> GeneratorSubsts<'tcx> {
        .               /// Generator has not been resumed yet.
        .               pub const UNRESUMED: usize = 0;
        .               /// Generator has returned or is completed.
        .               pub const RETURNED: usize = 1;
        .               /// Generator has been poisoned.
-- line 586 ----------------------------------------
-- line 635 ----------------------------------------
        .                       Self::POISONED => Cow::from(Self::POISONED_NAME),
        .                       _ => Cow::from(format!("Suspend{}", v.as_usize() - 3)),
        .                   }
        .               }
        .           
        .               /// The type of the state discriminant used in the generator type.
        .               #[inline]
        .               pub fn discr_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
       12 ( 0.00%)          tcx.types.u32
        .               }
        .           
        .               /// This returns the types of the MIR locals which had to be stored across suspension points.
        .               /// It is calculated in rustc_const_eval::transform::generator::StateTransform.
        .               /// All the types here must be in the tuple in GeneratorInterior.
        .               ///
        .               /// The locals are grouped by their variant number. Note that some locals may
        .               /// be repeated in multiple variants.
-- line 651 ----------------------------------------
-- line 659 ----------------------------------------
        .                   layout.variant_fields.iter().map(move |variant| {
        .                       variant.iter().map(move |field| layout.field_tys[*field].subst(tcx, self.substs))
        .                   })
        .               }
        .           
        .               /// This is the types of the fields of a generator which are not stored in a
        .               /// variant.
        .               #[inline]
       54 ( 0.00%)      pub fn prefix_tys(self) -> impl Iterator<Item = Ty<'tcx>> {
        .                   self.upvar_tys()
       36 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Debug, Copy, Clone, HashStable)]
        .           pub enum UpvarSubsts<'tcx> {
        .               Closure(SubstsRef<'tcx>),
        .               Generator(SubstsRef<'tcx>),
        .           }
        .           
        .           impl<'tcx> UpvarSubsts<'tcx> {
        .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
        .               /// In case there was a type error in figuring out the types of the captured path, an
        .               /// empty iterator is returned.
        .               #[inline]
        .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       40 ( 0.00%)          let tupled_tys = match self {
       38 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
       15 ( 0.00%)              UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
        .                   };
        .           
       86 ( 0.00%)          match tupled_tys.kind() {
        .                       TyKind::Error(_) => None,
       73 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
        .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
        .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
        .                   }
        .                   .into_iter()
        .                   .flatten()
        .               }
        .           
        .               #[inline]
        .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
       66 ( 0.00%)          match self {
       59 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
       21 ( 0.00%)              UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
        .                   }
        .               }
        .           }
        .           
        .           /// An inline const is modeled like
        .           ///
        .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
        .           ///
-- line 711 ----------------------------------------
-- line 760 ----------------------------------------
        .               }
        .           
        .               /// Returns the type of this inline const.
        .               pub fn ty(self) -> Ty<'tcx> {
        .                   self.split().ty.expect_ty()
        .               }
        .           }
        .           
   28,748 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
   20,659 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub enum ExistentialPredicate<'tcx> {
        .               /// E.g., `Iterator`.
        .               Trait(ExistentialTraitRef<'tcx>),
        .               /// E.g., `Iterator::Item = T`.
        .               Projection(ExistentialProjection<'tcx>),
        .               /// E.g., `Send`.
       12 ( 0.00%)      AutoTrait(DefId),
        .           }
        .           
        .           impl<'tcx> ExistentialPredicate<'tcx> {
        .               /// Compares via an ordering that will not change if modules are reordered or other changes are
        .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
    3,810 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
        .                   use self::ExistentialPredicate::*;
    4,100 ( 0.00%)          match (*self, *other) {
        .                       (Trait(_), Trait(_)) => Ordering::Equal,
        .                       (Projection(ref a), Projection(ref b)) => {
        .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
        .                       }
        .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
        .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
        .                       }
        .                       (Trait(_), _) => Ordering::Less,
        .                       (Projection(_), Trait(_)) => Ordering::Greater,
        .                       (Projection(_), _) => Ordering::Less,
        .                       (AutoTrait(_), _) => Ordering::Greater,
        .                   }
    4,572 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
      630 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
        .                   use crate::ty::ToPredicate;
      374 ( 0.00%)          match self.skip_binder() {
        .                       ExistentialPredicate::Trait(tr) => {
        .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
        .                       }
        .                       ExistentialPredicate::Projection(p) => {
        6 ( 0.00%)                  self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
        .                       }
        .                       ExistentialPredicate::AutoTrait(did) => {
        .                           let trait_ref = self.rebind(ty::TraitRef {
        .                               def_id: did,
        .                               substs: tcx.mk_substs_trait(self_ty, &[]),
        .                           });
        .                           trait_ref.without_const().to_predicate(tcx)
        .                       }
        .                   }
      560 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
        .               /// Returns the "principal `DefId`" of this set of existential predicates.
        .               ///
        .               /// A Rust trait object type consists (in addition to a lifetime bound)
        .               /// of a set of trait bounds, which are separated into any number
        .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
        .               /// are the set `{Sync}`.
        .               ///
        .               /// It is also possible to have a "trivial" trait object that
        .               /// consists only of auto traits, with no principal - for example,
        .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
        .               /// is `{Send, Sync}`, while there is no principal. These trait objects
        .               /// have a "trivial" vtable consisting of just the size, alignment,
        .               /// and destructor.
       59 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
      508 ( 0.00%)          self[0]
      331 ( 0.00%)              .map_bound(|this| match this {
        .                           ExistentialPredicate::Trait(tr) => Some(tr),
        .                           _ => None,
      236 ( 0.00%)              })
        .                       .transpose()
      177 ( 0.00%)      }
        .           
       58 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
        .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
      116 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn projection_bounds<'a>(
        .                   &'a self,
        .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
        .                   self.iter().filter_map(|predicate| {
       24 ( 0.00%)              predicate
       68 ( 0.00%)                  .map_bound(|pred| match pred {
       16 ( 0.00%)                      ExistentialPredicate::Projection(projection) => Some(projection),
        .                               _ => None,
        .                           })
        .                           .transpose()
        .                   })
        .               }
        .           
        .               #[inline]
        .               pub fn auto_traits<'a>(&'a self) -> impl Iterator<Item = DefId> + 'a {
-- line 875 ----------------------------------------
-- line 886 ----------------------------------------
        .           ///     T: Foo<U>
        .           ///
        .           /// This would be represented by a trait-reference where the `DefId` is the
        .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
        .           /// and `U` as parameter 1.
        .           ///
        .           /// Trait references also appear in object types like `Foo<U>`, but in
        .           /// that case the `Self` parameter is absent from the substitutions.
   13,664 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
  155,782 ( 0.02%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct TraitRef<'tcx> {
       99 ( 0.00%)      pub def_id: DefId,
   99,714 ( 0.01%)      pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> TraitRef<'tcx> {
      559 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
        .                   TraitRef { def_id, substs }
    2,236 ( 0.00%)      }
        .           
        .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
        .               /// are the parameters defined on trait.
      720 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
      320 ( 0.00%)          ty::Binder::dummy(TraitRef {
        .                       def_id,
      480 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
        .                   })
      640 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn self_ty(&self) -> Ty<'tcx> {
        .                   self.substs.type_at(0)
        .               }
        .           
      624 ( 0.00%)      pub fn from_method(
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_id: DefId,
        .                   substs: SubstsRef<'tcx>,
        .               ) -> ty::TraitRef<'tcx> {
        .                   let defs = tcx.generics_of(trait_id);
        .           
       78 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
      858 ( 0.00%)      }
        .           }
        .           
        .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
        .           
        .           impl<'tcx> PolyTraitRef<'tcx> {
        .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
        .                   self.map_bound_ref(|tr| tr.self_ty())
        .               }
        .           
        .               pub fn def_id(&self) -> DefId {
    1,947 ( 0.00%)          self.skip_binder().def_id
      649 ( 0.00%)      }
        .           
    1,050 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
    2,100 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
        .                       trait_ref,
        .                       constness: ty::BoundConstness::NotConst,
        .                       polarity: ty::ImplPolarity::Positive,
        .                   })
    1,050 ( 0.00%)      }
        .           }
        .           
        .           /// An existential reference to a trait, where `Self` is erased.
        .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
        .           ///
        .           ///     exists T. T: Trait<'a, 'b, X, Y>
        .           ///
        .           /// The substitutions don't include the erased `Self`, only trait
        .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
      260 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    5,732 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ExistentialTraitRef<'tcx> {
    1,066 ( 0.00%)      pub def_id: DefId,
    7,566 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> ExistentialTraitRef<'tcx> {
      108 ( 0.00%)      pub fn erase_self_ty(
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_ref: ty::TraitRef<'tcx>,
        .               ) -> ty::ExistentialTraitRef<'tcx> {
        .                   // Assert there is a Self.
        .                   trait_ref.substs.type_at(0);
        .           
        .                   ty::ExistentialTraitRef {
        .                       def_id: trait_ref.def_id,
        .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
        .                   }
      108 ( 0.00%)      }
        .           
        .               /// Object types don't have a self type specified. Therefore, when
        .               /// we convert the principal trait-ref into a normal trait-ref,
        .               /// you must give *some* self type. A common choice is `mk_err()`
        .               /// or some placeholder type.
       10 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
        .                   // otherwise the escaping vars would be captured by the binder
        .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
        .           
        5 ( 0.00%)          ty::TraitRef { def_id: self.def_id, substs: tcx.mk_substs_trait(self_ty, self.substs) }
       25 ( 0.00%)      }
        .           }
        .           
        .           pub type PolyExistentialTraitRef<'tcx> = Binder<'tcx, ExistentialTraitRef<'tcx>>;
        .           
        .           impl<'tcx> PolyExistentialTraitRef<'tcx> {
        .               pub fn def_id(&self) -> DefId {
        .                   self.skip_binder().def_id
        .               }
        .           
        .               /// Object types don't have a self type specified. Therefore, when
        .               /// we convert the principal trait-ref into a normal trait-ref,
        .               /// you must give *some* self type. A common choice is `mk_err()`
        .               /// or some placeholder type.
      105 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
      105 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
      140 ( 0.00%)      }
        .           }
        .           
    7,905 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum BoundVariableKind {
        .               Ty(BoundTyKind),
        .               Region(BoundRegionKind),
        .               Const,
        .           }
        .           
        .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
-- line 1015 ----------------------------------------
-- line 1016 ----------------------------------------
        .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
        .           /// (which would be represented by the type `PolyTraitRef ==
        .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
        .           /// erase, or otherwise "discharge" these bound vars, we change the
        .           /// type from `Binder<'tcx, T>` to just `T` (see
        .           /// e.g., `liberate_late_bound_regions`).
        .           ///
        .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
   24,200 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
   71,712 ( 0.01%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
        .           
        .           impl<'tcx, T> Binder<'tcx, T>
        .           where
        .               T: TypeFoldable<'tcx>,
        .           {
        .               /// Wraps `value` in a binder, asserting that `value` does not
        .               /// contain any bound vars that would be bound by the
        .               /// binder. This is commonly used to 'inject' a value T into a
        .               /// different binding level.
    6,159 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
   22,250 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
   55,564 ( 0.01%)          Binder(value, ty::List::empty())
    6,128 ( 0.00%)      }
        .           
        .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(vars);
        .                       value.visit_with(&mut validator);
        .                   }
    8,255 ( 0.00%)          Binder(value, vars)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Binder<'tcx, T> {
        .               /// Skips the binder and returns the "bound" value. This is a
        .               /// risky thing to do because it's easy to get confused about
        .               /// De Bruijn indices and the like. It is usually better to
        .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
        .               /// accounting.
        .               ///
        .               /// Some examples where `skip_binder` is reasonable:
        .               ///
        .               /// - extracting the `DefId` from a PolyTraitRef;
        .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
        .               ///   a type parameter `X`, since the type `X` does not reference any regions
        .               pub fn skip_binder(self) -> T {
  203,998 ( 0.03%)          self.0
        .               }
        .           
        .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
      397 ( 0.00%)          self.1
        .               }
        .           
        .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
      603 ( 0.00%)          Binder(&self.0, self.1)
        .               }
        .           
        .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(&T) -> U,
        .               {
        .                   let value = f(&self.0);
        .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
        .           
        .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(&T) -> U,
        .               {
        .                   self.as_ref().map_bound(f)
        .               }
        .           
      428 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(T) -> U,
        .               {
    8,319 ( 0.00%)          let value = f(self.0);
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
   45,909 ( 0.01%)          Binder(value, self.1)
      428 ( 0.00%)      }
        .           
        .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
        .               where
        .                   F: FnOnce(T) -> Result<U, E>,
        .               {
        .                   let value = f(self.0)?;
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
    1,140 ( 0.00%)          Ok(Binder(value, self.1))
        .               }
        .           
        .               /// Wraps a `value` in a binder, using the same bound variables as the
        .               /// current `Binder`. This should not be used if the new value *changes*
        .               /// the bound variables. Note: the (old or new) value itself does not
        .               /// necessarily need to *name* all the bound variables.
        .               ///
        .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
        .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
        .               where
        .                   U: TypeFoldable<'tcx>,
        .               {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
        .                       value.visit_with(&mut validator);
        .                   }
    3,172 ( 0.00%)          Binder(value, self.1)
        .               }
        .           
        .               /// Unwraps and returns the value within, but only if it contains
        .               /// no bound vars at all. (In other words, if this binder --
        .               /// and indeed any enclosing binder -- doesn't bind anything at
        .               /// all.) Otherwise, returns `None`.
        .               ///
        .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
        .               /// binder, but permits late-bound vars bound by enclosing
        .               /// binders, but that would require adjusting the debruijn
        .               /// indices, and given the shallow binding structure we often use,
        .               /// would not be that useful.)
        .               pub fn no_bound_vars(self) -> Option<T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
   27,638 ( 0.00%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
      120 ( 0.00%)      }
        .           
        .               /// Splits the contents into two things that share the same binder
        .               /// level as the original, returning two distinct binders.
        .               ///
        .               /// `f` should consider bound regions at depth 1 to be free, and
        .               /// anything it produces with bound regions at depth 1 will be
        .               /// bound in the resulting return values.
        .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
        .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
        .                   let bound_vars = self.1;
        .                   self.0.map(|v| Binder(v, bound_vars))
        .               }
        .           }
        .           
        .           /// Represents the projection of an associated type. In explicit UFCS
        .           /// form this would be written `<T as Trait<..>>::N`.
      965 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
   12,174 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ProjectionTy<'tcx> {
        .               /// The parameters of the associated item.
    8,630 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .           
        .               /// The `DefId` of the `TraitItem` for the associated type `N`.
        .               ///
        .               /// Note that this is not the `DefId` of the `TraitRef` containing this
        .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
    7,998 ( 0.00%)      pub item_def_id: DefId,
        .           }
        .           
        .           impl<'tcx> ProjectionTy<'tcx> {
    7,028 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
    2,008 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
    8,032 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference and own substs from this projection.
        .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
        .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
    3,234 ( 0.00%)      pub fn trait_ref_and_own_substs(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
    1,386 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
        .                   let trait_generics = tcx.generics_of(def_id);
    2,310 ( 0.00%)          (
        .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
        .                       &self.substs[trait_generics.count()..],
        .                   )
    4,158 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference from this projection.
        .               /// For example, if this is a projection of `<T as Iterator>::Item`,
        .               /// then this function would return a `T: Iterator` trait reference.
        .               ///
        .               /// WARNING: This will drop the substs for generic associated types
        .               /// consider calling [Self::trait_ref_and_own_substs] to get those
        .               /// as well.
    8,919 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
      991 ( 0.00%)          let def_id = self.trait_def_id(tcx);
      991 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
   10,901 ( 0.00%)      }
        .           
    1,965 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
    5,895 ( 0.00%)          self.substs.type_at(0)
    3,930 ( 0.00%)      }
        .           }
        .           
      132 ( 0.00%)  #[derive(Copy, Clone, Debug, TypeFoldable)]
        .           pub struct GenSig<'tcx> {
        .               pub resume_ty: Ty<'tcx>,
        .               pub yield_ty: Ty<'tcx>,
        .               pub return_ty: Ty<'tcx>,
        .           }
        .           
        .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
        .           
        .           /// Signature of a function type, which we have arbitrarily
        .           /// decided to use to refer to the input/output types.
        .           ///
        .           /// - `inputs`: is the list of arguments and their modes.
        .           /// - `output`: is the return type.
        .           /// - `c_variadic`: indicates whether this is a C-variadic function.
   11,266 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    6,507 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct FnSig<'tcx> {
      750 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
    7,772 ( 0.00%)      pub c_variadic: bool,
    1,470 ( 0.00%)      pub unsafety: hir::Unsafety,
    7,836 ( 0.00%)      pub abi: abi::Abi,
        .           }
        .           
        .           impl<'tcx> FnSig<'tcx> {
    6,092 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
   26,279 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
   12,184 ( 0.00%)      }
        .           
    4,001 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
   29,711 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
    8,002 ( 0.00%)      }
        .           
        .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
        .               // method.
        .               fn fake() -> FnSig<'tcx> {
        .                   FnSig {
        .                       inputs_and_output: List::empty(),
        .                       c_variadic: false,
        .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
        .               }
        .           }
        .           
        .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
        .           
        .           impl<'tcx> PolyFnSig<'tcx> {
        .               #[inline]
        .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
    1,131 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
        .               }
        .               #[inline]
        .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    2,199 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
        .               }
        .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
        .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
      166 ( 0.00%)      }
        .               #[inline]
        .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
    1,767 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
        .               }
        .               pub fn c_variadic(&self) -> bool {
      332 ( 0.00%)          self.skip_binder().c_variadic
      166 ( 0.00%)      }
        .               pub fn unsafety(&self) -> hir::Unsafety {
    1,160 ( 0.00%)          self.skip_binder().unsafety
      580 ( 0.00%)      }
        .               pub fn abi(&self) -> abi::Abi {
    2,768 ( 0.00%)          self.skip_binder().abi
      692 ( 0.00%)      }
        .           }
        .           
        .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
        .           
       24 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct ParamTy {
        4 ( 0.00%)      pub index: u32,
        .               pub name: Symbol,
        .           }
        .           
        .           impl<'tcx> ParamTy {
       14 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
        .                   ParamTy { index, name }
        7 ( 0.00%)      }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
        2 ( 0.00%)          ParamTy::new(def.index, def.name)
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
        .                   tcx.mk_ty_param(self.index, self.name)
        .               }
        .           }
        .           
        .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
        .           #[derive(HashStable)]
        .           pub struct ParamConst {
       70 ( 0.00%)      pub index: u32,
       70 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           impl ParamConst {
        .               pub fn new(index: u32, name: Symbol) -> ParamConst {
        .                   ParamConst { index, name }
        .               }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
        .           /// the inference variable is supposed to satisfy the relation
        .           /// *for every value of the placeholder region*. To ensure that doesn't
        .           /// happen, you can use `leak_check`. This is more clearly explained
        .           /// by the [rustc dev guide].
        .           ///
        .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
        .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
        .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
  823,307 ( 0.11%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
       44 ( 0.00%)  pub enum RegionKind {
        .               /// Region bound in a type or fn declaration which will be
        .               /// substituted 'early' -- that is, at the same time when type
        .               /// parameters are substituted.
        .               ReEarlyBound(EarlyBoundRegion),
        .           
        .               /// Region bound in a function scope, which will be substituted when the
        .               /// function is called.
   20,478 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
        .           
        .               /// When checking a function body, the types of all arguments and so forth
        .               /// that refer to bound region parameters are modified to refer to free
        .               /// region parameters.
        .               ReFree(FreeRegion),
        .           
        .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
        .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
        .               /// regions visible from `U`, but not less than regions not visible
        .               /// from `U`.
        .               ReEmpty(ty::UniverseIndex),
        .           
        .               /// Erased region, used by trait selection, in MIR and during codegen.
        .               ReErased,
        .           }
        .           
   10,406 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           pub struct EarlyBoundRegion {
   17,402 ( 0.00%)      pub def_id: DefId,
   23,426 ( 0.00%)      pub index: u32,
    5,052 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           /// A **`const`** **v**ariable **ID**.
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           pub struct ConstVid<'tcx> {
      300 ( 0.00%)      pub index: u32,
        3 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
        .           }
        .           
        .           rustc_index::newtype_index! {
        .               /// A **region** (lifetime) **v**ariable **ID**.
        .               pub struct RegionVid {
        .                   DEBUG_FORMAT = custom,
        .               }
        .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
        .           rustc_index::newtype_index! {
        .               pub struct BoundVar { .. }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct BoundTy {
        .               pub var: BoundVar,
      604 ( 0.00%)      pub kind: BoundTyKind,
        .           }
        .           
   10,346 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum BoundTyKind {
        .               Anon,
        .               Param(Symbol),
        .           }
        .           
        .           impl From<BoundVar> for BoundTy {
        .               fn from(var: BoundVar) -> Self {
        .                   BoundTy { var, kind: BoundTyKind::Anon }
        .               }
        .           }
        .           
        .           /// A `ProjectionPredicate` for an `ExistentialTraitRef`.
       26 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    4,492 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ExistentialProjection<'tcx> {
      824 ( 0.00%)      pub item_def_id: DefId,
    4,748 ( 0.00%)      pub substs: SubstsRef<'tcx>,
    1,187 ( 0.00%)      pub term: Term<'tcx>,
        .           }
        .           
        .           pub type PolyExistentialProjection<'tcx> = Binder<'tcx, ExistentialProjection<'tcx>>;
        .           
        .           impl<'tcx> ExistentialProjection<'tcx> {
        .               /// Extracts the underlying existential trait reference from this projection.
        .               /// For example, if this is a projection of `exists T. <T as Iterator>::Item == X`,
        .               /// then this function would return an `exists T. T: Iterator` existential trait
        .               /// reference.
      266 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::ExistentialTraitRef<'tcx> {
      114 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
       76 ( 0.00%)          let subst_count = tcx.generics_of(def_id).count() - 1;
       38 ( 0.00%)          let substs = tcx.intern_substs(&self.substs[..subst_count]);
        .                   ty::ExistentialTraitRef { def_id, substs }
      342 ( 0.00%)      }
        .           
        .               pub fn with_self_ty(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   self_ty: Ty<'tcx>,
        .               ) -> ty::ProjectionPredicate<'tcx> {
        .                   // otherwise the escaping regions would be captured by the binders
        .                   debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 1566 ----------------------------------------
-- line 1569 ----------------------------------------
        .                       projection_ty: ty::ProjectionTy {
        .                           item_def_id: self.item_def_id,
        .                           substs: tcx.mk_substs_trait(self_ty, self.substs),
        .                       },
        .                       term: self.term,
        .                   }
        .               }
        .           
       60 ( 0.00%)      pub fn erase_self_ty(
        .                   tcx: TyCtxt<'tcx>,
        .                   projection_predicate: ty::ProjectionPredicate<'tcx>,
        .               ) -> Self {
        .                   // Assert there is a Self.
       36 ( 0.00%)          projection_predicate.projection_ty.substs.type_at(0);
        .           
       48 ( 0.00%)          Self {
       24 ( 0.00%)              item_def_id: projection_predicate.projection_ty.item_def_id,
        .                       substs: tcx.intern_substs(&projection_predicate.projection_ty.substs[1..]),
       12 ( 0.00%)              term: projection_predicate.term,
        .                   }
       84 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> PolyExistentialProjection<'tcx> {
       30 ( 0.00%)      pub fn with_self_ty(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   self_ty: Ty<'tcx>,
        .               ) -> ty::PolyProjectionPredicate<'tcx> {
       30 ( 0.00%)          self.map_bound(|p| p.with_self_ty(tcx, self_ty))
       36 ( 0.00%)      }
        .           
        .               pub fn item_def_id(&self) -> DefId {
        8 ( 0.00%)          self.skip_binder().item_def_id
        4 ( 0.00%)      }
        .           }
        .           
        .           /// Region utilities
        .           impl RegionKind {
        .               /// Is this region named by the user?
        .               pub fn has_name(&self) -> bool {
        .                   match *self {
        .                       RegionKind::ReEarlyBound(ebr) => ebr.has_name(),
-- line 1611 ----------------------------------------
-- line 1616 ----------------------------------------
        .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
        .                       RegionKind::ReEmpty(_) => false,
        .                       RegionKind::ReErased => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_late_bound(&self) -> bool {
      425 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_placeholder(&self) -> bool {
        .                   matches!(*self, ty::RePlaceholder(..))
        .               }
        .           
        .               #[inline]
        .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
   14,093 ( 0.00%)          match *self {
        .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               pub fn type_flags(&self) -> TypeFlags {
        .                   let mut flags = TypeFlags::empty();
        .           
   38,248 ( 0.01%)          match *self {
        .                       ty::ReVar(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
        .                           flags = flags | TypeFlags::HAS_RE_INFER;
        .                       }
        .                       ty::RePlaceholder(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
        .                       ty::ReErased => {
        .                           flags = flags | TypeFlags::HAS_RE_ERASED;
        .                       }
        .                   }
        .           
        .                   debug!("type_flags({:?}) = {:?}", self, flags);
        .           
        .                   flags
    1,050 ( 0.00%)      }
        .           
        .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
        .               /// For example, consider the regions in this snippet of code:
        .               ///
        .               /// ```
        .               /// impl<'a> Foo {
        .               ///      ^^ -- early bound, declared on an impl
        .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
        .           
        .               #[inline(always)]
        .               pub fn flags(&self) -> TypeFlags {
        .                   self.flags
        .               }
        .           
        .               #[inline]
        .               pub fn is_unit(&self) -> bool {
      972 ( 0.00%)          match self.kind() {
      259 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_never(&self) -> bool {
    7,175 ( 0.00%)          matches!(self.kind(), Never)
        .               }
        .           
        .               #[inline]
        .               pub fn is_primitive(&self) -> bool {
        .                   self.kind().is_primitive()
        .               }
        .           
        .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_ref(&self) -> bool {
        .                   matches!(self.kind(), Ref(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_var(&self) -> bool {
   10,148 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
    7,686 ( 0.00%)          match self.kind() {
      853 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_infer(&self) -> bool {
       39 ( 0.00%)          matches!(self.kind(), Infer(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_phantom_data(&self) -> bool {
        .                   if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
        .               }
        .           
        .               #[inline]
-- line 1770 ----------------------------------------
-- line 1775 ----------------------------------------
        .               /// Returns `true` if this type is a `str`.
        .               #[inline]
        .               pub fn is_str(&self) -> bool {
        .                   *self.kind() == Str
        .               }
        .           
        .               #[inline]
        .               pub fn is_param(&self, index: u32) -> bool {
       29 ( 0.00%)          match self.kind() {
        .                       ty::Param(ref data) => data.index == index,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_slice(&self) -> bool {
        .                   match self.kind() {
        .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_array(&self) -> bool {
      101 ( 0.00%)          matches!(self.kind(), Array(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_simd(&self) -> bool {
        .                   match self.kind() {
        .                       Adt(def, _) => def.repr.simd(),
        .                       _ => false,
        .                   }
        .               }
        .           
       40 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
       80 ( 0.00%)          match self.kind() {
        .                       Array(ty, _) | Slice(ty) => ty,
        .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
        .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
        .                   }
       40 ( 0.00%)      }
        .           
        .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
        .                   match self.kind() {
        .                       Adt(def, substs) => {
        .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
        .                           let variant = def.non_enum_variant();
        .                           let f0_ty = variant.fields[0].ty(tcx, substs);
        .           
-- line 1824 ----------------------------------------
-- line 1838 ----------------------------------------
        .                           }
        .                       }
        .                       _ => bug!("`simd_size_and_type` called on invalid type"),
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_region_ptr(&self) -> bool {
       10 ( 0.00%)          matches!(self.kind(), Ref(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_mutable_ptr(&self) -> bool {
        9 ( 0.00%)          matches!(
        6 ( 0.00%)              self.kind(),
        .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
        .                           | Ref(_, _, hir::Mutability::Mut)
        .                   )
        .               }
        .           
        .               /// Get the mutability of the reference or `None` when not a reference
        .               #[inline]
        .               pub fn ref_mutability(&self) -> Option<hir::Mutability> {
-- line 1860 ----------------------------------------
-- line 1861 ----------------------------------------
        .                   match self.kind() {
        .                       Ref(_, _, mutability) => Some(*mutability),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_unsafe_ptr(&self) -> bool {
      468 ( 0.00%)          matches!(self.kind(), RawPtr(_))
        .               }
        .           
        .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
        .               #[inline]
        .               pub fn is_any_ptr(&self) -> bool {
        .                   self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
        .               }
        .           
        .               #[inline]
        .               pub fn is_box(&self) -> bool {
    7,760 ( 0.00%)          match self.kind() {
    1,724 ( 0.00%)              Adt(def, _) => def.is_box(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               /// Panics if called on any type other than `Box<T>`.
      166 ( 0.00%)      pub fn boxed_ty(&self) -> Ty<'tcx> {
      166 ( 0.00%)          match self.kind() {
      415 ( 0.00%)              Adt(def, substs) if def.is_box() => substs.type_at(0),
        .                       _ => bug!("`boxed_ty` is called on non-box type {:?}", self),
        .                   }
      166 ( 0.00%)      }
        .           
        .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
        .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
        .               /// contents are abstract to rustc.)
        .               #[inline]
        .               pub fn is_scalar(&self) -> bool {
       85 ( 0.00%)          matches!(
      209 ( 0.00%)              self.kind(),
        .                       Bool | Char
        .                           | Int(_)
        .                           | Float(_)
        .                           | Uint(_)
        .                           | FnDef(..)
        .                           | FnPtr(_)
        .                           | RawPtr(_)
        .                           | Infer(IntVar(_) | FloatVar(_))
        .                   )
        .               }
        .           
        .               /// Returns `true` if this type is a floating point type.
        .               #[inline]
        .               pub fn is_floating_point(&self) -> bool {
        7 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_trait(&self) -> bool {
        .                   matches!(self.kind(), Dynamic(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_enum(&self) -> bool {
       12 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
        .               }
        .           
        .               #[inline]
        .               pub fn is_union(&self) -> bool {
      789 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
        .               }
        .           
        .               #[inline]
        .               pub fn is_closure(&self) -> bool {
      282 ( 0.00%)          matches!(self.kind(), Closure(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_generator(&self) -> bool {
      363 ( 0.00%)          matches!(self.kind(), Generator(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_integral(&self) -> bool {
      436 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh_ty(&self) -> bool {
        .                   matches!(self.kind(), Infer(FreshTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh(&self) -> bool {
      965 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_char(&self) -> bool {
        .                   matches!(self.kind(), Char)
        .               }
        .           
        .               #[inline]
-- line 1963 ----------------------------------------
-- line 1967 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_signed(&self) -> bool {
        .                   matches!(self.kind(), Int(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ptr_sized_integral(&self) -> bool {
      312 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
        .               }
        .           
        .               #[inline]
        .               pub fn has_concrete_skeleton(&self) -> bool {
        .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
        .               }
        .           
        .               /// Returns the type and mutability of `*ty`.
        .               ///
        .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
        .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
    1,558 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
    9,785 ( 0.00%)          match self.kind() {
      538 ( 0.00%)              Adt(def, _) if def.is_box() => {
      208 ( 0.00%)                  Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
        .                       }
    5,004 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
      132 ( 0.00%)              RawPtr(mt) if explicit => Some(*mt),
        .                       _ => None,
        .                   }
    3,116 ( 0.00%)      }
        .           
        .               /// Returns the type of `ty[i]`.
        .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
        4 ( 0.00%)          match self.kind() {
        .                       Array(ty, _) | Slice(ty) => Some(ty),
        .                       _ => None,
        .                   }
        1 ( 0.00%)      }
        .           
   12,216 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
    6,108 ( 0.00%)          match self.kind() {
    4,581 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
        .                       FnPtr(f) => *f,
        .                       Error(_) => {
        .                           // ignore errors (#54954)
        .                           ty::Binder::dummy(FnSig::fake())
        .                       }
        .                       Closure(..) => bug!(
        .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
        .                       ),
        .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
        .                   }
   13,743 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn is_fn(&self) -> bool {
       45 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fn_ptr(&self) -> bool {
        .                   matches!(self.kind(), FnPtr(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_impl_trait(&self) -> bool {
        .                   matches!(self.kind(), Opaque(..))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
    1,845 ( 0.00%)          match self.kind() {
        .                       Adt(adt, _) => Some(adt),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Iterates over tuple fields.
        .               /// Panics when called on anything but a tuple.
       77 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
      532 ( 0.00%)          match self.kind() {
      386 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
        .                       _ => bug!("tuple_fields called on non-tuple"),
        .                   }
      154 ( 0.00%)      }
        .           
        .               /// Get the `i`-th element of a tuple.
        .               /// Panics when called on anything but a tuple.
       33 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
       66 ( 0.00%)          match self.kind() {
       66 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
        .                       _ => bug!("tuple_fields called on non-tuple"),
        .                   }
       66 ( 0.00%)      }
        .           
        .               /// If the type contains variants, returns the valid range of variant indices.
        .               //
        .               // FIXME: This requires the optimized MIR in the case of generators.
        .               #[inline]
        .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
        .                   match self.kind() {
        .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2073 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// If the type contains variants, returns the variant for `variant_index`.
        .               /// Panics if `variant_index` is out of range.
        .               //
        .               // FIXME: This requires the optimized MIR in the case of generators.
        .               #[inline]
       40 ( 0.00%)      pub fn discriminant_for_variant(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   variant_index: VariantIdx,
        .               ) -> Option<Discr<'tcx>> {
       40 ( 0.00%)          match self.kind() {
       16 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
        .                           // This can actually happen during CTFE, see
        .                           // https://github.com/rust-lang/rust/issues/89765.
        .                           None
        .                       }
        8 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
        .                           Some(adt.discriminant_for_variant(tcx, variant_index))
        .                       }
        .                       TyKind::Generator(def_id, substs, _) => {
        .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
        .                       }
        .                       _ => None,
        .                   }
       32 ( 0.00%)      }
        .           
        .               /// Returns the type of the discriminant of this type.
      550 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
      275 ( 0.00%)          match self.kind() {
      416 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
        .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
        .           
        .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
        .                           let assoc_items = tcx.associated_item_def_ids(
        .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
        .                           );
        .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
        .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
        .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
        .           
        .                       ty::Bound(..)
        .                       | ty::Placeholder(_)
        .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
        .                       }
        .                   }
      440 ( 0.00%)      }
        .           
        .               /// Returns the type of metadata for (potentially fat) pointers to this type.
        .               pub fn ptr_metadata_ty(
        .                   &'tcx self,
        .                   tcx: TyCtxt<'tcx>,
        .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
        .               ) -> Ty<'tcx> {
        .                   let tail = tcx.struct_tail_with_normalize(self, normalize);
-- line 2151 ----------------------------------------
-- line 2200 ----------------------------------------
        .               /// function converts such a special type into the closure
        .               /// kind. To go the other way, use
        .               /// `tcx.closure_kind_ty(closure_kind)`.
        .               ///
        .               /// Note that during type checking, we use an inference variable
        .               /// to represent the closure kind, because it has not yet been
        .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
        .               /// is complete, that type variable will be unified.
      254 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
      508 ( 0.00%)          match self.kind() {
      508 ( 0.00%)              Int(int_ty) => match int_ty {
        .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
        .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
        .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
        .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
        .                       },
        .           
        .                       // "Bound" types appear in canonical queries when the
        .                       // closure type is not yet known
        .                       Bound(..) | Infer(_) => None,
        .           
        .                       Error(_) => Some(ty::ClosureKind::Fn),
        .           
        .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
        .                   }
      254 ( 0.00%)      }
        .           
        .               /// Fast path helper for testing if a type is `Sized`.
        .               ///
        .               /// Returning true means the type is known to be sized. Returning
        .               /// `false` means nothing -- could be sized, might not be.
        .               ///
        .               /// Note that we could never rely on the fact that a type such as `[_]` is
        .               /// trivially `!Sized` because we could be in a type environment with a
        .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
        .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
        .               /// this method doesn't return `Option<bool>`.
   24,840 ( 0.00%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
   16,560 ( 0.00%)          match self.kind() {
        .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
        .                       | ty::Uint(_)
        .                       | ty::Int(_)
        .                       | ty::Bool
        .                       | ty::Float(_)
        .                       | ty::FnDef(..)
        .                       | ty::FnPtr(_)
        .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
        .                       | ty::GeneratorWitness(..)
        .                       | ty::Array(..)
        .                       | ty::Closure(..)
        .                       | ty::Never
        .                       | ty::Error(_) => true,
        .           
        .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
        .           
      340 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
        .           
    2,031 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
        .           
        .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
        .           
        .                       ty::Infer(ty::TyVar(_)) => false,
        .           
        .                       ty::Bound(..)
        .                       | ty::Placeholder(..)
        .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
        .                       }
        .                   }
   24,840 ( 0.00%)      }
        .           }
        .           
        .           /// Extra information about why we ended up with a particular variance.
        .           /// This is only used to add more information to error messages, and
        .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
        .           /// may lead to confusing notes in error messages, it will never cause
        .           /// a miscompilation or unsoundness.
        .           ///
-- line 2280 ----------------------------------------
-- line 2295 ----------------------------------------
        .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
        .                   param_index: u32,
        .               },
        .           }
        .           
        .           impl<'tcx> VarianceDiagInfo<'tcx> {
        .               /// Mirrors `Variance::xform` - used to 'combine' the existing
        .               /// and new `VarianceDiagInfo`s when our variance changes.
    7,794 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
        .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
   11,691 ( 0.00%)          match self {
        .                       VarianceDiagInfo::None => other,
        .                       VarianceDiagInfo::Invariant { .. } => self,
        .                   }
    3,897 ( 0.00%)      }
        .           }

2,831,712 ( 0.38%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 180 ----------------------------------------
        .           /// assert_eq!(v, &[0.into()]);
        .           ///
        .           /// // Ensure that the last item was dropped.
        .           /// assert!(weak.upgrade().is_none());
        .           /// ```
        .           #[stable(feature = "drop_in_place", since = "1.8.0")]
        .           #[lang = "drop_in_place"]
        .           #[allow(unconditional_recursion)]
9,286,678 ( 1.23%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
        .               // Code here does not matter - this is replaced by the
        .               // real drop glue by the compiler.
        .           
        .               // SAFETY: see comment above
        .               unsafe { drop_in_place(to_drop) }
        .           }
        .           
        .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 206 ----------------------------------------
        .           #[inline(always)]
        .           #[must_use]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_promotable]
        .           #[rustc_const_stable(feature = "const_ptr_null", since = "1.24.0")]
        .           #[rustc_diagnostic_item = "ptr_null"]
        .           pub const fn null<T>() -> *const T {
        .               0 as *const T
      227 ( 0.00%)  }
        .           
        .           /// Creates a null mutable raw pointer.
        .           ///
        .           /// # Examples
        .           ///
        .           /// ```
        .           /// use std::ptr;
        .           ///
-- line 222 ----------------------------------------
-- line 251 ----------------------------------------
        .           /// let x = [5, 6, 7];
        .           /// let raw_pointer = x.as_ptr();
        .           /// let slice = ptr::slice_from_raw_parts(raw_pointer, 3);
        .           /// assert_eq!(unsafe { &*slice }[2], 7);
        .           /// ```
        .           #[inline]
        .           #[stable(feature = "slice_from_raw_parts", since = "1.42.0")]
        .           #[rustc_const_unstable(feature = "const_slice_from_raw_parts", issue = "67456")]
   61,744 ( 0.01%)  pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
   77,180 ( 0.01%)      from_raw_parts(data.cast(), len)
   30,872 ( 0.00%)  }
        .           
        .           /// Performs the same functionality as [`slice_from_raw_parts`], except that a
        .           /// raw mutable slice is returned, as opposed to a raw immutable slice.
        .           ///
        .           /// See the documentation of [`slice_from_raw_parts`] for more details.
        .           ///
        .           /// This function is safe, but actually using the return value is unsafe.
        .           /// See the documentation of [`slice::from_raw_parts_mut`] for slice safety requirements.
-- line 269 ----------------------------------------
-- line 283 ----------------------------------------
        .           ///     (*slice)[2] = 99; // assign a value at an index in the slice
        .           /// };
        .           ///
        .           /// assert_eq!(unsafe { &*slice }[2], 99);
        .           /// ```
        .           #[inline]
        .           #[stable(feature = "slice_from_raw_parts", since = "1.42.0")]
        .           #[rustc_const_unstable(feature = "const_slice_from_raw_parts", issue = "67456")]
  211,488 ( 0.03%)  pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
   79,308 ( 0.01%)      from_raw_parts_mut(data.cast(), len)
   52,872 ( 0.01%)  }
        .           
        .           /// Swaps the values at two mutable locations of the same type, without
        .           /// deinitializing either.
        .           ///
        .           /// But for the following two exceptions, this function is semantically
        .           /// equivalent to [`mem::swap`]:
        .           ///
        .           /// * It operates on raw pointers instead of references. When references are
-- line 301 ----------------------------------------
-- line 366 ----------------------------------------
        .               let mut tmp = MaybeUninit::<T>::uninit();
        .           
        .               // Perform the swap
        .               // SAFETY: the caller must guarantee that `x` and `y` are
        .               // valid for writes and properly aligned. `tmp` cannot be
        .               // overlapping either `x` or `y` because `tmp` was just allocated
        .               // on the stack as a separate allocated object.
        .               unsafe {
        2 ( 0.00%)          copy_nonoverlapping(x, tmp.as_mut_ptr(), 1);
        2 ( 0.00%)          copy(y, x, 1); // `x` and `y` may overlap
        .                   copy_nonoverlapping(tmp.as_ptr(), y, 1);
        .               }
        .           }
        .           
        .           /// Swaps `count * size_of::<T>()` bytes between the two regions of memory
        .           /// beginning at `x` and `y`. The two regions must *not* overlap.
        .           ///
        .           /// # Safety
-- line 383 ----------------------------------------
-- line 413 ----------------------------------------
        .           /// }
        .           ///
        .           /// assert_eq!(x, [7, 8, 3, 4]);
        .           /// assert_eq!(y, [1, 2, 9]);
        .           /// ```
        .           #[inline]
        .           #[stable(feature = "swap_nonoverlapping", since = "1.27.0")]
        .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
       42 ( 0.00%)  pub const unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {
       14 ( 0.00%)      let x = x as *mut u8;
        7 ( 0.00%)      let y = y as *mut u8;
       49 ( 0.00%)      let len = mem::size_of::<T>() * count;
        .               // SAFETY: the caller must guarantee that `x` and `y` are
        .               // valid for writes and properly aligned.
       14 ( 0.00%)      unsafe { swap_nonoverlapping_bytes(x, y, len) }
       14 ( 0.00%)  }
        .           
        .           #[inline]
        .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
       35 ( 0.00%)  pub(crate) const unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {
        .               // NOTE(eddyb) SPIR-V's Logical addressing model doesn't allow for arbitrary
        .               // reinterpretation of values as (chunkable) byte arrays, and the loop in the
        .               // block optimization in `swap_nonoverlapping_bytes` is hard to rewrite back
        .               // into the (unoptimized) direct swapping implementation, so we disable it.
        .               // FIXME(eddyb) the block optimization also prevents MIR optimizations from
        .               // understanding `mem::replace`, `Option::take`, etc. - a better overall
        .               // solution might be to make `swap_nonoverlapping` into an intrinsic, which
        .               // a backend can choose to implement using the block optimization, or not.
        .               #[cfg(not(target_arch = "spirv"))]
        7 ( 0.00%)      {
        .                   // Only apply the block optimization in `swap_nonoverlapping_bytes` for types
        .                   // at least as large as the block size, to avoid pessimizing codegen.
        7 ( 0.00%)          if mem::size_of::<T>() >= 32 {
        .                       // SAFETY: the caller must uphold the safety contract for `swap_nonoverlapping`.
       14 ( 0.00%)              unsafe { swap_nonoverlapping(x, y, 1) };
        .                       return;
        .                   }
        .               }
        .           
        .               // Direct swapping, for the cases not going through the block optimization.
        .               // SAFETY: the caller must guarantee that `x` and `y` are valid
        .               // for writes, properly aligned, and non-overlapping.
        .               unsafe {
       14 ( 0.00%)          let z = read(x);
        .                   copy_nonoverlapping(y, x, 1);
        .                   write(y, z);
        .               }
       21 ( 0.00%)  }
        .           
        .           #[inline]
        .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
       70 ( 0.00%)  const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
        .               // The approach here is to utilize simd to swap x & y efficiently. Testing reveals
        .               // that swapping either 32 bytes or 64 bytes at a time is most efficient for Intel
        .               // Haswell E processors. LLVM is more able to optimize if we give a struct a
        .               // #[repr(simd)], even if we don't actually use this struct directly.
        .               //
        .               // FIXME repr(simd) broken on emscripten and redox
        .               #[cfg_attr(not(any(target_os = "emscripten", target_os = "redox")), repr(simd))]
        .               struct Block(u64, u64, u64, u64);
        .               struct UnalignedBlock(u64, u64, u64, u64);
        .           
        7 ( 0.00%)      let block_size = mem::size_of::<Block>();
        .           
        .               // Loop through x & y, copying them `Block` at a time
        .               // The optimizer should unroll the loop fully for most types
        .               // N.B. We can't use a for loop as the `range` impl calls `mem::swap` recursively
        7 ( 0.00%)      let mut i = 0;
      126 ( 0.00%)      while i + block_size <= len {
        .                   // Create some uninitialized memory as scratch space
        .                   // Declaring `t` here avoids aligning the stack when this loop is unused
        .                   let mut t = mem::MaybeUninit::<Block>::uninit();
       21 ( 0.00%)          let t = t.as_mut_ptr() as *mut u8;
        .           
        .                   // SAFETY: As `i < len`, and as the caller must guarantee that `x` and `y` are valid
        .                   // for `len` bytes, `x + i` and `y + i` must be valid addresses, which fulfills the
        .                   // safety contract for `add`.
        .                   //
        .                   // Also, the caller must guarantee that `x` and `y` are valid for writes, properly aligned,
        .                   // and non-overlapping, which fulfills the safety contract for `copy_nonoverlapping`.
        .                   unsafe {
       42 ( 0.00%)              let x = x.add(i);
       42 ( 0.00%)              let y = y.add(i);
        .           
        .                       // Swap a block of bytes of x & y, using t as a temporary buffer
        .                       // This should be optimized into efficient SIMD operations where available
       14 ( 0.00%)              copy_nonoverlapping(x, t, block_size);
       14 ( 0.00%)              copy_nonoverlapping(y, x, block_size);
       14 ( 0.00%)              copy_nonoverlapping(t, y, block_size);
        .                   }
       49 ( 0.00%)          i += block_size;
        .               }
        .           
       21 ( 0.00%)      if i < len {
        .                   // Swap any remaining bytes
        .                   let mut t = mem::MaybeUninit::<UnalignedBlock>::uninit();
        .                   let rem = len - i;
        .           
        .                   let t = t.as_mut_ptr() as *mut u8;
        .           
        .                   // SAFETY: see previous safety comment.
        .                   unsafe {
-- line 514 ----------------------------------------
-- line 515 ----------------------------------------
        .                       let x = x.add(i);
        .                       let y = y.add(i);
        .           
        .                       copy_nonoverlapping(x, t, rem);
        .                       copy_nonoverlapping(y, x, rem);
        .                       copy_nonoverlapping(t, y, rem);
        .                   }
        .               }
       21 ( 0.00%)  }
        .           
        .           /// Moves `src` into the pointed `dst`, returning the previous `dst` value.
        .           ///
        .           /// Neither value is dropped.
        .           ///
        .           /// This function is semantically equivalent to [`mem::replace`] except that it
        .           /// operates on raw pointers instead of references. When references are
        .           /// available, [`mem::replace`] should be preferred.
-- line 531 ----------------------------------------
-- line 677 ----------------------------------------
        .           ///
        .           /// assert_eq!(s, "bar");
        .           /// ```
        .           ///
        .           /// [valid]: self#safety
        .           #[inline]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_ptr_read", issue = "80377")]
  296,881 ( 0.04%)  pub const unsafe fn read<T>(src: *const T) -> T {
        .               // We are calling the intrinsics directly to avoid function calls in the generated code
        .               // as `intrinsics::copy_nonoverlapping` is a wrapper function.
        .               extern "rust-intrinsic" {
        .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
        .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
        .               }
        .           
   98,931 ( 0.01%)      let mut tmp = MaybeUninit::<T>::uninit();
        .               // SAFETY: the caller must guarantee that `src` is valid for reads.
        .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
        .               // the stack as a separate allocated object.
        .               //
        .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
        .               // to be properly initialized.
        .               unsafe {
  478,642 ( 0.06%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
3,674,663 ( 0.49%)          tmp.assume_init()
        .               }
  158,798 ( 0.02%)  }
        .           
        .           /// Reads the value from `src` without moving it. This leaves the
        .           /// memory in `src` unchanged.
        .           ///
        .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
        .           ///
        .           /// # Safety
        .           ///
-- line 712 ----------------------------------------
-- line 872 ----------------------------------------
        .           /// swap(&mut foo, &mut bar);
        .           ///
        .           /// assert_eq!(foo, "bar");
        .           /// assert_eq!(bar, "foo");
        .           /// ```
        .           #[inline]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
  239,314 ( 0.03%)  pub const unsafe fn write<T>(dst: *mut T, src: T) {
        .               // We are calling the intrinsics directly to avoid function calls in the generated code
        .               // as `intrinsics::copy_nonoverlapping` is a wrapper function.
        .               extern "rust-intrinsic" {
        .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
        .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
        .               }
        .           
        .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
        .               // `dst` cannot overlap `src` because the caller has mutable access
        .               // to `dst` while `src` is owned by this function.
        .               unsafe {
8,426,669 ( 1.12%)          copy_nonoverlapping(&src as *const T, dst, 1);
        .                   intrinsics::forget(src);
        .               }
  135,668 ( 0.02%)  }
        .           
        .           /// Overwrites a memory location with the given value without reading or
        .           /// dropping the old value.
        .           ///
        .           /// Unlike [`write()`], the pointer may be unaligned.
        .           ///
        .           /// `write_unaligned` does not drop the contents of `dst`. This is safe, but it
        .           /// could leak allocations or resources, so care should be taken not to overwrite
-- line 903 ----------------------------------------
-- line 1206 ----------------------------------------
        .               if stride == 1 {
        .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
        .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
        .                   //
        .                   //    round_up_to_next_alignment(p, a) - p
        .                   //
        .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
        .                   // for LLVM to be able to utilize the various optimizations it knows about.
    1,233 ( 0.00%)          return wrapping_sub(
    3,464 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
        .                       p as usize,
        .                   );
        .               }
        .           
        .               let pmoda = p as usize & a_minus_one;
        .               if pmoda == 0 {
        .                   // Already aligned. Yay!
        .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
        .           /// assert!(std::ptr::eq(
        .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
        .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
        .           /// ));
        .           /// ```
        .           #[stable(feature = "ptr_eq", since = "1.17.0")]
        .           #[inline]
        .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
  253,241 ( 0.03%)      a == b
        .           }
        .           
        .           /// Hash a raw pointer.
        .           ///
        .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
        .           /// by its address rather than the value it points to
        .           /// (which is what the `Hash for &T` implementation does).
        .           ///
-- line 1364 ----------------------------------------

1,593,150 ( 0.21%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/proc-macro2-1.0.36/src/wrapper.rs
--------------------------------------------------------------------------------
Ir               

-- line 3 ----------------------------------------
      .           use std::fmt::{self, Debug, Display};
      .           use std::iter::FromIterator;
      .           use std::ops::RangeBounds;
      .           use std::panic;
      .           #[cfg(super_unstable)]
      .           use std::path::PathBuf;
      .           use std::str::FromStr;
      .           
 11,970 ( 0.00%)  #[derive(Clone)]
      .           pub(crate) enum TokenStream {
  3,420 ( 0.00%)      Compiler(DeferredTokenStream),
      .               Fallback(fallback::TokenStream),
      .           }
      .           
      .           // Work around https://github.com/rust-lang/rust/issues/65080.
      .           // In `impl Extend<TokenTree> for TokenStream` which is used heavily by quote,
      .           // we hold on to the appended tokens and do proc_macro::TokenStream::extend as
      .           // late as possible to batch together consecutive uses of the Extend impl.
  7,980 ( 0.00%)  #[derive(Clone)]
      .           pub(crate) struct DeferredTokenStream {
  4,560 ( 0.00%)      stream: proc_macro::TokenStream,
  2,850 ( 0.00%)      extra: Vec<proc_macro::TokenTree>,
      .           }
      .           
      .           pub(crate) enum LexError {
      .               Compiler(proc_macro::LexError),
      .               Fallback(fallback::LexError),
      .           }
      .           
      .           impl LexError {
-- line 32 ----------------------------------------
-- line 37 ----------------------------------------
      .               }
      .           }
      .           
      .           fn mismatch() -> ! {
      .               panic!("stable/nightly mismatch")
      .           }
      .           
      .           impl DeferredTokenStream {
 16,812 ( 0.00%)      fn new(stream: proc_macro::TokenStream) -> Self {
 22,416 ( 0.00%)          DeferredTokenStream {
  5,604 ( 0.00%)              stream,
 11,208 ( 0.00%)              extra: Vec::new(),
      .                   }
  5,604 ( 0.00%)      }
      .           
      .               fn is_empty(&self) -> bool {
      .                   self.stream.is_empty() && self.extra.is_empty()
      .               }
      .           
 11,067 ( 0.00%)      fn evaluate_now(&mut self) {
      .                   // If-check provides a fast short circuit for the common case of `extra`
      .                   // being empty, which saves a round trip over the proc macro bridge.
      .                   // Improves macro expansion time in winrt by 6% in debug mode.
 18,445 ( 0.00%)          if !self.extra.is_empty() {
 15,712 ( 0.00%)              self.stream.extend(self.extra.drain(..));
      .                   }
  7,378 ( 0.00%)      }
      .           
  5,918 ( 0.00%)      fn into_token_stream(mut self) -> proc_macro::TokenStream {
  8,877 ( 0.00%)          self.evaluate_now();
  5,918 ( 0.00%)          self.stream
 14,795 ( 0.00%)      }
      .           }
      .           
      .           impl TokenStream {
  6,573 ( 0.00%)      pub fn new() -> Self {
  8,764 ( 0.00%)          if inside_proc_macro() {
 35,056 ( 0.00%)              TokenStream::Compiler(DeferredTokenStream::new(proc_macro::TokenStream::new()))
      .                   } else {
      .                       TokenStream::Fallback(fallback::TokenStream::new())
      .                   }
  4,382 ( 0.00%)      }
      .           
      .               pub fn is_empty(&self) -> bool {
      .                   match self {
      .                       TokenStream::Compiler(tts) => tts.is_empty(),
      .                       TokenStream::Fallback(tts) => tts.is_empty(),
      .                   }
      .               }
      .           
  1,460 ( 0.00%)      fn unwrap_nightly(self) -> proc_macro::TokenStream {
  2,190 ( 0.00%)          match self {
 11,680 ( 0.00%)              TokenStream::Compiler(s) => s.into_token_stream(),
      .                       TokenStream::Fallback(_) => mismatch(),
      .                   }
  3,650 ( 0.00%)      }
      .           
      .               fn unwrap_stable(self) -> fallback::TokenStream {
      .                   match self {
      .                       TokenStream::Compiler(_) => mismatch(),
      .                       TokenStream::Fallback(s) => s,
      .                   }
      .               }
      .           }
      .           
      .           impl FromStr for TokenStream {
      .               type Err = LexError;
      .           
  1,841 ( 0.00%)      fn from_str(src: &str) -> Result<TokenStream, LexError> {
  1,315 ( 0.00%)          if inside_proc_macro() {
  4,997 ( 0.00%)              Ok(TokenStream::Compiler(DeferredTokenStream::new(
  4,208 ( 0.00%)                  proc_macro_parse(src)?,
      .                       )))
      .                   } else {
      .                       Ok(TokenStream::Fallback(src.parse()?))
      .                   }
    526 ( 0.00%)      }
      .           }
      .           
      .           // Work around https://github.com/rust-lang/rust/issues/58736.
    789 ( 0.00%)  fn proc_macro_parse(src: &str) -> Result<proc_macro::TokenStream, LexError> {
  5,786 ( 0.00%)      let result = panic::catch_unwind(|| src.parse().map_err(LexError::Compiler));
  2,893 ( 0.00%)      result.unwrap_or_else(|_| Err(LexError::call_site()))
    789 ( 0.00%)  }
      .           
      .           impl Display for TokenStream {
      .               fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
      .                   match self {
      .                       TokenStream::Compiler(tts) => Display::fmt(&tts.clone().into_token_stream(), f),
      .                       TokenStream::Fallback(tts) => Display::fmt(tts, f),
      .                   }
      .               }
      .           }
      .           
      .           impl From<proc_macro::TokenStream> for TokenStream {
    180 ( 0.00%)      fn from(inner: proc_macro::TokenStream) -> TokenStream {
    420 ( 0.00%)          TokenStream::Compiler(DeferredTokenStream::new(inner))
     60 ( 0.00%)      }
      .           }
      .           
      .           impl From<TokenStream> for proc_macro::TokenStream {
     30 ( 0.00%)      fn from(inner: TokenStream) -> proc_macro::TokenStream {
     45 ( 0.00%)          match inner {
    330 ( 0.00%)              TokenStream::Compiler(inner) => inner.into_token_stream(),
      .                       TokenStream::Fallback(inner) => inner.to_string().parse().unwrap(),
      .                   }
     45 ( 0.00%)      }
      .           }
      .           
      .           impl From<fallback::TokenStream> for TokenStream {
      .               fn from(inner: fallback::TokenStream) -> TokenStream {
      .                   TokenStream::Fallback(inner)
      .               }
      .           }
      .           
      .           // Assumes inside_proc_macro().
 21,532 ( 0.00%)  fn into_compiler_token(token: TokenTree) -> proc_macro::TokenTree {
 21,532 ( 0.00%)      match token {
 38,860 ( 0.01%)          TokenTree::Group(tt) => tt.inner.unwrap_nightly().into(),
 16,888 ( 0.00%)          TokenTree::Punct(tt) => {
 35,484 ( 0.00%)              let spacing = match tt.spacing() {
    854 ( 0.00%)                  Spacing::Joint => proc_macro::Spacing::Joint,
  6,736 ( 0.00%)                  Spacing::Alone => proc_macro::Spacing::Alone,
      .                       };
 42,220 ( 0.01%)              let mut punct = proc_macro::Punct::new(tt.as_char(), spacing);
 63,330 ( 0.01%)              punct.set_span(tt.span().inner.unwrap_nightly());
 33,776 ( 0.00%)              punct.into()
      .                   }
 88,700 ( 0.01%)          TokenTree::Ident(tt) => tt.inner.unwrap_nightly().into(),
  4,316 ( 0.00%)          TokenTree::Literal(tt) => tt.inner.unwrap_nightly().into(),
      .               }
 32,298 ( 0.00%)  }
      .           
      .           impl From<TokenTree> for TokenStream {
      .               fn from(token: TokenTree) -> TokenStream {
      .                   if inside_proc_macro() {
      .                       TokenStream::Compiler(DeferredTokenStream::new(into_compiler_token(token).into()))
      .                   } else {
      .                       TokenStream::Fallback(token.into())
      .                   }
      .               }
      .           }
      .           
      .           impl FromIterator<TokenTree> for TokenStream {
    292 ( 0.00%)      fn from_iter<I: IntoIterator<Item = TokenTree>>(trees: I) -> Self {
    511 ( 0.00%)          if inside_proc_macro() {
  1,022 ( 0.00%)              TokenStream::Compiler(DeferredTokenStream::new(
  1,679 ( 0.00%)                  trees.into_iter().map(into_compiler_token).collect(),
      .                       ))
      .                   } else {
      .                       TokenStream::Fallback(trees.into_iter().collect())
      .                   }
    146 ( 0.00%)      }
      .           }
      .           
      .           impl FromIterator<TokenStream> for TokenStream {
      .               fn from_iter<I: IntoIterator<Item = TokenStream>>(streams: I) -> Self {
      .                   let mut streams = streams.into_iter();
      .                   match streams.next() {
      .                       Some(TokenStream::Compiler(mut first)) => {
      .                           first.evaluate_now();
-- line 197 ----------------------------------------
-- line 209 ----------------------------------------
      .                           TokenStream::Fallback(first)
      .                       }
      .                       None => TokenStream::new(),
      .                   }
      .               }
      .           }
      .           
      .           impl Extend<TokenTree> for TokenStream {
 41,560 ( 0.01%)      fn extend<I: IntoIterator<Item = TokenTree>>(&mut self, stream: I) {
 31,170 ( 0.00%)          match self {
 31,170 ( 0.00%)              TokenStream::Compiler(tts) => {
      .                           // Here is the reason for DeferredTokenStream.
457,781 ( 0.06%)                  for token in stream {
187,506 ( 0.02%)                      tts.extra.push(into_compiler_token(token));
      .                           }
      .                       }
      .                       TokenStream::Fallback(tts) => tts.extend(stream),
      .                   }
 20,780 ( 0.00%)      }
      .           }
      .           
      .           impl Extend<TokenStream> for TokenStream {
  2,920 ( 0.00%)      fn extend<I: IntoIterator<Item = TokenStream>>(&mut self, streams: I) {
  3,650 ( 0.00%)          match self {
  2,190 ( 0.00%)              TokenStream::Compiler(tts) => {
  2,190 ( 0.00%)                  tts.evaluate_now();
  5,110 ( 0.00%)                  tts.stream
 12,410 ( 0.00%)                      .extend(streams.into_iter().map(TokenStream::unwrap_nightly));
      .                       }
      .                       TokenStream::Fallback(tts) => {
      .                           tts.extend(streams.into_iter().map(TokenStream::unwrap_stable));
      .                       }
      .                   }
  1,460 ( 0.00%)      }
      .           }
      .           
      .           impl Debug for TokenStream {
      .               fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
      .                   match self {
      .                       TokenStream::Compiler(tts) => Debug::fmt(&tts.clone().into_token_stream(), f),
      .                       TokenStream::Fallback(tts) => Debug::fmt(tts, f),
      .                   }
-- line 250 ----------------------------------------
-- line 303 ----------------------------------------
      .               Compiler(proc_macro::token_stream::IntoIter),
      .               Fallback(fallback::TokenTreeIter),
      .           }
      .           
      .           impl IntoIterator for TokenStream {
      .               type Item = TokenTree;
      .               type IntoIter = TokenTreeIter;
      .           
  1,364 ( 0.00%)      fn into_iter(self) -> TokenTreeIter {
  1,023 ( 0.00%)          match self {
  2,728 ( 0.00%)              TokenStream::Compiler(tts) => {
  7,502 ( 0.00%)                  TokenTreeIter::Compiler(tts.into_token_stream().into_iter())
    341 ( 0.00%)              }
      .                       TokenStream::Fallback(tts) => TokenTreeIter::Fallback(tts.into_iter()),
      .                   }
    682 ( 0.00%)      }
      .           }
      .           
      .           impl Iterator for TokenTreeIter {
      .               type Item = TokenTree;
      .           
 10,635 ( 0.00%)      fn next(&mut self) -> Option<TokenTree> {
  6,381 ( 0.00%)          let token = match self {
 44,326 ( 0.01%)              TokenTreeIter::Compiler(iter) => iter.next()?,
      .                       TokenTreeIter::Fallback(iter) => return iter.next(),
      .                   };
  8,930 ( 0.00%)          Some(match token {
  4,425 ( 0.00%)              proc_macro::TokenTree::Group(tt) => crate::Group::_new(Group::Compiler(tt)).into(),
  1,364 ( 0.00%)              proc_macro::TokenTree::Punct(tt) => {
  5,638 ( 0.00%)                  let spacing = match tt.spacing() {
     91 ( 0.00%)                      proc_macro::Spacing::Joint => Spacing::Joint,
  1,182 ( 0.00%)                      proc_macro::Spacing::Alone => Spacing::Alone,
      .                           };
  8,866 ( 0.00%)                  let mut o = Punct::new(tt.as_char(), spacing);
 10,230 ( 0.00%)                  o.set_span(crate::Span::_new(Span::Compiler(tt.span())));
  7,502 ( 0.00%)                  o.into()
      .                       }
 10,155 ( 0.00%)              proc_macro::TokenTree::Ident(s) => crate::Ident::_new(Ident::Compiler(s)).into(),
  1,716 ( 0.00%)              proc_macro::TokenTree::Literal(l) => crate::Literal::_new(Literal::Compiler(l)).into(),
      .                   })
  6,381 ( 0.00%)      }
      .           
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   match self {
      .                       TokenTreeIter::Compiler(tts) => tts.size_hint(),
      .                       TokenTreeIter::Fallback(tts) => tts.size_hint(),
      .                   }
      .               }
      .           }
-- line 351 ----------------------------------------
-- line 403 ----------------------------------------
      .           
      .           #[derive(Copy, Clone)]
      .           pub(crate) enum Span {
      .               Compiler(proc_macro::Span),
      .               Fallback(fallback::Span),
      .           }
      .           
      .           impl Span {
  8,546 ( 0.00%)      pub fn call_site() -> Self {
 34,184 ( 0.00%)          if inside_proc_macro() {
 51,276 ( 0.01%)              Span::Compiler(proc_macro::Span::call_site())
      .                   } else {
      .                       Span::Fallback(fallback::Span::call_site())
      .                   }
 25,638 ( 0.00%)      }
      .           
      .               #[cfg(not(no_hygiene))]
      .               pub fn mixed_site() -> Self {
      .                   if inside_proc_macro() {
      .                       Span::Compiler(proc_macro::Span::mixed_site())
      .                   } else {
      .                       Span::Fallback(fallback::Span::mixed_site())
      .                   }
-- line 425 ----------------------------------------
-- line 525 ----------------------------------------
      .               pub fn eq(&self, other: &Span) -> bool {
      .                   match (self, other) {
      .                       (Span::Compiler(a), Span::Compiler(b)) => a.eq(b),
      .                       (Span::Fallback(a), Span::Fallback(b)) => a.eq(b),
      .                       _ => false,
      .                   }
      .               }
      .           
 16,888 ( 0.00%)      fn unwrap_nightly(self) -> proc_macro::Span {
 21,110 ( 0.00%)          match self {
  8,444 ( 0.00%)              Span::Compiler(s) => s,
      .                       Span::Fallback(_) => mismatch(),
      .                   }
 12,666 ( 0.00%)      }
      .           }
      .           
      .           impl From<proc_macro::Span> for crate::Span {
      .               fn from(proc_span: proc_macro::Span) -> crate::Span {
      .                   crate::Span::_new(Span::Compiler(proc_span))
      .               }
      .           }
      .           
-- line 546 ----------------------------------------
-- line 563 ----------------------------------------
      .               match span {
      .                   Span::Compiler(s) => {
      .                       debug.field("span", &s);
      .                   }
      .                   Span::Fallback(s) => fallback::debug_span_field_if_nontrivial(debug, s),
      .               }
      .           }
      .           
    300 ( 0.00%)  #[derive(Clone)]
      .           pub(crate) enum Group {
    160 ( 0.00%)      Compiler(proc_macro::Group),
      .               Fallback(fallback::Group),
      .           }
      .           
      .           impl Group {
 11,238 ( 0.00%)      pub fn new(delimiter: Delimiter, stream: TokenStream) -> Self {
  5,619 ( 0.00%)          match stream {
  7,492 ( 0.00%)              TokenStream::Compiler(tts) => {
  3,746 ( 0.00%)                  let delimiter = match delimiter {
  1,896 ( 0.00%)                      Delimiter::Parenthesis => proc_macro::Delimiter::Parenthesis,
  1,002 ( 0.00%)                      Delimiter::Bracket => proc_macro::Delimiter::Bracket,
    848 ( 0.00%)                      Delimiter::Brace => proc_macro::Delimiter::Brace,
      .                               Delimiter::None => proc_macro::Delimiter::None,
      .                           };
 44,952 ( 0.01%)                  Group::Compiler(proc_macro::Group::new(delimiter, tts.into_token_stream()))
  1,873 ( 0.00%)              }
      .                       TokenStream::Fallback(stream) => {
      .                           Group::Fallback(fallback::Group::new(delimiter, stream))
      .                       }
      .                   }
  3,746 ( 0.00%)      }
      .           
  5,619 ( 0.00%)      pub fn delimiter(&self) -> Delimiter {
  5,619 ( 0.00%)          match self {
 13,111 ( 0.00%)              Group::Compiler(g) => match g.delimiter() {
  1,626 ( 0.00%)                  proc_macro::Delimiter::Parenthesis => Delimiter::Parenthesis,
    262 ( 0.00%)                  proc_macro::Delimiter::Bracket => Delimiter::Bracket,
  1,858 ( 0.00%)                  proc_macro::Delimiter::Brace => Delimiter::Brace,
      .                           proc_macro::Delimiter::None => Delimiter::None,
      .                       },
      .                       Group::Fallback(g) => g.delimiter(),
      .                   }
  5,619 ( 0.00%)      }
      .           
  1,225 ( 0.00%)      pub fn stream(&self) -> TokenStream {
    735 ( 0.00%)          match self {
  4,900 ( 0.00%)              Group::Compiler(g) => TokenStream::Compiler(DeferredTokenStream::new(g.stream())),
      .                       Group::Fallback(g) => TokenStream::Fallback(g.stream()),
      .                   }
    490 ( 0.00%)      }
      .           
  1,152 ( 0.00%)      pub fn span(&self) -> Span {
  1,152 ( 0.00%)          match self {
  3,840 ( 0.00%)              Group::Compiler(g) => Span::Compiler(g.span()),
      .                       Group::Fallback(g) => Span::Fallback(g.span()),
      .                   }
  1,152 ( 0.00%)      }
      .           
     72 ( 0.00%)      pub fn span_open(&self) -> Span {
     72 ( 0.00%)          match self {
      .                       #[cfg(not(no_group_open_close))]
    240 ( 0.00%)              Group::Compiler(g) => Span::Compiler(g.span_open()),
      .                       #[cfg(no_group_open_close)]
      .                       Group::Compiler(g) => Span::Compiler(g.span()),
      .                       Group::Fallback(g) => Span::Fallback(g.span_open()),
      .                   }
     72 ( 0.00%)      }
      .           
    609 ( 0.00%)      pub fn span_close(&self) -> Span {
    609 ( 0.00%)          match self {
      .                       #[cfg(not(no_group_open_close))]
  2,030 ( 0.00%)              Group::Compiler(g) => Span::Compiler(g.span_close()),
      .                       #[cfg(no_group_open_close)]
      .                       Group::Compiler(g) => Span::Compiler(g.span()),
      .                       Group::Fallback(g) => Span::Fallback(g.span_close()),
      .                   }
    609 ( 0.00%)      }
      .           
  1,615 ( 0.00%)      pub fn set_span(&mut self, span: Span) {
  5,168 ( 0.00%)          match (self, span) {
  3,230 ( 0.00%)              (Group::Compiler(g), Span::Compiler(s)) => g.set_span(s),
      .                       (Group::Fallback(g), Span::Fallback(s)) => g.set_span(s),
      .                       _ => mismatch(),
      .                   }
    646 ( 0.00%)      }
      .           
  3,886 ( 0.00%)      fn unwrap_nightly(self) -> proc_macro::Group {
  5,829 ( 0.00%)          match self {
  7,772 ( 0.00%)              Group::Compiler(g) => g,
      .                       Group::Fallback(_) => mismatch(),
      .                   }
 11,658 ( 0.00%)      }
      .           }
      .           
      .           impl From<fallback::Group> for Group {
      .               fn from(g: fallback::Group) -> Self {
      .                   Group::Fallback(g)
      .               }
      .           }
      .           
-- line 662 ----------------------------------------
-- line 673 ----------------------------------------
      .               fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
      .                   match self {
      .                       Group::Compiler(group) => Debug::fmt(group, formatter),
      .                       Group::Fallback(group) => Debug::fmt(group, formatter),
      .                   }
      .               }
      .           }
      .           
 92,745 ( 0.01%)  #[derive(Clone)]
      .           pub(crate) enum Ident {
 49,464 ( 0.01%)      Compiler(proc_macro::Ident),
      .               Fallback(fallback::Ident),
      .           }
      .           
      .           impl Ident {
 35,540 ( 0.00%)      pub fn new(string: &str, span: Span) -> Self {
 17,770 ( 0.00%)          match span {
 49,756 ( 0.01%)              Span::Compiler(s) => Ident::Compiler(proc_macro::Ident::new(string, s)),
      .                       Span::Fallback(s) => Ident::Fallback(fallback::Ident::new(string, s)),
      .                   }
  7,108 ( 0.00%)      }
      .           
      .               pub fn new_raw(string: &str, span: Span) -> Self {
      .                   match span {
      .                       Span::Compiler(s) => {
      .                           let p: proc_macro::TokenStream = string.parse().unwrap();
      .                           let ident = match p.into_iter().next() {
      .                               Some(proc_macro::TokenTree::Ident(mut i)) => {
      .                                   i.set_span(s);
-- line 701 ----------------------------------------
-- line 704 ----------------------------------------
      .                               _ => panic!(),
      .                           };
      .                           Ident::Compiler(ident)
      .                       }
      .                       Span::Fallback(s) => Ident::Fallback(fallback::Ident::new_raw(string, s)),
      .                   }
      .               }
      .           
  4,452 ( 0.00%)      pub fn span(&self) -> Span {
  4,452 ( 0.00%)          match self {
 14,840 ( 0.00%)              Ident::Compiler(t) => Span::Compiler(t.span()),
      .                       Ident::Fallback(t) => Span::Fallback(t.span()),
      .                   }
  4,452 ( 0.00%)      }
      .           
    360 ( 0.00%)      pub fn set_span(&mut self, span: Span) {
  1,152 ( 0.00%)          match (self, span) {
    720 ( 0.00%)              (Ident::Compiler(t), Span::Compiler(s)) => t.set_span(s),
      .                       (Ident::Fallback(t), Span::Fallback(s)) => t.set_span(s),
      .                       _ => mismatch(),
      .                   }
    144 ( 0.00%)      }
      .           
  8,870 ( 0.00%)      fn unwrap_nightly(self) -> proc_macro::Ident {
 13,305 ( 0.00%)          match self {
 17,740 ( 0.00%)              Ident::Compiler(s) => s,
      .                       Ident::Fallback(_) => mismatch(),
      .                   }
 26,610 ( 0.00%)      }
      .           }
      .           
      .           impl PartialEq for Ident {
      .               fn eq(&self, other: &Ident) -> bool {
      .                   match (self, other) {
      .                       (Ident::Compiler(t), Ident::Compiler(o)) => t.to_string() == o.to_string(),
      .                       (Ident::Fallback(t), Ident::Fallback(o)) => t == o,
      .                       _ => mismatch(),
-- line 740 ----------------------------------------
-- line 741 ----------------------------------------
      .                   }
      .               }
      .           }
      .           
      .           impl<T> PartialEq<T> for Ident
      .           where
      .               T: ?Sized + AsRef<str>,
      .           {
 30,338 ( 0.00%)      fn eq(&self, other: &T) -> bool {
 17,336 ( 0.00%)          let other = other.as_ref();
 13,002 ( 0.00%)          match self {
 56,342 ( 0.01%)              Ident::Compiler(t) => t.to_string() == other,
      .                       Ident::Fallback(t) => t == other,
      .                   }
 21,670 ( 0.00%)      }
      .           }
      .           
      .           impl Display for Ident {
  5,040 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  3,024 ( 0.00%)          match self {
  6,048 ( 0.00%)              Ident::Compiler(t) => Display::fmt(t, f),
      .                       Ident::Fallback(t) => Display::fmt(t, f),
      .                   }
  5,040 ( 0.00%)      }
      .           }
      .           
      .           impl Debug for Ident {
      .               fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
      .                   match self {
      .                       Ident::Compiler(t) => Debug::fmt(t, f),
      .                       Ident::Fallback(t) => Debug::fmt(t, f),
      .                   }
      .               }
      .           }
      .           
  2,115 ( 0.00%)  #[derive(Clone)]
      .           pub(crate) enum Literal {
  1,128 ( 0.00%)      Compiler(proc_macro::Literal),
      .               Fallback(fallback::Literal),
      .           }
      .           
      .           macro_rules! suffixed_numbers {
      .               ($($name:ident => $kind:ident,)*) => ($(
    275 ( 0.00%)          pub fn $name(n: $kind) -> Literal {
    220 ( 0.00%)              if inside_proc_macro() {
    385 ( 0.00%)                  Literal::Compiler(proc_macro::Literal::$name(n))
      .                       } else {
      .                           Literal::Fallback(fallback::Literal::$name(n))
      .                       }
    110 ( 0.00%)          }
      .               )*)
      .           }
      .           
      .           macro_rules! unsuffixed_integers {
      .               ($($name:ident => $kind:ident,)*) => ($(
      .                   pub fn $name(n: $kind) -> Literal {
      .                       if inside_proc_macro() {
      .                           Literal::Compiler(proc_macro::Literal::$name(n))
-- line 798 ----------------------------------------
-- line 856 ----------------------------------------
      .               pub fn f64_unsuffixed(f: f64) -> Literal {
      .                   if inside_proc_macro() {
      .                       Literal::Compiler(proc_macro::Literal::f64_unsuffixed(f))
      .                   } else {
      .                       Literal::Fallback(fallback::Literal::f64_unsuffixed(f))
      .                   }
      .               }
      .           
    175 ( 0.00%)      pub fn string(t: &str) -> Literal {
    100 ( 0.00%)          if inside_proc_macro() {
    175 ( 0.00%)              Literal::Compiler(proc_macro::Literal::string(t))
      .                   } else {
      .                       Literal::Fallback(fallback::Literal::string(t))
      .                   }
     50 ( 0.00%)      }
      .           
      .               pub fn character(t: char) -> Literal {
      .                   if inside_proc_macro() {
      .                       Literal::Compiler(proc_macro::Literal::character(t))
      .                   } else {
      .                       Literal::Fallback(fallback::Literal::character(t))
      .                   }
      .               }
      .           
    105 ( 0.00%)      pub fn byte_string(bytes: &[u8]) -> Literal {
     60 ( 0.00%)          if inside_proc_macro() {
    105 ( 0.00%)              Literal::Compiler(proc_macro::Literal::byte_string(bytes))
      .                   } else {
      .                       Literal::Fallback(fallback::Literal::byte_string(bytes))
      .                   }
     30 ( 0.00%)      }
      .           
    177 ( 0.00%)      pub fn span(&self) -> Span {
    177 ( 0.00%)          match self {
    590 ( 0.00%)              Literal::Compiler(lit) => Span::Compiler(lit.span()),
      .                       Literal::Fallback(lit) => Span::Fallback(lit.span()),
      .                   }
    177 ( 0.00%)      }
      .           
    120 ( 0.00%)      pub fn set_span(&mut self, span: Span) {
    384 ( 0.00%)          match (self, span) {
    240 ( 0.00%)              (Literal::Compiler(lit), Span::Compiler(s)) => lit.set_span(s),
      .                       (Literal::Fallback(lit), Span::Fallback(s)) => lit.set_span(s),
      .                       _ => mismatch(),
      .                   }
     48 ( 0.00%)      }
      .           
      .               pub fn subspan<R: RangeBounds<usize>>(&self, range: R) -> Option<Span> {
      .                   match self {
      .                       #[cfg(proc_macro_span)]
      .                       Literal::Compiler(lit) => lit.subspan(range).map(Span::Compiler),
      .                       #[cfg(not(proc_macro_span))]
      .                       Literal::Compiler(_lit) => None,
      .                       Literal::Fallback(lit) => lit.subspan(range).map(Span::Fallback),
      .                   }
      .               }
      .           
    332 ( 0.00%)      fn unwrap_nightly(self) -> proc_macro::Literal {
    498 ( 0.00%)          match self {
    664 ( 0.00%)              Literal::Compiler(s) => s,
      .                       Literal::Fallback(_) => mismatch(),
      .                   }
    996 ( 0.00%)      }
      .           }
      .           
      .           impl From<fallback::Literal> for Literal {
      .               fn from(s: fallback::Literal) -> Literal {
      .                   Literal::Fallback(s)
      .               }
      .           }
      .           
-- line 926 ----------------------------------------
-- line 951 ----------------------------------------
      .                           return Ok(literal);
      .                       }
      .                   }
      .                   Err(LexError::call_site())
      .               }
      .           }
      .           
      .           impl Display for Literal {
    530 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    318 ( 0.00%)          match self {
    636 ( 0.00%)              Literal::Compiler(t) => Display::fmt(t, f),
      .                       Literal::Fallback(t) => Display::fmt(t, f),
      .                   }
    530 ( 0.00%)      }
      .           }
      .           
      .           impl Debug for Literal {
      .               fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
      .                   match self {
      .                       Literal::Compiler(t) => Debug::fmt(t, f),
      .                       Literal::Fallback(t) => Debug::fmt(t, f),
      .                   }
-- line 972 ----------------------------------------

265,312 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/proc-macro2-1.0.36/src/wrapper.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 136 ----------------------------------------
        .           /// [`Box::leak`]: ../../std/boxed/struct.Box.html#method.leak
        .           /// [`Box::into_raw`]: ../../std/boxed/struct.Box.html#method.into_raw
        .           /// [`mem::drop`]: drop
        .           /// [ub]: ../../reference/behavior-considered-undefined.html
        .           #[inline]
        .           #[rustc_const_stable(feature = "const_forget", since = "1.46.0")]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_forget")]
    4,225 ( 0.00%)  pub const fn forget<T>(t: T) {
      945 ( 0.00%)      let _ = ManuallyDrop::new(t);
    1,948 ( 0.00%)  }
        .           
        .           /// Like [`forget`], but also accepts unsized values.
        .           ///
        .           /// This function is just a shim intended to be removed when the `unsized_locals` feature gets
        .           /// stabilized.
        .           #[inline]
        .           #[unstable(feature = "forget_unsized", issue = "none")]
        .           pub fn forget_unsized<T: ?Sized>(t: T) {
-- line 154 ----------------------------------------
-- line 324 ----------------------------------------
        .           /// let y: &[u8] = &x;
        .           /// assert_eq!(13, mem::size_of_val(y));
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_size_of_val", issue = "46571")]
        .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_size_of_val")]
   32,202 ( 0.00%)  pub const fn size_of_val<T: ?Sized>(val: &T) -> usize {
        .               // SAFETY: `val` is a reference, so it's a valid raw pointer
   57,396 ( 0.01%)      unsafe { intrinsics::size_of_val(val) }
   22,308 ( 0.00%)  }
        .           
        .           /// Returns the size of the pointed-to value in bytes.
        .           ///
        .           /// This is usually the same as `size_of::<T>()`. However, when `T` *has* no
        .           /// statically-known size, e.g., a slice [`[T]`][slice] or a [trait object],
        .           /// then `size_of_val_raw` can be used to get the dynamically-known size.
        .           ///
        .           /// # Safety
-- line 343 ----------------------------------------
-- line 375 ----------------------------------------
        .           /// assert_eq!(13, unsafe { mem::size_of_val_raw(y) });
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[unstable(feature = "layout_for_ptr", issue = "69835")]
        .           #[rustc_const_unstable(feature = "const_size_of_val_raw", issue = "46571")]
        .           pub const unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {
        .               // SAFETY: the caller must provide a valid raw pointer
       14 ( 0.00%)      unsafe { intrinsics::size_of_val(val) }
        .           }
        .           
        .           /// Returns the [ABI]-required minimum alignment of a type.
        .           ///
        .           /// Every reference to a value of the type `T` must be a multiple of this number.
        .           ///
        .           /// This is the alignment used for struct fields. It may be smaller than the preferred alignment.
        .           ///
-- line 391 ----------------------------------------
-- line 467 ----------------------------------------
        .           ///
        .           /// assert_eq!(4, mem::align_of_val(&5i32));
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_align_of_val", issue = "46571")]
        .           #[allow(deprecated)]
    2,601 ( 0.00%)  pub const fn align_of_val<T: ?Sized>(val: &T) -> usize {
        .               // SAFETY: val is a reference, so it's a valid raw pointer
    3,861 ( 0.00%)      unsafe { intrinsics::min_align_of_val(val) }
    2,574 ( 0.00%)  }
        .           
        .           /// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.
        .           ///
        .           /// Every reference to a value of the type `T` must be a multiple of this number.
        .           ///
        .           /// [ABI]: https://en.wikipedia.org/wiki/Application_binary_interface
        .           ///
        .           /// # Safety
-- line 486 ----------------------------------------
-- line 578 ----------------------------------------
        .           ///     }
        .           /// }
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "needs_drop", since = "1.21.0")]
        .           #[rustc_const_stable(feature = "const_needs_drop", since = "1.36.0")]
        .           #[rustc_diagnostic_item = "needs_drop"]
       12 ( 0.00%)  pub const fn needs_drop<T>() -> bool {
       36 ( 0.00%)      intrinsics::needs_drop::<T>()
       48 ( 0.00%)  }
        .           
        .           /// Returns the value of type `T` represented by the all-zero byte-pattern.
        .           ///
        .           /// This means that, for example, the padding byte in `(u8, u16)` is not
        .           /// necessarily zeroed.
        .           ///
        .           /// There is no guarantee that an all-zero byte-pattern represents a valid value
        .           /// of some type `T`. For example, the all-zero byte-pattern is not a valid value
-- line 596 ----------------------------------------
-- line 694 ----------------------------------------
        .           /// mem::swap(&mut x, &mut y);
        .           ///
        .           /// assert_eq!(42, x);
        .           /// assert_eq!(5, y);
        .           /// ```
        .           #[inline]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
       21 ( 0.00%)  pub const fn swap<T>(x: &mut T, y: &mut T) {
        .               // SAFETY: the raw pointers have been created from safe mutable references satisfying all the
        .               // constraints on `ptr::swap_nonoverlapping_one`
        .               unsafe {
        7 ( 0.00%)          ptr::swap_nonoverlapping_one(x, y);
        .               }
       14 ( 0.00%)  }
        .           
        .           /// Replaces `dest` with the default value of `T`, returning the previous `dest` value.
        .           ///
        .           /// * If you want to replace the values of two variables, see [`swap`].
        .           /// * If you want to replace with a passed value instead of the default value, see [`replace`].
        .           ///
        .           /// # Examples
        .           ///
-- line 716 ----------------------------------------
-- line 759 ----------------------------------------
        .           /// let mut buffer = Buffer { buf: vec![0, 1] };
        .           /// assert_eq!(buffer.buf.len(), 2);
        .           ///
        .           /// assert_eq!(buffer.get_and_reset(), vec![0, 1]);
        .           /// assert_eq!(buffer.buf.len(), 0);
        .           /// ```
        .           #[inline]
        .           #[stable(feature = "mem_take", since = "1.40.0")]
      450 ( 0.00%)  pub fn take<T: Default>(dest: &mut T) -> T {
      360 ( 0.00%)      replace(dest, T::default())
      180 ( 0.00%)  }
        .           
        .           /// Moves `src` into the referenced `dest`, returning the previous `dest` value.
        .           ///
        .           /// Neither value is dropped.
        .           ///
        .           /// * If you want to replace the values of two variables, see [`swap`].
        .           /// * If you want to replace with a default value, see [`take`].
        .           ///
-- line 777 ----------------------------------------
-- line 826 ----------------------------------------
        .           /// assert_eq!(buffer.replace_index(0, 2), 0);
        .           /// assert_eq!(buffer.buf[0], 2);
        .           /// ```
        .           #[inline]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[must_use = "if you don't need the old value, you can just assign the new value directly"]
        .           #[rustc_const_unstable(feature = "const_replace", issue = "83164")]
        .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_replace")]
  318,687 ( 0.04%)  pub const fn replace<T>(dest: &mut T, src: T) -> T {
        .               // SAFETY: We read from `dest` but directly write `src` into it afterwards,
        .               // such that the old value is not duplicated. Nothing is dropped and
        .               // nothing here can panic.
        .               unsafe {
  414,267 ( 0.06%)          let result = ptr::read(dest);
3,835,992 ( 0.51%)          ptr::write(dest, src);
        .                   result
        .               }
  119,615 ( 0.02%)  }
        .           
        .           /// Disposes of a value.
        .           ///
        .           /// This does so by calling the argument's implementation of [`Drop`][drop].
        .           ///
        .           /// This effectively does nothing for types which implement `Copy`, e.g.
        .           /// integers. Such values are copied and _then_ moved into the function, so the
        .           /// value persists after this function call.
-- line 851 ----------------------------------------
-- line 901 ----------------------------------------
        .           ///
        .           /// println!("x: {}, y: {}", x, y.0); // still available
        .           /// ```
        .           ///
        .           /// [`RefCell`]: crate::cell::RefCell
        .           #[inline]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_drop")]
   70,491 ( 0.01%)  pub fn drop<T>(_x: T) {}
        .           
        .           /// Interprets `src` as having type `&U`, and then reads `src` without moving
        .           /// the contained value.
        .           ///
        .           /// This function will unsafely assume the pointer `src` is valid for [`size_of::<U>`][size_of]
        .           /// bytes by transmuting `&T` to `&U` and then reading the `&U` (except that this is done in a way
        .           /// that is correct even when `&U` makes stricter alignment requirements than `&T`). It will also
        .           /// unsafely create a copy of the contained value instead of moving out of `src`.
-- line 917 ----------------------------------------
-- line 947 ----------------------------------------
        .           ///
        .           /// // The contents of 'foo_array' should not have changed
        .           /// assert_eq!(foo_array, [10]);
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_transmute_copy", issue = "83165")]
      225 ( 0.00%)  pub const unsafe fn transmute_copy<T, U>(src: &T) -> U {
        .               // If U has a higher alignment requirement, src might not be suitably aligned.
       90 ( 0.00%)      if align_of::<U>() > align_of::<T>() {
        .                   // SAFETY: `src` is a reference which is guaranteed to be valid for reads.
        .                   // The caller must guarantee that the actual transmutation is safe.
        .                   unsafe { ptr::read_unaligned(src as *const T as *const U) }
        .               } else {
        .                   // SAFETY: `src` is a reference which is guaranteed to be valid for reads.
        .                   // We just checked that `src as *const U` was properly aligned.
        .                   // The caller must guarantee that the actual transmutation is safe.
       90 ( 0.00%)          unsafe { ptr::read(src as *const T as *const U) }
        .               }
       90 ( 0.00%)  }
        .           
        .           /// Opaque type representing the discriminant of an enum.
        .           ///
        .           /// See the [`discriminant`] function in this module for more information.
        .           #[stable(feature = "discriminant_value", since = "1.21.0")]
        .           pub struct Discriminant<T>(<T as DiscriminantKind>::Discriminant);
        .           
        .           // N.B. These trait implementations cannot be derived because we don't want any bounds on T.
-- line 975 ----------------------------------------
-- line 991 ----------------------------------------
        .               }
        .           }
        .           
        .           #[stable(feature = "discriminant_value", since = "1.21.0")]
        .           impl<T> cmp::Eq for Discriminant<T> {}
        .           
        .           #[stable(feature = "discriminant_value", since = "1.21.0")]
        .           impl<T> hash::Hash for Discriminant<T> {
      313 ( 0.00%)      fn hash<H: hash::Hasher>(&self, state: &mut H) {
        .                   self.0.hash(state);
      542 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "discriminant_value", since = "1.21.0")]
        .           impl<T> fmt::Debug for Discriminant<T> {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   fmt.debug_tuple("Discriminant").field(&self.0).finish()
        .               }
        .           }
-- line 1009 ----------------------------------------
-- line 1031 ----------------------------------------
        .           /// assert_eq!(mem::discriminant(&Foo::A("bar")), mem::discriminant(&Foo::A("baz")));
        .           /// assert_eq!(mem::discriminant(&Foo::B(1)), mem::discriminant(&Foo::B(2)));
        .           /// assert_ne!(mem::discriminant(&Foo::B(3)), mem::discriminant(&Foo::C(3)));
        .           /// ```
        .           #[stable(feature = "discriminant_value", since = "1.21.0")]
        .           #[rustc_const_unstable(feature = "const_discriminant", issue = "69821")]
        .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_discriminant")]
        .           pub const fn discriminant<T>(v: &T) -> Discriminant<T> {
    7,062 ( 0.00%)      Discriminant(intrinsics::discriminant_value(v))
        .           }
        .           
        .           /// Returns the number of variants in the enum type `T`.
        .           ///
        .           /// If `T` is not an enum, calling this function will not result in undefined behavior, but the
        .           /// return value is unspecified. Equally, if `T` is an enum with more variants than `usize::MAX`
        .           /// the return value is unspecified. Uninhabited variants will be counted.
        .           ///
-- line 1047 ----------------------------------------

  179,700 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir               

-- line 118 ----------------------------------------
      .               stability: InternedSet<'tcx, attr::Stability>,
      .           
      .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
      .               const_stability: InternedSet<'tcx, attr::ConstStability>,
      .           }
      .           
      .           impl<'tcx> CtxtInterners<'tcx> {
      .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
     17 ( 0.00%)          CtxtInterners {
      .                       arena,
      .                       type_: Default::default(),
      .                       type_list: Default::default(),
      .                       substs: Default::default(),
      .                       region: Default::default(),
      .                       poly_existential_predicates: Default::default(),
      .                       canonical_var_infos: Default::default(),
      .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
      .                       stability: Default::default(),
      .                       const_stability: Default::default(),
      .                   }
      .               }
      .           
      .               /// Interns a type.
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline(never)]
503,616 ( 0.07%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
      .                   self.type_
314,760 ( 0.04%)              .intern(kind, |kind| {
 24,132 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
      .           
      .                           let ty_struct = TyS {
 48,264 ( 0.01%)                      kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(ty_struct))
      .                       })
      .                       .0
566,568 ( 0.08%)      }
      .           
      .               #[inline(never)]
156,968 ( 0.02%)      fn intern_predicate(
      .                   &self,
      .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> &'tcx PredicateInner<'tcx> {
      .                   self.predicate
137,347 ( 0.02%)              .intern(kind, |kind| {
 37,014 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
      .           
      .                           let predicate_struct = PredicateInner {
      .                               kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(predicate_struct))
      .                       })
      .                       .0
176,589 ( 0.02%)      }
      .           }
      .           
      .           pub struct CommonTypes<'tcx> {
      .               pub unit: Ty<'tcx>,
      .               pub bool: Ty<'tcx>,
      .               pub char: Ty<'tcx>,
      .               pub isize: Ty<'tcx>,
      .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
      .           /// safely used as a key in the maps of a TypeckResults. For that to be
      .           /// the case, the HirId must have the same `owner` as all the other IDs in
      .           /// this table (signified by `hir_owner`). Otherwise the HirId
      .           /// would be in a different frame of reference and using its `local_id`
      .           /// would result in lookup errors, or worse, in silently wrong data being
      .           /// stored/returned.
      .           #[inline]
      .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
 54,981 ( 0.01%)      if hir_id.owner != hir_owner {
      .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
      .               }
      .           }
      .           
      .           #[cold]
      .           #[inline(never)]
      .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
      .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
      .           }
      .           
      .           impl<'a, V> LocalTableInContext<'a, V> {
      .               pub fn contains_key(&self, id: hir::HirId) -> bool {
      .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.data.contains_key(&id.local_id)
      .               }
      .           
 39,836 ( 0.01%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
  8,079 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
  8,079 ( 0.00%)          self.data.get(&id.local_id)
 31,926 ( 0.00%)      }
      .           
      .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
      .                   self.data.iter()
      .               }
      .           }
      .           
      .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
      .               type Output = V;
      .           
  1,014 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
      .                   self.get(key).expect("LocalTableInContext: key not found")
    676 ( 0.00%)      }
      .           }
      .           
      .           pub struct LocalTableInContextMut<'a, V> {
      .               hir_owner: LocalDefId,
      .               data: &'a mut ItemLocalMap<V>,
      .           }
      .           
      .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 328 ----------------------------------------
      .           /// ```
      .           ///
      .           /// Here, we would store the type `T`, the span of the value `x`, the "scope-span" for
      .           /// the scope that contains `x`, the expr `T` evaluated from, and the span of `foo.await`.
      .           #[derive(TyEncodable, TyDecodable, Clone, Debug, Eq, Hash, PartialEq, HashStable)]
      .           #[derive(TypeFoldable)]
      .           pub struct GeneratorInteriorTypeCause<'tcx> {
      .               /// Type of the captured binding.
     28 ( 0.00%)      pub ty: Ty<'tcx>,
      .               /// Span of the binding that was captured.
     10 ( 0.00%)      pub span: Span,
      .               /// Span of the scope of the captured binding.
     50 ( 0.00%)      pub scope_span: Option<Span>,
      .               /// Span of `.await` or `yield` expression.
     50 ( 0.00%)      pub yield_span: Span,
      .               /// Expr which the type evaluated from.
     70 ( 0.00%)      pub expr: Option<hir::HirId>,
      .           }
      .           
      .           #[derive(TyEncodable, TyDecodable, Debug)]
      .           pub struct TypeckResults<'tcx> {
      .               /// The `HirId::owner` all `ItemLocalId`s in this table are relative to.
      .               pub hir_owner: LocalDefId,
      .           
      .               /// Resolved definitions for `<T>::X` associated paths and
-- line 352 ----------------------------------------
-- line 507 ----------------------------------------
      .               pub treat_byte_string_as_slice: ItemLocalSet,
      .           
      .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
      .               /// on closure size.
      .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
      .           }
      .           
      .           impl<'tcx> TypeckResults<'tcx> {
  4,092 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
 48,422 ( 0.01%)          TypeckResults {
      .                       hir_owner,
      .                       type_dependent_defs: Default::default(),
      .                       field_indices: Default::default(),
      .                       user_provided_types: Default::default(),
      .                       user_provided_sigs: Default::default(),
      .                       node_types: Default::default(),
      .                       node_substs: Default::default(),
      .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
      .                       tainted_by_errors: None,
      .                       concrete_opaque_types: Default::default(),
      .                       closure_min_captures: Default::default(),
      .                       closure_fake_reads: Default::default(),
      .                       generator_interior_types: ty::Binder::dummy(Default::default()),
      .                       treat_byte_string_as_slice: Default::default(),
      .                       closure_size_eval: Default::default(),
      .                   }
  4,092 ( 0.00%)      }
      .           
      .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
  8,187 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
  5,458 ( 0.00%)          match *qpath {
 13,044 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
      .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
      .                           .type_dependent_def(id)
  3,330 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
      .                   }
 13,645 ( 0.00%)      }
      .           
     82 ( 0.00%)      pub fn type_dependent_defs(
      .                   &self,
      .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    464 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
     82 ( 0.00%)      }
      .           
    920 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
  2,016 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
  1,840 ( 0.00%)      }
      .           
  2,164 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
      .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
  2,164 ( 0.00%)      }
      .           
  3,568 ( 0.00%)      pub fn type_dependent_defs_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
  3,568 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
  3,568 ( 0.00%)      }
      .           
      .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
    576 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
    139 ( 0.00%)      }
      .           
      .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    834 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
    417 ( 0.00%)      }
      .           
      .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
  1,594 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    797 ( 0.00%)      }
      .           
      .               pub fn user_provided_types_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
    308 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
    154 ( 0.00%)      }
      .           
      .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
  7,620 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
  3,810 ( 0.00%)      }
      .           
      .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
 13,588 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
  6,794 ( 0.00%)      }
      .           
 58,044 ( 0.01%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
  9,674 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
      .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
      .                   })
 48,370 ( 0.01%)      }
      .           
 12,659 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
 12,659 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_types.get(&id.local_id).cloned()
 25,318 ( 0.00%)      }
      .           
      .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
  1,570 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    785 ( 0.00%)      }
      .           
  4,128 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
  4,128 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
  8,256 ( 0.00%)      }
      .           
  2,903 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
  2,903 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned()
  5,806 ( 0.00%)      }
      .           
      .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
      .               // doesn't provide type parameter substitutions.
      .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
  1,304 ( 0.00%)          self.node_type(pat.hir_id)
      .               }
      .           
      .               // Returns the type of an expression as a monotype.
      .               //
      .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
      .               // some cases, we insert `Adjustment` annotations such as auto-deref or
      .               // auto-ref.  The type returned by this function does not consider such
      .               // adjustments.  See `expr_ty_adjusted()` instead.
      .               //
      .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
      .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
      .               // instead of "fn(ty) -> T with T = isize".
      .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
 11,765 ( 0.00%)          self.node_type(expr.hir_id)
      .               }
      .           
      .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
 11,561 ( 0.00%)          self.node_type_opt(expr.hir_id)
      .               }
      .           
      .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  5,158 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
  2,579 ( 0.00%)      }
      .           
      .               pub fn adjustments_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  8,156 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
  4,078 ( 0.00%)      }
      .           
  5,018 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
 10,036 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
      .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
 10,036 ( 0.00%)      }
      .           
      .               /// Returns the type of `expr`, considering any `Adjustment`
      .               /// entry recorded for that expression.
    575 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
    115 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
    304 ( 0.00%)      }
      .           
    345 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
     69 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
    104 ( 0.00%)      }
      .           
    382 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
      .                   // Only paths and method calls/overloaded operators have
      .                   // entries in type_dependent_defs, ignore the former here.
    764 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
      .                       return false;
      .                   }
      .           
    908 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    764 ( 0.00%)      }
      .           
  2,859 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
      .                   self.pat_binding_modes().get(id).copied().or_else(|| {
      .                       s.delay_span_bug(sp, "missing binding mode");
      .                       None
      .                   })
  3,812 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
  2,307 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    677 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
  1,232 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    616 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
  2,436 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
  1,218 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    748 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
    374 ( 0.00%)      }
      .           
      .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
      .               /// by the closure.
  1,020 ( 0.00%)      pub fn closure_min_captures_flattened(
      .                   &self,
      .                   closure_def_id: DefId,
      .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
      .                   self.closure_min_captures
      .                       .get(&closure_def_id)
      .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
      .                       .into_iter()
      .                       .flatten()
  1,275 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
    352 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
    176 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
      .               }
      .           
      .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
  1,028 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
    514 ( 0.00%)      }
      .           
      .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
    676 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
    338 ( 0.00%)      }
      .           
      .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    352 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
    176 ( 0.00%)      }
      .           
      .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
      .               }
      .           
     51 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
     17 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
      .                   self.coercion_casts.contains(&hir_id.local_id)
     34 ( 0.00%)      }
      .           
      .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
      .                   self.coercion_casts.insert(id);
      .               }
      .           
      .               pub fn coercion_casts(&self) -> &ItemLocalSet {
    176 ( 0.00%)          &self.coercion_casts
    176 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
      .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
      .                   let ty::TypeckResults {
      .                       hir_owner,
      .                       ref type_dependent_defs,
      .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
      .                   const START_INDEX = 0,
      .               }
      .           }
      .           
      .           /// Mapping of type annotation indices to canonical user type annotations.
      .           pub type CanonicalUserTypeAnnotations<'tcx> =
      .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
      .           
    144 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
      .           pub struct CanonicalUserTypeAnnotation<'tcx> {
      .               pub user_ty: CanonicalUserType<'tcx>,
      .               pub span: Span,
     77 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
      .           }
      .           
      .           /// Canonicalized user type annotation.
      .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
      .           
      .           impl<'tcx> CanonicalUserType<'tcx> {
      .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
      .               /// i.e., each thing is mapped to a canonical variable with the same index.
    218 ( 0.00%)      pub fn is_identity(&self) -> bool {
    436 ( 0.00%)          match self.value {
      .                       UserType::Ty(_) => false,
      .                       UserType::TypeOf(_, user_substs) => {
    218 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
      .                               return false;
      .                           }
      .           
      .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
      .                               match kind.unpack() {
    372 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
      .                                       ty::Bound(debruijn, b) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
    165 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
      .                                           cvar == b.var
      .                                       }
      .                                       _ => false,
      .                                   },
      .           
      6 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
      .                                       ty::ReLateBound(debruijn, br) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
      .                                           assert_eq!(*debruijn, ty::INNERMOST);
      .                                           cvar == br.var
      .                                       }
      .                                       _ => false,
      .                                   },
      .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
      .                                           cvar == b
      .                                       }
      .                                       _ => false,
      .                                   },
      .                               }
      .                           })
      .                       }
      .                   }
    436 ( 0.00%)      }
      .           }
      .           
      .           /// A user-given type annotation attached to a constant. These arise
      .           /// from constants that are named via paths, like `Foo::<A>::new` and
      .           /// so forth.
    462 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
  2,882 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
      .           pub enum UserType<'tcx> {
      .               Ty(Ty<'tcx>),
      .           
      .               /// The canonical type is the result of `type_of(def_id)` with the
      .               /// given substitutions applied.
      .               TypeOf(DefId, UserSubsts<'tcx>),
      .           }
      .           
      .           impl<'tcx> CommonTypes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
    111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
      .           
      .                   CommonTypes {
      .                       unit: mk(Tuple(List::empty())),
      .                       bool: mk(Bool),
      .                       char: mk(Char),
      .                       never: mk(Never),
      .                       isize: mk(Int(ty::IntTy::Isize)),
      .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
      .           
      .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonLifetimes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
     67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
      .           
      .                   CommonLifetimes {
      5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
      5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
      5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonConsts<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
      6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
      .           
      .                   CommonConsts {
      .                       unit: mk_const(ty::Const {
      .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
      .                           ty: types.unit,
      .                       }),
      .                   }
      .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
      .           
      .               /// Stores memory for globals (statics/consts).
      .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
      .           
      .               output_filenames: Arc<OutputFilenames>,
      .           }
      .           
      .           impl<'tcx> TyCtxt<'tcx> {
  8,000 ( 0.00%)      pub fn typeck_opt_const_arg(
      .                   self,
      .                   def: ty::WithOptConstParam<LocalDefId>,
      .               ) -> &'tcx TypeckResults<'tcx> {
  3,200 ( 0.00%)          if let Some(param_did) = def.const_param_did {
      .                       self.typeck_const_arg((def.did, param_did))
      .                   } else {
      .                       self.typeck(def.did)
      .                   }
  6,400 ( 0.00%)      }
      .           
    567 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
    189 ( 0.00%)          self.arena.alloc(Steal::new(thir))
    756 ( 0.00%)      }
      .           
  2,950 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
    590 ( 0.00%)          self.arena.alloc(Steal::new(mir))
  4,130 ( 0.00%)      }
      .           
    756 ( 0.00%)      pub fn alloc_steal_promoted(
      .                   self,
      .                   promoted: IndexVec<Promoted, Body<'tcx>>,
      .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
    189 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    945 ( 0.00%)      }
      .           
    666 ( 0.00%)      pub fn alloc_adt_def(
      .                   self,
      .                   did: DefId,
      .                   kind: AdtKind,
      .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
      .                   repr: ReprOptions,
      .               ) -> &'tcx ty::AdtDef {
  1,184 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
    296 ( 0.00%)      }
      .           
      .               /// Allocates a read-only byte or string literal for `mir::interpret`.
      .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
      .                   // Create an allocation that just contains these bytes.
      .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
      .                   let alloc = self.intern_const_alloc(alloc);
      .                   self.create_memory_alloc(alloc)
      .               }
      .           
      .               /// Returns a range of the start/end indices specified with the
      .               /// `rustc_layout_scalar_valid_range` attribute.
      .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
  1,176 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    588 ( 0.00%)          let attrs = self.get_attrs(def_id);
  2,499 ( 0.00%)          let get = |name| {
    588 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
      .                           Some(attr) => attr,
      .                           None => return Bound::Unbounded,
      .                       };
      .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
      .                       if let Some(
      .                           &[
      .                               ast::NestedMetaItem::Literal(ast::Lit {
      .                                   kind: ast::LitKind::Int(a, _), ..
-- line 1111 ----------------------------------------
-- line 1114 ----------------------------------------
      .                       ) = attr.meta_item_list().as_deref()
      .                       {
      .                           Bound::Included(a)
      .                       } else {
      .                           self.sess
      .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
      .                           Bound::Unbounded
      .                       }
  2,940 ( 0.00%)          };
    882 ( 0.00%)          (
    882 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    441 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
      .                   )
  1,176 ( 0.00%)      }
      .           
      .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
      .                   value.lift_to_tcx(self)
      .               }
      .           
      .               /// Creates a type context and call the closure with a `TyCtxt` reference
      .               /// to the context. The closure enforces that the type context and any interned
      .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
      .               /// reference to the context, to allow formatting values that need it.
     23 ( 0.00%)      pub fn create_global_ctxt(
      .                   s: &'tcx Session,
      .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
      .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
      .                   resolutions: ty::ResolverOutputs,
      .                   krate: &'tcx hir::Crate<'tcx>,
      .                   dep_graph: DepGraph,
      .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
      .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
      .                   query_kinds: &'tcx [DepKindStruct],
      .                   crate_name: &str,
      .                   output_filenames: OutputFilenames,
      .               ) -> GlobalCtxt<'tcx> {
      1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
      .                       s.fatal(&err);
      .                   });
      .                   let interners = CtxtInterners::new(arena);
      .                   let common_types = CommonTypes::new(&interners);
      .                   let common_lifetimes = CommonLifetimes::new(&interners);
      .                   let common_consts = CommonConsts::new(&interners, &common_types);
      .           
    127 ( 0.00%)          GlobalCtxt {
      .                       sess: s,
      6 ( 0.00%)              lint_store,
      .                       arena,
      2 ( 0.00%)              interners,
      5 ( 0.00%)              dep_graph,
      4 ( 0.00%)              untracked_resolutions: resolutions,
      2 ( 0.00%)              prof: s.prof.clone(),
      .                       types: common_types,
      .                       lifetimes: common_lifetimes,
      .                       consts: common_consts,
      .                       untracked_crate: krate,
      .                       on_disk_cache,
      .                       queries,
      .                       query_caches: query::QueryCaches::default(),
      .                       query_kinds,
      .                       ty_rcache: Default::default(),
      .                       pred_rcache: Default::default(),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
      .                       data_layout,
      .                       alloc_map: Lock::new(interpret::AllocMap::new()),
      .                       output_filenames: Arc::new(output_filenames),
      .                   }
      9 ( 0.00%)      }
      .           
      .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
      .                   &self.query_kinds[k as usize]
      .               }
      .           
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
      .                   ty: Ty<'tcx>,
      .                   span: S,
      .                   msg: &str,
      .               ) -> &'tcx Const<'tcx> {
      .                   self.sess.delay_span_bug(span, msg);
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
      .               }
      .           
     91 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
     13 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
    104 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
    104 ( 0.00%)      }
      .           
      .               /// Obtain all lang items of this crate and all dependencies (recursively)
159,558 ( 0.02%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
      .                   self.get_lang_items(())
205,146 ( 0.03%)      }
      .           
      .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
      .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
     21 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
      .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
     24 ( 0.00%)      }
      .           
      .               /// Obtain the diagnostic item's name
  6,531 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
      .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
  7,464 ( 0.00%)      }
      .           
      .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
  7,063 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
      .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
  8,072 ( 0.00%)      }
      .           
  2,604 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
      .                   self.stability_index(())
  3,348 ( 0.00%)      }
      .           
 76,496 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
      .                   self.features_query(())
 87,424 ( 0.01%)      }
      .           
      .               pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
      .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
  8,782 ( 0.00%)          if let Some(id) = id.as_local() {
      .                       self.untracked_resolutions.definitions.def_key(id)
      .                   } else {
  1,585 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
      .                   }
      .               }
      .           
      .               /// Converts a `DefId` into its fully expanded `DefPath` (every
      .               /// `DefId` is really just an interned `DefPath`).
      .               ///
      .               /// Note that if `id` is not local to this crate, the result will
      .               ///  be a non-local `DefPath`.
-- line 1272 ----------------------------------------
-- line 1277 ----------------------------------------
      .                   } else {
      .                       self.untracked_resolutions.cstore.def_path(id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
      .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
  1,724 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
      .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
      .                   } else {
    176 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
      .                   if crate_num == LOCAL_CRATE {
      .                       self.sess.local_stable_crate_id()
      .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
      .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
      .                       self.def_path(def_id).to_string_no_crate_verbose()
      .                   )
      .               }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
 37,848 ( 0.01%)          &*self.untracked_resolutions.cstore
 18,924 ( 0.00%)      }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
      .                   &self.untracked_resolutions.definitions
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
     21 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
    104 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      .                   let resolutions = &self.gcx.untracked_resolutions;
      .                   StableHashingContext::ignore_spans(
      .                       self.sess,
      .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
      .               /// If `true`, we should use the MIR-based borrowck, but also
      .               /// fall back on the AST borrowck if the MIR-based one errors.
      .               pub fn migrate_borrowck(self) -> bool {
      .                   self.borrowck_mode().migrate()
      .               }
      .           
      .               /// What mode(s) of borrowck should we run? AST? MIR? both?
      .               /// (Also considers the `#![feature(nll)]` setting.)
    352 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
      .                   // Here are the main constraints we need to deal with:
      .                   //
      .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
      .                   //    synonymous with no `-Z borrowck=...` flag at all.
      .                   //
      .                   // 2. We want to allow developers on the Nightly channel
      .                   //    to opt back into the "hard error" mode for NLL,
      .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
      .                   //   errors. (To simplify the code here, it now even overrides
      .                   //   a user's attempt to specify `-Z borrowck=compare`, which
      .                   //   we arguably do not need anymore and should remove.)
      .                   //
      .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
      .                   //
      .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
      .           
    528 ( 0.00%)          if self.features().nll {
      .                       return BorrowckMode::Mir;
      .                   }
      .           
    176 ( 0.00%)          self.sess.opts.borrowck_mode
    704 ( 0.00%)      }
      .           
      .               /// If `true`, we should use lazy normalization for constants, otherwise
      .               /// we still evaluate them eagerly.
      .               #[inline]
      .               pub fn lazy_normalization(self) -> bool {
      .                   let features = self.features();
      .                   // Note: We only use lazy normalization for generic const expressions.
      .                   features.generic_const_exprs
-- line 1434 ----------------------------------------
-- line 1554 ----------------------------------------
      .                   self.mk_imm_ref(
      .                       self.lifetimes.re_static,
      .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
      .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
      .                   )
      .               }
      .           
      .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
  1,078 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
    784 ( 0.00%)          match self.def_kind(def_id) {
      .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
      .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
      .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
      .                       },
  1,764 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
      .                   }
    882 ( 0.00%)      }
      .           
      .               pub fn type_length_limit(self) -> Limit {
      .                   self.limits(()).type_length_limit
      .               }
      .           
 58,219 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
      .                   self.limits(()).recursion_limit
 66,536 ( 0.01%)      }
      .           
      .               pub fn move_size_limit(self) -> Limit {
      .                   self.limits(()).move_size_limit
      .               }
      .           
    280 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
      .                   self.limits(()).const_eval_limit
    320 ( 0.00%)      }
      .           
      .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
      .                   iter::once(LOCAL_CRATE)
      .                       .chain(self.crates(()).iter().copied())
      .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
      .               }
      .           }
      .           
-- line 1594 ----------------------------------------
-- line 1684 ----------------------------------------
      .               /// This is the implicit state of rustc. It contains the current
      .               /// `TyCtxt` and query. It is updated when creating a local interner or
      .               /// executing a new query. Whenever there's a `TyCtxt` value available
      .               /// you should also have access to an `ImplicitCtxt` through the functions
      .               /// in this module.
      .               #[derive(Clone)]
      .               pub struct ImplicitCtxt<'a, 'tcx> {
      .                   /// The current `TyCtxt`.
      1 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
      .           
      .                   /// The current query job, if any. This is updated by `JobOwner::start` in
      .                   /// `ty::query::plumbing` when executing a query.
      .                   pub query: Option<query::QueryJobId<DepKind>>,
      .           
      .                   /// Where to store diagnostics for the current query job, if any.
      .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
      .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
      .                   pub layout_depth: usize,
      .           
      .                   /// The current dep graph task. This is used to add dependencies to queries
      .                   /// when executing them.
      .                   pub task_deps: TaskDepsRef<'a>,
      .               }
      .           
      .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
      5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
      .                       let tcx = TyCtxt { gcx };
     25 ( 0.00%)              ImplicitCtxt {
      .                           tcx,
      .                           query: None,
      .                           diagnostics: None,
      .                           layout_depth: 0,
      .                           task_deps: TaskDepsRef::Ignore,
      .                       }
      5 ( 0.00%)          }
      .               }
      .           
      .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
      .               /// to `value` during the call to `f`. It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(parallel_compiler)]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
      .           
      .               /// Sets TLV to `value` during the call to `f`.
      .               /// It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
      .                   let old = get_tlv();
 40,225 ( 0.01%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
      .                   TLV.with(|tlv| tlv.set(value));
      .                   f()
      .               }
      .           
      .               /// Gets the pointer to the current `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
      .               }
      .           
      .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
      .               #[inline]
      .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
      .               {
      1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
      .               }
      .           
      .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
      .               #[inline]
      .               pub fn with_context_opt<F, R>(f: F) -> R
      .               where
      .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
      .               {
      .                   let context = get_tlv();
161,719 ( 0.02%)          if context == 0 {
      .                       f(None)
      .                   } else {
      .                       // We could get an `ImplicitCtxt` pointer from another thread.
      .                       // Ensure that `ImplicitCtxt` is `Sync`.
      .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
      .           
      .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
      .                   }
-- line 1789 ----------------------------------------
-- line 1805 ----------------------------------------
      .               /// This will panic if you pass it a `TyCtxt` which is different from the current
      .               /// `ImplicitCtxt`'s `tcx` field.
      .               #[inline]
      .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
      .               {
      .                   with_context(|context| unsafe {
 79,934 ( 0.01%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
      .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
 79,840 ( 0.01%)              f(context)
      .                   })
      .               }
      .           
      .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
      .               /// Panics if there is no `ImplicitCtxt` available.
      .               #[inline]
      .               pub fn with<F, R>(f: F) -> R
      .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
      .               fn into_pointer(&self) -> *const () {
      .                   self.0 as *const _ as *const ()
      .               }
      .           }
      .           
      .           #[allow(rustc::usage_of_ty_tykind)]
      .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
 52,643 ( 0.01%)          &self.0.kind()
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
 42,996 ( 0.01%)          self.0.kind().hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
 14,278 ( 0.00%)          &self.0.kind
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  7,164 ( 0.00%)          self.0.kind.hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
      .               fn borrow<'a>(&'a self) -> &'a [T] {
 58,246 ( 0.01%)          &self.0[..]
      .               }
      .           }
      .           
      .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
      .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
      .           
      .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
 18,487 ( 0.00%)          self.0[..].hash(s)
      .               }
      .           }
      .           
      .           macro_rules! direct_interners {
      .               ($($name:ident: $method:ident($ty:ty),)+) => {
      .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
      .                       fn borrow<'a>(&'a self) -> &'a $ty {
 21,785 ( 0.00%)                  &self.0
      .                       }
      .                   }
      .           
      .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
      .                       fn eq(&self, other: &Self) -> bool {
      .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
      .                           // equals `x == y`.
      .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
      .                   }
      .           
      .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
      .           
      .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
      .                       fn hash<H: Hasher>(&self, s: &mut H) {
      .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
      .                           // x.hash(s)`.
 13,954 ( 0.00%)                  self.0.hash(s)
      .                       }
      .                   }
      .           
      .                   impl<'tcx> TyCtxt<'tcx> {
193,867 ( 0.03%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
 99,168 ( 0.01%)                  self.interners.$name.intern(v, |v| {
  2,709 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
      .                           }).0
217,620 ( 0.03%)              }
      .                   })+
      .               }
      .           }
      .           
      .           direct_interners! {
      .               region: mk_region(RegionKind),
      .               const_: mk_const(Const<'tcx>),
      .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
      .               adt_def: intern_adt_def(AdtDef),
      .               stability: intern_stability(attr::Stability),
      .               const_stability: intern_const_stability(attr::ConstStability),
      .           }
      .           
      .           macro_rules! slice_interners {
      .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
      .                   impl<'tcx> TyCtxt<'tcx> {
694,704 ( 0.09%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
      .                           self.interners.$field.intern_ref(v, || {
      .                               Interned(List::from_arena(&*self.arena, v))
      .                           }).0
621,162 ( 0.08%)              })+
      .                   }
      .               );
      .           }
      .           
      .           slice_interners!(
      .               type_list: _intern_type_list(Ty<'tcx>),
      .               substs: _intern_substs(GenericArg<'tcx>),
      .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2129 ----------------------------------------
      .               /// unsafe.
      .               pub fn safe_to_unsafe_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {
      .                   assert_eq!(sig.unsafety(), hir::Unsafety::Normal);
      .                   self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig { unsafety: hir::Unsafety::Unsafe, ..sig }))
      .               }
      .           
      .               /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`
      .               /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.
     12 ( 0.00%)      pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {
      .                   self.super_traits_of(trait_def_id).any(|trait_did| {
      .                       self.associated_items(trait_did)
      .                           .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, trait_did)
      .                           .is_some()
      .                   })
      9 ( 0.00%)      }
      .           
      .               /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)
      .               /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used
      .               /// to identify which traits may define a given associated type to help avoid cycle errors.
      .               /// Returns a `DefId` iterator.
      .               fn super_traits_of(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {
      .                   let mut set = FxHashSet::default();
      2 ( 0.00%)          let mut stack = vec![trait_def_id];
      .           
      .                   set.insert(trait_def_id);
      .           
      9 ( 0.00%)          iter::from_fn(move || -> Option<DefId> {
      2 ( 0.00%)              let trait_did = stack.pop()?;
      1 ( 0.00%)              let generic_predicates = self.super_predicates_of(trait_did);
      .           
      .                       for (predicate, _) in generic_predicates.predicates {
      .                           if let ty::PredicateKind::Trait(data) = predicate.kind().skip_binder() {
      .                               if set.insert(data.def_id()) {
      .                                   stack.push(data.def_id());
      .                               }
      .                           }
      .                       }
-- line 2165 ----------------------------------------
-- line 2188 ----------------------------------------
      .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
      .                   })
      .               }
      .           
      .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
      .               /// `*r == kind`.
      .               #[inline]
      .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
 21,536 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
      .               }
      .           
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline]
      .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
446,616 ( 0.06%)          self.interners.intern_ty(st)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
210,322 ( 0.03%)          let inner = self.interners.intern_predicate(binder);
      .                   Predicate { inner }
      .               }
      .           
      .               #[inline]
173,976 ( 0.02%)      pub fn reuse_or_mk_predicate(
      .                   self,
      .                   pred: Predicate<'tcx>,
      .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> Predicate<'tcx> {
 11,889 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
173,976 ( 0.02%)      }
      .           
      .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
      .                   match tm {
      .                       IntTy::Isize => self.types.isize,
      .                       IntTy::I8 => self.types.i8,
      .                       IntTy::I16 => self.types.i16,
      .                       IntTy::I32 => self.types.i32,
      .                       IntTy::I64 => self.types.i64,
      .                       IntTy::I128 => self.types.i128,
      .                   }
      .               }
      .           
      .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
     96 ( 0.00%)          match tm {
      .                       UintTy::Usize => self.types.usize,
      .                       UintTy::U8 => self.types.u8,
      .                       UintTy::U16 => self.types.u16,
      .                       UintTy::U32 => self.types.u32,
      .                       UintTy::U64 => self.types.u64,
      .                       UintTy::U128 => self.types.u128,
      .                   }
     96 ( 0.00%)      }
      .           
      .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
      .                   match tm {
      .                       FloatTy::F32 => self.types.f32,
      .                       FloatTy::F64 => self.types.f64,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn mk_static_str(self) -> Ty<'tcx> {
    130 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   // Take a copy of substs so that we own the vectors inside.
      .                   self.mk_ty(Adt(def, substs))
      .               }
      .           
-- line 2259 ----------------------------------------
-- line 2329 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
      .               }
      .           
      .               #[inline]
    460 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
      .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
    480 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Slice(ty))
      .               }
      .           
      .               #[inline]
      .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
     16 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
     74 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
      .               }
      .           
      .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
  2,338 ( 0.00%)          iter.intern_with(|ts| {
    532 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
  4,600 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
  2,088 ( 0.00%)          })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_unit(self) -> Ty<'tcx> {
    146 ( 0.00%)          self.types.unit
      .               }
      .           
      .               #[inline]
      .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
    136 ( 0.00%)          if self.features().never_type_fallback { self.types.never } else { self.types.unit }
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(FnDef(def_id, substs))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
    524 ( 0.00%)          self.mk_ty(FnPtr(fty))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_dynamic(
      .                   self,
      .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   reg: ty::Region<'tcx>,
      .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
      .                   self.mk_ty_infer(TyVar(v))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
     18 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
      .                   self.mk_ty_infer(IntVar(v))
      .               }
      .           
      .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
      .                   self.mk_ty(Param(ParamTy { index, name }))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
      .               }
      .           
  1,631 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
  1,035 ( 0.00%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
    390 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
      .                       }
    336 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
      .                       GenericParamDefKind::Const { .. } => {
      .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
      .                       }
      .                   }
  1,631 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Opaque(def_id, substs))
      .               }
      .           
     28 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
     28 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
     56 ( 0.00%)      }
      .           
      .               pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Deref)
      .               }
      .           
      6 ( 0.00%)      pub fn mk_place_downcast(
      .                   self,
      .                   place: Place<'tcx>,
      .                   adt_def: &'tcx AdtDef,
      .                   variant_index: VariantIdx,
      .               ) -> Place<'tcx> {
      6 ( 0.00%)          self.mk_place_elem(
      .                       place,
     12 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
      .                   )
     12 ( 0.00%)      }
      .           
     12 ( 0.00%)      pub fn mk_place_downcast_unnamed(
      .                   self,
      .                   place: Place<'tcx>,
      .                   variant_index: VariantIdx,
      .               ) -> Place<'tcx> {
     12 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
     24 ( 0.00%)      }
      .           
      .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Index(index))
      .               }
      .           
      .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
      .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
      .               /// flight.
    414 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
      .                   let mut projection = place.projection.to_vec();
      .                   projection.push(elem);
      .           
      .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
    460 ( 0.00%)      }
      .           
  2,058 ( 0.00%)      pub fn intern_poly_existential_predicates(
      .                   self,
      .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
    614 ( 0.00%)          assert!(!eps.is_empty());
      .                   assert!(
      .                       eps.array_windows()
  2,200 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
      .                               != Ordering::Greater)
      .                   );
  2,456 ( 0.00%)          self._intern_poly_existential_predicates(eps)
  2,352 ( 0.00%)      }
      .           
      .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
      .                   // FIXME consider asking the input slice to be sorted to avoid
      .                   // re-interning permutations, in which case that would be asserted
      .                   // here.
  3,325 ( 0.00%)          if preds.is_empty() {
      .                       // The macro-generated method below asserts we don't intern an empty slice.
      .                       List::empty()
      .                   } else {
    611 ( 0.00%)              self._intern_predicates(preds)
      .                   }
  5,464 ( 0.00%)      }
      .           
      .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
 10,659 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
    158 ( 0.00%)      }
      .           
      .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
118,834 ( 0.02%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
 14,832 ( 0.00%)      }
      .           
      .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
      .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
      .               }
      .           
      .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
  2,031 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    834 ( 0.00%)      }
      .           
      .               pub fn intern_canonical_var_infos(
      .                   self,
      .                   ts: &[CanonicalVarInfo<'tcx>],
      .               ) -> CanonicalVarInfos<'tcx> {
  6,581 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
    750 ( 0.00%)      }
      .           
      .               pub fn intern_bound_variable_kinds(
      .                   self,
      .                   ts: &[ty::BoundVariableKind],
      .               ) -> &'tcx List<ty::BoundVariableKind> {
  2,772 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
  4,308 ( 0.00%)      }
      .           
      .               pub fn mk_fn_sig<I>(
      .                   self,
      .                   inputs: I,
      .                   output: I::Item,
      .                   c_variadic: bool,
      .                   unsafety: hir::Unsafety,
      .                   abi: abi::Abi,
      .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
      .               where
      .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
      .               {
      .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
  1,415 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
    177 ( 0.00%)              c_variadic,
    292 ( 0.00%)              unsafety,
    124 ( 0.00%)              abi,
    100 ( 0.00%)          })
      .               }
      .           
      .               pub fn mk_poly_existential_predicates<
      .                   I: InternAs<
      .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   >,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
  1,273 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
      .               }
      .           
      .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
      6 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
      .               }
      .           
      .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
  1,823 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
      .               }
      .           
      .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
126,253 ( 0.02%)          iter.intern_with(|xs| self.intern_substs(xs))
      .               }
      .           
      .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
    498 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
      .               }
      .           
  4,085 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
      .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
  8,170 ( 0.00%)      }
      .           
      .               pub fn mk_bound_variable_kinds<
      .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
 16,511 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
      .               }
      .           
      .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
      .               /// It stops at `bound` and just returns it if reached.
 32,928 ( 0.00%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
 32,928 ( 0.00%)          let hir = self.hir();
      .                   loop {
 62,679 ( 0.01%)              if id == bound {
      .                           return bound;
      .                       }
      .           
 81,121 ( 0.01%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
      .                           return id;
      .                       }
      .                       let next = hir.get_parent_node(id);
 48,567 ( 0.01%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
 47,040 ( 0.01%)      }
      .           
  3,584 ( 0.00%)      pub fn lint_level_at_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   mut id: hir::HirId,
      .               ) -> (Level, LintLevelSource) {
      .                   let sets = self.lint_levels(());
      .                   loop {
 29,834 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
      .                           return pair;
      .                       }
  2,618 ( 0.00%)              let next = self.hir().get_parent_node(id);
  7,854 ( 0.00%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
  3,584 ( 0.00%)      }
      .           
     42 ( 0.00%)      pub fn struct_span_lint_hir(
      .                   self,
      .                   lint: &'static Lint,
      .                   hir_id: HirId,
      .                   span: impl Into<MultiSpan>,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
  1,095 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
    265 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
     24 ( 0.00%)      }
      .           
      .               pub fn struct_lint_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   id: HirId,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
      .                   let (level, src) = self.lint_level_at_node(lint, id);
      .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
      .               }
      .           
  1,743 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
    498 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
      .                   let candidates = map.get(&id.local_id)?;
    498 ( 0.00%)          Some(&*candidates)
  1,992 ( 0.00%)      }
      .           
  3,311 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
      .                   debug!(?id, "named_region");
      .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
  4,257 ( 0.00%)      }
      .           
    180 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
      .                   self.is_late_bound_map(id.owner)
     10 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
    160 ( 0.00%)      }
      .           
  3,374 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
      .                   self.object_lifetime_defaults_map(id.owner)
  4,338 ( 0.00%)      }
      .           
  2,646 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
      .                   self.mk_bound_variable_kinds(
      .                       self.late_bound_vars_map(id.owner)
      .                           .and_then(|map| map.get(&id.local_id).cloned())
      .                           .unwrap_or_else(|| {
      .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
      .                           })
      .                           .iter(),
      .                   )
  2,646 ( 0.00%)      }
      .           
      .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
      .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
      .               }
      .           
      .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
      .               /// feature gates
    190 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
     19 ( 0.00%)          if self.is_const_fn_raw(def_id) {
      .                       match self.lookup_const_stability(def_id) {
      .                           Some(stability) if stability.level.is_unstable() => {
      .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
      .                               // corresponding feature gate.
      .                               self.features()
      .                                   .declared_lib_features
      .                                   .iter()
      .                                   .any(|&(sym, _)| sym == stability.feature)
-- line 2741 ----------------------------------------
-- line 2743 ----------------------------------------
      .                           // functions without const stability are either stable user written
      .                           // const fn or the user is using feature gates and we thus don't
      .                           // care what they do
      .                           _ => true,
      .                       }
      .                   } else {
      .                       false
      .                   }
    171 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TyCtxtAt<'tcx> {
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
      .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
      .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
      .           }
      .           
      .           impl<I, T, R, E> InternAs<[T], R> for I
      .           where
      .               E: InternIteratorElement<T, R>,
      .               I: Iterator<Item = E>,
      .           {
      .               type Output = E::Output;
 61,144 ( 0.01%)      fn intern_with<F>(self, f: F) -> Self::Output
      .               where
      .                   F: FnOnce(&[T]) -> R,
      .               {
344,477 ( 0.05%)          E::intern_with(self, f)
 60,075 ( 0.01%)      }
      .           }
      .           
      .           pub trait InternIteratorElement<T, R>: Sized {
      .               type Output;
      .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
      .           }
      .           
      .           impl<T, R> InternIteratorElement<T, R> for T {
      .               type Output = R;
 49,385 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`.
 74,003 ( 0.01%)          match iter.size_hint() {
      .                       (0, Some(0)) => {
      3 ( 0.00%)                  assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
      .                           let t0 = iter.next().unwrap();
     31 ( 0.00%)                  assert!(iter.next().is_none());
 10,052 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
      .                           let t0 = iter.next().unwrap();
      .                           let t1 = iter.next().unwrap();
    127 ( 0.00%)                  assert!(iter.next().is_none());
 10,078 ( 0.00%)                  f(&[t0, t1])
      .                       }
    208 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
      .                   }
 44,186 ( 0.01%)      }
      .           }
      .           
      .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
      .           where
      .               T: Clone + 'a,
      .           {
      .               type Output = R;
  1,621 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
      .                   // This code isn't hot.
     40 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
  1,334 ( 0.00%)      }
      .           }
      .           
      .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
      .               type Output = Result<R, E>;
108,149 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`, unless a failure happens first, in which case the result
      .                   // will be an error anyway.
 73,470 ( 0.01%)          Ok(match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
    321 ( 0.00%)                  let t0 = iter.next().unwrap()?;
     36 ( 0.00%)                  assert!(iter.next().is_none());
  5,028 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
    413 ( 0.00%)                  let t0 = iter.next().unwrap()?;
    413 ( 0.00%)                  let t1 = iter.next().unwrap()?;
    147 ( 0.00%)                  assert!(iter.next().is_none());
  5,814 ( 0.00%)                  f(&[t0, t1])
      .                       }
    860 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
      .                   })
121,632 ( 0.02%)      }
      .           }
      .           
      .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
      .           // won't work for us.
      .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
 79,934 ( 0.01%)      t as *const () == u as *const ()
      .           }
      .           
      .           pub fn provide(providers: &mut ty::query::Providers) {
      2 ( 0.00%)      providers.in_scope_traits_map =
      .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
      3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
      2 ( 0.00%)      providers.module_reexports =
      .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
      2 ( 0.00%)      providers.crate_name = |tcx, id| {
      1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
      1 ( 0.00%)          tcx.crate_name
      .               };
      2 ( 0.00%)      providers.maybe_unused_trait_import =
      .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
      2 ( 0.00%)      providers.maybe_unused_extern_crates =
      .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
      2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
      .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
      .               };
      .           
     11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_const_stability =
      .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_deprecation_entry =
  2,960 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
      2 ( 0.00%)      providers.extern_mod_stmt_cnum =
      .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
      3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
      3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
      2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
      .                   assert_eq!(cnum, LOCAL_CRATE);
      .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
      .               };
      2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
      .                   assert_eq!(cnum, LOCAL_CRATE);
      .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
      .               };
      2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
      1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
      .                   // We want to check if the panic handler was defined in this crate
      3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
      .               };
      .           }

333,833 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 91 ----------------------------------------
        .           // maximum of number bytes needed to fill an 8-byte-sized element on which
        .           // SipHash operates. Note that for variable-sized copies which are known to be
        .           // less than 8 bytes, this function will perform more work than necessary unless
        .           // the compiler is able to optimize the extra work away.
        .           #[inline]
        .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
        .               debug_assert!(count <= 8);
        .           
   16,906 ( 0.00%)      if count == 8 {
        .                   ptr::copy_nonoverlapping(src, dst, 8);
        .                   return;
        .               }
        .           
        .               let mut i = 0;
   22,838 ( 0.00%)      if i + 3 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
        .                   i += 4;
        .               }
        .           
   48,888 ( 0.01%)      if i + 1 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
    6,890 ( 0.00%)          i += 2
        .               }
        .           
   22,838 ( 0.00%)      if i < count {
   13,521 ( 0.00%)          *dst.add(i) = *src.add(i);
        .                   i += 1;
        .               }
        .           
        .               debug_assert_eq!(i, count);
        .           }
        .           
        .           // # Implementation
        .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
        .           
        .                   hasher
        .               }
        .           
        .               // A specialized write function for values with size <= 8.
        .               #[inline]
        .               fn short_write<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
  165,086 ( 0.02%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
1,121,458 ( 0.15%)          if nbuf + size < BUFFER_SIZE {
        .                       unsafe {
        .                           // The memcpy call is optimized away because the size is known.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .                       }
        .           
  352,316 ( 0.05%)              self.nbuf = nbuf + size;
        .           
        .                       return;
        .                   }
        .           
   56,491 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
        .               }
        .           
        .               // A specialized write function for values with size <= 8 that should only
        .               // be called when the write would cause the buffer to fill.
        .               //
        .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
        .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
        .               // overflow) if it wasn't already.
        .               #[inline(never)]
   17,141 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
   17,141 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
        .                   // Copy first part of input into end of buffer, possibly into spill
        .                   // element. The memcpy call is optimized away because the size is known.
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .           
        .                   // Process buffer.
        .                   for i in 0..BUFFER_CAPACITY {
  171,410 ( 0.02%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  137,128 ( 0.02%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
  154,269 ( 0.02%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer by copying size - 1
        .                   // elements from spill (at most size - 1 bytes could have overflowed
        .                   // into the spill). The memcpy call is optimized away because the size
        .                   // is known. And the whole copy is optimized away for size == 1.
        .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
        .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
        .           
        .                   // This function should only be called when the write fills the buffer.
        .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
        .                   // is statically known, so the branch is optimized away.
   80,785 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
   68,564 ( 0.01%)          self.processed += BUFFER_SIZE;
   34,282 ( 0.00%)      }
        .           
        .               // A write function for byte slices.
        .               #[inline]
        .               fn slice_write(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
    7,302 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .           
   65,650 ( 0.01%)          if nbuf + length < BUFFER_SIZE {
        .                       unsafe {
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .           
   23,690 ( 0.00%)                  if length <= 8 {
        .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
        .                           } else {
        .                               // This memcpy is *not* optimized away.
        .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
        .                           }
        .                       }
        .           
   11,945 ( 0.00%)              self.nbuf = nbuf + length;
        .           
        .                       return;
        .                   }
        .           
    9,207 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
        .               }
        .           
        .               // A write function for byte slices that should only be called when the
        .               // write would cause the buffer to fill.
        .               //
        .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
        .               // and `msg` must contain enough bytes to initialize the rest of the element
        .               // containing the byte offset `self.nbuf`.
        .               #[inline(never)]
    6,510 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
    1,302 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
        .           
        .                   // Always copy first part of input into current element of buffer.
        .                   // This function should only be called when the write fills the buffer,
        .                   // so we know that there is enough input to fill the current element.
    3,906 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    1,302 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
        .           
        .                   let src = msg.as_ptr();
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
        .           
        .                   // Process buffer.
        .           
        .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
        .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
        .                   // We know that is true, because last step ensured we have a full
        .                   // element in the buffer.
    2,604 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
        .           
        .                   for i in 0..last {
    9,611 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
   10,913 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
   19,222 ( 0.00%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Process the remaining element-sized chunks of input.
        .                   let mut processed = needed_in_elem;
    2,604 ( 0.00%)          let input_left = length - processed;
    1,464 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
        .                   let extra_bytes_left = input_left % ELEM_SIZE;
        .           
        .                   for _ in 0..elems_left {
    1,253 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    1,253 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
    1,253 ( 0.00%)              self.state.v0 ^= elem;
    2,506 ( 0.00%)              processed += ELEM_SIZE;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer.
        .                   let src = msg.as_ptr().add(processed);
        .                   let dst = self.buf.as_mut_ptr() as *mut u8;
        .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
        .           
    1,302 ( 0.00%)          self.nbuf = extra_bytes_left;
    6,510 ( 0.00%)          self.processed += nbuf + processed;
    7,812 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn finish128(mut self) -> (u64, u64) {
        .                   debug_assert!(self.nbuf < BUFFER_SIZE);
        .           
        .                   // Process full elements in buffer.
   11,562 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
        .           
        .                   // Since we're consuming self, avoid updating members for a potential
        .                   // performance gain.
   15,416 ( 0.00%)          let mut state = self.state;
        .           
        .                   for i in 0..last {
   10,227 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
   10,227 ( 0.00%)              state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut state);
   10,227 ( 0.00%)              state.v0 ^= elem;
        .                   }
        .           
        .                   // Get remaining partial element.
    7,708 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
        .                       unsafe {
        .                           // Ensure element is initialized by writing zero bytes. At most
        .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
        .                           // to write this many because we have the spill and we maintain
        .                           // `self.nbuf` such that this write will start before the spill.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
        .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
    3,126 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
        .                       }
        .                   } else {
        .                       0
        .                   };
        .           
        .                   // Finalize the hash.
   10,834 ( 0.00%)          let length = self.processed + self.nbuf;
    7,706 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
        .           
    3,853 ( 0.00%)          state.v3 ^= b;
        .                   Sip24Rounds::c_rounds(&mut state);
    3,853 ( 0.00%)          state.v0 ^= b;
        .           
    3,853 ( 0.00%)          state.v2 ^= 0xee;
        .                   Sip24Rounds::d_rounds(&mut state);
   12,220 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
    4,512 ( 0.00%)          state.v1 ^= 0xdd;
        .                   Sip24Rounds::d_rounds(&mut state);
    4,512 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
        .                   (_0, _1)
        .               }
        .           }
        .           
        .           impl Hasher for SipHasher128 {
        .               #[inline]
        .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
        .           }
        .           
        .           #[derive(Debug, Clone, Default)]
        .           struct Sip24Rounds;
        .           
        .           impl Sip24Rounds {
        .               #[inline]
        .               fn c_rounds(state: &mut State) {
  669,335 ( 0.09%)          compress!(state);
  728,544 ( 0.10%)          compress!(state);
        .               }
        .           
        .               #[inline]
        .               fn d_rounds(state: &mut State) {
   24,436 ( 0.00%)          compress!(state);
   24,436 ( 0.00%)          compress!(state);
   24,436 ( 0.00%)          compress!(state);
   20,584 ( 0.00%)          compress!(state);
        .               }
        .           }

  131,097 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                 

-- line 5 ----------------------------------------
        .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
        .           unsafe impl GlobalAlloc for System {
        .               #[inline]
        .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
        .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
        .                   // So only rely on MIN_ALIGN if size >= align.
        .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
        .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
1,242,472 ( 0.17%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
  931,854 ( 0.12%)              libc::malloc(layout.size()) as *mut u8
        .                   } else {
        .                       #[cfg(target_os = "macos")]
        .                       {
        .                           if layout.align() > (1 << 31) {
        .                               return ptr::null_mut();
        .                           }
        .                       }
        .                       aligned_malloc(&layout)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
        .                   // See the comment above in `alloc` for why this check looks the way it does.
   31,852 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
   47,778 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
        .                   } else {
        .                       let ptr = self.alloc(layout);
        .                       if !ptr.is_null() {
        .                           ptr::write_bytes(ptr, 0, layout.size());
        .                       }
        .                       ptr
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
  318,549 ( 0.04%)          libc::free(ptr as *mut libc::c_void)
        .               }
        .           
        .               #[inline]
        .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
   96,240 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
  192,480 ( 0.03%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
        .                   } else {
        .                       realloc_fallback(self, ptr, layout, new_size)
        .                   }
        .               }
        .           }
        .           
        .           cfg_if::cfg_if! {
        .               if #[cfg(any(
-- line 56 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                 

-- line 186 ----------------------------------------
        .           /// // use the values stored in map
        .           /// ```
        .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
        .               pub(crate) hash_builder: S,
        .               pub(crate) table: RawTable<(K, V), A>,
        .           }
        .           
        .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
      208 ( 0.00%)      fn clone(&self) -> Self {
      650 ( 0.00%)          HashMap {
        .                       hash_builder: self.hash_builder.clone(),
      122 ( 0.00%)              table: self.table.clone(),
        .                   }
      234 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   self.table.clone_from(&source.table);
        .           
        .                   // Update hash_builder only if we successfully cloned all elements.
        .                   self.hash_builder.clone_from(&source.hash_builder);
        .               }
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
       46 ( 0.00%)  pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash,
        .               S: BuildHasher,
        .           {
   46,602 ( 0.01%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
       69 ( 0.00%)  }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
       46 ( 0.00%)  fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
   83,727 ( 0.01%)      move |x| k.eq(x.0.borrow())
       69 ( 0.00%)  }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
  102,187 ( 0.01%)      move |x| k.eq(x.borrow())
        .           }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
        .               use core::hash::Hasher;
        .               let mut state = hash_builder.build_hasher();
        .               val.hash(&mut state);
        .               state.finish()
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           #[cfg_attr(feature = "inline-more", inline)]
       74 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
        .               S: BuildHasher,
        .           {
    4,572 ( 0.00%)      hash_builder.hash_one(val)
       52 ( 0.00%)  }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
        .           where
        .               K: Hash,
        .               S: BuildHasher,
        .           {
-- line 274 ----------------------------------------
-- line 275 ----------------------------------------
        .               use core::hash::Hasher;
        .               let mut state = hash_builder.build_hasher();
        .               val.hash(&mut state);
        .               state.finish()
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           #[cfg_attr(feature = "inline-more", inline)]
       69 ( 0.00%)  pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
        .           where
        .               K: Hash,
        .               S: BuildHasher,
        .           {
   74,479 ( 0.01%)      hash_builder.hash_one(val)
       46 ( 0.00%)  }
        .           
        .           #[cfg(feature = "ahash")]
        .           impl<K, V> HashMap<K, V, DefaultHashBuilder> {
        .               /// Creates an empty `HashMap`.
        .               ///
        .               /// The hash map is initially created with a capacity of 0, so it will not allocate until it
        .               /// is first inserted into.
        .               ///
-- line 297 ----------------------------------------
-- line 366 ----------------------------------------
        .               ///
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               ///
        .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
        .               #[cfg_attr(feature = "inline-more", inline)]
      210 ( 0.00%)      pub const fn with_hasher(hash_builder: S) -> Self {
   51,508 ( 0.01%)          Self {
        .                       hash_builder,
      120 ( 0.00%)              table: RawTable::new(),
        .                   }
       60 ( 0.00%)      }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys.
        .               ///
        .               /// The hash map will be able to hold at least `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the hash map will not allocate.
        .               ///
        .               /// Warning: `hash_builder` is normally randomly generated, and
-- line 387 ----------------------------------------
-- line 436 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               /// use hashbrown::hash_map::DefaultHashBuilder;
        .               ///
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        7 ( 0.00%)      pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
       83 ( 0.00%)          Self {
        .                       hash_builder,
        4 ( 0.00%)              table: RawTable::new_in(alloc),
        .                   }
        2 ( 0.00%)      }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys. It will be allocated with the given allocator.
        .               ///
        .               /// The hash map will be able to hold at least `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the hash map will not allocate.
        .               ///
        .               /// Warning: `hash_builder` is normally randomly generated, and
-- line 457 ----------------------------------------
-- line 599 ----------------------------------------
        .               /// map.insert("b", 2);
        .               /// map.insert("c", 3);
        .               ///
        .               /// for (key, val) in map.iter() {
        .               ///     println!("key: {} val: {}", key, val);
        .               /// }
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      120 ( 0.00%)      pub fn iter(&self) -> Iter<'_, K, V> {
        .                   // Here we tie the lifetime of self to the iter.
        .                   unsafe {
      120 ( 0.00%)              Iter {
       90 ( 0.00%)                  inner: self.table.iter(),
        .                           marker: PhantomData,
        .                       }
        .                   }
       60 ( 0.00%)      }
        .           
        .               /// An iterator visiting all key-value pairs in arbitrary order,
        .               /// with mutable references to the values.
        .               /// The iterator element type is `(&'a K, &'a mut V)`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 623 ----------------------------------------
-- line 663 ----------------------------------------
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert_eq!(a.len(), 0);
        .               /// a.insert(1, "a");
        .               /// assert_eq!(a.len(), 1);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn len(&self) -> usize {
    6,726 ( 0.00%)          self.table.len()
        .               }
        .           
        .               /// Returns `true` if the map contains no elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert!(a.is_empty());
        .               /// a.insert(1, "a");
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn is_empty(&self) -> bool {
   21,191 ( 0.00%)          self.len() == 0
        .               }
        .           
        .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
        .               /// allocated memory for reuse.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// a.insert(1, "a");
        .               /// a.clear();
        .               /// assert!(a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        6 ( 0.00%)      pub fn clear(&mut self) {
        .                   self.table.clear();
        6 ( 0.00%)      }
        .           
        .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
        .               /// The map cannot be used after calling this.
        .               /// The iterator element type is `K`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
        .               /// }
        .               ///
        .               /// assert_eq!(letters[&'s'], 2);
        .               /// assert_eq!(letters[&'t'], 3);
        .               /// assert_eq!(letters[&'u'], 1);
        .               /// assert_eq!(letters.get(&'y'), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      444 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
        .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
      100 ( 0.00%)              Entry::Occupied(OccupiedEntry {
        .                           hash,
        .                           key: Some(key),
        .                           elem,
        .                           table: self,
        .                       })
        .                   } else {
      455 ( 0.00%)              Entry::Vacant(VacantEntry {
        .                           hash,
        .                           key,
        .                           table: self,
        .                       })
        .                   }
      555 ( 0.00%)      }
        .           
        .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
        .               ///
-- line 995 ----------------------------------------
-- line 1041 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.get(&1), Some(&"a"));
        .               /// assert_eq!(map.get(&2), None);
        .               /// ```
        .               #[inline]
        3 ( 0.00%)      pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  168,216 ( 0.02%)          match self.get_inner(k) {
        .                       Some(&(_, ref v)) => Some(v),
        2 ( 0.00%)              None => None,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
        .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1067 ----------------------------------------
-- line 1086 ----------------------------------------
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match self.get_inner(k) {
        .                       Some(&(ref key, ref value)) => Some((key, value)),
        .                       None => None,
        .                   }
        .               }
        .           
        .               #[inline]
        5 ( 0.00%)      fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
  239,845 ( 0.03%)          if self.table.is_empty() {
        1 ( 0.00%)              None
        .                   } else {
        1 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
        .                       self.table.get(hash, equivalent_key(k))
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
        .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1113 ----------------------------------------
-- line 1155 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.contains_key(&1), true);
        .               /// assert_eq!(map.contains_key(&2), false);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
   74,771 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   self.get_inner(k).is_some()
   95,734 ( 0.01%)      }
        .           
        .               /// Returns a mutable reference to the value corresponding to the key.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
        .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// if let Some(x) = map.get_mut(&1) {
        .               ///     *x = "b";
        .               /// }
        .               /// assert_eq!(map[&1], "b");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      139 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      504 ( 0.00%)          match self.get_inner_mut(k) {
        .                       Some(&mut (_, ref mut v)) => Some(v),
        .                       None => None,
        .                   }
      278 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
      170 ( 0.00%)          if self.table.is_empty() {
        .                       None
        .                   } else {
        .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      116 ( 0.00%)              self.table.get_mut(hash, equivalent_key(k))
        .                   }
        .               }
        .           
        .               /// Attempts to get mutable references to `N` values in the map at once.
        .               ///
        .               /// Returns an array of length `N` with the results of each query. For soundness, at most one
        .               /// mutable reference will be returned to any value. `None` will be returned if any of the
        .               /// keys are duplicates or missing.
-- line 1223 ----------------------------------------
-- line 1495 ----------------------------------------
        .               /// assert_eq!(map.insert(37, "a"), None);
        .               /// assert_eq!(map.is_empty(), false);
        .               ///
        .               /// map.insert(37, "b");
        .               /// assert_eq!(map.insert(37, "c"), Some("b"));
        .               /// assert_eq!(map[&37], "c");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
  933,775 ( 0.12%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
      207 ( 0.00%)          let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
      724 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
        6 ( 0.00%)              Some(mem::replace(item, v))
        .                   } else {
  507,281 ( 0.07%)              self.table
  448,318 ( 0.06%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
   51,489 ( 0.01%)              None
        .                   }
  875,790 ( 0.12%)      }
        .           
        .               /// Insert a key-value pair into the map without checking
        .               /// if the key already exists in the map.
        .               ///
        .               /// Returns a reference to the key and value just inserted.
        .               ///
        .               /// This operation is safe if a key does not exist in the map.
        .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.remove(&1), Some("a"));
        .               /// assert_eq!(map.remove(&1), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
   14,710 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  276,301 ( 0.04%)          match self.remove_entry(k) {
    5,910 ( 0.00%)              Some((_, v)) => Some(v),
   13,143 ( 0.00%)              None => None,
        .                   }
   33,946 ( 0.00%)      }
        .           
        .               /// Removes a key from the map, returning the stored key and value if the
        .               /// key was previously in the map.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
   75,323 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
        .               }
        .           }
        .           
        .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
        .               /// Creates a raw entry builder for the HashMap.
        .               ///
        .               /// Raw entries provide the lowest level of control for searching and
        .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 1737 ----------------------------------------
        .           
        .           impl<K, V, S, A> Default for HashMap<K, V, S, A>
        .           where
        .               S: Default,
        .               A: Default + Allocator + Clone,
        .           {
        .               /// Creates an empty `HashMap<K, V, S, A>`, with the `Default` value for the hasher and allocator.
        .               #[cfg_attr(feature = "inline-more", inline)]
        3 ( 0.00%)      fn default() -> Self {
       12 ( 0.00%)          Self::with_hasher_in(Default::default(), Default::default())
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<K, Q: ?Sized, V, S, A> Index<&Q> for HashMap<K, V, S, A>
        .           where
        .               K: Eq + Hash + Borrow<Q>,
        .               Q: Eq + Hash,
        .               S: BuildHasher,
        .               A: Allocator + Clone,
-- line 1755 ----------------------------------------
-- line 2209 ----------------------------------------
        .               /// Creates a `RawEntryMut` from the given key and its hash.
        .               #[inline]
        .               #[allow(clippy::wrong_self_convention)]
        .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
  489,586 ( 0.07%)          self.from_hash(hash, equivalent(k))
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
        .               /// Creates a `RawEntryMut` from the given hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
1,257,718 ( 0.17%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
        .                   self.search(hash, is_match)
1,353,454 ( 0.18%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
  149,258 ( 0.02%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
  724,959 ( 0.10%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
        .                           elem,
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
  115,579 ( 0.02%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
        .                   self.from_key_hashed_nocheck(hash, k)
        .               }
        .           
        .               /// Access an entry by a key and its hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
  342,256 ( 0.05%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
  445,551 ( 0.06%)          self.from_hash(hash, equivalent(k))
  628,706 ( 0.08%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
        .               where
        .                   F: FnMut(&K) -> bool,
        .               {
  591,747 ( 0.08%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
        .                       Some(&(ref key, ref value)) => Some((key, value)),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Access an entry by hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
        .               /// and returns a mutable reference to it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::shadow_unrelated)]
        .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
        .               where
        .                   K: Hash,
        .                   S: BuildHasher,
        .               {
  188,326 ( 0.03%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
        .                       hash,
        .                       (key, value),
        .                       make_hasher::<K, _, V, S>(self.hash_builder),
        .                   );
        .                   (k, v)
        .               }
        .           
        .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
        .               /// map.insert("a", 1);
        .               /// map.insert("b", 2);
        .               /// map.insert("c", 3);
        .               ///
        .               /// // Not possible with .iter()
        .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      790 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
   15,844 ( 0.00%)          IntoIter {
    8,644 ( 0.00%)              inner: self.table.into_iter(),
        .                   }
    2,370 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
        .               type Item = (&'a K, &'a V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
       60 ( 0.00%)      fn next(&mut self) -> Option<(&'a K, &'a V)> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
   38,628 ( 0.01%)          match self.inner.next() {
        .                       Some(x) => unsafe {
        .                           let r = x.as_ref();
      380 ( 0.00%)                  Some((&r.0, &r.1))
        .                       },
       60 ( 0.00%)              None => None,
        .                   }
      120 ( 0.00%)      }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
       18 ( 0.00%)          self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn len(&self) -> usize {
        .                   self.inner.len()
        .               }
        .           }
-- line 3013 ----------------------------------------
-- line 3018 ----------------------------------------
        .               type Item = (&'a K, &'a mut V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(&'a K, &'a mut V)> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match self.inner.next() {
        .                       Some(x) => unsafe {
        .                           let r = x.as_mut();
       12 ( 0.00%)                  Some((&r.0, &mut r.1))
        .                       },
        .                       None => None,
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
-- line 3034 ----------------------------------------
-- line 3051 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
        .               type Item = (K, V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(K, V)> {
      464 ( 0.00%)          self.inner.next()
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
        .                   f.debug_list().entries(self.iter()).finish()
        .               }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
        .               type Item = &'a K;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
       76 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match self.inner.next() {
        .                       Some((k, _)) => Some(k),
        .                       None => None,
        .                   }
      152 ( 0.00%)      }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn insert(self, value: V) -> &'a mut V
        .               where
        .                   K: Hash,
        .                   S: BuildHasher,
        .               {
        .                   let table = &mut self.table.table;
       32 ( 0.00%)          let entry = table.insert_entry(
        .                       self.hash,
        .                       (self.key, value),
        .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
        .                   );
        .                   &mut entry.1
        .               }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
        .           /// keys with new values returned from the iterator.
        .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
        .           where
        .               K: Eq + Hash,
        .               S: BuildHasher,
        .               A: Allocator + Clone,
        .           {
        .               #[cfg_attr(feature = "inline-more", inline)]
   13,157 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
        .                   // Keys may be already present or show multiple times in the iterator.
        .                   // Reserve the entire hint lower bound if the map is empty.
        .                   // Otherwise reserve half the hint (rounded up), so the map
        .                   // will only resize twice in the worst case.
   11,313 ( 0.00%)          let iter = iter.into_iter();
    5,579 ( 0.00%)          let reserve = if self.is_empty() {
        .                       iter.size_hint().0
        .                   } else {
      735 ( 0.00%)              (iter.size_hint().0 + 1) / 2
        .                   };
        .                   self.reserve(reserve);
        .                   iter.for_each(move |(k, v)| {
   31,284 ( 0.00%)              self.insert(k, v);
        .                   });
    8,196 ( 0.00%)      }
        .           
        .               #[inline]
        .               #[cfg(feature = "nightly")]
        .               fn extend_one(&mut self, (k, v): (K, V)) {
        .                   self.insert(k, v);
        .               }
        .           
        .               #[inline]
-- line 4588 ----------------------------------------
-- line 4604 ----------------------------------------
        .           impl<'a, K, V, S, A> Extend<(&'a K, &'a V)> for HashMap<K, V, S, A>
        .           where
        .               K: Eq + Hash + Copy,
        .               V: Copy,
        .               S: BuildHasher,
        .               A: Allocator + Clone,
        .           {
        .               #[cfg_attr(feature = "inline-more", inline)]
        7 ( 0.00%)      fn extend<T: IntoIterator<Item = (&'a K, &'a V)>>(&mut self, iter: T) {
        .                   self.extend(iter.into_iter().map(|(&key, &value)| (key, value)));
        8 ( 0.00%)      }
        .           
        .               #[inline]
        .               #[cfg(feature = "nightly")]
        .               fn extend_one(&mut self, (k, v): (&'a K, &'a V)) {
        .                   self.insert(*k, *v);
        .               }
        .           
        .               #[inline]
-- line 4622 ----------------------------------------

  532,875 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs
--------------------------------------------------------------------------------
Ir               

-- line 28 ----------------------------------------
      .               PushRegionObligation,
      .           }
      .           
      .           macro_rules! impl_from {
      .               ($($ctor: ident ($ty: ty),)*) => {
      .                   $(
      .                   impl<'tcx> From<$ty> for UndoLog<'tcx> {
      .                       fn from(x: $ty) -> Self {
    312 ( 0.00%)                  UndoLog::$ctor(x.into())
      .                       }
      .                   }
      .                   )*
      .               }
      .           }
      .           
      .           // Upcast from a single kind of "undoable action" to the general enum
      .           impl_from! {
-- line 44 ----------------------------------------
-- line 57 ----------------------------------------
      .               ConstUnificationTable(sv::UndoLog<ut::Delegate<ty::ConstVid<'tcx>>>),
      .           
      .               RegionUnificationTable(sv::UndoLog<ut::Delegate<RegionVidKey<'tcx>>>),
      .               ProjectionCache(traits::UndoLog<'tcx>),
      .           }
      .           
      .           /// The Rollback trait defines how to rollback a particular action.
      .           impl<'tcx> Rollback<UndoLog<'tcx>> for InferCtxtInner<'tcx> {
115,383 ( 0.02%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
192,305 ( 0.03%)          match undo {
160,350 ( 0.02%)              UndoLog::TypeVariables(undo) => self.type_variable_storage.reverse(undo),
      6 ( 0.00%)              UndoLog::ConstUnificationTable(undo) => self.const_unification_storage.reverse(undo),
      6 ( 0.00%)              UndoLog::IntUnificationTable(undo) => self.int_unification_storage.reverse(undo),
      .                       UndoLog::FloatUnificationTable(undo) => self.float_unification_storage.reverse(undo),
      .                       UndoLog::RegionConstraintCollector(undo) => {
 86,751 ( 0.01%)                  self.region_constraint_storage.as_mut().unwrap().reverse(undo)
      .                       }
      .                       UndoLog::RegionUnificationTable(undo) => {
 19,870 ( 0.00%)                  self.region_constraint_storage.as_mut().unwrap().unification_table.reverse(undo)
      .                       }
      .                       UndoLog::ProjectionCache(undo) => self.projection_cache.reverse(undo),
      .                       UndoLog::PushRegionObligation => {
      .                           self.region_obligations.pop();
      .                       }
      .                   }
153,844 ( 0.02%)      }
      .           }
      .           
      .           /// The combined undo log for all the various unification tables. For each change to the storage
      .           /// for any kind of inference variable, we record an UndoLog entry in the vector here.
      .           pub(crate) struct InferCtxtUndoLogs<'tcx> {
      .               logs: Vec<UndoLog<'tcx>>,
      .               num_open_snapshots: usize,
      .           }
      .           
      .           impl Default for InferCtxtUndoLogs<'_> {
      .               fn default() -> Self {
 11,816 ( 0.00%)          Self { logs: Default::default(), num_open_snapshots: Default::default() }
      .               }
      .           }
      .           
      .           /// The UndoLogs trait defines how we undo a particular kind of action (of type T). We can undo any
      .           /// action that is convertable into an UndoLog (per the From impls above).
      .           impl<'tcx, T> UndoLogs<T> for InferCtxtUndoLogs<'tcx>
      .           where
      .               UndoLog<'tcx>: From<T>,
-- line 102 ----------------------------------------
-- line 103 ----------------------------------------
      .           {
      .               #[inline]
      .               fn num_open_snapshots(&self) -> usize {
      .                   self.num_open_snapshots
      .               }
      .           
      .               #[inline]
      .               fn push(&mut self, undo: T) {
 28,845 ( 0.00%)          if self.in_snapshot() {
  2,496 ( 0.00%)              self.logs.push(undo.into())
      .                   }
      .               }
      .           
      .               fn clear(&mut self) {
      .                   self.logs.clear();
      .                   self.num_open_snapshots = 0;
      .               }
      .           
-- line 120 ----------------------------------------
-- line 125 ----------------------------------------
      .               {
      .                   if self.in_snapshot() {
      .                       self.logs.extend(undos.into_iter().map(UndoLog::from))
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> InferCtxtInner<'tcx> {
 80,460 ( 0.01%)      pub fn rollback_to(&mut self, snapshot: Snapshot<'tcx>) {
      .                   debug!("rollback_to({})", snapshot.undo_len);
      .                   self.undo_log.assert_open_snapshot(&snapshot);
      .           
142,203 ( 0.02%)          while self.undo_log.logs.len() > snapshot.undo_len {
      .                       let undo = self.undo_log.logs.pop().unwrap();
461,532 ( 0.06%)              self.reverse(undo);
      .                   }
      .           
 34,843 ( 0.00%)          if self.undo_log.num_open_snapshots == 1 {
      .                       // The root snapshot. It's safe to clear the undo log because
      .                       // there's no snapshot further out that we might need to roll back
      .                       // to.
  7,826 ( 0.00%)              assert!(snapshot.undo_len == 0);
      .                       self.undo_log.logs.clear();
      .                   }
      .           
 44,143 ( 0.01%)          self.undo_log.num_open_snapshots -= 1;
 93,870 ( 0.01%)      }
      .           
      .               pub fn commit(&mut self, snapshot: Snapshot<'tcx>) {
      .                   debug!("commit({})", snapshot.undo_len);
      .           
 50,874 ( 0.01%)          if self.undo_log.num_open_snapshots == 1 {
      .                       // The root snapshot. It's safe to clear the undo log because
      .                       // there's no snapshot further out that we might need to roll back
      .                       // to.
 12,552 ( 0.00%)              assert!(snapshot.undo_len == 0);
      .                       self.undo_log.logs.clear();
      .                   }
      .           
 57,150 ( 0.01%)          self.undo_log.num_open_snapshots -= 1;
      .               }
      .           }
      .           
      .           impl<'tcx> InferCtxtUndoLogs<'tcx> {
      .               pub fn start_snapshot(&mut self) -> Snapshot<'tcx> {
121,472 ( 0.02%)          self.num_open_snapshots += 1;
      .                   Snapshot { undo_len: self.logs.len(), _marker: PhantomData }
      .               }
      .           
      .               pub(crate) fn region_constraints_in_snapshot(
      .                   &self,
      .                   s: &Snapshot<'tcx>,
      .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
  5,475 ( 0.00%)          self.logs[s.undo_len..].iter().filter_map(|log| match log {
      .                       UndoLog::RegionConstraintCollector(log) => Some(log),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               pub(crate) fn region_constraints(
      .                   &self,
      .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
     95 ( 0.00%)          self.logs.iter().filter_map(|log| match log {
      .                       UndoLog::RegionConstraintCollector(log) => Some(log),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn assert_open_snapshot(&self, snapshot: &Snapshot<'tcx>) {
      .                   // Failures here may indicate a failure to follow a stack discipline.
 40,230 ( 0.01%)          assert!(self.logs.len() >= snapshot.undo_len);
 40,230 ( 0.01%)          assert!(self.num_open_snapshots > 0);
      .               }
      .           }
      .           
      .           impl<'tcx> std::ops::Index<usize> for InferCtxtUndoLogs<'tcx> {
      .               type Output = UndoLog<'tcx>;
      .           
      .               fn index(&self, key: usize) -> &Self::Output {
      .                   &self.logs[key]
-- line 204 ----------------------------------------

 78,803 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir               

-- line 27 ----------------------------------------
      .           impl CacheEntry {
      .               #[inline]
      .               fn update(
      .                   &mut self,
      .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
      .                   pos: BytePos,
      .                   time_stamp: usize,
      .               ) {
  1,973 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
  1,670 ( 0.00%)              self.file = file;
  2,695 ( 0.00%)              self.file_index = file_idx;
      .                   }
      .           
    455 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
      .                   let line_bounds = self.file.line_bounds(line_index);
  3,820 ( 0.00%)          self.line_number = line_index + 1;
  5,806 ( 0.00%)          self.line = line_bounds;
      .                   self.touch(time_stamp);
      .               }
      .           
      .               #[inline]
      .               fn touch(&mut self, time_stamp: usize) {
 34,845 ( 0.00%)          self.time_stamp = time_stamp;
      .               }
      .           }
      .           
      .           #[derive(Clone)]
      .           pub struct CachingSourceMapView<'sm> {
      .               source_map: &'sm SourceMap,
      .               line_cache: [CacheEntry; 3],
      .               time_stamp: usize,
      .           }
      .           
      .           impl<'sm> CachingSourceMapView<'sm> {
  1,424 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
      .                   let files = source_map.files();
    712 ( 0.00%)          let first_file = files[0].clone();
      .                   let entry = CacheEntry {
      .                       time_stamp: 0,
      .                       line_number: 0,
      .                       line: BytePos(0)..BytePos(0),
      .                       file: first_file,
      .                       file_index: 0,
      .                   };
      .           
  3,560 ( 0.00%)          CachingSourceMapView {
      .                       source_map,
  4,984 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
      .                       time_stamp: 0,
      .                   }
  2,848 ( 0.00%)      }
      .           
      .               pub fn byte_pos_to_line_and_col(
      .                   &mut self,
      .                   pos: BytePos,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
      .                   self.time_stamp += 1;
      .           
      .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
      .                   };
      .           
      .                   let cache_entry = &mut self.line_cache[oldest];
      .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
      .           
      .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
      .               }
      .           
127,890 ( 0.02%)      pub fn span_data_to_lines_and_cols(
      .                   &mut self,
      .                   span_data: &SpanData,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
 73,080 ( 0.01%)          self.time_stamp += 1;
      .           
      .                   // Check if lo and hi are in the cached lines.
 18,270 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
 18,270 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
      .           
 33,178 ( 0.00%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
      .                       // Cache hit for span lo and hi. Check if they belong to the same file.
      .                       let result = {
 33,150 ( 0.00%)                  let lo = &self.line_cache[lo_cache_idx as usize];
      .                           let hi = &self.line_cache[hi_cache_idx as usize];
      .           
 99,450 ( 0.01%)                  if lo.file_index != hi.file_index {
      .                               return None;
      .                           }
      .           
      .                           (
 33,150 ( 0.00%)                      lo.file.clone(),
      .                               lo.line_number,
      .                               span_data.lo - lo.line.start,
 16,575 ( 0.00%)                      hi.line_number,
      .                               span_data.hi - hi.line.start,
      .                           )
      .                       };
      .           
 16,575 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
 16,575 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
      .           
 66,300 ( 0.01%)              return Some(result);
      .                   }
      .           
      .                   // No cache hit or cache hit for only one of span lo and hi.
  3,362 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
      .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
      .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
      .                   } else {
      .                       self.oldest_cache_entry_index()
      .                   };
      .           
      .                   // If the entry doesn't point to the correct file, get the new file and index.
      .                   // Return early if the file containing beginning of span doesn't contain end of span.
 13,276 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
  6,200 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
  7,440 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
      .                           return None;
      .                       }
      .           
  4,960 ( 0.00%)              Some(new_file_and_idx)
      .                   } else {
      .                       let file = &self.line_cache[oldest].file;
  1,365 ( 0.00%)              if !file_contains(&file, span_data.hi) {
      .                           return None;
      .                       }
      .           
  1,365 ( 0.00%)              None
      .                   };
      .           
      .                   // Update the cache entries.
  8,475 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, -1) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      .           
  4,626 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
      .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
      .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
      .                               let hi = &mut self.line_cache[next_oldest];
      .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
      .                               (oldest, next_oldest)
      .                           } else {
      .                               (oldest, oldest)
      .                           }
      .                       }
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, _) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
     28 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
     42 ( 0.00%)                  hi.touch(self.time_stamp);
      .                           (oldest, hi_cache_idx as usize)
      .                       }
      .                       // Oldest cache entry is for span_data.hi line.
      .                       (_, -1) => {
      .                           let hi = &mut self.line_cache[oldest];
    139 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
    278 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
    556 ( 0.00%)                  lo.touch(self.time_stamp);
      .                           (lo_cache_idx as usize, oldest)
      .                       }
      .                       _ => {
      .                           panic!();
      .                       }
      .                   };
      .           
      .                   let lo = &self.line_cache[lo_idx];
      .                   let hi = &self.line_cache[hi_idx];
      .           
      .                   // Span lo and hi may equal line end when last line doesn't
      .                   // end in newline, hence the inclusive upper bounds below.
  3,390 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
  1,695 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
  3,390 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
  1,695 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
  8,475 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
  5,085 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
  5,085 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
      .           
  5,085 ( 0.00%)          Some((
  1,695 ( 0.00%)              lo.file.clone(),
      .                       lo.line_number,
      .                       span_data.lo - lo.line.start,
  1,695 ( 0.00%)              hi.line_number,
      .                       span_data.hi - hi.line.start,
      .                   ))
164,430 ( 0.02%)      }
      .           
      .               fn cache_entry_index(&self, pos: BytePos) -> isize {
      .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
164,413 ( 0.02%)              if cache_entry.line.contains(&pos) {
      .                           return idx as isize;
      .                       }
      .                   }
      .           
      .                   -1
      .               }
      .           
      .               fn oldest_cache_entry_index(&self) -> usize {
      .                   let mut oldest = 0;
      .           
      .                   for idx in 1..self.line_cache.len() {
  9,252 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
      .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
      .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
      .           
      .                   for idx in 0..self.line_cache.len() {
  2,165 ( 0.00%)              if idx != avoid_idx
  1,331 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
      .                       {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
  6,200 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
  1,240 ( 0.00%)          if !self.source_map.files().is_empty() {
  2,480 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
      .                       let file = &self.source_map.files()[file_idx];
      .           
  9,920 ( 0.00%)              if file_contains(file, pos) {
      .                           return Some((file.clone(), file_idx));
      .                       }
      .                   }
      .           
      .                   None
  6,200 ( 0.00%)      }
      .           }
      .           
      .           #[inline]
      .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
      .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
      .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
      .               // purposes of converting a byte position to a line and column number, we can't come up with a
      .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

225,284 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 416 ----------------------------------------
        .               /// ```
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
    7,018 ( 0.00%)      pub const fn new() -> Self {
1,202,567 ( 0.16%)          Vec { buf: RawVec::NEW, len: 0 }
    7,134 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 461 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
      796 ( 0.00%)      pub fn with_capacity(capacity: usize) -> Self {
      199 ( 0.00%)          Self::with_capacity_in(capacity, Global)
      398 ( 0.00%)      }
        .           
        .               /// Creates a `Vec<T>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
        .               ///
-- line 479 ----------------------------------------
-- line 529 ----------------------------------------
        .               ///
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts(p, len, cap);
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      270 ( 0.00%)      pub unsafe fn from_raw_parts(ptr: *mut T, length: usize, capacity: usize) -> Self {
       45 ( 0.00%)          unsafe { Self::from_raw_parts_in(ptr, length, capacity, Global) }
       90 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               /// Constructs a new, empty `Vec<T, A>`.
        .               ///
        .               /// The vector will not allocate until elements are pushed onto it.
        .               ///
        .               /// # Examples
-- line 547 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// // ...but this may make the vector reallocate
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
    7,637 ( 0.00%)      pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
  312,459 ( 0.04%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
    2,182 ( 0.00%)      }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
        .               ///
-- line 618 ----------------------------------------
-- line 676 ----------------------------------------
        .               ///
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
    7,150 ( 0.00%)      pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
   42,405 ( 0.01%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
    1,100 ( 0.00%)      }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
        .               ///
-- line 694 ----------------------------------------
-- line 777 ----------------------------------------
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    2,300 ( 0.00%)      pub fn capacity(&self) -> usize {
   56,406 ( 0.01%)          self.buf.capacity()
    1,150 ( 0.00%)      }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
        .               /// # Panics
-- line 795 ----------------------------------------
-- line 800 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   10,425 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
  126,895 ( 0.02%)          self.buf.reserve(self.len, additional);
    4,170 ( 0.00%)      }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
        .               /// requests. Therefore, capacity can not be relied upon to be precisely
-- line 818 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
    4,145 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 926 ----------------------------------------
        .               /// let mut vec = Vec::with_capacity(10);
        .               /// vec.extend([1, 2, 3]);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// vec.shrink_to_fit();
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    1,278 ( 0.00%)      pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
    8,599 ( 0.00%)          if self.capacity() > self.len {
    3,202 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
      852 ( 0.00%)      }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
        .               /// If the current capacity is less than the lower limit, this is a no-op.
        .               ///
-- line 949 ----------------------------------------
-- line 987 ----------------------------------------
        .               /// vec.extend([1, 2, 3]);
        .               ///
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      852 ( 0.00%)      pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
    2,556 ( 0.00%)              self.shrink_to_fit();
    5,414 ( 0.00%)              let me = ManuallyDrop::new(self);
    4,260 ( 0.00%)              let buf = ptr::read(&me.buf);
    2,130 ( 0.00%)              let len = me.len();
    5,538 ( 0.00%)              buf.into_box(len).assume_init()
      426 ( 0.00%)          }
      852 ( 0.00%)      }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
        .               ///
        .               /// If `len` is greater than the vector's current length, this has no
        .               /// effect.
        .               ///
        .               /// The [`drain`] method can emulate `truncate`, but causes the excess
-- line 1011 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
  107,672 ( 0.01%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
   78,552 ( 0.01%)              if len > self.len {
        .                           return;
        .                       }
       32 ( 0.00%)              let remaining_len = self.len - len;
       24 ( 0.00%)              let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   58,923 ( 0.01%)              self.len = len;
    1,862 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
  129,194 ( 0.02%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::io::{self, Write};
        .               /// let buffer = vec![1, 2, 3, 5, 8];
        .               /// io::sink().write(buffer.as_slice()).unwrap();
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "vec_as_slice", since = "1.7.0")]
       36 ( 0.00%)      pub fn as_slice(&self) -> &[T] {
       54 ( 0.00%)          self
       36 ( 0.00%)      }
        .           
        .               /// Extracts a mutable slice of the entire vector.
        .               ///
        .               /// Equivalent to `&mut s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1093 ----------------------------------------
-- line 1123 ----------------------------------------
        .               ///         assert_eq!(*x_ptr.add(i), 1 << i);
        .               ///     }
        .               /// }
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
   18,448 ( 0.00%)      pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
1,020,568 ( 0.14%)          let ptr = self.buf.ptr();
        .                   unsafe {
    9,224 ( 0.00%)              assume(!ptr.is_null());
        .                   }
        .                   ptr
   18,448 ( 0.00%)      }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
        .               /// The caller must ensure that the vector outlives the pointer this
        .               /// function returns, or else it will end up pointing to garbage.
        .               /// Modifying the vector may cause its buffer to be reallocated,
        .               /// which would also make any pointers to it invalid.
        .               ///
-- line 1147 ----------------------------------------
-- line 1159 ----------------------------------------
        .               ///         *x_ptr.add(i) = i as i32;
        .               ///     }
        .               ///     x.set_len(size);
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
   69,344 ( 0.01%)      pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
1,280,983 ( 0.17%)          let ptr = self.buf.ptr();
        .                   unsafe {
   34,672 ( 0.00%)              assume(!ptr.is_null());
        .                   }
        .                   ptr
   69,344 ( 0.01%)      }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               #[inline]
    2,836 ( 0.00%)      pub fn allocator(&self) -> &A {
    2,836 ( 0.00%)          self.buf.allocator()
    2,836 ( 0.00%)      }
        .           
        .               /// Forces the length of the vector to `new_len`.
        .               ///
        .               /// This is a low-level operation that maintains none of the normal
        .               /// invariants of the type. Normally changing the length of a vector
        .               /// is done using one of the safe operations instead, such as
        .               /// [`truncate`], [`resize`], [`extend`], or [`clear`].
        .               ///
-- line 1190 ----------------------------------------
-- line 1256 ----------------------------------------
        .               ///     vec.set_len(0);
        .               /// }
        .               /// ```
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    9,090 ( 0.00%)      pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
  141,919 ( 0.02%)          self.len = new_len;
    6,594 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // We replace self[index] with the last element. Note that if the
        .                       // bounds check above succeeds there must be a last element (which
        .                       // can be self[index] itself).
        .                       let value = ptr::read(self.as_ptr().add(index));
        .                       let base_ptr = self.as_mut_ptr();
        2 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
        .                       self.set_len(len - 1);
        .                       value
        .                   }
        .               }
        .           
        .               /// Inserts an element at position `index` within the vector, shifting all
        .               /// elements after it to the right.
        .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    1,635 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
      259 ( 0.00%)          let len = self.len();
      561 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
      982 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
       21 ( 0.00%)                  let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
    1,440 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
       57 ( 0.00%)                  ptr::write(p, element);
        .                       }
    1,000 ( 0.00%)              self.set_len(len + 1);
        .                   }
    1,392 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1387 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let mut v = vec![1, 2, 3];
        .               /// assert_eq!(v.remove(1), 2);
        .               /// assert_eq!(v, [1, 3]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[track_caller]
    2,920 ( 0.00%)      pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
    1,182 ( 0.00%)          let len = self.len();
    3,550 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
       50 ( 0.00%)                  let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
    7,318 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
    2,508 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
    1,294 ( 0.00%)              self.set_len(len - 1);
       10 ( 0.00%)              ret
       10 ( 0.00%)          }
    4,720 ( 0.00%)      }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1431 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
   64,130 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
    4,205 ( 0.00%)          self.retain_mut(|elem| f(elem));
   61,760 ( 0.01%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    8,160 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
    7,458 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
    4,931 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
   79,724 ( 0.01%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
   18,450 ( 0.00%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
      638 ( 0.00%)                      g.processed_len += 1;
      282 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
       48 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
      864 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
      624 ( 0.00%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
    3,115 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
      458 ( 0.00%)          let len = self.len();
    1,794 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
    1,201 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
       98 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
        .                           } else {
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
      833 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
    3,560 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   96,124 ( 0.01%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
2,399,654 ( 0.32%)          if self.len == self.buf.capacity() {
  165,952 ( 0.02%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
  230,561 ( 0.03%)              let end = self.as_mut_ptr().add(self.len);
  123,412 ( 0.02%)              ptr::write(end, value);
2,873,474 ( 0.38%)              self.len += 1;
        .                   }
   33,902 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
  308,890 ( 0.04%)          if self.len == 0 {
       24 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
  265,497 ( 0.04%)                  self.len -= 1;
   34,873 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
      837 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
       72 ( 0.00%)              self.append_elements(other.as_slice() as _);
       54 ( 0.00%)              other.set_len(0);
        .                   }
      630 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
   18,920 ( 0.00%)      unsafe fn append_elements(&mut self, other: *const [T]) {
    1,892 ( 0.00%)          let count = unsafe { (*other).len() };
    1,892 ( 0.00%)          self.reserve(count);
   31,344 ( 0.00%)          let len = self.len();
    5,676 ( 0.00%)          unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
  150,429 ( 0.02%)          self.len += count;
    3,784 ( 0.00%)      }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
        .               /// unspecified how many elements are removed.
-- line 1808 ----------------------------------------
-- line 1820 ----------------------------------------
        .               /// assert_eq!(v, &[1]);
        .               /// assert_eq!(u, &[2, 3]);
        .               ///
        .               /// // A full range clears the vector
        .               /// v.drain(..);
        .               /// assert_eq!(v, &[]);
        .               /// ```
        .               #[stable(feature = "drain", since = "1.6.0")]
   13,818 ( 0.00%)      pub fn drain<R>(&mut self, range: R) -> Drain<'_, T, A>
        .               where
        .                   R: RangeBounds<usize>,
        .               {
        .                   // Memory safety
        .                   //
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
   20,673 ( 0.00%)          let len = self.len();
   29,610 ( 0.00%)          let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
    5,922 ( 0.00%)              self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
   31,596 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
   10,449 ( 0.00%)              Drain {
        .                           tail_start: end,
    9,880 ( 0.00%)                  tail_len: len - end,
    9,870 ( 0.00%)                  iter: range_slice.iter(),
    7,896 ( 0.00%)                  vec: NonNull::from(self),
        .                       }
        .                   }
    3,948 ( 0.00%)      }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
        .               /// Note that this method has no effect on the allocated capacity
        .               /// of the vector.
        .               ///
        .               /// # Examples
        .               ///
-- line 1866 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
  190,733 ( 0.03%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let a = vec![1, 2, 3];
        .               /// assert_eq!(a.len(), 3);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   19,604 ( 0.00%)      pub fn len(&self) -> usize {
    9,802 ( 0.00%)          self.len
   19,604 ( 0.00%)      }
        .           
        .               /// Returns `true` if the vector contains no elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
    7,378 ( 0.00%)      pub fn is_empty(&self) -> bool {
  136,505 ( 0.02%)          self.len() == 0
   14,756 ( 0.00%)      }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
        .               /// # Panics
-- line 1917 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
      873 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
      675 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    9,777 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
    1,311 ( 0.00%)          let len = self.len();
    2,622 ( 0.00%)          if new_len > len {
    9,648 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
    8,466 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2064 ----------------------------------------
        .               /// unsafe {
        .               ///     v.set_len(3);
        .               /// }
        .               ///
        .               /// assert_eq!(&v, &[0, 1, 2]);
        .               /// ```
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
    2,337 ( 0.00%)      pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
    3,116 ( 0.00%)              slice::from_raw_parts_mut(
    5,455 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
    3,966 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
    1,558 ( 0.00%)      }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
        .               /// (e.g. by reading from a file) before marking the data as initialized using
        .               /// the [`set_len`] method.
        .               ///
-- line 2090 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
      916 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
      142 ( 0.00%)          let len = self.len();
        .           
      820 ( 0.00%)          if new_len > len {
    2,041 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
       12 ( 0.00%)              self.truncate(new_len);
        .                   }
      206 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2220 ----------------------------------------
        .               /// let mut vec = vec![1];
        .               /// vec.extend_from_slice(&[2, 3, 4]);
        .               /// assert_eq!(vec, [1, 2, 3, 4]);
        .               /// ```
        .               ///
        .               /// [`extend`]: Vec::extend
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_extend_from_slice", since = "1.6.0")]
   18,150 ( 0.00%)      pub fn extend_from_slice(&mut self, other: &[T]) {
    6,600 ( 0.00%)          self.spec_extend(other.iter())
    3,300 ( 0.00%)      }
        .           
        .               /// Copies elements from `src` range to the end of the vector.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the starting point is greater than the end point or if
        .               /// the end point is greater than the length of the vector.
        .               ///
-- line 2238 ----------------------------------------
-- line 2270 ----------------------------------------
        .           // This code generalizes `extend_with_{element,default}`.
        .           trait ExtendWith<T> {
        .               fn next(&mut self) -> T;
        .               fn last(self) -> T;
        .           }
        .           
        .           struct ExtendElement<T>(T);
        .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
        8 ( 0.00%)      fn next(&mut self) -> T {
       96 ( 0.00%)          self.0.clone()
        8 ( 0.00%)      }
       12 ( 0.00%)      fn last(self) -> T {
        .                   self.0
        8 ( 0.00%)      }
        .           }
        .           
        .           struct ExtendFunc<F>(F);
        .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
        .               fn next(&mut self) -> T {
        .                   (self.0)()
        .               }
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
   48,486 ( 0.01%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
       20 ( 0.00%)          self.reserve(n);
        .           
        .                   unsafe {
    2,505 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
       28 ( 0.00%)              let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
      148 ( 0.00%)              for _ in 1..n {
       44 ( 0.00%)                  ptr::write(ptr, value.next());
       24 ( 0.00%)                  ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        8 ( 0.00%)                  local_len.increment_len(1);
        .                       }
        .           
   83,830 ( 0.01%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
       48 ( 0.00%)                  ptr::write(ptr, value.last());
        8 ( 0.00%)                  local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
       16 ( 0.00%)          }
   38,349 ( 0.01%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
      446 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
   13,497 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   74,478 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
   16,041 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2423 ----------------------------------------
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
   27,672 ( 0.00%)      fn deref(&self) -> &[T] {
1,477,380 ( 0.20%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
   18,604 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
      273 ( 0.00%)      fn deref_mut(&mut self) -> &mut [T] {
  329,642 ( 0.04%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
      182 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
-- line 2448 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
   71,575 ( 0.01%)      fn clone(&self) -> Self {
    3,890 ( 0.00%)          let alloc = self.allocator().clone();
    7,004 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   87,533 ( 0.01%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2517 ----------------------------------------
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
       26 ( 0.00%)      fn index(&self, index: I) -> &Self::Output {
   55,694 ( 0.01%)          Index::index(&**self, index)
       12 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
        .               #[inline]
      320 ( 0.00%)      fn index_mut(&mut self, index: I) -> &mut Self::Output {
      828 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
      128 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
      735 ( 0.00%)      fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
  480,792 ( 0.06%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
      362 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
        .               /// Creates a consuming iterator, that is, one that moves each value out of
-- line 2556 ----------------------------------------
-- line 2562 ----------------------------------------
        .               /// ```
        .               /// let v = vec!["a".to_string(), "b".to_string()];
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
    1,920 ( 0.00%)      fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
  187,254 ( 0.02%)              let mut me = ManuallyDrop::new(self);
    1,280 ( 0.00%)              let alloc = ptr::read(me.allocator());
    3,200 ( 0.00%)              let begin = me.as_mut_ptr();
    1,920 ( 0.00%)              let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
    3,200 ( 0.00%)                  begin.add(me.len()) as *const T
        .                       };
      640 ( 0.00%)              let cap = me.buf.capacity();
   75,658 ( 0.01%)              IntoIter {
    2,560 ( 0.00%)                  buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
      640 ( 0.00%)                  end,
        .                       }
        .                   }
    1,280 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a Vec<T, A> {
        .               type Item = &'a T;
        .               type IntoIter = slice::Iter<'a, T>;
        .           
      430 ( 0.00%)      fn into_iter(self) -> slice::Iter<'a, T> {
    1,811 ( 0.00%)          self.iter()
      430 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        8 ( 0.00%)      fn into_iter(self) -> slice::IterMut<'a, T> {
    1,122 ( 0.00%)          self.iter_mut()
        8 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
    2,511 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  240,419 ( 0.03%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
    2,186 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
       64 ( 0.00%)          self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
        .                   self.reserve(additional);
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               // leaf method to which various SpecFrom/SpecExtend implementations delegate when
        .               // they have no further optimizations to apply
        .               #[cfg(not(no_global_oom_handling))]
      296 ( 0.00%)      fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
   47,276 ( 0.01%)          while let Some(element) = iterator.next() {
    7,188 ( 0.00%)              let len = self.len();
   73,528 ( 0.01%)              if len == self.capacity() {
      617 ( 0.00%)                  let (lower, _) = iterator.size_hint();
       45 ( 0.00%)                  self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
      843 ( 0.00%)                  ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
   55,850 ( 0.01%)                  self.set_len(len + 1);
        .                       }
       59 ( 0.00%)          }
    1,100 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "vec_splice", since = "1.21.0")]
        .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
        .               where
        .                   R: RangeBounds<usize>,
        .                   I: IntoIterator<Item = T>,
        .               {
      132 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
        .               }
        .           
        .               /// Creates an iterator which uses a closure to determine if an element should be removed.
        .               ///
        .               /// If the closure returns true, then the element is removed and yielded.
        .               /// If the closure returns false, the element will remain in the vector and will not be yielded
        .               /// by the iterator.
        .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    1,650 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
    7,072 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
  326,223 ( 0.04%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
  212,604 ( 0.03%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
  365,322 ( 0.05%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
      270 ( 0.00%)      fn default() -> Vec<T> {
       90 ( 0.00%)          Vec::new()
      180 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: fmt::Debug, A: Allocator> fmt::Debug for Vec<T, A> {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   fmt::Debug::fmt(&**self, f)
        .               }
        .           }
-- line 2836 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

  834,693 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .                   #[inline]
        .                   pub fn $fn_name(
        .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
        .                       mut value: $int_ty,
        .                   ) -> &[u8] {
        .                       let mut i = 0;
        .           
        .                       loop {
   88,915 ( 0.01%)                  if value < 0x80 {
        .                               unsafe {
   41,503 ( 0.01%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
        .                               }
        .           
   56,056 ( 0.01%)                      i += 1;
        .                               break;
        .                           } else {
        .                               unsafe {
   43,564 ( 0.01%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
        .                               }
        .           
   17,871 ( 0.00%)                      value >>= 7;
        .                               i += 1;
        .                           }
        .                       }
        .           
        .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
        .                   }
        .               };
        .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
        .           macro_rules! impl_read_unsigned_leb128 {
        .               ($fn_name:ident, $int_ty:ty) => {
        .                   #[inline]
        .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
        .                       // The first iteration of this loop is unpeeled. This is a
        .                       // performance win because this code is hot and integer values less
        .                       // than 128 are very common, typically occurring 50-80% or more of
        .                       // the time, even for u64 and u128.
1,645,264 ( 0.22%)              let byte = slice[*position];
  822,632 ( 0.11%)              *position += 1;
  822,632 ( 0.11%)              if (byte & 0x80) == 0 {
       90 ( 0.00%)                  return byte as $int_ty;
        .                       }
    1,098 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
        .                       let mut shift = 7;
        .                       loop {
  529,173 ( 0.07%)                  let byte = slice[*position];
  345,882 ( 0.05%)                  *position += 1;
  352,782 ( 0.05%)                  if (byte & 0x80) == 0 {
  290,298 ( 0.04%)                      result |= (byte as $int_ty) << shift;
        .                               return result;
        .                           } else {
        .                               result |= ((byte & 0x7F) as $int_ty) << shift;
        .                           }
        .                           shift += 7;
        .                       }
        .                   }
        .               };
-- line 80 ----------------------------------------

  563,291 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 70 ----------------------------------------
         .           
         .                   impl<'a, T> $name<'a, T> {
         .                       // Helper function for creating a slice from the iterator.
         .                       #[inline(always)]
         .                       fn make_slice(&self) -> &'a [T] {
         .                           // SAFETY: the iterator was created from a slice with pointer
         .                           // `self.ptr` and length `len!(self)`. This guarantees that all
         .                           // the prerequisites for `from_raw_parts` are fulfilled.
    83,316 ( 0.01%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
         .                       }
         .           
         .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
         .                       // returning the old start.
         .                       // Unsafe because the offset must not exceed `self.len()`.
         .                       #[inline(always)]
         .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
         .                           if mem::size_of::<T>() == 0 {
         .                               zst_shrink!(self, offset);
         .                               self.ptr.as_ptr()
         .                           } else {
   153,426 ( 0.02%)                      let old = self.ptr.as_ptr();
         .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
         .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
   327,395 ( 0.04%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
    25,571 ( 0.00%)                      old
         .                           }
    51,142 ( 0.01%)              }
         .           
         .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
         .                       // returning the new end.
         .                       // Unsafe because the offset must not exceed `self.len()`.
         .                       #[inline(always)]
         .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
         .                           if mem::size_of::<T>() == 0 {
         .                               zst_shrink!(self, offset);
         .                               self.ptr.as_ptr()
         .                           } else {
         .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
         .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
         .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
     6,312 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
     1,794 ( 0.00%)                      self.end
         .                           }
     1,794 ( 0.00%)              }
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<T> ExactSizeIterator for $name<'_, T> {
         .                       #[inline(always)]
         .                       fn len(&self) -> usize {
   114,455 ( 0.02%)                  len!(self)
     3,976 ( 0.00%)              }
         .           
         .                       #[inline(always)]
         .                       fn is_empty(&self) -> bool {
         .                           is_empty!(self)
         .                       }
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<'a, T> Iterator for $name<'a, T> {
         .                       type Item = $elem;
         .           
         .                       #[inline]
    91,500 ( 0.01%)              fn next(&mut self) -> Option<$elem> {
         .                           // could be implemented with slices, but this avoids bounds checks
         .           
         .                           // SAFETY: `assume` calls are safe since a slice's start pointer
         .                           // must be non-null, and slices over non-ZSTs must also have a
         .                           // non-null end pointer. The call to `next_unchecked!` is safe
         .                           // since we check if the iterator is empty first.
         .                           unsafe {
   180,923 ( 0.02%)                      assume(!self.ptr.as_ptr().is_null());
   152,500 ( 0.02%)                      if mem::size_of::<T>() != 0 {
    81,820 ( 0.01%)                          assume(!self.end.is_null());
         .                               }
11,154,565 ( 1.48%)                      if is_empty!(self) {
     4,929 ( 0.00%)                          None
         .                               } else {
    51,144 ( 0.01%)                          Some(next_unchecked!(self))
         .                               }
         .                           }
    91,500 ( 0.01%)              }
         .           
         .                       #[inline]
     1,040 ( 0.00%)              fn size_hint(&self) -> (usize, Option<usize>) {
   265,885 ( 0.04%)                  let exact = len!(self);
     1,872 ( 0.00%)                  (exact, Some(exact))
       416 ( 0.00%)              }
         .           
         .                       #[inline]
         .                       fn count(self) -> usize {
         .                           len!(self)
         .                       }
         .           
         .                       #[inline]
         .                       fn nth(&mut self, n: usize) -> Option<$elem> {
     8,180 ( 0.00%)                  if n >= len!(self) {
         .                               // This iterator is now empty.
         .                               if mem::size_of::<T>() == 0 {
         .                                   // We have to do it this way as `ptr` may never be 0, but `end`
         .                                   // could be (due to wrapping).
         .                                   self.end = self.ptr.as_ptr();
         .                               } else {
         .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
         .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
         .                       // faster to compile.
         .                       #[inline]
         .                       fn for_each<F>(mut self, mut f: F)
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item),
         .                       {
         .                           while let Some(x) = self.next() {
     1,264 ( 0.00%)                      f(x);
         .                           }
         .                       }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         .                       fn all<F>(&mut self, mut f: F) -> bool
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> bool,
         .                       {
       658 ( 0.00%)                  while let Some(x) = self.next() {
     6,163 ( 0.00%)                      if !f(x) {
         .                                   return false;
         .                               }
         .                           }
         .                           true
         .                       }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
       136 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> bool,
         .                       {
   101,834 ( 0.01%)                  while let Some(x) = self.next() {
   242,041 ( 0.03%)                      if f(x) {
         .                                   return true;
         .                               }
         .                           }
         .                           false
       136 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
     2,277 ( 0.00%)              fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
         .                       where
         .                           Self: Sized,
         .                           P: FnMut(&Self::Item) -> bool,
         .                       {
    11,434 ( 0.00%)                  while let Some(x) = self.next() {
    23,048 ( 0.00%)                      if predicate(&x) {
       112 ( 0.00%)                          return Some(x);
         .                               }
         .                           }
       389 ( 0.00%)                  None
     5,271 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
     1,880 ( 0.00%)              fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> Option<B>,
         .                       {
    21,874 ( 0.00%)                  while let Some(x) = self.next() {
    44,259 ( 0.01%)                      if let Some(y) = f(x) {
     4,160 ( 0.00%)                          return Some(y);
         .                               }
       344 ( 0.00%)                  }
       251 ( 0.00%)                  None
     3,026 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile. Also, the `assume` avoids a bounds check.
         .                       #[inline]
         .                       #[rustc_inherit_overflow_checks]
         .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
         .                           Self: Sized,
         .                           P: FnMut(Self::Item) -> bool,
         .                       {
         .                           let n = len!(self);
         .                           let mut i = 0;
         .                           while let Some(x) = self.next() {
    57,600 ( 0.01%)                      if predicate(x) {
         .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
         .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
         .                                   unsafe { assume(i < n) };
         .                                   return Some(i);
         .                               }
         .                               i += 1;
         .                           }
         .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
         .                       // faster to compile. Also, the `assume` avoids a bounds check.
         .                       #[inline]
         .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
         .                           P: FnMut(Self::Item) -> bool,
         .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
         .                       {
         .                           let n = len!(self);
         .                           let mut i = n;
     4,393 ( 0.00%)                  while let Some(x) = self.next_back() {
    55,488 ( 0.01%)                      i -= 1;
    47,283 ( 0.01%)                      if predicate(x) {
         .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
         .                                   // and is only decreasing.
         .                                   unsafe { assume(i < n) };
         .                                   return Some(i);
         .                               }
         .                           }
         .                           None
         .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
         .                           // the returned references is guaranteed to refer to an element
         .                           // of the slice and thus guaranteed to be valid.
         .                           //
         .                           // Also note that the caller also guarantees that we're never
         .                           // called with the same index again, and that no other methods
         .                           // that will access this subslice are called, so it is valid
         .                           // for the returned reference to be mutable in the case of
         .                           // `IterMut`
    19,160 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
         .                       }
         .           
         .                       $($extra)*
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
         .                       #[inline]
     2,709 ( 0.00%)              fn next_back(&mut self) -> Option<$elem> {
         .                           // could be implemented with slices, but this avoids bounds checks
         .           
         .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
         .                           // and slices over non-ZSTs must also have a non-null end pointer.
         .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
         .                           // empty first.
         .                           unsafe {
     3,613 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
     4,515 ( 0.00%)                      if mem::size_of::<T>() != 0 {
     1,833 ( 0.00%)                          assume(!self.end.is_null());
         .                               }
   194,622 ( 0.03%)                      if is_empty!(self) {
         6 ( 0.00%)                          None
         .                               } else {
     1,794 ( 0.00%)                          Some(next_back_unchecked!(self))
         .                               }
         .                           }
     2,709 ( 0.00%)              }
         .           
         .                       #[inline]
         .                       fn nth_back(&mut self, n: usize) -> Option<$elem> {
         .                           if n >= len!(self) {
         .                               // This iterator is now empty.
         .                               self.end = self.ptr.as_ptr();
         .                               return None;
         .                           }
-- line 375 ----------------------------------------

 1,853,621 ( 0.25%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs
--------------------------------------------------------------------------------
Ir                 

-- line 18 ----------------------------------------
        .                       // FIXME(eddyb) use a reference to the `static COUNTERS`, instead of
        .                       // a wrapper `fn` pointer, once `const fn` can reference `static`s.
        .                       extern "C" fn get() -> &'static Self {
        .                           static COUNTERS: HandleCounters = HandleCounters {
        .                               $($oty: AtomicUsize::new(1),)*
        .                               $($ity: AtomicUsize::new(1),)*
        .                           };
        .                           &COUNTERS
       30 ( 0.00%)              }
        .                   }
        .           
        .                   // FIXME(eddyb) generate the definition of `HandleStore` in `server.rs`.
        .                   #[repr(C)]
        .                   #[allow(non_snake_case)]
        .                   pub(super) struct HandleStore<S: server::Types> {
        .                       $($oty: handle::OwnedStore<S::$oty>,)*
        .                       $($ity: handle::InternedStore<S::$ity>,)*
        .                   }
        .           
        .                   impl<S: server::Types> HandleStore<S> {
       90 ( 0.00%)              pub(super) fn new(handle_counters: &'static HandleCounters) -> Self {
      885 ( 0.00%)                  HandleStore {
        .                               $($oty: handle::OwnedStore::new(&handle_counters.$oty),)*
        .                               $($ity: handle::InternedStore::new(&handle_counters.$ity),)*
        .                           }
      120 ( 0.00%)              }
        .                   }
        .           
        .                   $(
        .                       #[repr(C)]
        .                       pub(crate) struct $oty(handle::Handle);
        .                       impl !Send for $oty {}
        .                       impl !Sync for $oty {}
        .           
        .                       // Forward `Drop::drop` to the inherent `drop` method.
        .                       impl Drop for $oty {
    1,212 ( 0.00%)                  fn drop(&mut self) {
   10,204 ( 0.00%)                      $oty(self.0).drop();
    1,818 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S> Encode<S> for $oty {
      120 ( 0.00%)                  fn encode(self, w: &mut Writer, s: &mut S) {
       45 ( 0.00%)                      let handle = self.0;
       60 ( 0.00%)                      mem::forget(self);
       15 ( 0.00%)                      handle.encode(w, s);
       30 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S: server::Types> DecodeMut<'_, '_, HandleStore<server::MarkedTypes<S>>>
        .                           for Marked<S::$oty, $oty>
        .                       {
   76,065 ( 0.01%)                  fn decode(r: &mut Reader<'_>, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {
        .                               s.$oty.take(handle::Handle::decode(r, &mut ()))
  101,420 ( 0.01%)                  }
        .                       }
        .           
        .                       impl<S> Encode<S> for &$oty {
        .                           fn encode(self, w: &mut Writer, s: &mut S) {
   28,050 ( 0.00%)                      self.0.encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<'s, S: server::Types> Decode<'_, 's, HandleStore<server::MarkedTypes<S>>>
        .                           for &'s Marked<S::$oty, $oty>
        .                       {
    9,350 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &'s HandleStore<server::MarkedTypes<S>>) -> Self {
        .                               &s.$oty[handle::Handle::decode(r, &mut ())]
   18,700 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S> Encode<S> for &mut $oty {
        .                           fn encode(self, w: &mut Writer, s: &mut S) {
   51,453 ( 0.01%)                      self.0.encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<'s, S: server::Types> DecodeMut<'_, 's, HandleStore<server::MarkedTypes<S>>>
        .                           for &'s mut Marked<S::$oty, $oty>
        .                       {
   17,151 ( 0.00%)                  fn decode(
        .                               r: &mut Reader<'_>,
        .                               s: &'s mut HandleStore<server::MarkedTypes<S>>
        .                           ) -> Self {
        .                               &mut s.$oty[handle::Handle::decode(r, &mut ())]
   34,302 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S: server::Types> Encode<HandleStore<server::MarkedTypes<S>>>
        .                           for Marked<S::$oty, $oty>
        .                       {
  152,213 ( 0.02%)                  fn encode(self, w: &mut Writer, s: &mut HandleStore<server::MarkedTypes<S>>) {
   26,234 ( 0.00%)                      s.$oty.alloc(self).encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<S> DecodeMut<'_, '_, S> for $oty {
       90 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
       90 ( 0.00%)                      $oty(handle::Handle::decode(r, s))
       90 ( 0.00%)                  }
        .                       }
        .                   )*
        .           
        .                   $(
        .                       #[repr(C)]
   58,849 ( 0.01%)              #[derive(Copy, Clone, PartialEq, Eq, Hash)]
        .                       pub(crate) struct $ity(handle::Handle);
        .                       impl !Send for $ity {}
        .                       impl !Sync for $ity {}
        .           
        .                       impl<S> Encode<S> for $ity {
        .                           fn encode(self, w: &mut Writer, s: &mut S) {
        .                               self.0.encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<S: server::Types> DecodeMut<'_, '_, HandleStore<server::MarkedTypes<S>>>
        .                           for Marked<S::$ity, $ity>
        .                       {
   16,019 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {
        .                               s.$ity.copy(handle::Handle::decode(r, &mut ()))
   32,038 ( 0.00%)                  }
        .                       }
        .           
        .                       impl<S: server::Types> Encode<HandleStore<server::MarkedTypes<S>>>
        .                           for Marked<S::$ity, $ity>
        .                       {
        .                           fn encode(self, w: &mut Writer, s: &mut HandleStore<server::MarkedTypes<S>>) {
  135,443 ( 0.02%)                      s.$ity.alloc(self).encode(w, s);
        .                           }
        .                       }
        .           
        .                       impl<S> DecodeMut<'_, '_, S> for $ity {
        .                           fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
        .                               $ity(handle::Handle::decode(r, s))
        .                           }
        .                       }
-- line 154 ----------------------------------------
-- line 175 ----------------------------------------
        .           
        .           // FIXME(eddyb) generate these impls by pattern-matching on the
        .           // names of methods - also could use the presence of `fn drop`
        .           // to distinguish between 'owned and 'interned, above.
        .           // Alternatively, special 'modes" could be listed of types in with_api
        .           // instead of pattern matching on methods, here and in server decl.
        .           
        .           impl Clone for TokenStream {
    1,710 ( 0.00%)      fn clone(&self) -> Self {
        .                   self.clone()
    1,710 ( 0.00%)      }
        .           }
        .           
        .           impl Clone for TokenStreamIter {
        .               fn clone(&self) -> Self {
        .                   self.clone()
        .               }
        .           }
        .           
        .           impl Clone for Group {
    1,209 ( 0.00%)      fn clone(&self) -> Self {
        .                   self.clone()
    1,209 ( 0.00%)      }
        .           }
        .           
        .           impl Clone for Literal {
      423 ( 0.00%)      fn clone(&self) -> Self {
        .                   self.clone()
      423 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for Literal {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   f.debug_struct("Literal")
        .                       // format the kind without quotes, as in `kind: Float`
        .                       .field("kind", &format_args!("{}", &self.debug_kind()))
        .                       .field("symbol", &self.symbol())
-- line 211 ----------------------------------------
-- line 228 ----------------------------------------
        .               }
        .           }
        .           
        .           macro_rules! define_client_side {
        .               ($($name:ident {
        .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)*;)*
        .               }),* $(,)?) => {
        .                   $(impl $name {
   88,062 ( 0.01%)              $(pub(crate) fn $method($($arg: $arg_ty),*) $(-> $ret_ty)* {
   45,904 ( 0.01%)                  Bridge::with(|bridge| {
        .                               let mut b = bridge.cached_buffer.take();
        .           
        .                               b.clear();
  269,493 ( 0.04%)                      api_tags::Method::$name(api_tags::$name::$method).encode(&mut b, &mut ());
   64,962 ( 0.01%)                      reverse_encode!(b; $($arg),*);
        .           
  538,986 ( 0.07%)                      b = bridge.dispatch.call(b);
        .           
  375,289 ( 0.05%)                      let r = Result::<_, PanicMessage>::decode(&mut &b[..], &mut ());
        .           
1,077,972 ( 0.14%)                      bridge.cached_buffer = b;
        .           
  138,173 ( 0.02%)                      r.unwrap_or_else(|e| panic::resume_unwind(e.into()))
        .                           })
   73,385 ( 0.01%)              })*
        .                   })*
        .               }
        .           }
        .           with_api!(self, self, define_client_side);
        .           
        .           enum BridgeState<'a> {
        .               /// No server is currently connected to this client.
        .               NotConnected,
-- line 260 ----------------------------------------
-- line 270 ----------------------------------------
        .           enum BridgeStateL {}
        .           
        .           impl<'a> scoped_cell::ApplyL<'a> for BridgeStateL {
        .               type Out = BridgeState<'a>;
        .           }
        .           
        .           thread_local! {
        .               static BRIDGE_STATE: scoped_cell::ScopedCell<BridgeStateL> =
        3 ( 0.00%)          scoped_cell::ScopedCell::new(BridgeState::NotConnected);
        .           }
        .           
        .           impl BridgeState<'_> {
        .               /// Take exclusive control of the thread-local
        .               /// `BridgeState`, and pass it to `f`, mutably.
        .               /// The state will be restored after `f` exits, even
        .               /// by panic, including modifications made to it by `f`.
        .               ///
        .               /// N.B., while `f` is running, the thread-local state
        .               /// is `BridgeState::InUse`.
   58,870 ( 0.01%)      fn with<R>(f: impl FnOnce(&mut BridgeState<'_>) -> R) -> R {
   60,409 ( 0.01%)          BRIDGE_STATE.with(|state| {
  485,960 ( 0.06%)              state.replace(BridgeState::InUse, |mut state| {
        .                           // FIXME(#52812) pass `f` directly to `replace` when `RefMutL` is gone
      360 ( 0.00%)                  f(&mut *state)
       60 ( 0.00%)              })
       60 ( 0.00%)          })
   49,863 ( 0.01%)      }
        .           }
        .           
        .           impl Bridge<'_> {
        .               pub(crate) fn is_available() -> bool {
        3 ( 0.00%)          BridgeState::with(|state| match state {
        .                       BridgeState::Connected(_) | BridgeState::InUse => true,
        .                       BridgeState::NotConnected => false,
        .                   })
        .               }
        .           
       90 ( 0.00%)      fn enter<R>(self, f: impl FnOnce() -> R) -> R {
      105 ( 0.00%)          let force_show_panics = self.force_show_panics;
        .                   // Hide the default panic output within `proc_macro` expansions.
        .                   // NB. the server can't do this because it may use a different libstd.
        .                   static HIDE_PANICS_DURING_EXPANSION: Once = Once::new();
       77 ( 0.00%)          HIDE_PANICS_DURING_EXPANSION.call_once(|| {
        7 ( 0.00%)              panic::update_hook(move |prev, info| {
        .                           let show = BridgeState::with(|state| match state {
        .                               BridgeState::NotConnected => true,
        .                               BridgeState::Connected(_) | BridgeState::InUse => force_show_panics,
        .                           });
        .                           if show {
        .                               prev(info)
        .                           }
        .                       });
        2 ( 0.00%)          });
        .           
      555 ( 0.00%)          BRIDGE_STATE.with(|state| state.set(BridgeState::Connected(self), f))
       30 ( 0.00%)      }
        .           
       75 ( 0.00%)      fn with<R>(f: impl FnOnce(&mut Bridge<'_>) -> R) -> R {
  638,484 ( 0.08%)          BridgeState::with(|state| match state {
        .                       BridgeState::NotConnected => {
        .                           panic!("procedural macro API is used outside of a procedural macro");
        .                       }
        .                       BridgeState::InUse => {
        .                           panic!("procedural macro API is used while it's already in use");
        .                       }
      195 ( 0.00%)              BridgeState::Connected(bridge) => f(bridge),
       60 ( 0.00%)          })
       60 ( 0.00%)      }
        .           }
        .           
        .           /// A client-side "global object" (usually a function pointer),
        .           /// which may be using a different `proc_macro` from the one
        .           /// used by the server, but can be interacted with compatibly.
        .           ///
        .           /// N.B., `F` must have FFI-friendly memory layout (e.g., a pointer).
        .           /// The call ABI of function pointers used for `F` doesn't
-- line 345 ----------------------------------------
-- line 353 ----------------------------------------
        .               pub(super) get_handle_counters: extern "C" fn() -> &'static HandleCounters,
        .               pub(super) run: extern "C" fn(Bridge<'_>, F) -> Buffer<u8>,
        .               pub(super) f: F,
        .           }
        .           
        .           /// Client-side helper for handling client panics, entering the bridge,
        .           /// deserializing input and serializing output.
        .           // FIXME(eddyb) maybe replace `Bridge::enter` with this?
      105 ( 0.00%)  fn run_client<A: for<'a, 's> DecodeMut<'a, 's, ()>, R: Encode<()>>(
        .               mut bridge: Bridge<'_>,
        .               f: impl FnOnce(A) -> R,
        .           ) -> Buffer<u8> {
        .               // The initial `cached_buffer` contains the input.
       90 ( 0.00%)      let mut b = bridge.cached_buffer.take();
        .           
      540 ( 0.00%)      panic::catch_unwind(panic::AssertUnwindSafe(|| {
      225 ( 0.00%)          bridge.enter(|| {
      285 ( 0.00%)              let reader = &mut &b[..];
      105 ( 0.00%)              let input = A::decode(reader, &mut ());
        .           
        .                       // Put the `cached_buffer` back in the `Bridge`, for requests.
      300 ( 0.00%)              Bridge::with(|bridge| bridge.cached_buffer = b.take());
        .           
      240 ( 0.00%)              let output = f(input);
        .           
        .                       // Take the `cached_buffer` back out, for the output value.
      285 ( 0.00%)              b = Bridge::with(|bridge| bridge.cached_buffer.take());
        .           
        .                       // HACK(eddyb) Separate encoding a success value (`Ok(output)`)
        .                       // from encoding a panic (`Err(e: PanicMessage)`) to avoid
        .                       // having handles outside the `bridge.enter(|| ...)` scope, and
        .                       // to catch panics that could happen while encoding the success.
        .                       //
        .                       // Note that panics should be impossible beyond this point, but
        .                       // this is defensively trying to avoid any accidental panicking
        .                       // reaching the `extern "C"` (which should `abort` but might not
        .                       // at the moment, so this is also potentially preventing UB).
       45 ( 0.00%)              b.clear();
      150 ( 0.00%)              Ok::<_, ()>(output).encode(&mut b, &mut ());
       60 ( 0.00%)          })
       30 ( 0.00%)      }))
        .               .map_err(PanicMessage::from)
       15 ( 0.00%)      .unwrap_or_else(|e| {
        .                   b.clear();
        .                   Err::<(), _>(e).encode(&mut b, &mut ());
        .               });
        .               b
       30 ( 0.00%)  }
        .           
        .           impl Client<fn(crate::TokenStream) -> crate::TokenStream> {
        .               #[rustc_allow_const_fn_unstable(const_fn)]
        1 ( 0.00%)      pub const fn expand1(f: fn(crate::TokenStream) -> crate::TokenStream) -> Self {
        .                   extern "C" fn run(
        .                       bridge: Bridge<'_>,
        .                       f: impl FnOnce(crate::TokenStream) -> crate::TokenStream,
        .                   ) -> Buffer<u8> {
        .                       run_client(bridge, |input| f(crate::TokenStream(input)).0)
        .                   }
        5 ( 0.00%)          Client { get_handle_counters: HandleCounters::get, run, f }
        1 ( 0.00%)      }
        .           }
        .           
        .           impl Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream> {
        .               #[rustc_allow_const_fn_unstable(const_fn)]
        .               pub const fn expand2(
        .                   f: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,
        .               ) -> Self {
      105 ( 0.00%)          extern "C" fn run(
        .                       bridge: Bridge<'_>,
        .                       f: impl FnOnce(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,
        .                   ) -> Buffer<u8> {
      270 ( 0.00%)              run_client(bridge, |(input, input2)| {
      300 ( 0.00%)                  f(crate::TokenStream(input), crate::TokenStream(input2)).0
       45 ( 0.00%)              })
       30 ( 0.00%)          }
        .                   Client { get_handle_counters: HandleCounters::get, run, f }
        .               }
        .           }
        .           
        .           #[repr(C)]
        .           #[derive(Copy, Clone)]
        .           pub enum ProcMacro {
        .               CustomDerive {
-- line 435 ----------------------------------------

  241,162 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/raw_vec.rs
--------------------------------------------------------------------------------
Ir                 

-- line 123 ----------------------------------------
        .                   // `cap: 0` means "unallocated". zero-sized types are ignored.
        .                   Self { ptr: Unique::dangling(), cap: 0, alloc }
        .               }
        .           
        .               /// Like `with_capacity`, but parameterized over the choice of
        .               /// allocator for the returned `RawVec`.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
    2,182 ( 0.00%)      pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
    7,689 ( 0.00%)          Self::allocate_in(capacity, AllocInit::Uninitialized, alloc)
    2,182 ( 0.00%)      }
        .           
        .               /// Like `with_capacity_zeroed`, but parameterized over the choice
        .               /// of allocator for the returned `RawVec`.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               pub fn with_capacity_zeroed_in(capacity: usize, alloc: A) -> Self {
        .                   Self::allocate_in(capacity, AllocInit::Zeroed, alloc)
        .               }
-- line 141 ----------------------------------------
-- line 147 ----------------------------------------
        .               ///
        .               /// # Safety
        .               ///
        .               /// * `len` must be greater than or equal to the most recently requested capacity, and
        .               /// * `len` must be less than or equal to `self.capacity()`.
        .               ///
        .               /// Note, that the requested capacity and `self.capacity()` could differ, as
        .               /// an allocator could overallocate and return a greater memory block than requested.
    2,155 ( 0.00%)      pub unsafe fn into_box(self, len: usize) -> Box<[MaybeUninit<T>], A> {
        .                   // Sanity-check one half of the safety requirement (we cannot check the other half).
      852 ( 0.00%)          debug_assert!(
        .                       len <= self.capacity(),
        .                       "`len` must be smaller than or equal to `self.capacity()`"
        .                   );
        .           
    3,834 ( 0.00%)          let me = ManuallyDrop::new(self);
        .                   unsafe {
    5,964 ( 0.00%)              let slice = slice::from_raw_parts_mut(me.ptr() as *mut MaybeUninit<T>, len);
    3,834 ( 0.00%)              Box::from_raw_in(slice, ptr::read(&me.alloc))
        .                   }
      877 ( 0.00%)      }
        .           
        .               #[cfg(not(no_global_oom_handling))]
    6,650 ( 0.00%)      fn allocate_in(capacity: usize, init: AllocInit, alloc: A) -> Self {
    6,546 ( 0.00%)          if mem::size_of::<T>() == 0 {
        .                       Self::new_in(alloc)
        .                   } else {
        .                       // We avoid `unwrap_or_else` here because it bloats the amount of
        .                       // LLVM IR generated.
   13,092 ( 0.00%)              let layout = match Layout::array::<T>(capacity) {
    7,637 ( 0.00%)                  Ok(layout) => layout,
        .                           Err(_) => capacity_overflow(),
        .                       };
    8,728 ( 0.00%)              match alloc_guard(layout.size()) {
        .                           Ok(_) => {}
        .                           Err(_) => capacity_overflow(),
        .                       }
    3,325 ( 0.00%)              let result = match init {
   10,910 ( 0.00%)                  AllocInit::Uninitialized => alloc.allocate(layout),
        .                           AllocInit::Zeroed => alloc.allocate_zeroed(layout),
        .                       };
    5,455 ( 0.00%)              let ptr = match result {
    6,546 ( 0.00%)                  Ok(ptr) => ptr,
        .                           Err(_) => handle_alloc_error(layout),
        .                       };
        .           
        .                       // Allocators currently return a `NonNull<[u8]>` whose length
        .                       // matches the size requested. If that ever changes, the capacity
        .                       // here should change to `ptr.len() / mem::size_of::<T>()`.
    2,182 ( 0.00%)              Self {
   13,092 ( 0.00%)                  ptr: unsafe { Unique::new_unchecked(ptr.cast().as_ptr()) },
        .                           cap: capacity,
    1,091 ( 0.00%)                  alloc,
        .                       }
        .                   }
    4,494 ( 0.00%)      }
        .           
        .               /// Reconstitutes a `RawVec` from a pointer, capacity, and allocator.
        .               ///
        .               /// # Safety
        .               ///
        .               /// The `ptr` must be allocated (via the given allocator `alloc`), and with the given
        .               /// `capacity`.
        .               /// The `capacity` cannot exceed `isize::MAX` for sized types. (only a concern on 32-bit
        .               /// systems). ZST vectors may have a capacity up to `usize::MAX`.
        .               /// If the `ptr` and `capacity` come from a `RawVec` created via `alloc`, then this is
        .               /// guaranteed.
        .               #[inline]
    4,760 ( 0.00%)      pub unsafe fn from_raw_parts_in(ptr: *mut T, capacity: usize, alloc: A) -> Self {
    7,140 ( 0.00%)          Self { ptr: unsafe { Unique::new_unchecked(ptr) }, cap: capacity, alloc }
    4,760 ( 0.00%)      }
        .           
        .               /// Gets a raw pointer to the start of the allocation. Note that this is
        .               /// `Unique::dangling()` if `capacity == 0` or `T` is zero-sized. In the former case, you must
        .               /// be careful.
        .               #[inline]
   88,644 ( 0.01%)      pub fn ptr(&self) -> *mut T {
  132,966 ( 0.02%)          self.ptr.as_ptr()
   88,644 ( 0.01%)      }
        .           
        .               /// Gets the capacity of the allocation.
        .               ///
        .               /// This will always be `usize::MAX` if `T` is zero-sized.
        .               #[inline(always)]
        .               pub fn capacity(&self) -> usize {
  104,875 ( 0.01%)          if mem::size_of::<T>() == 0 { usize::MAX } else { self.cap }
   41,953 ( 0.01%)      }
        .           
        .               /// Returns a shared reference to the allocator backing this `RawVec`.
    4,254 ( 0.00%)      pub fn allocator(&self) -> &A {
        .                   &self.alloc
    2,836 ( 0.00%)      }
        .           
   94,040 ( 0.01%)      fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
1,783,512 ( 0.24%)          if mem::size_of::<T>() == 0 || self.cap == 0 {
   79,250 ( 0.01%)              None
        .                   } else {
        .                       // We have an allocated chunk of memory, so we can bypass runtime
        .                       // checks to get our current layout.
        .                       unsafe {
   22,624 ( 0.00%)                  let align = mem::align_of::<T>();
  530,181 ( 0.07%)                  let size = mem::size_of::<T>() * self.cap;
   79,184 ( 0.01%)                  let layout = Layout::from_size_align_unchecked(size, align);
  239,268 ( 0.03%)                  Some((self.ptr.cast().into(), layout))
        .                       }
        .                   }
   37,616 ( 0.00%)      }
        .           
        .               /// Ensures that the buffer contains at least enough space to hold `len +
        .               /// additional` elements. If it doesn't already have enough capacity, will
        .               /// reallocate enough space plus comfortable slack space to get amortized
        .               /// *O*(1) behavior. Will limit this behavior if it would needlessly cause
        .               /// itself to panic.
        .               ///
        .               /// If `len` exceeds `self.capacity()`, this may fail to actually allocate
-- line 261 ----------------------------------------
-- line 268 ----------------------------------------
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Aborts
        .               ///
        .               /// Aborts on OOM.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
   14,595 ( 0.00%)      pub fn reserve(&mut self, len: usize, additional: usize) {
        .                   // Callers expect this function to be very cheap when there is already sufficient capacity.
        .                   // Therefore, we move all the resizing and error-handling logic from grow_amortized and
        .                   // handle_reserve behind a call, while making sure that this function is likely to be
        .                   // inlined as just a comparison and a call if the comparison fails.
        .                   #[cold]
  111,388 ( 0.01%)          fn do_reserve_and_handle<T, A: Allocator>(
        .                       slf: &mut RawVec<T, A>,
        .                       len: usize,
        .                       additional: usize,
        .                   ) {
    7,506 ( 0.00%)              handle_reserve(slf.grow_amortized(len, additional));
  130,382 ( 0.02%)          }
        .           
  174,057 ( 0.02%)          if self.needs_to_grow(len, additional) {
  111,750 ( 0.01%)              do_reserve_and_handle(self, len, additional);
        .                   }
    4,170 ( 0.00%)      }
        .           
        .               /// A specialized version of `reserve()` used only by the hot and
        .               /// oft-instantiated `Vec::push()`, which does its own capacity check.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline(never)]
  271,157 ( 0.04%)      pub fn reserve_for_push(&mut self, len: usize) {
   20,740 ( 0.00%)          handle_reserve(self.grow_amortized(len, 1));
  318,567 ( 0.04%)      }
        .           
        .               /// The same as `reserve`, but returns on errors instead of panicking or aborting.
        .               pub fn try_reserve(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
        .                   if self.needs_to_grow(len, additional) {
        .                       self.grow_amortized(len, additional)
        .                   } else {
        .                       Ok(())
        .                   }
-- line 309 ----------------------------------------
-- line 322 ----------------------------------------
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Aborts
        .               ///
        .               /// Aborts on OOM.
        .               #[cfg(not(no_global_oom_handling))]
   10,005 ( 0.00%)      pub fn reserve_exact(&mut self, len: usize, additional: usize) {
        .                   handle_reserve(self.try_reserve_exact(len, additional));
   10,005 ( 0.00%)      }
        .           
        .               /// The same as `reserve_exact`, but returns on errors instead of panicking or aborting.
        .               pub fn try_reserve_exact(
        .                   &mut self,
        .                   len: usize,
        .                   additional: usize,
        .               ) -> Result<(), TryReserveError> {
    4,269 ( 0.00%)          if self.needs_to_grow(len, additional) { self.grow_exact(len, additional) } else { Ok(()) }
        .               }
        .           
        .               /// Shrinks the buffer down to the specified capacity. If the given amount
        .               /// is 0, actually completely deallocates.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the given amount is *larger* than the current capacity.
        .               ///
        .               /// # Aborts
        .               ///
        .               /// Aborts on OOM.
        .               #[cfg(not(no_global_oom_handling))]
    3,705 ( 0.00%)      pub fn shrink_to_fit(&mut self, cap: usize) {
    1,040 ( 0.00%)          handle_reserve(self.shrink(cap));
    3,406 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator> RawVec<T, A> {
        .               /// Returns if the buffer needs to grow to fulfill the needed extra capacity.
        .               /// Mainly used to make inlining reserve-calls possible without inlining `grow`.
   16,680 ( 0.00%)      fn needs_to_grow(&self, len: usize, additional: usize) -> bool {
  316,680 ( 0.04%)          additional > self.capacity().wrapping_sub(len)
    8,340 ( 0.00%)      }
        .           
   77,857 ( 0.01%)      fn set_ptr_and_cap(&mut self, ptr: NonNull<[u8]>, cap: usize) {
        .                   // Allocators currently return a `NonNull<[u8]>` whose length matches
        .                   // the size requested. If that ever changes, the capacity here should
        .                   // change to `ptr.len() / mem::size_of::<T>()`.
  135,944 ( 0.02%)          self.ptr = unsafe { Unique::new_unchecked(ptr.cast().as_ptr()) };
  100,257 ( 0.01%)          self.cap = cap;
   11,978 ( 0.00%)      }
        .           
        .               // This method is usually instantiated many times. So we want it to be as
        .               // small as possible, to improve compile times. But we also want as much of
        .               // its contents to be statically computable as possible, to make the
        .               // generated code run faster. Therefore, this method is carefully written
        .               // so that all of the code that depends on `T` is within it, while as much
        .               // of the code that doesn't depend on `T` as possible is in functions that
        .               // are non-generic over `T`.
   53,043 ( 0.01%)      fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
        .                   // This is ensured by the calling contexts.
        .                   debug_assert!(additional > 0);
        .           
   17,187 ( 0.00%)          if mem::size_of::<T>() == 0 {
        .                       // Since we return a capacity of `usize::MAX` when `elem_size` is
        .                       // 0, getting to here necessarily means the `RawVec` is overfull.
        .                       return Err(CapacityOverflow.into());
        .                   }
        .           
        .                   // Nothing we can really do about these checks, sadly.
  103,122 ( 0.01%)          let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
        .           
        .                   // This guarantees exponential growth. The doubling cannot overflow
        .                   // because `cap <= isize::MAX` and the type of `cap` is `usize`.
  436,080 ( 0.06%)          let cap = cmp::max(self.cap * 2, required_cap);
   22,916 ( 0.00%)          let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
        .           
   28,645 ( 0.00%)          let new_layout = Layout::array::<T>(cap);
        .           
        .                   // `finish_grow` is non-generic over `T`.
  376,450 ( 0.05%)          let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
   11,458 ( 0.00%)          self.set_ptr_and_cap(ptr, cap);
    5,729 ( 0.00%)          Ok(())
   18,669 ( 0.00%)      }
        .           
        .               // The constraints on this method are much the same as those on
        .               // `grow_amortized`, but this method is usually instantiated less often so
        .               // it's less critical.
        .               fn grow_exact(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
        .                   if mem::size_of::<T>() == 0 {
        .                       // Since we return a capacity of `usize::MAX` when the type size is
        .                       // 0, getting to here necessarily means the `RawVec` is overfull.
        .                       return Err(CapacityOverflow.into());
        .                   }
        .           
        .                   let cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
        .                   let new_layout = Layout::array::<T>(cap);
        .           
        .                   // `finish_grow` is non-generic over `T`.
    5,104 ( 0.00%)          let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
        .                   self.set_ptr_and_cap(ptr, cap);
        .                   Ok(())
        .               }
        .           
    2,080 ( 0.00%)      fn shrink(&mut self, cap: usize) -> Result<(), TryReserveError> {
    2,743 ( 0.00%)          assert!(cap <= self.capacity(), "Tried to shrink to a larger capacity");
        .           
    7,280 ( 0.00%)          let (ptr, layout) = if let Some(mem) = self.current_memory() { mem } else { return Ok(()) };
    3,523 ( 0.00%)          let new_size = cap * mem::size_of::<T>();
        .           
        .                   let ptr = unsafe {
    1,820 ( 0.00%)              let new_layout = Layout::from_size_align_unchecked(new_size, layout.align());
    4,680 ( 0.00%)              self.alloc
    1,040 ( 0.00%)                  .shrink(ptr, layout, new_layout)
      520 ( 0.00%)                  .map_err(|_| AllocError { layout: new_layout, non_exhaustive: () })?
        .                   };
      520 ( 0.00%)          self.set_ptr_and_cap(ptr, cap);
      260 ( 0.00%)          Ok(())
      780 ( 0.00%)      }
        .           }
        .           
        .           // This function is outside `RawVec` to minimize compile times. See the comment
        .           // above `RawVec::grow_amortized` for details. (The `A` parameter isn't
        .           // significant, because the number of different `A` types seen in practice is
        .           // much smaller than the number of `T` types.)
        .           #[inline(never)]
  513,502 ( 0.07%)  fn finish_grow<A>(
        .               new_layout: Result<Layout, LayoutError>,
        .               current_memory: Option<(NonNull<u8>, Layout)>,
        .               alloc: &mut A,
        .           ) -> Result<NonNull<[u8]>, TryReserveError>
        .           where
        .               A: Allocator,
        .           {
        .               // Check for the error here to minimize the size of `RawVec::grow_*`.
   80,206 ( 0.01%)      let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
        .           
   68,748 ( 0.01%)      alloc_guard(new_layout.size())?;
        .           
  354,944 ( 0.05%)      let memory = if let Some((ptr, old_layout)) = current_memory {
        .                   debug_assert_eq!(old_layout.align(), new_layout.align());
        .                   unsafe {
        .                       // The allocator checks for alignment equality
    8,200 ( 0.00%)              intrinsics::assume(old_layout.align() == new_layout.align());
   11,480 ( 0.00%)              alloc.grow(ptr, old_layout, new_layout)
        .                   }
        .               } else {
   20,445 ( 0.00%)          alloc.allocate(new_layout)
        .               };
        .           
   40,103 ( 0.01%)      memory.map_err(|_| AllocError { layout: new_layout, non_exhaustive: () }.into())
  391,323 ( 0.05%)  }
        .           
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for RawVec<T, A> {
        .               /// Frees the memory owned by the `RawVec` *without* trying to drop its contents.
   53,418 ( 0.01%)      fn drop(&mut self) {
  674,707 ( 0.09%)          if let Some((ptr, layout)) = self.current_memory() {
   18,824 ( 0.00%)              unsafe { self.alloc.deallocate(ptr, layout) }
        .                   }
   27,698 ( 0.00%)      }
        .           }
        .           
        .           // Central function for reserve error handling.
        .           #[cfg(not(no_global_oom_handling))]
        .           #[inline]
    5,989 ( 0.00%)  fn handle_reserve(result: Result<(), TryReserveError>) {
   71,868 ( 0.01%)      match result.map_err(|e| e.kind()) {
        .                   Err(CapacityOverflow) => capacity_overflow(),
        .                   Err(AllocError { layout, .. }) => handle_alloc_error(layout),
        .                   Ok(()) => { /* yay */ }
        .               }
   11,978 ( 0.00%)  }
        .           
        .           // We need to guarantee the following:
        .           // * We don't ever allocate `> isize::MAX` byte-size objects.
        .           // * We don't overflow `usize::MAX` and actually allocate too little.
        .           //
        .           // On 64-bit we just need to check for overflow since trying to allocate
        .           // `> isize::MAX` bytes will surely fail. On 32-bit and 16-bit we need to add
        .           // an extra guard for this in case we're running on a platform which can use
        .           // all 4GB in user-space, e.g., PAE or x32.
        .           
        .           #[inline]
   27,280 ( 0.00%)  fn alloc_guard(alloc_size: usize) -> Result<(), TryReserveError> {
   27,280 ( 0.00%)      if usize::BITS < 64 && alloc_size > isize::MAX as usize {
        .                   Err(CapacityOverflow.into())
        .               } else {
    6,820 ( 0.00%)          Ok(())
        .               }
   13,640 ( 0.00%)  }
        .           
        .           // One central function responsible for reporting capacity overflows. This'll
        .           // ensure that the code generation related to these panics is minimal as there's
        .           // only one location which panics rather than a bunch throughout the module.
        .           #[cfg(not(no_global_oom_handling))]
        .           fn capacity_overflow() -> ! {
        .               panic!("capacity overflow");
        .           }
-- line 519 ----------------------------------------

2,037,665 ( 0.27%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/raw_vec.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 110 ----------------------------------------
        .           /// Control byte value for an empty bucket.
        .           const EMPTY: u8 = 0b1111_1111;
        .           
        .           /// Control byte value for a deleted bucket.
        .           const DELETED: u8 = 0b1000_0000;
        .           
        .           /// Checks whether a control byte represents a full bucket (top bit is clear).
        .           #[inline]
      258 ( 0.00%)  fn is_full(ctrl: u8) -> bool {
  675,114 ( 0.09%)      ctrl & 0x80 == 0
      344 ( 0.00%)  }
        .           
        .           /// Checks whether a control byte represents a special value (top bit is set).
        .           #[inline]
        .           fn is_special(ctrl: u8) -> bool {
        .               ctrl & 0x80 != 0
        .           }
        .           
        .           /// Checks whether a special control value is EMPTY (just check 1 bit).
        .           #[inline]
       90 ( 0.00%)  fn special_is_empty(ctrl: u8) -> bool {
        .               debug_assert!(is_special(ctrl));
   59,477 ( 0.01%)      ctrl & 0x01 != 0
      120 ( 0.00%)  }
        .           
        .           /// Primary hash function, used to select the initial bucket to probe from.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
      231 ( 0.00%)  fn h1(hash: u64) -> usize {
        .               // On 32-bit platforms we simply ignore the higher hash bits.
        .               hash as usize
      154 ( 0.00%)  }
        .           
        .           /// Secondary hash function, saved in the low 7 bits of the control byte.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
      210 ( 0.00%)  fn h2(hash: u64) -> u8 {
        .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
        .               // value, some hash functions (such as FxHash) produce a usize result
        .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
      420 ( 0.00%)      let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
9,355,507 ( 1.24%)      let top7 = hash >> (hash_len * 8 - 7);
       70 ( 0.00%)      (top7 & 0x7f) as u8 // truncation
      140 ( 0.00%)  }
        .           
        .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
        .           /// table size is a power of two) to visit every group of elements exactly once.
        .           ///
        .           /// A triangular probe has us jump by 1 more group every time. So first we
        .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
        .           /// (skipping over 1 group), then 3 groups (skipping over 2 groups), and so on.
        .           ///
-- line 161 ----------------------------------------
-- line 170 ----------------------------------------
        .               #[inline]
        .               fn move_next(&mut self, bucket_mask: usize) {
        .                   // We should have found an empty bucket by now and ended the probe.
        .                   debug_assert!(
        .                       self.stride <= bucket_mask,
        .                       "Went past end of probe sequence"
        .                   );
        .           
   77,066 ( 0.01%)          self.stride += Group::WIDTH;
   77,066 ( 0.01%)          self.pos += self.stride;
   64,278 ( 0.01%)          self.pos &= bucket_mask;
        .               }
        .           }
        .           
        .           /// Returns the number of buckets needed to hold the given number of items,
        .           /// taking the maximum load factor into account.
        .           ///
        .           /// Returns `None` if an overflow occurs.
        .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
        .           #[cfg_attr(target_os = "emscripten", inline(never))]
        .           #[cfg_attr(not(target_os = "emscripten"), inline)]
       21 ( 0.00%)  fn capacity_to_buckets(cap: usize) -> Option<usize> {
        .               debug_assert_ne!(cap, 0);
        .           
        .               // For small tables we require at least 1 empty bucket so that lookups are
        .               // guaranteed to terminate if an element doesn't exist in the table.
   46,986 ( 0.01%)      if cap < 8 {
        .                   // We don't bother with a table size of 2 buckets since that can only
        .                   // hold a single element. Instead we skip directly to a 4 bucket table
        .                   // which can hold 3 elements.
  100,111 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
        .               }
        .           
        .               // Otherwise require 1/8 buckets to be empty (87.5% load)
        .               //
        .               // Be careful when modifying this, calculate_layout relies on the
        .               // overflow check here.
   20,858 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
        .           
        .               // Any overflows will have been caught by the checked_mul. Also, any
        .               // rounding errors from the division above will be cleaned up by
        .               // next_power_of_two (which can't overflow because of the previous division).
       10 ( 0.00%)      Some(adjusted_cap.next_power_of_two())
       30 ( 0.00%)  }
        .           
        .           /// Returns the maximum effective capacity for the given bucket mask, taking
        .           /// the maximum load factor into account.
        .           #[inline]
       42 ( 0.00%)  fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
  121,545 ( 0.02%)      if bucket_mask < 8 {
        .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
        .                   // Keep in mind that the bucket mask is one less than the bucket count.
       11 ( 0.00%)          bucket_mask
        .               } else {
        .                   // For larger tables we reserve 12.5% of the slots as empty.
   27,437 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
        .               }
       42 ( 0.00%)  }
        .           
        .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
        .           /// while keeping the rest of `calculate_layout_for` independent of `T`
        .           #[derive(Copy, Clone)]
        .           struct TableLayout {
        .               size: usize,
        .               ctrl_align: usize,
        .           }
        .           
        .           impl TableLayout {
        .               #[inline]
       10 ( 0.00%)      fn new<T>() -> Self {
       40 ( 0.00%)          let layout = Layout::new::<T>();
       20 ( 0.00%)          Self {
       30 ( 0.00%)              size: layout.size(),
       60 ( 0.00%)              ctrl_align: usize::max(layout.align(), Group::WIDTH),
        .                   }
       40 ( 0.00%)      }
        .           
        .               #[inline]
      169 ( 0.00%)      fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
       26 ( 0.00%)          let TableLayout { size, ctrl_align } = self;
        .                   // Manual layout calculation since Layout methods are not yet stable.
        .                   let ctrl_offset =
   96,451 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
  128,904 ( 0.02%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
        .           
      117 ( 0.00%)          Some((
       52 ( 0.00%)              unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
        .                       ctrl_offset,
        .                   ))
       39 ( 0.00%)      }
        .           }
        .           
        .           /// Returns a Layout which describes the allocation required for a hash table,
        .           /// and the offset of the control bytes in the allocation.
        .           /// (the offset is also one past last element of buckets)
        .           ///
        .           /// Returns `None` if an overflow occurs.
        .           #[cfg_attr(feature = "inline-more", inline)]
-- line 269 ----------------------------------------
-- line 292 ----------------------------------------
        .               #[inline]
        .               fn clone(&self) -> Self {
        .                   Self { ptr: self.ptr }
        .               }
        .           }
        .           
        .           impl<T> Bucket<T> {
        .               #[inline]
      400 ( 0.00%)      unsafe fn from_base_index(base: NonNull<T>, index: usize) -> Self {
      320 ( 0.00%)          let ptr = if mem::size_of::<T>() == 0 {
        .                       // won't overflow because index must be less than length
        .                       (index + 1) as *mut T
        .                   } else {
      320 ( 0.00%)              base.as_ptr().sub(index)
        .                   };
       80 ( 0.00%)          Self {
      320 ( 0.00%)              ptr: NonNull::new_unchecked(ptr),
        .                   }
      240 ( 0.00%)      }
        .               #[inline]
        .               unsafe fn to_base_index(&self, base: NonNull<T>) -> usize {
        .                   if mem::size_of::<T>() == 0 {
        .                       self.ptr.as_ptr() as usize - 1
        .                   } else {
        .                       offset_from(base.as_ptr(), self.ptr.as_ptr())
        .                   }
        .               }
        .               #[inline]
      156 ( 0.00%)      pub fn as_ptr(&self) -> *mut T {
      208 ( 0.00%)          if mem::size_of::<T>() == 0 {
        .                       // Just return an arbitrary ZST pointer which is properly aligned
        .                       mem::align_of::<T>() as *mut T
        .                   } else {
      312 ( 0.00%)              unsafe { self.ptr.as_ptr().sub(1) }
        .                   }
      156 ( 0.00%)      }
        .               #[inline]
       25 ( 0.00%)      unsafe fn next_n(&self, offset: usize) -> Self {
       20 ( 0.00%)          let ptr = if mem::size_of::<T>() == 0 {
        .                       (self.ptr.as_ptr() as usize + offset) as *mut T
        .                   } else {
       25 ( 0.00%)              self.ptr.as_ptr().sub(offset)
        .                   };
        5 ( 0.00%)          Self {
       20 ( 0.00%)              ptr: NonNull::new_unchecked(ptr),
        .                   }
       15 ( 0.00%)      }
        .               #[cfg_attr(feature = "inline-more", inline)]
       10 ( 0.00%)      pub unsafe fn drop(&self) {
       10 ( 0.00%)          self.as_ptr().drop_in_place();
       10 ( 0.00%)      }
        .               #[inline]
        .               pub unsafe fn read(&self) -> T {
      278 ( 0.00%)          self.as_ptr().read()
        .               }
        .               #[inline]
       69 ( 0.00%)      pub unsafe fn write(&self, val: T) {
      273 ( 0.00%)          self.as_ptr().write(val);
       46 ( 0.00%)      }
        .               #[inline]
       48 ( 0.00%)      pub unsafe fn as_ref<'a>(&self) -> &'a T {
       48 ( 0.00%)          &*self.as_ptr()
       48 ( 0.00%)      }
        .               #[inline]
        .               pub unsafe fn as_mut<'a>(&self) -> &'a mut T {
        .                   &mut *self.as_ptr()
        .               }
        .               #[cfg(feature = "raw")]
        .               #[inline]
        .               pub unsafe fn copy_from_nonoverlapping(&self, other: &Self) {
        .                   self.as_ptr().copy_from_nonoverlapping(other.as_ptr(), 1);
-- line 362 ----------------------------------------
-- line 392 ----------------------------------------
        .           
        .           impl<T> RawTable<T, Global> {
        .               /// Creates a new empty hash table without allocating any memory.
        .               ///
        .               /// In effect this returns a table with exactly 1 bucket. However we can
        .               /// leave the data pointer dangling since that bucket is never written to
        .               /// due to our load factor forcing us to always have at least 1 free bucket.
        .               #[inline]
       90 ( 0.00%)      pub const fn new() -> Self {
      240 ( 0.00%)          Self {
       60 ( 0.00%)              table: RawTableInner::new_in(Global),
        .                       marker: PhantomData,
        .                   }
       60 ( 0.00%)      }
        .           
        .               /// Attempts to allocate a new hash table with at least enough capacity
        .               /// for inserting the given number of elements without reallocating.
        .               #[cfg(feature = "raw")]
        .               pub fn try_with_capacity(capacity: usize) -> Result<Self, TryReserveError> {
        .                   Self::try_with_capacity_in(capacity, Global)
        .               }
        .           
-- line 413 ----------------------------------------
-- line 421 ----------------------------------------
        .           impl<T, A: Allocator + Clone> RawTable<T, A> {
        .               /// Creates a new empty hash table without allocating any memory, using the
        .               /// given allocator.
        .               ///
        .               /// In effect this returns a table with exactly 1 bucket. However we can
        .               /// leave the data pointer dangling since that bucket is never written to
        .               /// due to our load factor forcing us to always have at least 1 free bucket.
        .               #[inline]
        3 ( 0.00%)      pub fn new_in(alloc: A) -> Self {
      371 ( 0.00%)          Self {
        2 ( 0.00%)              table: RawTableInner::new_in(alloc),
        .                       marker: PhantomData,
        .                   }
        2 ( 0.00%)      }
        .           
        .               /// Allocates a new hash table with the given number of buckets.
        .               ///
        .               /// The control bytes are left uninitialized.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   Ok(Self {
      110 ( 0.00%)              table: RawTableInner::new_uninitialized(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           buckets,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
        .               /// Attempts to allocate a new hash table with at least enough capacity
        .               /// for inserting the given number of elements without reallocating.
        .               fn fallible_with_capacity(
        .                   alloc: A,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   Ok(Self {
    5,384 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           capacity,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 474 ----------------------------------------
-- line 493 ----------------------------------------
        .               /// Returns a reference to the underlying allocator.
        .               #[inline]
        .               pub fn allocator(&self) -> &A {
        .                   &self.table.alloc
        .               }
        .           
        .               /// Deallocates the table without dropping any entries.
        .               #[cfg_attr(feature = "inline-more", inline)]
        9 ( 0.00%)      unsafe fn free_buckets(&mut self) {
       12 ( 0.00%)          self.table.free_buckets(TableLayout::new::<T>());
        6 ( 0.00%)      }
        .           
        .               /// Returns pointer to one past last element of data table.
        .               #[inline]
      112 ( 0.00%)      pub unsafe fn data_end(&self) -> NonNull<T> {
      280 ( 0.00%)          NonNull::new_unchecked(self.table.ctrl.as_ptr().cast())
      112 ( 0.00%)      }
        .           
        .               /// Returns pointer to start of data table.
        .               #[inline]
        .               #[cfg(feature = "nightly")]
        .               pub unsafe fn data_start(&self) -> *mut T {
        .                   self.data_end().as_ptr().wrapping_sub(self.buckets())
        .               }
        .           
-- line 517 ----------------------------------------
-- line 518 ----------------------------------------
        .               /// Returns the index of a bucket from a `Bucket`.
        .               #[inline]
        .               pub unsafe fn bucket_index(&self, bucket: &Bucket<T>) -> usize {
        .                   bucket.to_base_index(self.data_end())
        .               }
        .           
        .               /// Returns a pointer to an element in the table.
        .               #[inline]
       92 ( 0.00%)      pub unsafe fn bucket(&self, index: usize) -> Bucket<T> {
        .                   debug_assert_ne!(self.table.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
       92 ( 0.00%)          Bucket::from_base_index(self.data_end(), index)
       46 ( 0.00%)      }
        .           
        .               /// Erases an element from the table without dropping it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    5,991 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    5,991 ( 0.00%)          let index = self.bucket_index(item);
        .                   self.table.erase(index);
   11,982 ( 0.00%)      }
        .           
        .               /// Erases an element from the table, dropping it in place.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
        .                   // Erase the element from the table first since drop might panic.
    2,154 ( 0.00%)          self.erase_no_drop(&item);
        .                   item.drop();
        .               }
        .           
        .               /// Finds and erases an element from the table, dropping it in place.
        .               /// Returns true if an element was found.
        .               #[cfg(feature = "raw")]
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    9,828 ( 0.00%)          self.erase_no_drop(&item);
       56 ( 0.00%)          item.read()
        .               }
        .           
        .               /// Finds and removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
  228,435 ( 0.03%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      142 ( 0.00%)          match self.find(hash, eq) {
    2,343 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
   35,674 ( 0.00%)              None => None,
        .                   }
  334,216 ( 0.04%)      }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear_no_drop(&mut self) {
        .                   self.table.clear_no_drop();
        .               }
        .           
        .               /// Removes all elements from the table without freeing the backing memory.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear(&mut self) {
        .                   // Ensure that the table is reset even if one of the drops panic
        .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
        .                   unsafe {
        1 ( 0.00%)              self_.drop_elements();
        .                   }
        .               }
        .           
       16 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    5,500 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
      116 ( 0.00%)              for item in self.iter() {
       10 ( 0.00%)                  item.drop();
        .                       }
        .                   }
       14 ( 0.00%)      }
        .           
        .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
        .                   // Calculate the minimal number of elements that we need to reserve
        .                   // space for.
        .                   let min_size = usize::max(self.table.items, min_size);
        .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 641 ----------------------------------------
        .                           }
        .                       }
        .                   }
        .               }
        .           
        .               /// Ensures that at least `additional` items can be inserted into the table
        .               /// without reallocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
       49 ( 0.00%)      pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
  147,086 ( 0.02%)          if additional > self.table.growth_left {
        .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   79,606 ( 0.01%)              if self
       14 ( 0.00%)                  .reserve_rehash(additional, hasher, Fallibility::Infallible)
        .                           .is_err()
        .                       {
        .                           unsafe { hint::unreachable_unchecked() }
        .                       }
        .                   }
       35 ( 0.00%)      }
        .           
        .               /// Tries to ensure that at least `additional` items can be inserted into
        .               /// the table without reallocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn try_reserve(
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: impl Fn(&T) -> u64,
-- line 667 ----------------------------------------
-- line 671 ----------------------------------------
        .                   } else {
        .                       Ok(())
        .                   }
        .               }
        .           
        .               /// Out-of-line slow path for `reserve` and `try_reserve`.
        .               #[cold]
        .               #[inline(never)]
  186,227 ( 0.02%)      fn reserve_rehash(
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
        .               ) -> Result<(), TryReserveError> {
        .                   unsafe {
       84 ( 0.00%)              self.table.reserve_rehash_inner(
        .                           additional,
      573 ( 0.00%)                  &|table, index| hasher(table.bucket::<T>(index).as_ref()),
        .                           fallibility,
       35 ( 0.00%)                  TableLayout::new::<T>(),
       42 ( 0.00%)                  if mem::needs_drop::<T>() {
       35 ( 0.00%)                      Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
        .                           } else {
        .                               None
        .                           },
        .                       )
        .                   }
  132,365 ( 0.02%)      }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
        .               /// current table into it.
        .               fn resize(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
        .                       )
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns its raw bucket.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  942,180 ( 0.13%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
        .                   unsafe {
      184 ( 0.00%)              let mut index = self.table.find_insert_slot(hash);
        .           
        .                       // We can avoid growing the table once we have reached our load
        .                       // factor if we are replacing a tombstone. This works since the
        .                       // number of EMPTY slots does not change in this case.
    2,230 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  632,877 ( 0.08%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
       35 ( 0.00%)                  self.reserve(1, hasher);
       35 ( 0.00%)                  index = self.table.find_insert_slot(hash);
        .                       }
        .           
      115 ( 0.00%)              self.table.record_item_insert_at(index, old_ctrl, hash);
        .           
      138 ( 0.00%)              let bucket = self.bucket(index);
      252 ( 0.00%)              bucket.write(value);
       46 ( 0.00%)              bucket
        .                   }
  693,424 ( 0.09%)      }
        .           
        .               /// Attempts to insert a new element without growing the table and return its raw bucket.
        .               ///
        .               /// Returns an `Err` containing the given element if inserting it would require growing the
        .               /// table.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns a mutable reference to it.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  268,504 ( 0.04%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
      155 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
  201,378 ( 0.03%)      }
        .           
        .               /// Inserts a new element into the table, without growing the table.
        .               ///
        .               /// There must be enough space in the table to insert the new element.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
      784 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
  172,790 ( 0.02%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    2,291 ( 0.00%)          let bucket = self.table.bucket(index);
        .           
        .                   // If we are replacing a DELETED entry then we don't need to update
        .                   // the load counter.
  352,781 ( 0.05%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
        .           
        .                   bucket.write(value);
  281,578 ( 0.04%)          self.table.items += 1;
        .                   bucket
    1,491 ( 0.00%)      }
        .           
        .               /// Temporary removes a bucket, applying the given function to the removed
        .               /// element and optionally put back the returned value in the same bucket.
        .               ///
        .               /// Returns `true` if the bucket still contains an element
        .               ///
        .               /// This does not check if the given bucket is actually occupied.
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// Searches for an element in the table.
        .               #[inline]
    1,157 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
    1,815 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    8,133 ( 0.00%)              eq(self.bucket(index).as_ref())
      375 ( 0.00%)          });
        .           
        .                   // Avoid `Option::map` because it bloats LLVM IR.
       69 ( 0.00%)          match result {
      168 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
       46 ( 0.00%)              None => None,
        .                   }
    1,138 ( 0.00%)      }
        .           
        .               /// Gets a reference to an element in the table.
        .               #[inline]
        .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    3,685 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Gets a mutable reference to an element in the table.
        .               #[inline]
      272 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      966 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
       46 ( 0.00%)              None => None,
        .                   }
      309 ( 0.00%)      }
        .           
        .               /// Attempts to get mutable references to `N` entries in the table at once.
        .               ///
        .               /// Returns an array of length `N` with the results of each query.
        .               ///
        .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
        .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
        .               ///
-- line 859 ----------------------------------------
-- line 913 ----------------------------------------
        .               /// more, but is guaranteed to be able to hold at least this many.
        .               #[inline]
        .               pub fn capacity(&self) -> usize {
        .                   self.table.items + self.table.growth_left
        .               }
        .           
        .               /// Returns the number of elements in the table.
        .               #[inline]
        8 ( 0.00%)      pub fn len(&self) -> usize {
        4 ( 0.00%)          self.table.items
        8 ( 0.00%)      }
        .           
        .               /// Returns `true` if the table contains no elements.
        .               #[inline]
        8 ( 0.00%)      pub fn is_empty(&self) -> bool {
  245,183 ( 0.03%)          self.len() == 0
       16 ( 0.00%)      }
        .           
        .               /// Returns the number of buckets in the table.
        .               #[inline]
        .               pub fn buckets(&self) -> usize {
        .                   self.table.bucket_mask + 1
        .               }
        .           
        .               /// Returns an iterator over every element in the table. It is up to
        .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
        .               /// Because we cannot make the `next` method unsafe on the `RawIter`
        .               /// struct, we have to make the `iter` method unsafe.
        .               #[inline]
      231 ( 0.00%)      pub unsafe fn iter(&self) -> RawIter<T> {
      231 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
      297 ( 0.00%)          RawIter {
      231 ( 0.00%)              iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
   35,235 ( 0.00%)              items: self.table.items,
        .                   }
       66 ( 0.00%)      }
        .           
        .               /// Returns an iterator over occupied buckets that could match a given hash.
        .               ///
        .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
        .               /// return items that have a hash value different than the one provided. You
        .               /// should always validate the returned values before using them.
        .               ///
        .               /// It is up to the caller to ensure that the `RawTable` outlives the
-- line 956 ----------------------------------------
-- line 995 ----------------------------------------
        .               /// Iteration starts at the provided iterator's current location.
        .               ///
        .               /// It is up to the caller to ensure that the iterator is valid for this
        .               /// `RawTable` and covers all items that remain in the table.
        .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
        .                   debug_assert_eq!(iter.len(), self.len());
        .           
        .                   let alloc = self.table.alloc.clone();
    3,972 ( 0.00%)          let allocation = self.into_allocation();
    2,979 ( 0.00%)          RawIntoIter {
    4,965 ( 0.00%)              iter,
        .                       allocation,
        .                       marker: PhantomData,
        .                       alloc,
        .                   }
        .               }
        .           
        .               /// Converts the table into a raw allocation. The contents of the table
        .               /// should be dropped using a `RawIter` before freeing the allocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
    1,783 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
        .                       None
        .                   } else {
        .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
        .                           Some(lco) => lco,
        .                           None => unsafe { hint::unreachable_unchecked() },
        .                       };
        .                       Some((
      303 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
        .                           layout,
        .                       ))
        .                   };
        .                   mem::forget(self);
        .                   alloc
        .               }
        .           }
        .           
-- line 1033 ----------------------------------------
-- line 1041 ----------------------------------------
        .           where
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<A> RawTableInner<A> {
        .               #[inline]
       93 ( 0.00%)      const fn new_in(alloc: A) -> Self {
  256,654 ( 0.03%)          Self {
        .                       // Be careful to cast the entire slice to a raw pointer.
      217 ( 0.00%)              ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
        .                       bucket_mask: 0,
        .                       items: 0,
        .                       growth_left: 0,
        .                       alloc,
        .                   }
       62 ( 0.00%)      }
        .           }
        .           
        .           impl<A: Allocator + Clone> RawTableInner<A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
  169,841 ( 0.02%)      unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
      112 ( 0.00%)          let (layout, ctrl_offset) = match table_layout.calculate_layout_for(buckets) {
       84 ( 0.00%)              Some(lco) => lco,
        .                       None => return Err(fallibility.capacity_overflow()),
        .                   };
        .           
        .                   // We need an additional check to ensure that the allocation doesn't
        .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
        .                   // such allocations will never succeed anyways.
        .                   //
        .                   // This mirrors what Vec does in the standard library.
       28 ( 0.00%)          if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
        .                       return Err(fallibility.capacity_overflow());
        .                   }
        .           
   39,475 ( 0.01%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
       49 ( 0.00%)              Ok(block) => block.cast(),
        .                       Err(_) => return Err(fallibility.alloc_err(layout)),
        .                   };
        .           
       63 ( 0.00%)          let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   95,353 ( 0.01%)          Ok(Self {
        .                       ctrl,
   39,420 ( 0.01%)              bucket_mask: buckets - 1,
        .                       items: 0,
       63 ( 0.00%)              growth_left: bucket_mask_to_capacity(buckets - 1),
        .                       alloc,
        .                   })
  123,770 ( 0.02%)      }
        .           
        .               #[inline]
   13,908 ( 0.00%)      fn fallible_with_capacity(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
    3,616 ( 0.00%)          if capacity == 0 {
    3,364 ( 0.00%)              Ok(Self::new_in(alloc))
        .                   } else {
        .                       unsafe {
        .                           let buckets =
      147 ( 0.00%)                      capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
        .           
   77,402 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
       84 ( 0.00%)                  result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
        .           
    6,636 ( 0.00%)                  Ok(result)
        .                       }
        .                   }
   13,845 ( 0.00%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element and sets the hash for that slot.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
   58,782 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
       72 ( 0.00%)          let index = self.find_insert_slot(hash);
   58,782 ( 0.01%)          let old_ctrl = *self.ctrl(index);
       24 ( 0.00%)          self.set_ctrl_h2(index, hash);
       48 ( 0.00%)          (index, old_ctrl)
  117,420 ( 0.02%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
      216 ( 0.00%)      fn find_insert_slot(&self, hash: u64) -> usize {
      216 ( 0.00%)          let mut probe_seq = self.probe_seq(hash);
       54 ( 0.00%)          loop {
        .                       unsafe {
      432 ( 0.00%)                  let group = Group::load(self.ctrl(probe_seq.pos));
  442,894 ( 0.06%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
1,294,503 ( 0.17%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
        .           
        .                               // In tables smaller than the group width, trailing control
        .                               // bytes outside the range of the table are filled with
        .                               // EMPTY entries. These will unfortunately trigger a
        .                               // match, but once masked may point to a full bucket that
        .                               // is already occupied. We detect this situation here and
        .                               // perform a second scan starting at the beginning of the
        .                               // table. This second scan is guaranteed to find an empty
        .                               // slot (due to the load factor) before hitting the trailing
        .                               // control bytes (containing EMPTY).
  589,976 ( 0.08%)                      if unlikely(is_full(*self.ctrl(result))) {
        .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
        .                                   debug_assert_ne!(probe_seq.pos, 0);
       30 ( 0.00%)                          return Group::load_aligned(self.ctrl(0))
        .                                       .match_empty_or_deleted()
        .                                       .lowest_set_bit_nonzero();
        .                               }
        .           
      104 ( 0.00%)                      return result;
        .                           }
        .                       }
        .                       probe_seq.move_next(self.bucket_mask);
        .                   }
      162 ( 0.00%)      }
        .           
        .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
        .               /// code generated, but it is eliminated by LLVM optimizations.
        .               #[inline]
      276 ( 0.00%)      fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
       69 ( 0.00%)          let h2_hash = h2(hash);
       92 ( 0.00%)          let mut probe_seq = self.probe_seq(hash);
        .           
   23,555 ( 0.00%)          loop {
      184 ( 0.00%)              let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
        .           
1,096,849 ( 0.15%)              for bit in group.match_byte(h2_hash) {
1,994,842 ( 0.27%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
        .           
1,350,475 ( 0.18%)                  if likely(eq(index)) {
        .                               return Some(index);
        .                           }
        .                       }
        .           
  389,534 ( 0.05%)              if likely(group.match_empty().any_bit_set()) {
       23 ( 0.00%)                  return None;
        .                       }
        .           
        .                       probe_seq.move_next(self.bucket_mask);
        .                   }
       92 ( 0.00%)      }
        .           
        .               #[allow(clippy::mut_mut)]
        .               #[inline]
        .               unsafe fn prepare_rehash_in_place(&mut self) {
        .                   // Bulk convert all full control bytes to DELETED, and all DELETED
        .                   // control bytes to EMPTY. This effectively frees up all buckets
        .                   // containing a DELETED entry.
        .                   for i in (0..self.buckets()).step_by(Group::WIDTH) {
-- line 1204 ----------------------------------------
-- line 1214 ----------------------------------------
        .                           .copy_to(self.ctrl(Group::WIDTH), self.buckets());
        .                   } else {
        .                       self.ctrl(0)
        .                           .copy_to(self.ctrl(self.buckets()), Group::WIDTH);
        .                   }
        .               }
        .           
        .               #[inline]
       96 ( 0.00%)      unsafe fn bucket<T>(&self, index: usize) -> Bucket<T> {
        .                   debug_assert_ne!(self.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
       96 ( 0.00%)          Bucket::from_base_index(self.data_end(), index)
       48 ( 0.00%)      }
        .           
        .               #[inline]
      288 ( 0.00%)      unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
        .                   debug_assert_ne!(self.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
      240 ( 0.00%)          let base: *mut u8 = self.data_end().as_ptr();
1,578,680 ( 0.21%)          base.sub((index + 1) * size_of)
       96 ( 0.00%)      }
        .           
        .               #[inline]
      144 ( 0.00%)      unsafe fn data_end<T>(&self) -> NonNull<T> {
      360 ( 0.00%)          NonNull::new_unchecked(self.ctrl.as_ptr().cast())
      144 ( 0.00%)      }
        .           
        .               /// Returns an iterator-like object for a probe sequence on the table.
        .               ///
        .               /// This iterator never terminates, but is guaranteed to visit each bucket
        .               /// group exactly once. The loop using `probe_seq` must terminate upon
        .               /// reaching a group containing an empty bucket.
        .               #[inline]
      539 ( 0.00%)      fn probe_seq(&self, hash: u64) -> ProbeSeq {
      154 ( 0.00%)          ProbeSeq {
6,668,082 ( 0.89%)              pos: h1(hash) & self.bucket_mask,
        .                       stride: 0,
        .                   }
      308 ( 0.00%)      }
        .           
        .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
        .               /// in the table, otherwise returns error
        .               #[cfg(feature = "raw")]
        .               #[inline]
        .               unsafe fn prepare_insert_no_grow(&mut self, hash: u64) -> Result<usize, ()> {
        .                   let index = self.find_insert_slot(hash);
        .                   let old_ctrl = *self.ctrl(index);
-- line 1260 ----------------------------------------
-- line 1262 ----------------------------------------
        .                       Err(())
        .                   } else {
        .                       self.record_item_insert_at(index, old_ctrl, hash);
        .                       Ok(index)
        .                   }
        .               }
        .           
        .               #[inline]
      207 ( 0.00%)      unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
  790,821 ( 0.11%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
       46 ( 0.00%)          self.set_ctrl_h2(index, hash);
  632,597 ( 0.08%)          self.items += 1;
       46 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
        .                   let probe_seq_pos = self.probe_seq(hash).pos;
        .                   let probe_index =
        .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
        .                   probe_index(i) == probe_index(new_i)
        .               }
        .           
        .               /// Sets a control byte to the hash, and possibly also the replicated control byte at
        .               /// the end of the array.
        .               #[inline]
      423 ( 0.00%)      unsafe fn set_ctrl_h2(&self, index: usize, hash: u64) {
      188 ( 0.00%)          self.set_ctrl(index, h2(hash));
       94 ( 0.00%)      }
        .           
        .               #[inline]
        .               unsafe fn replace_ctrl_h2(&self, index: usize, hash: u64) -> u8 {
        .                   let prev_ctrl = *self.ctrl(index);
        .                   self.set_ctrl_h2(index, hash);
        .                   prev_ctrl
        .               }
        .           
        .               /// Sets a control byte, and possibly also the replicated control byte at
        .               /// the end of the array.
        .               #[inline]
      470 ( 0.00%)      unsafe fn set_ctrl(&self, index: usize, ctrl: u8) {
        .                   // Replicate the first Group::WIDTH control bytes at the end of
        .                   // the array without using a branch:
        .                   // - If index >= Group::WIDTH then index == index2.
        .                   // - Otherwise index2 == self.bucket_mask + 1 + index.
        .                   //
        .                   // The very last replicated control byte is never actually read because
        .                   // we mask the initial index for unaligned loads, but we write it
        .                   // anyways because it makes the set_ctrl implementation simpler.
-- line 1309 ----------------------------------------
-- line 1312 ----------------------------------------
        .                   // replicate the buckets at the end of the trailing group. For example
        .                   // with 2 buckets and a group size of 4, the control bytes will look
        .                   // like this:
        .                   //
        .                   //     Real    |             Replicated
        .                   // ---------------------------------------------
        .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
        .                   // ---------------------------------------------
1,244,570 ( 0.17%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
        .           
  414,935 ( 0.06%)          *self.ctrl(index) = ctrl;
  414,946 ( 0.06%)          *self.ctrl(index2) = ctrl;
       94 ( 0.00%)      }
        .           
        .               /// Returns a pointer to a control byte.
        .               #[inline]
    1,252 ( 0.00%)      unsafe fn ctrl(&self, index: usize) -> *mut u8 {
        .                   debug_assert!(index < self.num_ctrl_bytes());
      939 ( 0.00%)          self.ctrl.as_ptr().add(index)
      626 ( 0.00%)      }
        .           
        .               #[inline]
       92 ( 0.00%)      fn buckets(&self) -> usize {
  112,145 ( 0.01%)          self.bucket_mask + 1
       92 ( 0.00%)      }
        .           
        .               #[inline]
       14 ( 0.00%)      fn num_ctrl_bytes(&self) -> usize {
   93,522 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
       14 ( 0.00%)      }
        .           
        .               #[inline]
       74 ( 0.00%)      fn is_empty_singleton(&self) -> bool {
  478,885 ( 0.06%)          self.bucket_mask == 0
      148 ( 0.00%)      }
        .           
        .               #[allow(clippy::mut_mut)]
        .               #[inline]
      119 ( 0.00%)      unsafe fn prepare_resize(
        .                   &self,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
        7 ( 0.00%)          debug_assert!(self.items <= capacity);
        .           
        .                   // Allocate and initialize the new table.
    1,408 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
        7 ( 0.00%)              self.alloc.clone(),
        .                       table_layout,
        .                       capacity,
        .                       fallibility,
        .                   )?;
   49,106 ( 0.01%)          new_table.growth_left -= self.items;
       14 ( 0.00%)          new_table.items = self.items;
        .           
        .                   // The hash function may panic, in which case we simply free the new
        .                   // table without dropping any elements that may have been copied into
        .                   // it.
        .                   //
        .                   // This guard is also used to free the old table on success, see
        .                   // the comment at the bottom of this function.
      196 ( 0.00%)          Ok(guard(new_table, move |self_| {
   22,841 ( 0.00%)              if !self_.is_empty_singleton() {
        9 ( 0.00%)                  self_.free_buckets(table_layout);
        .                       }
       14 ( 0.00%)          }))
       28 ( 0.00%)      }
        .           
        .               /// Reserves or rehashes to make room for `additional` more elements.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
        .               /// code generated, but it is eliminated by LLVM optimizations when inlined.
        .               #[allow(clippy::inline_always)]
        .               #[inline(always)]
        .               unsafe fn reserve_rehash_inner(
-- line 1387 ----------------------------------------
-- line 1388 ----------------------------------------
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .                   drop: Option<fn(*mut u8)>,
        .               ) -> Result<(), TryReserveError> {
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
   45,694 ( 0.01%)          let new_items = match self.items.checked_add(additional) {
       28 ( 0.00%)              Some(new_items) => new_items,
        .                       None => return Err(fallibility.capacity_overflow()),
        .                   };
   45,641 ( 0.01%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   95,622 ( 0.01%)          if new_items <= full_capacity / 2 {
        .                       // Rehash in-place without re-allocating if we have plenty of spare
        .                       // capacity that is locked up due to DELETED entries.
        .                       self.rehash_in_place(hasher, layout.size, drop);
        .                       Ok(())
        .                   } else {
        .                       // Otherwise, conservatively resize to at least the next size up
        .                       // to avoid churning deletes into frequent rehashes.
        .                       self.resize_inner(
   22,873 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
        .                           hasher,
        .                           fallibility,
        .                           layout,
        .                       )
        .                   }
       14 ( 0.00%)      }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
        .               /// current table into it.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
        .               /// code generated, but it is eliminated by LLVM optimizations when inlined.
        .               #[allow(clippy::inline_always)]
        .               #[inline(always)]
        .               unsafe fn resize_inner(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .               ) -> Result<(), TryReserveError> {
    3,199 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
        .           
        .                   // Copy all elements to the new table.
      718 ( 0.00%)          for i in 0..self.buckets() {
  244,041 ( 0.03%)              if !is_full(*self.ctrl(i)) {
        .                           continue;
        .                       }
        .           
        .                       // This may panic.
      216 ( 0.00%)              let hash = hasher(self, i);
        .           
        .                       // We can use a simpler version of insert() here since:
        .                       // - there are no DELETED entries.
        .                       // - we know there is enough space in the table.
        .                       // - all elements are unique.
      288 ( 0.00%)              let (index, _) = new_table.prepare_insert_slot(hash);
        .           
       72 ( 0.00%)              ptr::copy_nonoverlapping(
       96 ( 0.00%)                  self.bucket_ptr(i, layout.size),
      216 ( 0.00%)                  new_table.bucket_ptr(index, layout.size),
        .                           layout.size,
        .                       );
        .                   }
        .           
        .                   // We successfully copied all elements without panicking. Now replace
        .                   // self with the new table. The old table will have its memory freed but
        .                   // the items will not be dropped (since they have been moved into the
        .                   // new table).
       56 ( 0.00%)          mem::swap(self, &mut new_table);
        .           
   22,810 ( 0.00%)          Ok(())
       42 ( 0.00%)      }
        .           
        .               /// Rehashes the contents of the table in place (i.e. without changing the
        .               /// allocation).
        .               ///
        .               /// If `hasher` panics then some the table's contents may be lost.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
        .               /// code generated, but it is eliminated by LLVM optimizations when inlined.
-- line 1471 ----------------------------------------
-- line 1547 ----------------------------------------
        .                   }
        .           
        .                   guard.growth_left = bucket_mask_to_capacity(guard.bucket_mask) - guard.items;
        .           
        .                   mem::forget(guard);
        .               }
        .           
        .               #[inline]
       42 ( 0.00%)      unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
        .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
      120 ( 0.00%)          let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
       72 ( 0.00%)              Some(lco) => lco,
        .                       None => hint::unreachable_unchecked(),
        .                   };
       18 ( 0.00%)          self.alloc.deallocate(
   15,557 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
        .                       layout,
        .                   );
       12 ( 0.00%)      }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[inline]
        .               fn clear_no_drop(&mut self) {
    2,694 ( 0.00%)          if !self.is_empty_singleton() {
        .                       unsafe {
        .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
        .                       }
        .                   }
    3,355 ( 0.00%)          self.items = 0;
    2,694 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
        .               }
        .           
        .               #[inline]
        .               unsafe fn erase(&mut self, index: usize) {
        .                   debug_assert!(is_full(*self.ctrl(index)));
   48,063 ( 0.01%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
        .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
        .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
        .           
        .                   // If we are inside a continuous block of Group::WIDTH full or deleted
        .                   // cells then a probe window may have seen a full block when trying to
        .                   // insert. We therefore need to keep that block non-empty so that
        .                   // lookups will continue searching to the next probe window.
        .                   //
        .                   // Note that in this context `leading_zeros` refers to the bytes at the
        .                   // end of a group, while `trailing_zeros` refers to the bytes at the
        .                   // beginning of a group.
  192,252 ( 0.03%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
        .                       DELETED
        .                   } else {
  238,685 ( 0.03%)              self.growth_left += 1;
        .                       EMPTY
        .                   };
        .                   self.set_ctrl(index, ctrl);
  192,252 ( 0.03%)          self.items -= 1;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
      984 ( 0.00%)      fn clone(&self) -> Self {
      149 ( 0.00%)          if self.table.is_empty_singleton() {
        .                       Self::new_in(self.table.alloc.clone())
        .                   } else {
        .                       unsafe {
        .                           let mut new_table = ManuallyDrop::new(
        .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
        .                               match Self::new_uninitialized(
        .                                   self.table.alloc.clone(),
        .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
        .                               // We need to free the memory allocated for the new table.
        .                               new_table.free_buckets();
        .                           });
        .           
        .                           // Return the newly created table.
        .                           ManuallyDrop::into_inner(new_table)
        .                       }
        .                   }
    1,107 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   if source.table.is_empty_singleton() {
        .                       *self = Self::new_in(self.table.alloc.clone());
        .                   } else {
        .                       unsafe {
        .                           // First, drop all our elements without clearing the control bytes.
        .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
        .                       .table
        .                       .ctrl(0)
        .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
        .                   source
        .                       .data_start()
        .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
        .           
        .                   self.table.items = source.table.items;
       44 ( 0.00%)          self.table.growth_left = source.table.growth_left;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
        .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
        .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
        .               fn default() -> Self {
        .                   Self::new_in(Default::default())
        .               }
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
  275,902 ( 0.04%)      fn drop(&mut self) {
  208,750 ( 0.03%)          if !self.table.is_empty_singleton() {
        .                       unsafe {
        3 ( 0.00%)                  self.drop_elements();
        3 ( 0.00%)                  self.free_buckets();
        .                       }
        .                   }
  297,106 ( 0.04%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
        .               type Item = T;
        .               type IntoIter = RawIntoIter<T, A>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    3,972 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
        .                   unsafe {
        .                       let iter = self.iter();
        .                       self.into_iter_from(iter)
        .                   }
    4,965 ( 0.00%)      }
        .           }
        .           
        .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
        .           /// not track an item count.
        .           pub(crate) struct RawIterRange<T> {
        .               // Mask of full buckets in the current group. Bits are cleared from this
        .               // mask as each element is processed.
        .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1848 ----------------------------------------
        .               end: *const u8,
        .           }
        .           
        .           impl<T> RawIterRange<T> {
        .               /// Returns a `RawIterRange` covering a subset of a table.
        .               ///
        .               /// The control byte address must be aligned to the group size.
        .               #[cfg_attr(feature = "inline-more", inline)]
      396 ( 0.00%)      unsafe fn new(ctrl: *const u8, data: Bucket<T>, len: usize) -> Self {
        .                   debug_assert_ne!(len, 0);
        .                   debug_assert_eq!(ctrl as usize % Group::WIDTH, 0);
       33 ( 0.00%)          let end = ctrl.add(len);
        .           
        .                   // Load the first group and advance ctrl to point to the next group
      198 ( 0.00%)          let current_group = Group::load_aligned(ctrl).match_full();
       33 ( 0.00%)          let next_ctrl = ctrl.add(Group::WIDTH);
        .           
      132 ( 0.00%)          Self {
        .                       current_group,
        .                       data,
        .                       next_ctrl,
        .                       end,
        .                   }
       66 ( 0.00%)      }
        .           
        .               /// Splits a `RawIterRange` into two halves.
        .               ///
        .               /// Returns `None` if the remaining range is smaller than or equal to the
        .               /// group width.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[cfg(feature = "rayon")]
        .               pub(crate) fn split(mut self) -> (Self, Option<RawIterRange<T>>) {
-- line 1879 ----------------------------------------
-- line 1931 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Iterator for RawIterRange<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
      152 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
        .                   unsafe {
        .                       loop {
   87,070 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    9,574 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
   15,374 ( 0.00%)                      return Some(self.data.next_n(index));
        .                           }
        .           
   73,934 ( 0.01%)                  if self.next_ctrl >= self.end {
       33 ( 0.00%)                      return None;
        .                           }
        .           
        .                           // We might read past self.end up to the next group boundary,
        .                           // but this is fine because it only occurs on tables smaller
        .                           // than the group size where the trailing control bytes are all
        .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
        .                           // to the group size (since tables are power-of-two sized).
    1,674 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
    1,046 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    3,447 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
        .                       }
        .                   }
      114 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // We don't have an item count, so just guess based on the range size.
        .                   (
        .                       0,
        .                       Some(unsafe { offset_from(self.end, self.next_ctrl) + Group::WIDTH }),
        .                   )
-- line 1969 ----------------------------------------
-- line 2102 ----------------------------------------
        .                           }
        .                       } else {
        .                           // We must have already iterated past the removed item.
        .                       }
        .                   }
        .               }
        .           
        .               unsafe fn drop_elements(&mut self) {
      938 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
        .                       for item in self {
        .                           item.drop();
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Iterator for RawIter<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
   13,065 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
   54,390 ( 0.01%)          if let Some(b) = self.iter.next() {
  107,841 ( 0.01%)              self.items -= 1;
        5 ( 0.00%)              Some(b)
        .                   } else {
        .                       // We don't check against items == 0 here to allow the
        .                       // compiler to optimize away the item count entirely if the
        .                       // iterator length is never queried.
        .                       debug_assert_eq!(self.items, 0);
       33 ( 0.00%)              None
        .                   }
   26,016 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.items, Some(self.items))
        .               }
        .           }
        .           
        .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
    1,950 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
        .           
        .                       // Free the table
    8,304 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
        .                           self.alloc.deallocate(ptr, layout);
        .                       }
        .                   }
      406 ( 0.00%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
      234 ( 0.00%)      fn next(&mut self) -> Option<T> {
       93 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
      468 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        4 ( 0.00%)          self.iter.size_hint()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
        .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
        .           
        .           /// Iterator which consumes elements without freeing the table storage.
        .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
        .           where
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
      304 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements. Note that this may panic.
        .                       self.iter.drop_elements();
        .           
        .                       // Reset the contents of the table now that all elements have been
        .                       // dropped.
        .                       self.table.clear_no_drop();
        .           
        .                       // Move the now empty table back to its original location.
       38 ( 0.00%)              self.orig_table
        .                           .as_ptr()
        .                           .copy_from_nonoverlapping(&*self.table, 1);
        .                   }
      304 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<T> {
        .                   unsafe {
-- line 2289 ----------------------------------------

3,845,598 ( 0.51%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
    8,210 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
  138,064 ( 0.02%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
      343 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
      840 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
  124,014 ( 0.02%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
    1,563 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
       27 ( 0.00%)          self.position += bytes;
       27 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
      594 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
    3,108 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   39,672 ( 0.01%)      fn read_u32(&mut self) -> u32 {
  173,581 ( 0.02%)          read_leb128!(self, read_u32_leb128)
   79,344 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  562,471 ( 0.07%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   80,353 ( 0.01%)          let value = u16::from_le_bytes(bytes);
  160,714 ( 0.02%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
1,945,350 ( 0.26%)          let value = self.data[self.position];
  380,613 ( 0.05%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
  233,625 ( 0.03%)      fn read_usize(&mut self) -> usize {
  234,033 ( 0.03%)          read_leb128!(self, read_usize_leb128)
  467,250 ( 0.06%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
   16,886 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
   36,683 ( 0.00%)          let len = self.read_usize();
  203,152 ( 0.03%)          let sentinel = self.data[self.position + len];
   51,094 ( 0.01%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
  127,735 ( 0.02%)          self.position += len + 1;
   34,623 ( 0.00%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
      177 ( 0.00%)          let start = self.position;
    1,107 ( 0.00%)          self.position += s.len();
      177 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  566,213 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/map/entry.rs
--------------------------------------------------------------------------------
Ir               

-- line 140 ----------------------------------------
      .               /// let mut map: BTreeMap<&str, String> = BTreeMap::new();
      .               /// let s = "hoho".to_string();
      .               ///
      .               /// map.entry("poneyland").or_insert_with(|| s);
      .               ///
      .               /// assert_eq!(map["poneyland"], "hoho".to_string());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
 50,854 ( 0.01%)      pub fn or_insert_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V {
 22,766 ( 0.00%)          match self {
      .                       Occupied(entry) => entry.into_mut(),
151,166 ( 0.02%)              Vacant(entry) => entry.insert(default()),
      .                   }
 61,052 ( 0.01%)      }
      .           
      .               /// Ensures a value is in the entry by inserting, if empty, the result of the default function.
      .               /// This method allows for generating key-derived values for insertion by providing the default
      .               /// function a reference to the key that was moved during the `.entry(key)` method call.
      .               ///
      .               /// The reference to the moved key is provided so that cloning or copying the key is
      .               /// unnecessary, unlike with `.or_insert_with(|| ... )`.
      .               ///
-- line 161 ----------------------------------------
-- line 245 ----------------------------------------
      .               /// ```
      .               /// use std::collections::BTreeMap;
      .               ///
      .               /// let mut map: BTreeMap<&str, Option<usize>> = BTreeMap::new();
      .               /// map.entry("poneyland").or_default();
      .               ///
      .               /// assert_eq!(map["poneyland"], None);
      .               /// ```
    264 ( 0.00%)      pub fn or_default(self) -> &'a mut V {
    176 ( 0.00%)          match self {
      .                       Occupied(entry) => entry.into_mut(),
     55 ( 0.00%)              Vacant(entry) => entry.insert(Default::default()),
      .                   }
    440 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, K: Ord, V> VacantEntry<'a, K, V> {
      .               /// Gets a reference to the key that would be used when inserting a value
      .               /// through the VacantEntry.
      .               ///
      .               /// # Examples
      .               ///
-- line 266 ----------------------------------------
-- line 306 ----------------------------------------
      .               /// let mut map: BTreeMap<&str, u32> = BTreeMap::new();
      .               ///
      .               /// if let Entry::Vacant(o) = map.entry("poneyland") {
      .               ///     o.insert(37);
      .               /// }
      .               /// assert_eq!(map["poneyland"], 37);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
207,721 ( 0.03%)      pub fn insert(self, value: V) -> &'a mut V {
603,320 ( 0.08%)          let out_ptr = match self.handle.insert_recursing(self.key, value) {
 44,231 ( 0.01%)              (Fit(_), val_ptr) => {
      .                           // SAFETY: We have consumed self.handle and the handle returned.
 35,664 ( 0.00%)                  let map = unsafe { self.dormant_map.awaken() };
166,468 ( 0.02%)                  map.length += 1;
      .                           val_ptr
      .                       }
 10,021 ( 0.00%)              (Split(ins), val_ptr) => {
      .                           drop(ins.left);
      .                           // SAFETY: We have consumed self.handle and the reference returned.
  1,291 ( 0.00%)                  let map = unsafe { self.dormant_map.awaken() };
      .                           let root = map.root.as_mut().unwrap();
  9,189 ( 0.00%)                  root.push_internal_level().push(ins.kv.0, ins.kv.1, ins.right);
  6,558 ( 0.00%)                  map.length += 1;
      .                           val_ptr
      .                       }
      .                   };
      .                   // Now that we have finished growing the tree using borrowed references,
      .                   // dereference the pointer to a part of it, that we picked up along the way.
      .                   unsafe { &mut *out_ptr }
211,382 ( 0.03%)      }
      .           }
      .           
      .           impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> {
      .               /// Gets a reference to the key in the entry.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 343 ----------------------------------------
-- line 368 ----------------------------------------
      .               ///     // We delete the entry from the map.
      .               ///     o.remove_entry();
      .               /// }
      .               ///
      .               /// // If now try to get the value, it will panic:
      .               /// // println!("{}", map["poneyland"]);
      .               /// ```
      .               #[stable(feature = "map_entry_recover_keys2", since = "1.12.0")]
156,983 ( 0.02%)      pub fn remove_entry(self) -> (K, V) {
 31,402 ( 0.00%)          self.remove_kv()
239,095 ( 0.03%)      }
      .           
      .               /// Gets a reference to the value in the entry.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use std::collections::BTreeMap;
      .               /// use std::collections::btree_map::Entry;
-- line 386 ----------------------------------------
-- line 448 ----------------------------------------
      .               /// if let Entry::Occupied(o) = map.entry("poneyland") {
      .               ///     *o.into_mut() += 10;
      .               /// }
      .               /// assert_eq!(map["poneyland"], 22);
      .               /// ```
      .               #[must_use = "`self` will be dropped if the result is not used"]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn into_mut(self) -> &'a mut V {
    428 ( 0.00%)          self.handle.into_val_mut()
      .               }
      .           
      .               /// Sets the value of the entry with the `OccupiedEntry`'s key,
      .               /// and returns the entry's old value.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 464 ----------------------------------------
-- line 497 ----------------------------------------
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn remove(self) -> V {
      .                   self.remove_kv().1
      .               }
      .           
      .               // Body of `remove_entry`, probably separate because the name reflects the returned pair.
      .               pub(super) fn remove_kv(self) -> (K, V) {
 38,869 ( 0.01%)          let mut emptied_internal_root = false;
528,456 ( 0.07%)          let (old_kv, _) = self.handle.remove_kv_tracking(|| emptied_internal_root = true);
      .                   // SAFETY: we consumed the intermediate root borrow, `self.handle`.
      .                   let map = unsafe { self.dormant_map.awaken() };
155,428 ( 0.02%)          map.length -= 1;
 77,714 ( 0.01%)          if emptied_internal_root {
      .                       let root = map.root.as_mut().unwrap();
      .                       root.pop_internal_level();
      .                   }
      .                   old_kv
      .               }
      .           }

 96,393 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/map/entry.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs
--------------------------------------------------------------------------------
Ir                 

-- line 28 ----------------------------------------
        .               /// ```
        .               /// let mut s = [1, 2, 3];
        .               /// let ptr: *mut u32 = s.as_mut_ptr();
        .               /// assert!(!ptr.is_null());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_ptr_is_null", issue = "74939")]
        .               #[inline]
  338,776 ( 0.05%)      pub const fn is_null(self) -> bool {
        .                   // Compare via a cast to a thin pointer, so fat pointers are only
        .                   // considering their "data" part for null-ness.
  338,776 ( 0.05%)          (self as *mut u8).guaranteed_eq(null_mut())
  338,776 ( 0.05%)      }
        .           
        .               /// Casts to a pointer of another type.
        .               #[stable(feature = "ptr_cast", since = "1.38.0")]
        .               #[rustc_const_stable(feature = "const_ptr_cast", since = "1.38.0")]
        .               #[inline(always)]
        .               pub const fn cast<U>(self) -> *mut U {
        .                   self as _
        .               }
-- line 48 ----------------------------------------
-- line 299 ----------------------------------------
        .               #[inline(always)]
        .               pub const unsafe fn offset(self, count: isize) -> *mut T
        .               where
        .                   T: Sized,
        .               {
        .                   // SAFETY: the caller must uphold the safety contract for `offset`.
        .                   // The obtained pointer is valid for writes since the caller must
        .                   // guarantee that it points to the same allocated object as `self`.
4,896,911 ( 0.65%)          unsafe { intrinsics::offset(self, count) as *mut T }
        .               }
        .           
        .               /// Calculates the offset from a pointer using wrapping arithmetic.
        .               /// `count` is in units of T; e.g., a `count` of 3 represents a pointer
        .               /// offset of `3 * size_of::<T>()` bytes.
        .               ///
        .               /// # Safety
        .               ///
-- line 315 ----------------------------------------
-- line 360 ----------------------------------------
        .               #[must_use = "returns a new pointer rather than modifying its argument"]
        .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
        .               #[inline(always)]
        .               pub const fn wrapping_offset(self, count: isize) -> *mut T
        .               where
        .                   T: Sized,
        .               {
        .                   // SAFETY: the `arith_offset` intrinsic has no prerequisites to be called.
      114 ( 0.00%)          unsafe { intrinsics::arith_offset(self, count) as *mut T }
        .               }
        .           
        .               /// Returns `None` if the pointer is null, or else returns a unique reference to
        .               /// the value wrapped in `Some`. If the value may be uninitialized, [`as_uninit_mut`]
        .               /// must be used instead.
        .               ///
        .               /// For the shared counterpart see [`as_ref`].
        .               ///
-- line 376 ----------------------------------------
-- line 492 ----------------------------------------
        .               /// affect the outcome, but just the performance.
        .               /// The consequences of using this method to make runtime and compile-time code behave
        .               /// differently have not been explored. This method should not be used to introduce such
        .               /// differences, and it should also not be stabilized before we have a better understanding
        .               /// of this issue.
        .               #[unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
        .               #[rustc_const_unstable(feature = "const_raw_ptr_comparison", issue = "53020")]
        .               #[inline]
  254,082 ( 0.03%)      pub const fn guaranteed_eq(self, other: *mut T) -> bool
        .               where
        .                   T: Sized,
        .               {
  508,589 ( 0.07%)          intrinsics::ptr_guaranteed_eq(self as *const _, other as *const _)
  338,776 ( 0.05%)      }
        .           
        .               /// Returns whether two pointers are guaranteed to be unequal.
        .               ///
        .               /// At runtime this function behaves like `self != other`.
        .               /// However, in some contexts (e.g., compile-time evaluation),
        .               /// it is not always possible to determine the inequality of two pointers, so this function may
        .               /// spuriously return `false` for pointers that later actually turn out to be unequal.
        .               /// But when it returns `true`, the pointers are guaranteed to be unequal.
-- line 513 ----------------------------------------
-- line 683 ----------------------------------------
        .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
        .               #[inline(always)]
        .               pub const unsafe fn add(self, count: usize) -> Self
        .               where
        .                   T: Sized,
        .               {
        .                   // SAFETY: the caller must uphold the safety contract for `offset`.
        .                   unsafe { self.offset(count as isize) }
       10 ( 0.00%)      }
        .           
        .               /// Calculates the offset from a pointer (convenience for
        .               /// `.offset((count as isize).wrapping_neg())`).
        .               ///
        .               /// `count` is in units of T; e.g., a `count` of 3 represents a pointer
        .               /// offset of `3 * size_of::<T>()` bytes.
        .               ///
        .               /// # Safety
-- line 699 ----------------------------------------
-- line 741 ----------------------------------------
        .               ///     println!("{}", *end.sub(1) as char);
        .               ///     println!("{}", *end.sub(2) as char);
        .               /// }
        .               /// ```
        .               #[stable(feature = "pointer_methods", since = "1.26.0")]
        .               #[must_use = "returns a new pointer rather than modifying its argument"]
        .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
        .               #[inline]
    1,337 ( 0.00%)      pub const unsafe fn sub(self, count: usize) -> Self
        .               where
        .                   T: Sized,
        .               {
        .                   // SAFETY: the caller must uphold the safety contract for `offset`.
        .                   unsafe { self.offset((count as isize).wrapping_neg()) }
      382 ( 0.00%)      }
        .           
        .               /// Calculates the offset from a pointer using wrapping arithmetic.
        .               /// (convenience for `.wrapping_offset(count as isize)`)
        .               ///
        .               /// `count` is in units of T; e.g., a `count` of 3 represents a pointer
        .               /// offset of `3 * size_of::<T>()` bytes.
        .               ///
        .               /// # Safety
-- line 763 ----------------------------------------
-- line 1055 ----------------------------------------
        .               ///
        .               /// See [`ptr::drop_in_place`] for safety concerns and examples.
        .               ///
        .               /// [`ptr::drop_in_place`]: crate::ptr::drop_in_place()
        .               #[stable(feature = "pointer_methods", since = "1.26.0")]
        .               #[inline(always)]
        .               pub unsafe fn drop_in_place(self) {
        .                   // SAFETY: the caller must uphold the safety contract for `drop_in_place`.
      127 ( 0.00%)          unsafe { drop_in_place(self) }
        .               }
        .           
        .               /// Overwrites a memory location with the given value without reading or
        .               /// dropping the old value.
        .               ///
        .               /// See [`ptr::write`] for safety concerns and examples.
        .               ///
        .               /// [`ptr::write`]: crate::ptr::write()
-- line 1071 ----------------------------------------
-- line 1072 ----------------------------------------
        .               #[stable(feature = "pointer_methods", since = "1.26.0")]
        .               #[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
        .               #[inline(always)]
        .               pub const unsafe fn write(self, val: T)
        .               where
        .                   T: Sized,
        .               {
        .                   // SAFETY: the caller must uphold the safety contract for `write`.
    1,471 ( 0.00%)          unsafe { write(self, val) }
       23 ( 0.00%)      }
        .           
        .               /// Invokes memset on the specified pointer, setting `count * size_of::<T>()`
        .               /// bytes of memory starting at `self` to `val`.
        .               ///
        .               /// See [`ptr::write_bytes`] for safety concerns and examples.
        .               ///
        .               /// [`ptr::write_bytes`]: crate::ptr::write_bytes()
        .               #[stable(feature = "pointer_methods", since = "1.26.0")]
        .               #[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
        .               #[inline(always)]
        .               pub const unsafe fn write_bytes(self, val: u8, count: usize)
        .               where
        .                   T: Sized,
        .               {
        .                   // SAFETY: the caller must uphold the safety contract for `write_bytes`.
       28 ( 0.00%)          unsafe { write_bytes(self, val, count) }
        7 ( 0.00%)      }
        .           
        .               /// Performs a volatile write of a memory location with the given value without
        .               /// reading or dropping the old value.
        .               ///
        .               /// Volatile operations are intended to act on I/O memory, and are guaranteed
        .               /// to not be elided or reordered by the compiler across other volatile
        .               /// operations.
        .               ///
-- line 1106 ----------------------------------------
-- line 1416 ----------------------------------------
        .               }
        .           }
        .           
        .           // Equality for pointers
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: ?Sized> PartialEq for *mut T {
        .               #[inline(always)]
        .               fn eq(&self, other: &*mut T) -> bool {
   15,416 ( 0.00%)          *self == *other
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: ?Sized> Eq for *mut T {}
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: ?Sized> Ord for *mut T {
-- line 1432 ----------------------------------------

  233,509 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mut_ptr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs
--------------------------------------------------------------------------------
Ir                 

-- line 26 ----------------------------------------
        .               /// }
        .               ///
        .               /// assert_eq!(letters[&'s'], 2);
        .               /// assert_eq!(letters[&'t'], 3);
        .               /// assert_eq!(letters[&'u'], 1);
        .               /// assert_eq!(letters.get(&'y'), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
1,025,668 ( 0.14%)      pub fn rustc_entry(&mut self, key: K) -> RustcEntry<'_, K, V, A> {
        .                   let hash = make_insert_hash(&self.hash_builder, &key);
   38,641 ( 0.01%)          if let Some(elem) = self.table.find(hash, |q| q.0.eq(&key)) {
  146,131 ( 0.02%)              RustcEntry::Occupied(RustcOccupiedEntry {
   63,808 ( 0.01%)                  key: Some(key),
        .                           elem,
        .                           table: &mut self.table,
        .                       })
        .                   } else {
        .                       // Ideally we would put this in VacantEntry::insert, but Entry is not
        .                       // generic over the BuildHasher and adding a generic parameter would be
        .                       // a breaking change.
        .                       self.reserve(1);
        .           
  220,022 ( 0.03%)              RustcEntry::Vacant(RustcVacantEntry {
        .                           hash,
   49,992 ( 0.01%)                  key,
        .                           table: &mut self.table,
        .                       })
        .                   }
  801,054 ( 0.11%)      }
        .           }
        .           
        .           /// A view into a single entry in a map, which may either be vacant or occupied.
        .           ///
        .           /// This `enum` is constructed from the [`entry`] method on [`HashMap`].
        .           ///
        .           /// [`HashMap`]: struct.HashMap.html
        .           /// [`entry`]: struct.HashMap.html#method.rustc_entry
-- line 62 ----------------------------------------
-- line 405 ----------------------------------------
        .               /// if let RustcEntry::Occupied(o) = map.rustc_entry("poneyland") {
        .               ///     *o.into_mut() += 10;
        .               /// }
        .               ///
        .               /// assert_eq!(map["poneyland"], 22);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn into_mut(self) -> &'a mut V {
    3,535 ( 0.00%)          unsafe { &mut self.elem.as_mut().1 }
        .               }
        .           
        .               /// Sets the value of the entry, and returns the entry's old value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
-- line 421 ----------------------------------------
-- line 568 ----------------------------------------
        .               /// let mut map: HashMap<&str, u32> = HashMap::new();
        .               ///
        .               /// if let RustcEntry::Vacant(o) = map.rustc_entry("poneyland") {
        .               ///     o.insert(37);
        .               /// }
        .               /// assert_eq!(map["poneyland"], 37);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
    4,212 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
        .                   unsafe {
   24,700 ( 0.00%)              let bucket = self.table.insert_no_grow(self.hash, (self.key, value));
    2,318 ( 0.00%)              &mut bucket.as_mut().1
        .                   }
    5,711 ( 0.00%)      }
        .           
        .               /// Sets the value of the entry with the RustcVacantEntry's key,
        .               /// and returns a RustcOccupiedEntry.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
-- line 589 ----------------------------------------

  211,751 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs
--------------------------------------------------------------------------------
Ir                 

-- line 12 ----------------------------------------
        .           use rustc_data_structures::sync::Lrc;
        .           use rustc_macros::HashStable_Generic;
        .           use rustc_span::symbol::{kw, sym};
        .           use rustc_span::symbol::{Ident, Symbol};
        .           use rustc_span::{self, edition::Edition, Span, DUMMY_SP};
        .           use std::borrow::Cow;
        .           use std::{fmt, mem};
        .           
   10,708 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum CommentKind {
        .               Line,
        .               Block,
        .           }
        .           
      279 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Hash, Debug, Copy)]
        .           #[derive(HashStable_Generic)]
        .           pub enum BinOpToken {
        .               Plus,
        .               Minus,
        .               Star,
        .               Slash,
        .               Percent,
        .               Caret,
        .               And,
        .               Or,
        .               Shl,
        .               Shr,
        .           }
        .           
        .           /// A delimiter token.
    9,715 ( 0.00%)  #[derive(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Debug, Copy)]
        .           #[derive(HashStable_Generic)]
        .           pub enum DelimToken {
        .               /// A round parenthesis (i.e., `(` or `)`).
        .               Paren,
        .               /// A square bracket (i.e., `[` or `]`).
        .               Bracket,
        .               /// A curly brace (i.e., `{` or `}`).
        .               Brace,
        .               /// An empty delimiter.
        .               NoDelim,
        .           }
        .           
    2,415 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum LitKind {
        .               Bool, // AST only, must never appear in a `Token`
        .               Byte,
        .               Char,
        .               Integer,
        .               Float,
        .               Str,
        .               StrRaw(u16), // raw string delimited by `n` hash symbols
        .               ByteStr,
        .               ByteStrRaw(u16), // raw byte string delimited by `n` hash symbols
        .               Err,
        .           }
        .           
        .           /// A literal token.
   15,143 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub struct Lit {
        2 ( 0.00%)      pub kind: LitKind,
        2 ( 0.00%)      pub symbol: Symbol,
        2 ( 0.00%)      pub suffix: Option<Symbol>,
        .           }
        .           
        .           impl fmt::Display for Lit {
      665 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    1,197 ( 0.00%)          let Lit { kind, symbol, suffix } = *self;
        .                   match kind {
        .                       Byte => write!(f, "b'{}'", symbol)?,
        .                       Char => write!(f, "'{}'", symbol)?,
      321 ( 0.00%)              Str => write!(f, "\"{}\"", symbol)?,
        .                       StrRaw(n) => write!(
        .                           f,
        .                           "r{delim}\"{string}\"{delim}",
        .                           delim = "#".repeat(n as usize),
        .                           string = symbol
        .                       )?,
        .                       ByteStr => write!(f, "b\"{}\"", symbol)?,
        .                       ByteStrRaw(n) => write!(
        .                           f,
        .                           "br{delim}\"{string}\"{delim}",
        .                           delim = "#".repeat(n as usize),
        .                           string = symbol
        .                       )?,
       78 ( 0.00%)              Integer | Float | Bool | Err => write!(f, "{}", symbol)?,
        .                   }
        .           
      266 ( 0.00%)          if let Some(suffix) = suffix {
        .                       write!(f, "{}", suffix)?;
        .                   }
        .           
        .                   Ok(())
      665 ( 0.00%)      }
        .           }
        .           
        .           impl LitKind {
        .               /// An English article for the literal token kind.
        .               pub fn article(self) -> &'static str {
        .                   match self {
        .                       Integer | Err => "an",
        .                       _ => "a",
-- line 113 ----------------------------------------
-- line 123 ----------------------------------------
        .                       Float => "float",
        .                       Str | StrRaw(..) => "string",
        .                       ByteStr | ByteStrRaw(..) => "byte string",
        .                       Err => "error",
        .                   }
        .               }
        .           
        .               crate fn may_have_suffix(self) -> bool {
      110 ( 0.00%)          matches!(self, Integer | Float | Err)
        .               }
        .           }
        .           
        .           impl Lit {
        .               pub fn new(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> Lit {
        .                   Lit { kind, symbol, suffix }
    1,693 ( 0.00%)      }
        .           }
        .           
       32 ( 0.00%)  pub fn ident_can_begin_expr(name: Symbol, span: Span, is_raw: bool) -> bool {
       56 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
        .           
       16 ( 0.00%)      !ident_token.is_reserved_ident()
        .                   || ident_token.is_path_segment_keyword()
        .                   || [
        .                       kw::Async,
        .                       kw::Do,
        .                       kw::Box,
        .                       kw::Break,
        .                       kw::Const,
        .                       kw::Continue,
-- line 152 ----------------------------------------
-- line 161 ----------------------------------------
        .                       kw::True,
        .                       kw::Try,
        .                       kw::Unsafe,
        .                       kw::While,
        .                       kw::Yield,
        .                       kw::Static,
        .                   ]
        .                   .contains(&name)
       40 ( 0.00%)  }
        .           
        .           fn ident_can_begin_type(name: Symbol, span: Span, is_raw: bool) -> bool {
      564 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
        .           
      200 ( 0.00%)      !ident_token.is_reserved_ident()
        .                   || ident_token.is_path_segment_keyword()
        .                   || [kw::Underscore, kw::For, kw::Impl, kw::Fn, kw::Unsafe, kw::Extern, kw::Typeof, kw::Dyn]
        .                       .contains(&name)
        .           }
        .           
1,992,846 ( 0.26%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum TokenKind {
        .               /* Expression-operator symbols. */
        .               Eq,
        .               Lt,
        .               Le,
        .               EqEq,
        .               Ne,
        .               Ge,
        .               Gt,
        .               AndAnd,
        .               OrOr,
        .               Not,
        .               Tilde,
   15,162 ( 0.00%)      BinOp(BinOpToken),
        .               BinOpEq(BinOpToken),
        .           
        .               /* Structural symbols */
        .               At,
        .               Dot,
        .               DotDot,
        .               DotDotDot,
        .               DotDotEq,
-- line 202 ----------------------------------------
-- line 208 ----------------------------------------
        .               LArrow,
        .               FatArrow,
        .               Pound,
        .               Dollar,
        .               Question,
        .               /// Used by proc macros for representing lifetimes, not generated by lexer right now.
        .               SingleQuote,
        .               /// An opening delimiter (e.g., `{`).
   26,490 ( 0.00%)      OpenDelim(DelimToken),
        .               /// A closing delimiter (e.g., `}`).
    9,291 ( 0.00%)      CloseDelim(DelimToken),
        .           
        .               /* Literals */
    9,575 ( 0.00%)      Literal(Lit),
        .           
        .               /// Identifier token.
        .               /// Do not forget about `NtIdent` when you want to match on identifiers.
        .               /// It's recommended to use `Token::(ident,uninterpolate,uninterpolated_span)` to
        .               /// treat regular and interpolated identifiers in the same way.
   24,116 ( 0.00%)      Ident(Symbol, /* is_raw */ bool),
        .               /// Lifetime identifier token.
        .               /// Do not forget about `NtLifetime` when you want to match on lifetime identifiers.
        .               /// It's recommended to use `Token::(lifetime,uninterpolate,uninterpolated_span)` to
        .               /// treat regular and interpolated lifetime identifiers in the same way.
      198 ( 0.00%)      Lifetime(Symbol),
        .           
      418 ( 0.00%)      Interpolated(Lrc<Nonterminal>),
        .           
        .               /// A doc comment token.
        .               /// `Symbol` is the doc comment's data excluding its "quotes" (`///`, `/**`, etc)
        .               /// similarly to symbols in string literal tokens.
      708 ( 0.00%)      DocComment(CommentKind, ast::AttrStyle, Symbol),
        .           
        .               Eof,
        .           }
        .           
        .           // `TokenKind` is used a lot. Make sure it doesn't unintentionally get bigger.
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           rustc_data_structures::static_assert_size!(TokenKind, 16);
        .           
  183,305 ( 0.02%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub struct Token {
   10,446 ( 0.00%)      pub kind: TokenKind,
        .               pub span: Span,
        .           }
        .           
        .           impl TokenKind {
        .               pub fn lit(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> TokenKind {
        .                   Literal(Lit::new(kind, symbol, suffix))
      165 ( 0.00%)      }
        .           
        .               // An approximation to proc-macro-style single-character operators used by rustc parser.
        .               // If the operator token can be broken into two tokens, the first of which is single-character,
        .               // then this function performs that operation, otherwise it returns `None`.
    1,611 ( 0.00%)      pub fn break_two_token_op(&self) -> Option<(TokenKind, TokenKind)> {
    6,545 ( 0.00%)          Some(match *self {
        .                       Le => (Lt, Eq),
        .                       EqEq => (Eq, Eq),
        .                       Ne => (Not, Eq),
        .                       Ge => (Gt, Eq),
        .                       AndAnd => (BinOp(And), BinOp(And)),
        .                       OrOr => (BinOp(Or), BinOp(Or)),
        .                       BinOp(Shl) => (Lt, Lt),
        .                       BinOp(Shr) => (Gt, Gt),
-- line 271 ----------------------------------------
-- line 280 ----------------------------------------
        .                       BinOpEq(Shl) => (Lt, Le),
        .                       BinOpEq(Shr) => (Gt, Ge),
        .                       DotDot => (Dot, Dot),
        .                       DotDotDot => (Dot, DotDot),
        .                       ModSep => (Colon, Colon),
        .                       RArrow => (BinOp(Minus), Gt),
        .                       LArrow => (Lt, BinOp(Minus)),
        .                       FatArrow => (Eq, Gt),
    1,597 ( 0.00%)              _ => return None,
        .                   })
    1,611 ( 0.00%)      }
        .           
        .               /// Returns tokens that are likely to be typed accidentally instead of the current token.
        .               /// Enables better error recovery when the wrong token is found.
        .               pub fn similar_tokens(&self) -> Option<Vec<TokenKind>> {
        .                   match *self {
        .                       Comma => Some(vec![Dot, Lt, Semi]),
        .                       Semi => Some(vec![Colon, Comma]),
        .                       FatArrow => Some(vec![Eq, RArrow]),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               pub fn should_end_const_arg(&self) -> bool {
      452 ( 0.00%)          matches!(self, Gt | Ge | BinOp(Shr) | BinOpEq(Shr))
      101 ( 0.00%)      }
        .           }
        .           
        .           impl Token {
    6,622 ( 0.00%)      pub fn new(kind: TokenKind, span: Span) -> Self {
   24,663 ( 0.00%)          Token { kind, span }
    6,622 ( 0.00%)      }
        .           
        .               /// Some token that will be thrown away later.
    1,463 ( 0.00%)      pub fn dummy() -> Self {
        .                   Token::new(TokenKind::Question, DUMMY_SP)
    1,463 ( 0.00%)      }
        .           
        .               /// Recovers a `Token` from an `Ident`. This creates a raw identifier if necessary.
        .               pub fn from_ast_ident(ident: Ident) -> Self {
       24 ( 0.00%)          Token::new(Ident(ident.name, ident.is_raw_guess()), ident.span)
        .               }
        .           
        .               /// Return this token by value and leave a dummy token in its place.
    2,999 ( 0.00%)      pub fn take(&mut self) -> Self {
        .                   mem::replace(self, Token::dummy())
    2,999 ( 0.00%)      }
        .           
        .               /// For interpolated tokens, returns a span of the fragment to which the interpolated
        .               /// token refers. For all other tokens this is just a regular span.
        .               /// It is particularly important to use this for identifiers and lifetimes
        .               /// for which spans affect name resolution and edition checks.
        .               /// Note that keywords are also identifiers, so they should use this
        .               /// if they keep spans or perform edition checks.
        .               pub fn uninterpolated_span(&self) -> Span {
      778 ( 0.00%)          match &self.kind {
        .                       Interpolated(nt) => nt.span(),
      389 ( 0.00%)              _ => self.span,
        .                   }
      389 ( 0.00%)      }
        .           
        .               pub fn is_op(&self) -> bool {
    8,997 ( 0.00%)          !matches!(
    2,999 ( 0.00%)              self.kind,
        .                       OpenDelim(..)
        .                           | CloseDelim(..)
        .                           | Literal(..)
        .                           | DocComment(..)
        .                           | Ident(..)
        .                           | Lifetime(..)
        .                           | Interpolated(..)
        .                           | Eof
        .                   )
    2,999 ( 0.00%)      }
        .           
        .               pub fn is_like_plus(&self) -> bool {
    7,673 ( 0.00%)          matches!(self.kind, BinOp(Plus) | BinOpEq(Plus))
    1,529 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of an expression.
       38 ( 0.00%)      pub fn can_begin_expr(&self) -> bool {
      190 ( 0.00%)          match self.uninterpolate().kind {
       72 ( 0.00%)              Ident(name, is_raw)              =>
       24 ( 0.00%)                  ident_can_begin_expr(name, self.span, is_raw), // value name or keyword
        .                       OpenDelim(..)                     | // tuple, array or block
        .                       Literal(..)                       | // literal
        .                       Not                               | // operator not
        .                       BinOp(Minus)                      | // unary minus
        .                       BinOp(Star)                       | // dereference
        .                       BinOp(Or) | OrOr                  | // closure
        .                       BinOp(And)                        | // reference
        .                       AndAnd                            | // double reference
        .                       // DotDotDot is no longer supported, but we need some way to display the error
        .                       DotDot | DotDotDot | DotDotEq     | // range notation
        .                       Lt | BinOp(Shl)                   | // associated path
        .                       ModSep                            | // global path
        .                       Lifetime(..)                      | // labeled loop
        .                       Pound                             => true, // expression attributes
       16 ( 0.00%)              Interpolated(ref nt) => matches!(**nt, NtLiteral(..) |
        .                           NtExpr(..)    |
        .                           NtBlock(..)   |
        .                           NtPath(..)),
        .                       _ => false,
        .                   }
       76 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of a type.
      560 ( 0.00%)      pub fn can_begin_type(&self) -> bool {
      828 ( 0.00%)          match self.uninterpolate().kind {
      846 ( 0.00%)              Ident(name, is_raw)        =>
       94 ( 0.00%)                  ident_can_begin_type(name, self.span, is_raw), // type name or keyword
        .                       OpenDelim(Paren)            | // tuple
        .                       OpenDelim(Bracket)          | // array
        .                       Not                         | // never
        .                       BinOp(Star)                 | // raw pointer
        .                       BinOp(And)                  | // reference
        .                       AndAnd                      | // double reference
        .                       Question                    | // maybe bound in trait object
        .                       Lifetime(..)                | // lifetime bound in trait object
        .                       Lt | BinOp(Shl)             | // associated path
        .                       ModSep                      => true, // global path
      165 ( 0.00%)              Interpolated(ref nt) => matches!(**nt, NtTy(..) | NtPath(..)),
        .                       _ => false,
        .                   }
      840 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of a const param.
        .               pub fn can_begin_const_arg(&self) -> bool {
      560 ( 0.00%)          match self.kind {
        .                       OpenDelim(Brace) => true,
       72 ( 0.00%)              Interpolated(ref nt) => matches!(**nt, NtExpr(..) | NtBlock(..) | NtLiteral(..)),
      103 ( 0.00%)              _ => self.can_begin_literal_maybe_minus(),
        .                   }
        9 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of a generic bound.
        .               pub fn can_begin_bound(&self) -> bool {
        .                   self.is_path_start()
        .                       || self.is_lifetime()
        .                       || self.is_keyword(kw::For)
        .                       || self == &Question
        .                       || self == &OpenDelim(Paren)
-- line 421 ----------------------------------------
-- line 427 ----------------------------------------
        .               }
        .           
        .               /// Returns `true` if the token is any literal, a minus (which can prefix a literal,
        .               /// for example a '-42', or one of the boolean idents).
        .               ///
        .               /// In other words, would this token be a valid start of `parse_literal_maybe_minus`?
        .               ///
        .               /// Keep this in sync with and `Lit::from_token`, excluding unary negation.
      151 ( 0.00%)      pub fn can_begin_literal_maybe_minus(&self) -> bool {
    1,216 ( 0.00%)          match self.uninterpolate().kind {
        .                       Literal(..) | BinOp(Minus) => true,
      356 ( 0.00%)              Ident(name, false) if name.is_bool_lit() => true,
        .                       Interpolated(ref nt) => match &**nt {
        .                           NtLiteral(_) => true,
        .                           NtExpr(e) => match &e.kind {
        .                               ast::ExprKind::Lit(_) => true,
        .                               ast::ExprKind::Unary(ast::UnOp::Neg, e) => {
        .                                   matches!(&e.kind, ast::ExprKind::Lit(_))
        .                               }
        .                               _ => false,
        .                           },
        .                           _ => false,
        .                       },
        .                       _ => false,
        .                   }
      302 ( 0.00%)      }
        .           
        .               // A convenience function for matching on identifiers during parsing.
        .               // Turns interpolated identifier (`$i: ident`) or lifetime (`$l: lifetime`) token
        .               // into the regular identifier or lifetime token it refers to,
        .               // otherwise returns the original token.
    2,250 ( 0.00%)      pub fn uninterpolate(&self) -> Cow<'_, Token> {
  173,798 ( 0.02%)          match &self.kind {
    2,124 ( 0.00%)              Interpolated(nt) => match **nt {
       38 ( 0.00%)                  NtIdent(ident, is_raw) => {
       95 ( 0.00%)                      Cow::Owned(Token::new(Ident(ident.name, is_raw), ident.span))
        .                           }
        .                           NtLifetime(ident) => Cow::Owned(Token::new(Lifetime(ident.name), ident.span)),
        .                           _ => Cow::Borrowed(self),
        .                       },
        .                       _ => Cow::Borrowed(self),
        .                   }
    2,250 ( 0.00%)      }
        .           
        .               /// Returns an identifier if this token is an identifier.
   14,347 ( 0.00%)      pub fn ident(&self) -> Option<(Ident, /* is_raw */ bool)> {
        .                   let token = self.uninterpolate();
  119,280 ( 0.02%)          match token.kind {
  513,557 ( 0.07%)              Ident(name, is_raw) => Some((Ident::new(name, token.span), is_raw)),
        .                       _ => None,
        .                   }
  114,227 ( 0.02%)      }
        .           
        .               /// Returns a lifetime identifier if this token is a lifetime.
      455 ( 0.00%)      pub fn lifetime(&self) -> Option<Ident> {
        .                   let token = self.uninterpolate();
    2,178 ( 0.00%)          match token.kind {
      518 ( 0.00%)              Lifetime(name) => Some(Ident::new(name, token.span)),
        .                       _ => None,
        .                   }
    3,185 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is an identifier.
        .               pub fn is_ident(&self) -> bool {
        .                   self.ident().is_some()
    1,287 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is a lifetime.
      634 ( 0.00%)      pub fn is_lifetime(&self) -> bool {
        .                   self.lifetime().is_some()
    1,268 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is an identifier whose name is the given
        .               /// string slice.
      606 ( 0.00%)      pub fn is_ident_named(&self, name: Symbol) -> bool {
        .                   self.ident().map_or(false, |(ident, _)| ident.name == name)
    1,212 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is an interpolated path.
        .               fn is_path(&self) -> bool {
    8,612 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
        8 ( 0.00%)              if let NtPath(..) = **nt {
        .                           return true;
        .                       }
        .                   }
        .                   false
        .               }
        .           
        .               /// Would `maybe_whole_expr` in `parser.rs` return `Ok(..)`?
        .               /// That is, is this a pre-parsed expression dropped into the token stream
-- line 516 ----------------------------------------
-- line 522 ----------------------------------------
        .                       }
        .                   }
        .           
        .                   false
        .               }
        .           
        .               // Is the token an interpolated block (`$b:block`)?
        .               pub fn is_whole_block(&self) -> bool {
      290 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
        .                       if let NtBlock(..) = **nt {
        .                           return true;
        .                       }
        .                   }
        .                   false
      145 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is either the `mut` or `const` keyword.
        .               pub fn is_mutability(&self) -> bool {
        .                   self.is_keyword(kw::Mut) || self.is_keyword(kw::Const)
        .               }
        .           
      810 ( 0.00%)      pub fn is_qpath_start(&self) -> bool {
    5,462 ( 0.00%)          self == &Lt || self == &BinOp(Shl)
      234 ( 0.00%)      }
        .           
    9,332 ( 0.00%)      pub fn is_path_start(&self) -> bool {
   13,022 ( 0.00%)          self == &ModSep
        .                       || self.is_qpath_start()
        .                       || self.is_path()
        .                       || self.is_path_segment_keyword()
    1,928 ( 0.00%)              || self.is_ident() && !self.is_reserved_ident()
   11,665 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is a given keyword, `kw`.
   36,371 ( 0.00%)      pub fn is_keyword(&self, kw: Symbol) -> bool {
        .                   self.is_non_raw_ident_where(|id| id.name == kw)
   72,742 ( 0.01%)      }
        .           
      343 ( 0.00%)      pub fn is_path_segment_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_path_segment_keyword)
        .               }
        .           
        .               // Returns true for reserved identifiers used internally for elided lifetimes,
        .               // unnamed method parameters, crate root module, error recovery etc.
      450 ( 0.00%)      pub fn is_special_ident(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_special)
        .               }
        .           
        .               /// Returns `true` if the token is a keyword used in the language.
      453 ( 0.00%)      pub fn is_used_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_used_keyword)
        .               }
        .           
        .               /// Returns `true` if the token is a keyword reserved for possible future use.
      450 ( 0.00%)      pub fn is_unused_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_unused_keyword)
        .               }
        .           
        .               /// Returns `true` if the token is either a special identifier or a keyword.
        .               pub fn is_reserved_ident(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_reserved)
        .               }
        .           
        .               /// Returns `true` if the token is the identifier `true` or `false`.
      343 ( 0.00%)      pub fn is_bool_lit(&self) -> bool {
      686 ( 0.00%)          self.is_non_raw_ident_where(|id| id.name.is_bool_lit())
        .               }
        .           
        .               pub fn is_numeric_lit(&self) -> bool {
        .                   matches!(
        .                       self.kind,
        .                       Literal(Lit { kind: LitKind::Integer, .. }) | Literal(Lit { kind: LitKind::Float, .. })
        .                   )
        .               }
        .           
        .               /// Returns `true` if the token is a non-raw identifier for which `pred` holds.
      296 ( 0.00%)      pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(Ident) -> bool) -> bool {
  251,674 ( 0.03%)          match self.ident() {
    1,823 ( 0.00%)              Some((id, false)) => pred(id),
        .                       _ => false,
        .                   }
      370 ( 0.00%)      }
        .           
   16,970 ( 0.00%)      pub fn glue(&self, joint: &Token) -> Option<Token> {
    8,485 ( 0.00%)          let kind = match self.kind {
      178 ( 0.00%)              Eq => match joint.kind {
        .                           Eq => EqEq,
        .                           Gt => FatArrow,
        .                           _ => return None,
        .                       },
       10 ( 0.00%)              Lt => match joint.kind {
        .                           Eq => Le,
        .                           Lt => BinOp(Shl),
        .                           Le => BinOpEq(Shl),
        .                           BinOp(Minus) => LArrow,
        .                           _ => return None,
        .                       },
      119 ( 0.00%)              Gt => match joint.kind {
        .                           Eq => Ge,
        .                           Gt => BinOp(Shr),
        .                           Ge => BinOpEq(Shr),
        .                           _ => return None,
        .                       },
       16 ( 0.00%)              Not => match joint.kind {
        .                           Eq => Ne,
        .                           _ => return None,
        .                       },
    1,107 ( 0.00%)              BinOp(op) => match joint.kind {
        .                           Eq => BinOpEq(op),
        1 ( 0.00%)                  BinOp(And) if op == And => AndAnd,
        2 ( 0.00%)                  BinOp(Or) if op == Or => OrOr,
      164 ( 0.00%)                  Gt if op == Minus => RArrow,
        .                           _ => return None,
        .                       },
        3 ( 0.00%)              Dot => match joint.kind {
        .                           Dot => DotDot,
        .                           DotDot => DotDotDot,
        .                           _ => return None,
        .                       },
        .                       DotDot => match joint.kind {
        .                           Dot => DotDotDot,
        .                           Eq => DotDotEq,
        .                           _ => return None,
        .                       },
    1,666 ( 0.00%)              Colon => match joint.kind {
        .                           Colon => ModSep,
        .                           _ => return None,
        .                       },
      108 ( 0.00%)              SingleQuote => match joint.kind {
      243 ( 0.00%)                  Ident(name, false) => Lifetime(Symbol::intern(&format!("'{}", name))),
        .                           _ => return None,
        .                       },
        .           
        .                       Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot
        .                       | DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar
        .                       | Question | OpenDelim(..) | CloseDelim(..) | Literal(..) | Ident(..)
        .                       | Lifetime(..) | Interpolated(..) | DocComment(..) | Eof => return None,
        .                   };
        .           
   14,066 ( 0.00%)          Some(Token::new(kind, self.span.to(joint.span)))
   15,273 ( 0.00%)      }
        .           }
        .           
        .           impl PartialEq<TokenKind> for Token {
        .               fn eq(&self, rhs: &TokenKind) -> bool {
   91,679 ( 0.01%)          self.kind == *rhs
        .               }
        .           }
        .           
        .           #[derive(Clone, Encodable, Decodable)]
        .           /// For interpolation during macro expansion.
        .           pub enum Nonterminal {
        .               NtItem(P<ast::Item>),
        .               NtBlock(P<ast::Block>),
-- line 675 ----------------------------------------
-- line 711 ----------------------------------------
        .               Path,
        .               Vis,
        .               TT,
        .           }
        .           
        .           impl NonterminalKind {
        .               /// The `edition` closure is used to get the edition for the given symbol. Doing
        .               /// `span.edition()` is expensive, so we do it lazily.
      232 ( 0.00%)      pub fn from_symbol(
        .                   symbol: Symbol,
        .                   edition: impl FnOnce() -> Edition,
        .               ) -> Option<NonterminalKind> {
      524 ( 0.00%)          Some(match symbol {
        .                       sym::item => NonterminalKind::Item,
        .                       sym::block => NonterminalKind::Block,
        .                       sym::stmt => NonterminalKind::Stmt,
        .                       sym::pat => match edition() {
        .                           Edition::Edition2015 | Edition::Edition2018 => {
        .                               NonterminalKind::PatParam { inferred: true }
        .                           }
        .                           Edition::Edition2021 => NonterminalKind::PatWithOr,
-- line 731 ----------------------------------------
-- line 737 ----------------------------------------
        .                       sym::lifetime => NonterminalKind::Lifetime,
        .                       sym::literal => NonterminalKind::Literal,
        .                       sym::meta => NonterminalKind::Meta,
        .                       sym::path => NonterminalKind::Path,
        .                       sym::vis => NonterminalKind::Vis,
        .                       sym::tt => NonterminalKind::TT,
        .                       _ => return None,
        .                   })
      232 ( 0.00%)      }
        .               fn symbol(self) -> Symbol {
        .                   match self {
        .                       NonterminalKind::Item => sym::item,
        .                       NonterminalKind::Block => sym::block,
        .                       NonterminalKind::Stmt => sym::stmt,
        .                       NonterminalKind::PatParam { inferred: false } => sym::pat_param,
        .                       NonterminalKind::PatParam { inferred: true } | NonterminalKind::PatWithOr => sym::pat,
        .                       NonterminalKind::Expr => sym::expr,
-- line 753 ----------------------------------------

  648,037 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs
--------------------------------------------------------------------------------
Ir               

-- line 333 ----------------------------------------
      .           #[unstable(feature = "dispatch_from_dyn", issue = "none")]
      .           impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Rc<U>> for Rc<T> {}
      .           
      .           impl<T: ?Sized> Rc<T> {
      .               #[inline(always)]
      .               fn inner(&self) -> &RcBox<T> {
      .                   // This unsafety is ok because while this Rc is alive we're guaranteed
      .                   // that the inner pointer is valid.
 27,856 ( 0.00%)          unsafe { self.ptr.as_ref() }
      .               }
      .           
  5,324 ( 0.00%)      unsafe fn from_inner(ptr: NonNull<RcBox<T>>) -> Self {
  2,662 ( 0.00%)          Self { ptr, phantom: PhantomData }
  7,986 ( 0.00%)      }
      .           
      .               unsafe fn from_ptr(ptr: *mut RcBox<T>) -> Self {
      .                   unsafe { Self::from_inner(NonNull::new_unchecked(ptr)) }
      .               }
      .           }
      .           
      .           impl<T> Rc<T> {
      .               /// Constructs a new `Rc<T>`.
-- line 354 ----------------------------------------
-- line 357 ----------------------------------------
      .               ///
      .               /// ```
      .               /// use std::rc::Rc;
      .               ///
      .               /// let five = Rc::new(5);
      .               /// ```
      .               #[cfg(not(no_global_oom_handling))]
      .               #[stable(feature = "rust1", since = "1.0.0")]
 10,180 ( 0.00%)      pub fn new(value: T) -> Rc<T> {
      .                   // There is an implicit weak pointer owned by all the strong
      .                   // pointers, which ensures that the weak destructor never frees
      .                   // the allocation while the strong destructor is running, even
      .                   // if the weak pointer is stored inside the strong one.
      .                   unsafe {
  5,040 ( 0.00%)              Self::from_inner(
342,156 ( 0.05%)                  Box::leak(box RcBox { strong: Cell::new(1), weak: Cell::new(1), value }).into(),
      .                       )
      .                   }
  6,400 ( 0.00%)      }
      .           
      .               /// Constructs a new `Rc<T>` using a closure `data_fn` that has access to a
      .               /// weak reference to the constructing `Rc<T>`.
      .               ///
      .               /// Generally, a structure circularly referencing itself, either directly or
      .               /// indirectly, should not hold a strong reference to prevent a memory leak.
      .               /// In `data_fn`, initialization of `T` can make use of the weak reference
      .               /// by cloning and storing it inside `T` for use at a later time.
-- line 383 ----------------------------------------
-- line 474 ----------------------------------------
      .               ///
      .               /// let five = unsafe { five.assume_init() };
      .               ///
      .               /// assert_eq!(*five, 5)
      .               /// ```
      .               #[cfg(not(no_global_oom_handling))]
      .               #[unstable(feature = "new_uninit", issue = "63291")]
      .               #[must_use]
    298 ( 0.00%)      pub fn new_uninit() -> Rc<mem::MaybeUninit<T>> {
      .                   unsafe {
      .                       Rc::from_ptr(Rc::allocate_for_layout(
      .                           Layout::new::<T>(),
      .                           |layout| Global.allocate(layout),
      .                           |mem| mem as *mut RcBox<mem::MaybeUninit<T>>,
      .                       ))
      .                   }
    596 ( 0.00%)      }
      .           
      .               /// Constructs a new `Rc` with uninitialized contents, with the memory
      .               /// being filled with `0` bytes.
      .               ///
      .               /// See [`MaybeUninit::zeroed`][zeroed] for examples of correct and
      .               /// incorrect usage of this method.
      .               ///
      .               /// # Examples
-- line 498 ----------------------------------------
-- line 637 ----------------------------------------
      .               ///
      .               /// let x = Rc::new(4);
      .               /// let _y = Rc::clone(&x);
      .               /// assert_eq!(*Rc::try_unwrap(x).unwrap_err(), 4);
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rc_unique", since = "1.4.0")]
      .               pub fn try_unwrap(this: Self) -> Result<T, Self> {
      2 ( 0.00%)          if Rc::strong_count(&this) == 1 {
      .                       unsafe {
      .                           let val = ptr::read(&*this); // copy the contained object
      .           
      .                           // Indicate to Weaks that they can't be promoted by decrementing
      .                           // the strong count, and then remove the implicit "strong weak"
      .                           // pointer while also handling drop logic by just crafting a
      .                           // fake Weak.
      .                           this.inner().dec_strong();
-- line 653 ----------------------------------------
-- line 931 ----------------------------------------
      .               /// let five = Rc::new(5);
      .               /// let _weak_five = Rc::downgrade(&five);
      .               ///
      .               /// assert_eq!(1, Rc::weak_count(&five));
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rc_counts", since = "1.15.0")]
      .               pub fn weak_count(this: &Self) -> usize {
 14,970 ( 0.00%)          this.inner().weak() - 1
      .               }
      .           
      .               /// Gets the number of strong (`Rc`) pointers to this allocation.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use std::rc::Rc;
-- line 947 ----------------------------------------
-- line 1023 ----------------------------------------
      .               pub unsafe fn decrement_strong_count(ptr: *const T) {
      .                   unsafe { mem::drop(Rc::from_raw(ptr)) };
      .               }
      .           
      .               /// Returns `true` if there are no other `Rc` or [`Weak`] pointers to
      .               /// this allocation.
      .               #[inline]
      .               fn is_unique(this: &Self) -> bool {
    267 ( 0.00%)          Rc::weak_count(this) == 0 && Rc::strong_count(this) == 1
      .               }
      .           
      .               /// Returns a mutable reference into the given `Rc`, if there are
      .               /// no other `Rc` or [`Weak`] pointers to the same allocation.
      .               ///
      .               /// Returns [`None`] otherwise, because it is not safe to
      .               /// mutate a shared value.
      .               ///
-- line 1039 ----------------------------------------
-- line 1053 ----------------------------------------
      .               /// assert_eq!(*x, 4);
      .               ///
      .               /// let _y = Rc::clone(&x);
      .               /// assert!(Rc::get_mut(&mut x).is_none());
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rc_unique", since = "1.4.0")]
      .               pub fn get_mut(this: &mut Self) -> Option<&mut T> {
     89 ( 0.00%)          if Rc::is_unique(this) { unsafe { Some(Rc::get_mut_unchecked(this)) } } else { None }
      .               }
      .           
      .               /// Returns a mutable reference into the given `Rc`,
      .               /// without any check.
      .               ///
      .               /// See also [`get_mut`], which is safe and does appropriate checks.
      .               ///
      .               /// [`get_mut`]: Rc::get_mut
-- line 1069 ----------------------------------------
-- line 1085 ----------------------------------------
      .               /// let mut x = Rc::new(String::new());
      .               /// unsafe {
      .               ///     Rc::get_mut_unchecked(&mut x).push_str("foo")
      .               /// }
      .               /// assert_eq!(*x, "foo");
      .               /// ```
      .               #[inline]
      .               #[unstable(feature = "get_mut_unchecked", issue = "63292")]
  2,520 ( 0.00%)      pub unsafe fn get_mut_unchecked(this: &mut Self) -> &mut T {
      .                   // We are careful to *not* create a reference covering the "count" fields, as
      .                   // this would conflict with accesses to the reference counts (e.g. by `Weak`).
 22,885 ( 0.00%)          unsafe { &mut (*this.ptr.as_ptr()).value }
  2,520 ( 0.00%)      }
      .           
      .               #[inline]
      .               #[stable(feature = "ptr_eq", since = "1.17.0")]
      .               /// Returns `true` if the two `Rc`s point to the same allocation
      .               /// (in a vein similar to [`ptr::eq`]).
      .               ///
      .               /// # Examples
      .               ///
-- line 1105 ----------------------------------------
-- line 1108 ----------------------------------------
      .               ///
      .               /// let five = Rc::new(5);
      .               /// let same_five = Rc::clone(&five);
      .               /// let other_five = Rc::new(5);
      .               ///
      .               /// assert!(Rc::ptr_eq(&five, &same_five));
      .               /// assert!(!Rc::ptr_eq(&five, &other_five));
      .               /// ```
     16 ( 0.00%)      pub fn ptr_eq(this: &Self, other: &Self) -> bool {
    704 ( 0.00%)          this.ptr.as_ptr() == other.ptr.as_ptr()
     16 ( 0.00%)      }
      .           }
      .           
      .           impl<T: Clone> Rc<T> {
      .               /// Makes a mutable reference into the given `Rc`.
      .               ///
      .               /// If there are other `Rc` pointers to the same allocation, then `make_mut` will
      .               /// [`clone`] the inner value to a new allocation to ensure unique ownership.  This is also
      .               /// referred to as clone-on-write.
-- line 1126 ----------------------------------------
-- line 1167 ----------------------------------------
      .               /// *Rc::make_mut(&mut data) += 1;
      .               ///
      .               /// assert!(76 == *data);
      .               /// assert!(weak.upgrade().is_none());
      .               /// ```
      .               #[cfg(not(no_global_oom_handling))]
      .               #[inline]
      .               #[stable(feature = "rc_unique", since = "1.4.0")]
 26,692 ( 0.00%)      pub fn make_mut(this: &mut Self) -> &mut T {
 15,738 ( 0.00%)          if Rc::strong_count(this) != 1 {
      .                       // Gotta clone the data, there are other Rcs.
      .                       // Pre-allocate memory to allow writing the cloned value directly.
  1,150 ( 0.00%)              let mut rc = Self::new_uninit();
      .                       unsafe {
      .                           let data = Rc::get_mut_unchecked(&mut rc);
      .                           (**this).write_clone_into_raw(data.as_mut_ptr());
    512 ( 0.00%)                  *this = rc.assume_init();
      .                       }
  9,802 ( 0.00%)          } else if Rc::weak_count(this) != 0 {
      .                       // Can just steal the data, all that's left is Weaks
      .                       let mut rc = Self::new_uninit();
      .                       unsafe {
      .                           let data = Rc::get_mut_unchecked(&mut rc);
      .                           data.as_mut_ptr().copy_from_nonoverlapping(&**this, 1);
      .           
      .                           this.inner().dec_strong();
      .                           // Remove implicit strong-weak ref (no need to craft a fake
-- line 1193 ----------------------------------------
-- line 1196 ----------------------------------------
      .                           ptr::write(this, rc.assume_init());
      .                       }
      .                   }
      .                   // This unsafety is ok because we're guaranteed that the pointer
      .                   // returned is the *only* pointer that will ever be returned to T. Our
      .                   // reference count is guaranteed to be 1 at this point, and we required
      .                   // the `Rc<T>` itself to be `mut`, so we're returning the only possible
      .                   // reference to the allocation.
  5,455 ( 0.00%)          unsafe { &mut this.ptr.as_mut().value }
 31,938 ( 0.00%)      }
      .           }
      .           
      .           impl Rc<dyn Any> {
      .               #[inline]
      .               #[stable(feature = "rc_downcast", since = "1.29.0")]
      .               /// Attempt to downcast the `Rc<dyn Any>` to a concrete type.
      .               ///
      .               /// # Examples
-- line 1213 ----------------------------------------
-- line 1344 ----------------------------------------
      .                       )
      .                   }
      .               }
      .           
      .               /// Copy elements from slice into newly allocated Rc<\[T\]>
      .               ///
      .               /// Unsafe because the caller must either take ownership or bind `T: Copy`
      .               #[cfg(not(no_global_oom_handling))]
  2,841 ( 0.00%)      unsafe fn copy_from_slice(v: &[T]) -> Rc<[T]> {
      .                   unsafe {
      .                       let ptr = Self::allocate_for_slice(v.len());
    602 ( 0.00%)              ptr::copy_nonoverlapping(v.as_ptr(), &mut (*ptr).value as *mut [T] as *mut T, v.len());
      .                       Self::from_ptr(ptr)
      .                   }
  3,682 ( 0.00%)      }
      .           
      .               /// Constructs an `Rc<[T]>` from an iterator known to be of a certain size.
      .               ///
      .               /// Behavior is undefined should the size be wrong.
      .               #[cfg(not(no_global_oom_handling))]
      .               unsafe fn from_iter_exact(iter: impl iter::Iterator<Item = T>, len: usize) -> Rc<[T]> {
      .                   // Panic guard while cloning T elements.
      .                   // In the event of a panic, elements that have been written
-- line 1366 ----------------------------------------
-- line 1419 ----------------------------------------
      .                   unsafe { Self::from_iter_exact(v.iter().cloned(), v.len()) }
      .               }
      .           }
      .           
      .           #[cfg(not(no_global_oom_handling))]
      .           impl<T: Copy> RcFromSlice<T> for Rc<[T]> {
      .               #[inline]
      .               fn from_slice(v: &[T]) -> Self {
     13 ( 0.00%)          unsafe { Rc::copy_from_slice(v) }
      .               }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T: ?Sized> Deref for Rc<T> {
      .               type Target = T;
      .           
      .               #[inline(always)]
      .               fn deref(&self) -> &T {
 82,692 ( 0.01%)          &self.inner().value
      4 ( 0.00%)      }
      .           }
      .           
      .           #[unstable(feature = "receiver_trait", issue = "none")]
      .           impl<T: ?Sized> Receiver for Rc<T> {}
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           unsafe impl<#[may_dangle] T: ?Sized> Drop for Rc<T> {
      .               /// Drops the `Rc`.
-- line 1446 ----------------------------------------
-- line 1463 ----------------------------------------
      .               /// }
      .               ///
      .               /// let foo  = Rc::new(Foo);
      .               /// let foo2 = Rc::clone(&foo);
      .               ///
      .               /// drop(foo);    // Doesn't print anything
      .               /// drop(foo2);   // Prints "dropped!"
      .               /// ```
429,254 ( 0.06%)      fn drop(&mut self) {
      .                   unsafe {
104,809 ( 0.01%)              self.inner().dec_strong();
303,916 ( 0.04%)              if self.inner().strong() == 0 {
      .                           // destroy the contained object
 21,540 ( 0.00%)                  ptr::drop_in_place(Self::get_mut_unchecked(self));
      .           
      .                           // remove the implicit "strong weak" pointer now that we've
      .                           // destroyed the contents.
  1,261 ( 0.00%)                  self.inner().dec_weak();
      .           
 99,893 ( 0.01%)                  if self.inner().weak() == 0 {
 14,291 ( 0.00%)                      Global.deallocate(self.ptr.cast(), Layout::for_value(self.ptr.as_ref()));
      .                           }
      .                       }
      .                   }
327,460 ( 0.04%)      }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T: ?Sized> Clone for Rc<T> {
      .               /// Makes a clone of the `Rc` pointer.
      .               ///
      .               /// This creates another pointer to the same allocation, increasing the
      .               /// strong reference count.
-- line 1495 ----------------------------------------
-- line 1499 ----------------------------------------
      .               /// ```
      .               /// use std::rc::Rc;
      .               ///
      .               /// let five = Rc::new(5);
      .               ///
      .               /// let _ = Rc::clone(&five);
      .               /// ```
      .               #[inline]
  5,608 ( 0.00%)      fn clone(&self) -> Rc<T> {
      .                   unsafe {
  1,402 ( 0.00%)              self.inner().inc_strong();
  4,206 ( 0.00%)              Self::from_inner(self.ptr)
      .                   }
  2,804 ( 0.00%)      }
      .           }
      .           
      .           #[cfg(not(no_global_oom_handling))]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T: Default> Default for Rc<T> {
      .               /// Creates a new `Rc<T>`, with the `Default` value for `T`.
      .               ///
      .               /// # Examples
-- line 1520 ----------------------------------------
-- line 1562 ----------------------------------------
      .           /// cost to pay off more easily. It's also more likely to have two `Rc` clones, that point to
      .           /// the same value, than two `&T`s.
      .           ///
      .           /// We can only do this when `T: Eq` as a `PartialEq` might be deliberately irreflexive.
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T: ?Sized + MarkerEq> RcEqIdent<T> for Rc<T> {
      .               #[inline]
      .               fn eq(&self, other: &Rc<T>) -> bool {
    720 ( 0.00%)          Rc::ptr_eq(self, other) || **self == **other
      .               }
      .           
      .               #[inline]
      .               fn ne(&self, other: &Rc<T>) -> bool {
      .                   !Rc::ptr_eq(self, other) && **self != **other
      .               }
      .           }
      .           
-- line 1578 ----------------------------------------
-- line 1879 ----------------------------------------
      .               /// # use std::rc::Rc;
      .               /// let original: Box<Vec<i32>> = Box::new(vec![1, 2, 3]);
      .               /// let shared: Rc<Vec<i32>> = Rc::from(original);
      .               /// assert_eq!(vec![1, 2, 3], *shared);
      .               /// ```
      .               #[inline]
      .               fn from(mut v: Vec<T>) -> Rc<[T]> {
      .                   unsafe {
    849 ( 0.00%)              let rc = Rc::copy_from_slice(&v);
      .           
      .                       // Allow the Vec to free its memory, but not destroy its contents
      .                       v.set_len(0);
      .           
      .                       rc
      .                   }
      .               }
      .           }
-- line 1895 ----------------------------------------
-- line 2080 ----------------------------------------
      .               #[must_use]
      .               pub fn new() -> Weak<T> {
      .                   Weak { ptr: NonNull::new(usize::MAX as *mut RcBox<T>).expect("MAX is not 0") }
      .               }
      .           }
      .           
      .           pub(crate) fn is_dangling<T: ?Sized>(ptr: *mut T) -> bool {
      .               let address = ptr as *mut () as usize;
     30 ( 0.00%)      address == usize::MAX
      .           }
      .           
      .           /// Helper type to allow accessing the reference counts without
      .           /// making any assertions about the data field.
      .           struct WeakInner<'a> {
      .               weak: &'a Cell<usize>,
      .               strong: &'a Cell<usize>,
      .           }
-- line 2096 ----------------------------------------
-- line 2299 ----------------------------------------
      .                       })
      .                       .unwrap_or(0)
      .               }
      .           
      .               /// Returns `None` when the pointer is dangling and there is no allocated `RcBox`,
      .               /// (i.e., when this `Weak` was created by `Weak::new`).
      .               #[inline]
      .               fn inner(&self) -> Option<WeakInner<'_>> {
      1 ( 0.00%)          if is_dangling(self.ptr.as_ptr()) {
      .                       None
      .                   } else {
      .                       // We are careful to *not* create a reference covering the "data" field, as
      .                       // the field may be mutated concurrently (for example, if the last `Rc`
      .                       // is dropped, the data field will be dropped in-place).
      .                       Some(unsafe {
      .                           let ptr = self.ptr.as_ptr();
      .                           WeakInner { strong: &(*ptr).strong, weak: &(*ptr).weak }
-- line 2315 ----------------------------------------
-- line 2391 ----------------------------------------
      .               /// assert!(other_weak_foo.upgrade().is_none());
      .               /// ```
      .               fn drop(&mut self) {
      .                   let inner = if let Some(inner) = self.inner() { inner } else { return };
      .           
      .                   inner.dec_weak();
      .                   // the weak count starts at 1, and will only go to zero if all
      .                   // the strong pointers have disappeared.
      2 ( 0.00%)          if inner.weak() == 0 {
      .                       unsafe {
      .                           Global.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr()));
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           #[stable(feature = "rc_weak", since = "1.4.0")]
-- line 2407 ----------------------------------------
-- line 2463 ----------------------------------------
      .           // clone these much in Rust thanks to ownership and move-semantics.
      .           
      .           #[doc(hidden)]
      .           trait RcInnerPtr {
      .               fn weak_ref(&self) -> &Cell<usize>;
      .               fn strong_ref(&self) -> &Cell<usize>;
      .           
      .               #[inline]
 33,630 ( 0.00%)      fn strong(&self) -> usize {
 13,452 ( 0.00%)          self.strong_ref().get()
 13,452 ( 0.00%)      }
      .           
      .               #[inline]
  4,206 ( 0.00%)      fn inc_strong(&self) {
102,624 ( 0.01%)          let strong = self.strong();
      .           
      .                   // We want to abort on overflow instead of dropping the value.
      .                   // The reference count will never be zero when this is called;
      .                   // nevertheless, we insert an abort here to hint LLVM at
      .                   // an otherwise missed optimization.
313,389 ( 0.04%)          if strong == 0 || strong == usize::MAX {
      .                       abort();
      .                   }
 12,829 ( 0.00%)          self.strong_ref().set(strong + 1);
  2,804 ( 0.00%)      }
      .           
      .               #[inline]
 15,972 ( 0.00%)      fn dec_strong(&self) {
460,782 ( 0.06%)          self.strong_ref().set(self.strong() - 1);
  5,324 ( 0.00%)      }
      .           
      .               #[inline]
  7,560 ( 0.00%)      fn weak(&self) -> usize {
  5,040 ( 0.00%)          self.weak_ref().get()
  5,040 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn inc_weak(&self) {
      .                   let weak = self.weak();
      .           
      .                   // We want to abort on overflow instead of dropping the value.
      .                   // The reference count will never be zero when this is called;
      .                   // nevertheless, we insert an abort here to hint LLVM at
-- line 2505 ----------------------------------------
-- line 2506 ----------------------------------------
      .                   // an otherwise missed optimization.
      .                   if weak == 0 || weak == usize::MAX {
      .                       abort();
      .                   }
      .                   self.weak_ref().set(weak + 1);
      .               }
      .           
      .               #[inline]
  5,040 ( 0.00%)      fn dec_weak(&self) {
149,454 ( 0.02%)          self.weak_ref().set(self.weak() - 1);
  2,520 ( 0.00%)      }
      .           }
      .           
      .           impl<T: ?Sized> RcInnerPtr for RcBox<T> {
      .               #[inline(always)]
      .               fn weak_ref(&self) -> &Cell<usize> {
  7,560 ( 0.00%)          &self.weak
      .               }
      .           
      .               #[inline(always)]
      .               fn strong_ref(&self) -> &Cell<usize> {
      .                   &self.strong
      .               }
      .           }
      .           
-- line 2530 ----------------------------------------

157,243 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/rc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs
--------------------------------------------------------------------------------
Ir                 

-- line 222 ----------------------------------------
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               fn eq(&self, other: &Rhs) -> bool;
        .           
        .               /// This method tests for `!=`.
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
    9,072 ( 0.00%)      fn ne(&self, other: &Rhs) -> bool {
   20,504 ( 0.00%)          !self.eq(other)
   12,096 ( 0.00%)      }
        .           }
        .           
        .           /// Derive macro generating an impl of the trait `PartialEq`.
        .           #[rustc_builtin_macro]
        .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
        .           #[allow_internal_unstable(core_intrinsics, structural_match)]
        .           pub macro PartialEq($item:item) {
        .               /* compiler built-in */
-- line 240 ----------------------------------------
-- line 328 ----------------------------------------
        .           /// assert_eq!(Ordering::Less, result);
        .           ///
        .           /// let result = 1.cmp(&1);
        .           /// assert_eq!(Ordering::Equal, result);
        .           ///
        .           /// let result = 2.cmp(&1);
        .           /// assert_eq!(Ordering::Greater, result);
        .           /// ```
    2,357 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Debug, Hash)]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[repr(i8)]
        .           pub enum Ordering {
        .               /// An ordering where a compared value is less than another.
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               Less = -1,
        .               /// An ordering where a compared value is equal to another.
        .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 344 ----------------------------------------
-- line 569 ----------------------------------------
        .               /// let result = x.0.cmp(&y.0).then_with(|| x.1.cmp(&y.1)).then_with(|| x.2.cmp(&y.2));
        .               ///
        .               /// assert_eq!(result, Ordering::Less);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "ordering_chaining", since = "1.17.0")]
        .               pub fn then_with<F: FnOnce() -> Ordering>(self, f: F) -> Ordering {
    1,854 ( 0.00%)          match self {
        .                       Equal => f(),
        .                       _ => self,
        .                   }
        .               }
        .           }
        .           
        .           /// A helper struct for reverse ordering.
        .           ///
-- line 585 ----------------------------------------
-- line 788 ----------------------------------------
        .               ///
        .               /// ```
        .               /// assert_eq!(2, 1.max(2));
        .               /// assert_eq!(2, 2.max(2));
        .               /// ```
        .               #[stable(feature = "ord_max_min", since = "1.21.0")]
        .               #[inline]
        .               #[must_use]
   34,638 ( 0.00%)      fn max(self, other: Self) -> Self
        .               where
        .                   Self: Sized,
        .               {
   44,616 ( 0.01%)          max_by(self, other, Ord::cmp)
   23,092 ( 0.00%)      }
        .           
        .               /// Compares and returns the minimum of two values.
        .               ///
        .               /// Returns the first argument if the comparison determines them to be equal.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(1, 1.min(2));
        .               /// assert_eq!(2, 2.min(2));
        .               /// ```
        .               #[stable(feature = "ord_max_min", since = "1.21.0")]
        .               #[inline]
        .               #[must_use]
      492 ( 0.00%)      fn min(self, other: Self) -> Self
        .               where
        .                   Self: Sized,
        .               {
    1,006 ( 0.00%)          min_by(self, other, Ord::cmp)
      328 ( 0.00%)      }
        .           
        .               /// Restrict a value to a certain interval.
        .               ///
        .               /// Returns `max` if `self` is greater than `max`, and `min` if `self` is
        .               /// less than `min`. Otherwise this returns `self`.
        .               ///
        .               /// # Panics
        .               ///
-- line 829 ----------------------------------------
-- line 1097 ----------------------------------------
        .               /// let result = 2.0 < 1.0;
        .               /// assert_eq!(result, false);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        .               fn lt(&self, other: &Rhs) -> bool {
   26,515 ( 0.00%)          matches!(self.partial_cmp(other), Some(Less))
        .               }
        .           
        .               /// This method tests less than or equal to (for `self` and `other`) and is used by the `<=`
        .               /// operator.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1113 ----------------------------------------
-- line 1121 ----------------------------------------
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        .               fn le(&self, other: &Rhs) -> bool {
        .                   // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.
        .                   // FIXME: The root cause was fixed upstream in LLVM with:
        .                   // https://github.com/llvm/llvm-project/commit/9bad7de9a3fb844f1ca2965f35d0c2a3d1e11775
        .                   // Revert this workaround once support for LLVM 12 gets dropped.
  139,815 ( 0.02%)          !matches!(self.partial_cmp(other), None | Some(Greater))
        .               }
        .           
        .               /// This method tests greater than (for `self` and `other`) and is used by the `>` operator.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let result = 1.0 > 2.0;
-- line 1137 ----------------------------------------
-- line 1139 ----------------------------------------
        .               ///
        .               /// let result = 2.0 > 2.0;
        .               /// assert_eq!(result, false);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        6 ( 0.00%)      fn gt(&self, other: &Rhs) -> bool {
  214,415 ( 0.03%)          matches!(self.partial_cmp(other), Some(Greater))
       10 ( 0.00%)      }
        .           
        .               /// This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`
        .               /// operator.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let result = 2.0 >= 1.0;
-- line 1157 ----------------------------------------
-- line 1159 ----------------------------------------
        .               ///
        .               /// let result = 2.0 >= 2.0;
        .               /// assert_eq!(result, true);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
    1,512 ( 0.00%)      fn ge(&self, other: &Rhs) -> bool {
    7,107 ( 0.00%)          matches!(self.partial_cmp(other), Some(Greater | Equal))
    2,520 ( 0.00%)      }
        .           }
        .           
        .           /// Derive macro generating an impl of the trait `PartialOrd`.
        .           #[rustc_builtin_macro]
        .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
        .           #[allow_internal_unstable(core_intrinsics)]
        .           pub macro PartialOrd($item:item) {
        .               /* compiler built-in */
-- line 1177 ----------------------------------------
-- line 1190 ----------------------------------------
        .           ///
        .           /// assert_eq!(1, cmp::min(1, 2));
        .           /// assert_eq!(2, cmp::min(2, 2));
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[cfg_attr(not(test), rustc_diagnostic_item = "cmp_min")]
      282 ( 0.00%)  pub fn min<T: Ord>(v1: T, v2: T) -> T {
      188 ( 0.00%)      v1.min(v2)
      188 ( 0.00%)  }
        .           
        .           /// Returns the minimum of two values with respect to the specified comparison function.
        .           ///
        .           /// Returns the first argument if the comparison determines them to be equal.
        .           ///
        .           /// # Examples
        .           ///
        .           /// ```
-- line 1208 ----------------------------------------
-- line 1209 ----------------------------------------
        .           /// use std::cmp;
        .           ///
        .           /// assert_eq!(cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 1);
        .           /// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
      492 ( 0.00%)  pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
  153,849 ( 0.02%)      match compare(&v1, &v2) {
      608 ( 0.00%)          Ordering::Less | Ordering::Equal => v1,
       36 ( 0.00%)          Ordering::Greater => v2,
        .               }
    1,466 ( 0.00%)  }
        .           
        .           /// Returns the element that gives the minimum value from the specified function.
        .           ///
        .           /// Returns the first argument if the comparison determines them to be equal.
        .           ///
        .           /// # Examples
        .           ///
        .           /// ```
-- line 1230 ----------------------------------------
-- line 1231 ----------------------------------------
        .           /// use std::cmp;
        .           ///
        .           /// assert_eq!(cmp::min_by_key(-2, 1, |x: &i32| x.abs()), 1);
        .           /// assert_eq!(cmp::min_by_key(-2, 2, |x: &i32| x.abs()), -2);
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
       12 ( 0.00%)  pub fn min_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {
        8 ( 0.00%)      min_by(v1, v2, |v1, v2| f(v1).cmp(&f(v2)))
        8 ( 0.00%)  }
        .           
        .           /// Compares and returns the maximum of two values.
        .           ///
        .           /// Returns the second argument if the comparison determines them to be equal.
        .           ///
        .           /// Internally uses an alias to [`Ord::max`].
        .           ///
        .           /// # Examples
-- line 1249 ----------------------------------------
-- line 1253 ----------------------------------------
        .           ///
        .           /// assert_eq!(2, cmp::max(1, 2));
        .           /// assert_eq!(2, cmp::max(2, 2));
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[cfg_attr(not(test), rustc_diagnostic_item = "cmp_max")]
   34,497 ( 0.00%)  pub fn max<T: Ord>(v1: T, v2: T) -> T {
   22,998 ( 0.00%)      v1.max(v2)
   22,998 ( 0.00%)  }
        .           
        .           /// Returns the maximum of two values with respect to the specified comparison function.
        .           ///
        .           /// Returns the second argument if the comparison determines them to be equal.
        .           ///
        .           /// # Examples
        .           ///
        .           /// ```
-- line 1271 ----------------------------------------
-- line 1272 ----------------------------------------
        .           /// use std::cmp;
        .           ///
        .           /// assert_eq!(cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
        .           /// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
   34,638 ( 0.00%)  pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
  393,458 ( 0.05%)      match compare(&v1, &v2) {
   26,682 ( 0.00%)          Ordering::Less | Ordering::Equal => v2,
   15,339 ( 0.00%)          Ordering::Greater => v1,
        .               }
   97,481 ( 0.01%)  }
        .           
        .           /// Returns the element that gives the maximum value from the specified function.
        .           ///
        .           /// Returns the second argument if the comparison determines them to be equal.
        .           ///
        .           /// # Examples
        .           ///
        .           /// ```
-- line 1293 ----------------------------------------
-- line 1308 ----------------------------------------
        .               use crate::cmp::Ordering::{self, Equal, Greater, Less};
        .               use crate::hint::unreachable_unchecked;
        .           
        .               macro_rules! partial_eq_impl {
        .                   ($($t:ty)*) => ($(
        .                       #[stable(feature = "rust1", since = "1.0.0")]
        .                       impl PartialEq for $t {
        .                           #[inline]
   12,485 ( 0.00%)                  fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
        .                           #[inline]
   40,590 ( 0.01%)                  fn ne(&self, other: &$t) -> bool { (*self) != (*other) }
        .                       }
        .                   )*)
        .               }
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl PartialEq for () {
        .                   #[inline]
       99 ( 0.00%)          fn eq(&self, _other: &()) -> bool {
        .                       true
      165 ( 0.00%)          }
        .                   #[inline]
        .                   fn ne(&self, _other: &()) -> bool {
        .                       false
        .                   }
        .               }
        .           
        .               partial_eq_impl! {
        .                   bool char usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64
-- line 1336 ----------------------------------------
-- line 1392 ----------------------------------------
        .                   ($($t:ty)*) => ($(
        .                       #[stable(feature = "rust1", since = "1.0.0")]
        .                       impl PartialOrd for $t {
        .                           #[inline]
        .                           fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
        .                               Some(self.cmp(other))
        .                           }
        .                           #[inline]
1,716,668 ( 0.23%)                  fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
        .                           #[inline]
   19,411 ( 0.00%)                  fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
        .                           #[inline]
        .                           fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }
        .                           #[inline]
        .                           fn gt(&self, other: &$t) -> bool { (*self) > (*other) }
        .                       }
        .           
        .                       #[stable(feature = "rust1", since = "1.0.0")]
        .                       impl Ord for $t {
        .                           #[inline]
   61,080 ( 0.01%)                  fn cmp(&self, other: &$t) -> Ordering {
        .                               // The order here is important to generate more optimal assembly.
        .                               // See <https://github.com/rust-lang/rust/issues/63758> for more info.
3,650,937 ( 0.49%)                      if *self < *other { Less }
   28,695 ( 0.00%)                      else if *self == *other { Equal }
    5,627 ( 0.00%)                      else { Greater }
   36,648 ( 0.00%)                  }
        .                       }
        .                   )*)
        .               }
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl Ord for () {
        .                   #[inline]
        .                   fn cmp(&self, _other: &()) -> Ordering {
-- line 1426 ----------------------------------------
-- line 1430 ----------------------------------------
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl Ord for bool {
        .                   #[inline]
        .                   fn cmp(&self, other: &bool) -> Ordering {
        .                       // Casting to i8's and converting the difference to an Ordering generates
        .                       // more optimal assembly.
        .                       // See <https://github.com/rust-lang/rust/issues/66780> for more info.
    2,554 ( 0.00%)              match (*self as i8) - (*other as i8) {
        .                           -1 => Less,
        .                           0 => Equal,
        .                           1 => Greater,
        .                           // SAFETY: bool as i8 returns 0 or 1, so the difference can't be anything else
        .                           _ => unsafe { unreachable_unchecked() },
        .                       }
        .                   }
        .               }
-- line 1446 ----------------------------------------
-- line 1474 ----------------------------------------
        .               // & pointers
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &A
        .               where
        .                   A: PartialEq<B>,
        .               {
        .                   #[inline]
  228,529 ( 0.03%)          fn eq(&self, other: &&B) -> bool {
  538,924 ( 0.07%)              PartialEq::eq(*self, *other)
  210,275 ( 0.03%)          }
        .                   #[inline]
        .                   fn ne(&self, other: &&B) -> bool {
       81 ( 0.00%)              PartialEq::ne(*self, *other)
    9,675 ( 0.00%)          }
        .               }
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized, B: ?Sized> PartialOrd<&B> for &A
        .               where
        .                   A: PartialOrd<B>,
        .               {
        .                   #[inline]
        .                   fn partial_cmp(&self, other: &&B) -> Option<Ordering> {
-- line 1496 ----------------------------------------
-- line 1516 ----------------------------------------
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized> Ord for &A
        .               where
        .                   A: Ord,
        .               {
        .                   #[inline]
        .                   fn cmp(&self, other: &Self) -> Ordering {
        .                       Ord::cmp(*self, *other)
    5,955 ( 0.00%)          }
        .               }
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized> Eq for &A where A: Eq {}
        .           
        .               // &mut pointers
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized, B: ?Sized> PartialEq<&mut B> for &mut A
-- line 1532 ----------------------------------------

  917,631 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 108 ----------------------------------------
      .                   suppress_errors: bool,
      .               },
      .           }
      .           
      .           impl RegionckMode {
      .               /// Indicates that the MIR borrowck will repeat these region
      .               /// checks, so we should ignore errors if NLL is (unconditionally)
      .               /// enabled.
    176 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
      .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
      .                   // this always `true` and then proceed to eliminate the dead code.
    176 ( 0.00%)          match tcx.borrowck_mode() {
      .                       // If we're on Migrate mode, report AST region errors
      .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
      .           
      .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
      .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
      .                   }
    352 ( 0.00%)      }
      .           }
      .           
      .           /// This type contains all the things within `InferCtxt` that sit within a
      .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
      .           /// operations are hot enough that we want only one call to `borrow_mut` per
      .           /// call to `start_snapshot` and `rollback_to`.
      .           pub struct InferCtxtInner<'tcx> {
      .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
      .               /// type instantiations (`ty::Infer`) to the actual opaque
      .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
      .               /// opaque type inference variables to their corresponding
      .               /// opaque type.
      .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
      .           }
      .           
      .           impl<'tcx> InferCtxtInner<'tcx> {
 29,540 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
200,872 ( 0.03%)          InferCtxtInner {
      .                       projection_cache: Default::default(),
      .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
      .                       undo_log: InferCtxtUndoLogs::default(),
      .                       const_unification_storage: ut::UnificationTableStorage::new(),
      .                       int_unification_storage: ut::UnificationTableStorage::new(),
      .                       float_unification_storage: ut::UnificationTableStorage::new(),
 17,724 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
      .                       region_obligations: vec![],
      .                       opaque_types: Default::default(),
      .                       opaque_types_vars: Default::default(),
      .                   }
 35,448 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
      .                   &self.region_obligations
      .               }
      .           
      .               #[inline]
      .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
  2,409 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
 81,356 ( 0.01%)          self.type_variable_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn int_unification_table(
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::IntVid,
      .                       &mut ut::UnificationStorage<ty::IntVid>,
      .                       &mut InferCtxtUndoLogs<'tcx>,
      .                   >,
      .               > {
    169 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn float_unification_table(
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::ConstVid<'tcx>,
      .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
      .                       &mut InferCtxtUndoLogs<'tcx>,
      .                   >,
      .               > {
    343 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
 22,661 ( 0.00%)          self.region_constraint_storage
      .                       .as_mut()
      .                       .expect("region constraints already solved")
 26,602 ( 0.00%)              .with_log(&mut self.undo_log)
      .               }
      .           }
      .           
      .           pub struct InferCtxt<'a, 'tcx> {
      .               pub tcx: TyCtxt<'tcx>,
      .           
      .               /// The `DefId` of the item in whose context we are performing inference or typeck.
      .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
      .               /// item we are type-checking, and just consider those names as
      .               /// part of the root universe. So this would only get incremented
      .               /// when we enter into a higher-ranked (`for<..>`) type or trait
      .               /// bound.
      .               universe: Cell<ty::UniverseIndex>,
      .           }
      .           
      .           /// See the `error_reporting` module for more details.
 49,392 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
      .           pub enum ValuePairs<'tcx> {
      .               Types(ExpectedFound<Ty<'tcx>>),
      .               Regions(ExpectedFound<ty::Region<'tcx>>),
      .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
      .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
      .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
      .           }
      .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
      .           pub struct TypeTrace<'tcx> {
      .               cause: ObligationCause<'tcx>,
      .               values: ValuePairs<'tcx>,
      .           }
      .           
      .           /// The origin of a `r1 <= r2` constraint.
      .           ///
      .           /// See `error_reporting` module for more details
 65,516 ( 0.01%)  #[derive(Clone, Debug)]
      .           pub enum SubregionOrigin<'tcx> {
      .               /// Arose from a subtyping relation
  4,181 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
      .           
      .               /// When casting `&'a T` to an `&'b Trait` object,
      .               /// relating `'a` to `'b`
      .               RelateObjectBound(Span),
      .           
      .               /// Some type parameter was instantiated with the given type,
      .               /// and that type must outlive some region.
    177 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
      .           
      .               /// The given region parameter was instantiated with a region
      .               /// that must outlive some other region.
      .               RelateRegionParamBound(Span),
      .           
      .               /// Creating a pointer `b` to contents of another reference
      .               Reborrow(Span),
      .           
      .               /// Creating a pointer `b` to contents of an upvar
      .               ReborrowUpvar(Span, ty::UpvarId),
      .           
      .               /// Data with type `Ty<'tcx>` was borrowed
    140 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
      .           
      .               /// (&'a &'b T) where a >= b
    127 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
      .           
      .               /// Comparing the signature and requirements of an impl method against
      .               /// the containing trait.
      .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
      .           
      .               /// Comparing the signature and requirements of an impl associated type
      .               /// against the containing trait
      .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
      .               defining_use_anchor: Option<LocalDefId>,
      .           }
      .           
      .           pub trait TyCtxtInferExt<'tcx> {
      .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
      .           }
      .           
      .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
  5,908 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
 17,724 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
  5,908 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> InferCtxtBuilder<'tcx> {
      .               /// Used only by `rustc_typeck` during body type-checking/inference,
      .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
      .               /// Will also change the scope for opaque type defining use checks to the given owner.
  4,554 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
  5,566 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
  2,530 ( 0.00%)          self.with_opaque_type_inference(table_owner)
  3,542 ( 0.00%)      }
      .           
      .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
      .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
      .               ///
      .               /// It is only meant to be called in two places, for typeck
      .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
      .               /// in mir borrowck.
    378 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
    189 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
  1,390 ( 0.00%)          self
    567 ( 0.00%)      }
      .           
      .               /// Given a canonical value `C` as a starting point, create an
      .               /// inference context that contains each of the bound values
      .               /// within instantiated as a fresh variable. The `f` closure is
      .               /// invoked with the new infcx, along with the instantiated value
      .               /// `V` and a substitution `S`. This substitution `S` maps from
      .               /// the bound values in `C` to their instantiated values in `V`
      .               /// (in other words, `S(C) = V`).
  8,743 ( 0.00%)      pub fn enter_with_canonical<T, R>(
      .                   &mut self,
      .                   span: Span,
      .                   canonical: &Canonical<'tcx, T>,
      .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
      .               ) -> R
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   self.enter(|infcx| {
 12,628 ( 0.00%)              let (value, subst) =
    684 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
 18,712 ( 0.00%)              f(infcx, value, subst)
      .                   })
  9,475 ( 0.00%)      }
      .           
 32,556 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
 15,881 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
      .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
254,915 ( 0.03%)          f(InferCtxt {
      .                       tcx,
      .                       defining_use_anchor,
      .                       in_progress_typeck_results,
  5,908 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
      .                       lexical_region_resolutions: RefCell::new(None),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      .                       reported_trait_errors: Default::default(),
      .                       reported_closure_mismatch: Default::default(),
      .                       tainted_by_errors_flag: Cell::new(false),
  5,908 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
      .                       in_snapshot: Cell::new(false),
      .                       skip_leak_check: Cell::new(false),
      .                       universe: Cell::new(ty::UniverseIndex::ROOT),
      .                   })
 36,024 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, T> InferOk<'tcx, T> {
      .               pub fn unit(self) -> InferOk<'tcx, ()> {
      .                   InferOk { value: (), obligations: self.obligations }
      .               }
      .           
      .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
      .               pub fn into_value_registering_obligations(
      .                   self,
      .                   infcx: &InferCtxt<'_, 'tcx>,
      .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
      .               ) -> T {
    268 ( 0.00%)          let InferOk { value, obligations } = self;
  1,028 ( 0.00%)          for obligation in obligations {
      .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
      .                   }
      .                   value
      .               }
      .           }
      .           
      .           impl<'tcx> InferOk<'tcx, ()> {
  3,216 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
 12,864 ( 0.00%)          self.obligations
  3,216 ( 0.00%)      }
      .           }
      .           
      .           #[must_use = "once you start a snapshot, you should always consume it"]
      .           pub struct CombinedSnapshot<'a, 'tcx> {
      .               undo_snapshot: Snapshot<'tcx>,
      .               region_constraints_snapshot: RegionSnapshot,
      .               universe: ty::UniverseIndex,
      .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
      .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
      .                   debug!("canonical consts: {:?}", &canonical.value);
      .           
      .                   self.tcx.try_unify_abstract_consts(canonical.value)
      .               }
      .           
      .               pub fn is_in_snapshot(&self) -> bool {
      .                   self.in_snapshot.get()
  5,595 ( 0.00%)      }
      .           
 35,200 ( 0.00%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
 39,600 ( 0.01%)          t.fold_with(&mut self.freshener())
 39,600 ( 0.01%)      }
      .           
      .               /// Returns the origin of the type variable identified by `vid`, or `None`
      .               /// if this is not a type variable.
      .               ///
      .               /// No attempt is made to resolve `ty`.
     92 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
    184 ( 0.00%)          match *ty.kind() {
     46 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
    184 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
      .                       }
      .                       _ => None,
      .                   }
    184 ( 0.00%)      }
      .           
  4,400 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
      .                   freshen::TypeFreshener::new(self, false)
  4,400 ( 0.00%)      }
      .           
      .               /// Like `freshener`, but does not replace `'static` regions.
 22,339 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
      .                   freshen::TypeFreshener::new(self, true)
 22,339 ( 0.00%)      }
      .           
    808 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
    404 ( 0.00%)          let mut inner = self.inner.borrow_mut();
    404 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
      .                       .type_variables()
      .                       .unsolved_variables()
      .                       .into_iter()
     75 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
      .                       .collect();
      .                   vars.extend(
      .                       (0..inner.int_unification_table().len())
      .                           .map(|i| ty::IntVid { index: i as u32 })
     12 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
      .                           .map(|v| self.tcx.mk_int_var(v)),
      .                   );
      .                   vars.extend(
      .                       (0..inner.float_unification_table().len())
      .                           .map(|i| ty::FloatVid { index: i as u32 })
      .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
      .                           .map(|v| self.tcx.mk_float_var(v)),
      .                   );
      .                   vars
  1,414 ( 0.00%)      }
      .           
 10,864 ( 0.00%)      fn combine_fields(
      .                   &'a self,
      .                   trace: TypeTrace<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .               ) -> CombineFields<'a, 'tcx> {
 46,572 ( 0.01%)          CombineFields {
      .                       infcx: self,
116,430 ( 0.02%)              trace,
      .                       cause: None,
      .                       param_env,
      .                       obligations: PredicateObligations::new(),
      .                   }
 10,864 ( 0.00%)      }
      .           
      .               /// Clear the "currently in a snapshot" flag, invoke the closure,
      .               /// then restore the flag to its original value. This flag is a
      .               /// debugging measure designed to detect cases where we start a
      .               /// snapshot, create type variables, and register obligations
      .               /// which may involve those type variables in the fulfillment cx,
      .               /// potentially leaving "dangling type variables" behind.
      .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 755 ----------------------------------------
      .               /// better than grovelling through megabytes of `RUSTC_LOG` output.
      .               ///
      .               /// HOWEVER, in some cases the flag is unhelpful. In particular, we
      .               /// sometimes create a "mini-fulfilment-cx" in which we enroll
      .               /// obligations. As long as this fulfillment cx is fully drained
      .               /// before we return, this is not a problem, as there won't be any
      .               /// escaping obligations in the main cx. In those cases, you can
      .               /// use this function.
      8 ( 0.00%)      pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
      .               where
      .                   F: FnOnce(&Self) -> R,
      .               {
      .                   let flag = self.in_snapshot.replace(false);
  1,989 ( 0.00%)          let result = func(self);
      .                   self.in_snapshot.set(flag);
      .                   result
      9 ( 0.00%)      }
      .           
 60,736 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
      .                   debug!("start_snapshot()");
      .           
      .                   let in_snapshot = self.in_snapshot.replace(true);
      .           
      .                   let mut inner = self.inner.borrow_mut();
      .           
182,208 ( 0.02%)          CombinedSnapshot {
      .                       undo_snapshot: inner.undo_log.start_snapshot(),
      .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
      .                       universe: self.universe(),
      .                       was_in_snapshot: in_snapshot,
      .                       // Borrow typeck results "in progress" (i.e., during typeck)
      .                       // to ban writes from within a snapshot to them.
 30,368 ( 0.00%)              _in_progress_typeck_results: self
      .                           .in_progress_typeck_results
      .                           .map(|typeck_results| typeck_results.borrow()),
      .                   }
121,472 ( 0.02%)      }
      .           
147,510 ( 0.02%)      #[instrument(skip(self, snapshot), level = "debug")]
      .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
      .                   let CombinedSnapshot {
 13,410 ( 0.00%)              undo_snapshot,
 13,410 ( 0.00%)              region_constraints_snapshot,
 13,410 ( 0.00%)              universe,
 13,410 ( 0.00%)              was_in_snapshot,
 26,820 ( 0.00%)              _in_progress_typeck_results,
      .                   } = snapshot;
      .           
      .                   self.in_snapshot.set(was_in_snapshot);
      .                   self.universe.set(universe);
      .           
      .                   let mut inner = self.inner.borrow_mut();
 13,410 ( 0.00%)          inner.rollback_to(undo_snapshot);
      .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
      .               }
      .           
254,370 ( 0.03%)      #[instrument(skip(self, snapshot), level = "debug")]
      .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
      .                   let CombinedSnapshot {
 16,958 ( 0.00%)              undo_snapshot,
      .                       region_constraints_snapshot: _,
      .                       universe: _,
 16,958 ( 0.00%)              was_in_snapshot,
 33,916 ( 0.00%)              _in_progress_typeck_results,
      .                   } = snapshot;
      .           
      .                   self.in_snapshot.set(was_in_snapshot);
      .           
      .                   self.inner.borrow_mut().commit(undo_snapshot);
      .               }
      .           
      .               /// Executes `f` and commit the bindings.
 18,424 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
 22,616 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
  2,056 ( 0.00%)          let snapshot = self.start_snapshot();
  6,504 ( 0.00%)          let r = f(&snapshot);
 14,392 ( 0.00%)          self.commit_from(snapshot);
 12,480 ( 0.00%)          r
      .               }
      .           
      .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
123,507 ( 0.02%)      #[instrument(skip(self, f), level = "debug")]
152,382 ( 0.02%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
      .               {
 21,775 ( 0.00%)          let snapshot = self.start_snapshot();
 71,825 ( 0.01%)          let r = f(&snapshot);
      .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
 21,381 ( 0.00%)          match r {
      .                       Ok(_) => {
107,173 ( 0.01%)                  self.commit_from(snapshot);
      .                       }
      .                       Err(_) => {
 46,757 ( 0.01%)                  self.rollback_to("commit_if_ok -- error", snapshot);
      .                       }
      .                   }
114,927 ( 0.02%)          r
      .               }
      .           
      .               /// Execute `f` then unroll any bindings it creates.
 52,645 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
 63,786 ( 0.01%)      pub fn probe<R, F>(&self, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
 15,281 ( 0.00%)          let snapshot = self.start_snapshot();
 26,225 ( 0.00%)          let r = f(&snapshot);
 70,300 ( 0.01%)          self.rollback_to("probe", snapshot);
  6,997 ( 0.00%)          r
      .               }
      .           
      .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
  6,984 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
  9,312 ( 0.00%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
  1,552 ( 0.00%)          let snapshot = self.start_snapshot();
    776 ( 0.00%)          let was_skip_leak_check = self.skip_leak_check.get();
  1,552 ( 0.00%)          if should_skip {
      .                       self.skip_leak_check.set(true);
      .                   }
  3,104 ( 0.00%)          let r = f(&snapshot);
  6,984 ( 0.00%)          self.rollback_to("probe", snapshot);
      .                   self.skip_leak_check.set(was_skip_leak_check);
  9,312 ( 0.00%)          r
      .               }
      .           
      .               /// Scan the constraints produced since `snapshot` began and returns:
      .               ///
      .               /// - `None` -- if none of them involve "region outlives" constraints
      .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
      .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
  3,390 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
      .                   &self,
      .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
      .               ) -> Option<bool> {
  6,780 ( 0.00%)          self.inner
      .                       .borrow_mut()
      .                       .unwrap_region_constraints()
      .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
  5,085 ( 0.00%)      }
      .           
      .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
      .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
      .               }
      .           
    108 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
      .               where
      .                   T: at::ToTrace<'tcx>,
      .               {
      .                   let origin = &ObligationCause::dummy();
      .                   self.probe(|_| {
      .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
      .                           // Ignore obligations, since we are unrolling
      .                           // everything anyway.
      .                       })
      .                   })
     81 ( 0.00%)      }
      .           
  1,116 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
      .               where
      .                   T: at::ToTrace<'tcx>,
      .               {
      .                   let origin = &ObligationCause::dummy();
      .                   self.probe(|_| {
      .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
      .                           // Ignore obligations, since we are unrolling
      .                           // everything anyway.
      .                       })
      .                   })
    837 ( 0.00%)      }
      .           
  7,360 ( 0.00%)      #[instrument(skip(self), level = "debug")]
      .               pub fn sub_regions(
      .                   &self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   a: ty::Region<'tcx>,
      .                   b: ty::Region<'tcx>,
      .               ) {
  6,624 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
      .               }
      .           
      .               /// Require that the region `r` be equal to one of the regions in
      .               /// the set `regions`.
      .               #[instrument(skip(self), level = "debug")]
      .               pub fn member_constraint(
      .                   &self,
      .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 969 ----------------------------------------
      .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
      .               /// actually requiring `a <: b`. This is of course a valid coercion,
      .               /// but it's not as flexible as `FnCtxt::coerce` would be.
      .               ///
      .               /// (We may refactor this in the future, but there are a number of
      .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
      .               /// records adjustments that are required on the HIR in order to perform
      .               /// the coercion, and we don't currently have a way to manage that.)
      6 ( 0.00%)      pub fn coerce_predicate(
      .                   &self,
      .                   cause: &ObligationCause<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   predicate: ty::PolyCoercePredicate<'tcx>,
      .               ) -> Option<InferResult<'tcx, ()>> {
      4 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
      .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
      .                       a: p.a,
      .                       b: p.b,
      .                   });
     10 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
      8 ( 0.00%)      }
      .           
    480 ( 0.00%)      pub fn subtype_predicate(
      .                   &self,
      .                   cause: &ObligationCause<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   predicate: ty::PolySubtypePredicate<'tcx>,
      .               ) -> Option<InferResult<'tcx, ()>> {
      .                   // Check for two unresolved inference variables, in which case we can
      .                   // make no progress. This is partly a micro-optimization, but it's
      .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
      .                   // earlier that they are sub-unified).
      .                   //
      .                   // Note that we can just skip the binders here because
      .                   // type variables can't (at present, at
      .                   // least) capture any of the things bound by this binder.
      .                   //
      .                   // Note that this sub here is not just for diagnostics - it has semantic
      .                   // effects as well.
     40 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
     40 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
    308 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
     74 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
      .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
     74 ( 0.00%)                  return None;
      .                       }
      .                       _ => {}
      .                   }
      .           
      .                   Some(self.commit_if_ok(|_snapshot| {
      3 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
      .                           self.replace_bound_vars_with_placeholders(predicate);
      .           
      6 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
      .           
      .                       Ok(ok.unit())
      .                   }))
    360 ( 0.00%)      }
      .           
  1,440 ( 0.00%)      pub fn region_outlives_predicate(
      .                   &self,
      .                   cause: &traits::ObligationCause<'tcx>,
      .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
      .               ) -> UnitResult<'tcx> {
      .                   self.commit_if_ok(|_snapshot| {
      .                       let ty::OutlivesPredicate(r_a, r_b) =
      .                           self.replace_bound_vars_with_placeholders(predicate);
      .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
      .                           RelateRegionParamBound(cause.span)
      .                       });
  1,200 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
      .                       Ok(())
      .                   })
    960 ( 0.00%)      }
      .           
      .               /// Number of type variables created so far.
     26 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
      .                   self.inner.borrow_mut().type_variables().num_vars()
     52 ( 0.00%)      }
      .           
  3,378 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
 16,890 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
  5,067 ( 0.00%)      }
      .           
  3,280 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
 11,774 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
  4,920 ( 0.00%)      }
      .           
    502 ( 0.00%)      pub fn next_ty_var_in_universe(
      .                   &self,
      .                   origin: TypeVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> Ty<'tcx> {
  2,761 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
    251 ( 0.00%)          self.tcx.mk_ty_var(vid)
    753 ( 0.00%)      }
      .           
      .               pub fn next_const_var(
      .                   &self,
      .                   ty: Ty<'tcx>,
      .                   origin: ConstVariableOrigin,
      .               ) -> &'tcx ty::Const<'tcx> {
      .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
      .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
      .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
      .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
      .                       origin,
      .                       val: ConstVariableValue::Unknown { universe: self.universe() },
      .                   })
      .               }
      .           
      .               fn next_int_var_id(&self) -> IntVid {
     20 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
      .               }
      .           
     12 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
      .                   self.tcx.mk_int_var(self.next_int_var_id())
     16 ( 0.00%)      }
      .           
      .               fn next_float_var_id(&self) -> FloatVid {
      .                   self.inner.borrow_mut().float_unification_table().new_key(None)
      .               }
      .           
      .               pub fn next_float_var(&self) -> Ty<'tcx> {
      .                   self.tcx.mk_float_var(self.next_float_var_id())
      .               }
      .           
      .               /// Creates a fresh region variable with the next available index.
      .               /// The variable will be created in the maximum universe created
      .               /// thus far, allowing it to name any region created thus far.
  1,509 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
 54,090 ( 0.01%)          self.next_region_var_in_universe(origin, self.universe())
  3,018 ( 0.00%)      }
      .           
      .               /// Creates a fresh region variable with the next available index
      .               /// in the given universe; typically, you can use
      .               /// `next_region_var` and just use the maximal universe.
 21,976 ( 0.00%)      pub fn next_region_var_in_universe(
      .                   &self,
      .                   origin: RegionVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> ty::Region<'tcx> {
      .                   let region_var =
142,844 ( 0.02%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
 54,940 ( 0.01%)          self.tcx.mk_region(ty::ReVar(region_var))
 32,964 ( 0.00%)      }
      .           
      .               /// Return the universe that the region `r` was created in.  For
      .               /// most regions (e.g., `'static`, named regions from the user,
      .               /// etc) this is the root universe U0. For inference variables or
      .               /// placeholders, however, it will return the universe which which
      .               /// they are associated.
  1,028 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
      .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
  1,542 ( 0.00%)      }
      .           
      .               /// Number of region variables created so far.
  1,538 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
      .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
  2,307 ( 0.00%)      }
      .           
      .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
  2,892 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
      .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
  5,784 ( 0.00%)      }
      .           
      .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
    103 ( 0.00%)      pub fn next_nll_region_var_in_universe(
      .                   &self,
      .                   origin: NllRegionVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> ty::Region<'tcx> {
    749 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
    206 ( 0.00%)      }
      .           
 67,552 ( 0.01%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
 32,338 ( 0.00%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
      .                           // Create a region inference variable for the given
      .                           // region parameter definition.
  4,941 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
      .                       }
      .                       GenericParamDefKind::Type { .. } => {
      .                           // Create a type inference variable for the given
      .                           // type parameter definition. The substitutions are
      .                           // for actual parameters that may be referred to by
      .                           // the default of this type parameter, if it exists.
      .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
      .                           // used in a path such as `Foo::<T, U>::new()` will
      .                           // use an inference variable for `C` with `[T, U]`
      .                           // as the substitutions for the default, `(T, U)`.
 14,000 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
      .                               self.universe(),
 17,500 ( 0.00%)                      TypeVariableOrigin {
      .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
  3,500 ( 0.00%)                              param.name,
  3,500 ( 0.00%)                              Some(param.def_id),
      .                                   ),
      .                                   span,
      .                               },
      .                           );
      .           
  3,500 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
      .                       }
      .                       GenericParamDefKind::Const { .. } => {
      .                           let origin = ConstVariableOrigin {
      .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
      .                                   param.name,
      .                                   param.def_id,
      .                               ),
      .                               span,
      .                           };
      .                           let const_var_id =
     33 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
      .                                   origin,
      .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
      .                               });
      3 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
      .                       }
      .                   }
     24 ( 0.00%)      }
      .           
      .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
      .               /// type/region parameter to a fresh inference variable.
 19,785 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
 80,530 ( 0.01%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
 13,190 ( 0.00%)      }
      .           
      .               /// Returns `true` if errors have been reported since this infcx was
      .               /// created. This is sometimes used as a heuristic to skip
      .               /// reporting errors that often occur as a result of earlier
      .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
      .               /// inference variables, regionck errors).
    444 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
      .                   debug!(
      .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
      .                        tainted_by_errors_flag={})",
      .                       self.tcx.sess.err_count(),
      .                       self.err_count_on_creation,
      .                       self.tainted_by_errors_flag.get()
      .                   );
      .           
 14,592 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
      .                       return true; // errors reported since this infcx was made
      .                   }
      .                   self.tainted_by_errors_flag.get()
    666 ( 0.00%)      }
      .           
      .               /// Set the "tainted by errors" flag to true. We call this when we
      .               /// observe an error from a prior pass.
      .               pub fn set_tainted_by_errors(&self) {
      .                   debug!("set_tainted_by_errors()");
      .                   self.tainted_by_errors_flag.set(true)
      .               }
      .           
      .               /// Process the region constraints and return any any errors that
      .               /// result. After this, no more unification operations should be
      .               /// done -- or the compiler will panic -- but it is legal to use
      .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
 15,211 ( 0.00%)      pub fn resolve_regions(
      .                   &self,
      .                   region_context: DefId,
      .                   outlives_env: &OutlivesEnvironment<'tcx>,
      .                   mode: RegionckMode,
      .               ) -> Vec<RegionResolutionError<'tcx>> {
 41,287 ( 0.01%)          let (var_infos, data) = {
      .                       let mut inner = self.inner.borrow_mut();
      .                       let inner = &mut *inner;
  2,173 ( 0.00%)              assert!(
  6,519 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
      .                           "region_obligations not empty: {:#?}",
      .                           inner.region_obligations
      .                       );
      .                       inner
      .                           .region_constraint_storage
      .                           .take()
      .                           .expect("regions already resolved")
      .                           .with_log(&mut inner.undo_log)
      .                           .into_infos_and_data()
  2,173 ( 0.00%)          };
      .           
      .                   let region_rels =
  2,173 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
      .           
 19,557 ( 0.00%)          let (lexical_region_resolutions, errors) =
 52,152 ( 0.01%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
      .           
  8,692 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
  2,173 ( 0.00%)          assert!(old_value.is_none());
      .           
      .                   errors
 19,557 ( 0.00%)      }
      .           
      .               /// Process the region constraints and report any errors that
      .               /// result. After this, no more unification operations should be
      .               /// done -- or the compiler will panic -- but it is legal to use
      .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
 21,730 ( 0.00%)      pub fn resolve_regions_and_report_errors(
      .                   &self,
      .                   region_context: DefId,
      .                   outlives_env: &OutlivesEnvironment<'tcx>,
      .                   mode: RegionckMode,
      .               ) {
  4,346 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
      .           
  6,519 ( 0.00%)          if !self.is_tainted_by_errors() {
      .                       // As a heuristic, just skip reporting region errors
      .                       // altogether if other errors have been reported while
      .                       // this infcx was in use.  This is totally hokey but
      .                       // otherwise we have a hard time separating legit region
      .                       // errors from silly ones.
  4,346 ( 0.00%)              self.report_region_errors(&errors);
      .                   }
 10,865 ( 0.00%)      }
      .           
      .               /// Obtains (and clears) the current set of region
      .               /// constraints. The inference context is still usable: further
      .               /// unifications will simply add new constraints.
      .               ///
      .               /// This method is not meant to be used with normal lexical region
      .               /// resolution. Rather, it is used in the NLL mode as a kind of
      .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
      .               }
      .           
      .               /// Gives temporary access to the region constraint data.
      .               pub fn with_region_constraints<R>(
      .                   &self,
      .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
      .               ) -> R {
      .                   let mut inner = self.inner.borrow_mut();
  4,036 ( 0.00%)          op(inner.unwrap_region_constraints().data())
      .               }
      .           
      .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
      .                   let mut inner = self.inner.borrow_mut();
      .                   let inner = &mut *inner;
      .                   inner
      .                       .region_constraint_storage
      .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
      .                       .var_origin(vid)
      .               }
      .           
      .               /// Takes ownership of the list of variable regions. This implies
      .               /// that all the region constraints have already been taken, and
      .               /// hence that `resolve_regions_and_report_errors` can never be
      .               /// called. This is used only during NLL processing to "hand off" ownership
      .               /// of the set of region variables into the NLL region context.
    945 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
      .                   let mut inner = self.inner.borrow_mut();
  3,591 ( 0.00%)          let (var_infos, data) = inner
      .                       .region_constraint_storage
      .                       .take()
      .                       .expect("regions already resolved")
      .                       .with_log(&mut inner.undo_log)
    189 ( 0.00%)              .into_infos_and_data();
    189 ( 0.00%)          assert!(data.is_empty());
      .                   var_infos
  1,512 ( 0.00%)      }
      .           
      .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
      .                   self.resolve_vars_if_possible(t).to_string()
      .               }
      .           
      .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
      .               /// universe index of `TyVar(vid)`.
  1,798 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
      .                   use self::type_variable::TypeVariableValue;
      .           
  5,394 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
      .                       TypeVariableValue::Known { value } => Ok(value),
      .                       TypeVariableValue::Unknown { universe } => Err(universe),
      .                   }
  6,293 ( 0.00%)      }
      .           
      .               /// Resolve any type variables found in `value` -- but only one
      .               /// level.  So, if the variable `?X` is bound to some type
      .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
      .               /// itself be bound to a type).
      .               ///
      .               /// Useful when you only need to inspect the outermost level of
      .               /// the type and don't care about nested types (or perhaps you
      .               /// will be resolving them as well, e.g. in a loop).
      .               pub fn shallow_resolve<T>(&self, value: T) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 34,094 ( 0.00%)          value.fold_with(&mut ShallowResolver { infcx: self })
      .               }
      .           
  1,868 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
      .                   self.inner.borrow_mut().type_variables().root_var(var)
  2,802 ( 0.00%)      }
      .           
      .               /// Where possible, replaces type/const variables in
      .               /// `value` with their final value. Note that region variables
      .               /// are unaffected. If a type/const variable has not been unified, it
      .               /// is left as is. This is an idempotent operation that does
      .               /// not affect inference state in any way and so you can do it
      .               /// at will.
 16,472 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 31,658 ( 0.00%)          if !value.needs_infer() {
 40,960 ( 0.01%)              return value; // Avoid duplicated subst-folding.
      .                   }
 35,529 ( 0.00%)          let mut r = resolve::OpportunisticVarResolver::new(self);
 46,722 ( 0.01%)          value.fold_with(&mut r)
 15,158 ( 0.00%)      }
      .           
      .               /// Returns the first unresolved variable contained in `T`. In the
      .               /// process of visiting `T`, this will resolve (where possible)
      .               /// type variables in `T`, but it never constructs the final,
      .               /// resolved type, so it's more efficient than
      .               /// `resolve_vars_if_possible()`.
      .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
    416 ( 0.00%)          value.visit_with(&mut resolve::UnresolvedTypeFinder::new(self)).break_value()
      .               }
      .           
      .               pub fn probe_const_var(
      .                   &self,
      .                   vid: ty::ConstVid<'tcx>,
      .               ) -> Result<&'tcx ty::Const<'tcx>, ty::UniverseIndex> {
      .                   match self.inner.borrow_mut().const_unification_table().probe_value(vid).val {
      .                       ConstVariableValue::Known { value } => Ok(value),
-- line 1426 ----------------------------------------
-- line 1490 ----------------------------------------
      .                   expected: &'tcx ty::Const<'tcx>,
      .                   actual: &'tcx ty::Const<'tcx>,
      .                   err: TypeError<'tcx>,
      .               ) -> DiagnosticBuilder<'tcx> {
      .                   let trace = TypeTrace::consts(cause, true, expected, actual);
      .                   self.report_and_explain_type_error(trace, &err)
      .               }
      .           
  3,573 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
      .                   &self,
      .                   span: Span,
      .                   lbrct: LateBoundRegionConversionTime,
      .                   value: ty::Binder<'tcx, T>,
      .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   let fld_r =
 17,201 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
      .                   let fld_t = |_| {
      .                       self.next_ty_var(TypeVariableOrigin {
      .                           kind: TypeVariableOriginKind::MiscVariable,
      .                           span,
      .                       })
      .                   };
      .                   let fld_c = |_, ty| {
      .                       self.next_const_var(
      .                           ty,
      .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
      .                       )
      .                   };
 29,010 ( 0.00%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
  2,382 ( 0.00%)      }
      .           
      .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
    264 ( 0.00%)      pub fn verify_generic_bound(
      .                   &self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   kind: GenericKind<'tcx>,
      .                   a: ty::Region<'tcx>,
      .                   bound: VerifyBound<'tcx>,
      .               ) {
      .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
      .           
     99 ( 0.00%)          self.inner
      .                       .borrow_mut()
      .                       .unwrap_region_constraints()
    561 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
    231 ( 0.00%)      }
      .           
      .               /// Obtains the latest type of the given closure; this may be a
      .               /// closure in the current function, in which case its
      .               /// `ClosureKind` may not yet be known.
    206 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
    412 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
      .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
    309 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
      .               }
      .           
      .               /// Clears the selection, evaluation, and projection caches. This is useful when
      .               /// repeatedly attempting to select an `Obligation` while changing only
      .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
      .               pub fn clear_caches(&self) {
      .                   self.selection_cache.clear();
      .                   self.evaluation_cache.clear();
      .                   self.inner.borrow_mut().projection_cache().clear();
      .               }
      .           
      .               pub fn universe(&self) -> ty::UniverseIndex {
 78,037 ( 0.01%)          self.universe.get()
 21,586 ( 0.00%)      }
      .           
      .               /// Creates and return a fresh universe that extends all previous
      .               /// universes. Updates `self.universe` to that new universe.
    188 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
    280 ( 0.00%)          let u = self.universe.get().next_universe();
      .                   self.universe.set(u);
      .                   u
    188 ( 0.00%)      }
      .           
      .               /// Resolves and evaluates a constant.
      .               ///
      .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
      .               /// substitutions and environment are used to resolve the constant. Alternatively if the
      .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
      .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
      .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
-- line 1576 ----------------------------------------
-- line 1606 ----------------------------------------
      .                   // variables, thus we don't need to substitute back the original values.
      .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
      .               }
      .           
      .               /// If `typ` is a type variable of some kind, resolve it one level
      .               /// (but do not resolve types found in the result). If `typ` is
      .               /// not a type variable, just return it unmodified.
      .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
357,232 ( 0.05%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
181,444 ( 0.02%)          match *typ.kind() {
      .                       ty::Infer(ty::TyVar(v)) => {
      .                           // Not entirely obvious: if `typ` is a type variable,
      .                           // it can be resolved to an int/float variable, which
      .                           // can then be recursively resolved, hence the
      .                           // recursion. Note though that we prevent type
      .                           // variables from unifying to other type variables
      .                           // directly (though they may be embedded
      .                           // structurally), and we prevent cycles in any case,
      .                           // so this recursion should always be of very limited
      .                           // depth.
      .                           //
      .                           // Note: if these two lines are combined into one we get
      .                           // dynamic borrow errors on `self.inner`.
 93,068 ( 0.01%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
      .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
      .                       }
      .           
    348 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
      .                           .inner
      .                           .borrow_mut()
      .                           .int_unification_table()
      .                           .probe_value(v)
    120 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
      .                           .unwrap_or(typ),
      .           
      .                       ty::Infer(ty::FloatVar(v)) => self
      .                           .inner
      .                           .borrow_mut()
      .                           .float_unification_table()
      .                           .probe_value(v)
      .                           .map(|v| v.to_type(self.tcx))
      .                           .unwrap_or(typ),
      .           
      .                       _ => typ,
      .                   }
401,886 ( 0.05%)      }
      .           
      .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
      .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
      .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
      .               ///
      .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
      .               /// inlined, despite being large, because it has only two call sites that
      .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
      .               #[inline(always)]
      .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
      .                   match infer_var {
      .                       TyOrConstInferVar::Ty(v) => {
      .                           use self::type_variable::TypeVariableValue;
      .           
      .                           // If `inlined_probe` returns a `Known` value, it never equals
      .                           // `ty::Infer(ty::TyVar(v))`.
 46,741 ( 0.01%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
      .                               TypeVariableValue::Unknown { .. } => false,
      .                               TypeVariableValue::Known { .. } => true,
      .                           }
      .                       }
      .           
      .                       TyOrConstInferVar::TyInt(v) => {
      .                           // If `inlined_probe_value` returns a value it's always a
      .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
-- line 1678 ----------------------------------------
-- line 1716 ----------------------------------------
      .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
      .               Const(ConstVid<'tcx>),
      .           }
      .           
      .           impl<'tcx> TyOrConstInferVar<'tcx> {
      .               /// Tries to extract an inference variable from a type or a constant, returns `None`
      .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
      .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
    833 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
      .                   match arg.unpack() {
      .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
      .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
      .                       GenericArgKind::Lifetime(_) => None,
      .                   }
    833 ( 0.00%)      }
      .           
      .               /// Tries to extract an inference variable from a type, returns `None`
      .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
     70 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
  8,092 ( 0.00%)          match *ty.kind() {
  1,796 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
      .                       ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
      .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
      .                       _ => None,
      .                   }
     70 ( 0.00%)      }
      .           
      .               /// Tries to extract an inference variable from a constant, returns `None`
      .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
      .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
      .                   match ct.val {
      .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
      .                       _ => None,
      .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
      .           }
      .           
      .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
      .                   self.infcx.tcx
      .               }
      .           
      .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
 68,244 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
      .               }
      .           
    372 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    192 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
     15 ( 0.00%)              self.infcx
      .                           .inner
      .                           .borrow_mut()
      .                           .const_unification_table()
      9 ( 0.00%)                  .probe_value(*vid)
      .                           .val
      .                           .known()
      .                           .unwrap_or(ct)
      .                   } else {
      .                       ct
      .                   }
    465 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TypeTrace<'tcx> {
      .               pub fn span(&self) -> Span {
     26 ( 0.00%)          self.cause.span
      .               }
      .           
      .               pub fn types(
      .                   cause: &ObligationCause<'tcx>,
      .                   a_is_expected: bool,
      .                   a: Ty<'tcx>,
      .                   b: Ty<'tcx>,
      .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
      .                   b: &'tcx ty::Const<'tcx>,
      .               ) -> TypeTrace<'tcx> {
      .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
      .               }
      .           }
      .           
      .           impl<'tcx> SubregionOrigin<'tcx> {
      .               pub fn span(&self) -> Span {
     65 ( 0.00%)          match *self {
     13 ( 0.00%)              Subtype(ref a) => a.span(),
      .                       RelateObjectBound(a) => a,
      .                       RelateParamBound(a, ..) => a,
      .                       RelateRegionParamBound(a) => a,
      .                       Reborrow(a) => a,
      .                       ReborrowUpvar(a, _) => a,
      .                       DataBorrowed(_, a) => a,
      .                       ReferenceOutlivesReferent(_, a) => a,
      .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
      .                       CompareImplTypeObligation { span, .. } => span,
      .                   }
      .               }
      .           
      .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
      .               where
      .                   F: FnOnce() -> Self,
      .               {
  4,130 ( 0.00%)          match *cause.code() {
    812 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
  4,060 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
      .                       }
      .           
      .                       traits::ObligationCauseCode::CompareImplMethodObligation {
      .                           impl_item_def_id,
      .                           trait_item_def_id,
      .                       } => SubregionOrigin::CompareImplMethodObligation {
      .                           span: cause.span,
      .                           impl_item_def_id,
-- line 1836 ----------------------------------------

296,190 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs
--------------------------------------------------------------------------------
Ir                 

-- line 13 ----------------------------------------
        .               reserve: extern "C" fn(Buffer<T>, usize) -> Buffer<T>,
        .               drop: extern "C" fn(Buffer<T>),
        .           }
        .           
        .           unsafe impl<T: Copy + Sync> Sync for Buffer<T> {}
        .           unsafe impl<T: Copy + Send> Send for Buffer<T> {}
        .           
        .           impl<T: Copy> Default for Buffer<T> {
      270 ( 0.00%)      fn default() -> Self {
      360 ( 0.00%)          Self::from(vec![])
      180 ( 0.00%)      }
        .           }
        .           
        .           impl<T: Copy> Deref for Buffer<T> {
        .               type Target = [T];
       45 ( 0.00%)      fn deref(&self) -> &[T] {
  204,374 ( 0.03%)          unsafe { slice::from_raw_parts(self.data as *const T, self.len) }
       30 ( 0.00%)      }
        .           }
        .           
        .           impl<T: Copy> DerefMut for Buffer<T> {
        .               fn deref_mut(&mut self) -> &mut [T] {
        .                   unsafe { slice::from_raw_parts_mut(self.data, self.len) }
        .               }
        .           }
        .           
        .           impl<T: Copy> Buffer<T> {
        .               pub(super) fn new() -> Self {
        .                   Self::default()
        .               }
        .           
       30 ( 0.00%)      pub(super) fn clear(&mut self) {
  429,074 ( 0.06%)          self.len = 0;
       30 ( 0.00%)      }
        .           
      360 ( 0.00%)      pub(super) fn take(&mut self) -> Self {
       90 ( 0.00%)          mem::take(self)
      180 ( 0.00%)      }
        .           
        .               // We have the array method separate from extending from a slice. This is
        .               // because in the case of small arrays, codegen can be more efficient
        .               // (avoiding a memmove call). With extend_from_slice, LLVM at least
        .               // currently is not able to make that optimization.
       75 ( 0.00%)      pub(super) fn extend_from_array<const N: usize>(&mut self, xs: &[T; N]) {
  929,449 ( 0.12%)          if xs.len() > (self.capacity - self.len) {
        .                       let b = self.take();
      630 ( 0.00%)              *self = (b.reserve)(b, xs.len());
        .                   }
        .                   unsafe {
  159,113 ( 0.02%)              xs.as_ptr().copy_to_nonoverlapping(self.data.add(self.len), xs.len());
  480,781 ( 0.06%)              self.len += xs.len();
        .                   }
       30 ( 0.00%)      }
        .           
   23,802 ( 0.00%)      pub(super) fn extend_from_slice(&mut self, xs: &[T]) {
   56,490 ( 0.01%)          if xs.len() > (self.capacity - self.len) {
        .                       let b = self.take();
    1,260 ( 0.00%)              *self = (b.reserve)(b, xs.len());
        .                   }
        .                   unsafe {
       60 ( 0.00%)              xs.as_ptr().copy_to_nonoverlapping(self.data.add(self.len), xs.len());
   28,245 ( 0.00%)              self.len += xs.len();
        .                   }
   27,769 ( 0.00%)      }
        .           
       90 ( 0.00%)      pub(super) fn push(&mut self, v: T) {
        .                   // The code here is taken from Vec::push, and we know that reserve()
        .                   // will panic if we're exceeding isize::MAX bytes and so there's no need
        .                   // to check for overflow.
1,055,664 ( 0.14%)          if self.len == self.capacity {
        .                       let b = self.take();
        .                       *self = (b.reserve)(b, 1);
        .                   }
        .                   unsafe {
  695,794 ( 0.09%)              *self.data.add(self.len) = v;
  616,667 ( 0.08%)              self.len += 1;
        .                   }
       30 ( 0.00%)      }
        .           }
        .           
        .           impl Write for Buffer<u8> {
        .               fn write(&mut self, xs: &[u8]) -> io::Result<usize> {
        .                   self.extend_from_slice(xs);
        .                   Ok(xs.len())
        .               }
        .           
   32,688 ( 0.00%)      fn write_all(&mut self, xs: &[u8]) -> io::Result<()> {
   11,901 ( 0.00%)          self.extend_from_slice(xs);
        .                   Ok(())
   49,032 ( 0.01%)      }
        .           
        .               fn flush(&mut self) -> io::Result<()> {
        .                   Ok(())
        .               }
        .           }
        .           
        .           impl<T: Copy> Drop for Buffer<T> {
      135 ( 0.00%)      fn drop(&mut self) {
       90 ( 0.00%)          let b = self.take();
1,078,827 ( 0.14%)          (b.drop)(b);
       90 ( 0.00%)      }
        .           }
        .           
        .           impl<T: Copy> From<Vec<T>> for Buffer<T> {
      540 ( 0.00%)      fn from(mut v: Vec<T>) -> Self {
    2,340 ( 0.00%)          let (data, len, capacity) = (v.as_mut_ptr(), v.len(), v.capacity());
      720 ( 0.00%)          mem::forget(v);
        .           
        .                   // This utility function is nested in here because it can *only*
        .                   // be safely called on `Buffer`s created by *this* `proc_macro`.
      135 ( 0.00%)          fn to_vec<T: Copy>(b: Buffer<T>) -> Vec<T> {
        .                       unsafe {
      405 ( 0.00%)                  let Buffer { data, len, capacity, .. } = b;
      225 ( 0.00%)                  mem::forget(b);
       45 ( 0.00%)                  Vec::from_raw_parts(data, len, capacity)
        .                       }
       90 ( 0.00%)          }
        .           
      360 ( 0.00%)          extern "C" fn reserve<T: Copy>(b: Buffer<T>, additional: usize) -> Buffer<T> {
      270 ( 0.00%)              let mut v = to_vec(b);
        .                       v.reserve(additional);
      270 ( 0.00%)              Buffer::from(v)
      360 ( 0.00%)          }
        .           
       90 ( 0.00%)          extern "C" fn drop<T: Copy>(b: Buffer<T>) {
   90,221 ( 0.01%)              mem::drop(to_vec(b));
   89,921 ( 0.01%)          }
        .           
    1,380 ( 0.00%)          Buffer { data, len, capacity, reserve, drop }
      180 ( 0.00%)      }
        .           }

  444,778 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 42 ----------------------------------------
      .           /// `stack_size` bytes.
      .           ///
      .           /// The closure `f` is guaranteed to run on a stack with at least `red_zone` bytes, and it will be
      .           /// run on the current stack if there's space available.
      .           #[inline(always)]
      .           pub fn maybe_grow<R, F: FnOnce() -> R>(red_zone: usize, stack_size: usize, callback: F) -> R {
      .               // if we can't guess the remaining stack (unsupported on some platforms) we immediately grow
      .               // the stack and then cache the new stack size (which we do know now because we allocated it.
166,782 ( 0.02%)      let enough_space = match remaining_stack() {
      .                   Some(remaining) => remaining >= red_zone,
      .                   None => false,
      .               };
225,897 ( 0.03%)      if enough_space {
 14,194 ( 0.00%)          callback()
      .               } else {
      .                   grow(stack_size, callback)
      .               }
      .           }
      .           
      .           /// Always creates a new stack for the passed closure to run on.
      .           /// The closure will still be on the same thread as the caller of `grow`.
      .           /// This will allocate a new stack with at least `stack_size` bytes.
-- line 63 ----------------------------------------
-- line 82 ----------------------------------------
      .               _grow(stack_size, dyn_callback);
      .               ret.unwrap()
      .           }
      .           
      .           /// Queries the amount of remaining stack as interpreted by this library.
      .           ///
      .           /// This function will return the amount of stack space left which will be used
      .           /// to determine whether a stack switch should be made or not.
150,598 ( 0.02%)  pub fn remaining_stack() -> Option<usize> {
      .               let current_ptr = current_stack_ptr();
150,598 ( 0.02%)      get_stack_limit().map(|limit| current_ptr - limit)
301,196 ( 0.04%)  }
      .           
      .           psm_stack_information! (
      .               yes {
      .                   fn current_stack_ptr() -> usize {
150,598 ( 0.02%)              psm::stack_pointer() as usize
      .                   }
      .               }
      .               no {
      .                   #[inline(always)]
      .                   fn current_stack_ptr() -> usize {
      .                       unsafe {
      .                           let mut x = std::mem::MaybeUninit::<u8>::uninit();
      .                           // Unlikely to be ever exercised. As a fallback we execute a volatile read to a
-- line 106 ----------------------------------------
-- line 111 ----------------------------------------
      .                           x.as_ptr() as usize
      .                       }
      .                   }
      .               }
      .           );
      .           
      .           thread_local! {
      .               static STACK_LIMIT: Cell<Option<usize>> = Cell::new(unsafe {
      1 ( 0.00%)          guess_os_stack_limit()
      .               })
      .           }
      .           
      .           #[inline(always)]
      .           fn get_stack_limit() -> Option<usize> {
      .               STACK_LIMIT.with(|s| s.get())
      .           }
      .           
-- line 127 ----------------------------------------
-- line 403 ----------------------------------------
      .                       VirtualQuery(
      .                           psm::stack_pointer() as *const _,
      .                           mi.as_mut_ptr(),
      .                           std::mem::size_of::<QueryT>() as SIZE_T,
      .                       );
      .                       Some(mi.assume_init().AllocationBase as usize + get_thread_stack_guarantee() + 0x1000)
      .                   }
      .               } else if #[cfg(any(target_os = "linux", target_os="solaris", target_os = "netbsd"))] {
      2 ( 0.00%)          unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      7 ( 0.00%)              assert_eq!(libc::pthread_getattr_np(libc::pthread_self(),
      .                                                           attr.as_mut_ptr()), 0);
      1 ( 0.00%)              let mut stackaddr = std::ptr::null_mut();
      4 ( 0.00%)              let mut stacksize = 0;
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_getstack(
      .                           attr.as_ptr(), &mut stackaddr, &mut stacksize
      .                       ), 0);
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_destroy(attr.as_mut_ptr()), 0);
      1 ( 0.00%)              Some(stackaddr as usize)
      3 ( 0.00%)          }
      .               } else if #[cfg(any(target_os = "freebsd", target_os = "dragonfly"))] {
      .                   unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      .                       assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      .                       assert_eq!(libc::pthread_attr_get_np(libc::pthread_self(), attr.as_mut_ptr()), 0);
      .                       let mut stackaddr = std::ptr::null_mut();
      .                       let mut stacksize = 0;
      .                       assert_eq!(libc::pthread_attr_getstack(
-- line 431 ----------------------------------------

 90,878 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/traits.rs
--------------------------------------------------------------------------------
Ir               

-- line 20 ----------------------------------------
      .               fn cmp(&self, other: &str) -> Ordering {
      .                   self.as_bytes().cmp(other.as_bytes())
      .               }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl PartialEq for str {
      .               #[inline]
379,764 ( 0.05%)      fn eq(&self, other: &str) -> bool {
337,568 ( 0.04%)          self.as_bytes() == other.as_bytes()
168,784 ( 0.02%)      }
      .               #[inline]
      .               fn ne(&self, other: &str) -> bool {
      .                   !(*self).eq(other)
      .               }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl Eq for str {}
-- line 38 ----------------------------------------
-- line 55 ----------------------------------------
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<I> ops::Index<I> for str
      .           where
      .               I: SliceIndex<str>,
      .           {
      .               type Output = I::Output;
      .           
      .               #[inline]
 21,422 ( 0.00%)      fn index(&self, index: I) -> &I::Output {
 17,157 ( 0.00%)          index.index(self)
 11,438 ( 0.00%)      }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<I> ops::IndexMut<I> for str
      .           where
      .               I: SliceIndex<str>,
      .           {
      .               #[inline]
-- line 73 ----------------------------------------
-- line 110 ----------------------------------------
      .               unsafe fn get_unchecked(self, slice: *const str) -> *const Self::Output {
      .                   slice
      .               }
      .               #[inline]
      .               unsafe fn get_unchecked_mut(self, slice: *mut str) -> *mut Self::Output {
      .                   slice
      .               }
      .               #[inline]
 29,196 ( 0.00%)      fn index(self, slice: &str) -> &Self::Output {
      .                   slice
  9,732 ( 0.00%)      }
      .               #[inline]
      .               fn index_mut(self, slice: &mut str) -> &mut Self::Output {
      .                   slice
      .               }
      .           }
      .           
      .           /// Implements substring slicing with syntax `&self[begin .. end]` or `&mut
      .           /// self[begin .. end]`.
-- line 128 ----------------------------------------
-- line 159 ----------------------------------------
      .           /// // byte 100 is outside the string
      .           /// // &s[3 .. 100];
      .           /// ```
      .           #[stable(feature = "str_checked_slicing", since = "1.20.0")]
      .           unsafe impl SliceIndex<str> for ops::Range<usize> {
      .               type Output = str;
      .               #[inline]
      .               fn get(self, slice: &str) -> Option<&Self::Output> {
 49,020 ( 0.01%)          if self.start <= self.end
      .                       && slice.is_char_boundary(self.start)
      .                       && slice.is_char_boundary(self.end)
      .                   {
      .                       // SAFETY: just checked that `start` and `end` are on a char boundary,
      .                       // and we are passing in a safe reference, so the return value will also be one.
      .                       // We also checked char boundaries, so this is valid UTF-8.
      .                       Some(unsafe { &*self.get_unchecked(slice) })
      .                   } else {
-- line 175 ----------------------------------------
-- line 190 ----------------------------------------
      .                   }
      .               }
      .               #[inline]
      .               unsafe fn get_unchecked(self, slice: *const str) -> *const Self::Output {
      .                   let slice = slice as *const [u8];
      .                   // SAFETY: the caller guarantees that `self` is in bounds of `slice`
      .                   // which satisfies all the conditions for `add`.
      .                   let ptr = unsafe { slice.as_ptr().add(self.start) };
 32,520 ( 0.00%)          let len = self.end - self.start;
      .                   ptr::slice_from_raw_parts(ptr, len) as *const str
      .               }
      .               #[inline]
      .               unsafe fn get_unchecked_mut(self, slice: *mut str) -> *mut Self::Output {
      .                   let slice = slice as *mut [u8];
      .                   // SAFETY: see comments for `get_unchecked`.
      .                   let ptr = unsafe { slice.as_mut_ptr().add(self.start) };
      .                   let len = self.end - self.start;
-- line 206 ----------------------------------------
-- line 315 ----------------------------------------
      .           /// # Panics
      .           ///
      .           /// Panics if `begin` does not point to the starting byte offset of
      .           /// a character (as defined by `is_char_boundary`), or if `begin > len`.
      .           #[stable(feature = "str_checked_slicing", since = "1.20.0")]
      .           unsafe impl SliceIndex<str> for ops::RangeFrom<usize> {
      .               type Output = str;
      .               #[inline]
 11,089 ( 0.00%)      fn get(self, slice: &str) -> Option<&Self::Output> {
  6,066 ( 0.00%)          if slice.is_char_boundary(self.start) {
      .                       // SAFETY: just checked that `start` is on a char boundary,
      .                       // and we are passing in a safe reference, so the return value will also be one.
  4,265 ( 0.00%)              Some(unsafe { &*self.get_unchecked(slice) })
      .                   } else {
      .                       None
      .                   }
  3,412 ( 0.00%)      }
      .               #[inline]
      .               fn get_mut(self, slice: &mut str) -> Option<&mut Self::Output> {
      .                   if slice.is_char_boundary(self.start) {
      .                       // SAFETY: just checked that `start` is on a char boundary,
      .                       // and we are passing in a safe reference, so the return value will also be one.
      .                       Some(unsafe { &mut *self.get_unchecked_mut(slice) })
      .                   } else {
      .                       None
      .                   }
      .               }
      .               #[inline]
 11,089 ( 0.00%)      unsafe fn get_unchecked(self, slice: *const str) -> *const Self::Output {
  1,706 ( 0.00%)          let slice = slice as *const [u8];
      .                   // SAFETY: the caller guarantees that `self` is in bounds of `slice`
      .                   // which satisfies all the conditions for `add`.
  2,559 ( 0.00%)          let ptr = unsafe { slice.as_ptr().add(self.start) };
 11,145 ( 0.00%)          let len = slice.len() - self.start;
  3,412 ( 0.00%)          ptr::slice_from_raw_parts(ptr, len) as *const str
  1,706 ( 0.00%)      }
      .               #[inline]
      .               unsafe fn get_unchecked_mut(self, slice: *mut str) -> *mut Self::Output {
      .                   let slice = slice as *mut [u8];
      .                   // SAFETY: identical to `get_unchecked`.
      .                   let ptr = unsafe { slice.as_mut_ptr().add(self.start) };
      .                   let len = slice.len() - self.start;
      .                   ptr::slice_from_raw_parts_mut(ptr, len) as *mut str
      .               }
      .               #[inline]
 11,942 ( 0.00%)      fn index(self, slice: &str) -> &Self::Output {
  8,530 ( 0.00%)          let (start, end) = (self.start, slice.len());
  8,530 ( 0.00%)          match self.get(slice) {
  3,412 ( 0.00%)              Some(s) => s,
      .                       None => super::slice_error_fail(slice, start, end),
      .                   }
  1,706 ( 0.00%)      }
      .               #[inline]
      .               fn index_mut(self, slice: &mut str) -> &mut Self::Output {
      .                   if slice.is_char_boundary(self.start) {
      .                       // SAFETY: just checked that `start` is on a char boundary,
      .                       // and we are passing in a safe reference, so the return value will also be one.
      .                       unsafe { &mut *self.get_unchecked_mut(slice) }
      .                   } else {
      .                       super::slice_error_fail(slice, self.start, slice.len())
-- line 374 ----------------------------------------

248,530 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/traits.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs
--------------------------------------------------------------------------------
Ir               

-- line 120 ----------------------------------------
      .           }
      .           
      .           /// Loads a u64 using up to 7 bytes of a byte slice. It looks clumsy but the
      .           /// `copy_nonoverlapping` calls that occur (via `load_int_le!`) all have fixed
      .           /// sizes and avoid calling `memcpy`, which is good for speed.
      .           ///
      .           /// Unsafe because: unchecked indexing at start..start+len
      .           #[inline]
  2,439 ( 0.00%)  unsafe fn u8to64_le(buf: &[u8], start: usize, len: usize) -> u64 {
      .               debug_assert!(len < 8);
    271 ( 0.00%)      let mut i = 0; // current byte index (from LSB) in the output u64
    271 ( 0.00%)      let mut out = 0;
292,237 ( 0.04%)      if i + 3 < len {
      .                   // SAFETY: `i` cannot be greater than `len`, and the caller must guarantee
      .                   // that the index start..start+len is in bounds.
  1,404 ( 0.00%)          out = unsafe { load_int_le!(buf, start + i, u32) } as u64;
    546 ( 0.00%)          i += 4;
      .               }
608,249 ( 0.08%)      if i + 1 < len {
      .                   // SAFETY: same as above.
304,141 ( 0.04%)          out |= (unsafe { load_int_le!(buf, start + i, u16) } as u64) << (i * 8);
151,460 ( 0.02%)          i += 2
      .               }
339,260 ( 0.05%)      if i < len {
      .                   // SAFETY: same as above.
472,962 ( 0.06%)          out |= (unsafe { *buf.get_unchecked(start + i) } as u64) << (i * 8);
  1,000 ( 0.00%)          i += 1;
      .               }
      .               debug_assert_eq!(i, len);
      .               out
    813 ( 0.00%)  }
      .           
      .           impl SipHasher {
      .               /// Creates a new `SipHasher` with the two initial keys set to 0.
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_deprecated(
      .                   since = "1.13.0",
      .                   reason = "use `std::collections::hash_map::DefaultHasher` instead"
-- line 158 ----------------------------------------
-- line 189 ----------------------------------------
      .           
      .               /// Creates a `SipHasher13` that is keyed off the provided keys.
      .               #[inline]
      .               #[unstable(feature = "hashmap_internals", issue = "none")]
      .               #[rustc_deprecated(
      .                   since = "1.13.0",
      .                   reason = "use `std::collections::hash_map::DefaultHasher` instead"
      .               )]
    235 ( 0.00%)      pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher13 {
 59,001 ( 0.01%)          SipHasher13 { hasher: Hasher::new_with_keys(key0, key1) }
     94 ( 0.00%)      }
      .           }
      .           
      .           impl<S: Sip> Hasher<S> {
      .               #[inline]
    282 ( 0.00%)      fn new_with_keys(key0: u64, key1: u64) -> Hasher<S> {
    758 ( 0.00%)          let mut state = Hasher {
      .                       k0: key0,
      .                       k1: key1,
      .                       length: 0,
    188 ( 0.00%)              state: State { v0: 0, v1: 0, v2: 0, v3: 0 },
      .                       tail: 0,
      .                       ntail: 0,
      .                       _marker: PhantomData,
      .                   };
     47 ( 0.00%)          state.reset();
      .                   state
     94 ( 0.00%)      }
      .           
      .               #[inline]
     94 ( 0.00%)      fn reset(&mut self) {
     47 ( 0.00%)          self.length = 0;
 88,146 ( 0.01%)          self.state.v0 = self.k0 ^ 0x736f6d6570736575;
 94,629 ( 0.01%)          self.state.v1 = self.k1 ^ 0x646f72616e646f6d;
    141 ( 0.00%)          self.state.v2 = self.k0 ^ 0x6c7967656e657261;
    141 ( 0.00%)          self.state.v3 = self.k1 ^ 0x7465646279746573;
     47 ( 0.00%)          self.ntail = 0;
     94 ( 0.00%)      }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl super::Hasher for SipHasher {
      .               #[inline]
      .               fn write(&mut self, msg: &[u8]) {
      .                   self.0.hasher.write(msg)
      .               }
-- line 234 ----------------------------------------
-- line 237 ----------------------------------------
      .               fn finish(&self) -> u64 {
      .                   self.0.hasher.finish()
      .               }
      .           }
      .           
      .           #[unstable(feature = "hashmap_internals", issue = "none")]
      .           impl super::Hasher for SipHasher13 {
      .               #[inline]
    968 ( 0.00%)      fn write(&mut self, msg: &[u8]) {
    242 ( 0.00%)          self.hasher.write(msg)
    484 ( 0.00%)      }
      .           
      .               #[inline]
    186 ( 0.00%)      fn finish(&self) -> u64 {
    186 ( 0.00%)          self.hasher.finish()
    186 ( 0.00%)      }
      .           }
      .           
      .           impl<S: Sip> super::Hasher for Hasher<S> {
      .               // Note: no integer hashing methods (`write_u*`, `write_i*`) are defined
      .               // for this type. We could add them, copy the `short_write` implementation
      .               // in librustc_data_structures/sip128.rs, and add `write_u*`/`write_i*`
      .               // methods to `SipHasher`, `SipHasher13`, and `DefaultHasher`. This would
      .               // greatly speed up integer hashing by those hashers, at the cost of
      .               // slightly slowing down compile speeds on some benchmarks. See #69152 for
      .               // details.
      .               #[inline]
  1,694 ( 0.00%)      fn write(&mut self, msg: &[u8]) {
    242 ( 0.00%)          let length = msg.len();
373,115 ( 0.05%)          self.length += length;
      .           
    242 ( 0.00%)          let mut needed = 0;
      .           
365,895 ( 0.05%)          if self.ntail != 0 {
185,290 ( 0.02%)              needed = 8 - self.ntail;
      .                       // SAFETY: `cmp::min(length, needed)` is guaranteed to not be over `length`
925,658 ( 0.12%)              self.tail |= unsafe { u8to64_le(msg, 0, cmp::min(length, needed)) } << (8 * self.ntail);
184,841 ( 0.02%)              if length < needed {
125,728 ( 0.02%)                  self.ntail += length;
      .                           return;
      .                       } else {
 29,730 ( 0.00%)                  self.state.v3 ^= self.tail;
     87 ( 0.00%)                  S::c_rounds(&mut self.state);
 59,373 ( 0.01%)                  self.state.v0 ^= self.tail;
 29,672 ( 0.00%)                  self.ntail = 0;
      .                       }
      .                   }
      .           
      .                   // Buffered tail is now flushed, process new input.
106,193 ( 0.01%)          let len = length - needed;
105,673 ( 0.01%)          let left = len & 0x7; // len % 8
      .           
    354 ( 0.00%)          let mut i = needed;
162,132 ( 0.02%)          while i < len - left {
      .                       // SAFETY: because `len - left` is the biggest multiple of 8 under
      .                       // `len`, and because `i` starts at `needed` where `len` is `length - needed`,
      .                       // `i + 8` is guaranteed to be less than or equal to `length`.
  3,424 ( 0.00%)              let mi = unsafe { load_int_le!(msg, i, u64) };
      .           
    594 ( 0.00%)              self.state.v3 ^= mi;
    428 ( 0.00%)              S::c_rounds(&mut self.state);
    594 ( 0.00%)              self.state.v0 ^= mi;
      .           
  1,830 ( 0.00%)              i += 8;
      .                   }
      .           
      .                   // SAFETY: `i` is now `needed + len.div_euclid(8) * 8`,
      .                   // so `i + left` = `needed + len` = `length`, which is by
      .                   // definition equal to `msg.len()`.
112,499 ( 0.01%)          self.tail = unsafe { u8to64_le(msg, i, left) };
    177 ( 0.00%)          self.ntail = left;
    726 ( 0.00%)      }
      .           
      .               #[inline]
    279 ( 0.00%)      fn finish(&self) -> u64 {
 30,082 ( 0.00%)          let mut state = self.state;
      .           
147,341 ( 0.02%)          let b: u64 = ((self.length as u64 & 0xff) << 56) | self.tail;
      .           
 29,524 ( 0.00%)          state.v3 ^= b;
    186 ( 0.00%)          S::c_rounds(&mut state);
 29,524 ( 0.00%)          state.v0 ^= b;
      .           
 29,617 ( 0.00%)          state.v2 ^= 0xff;
    186 ( 0.00%)          S::d_rounds(&mut state);
      .           
 59,048 ( 0.01%)          state.v0 ^ state.v1 ^ state.v2 ^ state.v3
    186 ( 0.00%)      }
      .           }
      .           
      .           impl<S: Sip> Clone for Hasher<S> {
      .               #[inline]
      .               fn clone(&self) -> Hasher<S> {
      .                   Hasher {
      .                       k0: self.k0,
      .                       k1: self.k1,
-- line 332 ----------------------------------------
-- line 353 ----------------------------------------
      .               fn d_rounds(_: &mut State);
      .           }
      .           
      .           #[derive(Debug, Clone, Default)]
      .           struct Sip13Rounds;
      .           
      .           impl Sip for Sip13Rounds {
      .               #[inline]
  1,008 ( 0.00%)      fn c_rounds(state: &mut State) {
403,859 ( 0.05%)          compress!(state);
    672 ( 0.00%)      }
      .           
      .               #[inline]
    279 ( 0.00%)      fn d_rounds(state: &mut State) {
122,560 ( 0.02%)          compress!(state);
122,560 ( 0.02%)          compress!(state);
 93,222 ( 0.01%)          compress!(state);
    186 ( 0.00%)      }
      .           }
      .           
      .           #[derive(Debug, Clone, Default)]
      .           struct Sip24Rounds;
      .           
      .           impl Sip for Sip24Rounds {
      .               #[inline]
      .               fn c_rounds(state: &mut State) {
-- line 378 ----------------------------------------

872,959 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs
--------------------------------------------------------------------------------
Ir                 

-- line 21 ----------------------------------------
        .           
        .           pub(super) trait DecodeMut<'a, 's, S>: Sized {
        .               fn decode(r: &mut Reader<'a>, s: &'s mut S) -> Self;
        .           }
        .           
        .           macro_rules! rpc_encode_decode {
        .               (le $ty:ty) => {
        .                   impl<S> Encode<S> for $ty {
  501,491 ( 0.07%)              fn encode(self, w: &mut Writer, _: &mut S) {
       90 ( 0.00%)                  w.extend_from_array(&self.to_le_bytes());
  626,800 ( 0.08%)              }
        .                   }
        .           
        .                   impl<S> DecodeMut<'_, '_, S> for $ty {
      120 ( 0.00%)              fn decode(r: &mut Reader<'_>, _: &mut S) -> Self {
        .                           const N: usize = ::std::mem::size_of::<$ty>();
        .           
      150 ( 0.00%)                  let mut bytes = [0; N];
   81,596 ( 0.01%)                  bytes.copy_from_slice(&r[..N]);
  320,926 ( 0.04%)                  *r = &r[N..];
        .           
      150 ( 0.00%)                  Self::from_le_bytes(bytes)
       60 ( 0.00%)              }
        .                   }
        .               };
        .               (struct $name:ident { $($field:ident),* $(,)? }) => {
        .                   impl<S> Encode<S> for $name {
        .                       fn encode(self, w: &mut Writer, s: &mut S) {
        .                           $(self.$field.encode(w, s);)*
        .                       }
        .                   }
-- line 51 ----------------------------------------
-- line 55 ----------------------------------------
        .                           $name {
        .                               $($field: DecodeMut::decode(r, s)),*
        .                           }
        .                       }
        .                   }
        .               };
        .               (enum $name:ident $(<$($T:ident),+>)? { $($variant:ident $(($field:ident))*),* $(,)? }) => {
        .                   impl<S, $($($T: Encode<S>),+)?> Encode<S> for $name $(<$($T),+>)? {
1,382,585 ( 0.18%)              fn encode(self, w: &mut Writer, s: &mut S) {
        .                           // HACK(eddyb): `Tag` enum duplicated between the
        .                           // two impls as there's no other place to stash it.
        .                           #[allow(non_upper_case_globals)]
        .                           mod tag {
        .                               #[repr(u8)] enum Tag { $($variant),* }
        .           
        .                               $(pub const $variant: u8 = Tag::$variant as u8;)*
        .                           }
        .           
  766,298 ( 0.10%)                  match self {
  157,372 ( 0.02%)                      $($name::$variant $(($field))* => {
   11,744 ( 0.00%)                          tag::$variant.encode(w, s);
  186,162 ( 0.02%)                          $($field.encode(w, s);)*
       30 ( 0.00%)                      })*
        .                           }
1,062,571 ( 0.14%)              }
        .                   }
        .           
        .                   impl<'a, S, $($($T: for<'s> DecodeMut<'a, 's, S>),+)?> DecodeMut<'a, '_, S>
        .                       for $name $(<$($T),+>)?
        .                   {
  364,550 ( 0.05%)              fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {
        .                           // HACK(eddyb): `Tag` enum duplicated between the
        .                           // two impls as there's no other place to stash it.
        .                           #[allow(non_upper_case_globals)]
        .                           mod tag {
        .                               #[repr(u8)] enum Tag { $($variant),* }
        .           
        .                               $(pub const $variant: u8 = Tag::$variant as u8;)*
        .                           }
        .           
  333,266 ( 0.04%)                  match u8::decode(r, s) {
        .                               $(tag::$variant => {
    7,189 ( 0.00%)                          $(let $field = DecodeMut::decode(r, s);)*
  249,589 ( 0.03%)                          $name::$variant $(($field))*
    3,572 ( 0.00%)                      })*
        .                               _ => unreachable!(),
        .                           }
  627,290 ( 0.08%)              }
        .                   }
        .               }
        .           }
        .           
        .           impl<S> Encode<S> for () {
        .               fn encode(self, _: &mut Writer, _: &mut S) {}
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for () {
        .               fn decode(_: &mut Reader<'_>, _: &mut S) -> Self {}
        .           }
        .           
        .           impl<S> Encode<S> for u8 {
   57,999 ( 0.01%)      fn encode(self, w: &mut Writer, _: &mut S) {
       30 ( 0.00%)          w.push(self);
   48,275 ( 0.01%)      }
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for u8 {
        .               fn decode(r: &mut Reader<'_>, _: &mut S) -> Self {
1,381,042 ( 0.18%)          let x = r[0];
  768,995 ( 0.10%)          *r = &r[1..];
        .                   x
        .               }
        .           }
        .           
        .           rpc_encode_decode!(le u32);
        .           rpc_encode_decode!(le usize);
        .           
        .           impl<S> Encode<S> for bool {
        .               fn encode(self, w: &mut Writer, s: &mut S) {
   10,662 ( 0.00%)          (self as u8).encode(w, s);
        .               }
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for bool {
        .               fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
    7,108 ( 0.00%)          match u8::decode(r, s) {
        .                       0 => false,
        .                       1 => true,
        .                       _ => unreachable!(),
        .                   }
        .               }
        .           }
        .           
        .           impl<S> Encode<S> for char {
        .               fn encode(self, w: &mut Writer, s: &mut S) {
    8,444 ( 0.00%)          (self as u32).encode(w, s);
        .               }
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for char {
        .               fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
        .                   char::from_u32(u32::decode(r, s)).unwrap()
        .               }
        .           }
        .           
        .           impl<S> Encode<S> for NonZeroU32 {
       90 ( 0.00%)      fn encode(self, w: &mut Writer, s: &mut S) {
  363,753 ( 0.05%)          self.get().encode(w, s);
       30 ( 0.00%)      }
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for NonZeroU32 {
       90 ( 0.00%)      fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
      210 ( 0.00%)          Self::new(u32::decode(r, s)).unwrap()
       60 ( 0.00%)      }
        .           }
        .           
        .           impl<S, A: Encode<S>, B: Encode<S>> Encode<S> for (A, B) {
      165 ( 0.00%)      fn encode(self, w: &mut Writer, s: &mut S) {
        .                   self.0.encode(w, s);
        .                   self.1.encode(w, s);
        .               }
        .           }
        .           
        .           impl<'a, S, A: for<'s> DecodeMut<'a, 's, S>, B: for<'s> DecodeMut<'a, 's, S>> DecodeMut<'a, '_, S>
        .               for (A, B)
        .           {
       75 ( 0.00%)      fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {
      210 ( 0.00%)          (DecodeMut::decode(r, s), DecodeMut::decode(r, s))
       45 ( 0.00%)      }
        .           }
        .           
        .           rpc_encode_decode!(
        .               enum Bound<T> {
        .                   Included(x),
        .                   Excluded(x),
        .                   Unbounded,
        .               }
-- line 192 ----------------------------------------
-- line 204 ----------------------------------------
        .                   Ok(x),
        .                   Err(e),
        .               }
        .           );
        .           
        .           impl<S> Encode<S> for &[u8] {
        .               fn encode(self, w: &mut Writer, s: &mut S) {
        .                   self.len().encode(w, s);
   21,792 ( 0.00%)          w.write_all(self).unwrap();
        .               }
        .           }
        .           
        .           impl<'a, S> DecodeMut<'a, '_, S> for &'a [u8] {
        .               fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {
        .                   let len = usize::decode(r, s);
        .                   let xs = &r[..len];
   28,230 ( 0.00%)          *r = &r[len..];
        .                   xs
        .               }
        .           }
        .           
        .           impl<S> Encode<S> for &str {
   21,792 ( 0.00%)      fn encode(self, w: &mut Writer, s: &mut S) {
        .                   self.as_bytes().encode(w, s);
   27,240 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, S> DecodeMut<'a, '_, S> for &'a str {
    9,400 ( 0.00%)      fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {
   18,800 ( 0.00%)          str::from_utf8(<&[u8]>::decode(r, s)).unwrap()
   18,800 ( 0.00%)      }
        .           }
        .           
        .           impl<S> Encode<S> for String {
        .               fn encode(self, w: &mut Writer, s: &mut S) {
   21,792 ( 0.00%)          self[..].encode(w, s);
        .               }
        .           }
        .           
        .           impl<S> DecodeMut<'_, '_, S> for String {
        .               fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
   27,240 ( 0.00%)          <&str>::decode(r, s).to_string()
        .               }
        .           }
        .           
        .           /// Simplified version of panic payloads, ignoring
        .           /// types other than `&'static str` and `String`.
        .           pub enum PanicMessage {
        .               StaticStr(&'static str),
        .               String(String),
-- line 253 ----------------------------------------

1,316,227 ( 0.17%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/cmp.rs
--------------------------------------------------------------------------------
Ir               

-- line 18 ----------------------------------------
      .               fn memcmp(s1: *const u8, s2: *const u8, n: usize) -> i32;
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<A, B> PartialEq<[B]> for [A]
      .           where
      .               A: PartialEq<B>,
      .           {
248,715 ( 0.03%)      fn eq(&self, other: &[B]) -> bool {
 91,212 ( 0.01%)          SlicePartialEq::equal(self, other)
207,504 ( 0.03%)      }
      .           
      .               fn ne(&self, other: &[B]) -> bool {
      .                   SlicePartialEq::not_equal(self, other)
      .               }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T: Eq> Eq for [T] {}
-- line 36 ----------------------------------------
-- line 62 ----------------------------------------
      .           }
      .           
      .           // Generic slice equality
      .           impl<A, B> SlicePartialEq<B> for [A]
      .           where
      .               A: PartialEq<B>,
      .           {
      .               default fn equal(&self, other: &[B]) -> bool {
120,160 ( 0.02%)          if self.len() != other.len() {
      .                       return false;
      .                   }
      .           
  6,742 ( 0.00%)          self.iter().zip(other.iter()).all(|(x, y)| x == y)
      .               }
      .           }
      .           
      .           // Use memcmp for bytewise equality when the types allow
      .           impl<A, B> SlicePartialEq<B> for [A]
      .           where
      .               A: BytewiseEquality<B>,
      .           {
410,454 ( 0.05%)      fn equal(&self, other: &[B]) -> bool {
155,324 ( 0.02%)          if self.len() != other.len() {
 35,739 ( 0.00%)              return false;
      .                   }
      .           
      .                   // SAFETY: `self` and `other` are references and are thus guaranteed to be valid.
      .                   // The two slices have been checked to have the same size above.
      .                   unsafe {
 39,468 ( 0.01%)              let size = mem::size_of_val(self);
334,004 ( 0.04%)              memcmp(self.as_ptr() as *const u8, other.as_ptr() as *const u8, size) == 0
      .                   }
237,897 ( 0.03%)      }
      .           }
      .           
      .           #[doc(hidden)]
      .           // intermediate trait for specialization of slice's PartialOrd
      .           trait SlicePartialOrd: Sized {
      .               fn partial_compare(left: &[Self], right: &[Self]) -> Option<Ordering>;
      .           }
      .           
-- line 102 ----------------------------------------
-- line 168 ----------------------------------------
      .               default fn compare(left: &[Self], right: &[Self]) -> Ordering {
      .                   let l = cmp::min(left.len(), right.len());
      .           
      .                   // Slice to the loop iteration range to enable bound check
      .                   // elimination in the compiler
      .                   let lhs = &left[..l];
      .                   let rhs = &right[..l];
      .           
      2 ( 0.00%)          for i in 0..l {
      .                       match lhs[i].cmp(&rhs[i]) {
      .                           Ordering::Equal => (),
      .                           non_eq => return non_eq,
      .                       }
      .                   }
      .           
      .                   left.len().cmp(&right.len())
      .               }
-- line 184 ----------------------------------------
-- line 188 ----------------------------------------
      .           // this matches the order we want for [u8], but no others (not even [i8]).
      .           impl SliceOrd for u8 {
      .               #[inline]
      .               fn compare(left: &[Self], right: &[Self]) -> Ordering {
      .                   let order =
      .                       // SAFETY: `left` and `right` are references and are thus guaranteed to be valid.
      .                       // We use the minimum of both lengths which guarantees that both regions are
      .                       // valid for reads in that interval.
  2,968 ( 0.00%)              unsafe { memcmp(left.as_ptr(), right.as_ptr(), cmp::min(left.len(), right.len())) };
  5,936 ( 0.00%)          if order == 0 {
      .                       left.len().cmp(&right.len())
  1,248 ( 0.00%)          } else if order < 0 {
      .                       Less
      .                   } else {
      .                       Greater
      .                   }
      .               }
      .           }
      .           
      .           // Hack to allow specializing on `Eq` even though `Eq` has a method.
-- line 207 ----------------------------------------
-- line 230 ----------------------------------------
      .           pub(super) trait SliceContains: Sized {
      .               fn slice_contains(&self, x: &[Self]) -> bool;
      .           }
      .           
      .           impl<T> SliceContains for T
      .           where
      .               T: PartialEq,
      .           {
     94 ( 0.00%)      default fn slice_contains(&self, x: &[Self]) -> bool {
 18,025 ( 0.00%)          x.iter().any(|y| *y == *self)
    141 ( 0.00%)      }
      .           }
      .           
      .           impl SliceContains for u8 {
      .               #[inline]
      .               fn slice_contains(&self, x: &[Self]) -> bool {
      .                   memchr::memchr(*self, x).is_some()
      .               }
      .           }
-- line 248 ----------------------------------------

293,380 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/non_null.rs
--------------------------------------------------------------------------------
Ir               

-- line 186 ----------------------------------------
      .               /// use std::ptr::NonNull;
      .               ///
      .               /// // NEVER DO THAT!!! This is undefined behavior. ⚠️
      .               /// let ptr = unsafe { NonNull::<u32>::new_unchecked(std::ptr::null_mut()) };
      .               /// ```
      .               #[stable(feature = "nonnull", since = "1.25.0")]
      .               #[rustc_const_stable(feature = "const_nonnull_new_unchecked", since = "1.25.0")]
      .               #[inline]
187,652 ( 0.02%)      pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
      .                   // SAFETY: the caller must guarantee that `ptr` is non-null.
771,543 ( 0.10%)          unsafe { NonNull { pointer: ptr as _ } }
276,511 ( 0.04%)      }
      .           
      .               /// Creates a new `NonNull` if `ptr` is non-null.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use std::ptr::NonNull;
      .               ///
-- line 205 ----------------------------------------
-- line 207 ----------------------------------------
      .               /// let ptr = NonNull::<u32>::new(&mut x as *mut _).expect("ptr is null!");
      .               ///
      .               /// if let Some(ptr) = NonNull::<u32>::new(std::ptr::null_mut()) {
      .               ///     unreachable!();
      .               /// }
      .               /// ```
      .               #[stable(feature = "nonnull", since = "1.25.0")]
      .               #[inline]
 28,044 ( 0.00%)      pub fn new(ptr: *mut T) -> Option<Self> {
 46,740 ( 0.01%)          if !ptr.is_null() {
      .                       // SAFETY: The pointer is already checked and is not null
 28,044 ( 0.00%)              Some(unsafe { Self::new_unchecked(ptr) })
      .                   } else {
      .                       None
      .                   }
 28,044 ( 0.00%)      }
      .           
      .               /// Performs the same functionality as [`std::ptr::from_raw_parts`], except that a
      .               /// `NonNull` pointer is returned, as opposed to a raw `*const` pointer.
      .               ///
      .               /// See the documentation of [`std::ptr::from_raw_parts`] for more details.
      .               ///
      .               /// [`std::ptr::from_raw_parts`]: crate::ptr::from_raw_parts
      .               #[unstable(feature = "ptr_metadata", issue = "81513")]
-- line 230 ----------------------------------------
-- line 268 ----------------------------------------
      .               /// unsafe { *ptr.as_ptr() += 2; }
      .               /// let x_value = unsafe { *ptr.as_ptr() };
      .               /// assert_eq!(x_value, 2);
      .               /// ```
      .               #[stable(feature = "nonnull", since = "1.25.0")]
      .               #[rustc_const_stable(feature = "const_nonnull_as_ptr", since = "1.32.0")]
      .               #[must_use]
      .               #[inline]
574,883 ( 0.08%)      pub const fn as_ptr(self) -> *mut T {
      .                   self.pointer as *mut T
370,010 ( 0.05%)      }
      .           
      .               /// Returns a shared reference to the value. If the value may be uninitialized, [`as_uninit_ref`]
      .               /// must be used instead.
      .               ///
      .               /// For the mutable counterpart see [`as_mut`].
      .               ///
      .               /// [`as_uninit_ref`]: NonNull::as_uninit_ref
      .               /// [`as_mut`]: NonNull::as_mut
-- line 286 ----------------------------------------
-- line 316 ----------------------------------------
      .               /// println!("{}", ref_x);
      .               /// ```
      .               ///
      .               /// [the module documentation]: crate::ptr#safety
      .               #[stable(feature = "nonnull", since = "1.25.0")]
      .               #[rustc_const_unstable(feature = "const_ptr_as_ref", issue = "91822")]
      .               #[must_use]
      .               #[inline]
 27,790 ( 0.00%)      pub const unsafe fn as_ref<'a>(&self) -> &'a T {
      .                   // SAFETY: the caller must guarantee that `self` meets all the
      .                   // requirements for a reference.
 41,685 ( 0.01%)          unsafe { &*self.as_ptr() }
 27,790 ( 0.00%)      }
      .           
      .               /// Returns a unique reference to the value. If the value may be uninitialized, [`as_uninit_mut`]
      .               /// must be used instead.
      .               ///
      .               /// For the shared counterpart see [`as_ref`].
      .               ///
      .               /// [`as_uninit_mut`]: NonNull::as_uninit_mut
      .               /// [`as_ref`]: NonNull::as_ref
-- line 336 ----------------------------------------
-- line 391 ----------------------------------------
      .               /// let casted_ptr = ptr.cast::<i8>();
      .               /// let raw_ptr: *mut i8 = casted_ptr.as_ptr();
      .               /// ```
      .               #[stable(feature = "nonnull_cast", since = "1.27.0")]
      .               #[rustc_const_stable(feature = "const_nonnull_cast", since = "1.36.0")]
      .               #[must_use = "this returns the result of the operation, \
      .                             without modifying the original"]
      .               #[inline]
 24,371 ( 0.00%)      pub const fn cast<U>(self) -> NonNull<U> {
      .                   // SAFETY: `self` is a `NonNull` pointer which is necessarily non-null
 34,258 ( 0.00%)          unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
 17,110 ( 0.00%)      }
      .           }
      .           
      .           impl<T> NonNull<[T]> {
      .               /// Creates a non-null raw slice from a thin pointer and a length.
      .               ///
      .               /// The `len` argument is the number of **elements**, not the number of bytes.
      .               ///
      .               /// This function is safe, but dereferencing the return value is unsafe.
-- line 410 ----------------------------------------
-- line 425 ----------------------------------------
      .               /// ```
      .               ///
      .               /// (Note that this example artificially demonstrates a use of this method,
      .               /// but `let slice = NonNull::from(&x[..]);` would be a better way to write code like this.)
      .               #[unstable(feature = "nonnull_slice_from_raw_parts", issue = "71941")]
      .               #[rustc_const_unstable(feature = "const_nonnull_slice_from_raw_parts", issue = "71941")]
      .               #[must_use]
      .               #[inline]
 39,736 ( 0.01%)      pub const fn slice_from_raw_parts(data: NonNull<T>, len: usize) -> Self {
      .                   // SAFETY: `data` is a `NonNull` pointer which is necessarily non-null
 79,472 ( 0.01%)          unsafe { Self::new_unchecked(super::slice_from_raw_parts_mut(data.as_ptr(), len)) }
 19,868 ( 0.00%)      }
      .           
      .               /// Returns the length of a non-null raw slice.
      .               ///
      .               /// The returned value is the number of **elements**, not the number of bytes.
      .               ///
      .               /// This function is safe, even when the non-null raw slice cannot be dereferenced to a slice
      .               /// because the pointer does not have a valid address.
      .               ///
-- line 444 ----------------------------------------
-- line 469 ----------------------------------------
      .               ///
      .               /// let slice: NonNull<[i8]> = NonNull::slice_from_raw_parts(NonNull::dangling(), 3);
      .               /// assert_eq!(slice.as_non_null_ptr(), NonNull::new(1 as *mut i8).unwrap());
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[unstable(feature = "slice_ptr_get", issue = "74265")]
      .               #[rustc_const_unstable(feature = "slice_ptr_get", issue = "74265")]
  8,019 ( 0.00%)      pub const fn as_non_null_ptr(self) -> NonNull<T> {
      .                   // SAFETY: We know `self` is non-null.
 13,365 ( 0.00%)          unsafe { NonNull::new_unchecked(self.as_ptr().as_mut_ptr()) }
  5,346 ( 0.00%)      }
      .           
      .               /// Returns a raw pointer to the slice's buffer.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```rust
      .               /// #![feature(slice_ptr_get, nonnull_slice_from_raw_parts)]
      .               /// use std::ptr::NonNull;
-- line 488 ----------------------------------------
-- line 489 ----------------------------------------
      .               ///
      .               /// let slice: NonNull<[i8]> = NonNull::slice_from_raw_parts(NonNull::dangling(), 3);
      .               /// assert_eq!(slice.as_mut_ptr(), 1 as *mut i8);
      .               /// ```
      .               #[inline]
      .               #[must_use]
      .               #[unstable(feature = "slice_ptr_get", issue = "74265")]
      .               #[rustc_const_unstable(feature = "slice_ptr_get", issue = "74265")]
  7,998 ( 0.00%)      pub const fn as_mut_ptr(self) -> *mut T {
 10,664 ( 0.00%)          self.as_non_null_ptr().as_ptr()
  5,332 ( 0.00%)      }
      .           
      .               /// Returns a shared reference to a slice of possibly uninitialized values. In contrast to
      .               /// [`as_ref`], this does not require that the value has to be initialized.
      .               ///
      .               /// For the mutable counterpart see [`as_uninit_slice_mut`].
      .               ///
      .               /// [`as_ref`]: NonNull::as_ref
      .               /// [`as_uninit_slice_mut`]: NonNull::as_uninit_slice_mut
-- line 507 ----------------------------------------
-- line 705 ----------------------------------------
      .                   self.as_ptr().hash(state)
      .               }
      .           }
      .           
      .           #[unstable(feature = "ptr_internals", issue = "none")]
      .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
      .           impl<T: ?Sized> const From<Unique<T>> for NonNull<T> {
      .               #[inline]
 25,650 ( 0.00%)      fn from(unique: Unique<T>) -> Self {
      .                   // SAFETY: A Unique pointer cannot be null, so the conditions for
      .                   // new_unchecked() are respected.
 51,300 ( 0.01%)          unsafe { NonNull::new_unchecked(unique.as_ptr()) }
 25,650 ( 0.00%)      }
      .           }
      .           
      .           #[stable(feature = "nonnull", since = "1.25.0")]
      .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
      .           impl<T: ?Sized> const From<&mut T> for NonNull<T> {
      .               #[inline]
  6,468 ( 0.00%)      fn from(reference: &mut T) -> Self {
      .                   // SAFETY: A mutable reference cannot be null.
 13,384 ( 0.00%)          unsafe { NonNull { pointer: reference as *mut T } }
  9,702 ( 0.00%)      }
      .           }
      .           
      .           #[stable(feature = "nonnull", since = "1.25.0")]
      .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
      .           impl<T: ?Sized> const From<&T> for NonNull<T> {
      .               #[inline]
      .               fn from(reference: &T) -> Self {
      .                   // SAFETY: A reference cannot be null, so the conditions for
-- line 735 ----------------------------------------

171,556 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/non_null.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/closure.rs
--------------------------------------------------------------------------------
Ir                 

-- line 10 ----------------------------------------
        .               type Env;
        .           }
        .           
        .           impl<'a, A, R> !Sync for Closure<'a, A, R> {}
        .           impl<'a, A, R> !Send for Closure<'a, A, R> {}
        .           
        .           impl<'a, A, R, F: FnMut(A) -> R> From<&'a mut F> for Closure<'a, A, R> {
        .               fn from(f: &'a mut F) -> Self {
  269,493 ( 0.04%)          unsafe extern "C" fn call<A, R, F: FnMut(A) -> R>(env: &mut Env, arg: A) -> R {
        .                       (*(env as *mut _ as *mut F))(arg)
  359,324 ( 0.05%)          }
        .                   Closure { call: call::<A, R, F>, env: unsafe { &mut *(f as *mut _ as *mut Env) } }
        .               }
        .           }
        .           
        .           impl<'a, A, R> Closure<'a, A, R> {
        .               pub fn call(&mut self, arg: A) -> R {
1,437,296 ( 0.19%)          unsafe { (self.call)(self.env, arg) }
        .               }
        .           }

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 57 ----------------------------------------
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
      218 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
      109 ( 0.00%)              from_str_radix(src, radix)
      327 ( 0.00%)          }
        .           
        .                   /// Returns the number of ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[doc(alias = "popcount")]
        .                   #[doc(alias = "popcnt")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn count_ones(self) -> u32 {
   44,730 ( 0.01%)              intrinsics::ctpop(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of zeros in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
        .                   /// assert_eq!(n.leading_zeros(), 2);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn leading_zeros(self) -> u32 {
  193,522 ( 0.03%)              intrinsics::ctlz(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of trailing zeros in the binary representation
        .                   /// of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
        .                   /// assert_eq!(n.trailing_zeros(), 3);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn trailing_zeros(self) -> u32 {
  155,120 ( 0.02%)              intrinsics::cttz(self) as u32
        .                   }
        .           
        .                   /// Returns the number of leading ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn rotate_left(self, n: u32) -> Self {
4,158,027 ( 0.55%)              intrinsics::rotate_left(self, n as $SelfT)
        .                   }
        .           
        .                   /// Shifts the bits to the right by a specified amount, `n`,
        .                   /// wrapping the truncated bits to the beginning of the resulting
        .                   /// integer.
        .                   ///
        .                   /// Please note this isn't the same operation as the `>>` shifting operator!
        .                   ///
-- line 220 ----------------------------------------
-- line 429 ----------------------------------------
        .                   )]
        .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
   28,960 ( 0.00%)          pub const fn checked_add(self, rhs: Self) -> Option<Self> {
   23,178 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
   57,920 ( 0.01%)              if unlikely!(b) {None} else {Some(a)}
   23,168 ( 0.00%)          }
        .           
        .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
        .                   /// cannot occur.
        .                   ///
        .                   /// # Safety
        .                   ///
        .                   /// This results in undefined behavior when
        .                   #[doc = concat!("`self + rhs > ", stringify!($SelfT), "::MAX` or `self + rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 448 ----------------------------------------
-- line 456 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_add`.
  344,454 ( 0.05%)              unsafe { intrinsics::unchecked_add(self, rhs) }
        .                   }
        .           
        .                   /// Checked addition with a signed integer. Computes `self + rhs`,
        .                   /// returning `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 498 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(1", stringify!($SelfT), ".checked_sub(1), Some(0));")]
        .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".checked_sub(1), None);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
      135 ( 0.00%)          pub const fn checked_sub(self, rhs: Self) -> Option<Self> {
      108 ( 0.00%)              let (a, b) = self.overflowing_sub(rhs);
      270 ( 0.00%)              if unlikely!(b) {None} else {Some(a)}
      108 ( 0.00%)          }
        .           
        .                   /// Unchecked integer subtraction. Computes `self - rhs`, assuming overflow
        .                   /// cannot occur.
        .                   ///
        .                   /// # Safety
        .                   ///
        .                   /// This results in undefined behavior when
        .                   #[doc = concat!("`self - rhs > ", stringify!($SelfT), "::MAX` or `self - rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 517 ----------------------------------------
-- line 525 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_sub`.
   22,048 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
        .                   }
        .           
        .                   /// Checked integer multiplication. Computes `self * rhs`, returning
        .                   /// `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 544 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".checked_mul(1), Some(5));")]
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.checked_mul(2), None);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
   41,010 ( 0.01%)          pub const fn checked_mul(self, rhs: Self) -> Option<Self> {
   27,340 ( 0.00%)              let (a, b) = self.overflowing_mul(rhs);
   68,350 ( 0.01%)              if unlikely!(b) {None} else {Some(a)}
   27,340 ( 0.00%)          }
        .           
        .                   /// Unchecked integer multiplication. Computes `self * rhs`, assuming overflow
        .                   /// cannot occur.
        .                   ///
        .                   /// # Safety
        .                   ///
        .                   /// This results in undefined behavior when
        .                   #[doc = concat!("`self * rhs > ", stringify!($SelfT), "::MAX` or `self * rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 563 ----------------------------------------
-- line 1035 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   44,513 ( 0.01%)              intrinsics::saturating_add(self, rhs)
       41 ( 0.00%)          }
        .           
        .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 1052 ----------------------------------------
-- line 1084 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
    2,733 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
        .                   }
        .           
        .                   /// Saturating integer multiplication. Computes `self * rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
2,257,580 ( 0.30%)              intrinsics::wrapping_add(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) addition with a signed integer. Computes
        .                   /// `self + rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
  822,767 ( 0.11%)              intrinsics::wrapping_sub(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) multiplication. Computes `self *
        .                   /// rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
        .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
2,105,932 ( 0.28%)              intrinsics::wrapping_mul(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) division. Computes `self / rhs`.
        .                   /// Wrapped division on unsigned types is just normal division.
        .                   /// There's no way wrapping could ever happen.
        .                   /// This function exists, so that all operations
        .                   /// are accounted for in the wrapping operations.
        .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
        .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
        .                       // out of bounds
        .                       unsafe {
        8 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
        .                       }
        .                   }
        .           
        .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
        .                   /// where `mask` removes any high-order bits of `rhs` that
        .                   /// would cause the shift to exceed the bitwidth of the type.
        .                   ///
        .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1492 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
  336,242 ( 0.04%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
   11,584 ( 0.00%)              (a as Self, b)
   23,168 ( 0.00%)          }
        .           
        .                   /// Calculates `self + rhs + carry` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
        .                   /// additional bit of overflow. This allows for chaining together multiple additions
        .                   /// to create "big integers" which represent larger values.
        .                   ///
        .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1588 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   93,692 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
       54 ( 0.00%)              (a as Self, b)
      108 ( 0.00%)          }
        .           
        .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
        .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
        .                   /// to create "big integers" which represent larger values.
        .                   ///
        .                   /// # Examples
-- line 1606 ----------------------------------------
-- line 1674 ----------------------------------------
        .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                     without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
  570,035 ( 0.08%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
   13,670 ( 0.00%)              (a as Self, b)
   27,340 ( 0.00%)          }
        .           
        .                   /// Calculates the divisor when `self` is divided by `rhs`.
        .                   ///
        .                   /// Returns a tuple of the divisor along with a boolean indicating
        .                   /// whether an arithmetic overflow would occur. Note that for unsigned
        .                   /// integers overflow never occurs, so the second value is always
        .                   /// `false`.
        .                   ///
-- line 1692 ----------------------------------------
-- line 2132 ----------------------------------------
        .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
        .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
        .                   /// ```
        .                   #[must_use]
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
        .                   #[inline(always)]
        .                   pub const fn is_power_of_two(self) -> bool {
      339 ( 0.00%)              self.count_ones() == 1
        .                   }
        .           
        .                   // Returns one less than next power of two.
        .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
        .                   //
        .                   // 8u8.one_less_than_next_power_of_two() == 7
        .                   // 6u8.one_less_than_next_power_of_two() == 7
        .                   //
        .                   // This method cannot overflow, as in the `next_power_of_two`
        .                   // overflow cases it instead ends up returning the maximum value
        .                   // of the type, and can return 0 for 0.
        .                   #[inline]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
       51 ( 0.00%)          const fn one_less_than_next_power_of_two(self) -> Self {
    6,788 ( 0.00%)              if self <= 1 { return 0; }
        .           
   14,161 ( 0.00%)              let p = self - 1;
        .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
        .                       // That means the shift is always in-bounds, and some processors
        .                       // (such as intel pre-haswell) have more efficient ctlz
        .                       // intrinsics when the argument is non-zero.
   42,221 ( 0.01%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
   14,221 ( 0.00%)              <$SelfT>::MAX >> z
       68 ( 0.00%)          }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `self`.
        .                   ///
        .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
        .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
        .                   /// release mode (the only situation in which method can return 0).
        .                   ///
        .                   /// # Examples
-- line 2172 ----------------------------------------
-- line 2178 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(3", stringify!($SelfT), ".next_power_of_two(), 4);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   #[rustc_inherit_overflow_checks]
       34 ( 0.00%)          pub const fn next_power_of_two(self) -> Self {
   21,433 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
       34 ( 0.00%)          }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `n`. If
        .                   /// the next power of two is greater than the type's maximum value,
        .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 2196 ----------------------------------------
-- line 2264 ----------------------------------------
        .                   #[doc = concat!("let bytes = ", $swap_op, stringify!($SelfT), ".to_le_bytes();")]
        .                   #[doc = concat!("assert_eq!(bytes, ", $le_bytes, ");")]
        .                   /// ```
        .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
        .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
       75 ( 0.00%)          pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {
       60 ( 0.00%)              self.to_le().to_ne_bytes()
       45 ( 0.00%)          }
        .           
        .                   /// Return the memory representation of this integer as a byte array in
        .                   /// native byte order.
        .                   ///
        .                   /// As the target platform's native endianness is used, portable code
        .                   /// should use [`to_be_bytes`] or [`to_le_bytes`], as appropriate,
        .                   /// instead.
        .                   ///
-- line 2282 ----------------------------------------
-- line 2300 ----------------------------------------
        .                   /// ```
        .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
        .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   // SAFETY: const sound because integers are plain old datatypes so we can always
        .                   // transmute them to arrays of bytes
        .                   #[inline]
      198 ( 0.00%)          pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {
        .                       // SAFETY: integers are plain old datatypes so we can always transmute them to
        .                       // arrays of bytes
       99 ( 0.00%)              unsafe { mem::transmute(self) }
      297 ( 0.00%)          }
        .           
        .                   /// Create a native endian integer value from its representation
        .                   /// as a byte array in big endian.
        .                   ///
        .                   #[doc = $from_xe_bytes_doc]
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 2320 ----------------------------------------
-- line 2360 ----------------------------------------
        .                   ///     *input = rest;
        .                   #[doc = concat!("    ", stringify!($SelfT), "::from_le_bytes(int_bytes.try_into().unwrap())")]
        .                   /// }
        .                   /// ```
        .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
        .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
        .                   #[must_use]
        .                   #[inline]
      120 ( 0.00%)          pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
      150 ( 0.00%)              Self::from_le(Self::from_ne_bytes(bytes))
       60 ( 0.00%)          }
        .           
        .                   /// Create a native endian integer value from its memory representation
        .                   /// as a byte array in native endianness.
        .                   ///
        .                   /// As the target platform's native endianness is used, portable code
        .                   /// likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as
        .                   /// appropriate instead.
        .                   ///
-- line 2378 ----------------------------------------
-- line 2402 ----------------------------------------
        .                   /// }
        .                   /// ```
        .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
        .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
        .                   #[must_use]
        .                   // SAFETY: const sound because integers are plain old datatypes so we can always
        .                   // transmute to them
        .                   #[inline]
      120 ( 0.00%)          pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
        .                       // SAFETY: integers are plain old datatypes so we can always transmute to them
      180 ( 0.00%)              unsafe { mem::transmute(bytes) }
       60 ( 0.00%)          }
        .           
        .                   /// New code should prefer to use
        .                   #[doc = concat!("[`", stringify!($SelfT), "::MIN", "`] instead.")]
        .                   ///
        .                   /// Returns the smallest value that can be represented by this integer type.
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_promotable]
        .                   #[inline(always)]
-- line 2421 ----------------------------------------

  108,183 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
  215,210 ( 0.03%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       31 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,084 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        2 ( 0.00%)      LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
        .                   local_path: Option<PathBuf>,
        .                   /// `virtual_name` is the stable path rustc will store internally within
-- line 175 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    2,811 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
       10 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
       40 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 213 ----------------------------------------
        .               }
        .           }
        .           
        .           impl RealFileName {
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path(&self) -> Option<&Path> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => {
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    2,232 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
        6 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        8 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
        8 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
   16,183 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    6,604 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        .               QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
        .               MacroExpansion(u64),
      263 ( 0.00%)      ProcMacroSourceCode(u64),
        .               /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.
        .               CfgSpec(u64),
        .               /// Strings provided as crate attributes in the CLI.
        .               CliCrateAttr(u64),
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       35 ( 0.00%)      fn from(p: PathBuf) -> Self {
       10 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       30 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       35 ( 0.00%)      }
        .           }
        .           
        2 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
       32 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
       48 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
       48 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
       40 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
        .                   match self.inner {
        .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        .               }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,130 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
-- line 353 ----------------------------------------
-- line 357 ----------------------------------------
        .               }
        .           
        .               pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
        .               }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        5 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
       10 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 377 ----------------------------------------
        .               }
        .           
        .               pub fn anon_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::Anon(hasher.finish())
        .               }
        .           
    1,315 ( 0.00%)      pub fn proc_macro_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
      526 ( 0.00%)          FileName::ProcMacroSourceCode(hasher.finish())
    1,315 ( 0.00%)      }
        .           
        .               pub fn cfg_spec_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::QuoteExpansion(hasher.finish())
        .               }
        .           
        .               pub fn cli_crate_attr_source_code(src: &str) -> FileName {
-- line 397 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
        3 ( 0.00%)      pub lo: BytePos,
        3 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
        9 ( 0.00%)      pub ctxt: SyntaxContext,
        3 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
   62,040 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
      144 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
   29,448 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
   22,086 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
   29,448 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
        .           ///
        .           /// Spans have two orthogonal attributes:
        .           ///
        .           /// - They can be *primary spans*. In this case they are the locus of
        .           ///   the error, and would be rendered with `^^^`.
        .           /// - They can have a *label*. In this case, the label is written next
        .           ///   to the mark in the snippet when we render.
       36 ( 0.00%)  #[derive(Clone, Debug, Hash, PartialEq, Eq, Encodable, Decodable)]
        .           pub struct MultiSpan {
        .               primary_spans: Vec<Span>,
        8 ( 0.00%)      span_labels: Vec<(Span, String)>,
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
   18,900 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
   12,600 ( 0.00%)      }
        .               #[inline]
    1,408 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
    1,408 ( 0.00%)      }
        .               #[inline]
    5,337 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
    3,558 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
    1,725 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
    1,035 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
       33 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
       22 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
      432 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
      288 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 663 ----------------------------------------
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
        .               pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
        .               }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
      320 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
      160 ( 0.00%)          while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
      352 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
    6,393 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
    4,262 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
    1,520 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
      628 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
      678 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
      740 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
      148 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
      592 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
    4,032 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
    3,456 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
    2,880 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
       30 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
       36 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
       24 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
      264 ( 0.00%)      pub fn allows_unsafe(self) -> bool {
       66 ( 0.00%)          self.ctxt().outer_expn_data().allow_internal_unsafe
      264 ( 0.00%)      }
        .           
        4 ( 0.00%)      pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
        .                   let mut prev_span = DUMMY_SP;
        .                   std::iter::from_fn(move || {
        .                       loop {
        8 ( 0.00%)                  let expn_data = self.ctxt().outer_expn_data();
        5 ( 0.00%)                  if expn_data.is_root() {
        1 ( 0.00%)                      return None;
        .                           }
        .           
        .                           let is_recursive = expn_data.call_site.source_equal(prev_span);
        .           
        .                           prev_span = self;
        .                           self = expn_data.call_site;
        .           
        .                           // Don't print recursive invocations.
        .                           if !is_recursive {
        .                               return Some(expn_data);
        .                           }
        .                       }
        .                   })
        8 ( 0.00%)      }
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
  165,286 ( 0.02%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
   29,866 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
      186 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
      133 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
  103,943 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
  135,234 ( 0.02%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
    1,089 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
      693 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
      792 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
    1,672 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
      286 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
       18 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
      938 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
    1,368 ( 0.00%)      }
        .           
      209 ( 0.00%)      pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
      133 ( 0.00%)      }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
      440 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
       70 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
       30 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
    3,240 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
    1,890 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
    9,324 ( 0.00%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.remove_mark();
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
   18,477 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
   12,318 ( 0.00%)          let mut span = self.data();
    9,995 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
   18,477 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
   20,260 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
      158 ( 0.00%)          let mut span = self.data();
      237 ( 0.00%)          let mark = span.ctxt.glob_adjust(expn_id, glob_span);
      632 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
       54 ( 0.00%)      pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
      310 ( 0.00%)          let mut span = self.data();
      578 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
    1,150 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
       60 ( 0.00%)      }
        .           
        .               #[inline]
   16,448 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
   14,392 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
       58 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1044 ----------------------------------------
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   (*SPAN_DEBUG)(Span::new(self.lo, self.hi, self.ctxt, self.parent), f)
        .               }
        .           }
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        2 ( 0.00%)          MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
    3,230 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
       15 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        6 ( 0.00%)      pub fn push_span_label(&mut self, span: Span, label: String) {
        2 ( 0.00%)          self.span_labels.push((span, label));
        5 ( 0.00%)      }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
      499 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
       58 ( 0.00%)      }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
       18 ( 0.00%)      pub fn has_primary_spans(&self) -> bool {
        3 ( 0.00%)          self.primary_spans.iter().any(|sp| !sp.is_dummy())
       21 ( 0.00%)      }
        .           
        .               /// Returns `true` if this contains only a dummy primary span with any hygienic context.
        .               pub fn is_dummy(&self) -> bool {
        .                   let mut is_dummy = true;
        .                   for span in &self.primary_spans {
        .                       if !span.is_dummy() {
        .                           is_dummy = false;
        .                       }
-- line 1089 ----------------------------------------
-- line 1110 ----------------------------------------
        .                   replacements_occurred
        .               }
        .           
        .               /// Returns the strings to highlight. We always ensure that there
        .               /// is an entry for each of the primary spans -- for each primary
        .               /// span `P`, if there is at least one label with span `P`, we return
        .               /// those labels (marked as primary). But otherwise we return
        .               /// `SpanLabel` instances with empty labels.
       84 ( 0.00%)      pub fn span_labels(&self) -> Vec<SpanLabel> {
       15 ( 0.00%)          let is_primary = |span| self.primary_spans.contains(&span);
        .           
        .                   let mut span_labels = self
        .                       .span_labels
        .                       .iter()
        9 ( 0.00%)              .map(|&(span, ref label)| SpanLabel {
        .                           span,
        .                           is_primary: is_primary(span),
        6 ( 0.00%)                  label: Some(label.clone()),
        .                       })
        .                       .collect::<Vec<_>>();
        .           
        4 ( 0.00%)          for &span in &self.primary_spans {
        .                       if !span_labels.iter().any(|sl| sl.span == span) {
        .                           span_labels.push(SpanLabel { span, is_primary: true, label: None });
        .                       }
        .                   }
        .           
        .                   span_labels
       84 ( 0.00%)      }
        .           
        .               /// Returns `true` if any of the span labels is displayable.
       12 ( 0.00%)      pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
       14 ( 0.00%)      }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
    3,230 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
    3,230 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
       15 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
       12 ( 0.00%)          MultiSpan::from_spans(spans)
       15 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      308 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      154 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      462 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
       15 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
      225 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,098 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       30 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,196 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        1 ( 0.00%)          let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
       51 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
        .                   hash
        .               }
        .           
        .               /// Check if the stored hash matches the hash of the string.
        .               pub fn matches(&self, src: &str) -> bool {
        1 ( 0.00%)          Self::new(self.kind, src) == *self
        .               }
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
       50 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      290 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        5 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        5 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        5 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
       20 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
       10 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
       10 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
       15 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       55 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    4,941 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      549 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  888,884 ( 0.12%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,098 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    6,039 ( 0.00%)              SourceFile {
    4,392 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,196 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,196 ( 0.00%)                  lines,
    2,196 ( 0.00%)                  multibyte_chars,
    2,196 ( 0.00%)                  non_narrow_chars,
    2,196 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    4,941 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
      176 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       48 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
       32 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
       32 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       48 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
      192 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
       32 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
      272 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
      176 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       64 ( 0.00%)              lines,
       64 ( 0.00%)              multibyte_chars,
       64 ( 0.00%)              non_narrow_chars,
       64 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
      144 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
    1,526 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
      222 ( 0.00%)          if matches!(
      436 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        1 ( 0.00%)              let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        3 ( 0.00%)              if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
        .                       {
        5 ( 0.00%)                  if let Some(mut src) = src {
        .                               // The src_hash needs to be computed on the pre-normalized src.
        1 ( 0.00%)                      if self.src_hash.matches(&src) {
        3 ( 0.00%)                          normalize_src(&mut src, BytePos::from_usize(0));
        8 ( 0.00%)                          *src_kind = ExternalSourceKind::Present(Lrc::new(src));
        .                                   return true;
        .                               }
        .                           } else {
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
      217 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
    1,962 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
       35 ( 0.00%)      pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
       35 ( 0.00%)          fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
        .                       let slice = &src[begin..];
        .                       match slice.find('\n') {
        .                           Some(e) => &slice[..e],
        .                           None => slice,
        .                       }
       40 ( 0.00%)          }
        .           
        .                   let begin = {
        5 ( 0.00%)              let line = self.lines.get(line_number)?;
        5 ( 0.00%)              let begin: BytePos = *line - self.start_pos;
        .                       begin.to_usize()
        .                   };
        .           
       15 ( 0.00%)          if let Some(ref src) = self.src {
       25 ( 0.00%)              Some(Cow::from(get_until_newline(src, begin)))
        .                   } else if let Some(src) = self.external_src.borrow().get_source() {
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
       40 ( 0.00%)      }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      565 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
    3,913 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
    2,084 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
    5,945 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
    3,959 ( 0.00%)          assert!(line_index < self.lines.len());
    5,730 ( 0.00%)          if line_index == (self.lines.len() - 1) {
       32 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
    3,794 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1678 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
        .                   self.start_pos == self.end_pos
        .               }
        .           
        .               /// Calculates the original byte position relative to the start of the file
        .               /// based on the given byte position.
        4 ( 0.00%)      pub fn original_relative_byte_pos(&self, pos: BytePos) -> BytePos {
        .                   // Diff before any records is 0. Otherwise use the previously recorded
        .                   // diff as that applies to the following characters until a new diff
        .                   // is recorded.
        .                   let diff = match self.normalized_pos.binary_search_by(|np| np.pos.cmp(&pos)) {
        .                       Ok(i) => self.normalized_pos[i].diff,
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
       16 ( 0.00%)          BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
       12 ( 0.00%)      }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
       28 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
       84 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
        .                       if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
      168 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
      140 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
       56 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
       98 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
       28 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
       13 ( 0.00%)          match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
       14 ( 0.00%)                  let linebpos = self.lines[a];
       28 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
       14 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
      112 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
      112 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
       42 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
       28 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
       14 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
       70 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
       98 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
      170 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
      153 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       16 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       17 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
   12,084 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
      619 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
   13,033 ( 0.00%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,593,978 ( 0.21%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
  981,525 ( 0.13%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
  119,442 ( 0.02%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
        4 ( 0.00%)  #[derive(Debug, Clone)]
        .           pub struct Loc {
        .               /// Information about the original source.
        .               pub file: Lrc<SourceFile>,
        .               /// The (1-based) line number.
        1 ( 0.00%)      pub line: usize,
        .               /// The (0-based) column offset.
        .               pub col: CharPos,
        .               /// The (0-based) column offset when displayed.
        1 ( 0.00%)      pub col_display: usize,
        .           }
        .           
        .           // Used to be structural records.
        .           #[derive(Debug)]
        .           pub struct SourceFileAndLine {
        .               pub sf: Lrc<SourceFile>,
        .               /// Index of line, starting from 0.
        .               pub line: usize,
-- line 1980 ----------------------------------------
-- line 2037 ----------------------------------------
        .               pub source_len: usize,
        .               pub begin_pos: BytePos,
        .               pub end_pos: BytePos,
        .           }
        .           
        .           /// Range inside of a `Span` used for diagnostics when we only have access to relative positions.
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           pub struct InnerSpan {
        3 ( 0.00%)      pub start: usize,
        .               pub end: usize,
        .           }
        .           
        .           impl InnerSpan {
      102 ( 0.00%)      pub fn new(start: usize, end: usize) -> InnerSpan {
        .                   InnerSpan { start, end }
       51 ( 0.00%)      }
        .           }
        .           
        .           /// Requirements for a `StableHashingContext` to be used in this crate.
        .           ///
        .           /// This is a hack to allow using the [`HashStable_Generic`] derive macro
        .           /// instead of implementing everything in rustc_middle.
        .           pub trait HashStableContext {
        .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash;
-- line 2060 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
  129,465 ( 0.02%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
   24,849 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
  104,616 ( 0.01%)          let span = self.data_untracked();
   36,423 ( 0.00%)          span.ctxt.hash_stable(ctx, hasher);
   55,485 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
   37,215 ( 0.00%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
   36,540 ( 0.00%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
   73,080 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
   36,540 ( 0.00%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
   18,270 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
   18,270 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
  147,960 ( 0.02%)      }
        .           }

1,450,700 ( 0.19%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/node.rs
--------------------------------------------------------------------------------
Ir               

-- line 221 ----------------------------------------
      .                   NodeRef { height: 0, node: NonNull::from(Box::leak(leaf)), _marker: PhantomData }
      .               }
      .           }
      .           
      .           impl<K, V> NodeRef<marker::Owned, K, V, marker::Internal> {
      .               fn new_internal(child: Root<K, V>) -> Self {
      .                   let mut new_node = unsafe { InternalNode::new() };
      .                   new_node.edges[0].write(child.node);
  2,736 ( 0.00%)          unsafe { NodeRef::from_new_internal(new_node, child.height + 1) }
      .               }
      .           
      .               /// # Safety
      .               /// `height` must not be zero.
      .               unsafe fn from_new_internal(internal: Box<InternalNode<K, V>>, height: usize) -> Self {
      .                   debug_assert!(height > 0);
      .                   let node = NonNull::from(Box::leak(internal)).cast();
      .                   let mut this = NodeRef { height, node, _marker: PhantomData };
-- line 237 ----------------------------------------
-- line 269 ----------------------------------------
      .           impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {
      .               /// Finds the length of the node. This is the number of keys or values.
      .               /// The number of edges is `len() + 1`.
      .               /// Note that, despite being safe, calling this function can have the side effect
      .               /// of invalidating mutable references that unsafe code has created.
      .               pub fn len(&self) -> usize {
      .                   // Crucially, we only access the `len` field here. If BorrowType is marker::ValMut,
      .                   // there might be outstanding mutable references to values that we must not invalidate.
 43,901 ( 0.01%)          unsafe { usize::from((*Self::as_leaf_ptr(self)).len) }
      .               }
      .           
      .               /// Returns the number of levels that the node and leaves are apart. Zero
      .               /// height means the node is a leaf itself. If you picture trees with the
      .               /// root on top, the number says at which elevation the node appears.
      .               /// If you picture trees with leaves on top, the number says how high
      .               /// the tree extends above the node.
      .               pub fn height(&self) -> usize {
      .                   self.height
      .               }
      .           
      .               /// Temporarily takes out another, immutable reference to the same node.
      .               pub fn reborrow(&self) -> NodeRef<marker::Immut<'_>, K, V, Type> {
120,641 ( 0.02%)          NodeRef { height: self.height, node: self.node, _marker: PhantomData }
      .               }
      .           
      .               /// Exposes the leaf portion of any leaf or internal node.
      .               ///
      .               /// Returns a raw ptr to avoid invalidating other references to this node.
      .               fn as_leaf_ptr(this: &Self) -> *mut LeafNode<K, V> {
      .                   // The node must be valid for at least the LeafNode portion.
      .                   // This is not a reference in the NodeRef type because we don't know if
-- line 299 ----------------------------------------
-- line 314 ----------------------------------------
      .               /// both, upon success, do nothing.
      .               pub fn ascend(
      .                   self,
      .               ) -> Result<Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::Edge>, Self> {
      .                   assert!(BorrowType::PERMITS_TRAVERSAL);
      .                   // We need to use raw pointers to nodes because, if BorrowType is marker::ValMut,
      .                   // there might be outstanding mutable references to values that we must not invalidate.
      .                   let leaf_ptr: *const _ = Self::as_leaf_ptr(&self);
 44,419 ( 0.01%)          unsafe { (*leaf_ptr).parent }
      .                       .as_ref()
      .                       .map(|parent| Handle {
 26,610 ( 0.00%)                  node: NodeRef::from_internal(*parent, self.height + 1),
  9,311 ( 0.00%)                  idx: unsafe { usize::from((*leaf_ptr).parent_idx.assume_init()) },
      .                           _marker: PhantomData,
      .                       })
      .                       .ok_or(self)
      .               }
      .           
      .               pub fn first_edge(self) -> Handle<Self, marker::Edge> {
      .                   unsafe { Handle::new_edge(self, 0) }
      .               }
-- line 334 ----------------------------------------
-- line 373 ----------------------------------------
      .                   // SAFETY: there can be no mutable references into this tree borrowed as `Immut`.
      .                   unsafe { &*ptr }
      .               }
      .           
      .               /// Borrows a view into the keys stored in the node.
      .               pub fn keys(&self) -> &[K] {
      .                   let leaf = self.into_leaf();
      .                   unsafe {
259,352 ( 0.03%)              MaybeUninit::slice_assume_init_ref(leaf.keys.get_unchecked(..usize::from(leaf.len)))
      .                   }
      .               }
      .           }
      .           
      .           impl<K, V> NodeRef<marker::Dying, K, V, marker::LeafOrInternal> {
      .               /// Similar to `ascend`, gets a reference to a node's parent node, but also
      .               /// deallocates the current node in the process. This is unsafe because the
      .               /// current node will still be accessible despite being deallocated.
-- line 389 ----------------------------------------
-- line 391 ----------------------------------------
      .                   self,
      .               ) -> Option<Handle<NodeRef<marker::Dying, K, V, marker::Internal>, marker::Edge>> {
      .                   let height = self.height;
      .                   let node = self.node;
      .                   let ret = self.ascend().ok();
      .                   unsafe {
      .                       Global.deallocate(
      .                           node.cast(),
 10,746 ( 0.00%)                  if height > 0 {
      .                               Layout::new::<InternalNode<K, V>>()
      .                           } else {
      .                               Layout::new::<LeafNode<K, V>>()
      .                           },
      .                       );
      .                   }
      .                   ret
      .               }
-- line 407 ----------------------------------------
-- line 435 ----------------------------------------
      .                   // SAFETY: we have exclusive access to the entire node.
      .                   unsafe { &mut *ptr }
      .               }
      .           }
      .           
      .           impl<K, V, Type> NodeRef<marker::Dying, K, V, Type> {
      .               /// Borrows exclusive access to the leaf portion of a dying leaf or internal node.
      .               fn as_leaf_dying(&mut self) -> &mut LeafNode<K, V> {
      6 ( 0.00%)          let ptr = Self::as_leaf_ptr(self);
      .                   // SAFETY: we have exclusive access to the entire node.
      .                   unsafe { &mut *ptr }
      .               }
      .           }
      .           
      .           impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {
      .               /// Borrows exclusive access to an element of the key storage area.
      .               ///
-- line 451 ----------------------------------------
-- line 467 ----------------------------------------
      .               /// `index` is in bounds of 0..CAPACITY
      .               unsafe fn val_area_mut<I, Output: ?Sized>(&mut self, index: I) -> &mut Output
      .               where
      .                   I: SliceIndex<[MaybeUninit<V>], Output = Output>,
      .               {
      .                   // SAFETY: the caller will not be able to call further methods on self
      .                   // until the value slice reference is dropped, as we have unique access
      .                   // for the lifetime of the borrow.
 46,419 ( 0.01%)          unsafe { self.as_leaf_mut().vals.as_mut_slice().get_unchecked_mut(index) }
      .               }
      .           }
      .           
      .           impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {
      .               /// Borrows exclusive access to an element or slice of the node's storage area for edge contents.
      .               ///
      .               /// # Safety
      .               /// `index` is in bounds of 0..CAPACITY + 1
-- line 483 ----------------------------------------
-- line 534 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {
      .               /// Sets the node's link to its parent edge,
      .               /// without invalidating other references to the node.
      .               fn set_parent_link(&mut self, parent: NonNull<InternalNode<K, V>>, parent_idx: usize) {
      .                   let leaf = Self::as_leaf_ptr(self);
  5,254 ( 0.00%)          unsafe { (*leaf).parent = Some(parent) };
      .                   unsafe { (*leaf).parent_idx.write(parent_idx as u16) };
      .               }
      .           }
      .           
      .           impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {
      .               /// Clears the root's link to its parent edge.
      .               fn clear_parent_link(&mut self) {
      .                   let mut root_node = self.borrow_mut();
      .                   let leaf = root_node.as_leaf_mut();
  1,269 ( 0.00%)          leaf.parent = None;
      .               }
      .           }
      .           
      .           impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {
      .               /// Returns a new owned tree, with its own root node that is initially empty.
      .               pub fn new() -> Self {
      .                   NodeRef::new_leaf().forget_type()
      .               }
      .           
      .               /// Adds a new internal node with a single edge pointing to the previous root node,
      .               /// make that new node the root node, and return it. This increases the height by 1
      .               /// and is the opposite of `pop_internal_level`.
  8,208 ( 0.00%)      pub fn push_internal_level(&mut self) -> NodeRef<marker::Mut<'_>, K, V, marker::Internal> {
      .                   super::mem::take_mut(self, |old_root| NodeRef::new_internal(old_root).forget_type());
      .           
      .                   // `self.borrow_mut()`, except that we just forgot we're internal now:
      .                   NodeRef { height: self.height, node: self.node, _marker: PhantomData }
 10,944 ( 0.00%)      }
      .           
      .               /// Removes the internal root node, using its first child as the new root node.
      .               /// As it is intended only to be called when the root node has only one child,
      .               /// no cleanup is done on any of the keys, values and other children.
      .               /// This decreases the height by 1 and is the opposite of `push_internal_level`.
      .               ///
      .               /// Requires exclusive access to the `NodeRef` object but not to the root node;
      .               /// it will not invalidate other handles or references to the root node.
      .               ///
      .               /// Panics if there is no internal level, i.e., if the root node is a leaf.
      .               pub fn pop_internal_level(&mut self) {
  3,767 ( 0.00%)          assert!(self.height > 0);
      .           
      .                   let top = self.node;
      .           
      .                   // SAFETY: we asserted to be internal.
      .                   let internal_self = unsafe { self.borrow_mut().cast_to_internal_unchecked() };
      .                   // SAFETY: we borrowed `self` exclusively and its borrow type is exclusive.
      .                   let internal_node = unsafe { &mut *NodeRef::as_internal_ptr(&internal_self) };
      .                   // SAFETY: the first edge is always initialized.
  1,269 ( 0.00%)          self.node = unsafe { internal_node.edges[0].assume_init_read() };
  2,538 ( 0.00%)          self.height -= 1;
      .                   self.clear_parent_link();
      .           
      .                   unsafe {
      .                       Global.deallocate(top.cast(), Layout::new::<InternalNode<K, V>>());
      .                   }
      .               }
      .           }
      .           
      .           impl<K, V, Type> NodeRef<marker::Owned, K, V, Type> {
      .               /// Mutably borrows the owned root node. Unlike `reborrow_mut`, this is safe
      .               /// because the return value cannot be used to destroy the root, and there
      .               /// cannot be other references to the tree.
      .               pub fn borrow_mut(&mut self) -> NodeRef<marker::Mut<'_>, K, V, Type> {
250,095 ( 0.03%)          NodeRef { height: self.height, node: self.node, _marker: PhantomData }
      .               }
      .           
      .               /// Slightly mutably borrows the owned root node.
      .               pub fn borrow_valmut(&mut self) -> NodeRef<marker::ValMut<'_>, K, V, Type> {
      .                   NodeRef { height: self.height, node: self.node, _marker: PhantomData }
      .               }
      .           
      .               /// Irreversibly transitions to a reference that permits traversal and offers
-- line 614 ----------------------------------------
-- line 617 ----------------------------------------
      .                   NodeRef { height: self.height, node: self.node, _marker: PhantomData }
      .               }
      .           }
      .           
      .           impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {
      .               /// Adds a key-value pair to the end of the node.
      .               pub fn push(&mut self, key: K, val: V) {
      .                   let len = self.len_mut();
     36 ( 0.00%)          let idx = usize::from(*len);
     18 ( 0.00%)          assert!(idx < CAPACITY);
     48 ( 0.00%)          *len += 1;
      .                   unsafe {
      .                       self.key_area_mut(idx).write(key);
      .                       self.val_area_mut(idx).write(val);
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {
      .               /// Adds a key-value pair, and an edge to go to the right of that pair,
      .               /// to the end of the node.
      .               pub fn push(&mut self, key: K, val: V, edge: Root<K, V>) {
  5,472 ( 0.00%)          assert!(edge.height == self.height - 1);
      .           
      .                   let len = self.len_mut();
  2,736 ( 0.00%)          let idx = usize::from(*len);
  1,368 ( 0.00%)          assert!(idx < CAPACITY);
  2,736 ( 0.00%)          *len += 1;
      .                   unsafe {
      .                       self.key_area_mut(idx).write(key);
      .                       self.val_area_mut(idx).write(val);
  1,368 ( 0.00%)              self.edge_area_mut(idx + 1).write(edge.node);
      .                       Handle::new_edge(self.reborrow_mut(), idx + 1).correct_parent_link();
      .                   }
      .               }
      .           }
      .           
      .           impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Leaf> {
      .               /// Removes any static information asserting that this node is a `Leaf` node.
      .               pub fn forget_type(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
-- line 656 ----------------------------------------
-- line 668 ----------------------------------------
      .           impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
      .               /// Checks whether a node is an `Internal` node or a `Leaf` node.
      .               pub fn force(
      .                   self,
      .               ) -> ForceResult<
      .                   NodeRef<BorrowType, K, V, marker::Leaf>,
      .                   NodeRef<BorrowType, K, V, marker::Internal>,
      .               > {
224,090 ( 0.03%)          if self.height == 0 {
      .                       ForceResult::Leaf(NodeRef {
      .                           height: self.height,
      .                           node: self.node,
      .                           _marker: PhantomData,
      .                       })
      .                   } else {
      .                       ForceResult::Internal(NodeRef {
      .                           height: self.height,
-- line 684 ----------------------------------------
-- line 747 ----------------------------------------
      .                   Handle { node, idx, _marker: PhantomData }
      .               }
      .           
      .               pub fn left_edge(self) -> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge> {
      .                   unsafe { Handle::new_edge(self.node, self.idx) }
      .               }
      .           
      .               pub fn right_edge(self) -> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge> {
 21,144 ( 0.00%)          unsafe { Handle::new_edge(self.node, self.idx + 1) }
      .               }
      .           }
      .           
      .           impl<BorrowType, K, V, NodeType, HandleType> PartialEq
      .               for Handle<NodeRef<BorrowType, K, V, NodeType>, HandleType>
      .           {
      .               fn eq(&self, other: &Self) -> bool {
      .                   let Self { node, idx, _marker } = self;
-- line 763 ----------------------------------------
-- line 790 ----------------------------------------
      .           }
      .           
      .           impl<BorrowType, K, V, NodeType> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge> {
      .               /// Creates a new handle to an edge in `node`.
      .               /// Unsafe because the caller must ensure that `idx <= node.len()`.
      .               pub unsafe fn new_edge(node: NodeRef<BorrowType, K, V, NodeType>, idx: usize) -> Self {
      .                   debug_assert!(idx <= node.len());
      .           
 59,571 ( 0.01%)          Handle { node, idx, _marker: PhantomData }
      .               }
      .           
      .               pub fn left_kv(self) -> Result<Handle<NodeRef<BorrowType, K, V, NodeType>, marker::KV>, Self> {
  2,675 ( 0.00%)          if self.idx > 0 {
  2,553 ( 0.00%)              Ok(unsafe { Handle::new_kv(self.node, self.idx - 1) })
      .                   } else {
      .                       Err(self)
      .                   }
      .               }
      .           
      .               pub fn right_kv(self) -> Result<Handle<NodeRef<BorrowType, K, V, NodeType>, marker::KV>, Self> {
 34,775 ( 0.00%)          if self.idx < self.node.len() {
      .                       Ok(unsafe { Handle::new_kv(self.node, self.idx) })
      .                   } else {
      .                       Err(self)
      .                   }
      .               }
      .           }
      .           
      .           pub enum LeftOrRight<T> {
-- line 818 ----------------------------------------
-- line 820 ----------------------------------------
      .               Right(T),
      .           }
      .           
      .           /// Given an edge index where we want to insert into a node filled to capacity,
      .           /// computes a sensible KV index of a split point and where to perform the insertion.
      .           /// The goal of the split point is for its key and value to end up in a parent node;
      .           /// the keys, values and edges to the left of the split point become the left child;
      .           /// the keys, values and edges to the right of the split point become the right child.
  3,190 ( 0.00%)  fn splitpoint(edge_idx: usize) -> (usize, LeftOrRight<usize>) {
      .               debug_assert!(edge_idx <= CAPACITY);
      .               // Rust issue #74834 tries to explain these symmetric rules.
 12,554 ( 0.00%)      match edge_idx {
  6,380 ( 0.00%)          0..EDGE_IDX_LEFT_OF_CENTER => (KV_IDX_CENTER - 1, LeftOrRight::Left(edge_idx)),
      .                   EDGE_IDX_LEFT_OF_CENTER => (KV_IDX_CENTER, LeftOrRight::Left(edge_idx)),
      .                   EDGE_IDX_RIGHT_OF_CENTER => (KV_IDX_CENTER, LeftOrRight::Right(0)),
  9,378 ( 0.00%)          _ => (KV_IDX_CENTER + 1, LeftOrRight::Right(edge_idx - (KV_IDX_CENTER + 1 + 1))),
      .               }
  3,190 ( 0.00%)  }
      .           
      .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge> {
      .               /// Inserts a new key-value pair between the key-value pairs to the right and left of
      .               /// this edge. This method assumes that there is enough space in the node for the new
      .               /// pair to fit.
      .               ///
      .               /// The returned pointer points to the inserted value.
369,441 ( 0.05%)      fn insert_fit(&mut self, key: K, val: V) -> *mut V {
      .                   debug_assert!(self.node.len() < CAPACITY);
      .                   let new_len = self.node.len() + 1;
      .           
      .                   unsafe {
 46,937 ( 0.01%)              slice_insert(self.node.key_area_mut(..new_len), self.idx, key);
 63,302 ( 0.01%)              slice_insert(self.node.val_area_mut(..new_len), self.idx, val);
 46,919 ( 0.01%)              *self.node.len_mut() = new_len as u16;
      .           
      .                       self.node.val_area_mut(self.idx).assume_init_mut()
      .                   }
375,364 ( 0.05%)      }
      .           }
      .           
      .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge> {
      .               /// Inserts a new key-value pair between the key-value pairs to the right and left of
      .               /// this edge. This method splits the node if there isn't enough room.
      .               ///
      .               /// The returned pointer points to the inserted value.
      .               fn insert(mut self, key: K, val: V) -> (InsertResult<'a, K, V, marker::Leaf>, *mut V) {
140,757 ( 0.02%)          if self.node.len() < CAPACITY {
260,596 ( 0.03%)              let val_ptr = self.insert_fit(key, val);
 87,528 ( 0.01%)              let kv = unsafe { Handle::new_kv(self.node, self.idx) };
      .                       (InsertResult::Fit(kv), val_ptr)
      .                   } else {
 25,240 ( 0.00%)              let (middle_kv_idx, insertion) = splitpoint(self.idx);
  6,168 ( 0.00%)              let middle = unsafe { Handle::new_kv(self.node, middle_kv_idx) };
      .                       let mut result = middle.split();
 15,452 ( 0.00%)              let mut insertion_edge = match insertion {
      .                           LeftOrRight::Left(insert_idx) => unsafe {
      .                               Handle::new_edge(result.left.reborrow_mut(), insert_idx)
      .                           },
      .                           LeftOrRight::Right(insert_idx) => unsafe {
      .                               Handle::new_edge(result.right.borrow_mut(), insert_idx)
      .                           },
      .                       };
 10,326 ( 0.00%)              let val_ptr = insertion_edge.insert_fit(key, val);
  7,431 ( 0.00%)              (InsertResult::Split(result), val_ptr)
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge> {
      .               /// Fixes the parent pointer and index in the child node that this edge
      .               /// links to. This is useful when the ordering of edges has been changed,
      .               fn correct_parent_link(self) {
-- line 890 ----------------------------------------
-- line 895 ----------------------------------------
      .                   child.set_parent_link(ptr, idx);
      .               }
      .           }
      .           
      .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge> {
      .               /// Inserts a new key-value pair and an edge that will go to the right of that new pair
      .               /// between this edge and the key-value pair to the right of this edge. This method assumes
      .               /// that there is enough space in the node for the new pair to fit.
 14,436 ( 0.00%)      fn insert_fit(&mut self, key: K, val: V, edge: Root<K, V>) {
      .                   debug_assert!(self.node.len() < CAPACITY);
      .                   debug_assert!(edge.height == self.node.height - 1);
      .                   let new_len = self.node.len() + 1;
      .           
      .                   unsafe {
  1,822 ( 0.00%)              slice_insert(self.node.key_area_mut(..new_len), self.idx, key);
  1,244 ( 0.00%)              slice_insert(self.node.val_area_mut(..new_len), self.idx, val);
      .                       slice_insert(self.node.edge_area_mut(..new_len + 1), self.idx + 1, edge.node);
  1,822 ( 0.00%)              *self.node.len_mut() = new_len as u16;
      .           
      .                       self.node.correct_childrens_parent_links(self.idx + 1..new_len + 1);
      .                   }
 14,576 ( 0.00%)      }
      .           
      .               /// Inserts a new key-value pair and an edge that will go to the right of that new pair
      .               /// between this edge and the key-value pair to the right of this edge. This method splits
      .               /// the node if there isn't enough room.
      .               fn insert(
      .                   mut self,
      .                   key: K,
      .                   val: V,
      .                   edge: Root<K, V>,
      .               ) -> InsertResult<'a, K, V, marker::Internal> {
  5,466 ( 0.00%)          assert!(edge.height == self.node.height - 1);
      .           
  3,644 ( 0.00%)          if self.node.len() < CAPACITY {
  8,481 ( 0.00%)              self.insert_fit(key, val, edge);
      .                       let kv = unsafe { Handle::new_kv(self.node, self.idx) };
      .                       InsertResult::Fit(kv)
      .                   } else {
    272 ( 0.00%)              let (middle_kv_idx, insertion) = splitpoint(self.idx);
      .                       let middle = unsafe { Handle::new_kv(self.node, middle_kv_idx) };
      .                       let mut result = middle.split();
     62 ( 0.00%)              let mut insertion_edge = match insertion {
      .                           LeftOrRight::Left(insert_idx) => unsafe {
      .                               Handle::new_edge(result.left.reborrow_mut(), insert_idx)
      .                           },
      .                           LeftOrRight::Right(insert_idx) => unsafe {
      .                               Handle::new_edge(result.right.borrow_mut(), insert_idx)
      .                           },
      .                       };
    263 ( 0.00%)              insertion_edge.insert_fit(key, val, edge);
     56 ( 0.00%)              InsertResult::Split(result)
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge> {
      .               /// Inserts a new key-value pair between the key-value pairs to the right and left of
      .               /// this edge. This method splits the node if there isn't enough room, and tries to
      .               /// insert the split off portion into the parent node recursively, until the root is reached.
      .               ///
      .               /// If the returned result is a `Fit`, its handle's node can be this edge's node or an ancestor.
      .               /// If the returned result is a `Split`, the `left` field will be the root node.
      .               /// The returned pointer points to the inserted value.
465,316 ( 0.06%)      pub fn insert_recursing(
      .                   self,
      .                   key: K,
      .                   value: V,
      .               ) -> (InsertResult<'a, K, V, marker::LeafOrInternal>, *mut V) {
278,330 ( 0.04%)          let (mut split, val_ptr) = match self.insert(key, value) {
      .                       (InsertResult::Fit(handle), ptr) => {
218,820 ( 0.03%)                  return (InsertResult::Fit(handle.forget_node_type()), ptr);
      .                       }
      .                       (InsertResult::Split(split), val_ptr) => (split.forget_node_type(), val_ptr),
      .                   };
      .           
      .                   loop {
 11,701 ( 0.00%)              split = match split.left.ascend() {
  8,017 ( 0.00%)                  Ok(parent) => match parent.insert(split.kv.0, split.kv.1, split.right) {
      .                               InsertResult::Fit(handle) => {
  9,502 ( 0.00%)                          return (InsertResult::Fit(handle.forget_node_type()), val_ptr);
      .                               }
      .                               InsertResult::Split(split) => split.forget_node_type(),
      .                           },
      .                           Err(root) => {
 12,059 ( 0.00%)                      return (InsertResult::Split(SplitResult { left: root, ..split }), val_ptr);
      .                           }
      .                       };
      .                   }
422,271 ( 0.06%)      }
      .           }
      .           
      .           impl<BorrowType: marker::BorrowType, K, V>
      .               Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::Edge>
      .           {
      .               /// Finds the node pointed to by this edge.
      .               ///
      .               /// The method name assumes you picture trees with the root node on top.
-- line 992 ----------------------------------------
-- line 999 ----------------------------------------
      .                   // marker::ValMut, there might be outstanding mutable references to
      .                   // values that we must not invalidate. There's no worry accessing the
      .                   // height field because that value is copied. Beware that, once the
      .                   // node pointer is dereferenced, we access the edges array with a
      .                   // reference (Rust issue #73987) and invalidate any other references
      .                   // to or inside the array, should any be around.
      .                   let parent_ptr = NodeRef::as_internal_ptr(&self.node);
      .                   let node = unsafe { (*parent_ptr).edges.get_unchecked(self.idx).assume_init_read() };
  7,180 ( 0.00%)          NodeRef { node, height: self.node.height - 1, _marker: PhantomData }
      .               }
      .           }
      .           
      .           impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Immut<'a>, K, V, NodeType>, marker::KV> {
      .               pub fn into_kv(self) -> (&'a K, &'a V) {
      .                   debug_assert!(self.idx < self.node.len());
      .                   let leaf = self.node.into_leaf();
      .                   let k = unsafe { leaf.keys.get_unchecked(self.idx).assume_init_ref() };
      .                   let v = unsafe { leaf.vals.get_unchecked(self.idx).assume_init_ref() };
 41,810 ( 0.01%)          (k, v)
      .               }
      .           }
      .           
      .           impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::KV> {
      .               pub fn key_mut(&mut self) -> &mut K {
      .                   unsafe { self.node.key_area_mut(self.idx).assume_init_mut() }
      .               }
      .           
-- line 1025 ----------------------------------------
-- line 1037 ----------------------------------------
      .           }
      .           
      .           impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::KV> {
      .               pub fn kv_mut(&mut self) -> (&mut K, &mut V) {
      .                   debug_assert!(self.idx < self.node.len());
      .                   // We cannot call separate key and value methods, because calling the second one
      .                   // invalidates the reference returned by the first.
      .                   unsafe {
     70 ( 0.00%)              let leaf = self.node.as_leaf_mut();
     70 ( 0.00%)              let key = leaf.keys.get_unchecked_mut(self.idx).assume_init_mut();
      .                       let val = leaf.vals.get_unchecked_mut(self.idx).assume_init_mut();
    139 ( 0.00%)              (key, val)
      .                   }
      .               }
      .           
      .               /// Replaces the key and value that the KV handle refers to.
      .               pub fn replace_kv(&mut self, k: K, v: V) -> (K, V) {
      .                   let (key, val) = self.kv_mut();
      .                   (mem::replace(key, k), mem::replace(val, v))
      .               }
-- line 1056 ----------------------------------------
-- line 1069 ----------------------------------------
      .                       (key, val)
      .                   }
      .               }
      .           
      .               /// Drops the key and value that the KV handle refers to.
      .               /// # Safety
      .               /// The node that the handle refers to must not yet have been deallocated.
      .               #[inline]
     36 ( 0.00%)      pub unsafe fn drop_key_val(mut self) {
      .                   debug_assert!(self.idx < self.node.len());
      .                   let leaf = self.node.as_leaf_dying();
      .                   unsafe {
      6 ( 0.00%)              leaf.keys.get_unchecked_mut(self.idx).assume_init_drop();
  2,051 ( 0.00%)              leaf.vals.get_unchecked_mut(self.idx).assume_init_drop();
      .                   }
     42 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::KV> {
      .               /// Helps implementations of `split` for a particular `NodeType`,
      .               /// by taking care of leaf data.
      .               fn split_leaf_data(&mut self, new_node: &mut LeafNode<K, V>) -> (K, V) {
      .                   debug_assert!(self.idx < self.node.len());
      .                   let old_len = self.node.len();
 16,407 ( 0.00%)          let new_len = old_len - self.idx - 1;
  3,199 ( 0.00%)          new_node.len = new_len as u16;
      .                   unsafe {
  2,429 ( 0.00%)              let k = self.node.key_area_mut(self.idx).assume_init_read();
  2,209 ( 0.00%)              let v = self.node.val_area_mut(self.idx).assume_init_read();
      .           
      .                       move_to_slice(
  9,570 ( 0.00%)                  self.node.key_area_mut(self.idx + 1..old_len),
  3,190 ( 0.00%)                  &mut new_node.keys[..new_len],
      .                       );
      .                       move_to_slice(
      .                           self.node.val_area_mut(self.idx + 1..old_len),
  3,190 ( 0.00%)                  &mut new_node.vals[..new_len],
      .                       );
      .           
  5,400 ( 0.00%)              *self.node.len_mut() = self.idx as u16;
  3,205 ( 0.00%)              (k, v)
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::KV> {
      .               /// Splits the underlying node into three parts:
      .               ///
      .               /// - The node is truncated to only contain the key-value pairs to the left of
-- line 1117 ----------------------------------------
-- line 1120 ----------------------------------------
      .               /// - All the key-value pairs to the right of this handle are put into a newly
      .               ///   allocated node.
      .               pub fn split(mut self) -> SplitResult<'a, K, V, marker::Leaf> {
      .                   let mut new_node = LeafNode::new();
      .           
      .                   let kv = self.split_leaf_data(&mut new_node);
      .           
      .                   let right = NodeRef::from_new_leaf(new_node);
 27,004 ( 0.00%)          SplitResult { left: self.node, kv, right }
      .               }
      .           
      .               /// Removes the key-value pair pointed to by this handle and returns it, along with the edge
      .               /// that the key-value pair collapsed into.
      .               pub fn remove(
      .                   mut self,
      .               ) -> ((K, V), Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>) {
      .                   let old_len = self.node.len();
      .                   unsafe {
      .                       let k = slice_remove(self.node.key_area_mut(..old_len), self.idx);
 25,355 ( 0.00%)              let v = slice_remove(self.node.val_area_mut(..old_len), self.idx);
141,926 ( 0.02%)              *self.node.len_mut() = (old_len - 1) as u16;
184,393 ( 0.02%)              ((k, v), self.left_edge())
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::KV> {
      .               /// Splits the underlying node into three parts:
      .               ///
      .               /// - The node is truncated to only contain the edges and key-value pairs to the
-- line 1149 ----------------------------------------
-- line 1153 ----------------------------------------
      .               ///   a newly allocated node.
      .               pub fn split(mut self) -> SplitResult<'a, K, V, marker::Internal> {
      .                   let old_len = self.node.len();
      .                   unsafe {
      .                       let mut new_node = InternalNode::new();
      .                       let kv = self.split_leaf_data(&mut new_node.data);
      .                       let new_len = usize::from(new_node.data.len);
      .                       move_to_slice(
     35 ( 0.00%)                  self.node.edge_area_mut(self.idx + 1..old_len + 1),
     70 ( 0.00%)                  &mut new_node.edges[..new_len + 1],
      .                       );
      .           
      .                       let height = self.node.height;
      .                       let right = NodeRef::from_new_internal(new_node, height);
      .           
    112 ( 0.00%)              SplitResult { left: self.node, kv, right }
      .                   }
      .               }
      .           }
      .           
      .           /// Represents a session for evaluating and performing a balancing operation
      .           /// around an internal key-value pair.
      .           pub struct BalancingContext<'a, K, V> {
      .               parent: Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::KV>,
-- line 1176 ----------------------------------------
-- line 1242 ----------------------------------------
      .           
      .               pub fn into_right_child(self) -> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {
      .                   self.right_child
      .               }
      .           
      .               /// Returns whether merging is possible, i.e., whether there is enough room
      .               /// in a node to combine the central KV with both adjacent child nodes.
      .               pub fn can_merge(&self) -> bool {
  7,898 ( 0.00%)          self.left_child.len() + 1 + self.right_child.len() <= CAPACITY
      .               }
      .           }
      .           
      .           impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {
      .               /// Performs a merge and lets a closure decide what to return.
      .               fn do_merge<
      .                   F: FnOnce(
      .                       NodeRef<marker::Mut<'a>, K, V, marker::Internal>,
-- line 1258 ----------------------------------------
-- line 1264 ----------------------------------------
      .                   result: F,
      .               ) -> R {
      .                   let Handle { node: mut parent_node, idx: parent_idx, _marker } = self.parent;
      .                   let old_parent_len = parent_node.len();
      .                   let mut left_node = self.left_child;
      .                   let old_left_len = left_node.len();
      .                   let mut right_node = self.right_child;
      .                   let right_len = right_node.len();
  5,118 ( 0.00%)          let new_left_len = old_left_len + 1 + right_len;
      .           
  5,118 ( 0.00%)          assert!(new_left_len <= CAPACITY);
      .           
      .                   unsafe {
  2,559 ( 0.00%)              *left_node.len_mut() = new_left_len as u16;
      .           
      .                       let parent_key = slice_remove(parent_node.key_area_mut(..old_parent_len), parent_idx);
      .                       left_node.key_area_mut(old_left_len).write(parent_key);
      .                       move_to_slice(
      .                           right_node.key_area_mut(..right_len),
      .                           left_node.key_area_mut(old_left_len + 1..new_left_len),
      .                       );
      .           
      .                       let parent_val = slice_remove(parent_node.val_area_mut(..old_parent_len), parent_idx);
      .                       left_node.val_area_mut(old_left_len).write(parent_val);
      .                       move_to_slice(
      .                           right_node.val_area_mut(..right_len),
      .                           left_node.val_area_mut(old_left_len + 1..new_left_len),
      .                       );
      .           
  2,559 ( 0.00%)              slice_remove(&mut parent_node.edge_area_mut(..old_parent_len + 1), parent_idx + 1);
      .                       parent_node.correct_childrens_parent_links(parent_idx + 1..old_parent_len);
 15,356 ( 0.00%)              *parent_node.len_mut() -= 1;
      .           
  5,118 ( 0.00%)              if parent_node.height > 1 {
      .                           // SAFETY: the height of the nodes being merged is one below the height
      .                           // of the node of this edge, thus above zero, so they are internal.
      .                           let mut left_node = left_node.reborrow_mut().cast_to_internal_unchecked();
      .                           let mut right_node = right_node.cast_to_internal_unchecked();
      .                           move_to_slice(
      .                               right_node.edge_area_mut(..right_len + 1),
      2 ( 0.00%)                      left_node.edge_area_mut(old_left_len + 1..new_left_len + 1),
      .                           );
      .           
      .                           left_node.correct_childrens_parent_links(old_left_len + 1..new_left_len + 1);
      .           
      .                           Global.deallocate(right_node.node.cast(), Layout::new::<InternalNode<K, V>>());
      .                       } else {
      .                           Global.deallocate(right_node.node.cast(), Layout::new::<LeafNode<K, V>>());
      .                       }
-- line 1312 ----------------------------------------
-- line 1313 ----------------------------------------
      .                   }
      .                   result(parent_node, left_node)
      .               }
      .           
      .               /// Merges the parent's key-value pair and both adjacent child nodes into
      .               /// the left child node and returns the shrunk parent node.
      .               ///
      .               /// Panics unless we `.can_merge()`.
     14 ( 0.00%)      pub fn merge_tracking_parent(self) -> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {
      4 ( 0.00%)          self.do_merge(|parent, _child| parent)
     20 ( 0.00%)      }
      .           
      .               /// Merges the parent's key-value pair and both adjacent child nodes into
      .               /// the left child node and returns that child node.
      .               ///
      .               /// Panics unless we `.can_merge()`.
      .               pub fn merge_tracking_child(self) -> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {
      .                   self.do_merge(|_parent, child| child)
      .               }
      .           
      .               /// Merges the parent's key-value pair and both adjacent child nodes into
      .               /// the left child node and returns the edge handle in that child node
      .               /// where the tracked child edge ended up,
      .               ///
      .               /// Panics unless we `.can_merge()`.
 17,899 ( 0.00%)      pub fn merge_tracking_child_edge(
      .                   self,
      .                   track_edge_idx: LeftOrRight<usize>,
      .               ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::Edge> {
  2,557 ( 0.00%)          let old_left_len = self.left_child.len();
  2,557 ( 0.00%)          let right_len = self.right_child.len();
  7,671 ( 0.00%)          assert!(match track_edge_idx {
      .                       LeftOrRight::Left(idx) => idx <= old_left_len,
      .                       LeftOrRight::Right(idx) => idx <= right_len,
      .                   });
      .                   let child = self.merge_tracking_child();
  2,557 ( 0.00%)          let new_idx = match track_edge_idx {
      .                       LeftOrRight::Left(idx) => idx,
  7,542 ( 0.00%)              LeftOrRight::Right(idx) => old_left_len + 1 + idx,
      .                   };
      .                   unsafe { Handle::new_edge(child, new_idx) }
 20,456 ( 0.00%)      }
      .           
      .               /// Removes a key-value pair from the left child and places it in the key-value storage
      .               /// of the parent, while pushing the old parent key-value pair into the right child.
      .               /// Returns a handle to the edge in the right child corresponding to where the original
      .               /// edge specified by `track_right_edge_idx` ended up.
      .               pub fn steal_left(
      .                   mut self,
      .                   track_right_edge_idx: usize,
      .               ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::Edge> {
     74 ( 0.00%)          self.bulk_steal_left(1);
      .                   unsafe { Handle::new_edge(self.right_child, 1 + track_right_edge_idx) }
      .               }
      .           
      .               /// Removes a key-value pair from the right child and places it in the key-value storage
      .               /// of the parent, while pushing the old parent key-value pair onto the left child.
      .               /// Returns a handle to the edge in the left child specified by `track_left_edge_idx`,
      .               /// which didn't move.
      .               pub fn steal_right(
      .                   mut self,
      .                   track_left_edge_idx: usize,
      .               ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::Edge> {
     66 ( 0.00%)          self.bulk_steal_right(1);
      .                   unsafe { Handle::new_edge(self.left_child, track_left_edge_idx) }
      .               }
      .           
      .               /// This does stealing similar to `steal_left` but steals multiple elements at once.
    259 ( 0.00%)      pub fn bulk_steal_left(&mut self, count: usize) {
     74 ( 0.00%)          assert!(count > 0);
      .                   unsafe {
      .                       let left_node = &mut self.left_child;
      .                       let old_left_len = left_node.len();
      .                       let right_node = &mut self.right_child;
     37 ( 0.00%)              let old_right_len = right_node.len();
      .           
      .                       // Make sure that we may steal safely.
    185 ( 0.00%)              assert!(old_right_len + count <= CAPACITY);
    106 ( 0.00%)              assert!(old_left_len >= count);
      .           
      .                       let new_left_len = old_left_len - count;
      .                       let new_right_len = old_right_len + count;
     37 ( 0.00%)              *left_node.len_mut() = new_left_len as u16;
     46 ( 0.00%)              *right_node.len_mut() = new_right_len as u16;
      .           
      .                       // Move leaf data.
      .                       {
      .                           // Make room for stolen elements in the right child.
      .                           slice_shr(right_node.key_area_mut(..new_right_len), count);
      .                           slice_shr(right_node.val_area_mut(..new_right_len), count);
      .           
      .                           // Move elements from the left child to the right one.
      .                           move_to_slice(
     74 ( 0.00%)                      left_node.key_area_mut(new_left_len + 1..old_left_len),
     37 ( 0.00%)                      right_node.key_area_mut(..count - 1),
      .                           );
      .                           move_to_slice(
      .                               left_node.val_area_mut(new_left_len + 1..old_left_len),
      .                               right_node.val_area_mut(..count - 1),
      .                           );
      .           
      .                           // Move the left-most stolen pair to the parent.
     32 ( 0.00%)                  let k = left_node.key_area_mut(new_left_len).assume_init_read();
      .                           let v = left_node.val_area_mut(new_left_len).assume_init_read();
    165 ( 0.00%)                  let (k, v) = self.parent.replace_kv(k, v);
      .           
      .                           // Move parent's key-value pair to the right child.
      .                           right_node.key_area_mut(count - 1).write(k);
      .                           right_node.val_area_mut(count - 1).write(v);
      .                       }
      .           
    185 ( 0.00%)              match (left_node.reborrow_mut().force(), right_node.reborrow_mut().force()) {
      .                           (ForceResult::Internal(mut left), ForceResult::Internal(mut right)) => {
      .                               // Make room for stolen edges.
      .                               slice_shr(right.edge_area_mut(..new_right_len + 1), count);
      .           
      .                               // Steal edges.
      .                               move_to_slice(
      .                                   left.edge_area_mut(new_left_len + 1..old_left_len + 1),
      .                                   right.edge_area_mut(..count),
-- line 1432 ----------------------------------------
-- line 1433 ----------------------------------------
      .                               );
      .           
      .                               right.correct_childrens_parent_links(0..new_right_len + 1);
      .                           }
      .                           (ForceResult::Leaf(_), ForceResult::Leaf(_)) => {}
      .                           _ => unreachable!(),
      .                       }
      .                   }
    296 ( 0.00%)      }
      .           
      .               /// The symmetric clone of `bulk_steal_left`.
    231 ( 0.00%)      pub fn bulk_steal_right(&mut self, count: usize) {
     66 ( 0.00%)          assert!(count > 0);
      .                   unsafe {
      .                       let left_node = &mut self.left_child;
     33 ( 0.00%)              let old_left_len = left_node.len();
      .                       let right_node = &mut self.right_child;
      .                       let old_right_len = right_node.len();
      .           
      .                       // Make sure that we may steal safely.
    165 ( 0.00%)              assert!(old_left_len + count <= CAPACITY);
     66 ( 0.00%)              assert!(old_right_len >= count);
      .           
      .                       let new_left_len = old_left_len + count;
      .                       let new_right_len = old_right_len - count;
     33 ( 0.00%)              *left_node.len_mut() = new_left_len as u16;
     33 ( 0.00%)              *right_node.len_mut() = new_right_len as u16;
      .           
      .                       // Move leaf data.
      .                       {
      .                           // Move the right-most stolen pair to the parent.
     66 ( 0.00%)                  let k = right_node.key_area_mut(count - 1).assume_init_read();
      .                           let v = right_node.val_area_mut(count - 1).assume_init_read();
    132 ( 0.00%)                  let (k, v) = self.parent.replace_kv(k, v);
      .           
      .                           // Move parent's key-value pair to the left child.
      .                           left_node.key_area_mut(old_left_len).write(k);
      .                           left_node.val_area_mut(old_left_len).write(v);
      .           
      .                           // Move elements from the right child to the left one.
      .                           move_to_slice(
      .                               right_node.key_area_mut(..count - 1),
     33 ( 0.00%)                      left_node.key_area_mut(old_left_len + 1..new_left_len),
      .                           );
      .                           move_to_slice(
      .                               right_node.val_area_mut(..count - 1),
      .                               left_node.val_area_mut(old_left_len + 1..new_left_len),
      .                           );
      .           
      .                           // Fill gap where stolen elements used to be.
      .                           slice_shl(right_node.key_area_mut(..old_right_len), count);
      .                           slice_shl(right_node.val_area_mut(..old_right_len), count);
      .                       }
      .           
    165 ( 0.00%)              match (left_node.reborrow_mut().force(), right_node.reborrow_mut().force()) {
      .                           (ForceResult::Internal(mut left), ForceResult::Internal(mut right)) => {
      .                               // Steal edges.
      .                               move_to_slice(
      .                                   right.edge_area_mut(..count),
      .                                   left.edge_area_mut(old_left_len + 1..new_left_len + 1),
      .                               );
      .           
      .                               // Fill gap where stolen edges used to be.
-- line 1495 ----------------------------------------
-- line 1497 ----------------------------------------
      .           
      .                               left.correct_childrens_parent_links(old_left_len + 1..new_left_len + 1);
      .                               right.correct_childrens_parent_links(0..new_right_len + 1);
      .                           }
      .                           (ForceResult::Leaf(_), ForceResult::Leaf(_)) => {}
      .                           _ => unreachable!(),
      .                       }
      .                   }
    264 ( 0.00%)      }
      .           }
      .           
      .           impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge> {
      .               pub fn forget_node_type(
      .                   self,
      .               ) -> Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, marker::Edge> {
      .                   unsafe { Handle::new_edge(self.node.forget_type(), self.idx) }
      .               }
-- line 1513 ----------------------------------------
-- line 1681 ----------------------------------------
      .           ///
      .           /// # Safety
      .           /// The slice has more than `idx` elements.
      .           unsafe fn slice_insert<T>(slice: &mut [MaybeUninit<T>], idx: usize, val: T) {
      .               unsafe {
      .                   let len = slice.len();
      .                   debug_assert!(len > idx);
      .                   let slice_ptr = slice.as_mut_ptr();
342,688 ( 0.05%)          if len > idx + 1 {
 32,365 ( 0.00%)              ptr::copy(slice_ptr.add(idx), slice_ptr.add(idx + 1), len - idx - 1);
      .                   }
      .                   (*slice_ptr.add(idx)).write(val);
      .               }
      .           }
      .           
      .           /// Removes and returns a value from a slice of all initialized elements, leaving behind one
      .           /// trailing uninitialized element.
      .           ///
-- line 1698 ----------------------------------------
-- line 1699 ----------------------------------------
      .           /// # Safety
      .           /// The slice has more than `idx` elements.
      .           unsafe fn slice_remove<T>(slice: &mut [MaybeUninit<T>], idx: usize) -> T {
      .               unsafe {
      .                   let len = slice.len();
      .                   debug_assert!(idx < len);
      .                   let slice_ptr = slice.as_mut_ptr();
      .                   let ret = (*slice_ptr.add(idx)).assume_init_read();
351,800 ( 0.05%)          ptr::copy(slice_ptr.add(idx + 1), slice_ptr.add(idx), len - idx - 1);
      .                   ret
      .               }
      .           }
      .           
      .           /// Shifts the elements in a slice `distance` positions to the left.
      .           ///
      .           /// # Safety
      .           /// The slice has at least `distance` elements.
-- line 1715 ----------------------------------------
-- line 1722 ----------------------------------------
      .           
      .           /// Shifts the elements in a slice `distance` positions to the right.
      .           ///
      .           /// # Safety
      .           /// The slice has at least `distance` elements.
      .           unsafe fn slice_shr<T>(slice: &mut [MaybeUninit<T>], distance: usize) {
      .               unsafe {
      .                   let slice_ptr = slice.as_mut_ptr();
    102 ( 0.00%)          ptr::copy(slice_ptr, slice_ptr.add(distance), slice.len() - distance);
      .               }
      .           }
      .           
      .           /// Moves all values from a slice of initialized elements to a slice
      .           /// of uninitialized elements, leaving behind `src` as all uninitialized.
      .           /// Works like `dst.copy_from_slice(src)` but does not require `T` to be `Copy`.
      .           fn move_to_slice<T>(src: &mut [MaybeUninit<T>], dst: &mut [MaybeUninit<T>]) {
 11,728 ( 0.00%)      assert!(src.len() == dst.len());
      .               unsafe {
      .                   ptr::copy_nonoverlapping(src.as_ptr(), dst.as_mut_ptr(), src.len());
      .               }
      .           }
      .           
      .           #[cfg(test)]
      .           mod tests;

924,623 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/node.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/scoped_cell.rs
--------------------------------------------------------------------------------
Ir               

-- line 22 ----------------------------------------
      .           impl<'a, 'b, T: LambdaL> Deref for RefMutL<'a, 'b, T> {
      .               type Target = <T as ApplyL<'b>>::Out;
      .               fn deref(&self) -> &Self::Target {
      .                   self.0
      .               }
      .           }
      .           
      .           impl<'a, 'b, T: LambdaL> DerefMut for RefMutL<'a, 'b, T> {
     60 ( 0.00%)      fn deref_mut(&mut self) -> &mut Self::Target {
     30 ( 0.00%)          self.0
     60 ( 0.00%)      }
      .           }
      .           
      .           pub struct ScopedCell<T: LambdaL>(Cell<<T as ApplyL<'static>>::Out>);
      .           
      .           impl<T: LambdaL> ScopedCell<T> {
      .               #[rustc_allow_const_fn_unstable(const_fn)]
      3 ( 0.00%)      pub const fn new(value: <T as ApplyL<'static>>::Out) -> Self {
     10 ( 0.00%)          ScopedCell(Cell::new(value))
      2 ( 0.00%)      }
      .           
      .               /// Sets the value in `self` to `replacement` while
      .               /// running `f`, which gets the old value, mutably.
      .               /// The old value will be restored after `f` exits, even
      .               /// by panic, including modifications made to it by `f`.
664,160 ( 0.09%)      pub fn replace<'a, R>(
      .                   &self,
      .                   replacement: <T as ApplyL<'a>>::Out,
      .                   f: impl for<'b, 'c> FnOnce(RefMutL<'b, 'c, T>) -> R,
      .               ) -> R {
      .                   /// Wrapper that ensures that the cell always gets filled
      .                   /// (with the original state, optionally changed by `f`),
      .                   /// even if `f` had panicked.
      .                   struct PutBackOnDrop<'a, T: LambdaL> {
      .                       cell: &'a ScopedCell<T>,
      .                       value: Option<<T as ApplyL<'static>>::Out>,
      .                   }
      .           
      .                   impl<'a, T: LambdaL> Drop for PutBackOnDrop<'a, T> {
    135 ( 0.00%)              fn drop(&mut self) {
 90,327 ( 0.01%)                  self.cell.0.set(self.value.take().unwrap());
     90 ( 0.00%)              }
      .                   }
      .           
180,428 ( 0.02%)          let mut put_back_on_drop = PutBackOnDrop {
      .                       cell: self,
    450 ( 0.00%)              value: Some(self.0.replace(unsafe {
     90 ( 0.00%)                  let erased = mem::transmute_copy(&replacement);
    540 ( 0.00%)                  mem::forget(replacement);
    450 ( 0.00%)                  erased
      .                       })),
      .                   };
      .           
 50,846 ( 0.01%)          f(RefMutL(put_back_on_drop.value.as_mut().unwrap()))
873,869 ( 0.12%)      }
      .           
      .               /// Sets the value in `self` to `value` while running `f`.
    105 ( 0.00%)      pub fn set<R>(&self, value: <T as ApplyL<'_>>::Out, f: impl FnOnce() -> R) -> R {
    240 ( 0.00%)          self.replace(value, |_| f())
     30 ( 0.00%)      }
      .           }

 35,736 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/scoped_cell.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 36 ----------------------------------------
      .           use rustc_session::parse::ParseSess;
      .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
      .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
      .           use tracing::debug;
      .           
      .           use std::ops::Range;
      .           use std::{cmp, mem, slice};
      .           
  4,938 ( 0.00%)  bitflags::bitflags! {
      .               struct Restrictions: u8 {
      .                   const STMT_EXPR         = 1 << 0;
      .                   const NO_STRUCT_LITERAL = 1 << 1;
      .                   const CONST_EXPR        = 1 << 2;
      .               }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
      .                               $self.bump();
      .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
      .                           }
      .                       }
      .                   }
      .               };
      .           }
      .           
  7,221 ( 0.00%)  #[derive(Clone)]
      .           pub struct Parser<'a> {
    255 ( 0.00%)      pub sess: &'a ParseSess,
      .               /// The current token.
    194 ( 0.00%)      pub token: Token,
      .               /// The spacing for the current token
    121 ( 0.00%)      pub token_spacing: Spacing,
      .               /// The previous token.
    291 ( 0.00%)      pub prev_token: Token,
    145 ( 0.00%)      pub capture_cfg: bool,
    314 ( 0.00%)      restrictions: Restrictions,
    242 ( 0.00%)      expected_tokens: Vec<TokenType>,
      .               // Important: This must only be advanced from `next_tok`
      .               // to ensure that `token_cursor.num_next_calls` is updated properly
      .               token_cursor: TokenCursor,
    242 ( 0.00%)      desugar_doc_comments: bool,
      .               /// This field is used to keep track of how many left angle brackets we have seen. This is
      .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
      .               /// appropriately.
      .               ///
      .               /// See the comments in the `parse_path_segment` function for more details.
    242 ( 0.00%)      unmatched_angle_bracket_count: u32,
    363 ( 0.00%)      max_angle_bracket_count: u32,
      .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
      .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
      .               /// error.
    121 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
      .               last_unexpected_token_span: Option<Span>,
      .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
      .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
      .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
      .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
      .               subparser_name: Option<&'static str>,
      .               capture_state: CaptureState,
      .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
      .           /// the first macro inner attribute to invoke a proc-macro).
      .           /// When create a `TokenStream`, the inner attributes get inserted
      .           /// into the proper place in the token stream.
      .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
      .           
      .           /// Controls how we capture tokens. Capturing can be expensive,
      .           /// so we try to avoid performing capturing in cases where
      .           /// we will never need an `AttrAnnotatedTokenStream`
    121 ( 0.00%)  #[derive(Copy, Clone)]
      .           pub enum Capturing {
      .               /// We aren't performing any capturing - this is the default mode.
      .               No,
      .               /// We are capturing tokens
      .               Yes,
      .           }
      .           
    521 ( 0.00%)  #[derive(Clone)]
      .           struct CaptureState {
    484 ( 0.00%)      capturing: Capturing,
    121 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
      .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
      .           }
      .           
      .           impl<'a> Drop for Parser<'a> {
      .               fn drop(&mut self) {
  1,573 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
      .               }
      .           }
      .           
 37,538 ( 0.00%)  #[derive(Clone)]
      .           struct TokenCursor {
      .               frame: TokenCursorFrame,
  8,689 ( 0.00%)      stack: Vec<TokenCursorFrame>,
      .               desugar_doc_comments: bool,
      .               // Counts the number of calls to `next` or `next_desugared`,
      .               // depending on whether `desugar_doc_comments` is set.
  2,750 ( 0.00%)      num_next_calls: usize,
      .               // During parsing, we may sometimes need to 'unglue' a
      .               // glued token into two component tokens
      .               // (e.g. '>>' into '>' and '>), so that the parser
      .               // can consume them one at a time. This process
      .               // bypasses the normal capturing mechanism
      .               // (e.g. `num_next_calls` will not be incremented),
      .               // since the 'unglued' tokens due not exist in
      .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
      .               // in `Option<Vec<u8>>` requires us to unglue
      .               // the trailing `>>` token. The `break_last_token`
      .               // field is used to track this token - it gets
      .               // appended to the captured stream when
      .               // we evaluate a `LazyTokenStream`
      .               break_last_token: bool,
      .           }
      .           
 17,324 ( 0.00%)  #[derive(Clone)]
      .           struct TokenCursorFrame {
  6,099 ( 0.00%)      delim: token::DelimToken,
      .               span: DelimSpan,
      .               open_delim: bool,
 12,198 ( 0.00%)      tree_cursor: tokenstream::Cursor,
      .               close_delim: bool,
      .           }
      .           
      .           impl TokenCursorFrame {
      .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
  1,630 ( 0.00%)          TokenCursorFrame {
      .                       delim,
      .                       span,
      .                       open_delim: false,
  3,912 ( 0.00%)              tree_cursor: tts.into_trees(),
      .                       close_delim: false,
      .                   }
      .               }
      .           }
      .           
      .           impl TokenCursor {
275,184 ( 0.04%)      fn next(&mut self) -> (Token, Spacing) {
      .                   loop {
137,290 ( 0.02%)              let (tree, spacing) = if !self.frame.open_delim {
  3,260 ( 0.00%)                  self.frame.open_delim = true;
 16,300 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
265,900 ( 0.04%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
      .                           tree
 13,504 ( 0.00%)              } else if !self.frame.close_delim {
  3,202 ( 0.00%)                  self.frame.close_delim = true;
 16,010 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
  6,330 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
 41,145 ( 0.01%)                  self.frame = frame;
      .                           continue;
      .                       } else {
  6,930 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
      .                       };
      .           
 52,384 ( 0.01%)              match tree {
      .                           TokenTree::Token(token) => {
183,456 ( 0.02%)                      return (token, spacing);
      .                           }
      .                           TokenTree::Delimited(sp, delim, tts) => {
      .                               let frame = TokenCursorFrame::new(sp, delim, tts);
      .                               self.stack.push(mem::replace(&mut self.frame, frame));
      .                           }
      .                       }
      .                   }
183,456 ( 0.02%)      }
      .           
 20,560 ( 0.00%)      fn next_desugared(&mut self) -> (Token, Spacing) {
  6,168 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
      .                       (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
      .                           (data, attr_style, span)
      .                       }
 10,280 ( 0.00%)              tok => return tok,
      .                   };
      .           
      .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
      .                   // required to wrap the text.
      .                   let mut num_of_hashes = 0;
      .                   let mut count = 0;
      .                   for ch in data.as_str().chars() {
      .                       count = match ch {
-- line 298 ----------------------------------------
-- line 332 ----------------------------------------
      .                                   .iter()
      .                                   .cloned()
      .                                   .collect::<TokenStream>()
      .                           },
      .                       ),
      .                   ));
      .           
      .                   self.next()
 18,504 ( 0.00%)      }
      .           }
      .           
 13,480 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
      .           enum TokenType {
 10,784 ( 0.00%)      Token(TokenKind),
      .               Keyword(Symbol),
      .               Operator,
      .               Lifetime,
      .               Ident,
      .               Path,
      .               Type,
      .               Const,
      .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
      .               /// The separator token.
      .               sep: Option<TokenKind>,
      .               /// `true` if a trailing separator is allowed.
      .               trailing_sep_allowed: bool,
      .           }
      .           
      .           impl SeqSep {
      .               fn trailing_allowed(t: TokenKind) -> SeqSep {
     39 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
      .               }
      .           
      .               fn none() -> SeqSep {
      .                   SeqSep { sep: None, trailing_sep_allowed: false }
      .               }
      .           }
      .           
      .           pub enum FollowedByType {
      .               Yes,
      .               No,
      .           }
      .           
      .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
    900 ( 0.00%)      Some(match token.kind {
  1,800 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
  1,800 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
  1,800 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
      .                   token::DocComment(..) => "doc comment",
      .                   _ => return None,
      .               })
      .           }
      .           
  3,150 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
    900 ( 0.00%)      let token_str = pprust::token_to_string(token);
      .               match token_descr_opt(token) {
      .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
  3,150 ( 0.00%)          _ => format!("`{}`", token_str),
      .               }
  2,250 ( 0.00%)  }
      .           
      .           impl<'a> Parser<'a> {
  4,564 ( 0.00%)      pub fn new(
      .                   sess: &'a ParseSess,
      .                   tokens: TokenStream,
      .                   desugar_doc_comments: bool,
      .                   subparser_name: Option<&'static str>,
      .               ) -> Self {
    326 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
    652 ( 0.00%)          start_frame.open_delim = true;
      .                   start_frame.close_delim = true;
      .           
 10,106 ( 0.00%)          let mut parser = Parser {
      .                       sess,
    326 ( 0.00%)              token: Token::dummy(),
      .                       token_spacing: Spacing::Alone,
    326 ( 0.00%)              prev_token: Token::dummy(),
      .                       capture_cfg: false,
      .                       restrictions: Restrictions::empty(),
      .                       expected_tokens: Vec::new(),
      .                       token_cursor: TokenCursor {
  1,956 ( 0.00%)                  frame: start_frame,
      .                           stack: Vec::new(),
      .                           num_next_calls: 0,
      .                           desugar_doc_comments,
      .                           break_last_token: false,
      .                       },
      .                       desugar_doc_comments,
      .                       unmatched_angle_bracket_count: 0,
      .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
      .                           capturing: Capturing::No,
      .                           replace_ranges: Vec::new(),
      .                           inner_attr_ranges: Default::default(),
      .                       },
      .                       current_closure: None,
      .                   };
      .           
      .                   // Make parser point to the first token.
    652 ( 0.00%)          parser.bump();
      .           
      .                   parser
  2,934 ( 0.00%)      }
      .           
      .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
      .                   loop {
126,246 ( 0.02%)              let (mut next, spacing) = if self.desugar_doc_comments {
  8,224 ( 0.00%)                  self.token_cursor.next_desugared()
      .                       } else {
 56,955 ( 0.01%)                  self.token_cursor.next()
      .                       };
 84,164 ( 0.01%)              self.token_cursor.num_next_calls += 1;
      .                       // We've retrieved an token from the underlying
      .                       // cursor, so we no longer need to worry about
      .                       // an unglued token. See `break_and_eat` for more details
 21,041 ( 0.00%)              self.token_cursor.break_last_token = false;
 84,164 ( 0.01%)              if next.span.is_dummy() {
      .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
  1,328 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
      .                       }
 72,131 ( 0.01%)              if matches!(
 42,082 ( 0.01%)                  next.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
 84,164 ( 0.01%)              return (next, spacing);
      .                   }
      .               }
      .           
      .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
      .                   match self.expect_one_of(&[], &[]) {
      .                       Err(e) => Err(e),
      .                       // We can get `Ok(true)` from `recover_closing_delimiter`
      .                       // which is called in `expected_one_of_not_found`.
      .                       Ok(_) => FatalError.raise(),
      .                   }
      .               }
      .           
      .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
 27,351 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
  3,039 ( 0.00%)          if self.expected_tokens.is_empty() {
  2,982 ( 0.00%)              if self.token == *t {
  2,485 ( 0.00%)                  self.bump();
      .                           Ok(false)
      .                       } else {
      .                           self.unexpected_try_recover(t)
      .                       }
      .                   } else {
 30,504 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
      .                   }
 45,585 ( 0.01%)      }
      .           
      .               /// Expect next token to be edible or inedible token.  If edible,
      .               /// then consume it; if inedible, then return without consuming
      .               /// anything.  Signal a fatal error if next token is unexpected.
 37,176 ( 0.00%)      pub fn expect_one_of(
      .                   &mut self,
      .                   edible: &[TokenKind],
      .                   inedible: &[TokenKind],
      .               ) -> PResult<'a, bool /* recovered */> {
  6,196 ( 0.00%)          if edible.contains(&self.token.kind) {
  7,809 ( 0.00%)              self.bump();
      .                       Ok(false)
      .                   } else if inedible.contains(&self.token.kind) {
      .                       // leave it in the input
      .                       Ok(false)
      .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
      .                       FatalError.raise();
      .                   } else {
      .                       self.expected_one_of_not_found(edible, inedible)
      .                   }
 46,470 ( 0.01%)      }
      .           
      .               // Public for rustfmt usage.
      .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
 18,365 ( 0.00%)          self.parse_ident_common(true)
      .               }
      .           
      .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
 13,890 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
      .                       TokenKind::DocComment(..) => {
      .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
      .                       }
      .                       _ => self.expected_ident_found(),
      .                   })
      .               }
      .           
 32,235 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
  4,605 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
 27,630 ( 0.00%)          if !is_raw && ident.is_reserved() {
      .                       let mut err = self.expected_ident_found();
      .                       if recover {
      .                           err.emit();
      .                       } else {
      .                           return Err(err);
      .                       }
      .                   }
 18,420 ( 0.00%)          self.bump();
      .                   Ok(ident)
 46,050 ( 0.01%)      }
      .           
      .               /// Checks if the next token is `tok`, and returns `true` if so.
      .               ///
      .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
      .               /// encountered.
356,916 ( 0.05%)      fn check(&mut self, tok: &TokenKind) -> bool {
155,543 ( 0.02%)          let is_present = self.token == *tok;
105,048 ( 0.01%)          if !is_present {
210,735 ( 0.03%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
      .                   }
      .                   is_present
356,916 ( 0.05%)      }
      .           
      .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
     80 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
 79,046 ( 0.01%)          let is_present = self.check(tok);
 52,092 ( 0.01%)          if is_present {
 12,186 ( 0.00%)              self.bump()
      .                   }
      .                   is_present
    100 ( 0.00%)      }
      .           
      .               /// If the next token is the given keyword, returns `true` without eating it.
      .               /// An expectation is also added for diagnostics purposes.
 14,870 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
  3,922 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
105,614 ( 0.01%)          self.token.is_keyword(kw)
      .               }
      .           
      .               /// If the next token is the given keyword, eats it and returns `true`.
      .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
      .               // Public for rustfmt usage.
 23,710 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
 21,076 ( 0.00%)          if self.check_keyword(kw) {
  2,677 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
 23,710 ( 0.00%)      }
      .           
      .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
  3,510 ( 0.00%)          if self.token.is_keyword(kw) {
    858 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
      .               /// If the given word is not a keyword, signals an error.
      .               /// If the next token is not the given word, signals an error.
      .               /// Otherwise, eats it.
    555 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
      .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
    444 ( 0.00%)      }
      .           
      .               /// Is the given keyword `kw` followed by a non-reserved identifier?
 23,752 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
 11,876 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
 26,721 ( 0.00%)      }
      .           
 16,188 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
  6,978 ( 0.00%)          if ok {
      .                       true
      .                   } else {
  3,268 ( 0.00%)              self.expected_tokens.push(typ);
      .                       false
      .                   }
 16,188 ( 0.00%)      }
      .           
      .               fn check_ident(&mut self) -> bool {
  3,108 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
      .               }
      .           
  5,988 ( 0.00%)      fn check_path(&mut self) -> bool {
 13,196 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
  7,485 ( 0.00%)      }
      .           
      .               fn check_type(&mut self) -> bool {
    908 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
      .               }
      .           
      .               fn check_const_arg(&mut self) -> bool {
    896 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
      .               }
      .           
  3,222 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
  1,790 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
      .                       && self.look_ahead(dist + 1, |t| match t.kind {
      .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
      .                           token::OpenDelim(DelimToken::Brace) => true,
      .                           _ => false,
      .                       })
  3,222 ( 0.00%)      }
      .           
      .               /// Checks to see if the next token is either `+` or `+=`.
      .               /// Otherwise returns `false`.
      .               fn check_plus(&mut self) -> bool {
  2,336 ( 0.00%)          self.check_or_expected(
  1,168 ( 0.00%)              self.token.is_like_plus(),
  1,168 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
      .                   )
      .               }
      .           
      .               /// Eats the expected token if it's present possibly breaking
      .               /// compound tokens like multi-character operators in process.
      .               /// Returns `true` if the token was eaten.
 27,552 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
 16,072 ( 0.00%)          if self.token.kind == expected {
  1,370 ( 0.00%)              self.bump();
      .                       return true;
      .                   }
  8,055 ( 0.00%)          match self.token.kind.break_two_token_op() {
     74 ( 0.00%)              Some((first, second)) if first == expected => {
     32 ( 0.00%)                  let first_span = self.sess.source_map().start_point(self.token.span);
     40 ( 0.00%)                  let second_span = self.token.span.with_lo(first_span.hi());
     72 ( 0.00%)                  self.token = Token::new(first, first_span);
      .                           // Keep track of this token - if we end token capturing now,
      .                           // we'll want to append this token to the captured stream.
      .                           //
      .                           // If we consume any additional tokens, then this token
      .                           // is not needed (we'll capture the entire 'glued' token),
      .                           // and `next_tok` will set this field to `None`
      8 ( 0.00%)                  self.token_cursor.break_last_token = true;
      .                           // Use the spacing of the glued token as the spacing
      .                           // of the unglued second token.
    112 ( 0.00%)                  self.bump_with((Token::new(second, second_span), self.token_spacing));
      .                           true
      .                       }
      .                       _ => {
  4,809 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
      .                           false
      .                       }
      .                   }
 27,082 ( 0.00%)      }
      .           
      .               /// Eats `+` possibly breaking tokens like `+=` in process.
      .               fn eat_plus(&mut self) -> bool {
     84 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
      .               }
      .           
      .               /// Eats `&` possibly breaking tokens like `&&` in process.
      .               /// Signals an error if `&` is not eaten.
      .               fn expect_and(&mut self) -> PResult<'a, ()> {
  1,692 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `|` possibly breaking tokens like `||` in process.
      .               /// Signals an error if `|` was not eaten.
      .               fn expect_or(&mut self) -> PResult<'a, ()> {
     78 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
  1,734 ( 0.00%)      fn eat_lt(&mut self) -> bool {
  5,990 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
  3,842 ( 0.00%)          if ate {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
  1,120 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
  1,228 ( 0.00%)              self.max_angle_bracket_count += 1;
      .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
      .                   }
      .                   ate
  1,734 ( 0.00%)      }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
      .               /// Signals an error if `<` was not eaten.
      .               fn expect_lt(&mut self) -> PResult<'a, ()> {
      .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `>` possibly breaking tokens like `>>` in process.
      .               /// Signals an error if `>` was not eaten.
      .               fn expect_gt(&mut self) -> PResult<'a, ()> {
    684 ( 0.00%)          if self.break_and_eat(token::Gt) {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
    342 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
    228 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
      .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
      .                       }
      .                       Ok(())
      .                   } else {
      .                       self.unexpected()
      .                   }
      .               }
      .           
      .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
      .                   kets.iter().any(|k| match expect {
  6,720 ( 0.00%)              TokenExpectType::Expect => self.check(k),
    219 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
      .                   })
      .               }
      .           
      .               fn parse_seq_to_before_tokens<T>(
      .                   &mut self,
      .                   kets: &[&TokenKind],
      .                   sep: SeqSep,
      .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
      .                   let mut first = true;
      .                   let mut recovered = false;
      .                   let mut trailing = false;
      .                   let mut v = vec![];
      .                   let unclosed_delims = !self.unclosed_delims.is_empty();
      .           
      .                   while !self.expect_any_with_type(kets, expect) {
  5,547 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
      .                           break;
      .                       }
  4,363 ( 0.00%)              if let Some(ref t) = sep.sep {
  6,215 ( 0.00%)                  if first {
      .                               first = false;
      .                           } else {
  1,521 ( 0.00%)                      match self.expect(t) {
      .                                   Ok(false) => {
      .                                       self.current_closure.take();
      .                                   }
      .                                   Ok(true) => {
      .                                       self.current_closure.take();
      .                                       recovered = true;
      .                                       break;
      .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
      .                                               e.cancel();
      .                                               break;
      .                                           }
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
  2,036 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
      .                           trailing = true;
      .                           break;
      .                       }
      .           
  1,302 ( 0.00%)              let t = f(self)?;
  3,407 ( 0.00%)              v.push(t);
      .                   }
      .           
  4,864 ( 0.00%)          Ok((v, trailing, recovered))
      .               }
      .           
      .               fn recover_missing_braces_around_closure_body(
      .                   &mut self,
      .                   closure_spans: ClosureSpans,
      .                   mut expect_err: DiagnosticBuilder<'_>,
      .               ) -> PResult<'a, ()> {
      .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_seq_to_before_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
  5,045 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
      .               }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
  5,840 ( 0.00%)      fn parse_seq_to_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
  3,010 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
  1,802 ( 0.00%)          if !recovered {
      .                       self.eat(ket);
      .                   }
  7,504 ( 0.00%)          Ok((val, trailing))
  4,672 ( 0.00%)      }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_unspanned_seq<T>(
      .                   &mut self,
      .                   bra: &TokenKind,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
  2,665 ( 0.00%)          self.expect(bra)?;
  4,672 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
      .               }
      .           
      .               fn parse_delim_comma_seq<T>(
      .                   &mut self,
      .                   delim: DelimToken,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_unspanned_seq(
  1,147 ( 0.00%)              &token::OpenDelim(delim),
  1,710 ( 0.00%)              &token::CloseDelim(delim),
      .                       SeqSep::trailing_allowed(token::Comma),
      .                       f,
      .                   )
      .               }
      .           
      .               fn parse_paren_comma_seq<T>(
      .                   &mut self,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_delim_comma_seq(token::Paren, f)
      .               }
      .           
      .               /// Advance the parser by one token using provided token as the next one.
273,637 ( 0.04%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
      .                   // Bumping after EOF is a bad sign, usually an infinite loop.
126,294 ( 0.02%)          if self.prev_token.kind == TokenKind::Eof {
      .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
      .                       self.span_bug(self.token.span, msg);
      .                   }
      .           
      .                   // Update the current and previous tokens.
 84,196 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
 21,049 ( 0.00%)          self.token_spacing = next_spacing;
      .           
      .                   // Diagnostics.
 21,049 ( 0.00%)          self.expected_tokens.clear();
      .               }
      .           
      .               /// Advance the parser by one token.
168,328 ( 0.02%)      pub fn bump(&mut self) {
 84,164 ( 0.01%)          let next_token = self.next_tok(self.token.span);
126,246 ( 0.02%)          self.bump_with(next_token);
168,328 ( 0.02%)      }
      .           
      .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
      .               /// When `dist == 0` then the current token is looked at.
    176 ( 0.00%)      pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
  1,616 ( 0.00%)          if dist == 0 {
    623 ( 0.00%)              return looker(&self.token);
      .                   }
      .           
  6,626 ( 0.00%)          let frame = &self.token_cursor.frame;
  7,570 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
      .                       let all_normal = (0..dist).all(|i| {
 21,507 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
 28,202 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
      .                       });
      .                       if all_normal {
 35,109 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
 11,935 ( 0.00%)                      Some(tree) => match tree {
  5,215 ( 0.00%)                          TokenTree::Token(token) => looker(token),
      .                                   TokenTree::Delimited(dspan, delim, _) => {
  5,556 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
      .                                   }
      .                               },
  8,125 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
      .                           };
      .                       }
      .                   }
      .           
      .                   let mut cursor = self.token_cursor.clone();
      .                   let mut i = 0;
    546 ( 0.00%)          let mut token = Token::dummy();
    266 ( 0.00%)          while i < dist {
  3,991 ( 0.00%)              token = cursor.next().0;
  1,794 ( 0.00%)              if matches!(
  1,102 ( 0.00%)                  token.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
    115 ( 0.00%)              i += 1;
      .                   }
     51 ( 0.00%)          return looker(&token);
    171 ( 0.00%)      }
      .           
      .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
  6,102 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
  1,862 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
  6,102 ( 0.00%)      }
      .           
      .               /// Parses asyncness: `async` or nothing.
      .               fn parse_asyncness(&mut self) -> Async {
      .                   if self.eat_keyword(kw::Async) {
      .                       let span = self.prev_token.uninterpolated_span();
      .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
      .                   } else {
      .                       Async::No
      .                   }
      .               }
      .           
      .               /// Parses unsafety: `unsafe` or nothing.
    634 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
      .                   if self.eat_keyword(kw::Unsafe) {
    160 ( 0.00%)              Unsafe::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Unsafe::No
      .                   }
  2,536 ( 0.00%)      }
      .           
      .               /// Parses constness: `const` or nothing.
  6,216 ( 0.00%)      fn parse_constness(&mut self) -> Const {
      .                   // Avoid const blocks to be parsed as const items
  1,718 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
      .                       && self.eat_keyword(kw::Const)
      .                   {
    175 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Const::No
      .                   }
 10,878 ( 0.00%)      }
      .           
      .               /// Parses inline const expressions.
      .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
      .                   if pat {
      .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
      .                   } else {
      .                       self.sess.gated_spans.gate(sym::inline_const, span);
      .                   }
-- line 1104 ----------------------------------------
-- line 1110 ----------------------------------------
      .                   };
      .                   let blk_span = anon_const.value.span;
      .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
      .               }
      .           
      .               /// Parses mutability (`mut` or nothing).
      .               fn parse_mutability(&mut self) -> Mutability {
      .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
    603 ( 0.00%)      }
      .           
      .               /// Possibly parses mutability (`const` or `mut`).
     96 ( 0.00%)      fn parse_const_or_mut(&mut self) -> Option<Mutability> {
      .                   if self.eat_keyword(kw::Mut) {
      .                       Some(Mutability::Mut)
      .                   } else if self.eat_keyword(kw::Const) {
      .                       Some(Mutability::Not)
      .                   } else {
      .                       None
      .                   }
     96 ( 0.00%)      }
      .           
      .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
     94 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
      .                   {
      .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
      .                       self.bump();
      .                       Ok(Ident::new(symbol, self.prev_token.span))
      .                   } else {
    141 ( 0.00%)              self.parse_ident_common(true)
      .                   }
      .               }
      .           
      .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    141 ( 0.00%)          self.parse_mac_args_common(true).map(P)
      .               }
      .           
      .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
  1,527 ( 0.00%)          self.parse_mac_args_common(false)
      .               }
      .           
  5,103 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
  4,536 ( 0.00%)          Ok(
  4,167 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
    999 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
    999 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
      .                       {
    952 ( 0.00%)                  match self.parse_token_tree() {
  1,190 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
      .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
      .                               {
    476 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
      .                               }
      .                               _ => unreachable!(),
      .                           }
    658 ( 0.00%)              } else if !delimited_only {
      .                           if self.eat(&token::Eq) {
    148 ( 0.00%)                      let eq_span = self.prev_token.span;
      .           
      .                               // Collect tokens because they are used during lowering to HIR.
    148 ( 0.00%)                      let expr = self.parse_expr_force_collect()?;
    148 ( 0.00%)                      let span = expr.span;
      .           
    740 ( 0.00%)                      let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
  1,332 ( 0.00%)                      MacArgs::Eq(eq_span, Token::new(token_kind, span))
      .                           } else {
      .                               MacArgs::Empty
      .                           }
      .                       } else {
      .                           return self.unexpected();
      .                       },
      .                   )
  3,969 ( 0.00%)      }
      .           
      .               fn parse_or_use_outer_attributes(
      .                   &mut self,
      .                   already_parsed_attrs: Option<AttrWrapper>,
      .               ) -> PResult<'a, AttrWrapper> {
  4,917 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
      .                       Ok(attrs)
      .                   } else {
  2,302 ( 0.00%)              self.parse_outer_attributes()
      .                   }
      .               }
      .           
      .               /// Parses a single token tree from the input.
  3,024 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
  1,434 ( 0.00%)          match self.token.kind {
      .                       token::OpenDelim(..) => {
      .                           let depth = self.token_cursor.stack.len();
      .           
      .                           // We keep advancing the token cursor until we hit
      .                           // the matching `CloseDelim` token.
 10,692 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
      .                               && matches!(self.token.kind, token::CloseDelim(_)))
      .                           {
      .                               // Advance one token at a time, so `TokenCursor::next()`
      .                               // can capture these tokens if necessary.
  7,334 ( 0.00%)                      self.bump();
      .                           }
      .                           // We are still inside the frame corresponding
      .                           // to the delimited stream we captured, so grab
      .                           // the tokens from this frame.
      .                           let frame = &self.token_cursor.frame;
    606 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
    606 ( 0.00%)                  let span = frame.span;
    303 ( 0.00%)                  let delim = frame.delim;
      .                           // Consume close delimiter
    606 ( 0.00%)                  self.bump();
  1,515 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
      .                       }
      .                       token::CloseDelim(_) | token::Eof => unreachable!(),
      .                       _ => {
    150 ( 0.00%)                  self.bump();
    375 ( 0.00%)                  TokenTree::Token(self.prev_token.clone())
      .                       }
      .                   }
  2,646 ( 0.00%)      }
      .           
      .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
      .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
      .                   let mut tts = Vec::new();
      .                   while self.token != token::Eof {
      .                       tts.push(self.parse_token_tree());
      .                   }
      .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
      .                   }
      .                   TokenStream::new(result)
      .               }
      .           
      .               /// Evaluates the closure with restrictions in place.
      .               ///
      .               /// Afters the closure is evaluated, restrictions are reset.
      .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
  1,827 ( 0.00%)          let old = self.restrictions;
  2,409 ( 0.00%)          self.restrictions = res;
      .                   let res = f(self);
  2,575 ( 0.00%)          self.restrictions = old;
      .                   res
      .               }
      .           
  9,336 ( 0.00%)      fn is_crate_vis(&self) -> bool {
  5,835 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
 10,503 ( 0.00%)      }
      .           
      .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
      .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
      .               /// If the following element can't be a tuple (i.e., it's a function definition), then
      .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
      .               /// so emit a proper diagnostic.
      .               // Public for rustfmt usage.
  8,450 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
  1,746 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
      .           
    840 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
  3,360 ( 0.00%)          if self.is_crate_vis() {
      .                       self.bump(); // `crate`
      .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
      .                       return Ok(Visibility {
      .                           span: self.prev_token.span,
      .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
      .                           tokens: None,
      .                       });
      .                   }
      .           
      .                   if !self.eat_keyword(kw::Pub) {
      .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
      .                       // keyword to grab a span from for inherited visibility; an empty span at the
      .                       // beginning of the current token would seem to be the "Schelling span".
    762 ( 0.00%)              return Ok(Visibility {
  2,286 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
      .                           kind: VisibilityKind::Inherited,
      .                           tokens: None,
      .                       });
      .                   }
     78 ( 0.00%)          let lo = self.prev_token.span;
      .           
    390 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
      .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
      .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
      .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
      .                       // by the following tokens.
      .                       if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
      .                       // account for `pub(crate::foo)`
      .                       {
      .                           // Parse `pub(crate)`.
-- line 1303 ----------------------------------------
-- line 1338 ----------------------------------------
      .                       } else if let FollowedByType::No = fbt {
      .                           // Provide this diagnostic if a type cannot follow;
      .                           // in particular, if this is not a tuple struct.
      .                           self.recover_incorrect_vis_restriction()?;
      .                           // Emit diagnostic, but continue with public visibility.
      .                       }
      .                   }
      .           
    234 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
  7,605 ( 0.00%)      }
      .           
      .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
      .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
      .                   self.bump(); // `(`
      .                   let path = self.parse_path(PathStyle::Mod)?;
      .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
      .           
      .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
      .                       )
      .                       .emit();
      .           
      .                   Ok(())
      .               }
      .           
      .               /// Parses `extern string_literal?`.
      .               fn parse_extern(&mut self) -> Extern {
    321 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
      .               }
      .           
      .               /// Parses a string literal as an ABI spec.
    480 ( 0.00%)      fn parse_abi(&mut self) -> Option<StrLit> {
      .                   match self.parse_str_lit() {
    288 ( 0.00%)              Ok(str_lit) => Some(str_lit),
      .                       Err(Some(lit)) => match lit.kind {
      .                           ast::LitKind::Err(_) => None,
      .                           _ => {
      .                               self.struct_span_err(lit.span, "non-string ABI literal")
      .                                   .span_suggestion(
      .                                       lit.span,
      .                                       "specify the ABI with a string literal",
      .                                       "\"C\"".to_string(),
-- line 1392 ----------------------------------------
-- line 1393 ----------------------------------------
      .                                       Applicability::MaybeIncorrect,
      .                                   )
      .                                   .emit();
      .                               None
      .                           }
      .                       },
      .                       Err(None) => None,
      .                   }
    384 ( 0.00%)      }
      .           
  1,760 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
      .                   &mut self,
      .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
      .               ) -> PResult<'a, R> {
      .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
      .                   // `ForceCollect::Yes`
      .                   self.collect_tokens_trailing_token(
      .                       AttrWrapper::empty(),
      .                       ForceCollect::Yes,
    190 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
      .                   )
  1,760 ( 0.00%)      }
      .           
      .               /// `::{` or `::*`
 31,432 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
 15,716 ( 0.00%)          self.check(&token::ModSep)
      .                       && self.look_ahead(1, |t| {
 11,495 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
      .                       })
 29,439 ( 0.00%)      }
      .           
      .               pub fn clear_expected_tokens(&mut self) {
      .                   self.expected_tokens.clear();
      .               }
      .           }
      .           
      .           crate fn make_unclosed_delims_error(
      .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
      .                   err.span_label(sp, "closing delimiter possibly meant for this");
      .               }
      .               if let Some(sp) = unmatched.unclosed_span {
      .                   err.span_label(sp, "unclosed delimiter");
      .               }
      .               Some(err)
      .           }
      .           
  5,680 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
  2,840 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
      .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
  2,840 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
      .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
      .                       e.emit();
      .                   }
      .               }
  5,680 ( 0.00%)  }
      .           
      .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
      .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
      .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
      .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
      .           /// `AttrAnnotatedTokenTree::Delimited` tokens
      .           #[derive(Debug, Clone)]
      .           pub enum FlatToken {
-- line 1474 ----------------------------------------

131,330 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs
--------------------------------------------------------------------------------
Ir                 

-- line 40 ----------------------------------------
        .           
        .           impl<BorrowType: marker::BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
        .               /// Looks up a given key in a (sub)tree headed by the node, recursively.
        .               /// Returns a `Found` with the handle of the matching KV, if any. Otherwise,
        .               /// returns a `GoDown` with the handle of the leaf edge where the key belongs.
        .               ///
        .               /// The result is meaningful only if the tree is ordered by key, like the tree
        .               /// in a `BTreeMap` is.
  553,926 ( 0.07%)      pub fn search_tree<Q: ?Sized>(
        .                   mut self,
        .                   key: &Q,
        .               ) -> SearchResult<BorrowType, K, V, marker::LeafOrInternal, marker::Leaf>
        .               where
        .                   Q: Ord,
        .                   K: Borrow<Q>,
        .               {
        .                   loop {
        .                       self = match self.search_node(key) {
        .                           Found(handle) => return Found(handle),
   81,910 ( 0.01%)                  GoDown(handle) => match handle.force() {
        .                               Leaf(leaf) => return GoDown(leaf),
        .                               Internal(internal) => internal.descend(),
        .                           },
        .                       }
        .                   }
  240,801 ( 0.03%)      }
        .           
        .               /// Descends to the nearest node where the edge matching the lower bound
        .               /// of the range is different from the edge matching the upper bound, i.e.,
        .               /// the nearest node that has at least one key contained in the range.
        .               ///
        .               /// If found, returns an `Ok` with that node, the strictly ascending pair of
        .               /// edge indices in the node delimiting the range, and the corresponding
        .               /// pair of bounds for continuing the search in the child nodes, in case
-- line 73 ----------------------------------------
-- line 202 ----------------------------------------
        .               unsafe fn find_key_index<Q: ?Sized>(&self, key: &Q, start_index: usize) -> IndexResult
        .               where
        .                   Q: Ord,
        .                   K: Borrow<Q>,
        .               {
        .                   let node = self.reborrow();
        .                   let keys = node.keys();
        .                   debug_assert!(start_index <= keys.len());
  911,774 ( 0.12%)          for (offset, k) in unsafe { keys.get_unchecked(start_index..) }.iter().enumerate() {
3,674,171 ( 0.49%)              match key.cmp(k.borrow()) {
        .                           Ordering::Greater => {}
        .                           Ordering::Equal => return IndexResult::KV(start_index + offset),
        .                           Ordering::Less => return IndexResult::Edge(start_index + offset),
        .                       }
        .                   }
        .                   IndexResult::Edge(keys.len())
        .               }
        .           
-- line 219 ----------------------------------------

  218,437 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs
--------------------------------------------------------------------------------
Ir               

-- line 28 ----------------------------------------
      .                   (type SourceFile: 'static + Clone;);
      .               (type MultiSpan) =>
      .                   (type MultiSpan: 'static;);
      .               (type Diagnostic) =>
      .                   (type Diagnostic: 'static;);
      .               (type Span) =>
      .                   (type Span: 'static + Copy + Eq + Hash;);
      .               (fn drop(&mut self, $arg:ident: $arg_ty:ty)) =>
  7,680 ( 0.00%)          (fn drop(&mut self, $arg: $arg_ty) { mem::drop($arg) });
      .               (fn clone(&mut self, $arg:ident: $arg_ty:ty) -> $ret_ty:ty) =>
    570 ( 0.00%)          (fn clone(&mut self, $arg: $arg_ty) -> $ret_ty { $arg.clone() });
      .               ($($item:tt)*) => ($($item)*;)
      .           }
      .           
      .           macro_rules! declare_server_traits {
      .               ($($name:ident {
      .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)?;)*
      .               }),* $(,)?) => {
      .                   pub trait Types {
-- line 46 ----------------------------------------
-- line 63 ----------------------------------------
      .               ($($name:ident {
      .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)?;)*
      .               }),* $(,)?) => {
      .                   impl<S: Types> Types for MarkedTypes<S> {
      .                       $(type $name = Marked<S::$name, client::$name>;)*
      .                   }
      .           
      .                   $(impl<S: $name> $name for MarkedTypes<S> {
  1,578 ( 0.00%)              $(fn $method(&mut self, $($arg: $arg_ty),*) $(-> $ret_ty)? {
356,732 ( 0.05%)                  <_>::mark($name::$method(&mut self.0, $($arg.unmark()),*))
  1,578 ( 0.00%)              })*
      .                   })*
      .               }
      .           }
      .           with_api!(Self, self_, define_mark_types_impls);
      .           
      .           struct Dispatcher<S: Types> {
      .               handle_store: HandleStore<S>,
      .               server: S,
-- line 81 ----------------------------------------
-- line 89 ----------------------------------------
      .                   pub trait DispatcherTrait {
      .                       // HACK(eddyb) these are here to allow `Self::$name` to work below.
      .                       $(type $name;)*
      .                       fn dispatch(&mut self, b: Buffer<u8>) -> Buffer<u8>;
      .                   }
      .           
      .                   impl<S: Server> DispatcherTrait for Dispatcher<MarkedTypes<S>> {
      .                       $(type $name = <MarkedTypes<S> as Types>::$name;)*
898,310 ( 0.12%)              fn dispatch(&mut self, mut b: Buffer<u8>) -> Buffer<u8> {
      .                           let Dispatcher { handle_store, server } = self;
      .           
269,493 ( 0.04%)                  let mut reader = &b[..];
628,817 ( 0.08%)                  match api_tags::Method::decode(&mut reader, &mut ()) {
433,787 ( 0.06%)                      $(api_tags::Method::$name(m) => match m {
      .                                   $(api_tags::$name::$method => {
      .                                       let mut call_method = || {
276,507 ( 0.04%)                                  reverse_decode!(reader, handle_store; $($arg: $arg_ty),*);
    789 ( 0.00%)                                  $name::$method(server, $($arg),*)
      .                                       };
      .                                       // HACK(eddyb) don't use `panic::catch_unwind` in a panic.
      .                                       // If client and server happen to use the same `libstd`,
      .                                       // `catch_unwind` asserts that the panic counter was 0,
      .                                       // even when the closure passed to it didn't panic.
      .                                       let r = if thread::panicking() {
      .                                           Ok(call_method())
      .                                       } else {
419,298 ( 0.06%)                                  panic::catch_unwind(panic::AssertUnwindSafe(call_method))
      .                                               .map_err(PanicMessage::from)
      .                                       };
      .           
      .                                       b.clear();
989,557 ( 0.13%)                              r.encode(&mut b, handle_store);
      .                                   })*
      .                               }),*
      .                           }
538,986 ( 0.07%)                  b
808,479 ( 0.11%)              }
      .                   }
      .               }
      .           }
      .           with_api!(Self, self_, define_dispatcher_impl);
      .           
      .           pub trait ExecutionStrategy {
      .               fn run_bridge_and_client<D: Copy + Send + 'static>(
      .                   &self,
-- line 133 ----------------------------------------
-- line 145 ----------------------------------------
      .               fn run_bridge_and_client<D: Copy + Send + 'static>(
      .                   &self,
      .                   dispatcher: &mut impl DispatcherTrait,
      .                   input: Buffer<u8>,
      .                   run_client: extern "C" fn(Bridge<'_>, D) -> Buffer<u8>,
      .                   client_data: D,
      .                   force_show_panics: bool,
      .               ) -> Buffer<u8> {
808,494 ( 0.11%)          let mut dispatch = |b| dispatcher.dispatch(b);
      .           
    150 ( 0.00%)          run_client(
    165 ( 0.00%)              Bridge { cached_buffer: input, dispatch: (&mut dispatch).into(), force_show_panics },
      .                       client_data,
      .                   )
      .               }
      .           }
      .           
      .           // NOTE(eddyb) Two implementations are provided, the second one is a bit
      .           // faster but neither is anywhere near as fast as same-thread execution.
      .           
-- line 164 ----------------------------------------
-- line 263 ----------------------------------------
      .                       *state.lock().unwrap() = State::Res(b);
      .                       join_handle.thread().unpark();
      .                   }
      .           
      .                   join_handle.join().unwrap()
      .               }
      .           }
      .           
    210 ( 0.00%)  fn run_server<
      .               S: Server,
      .               I: Encode<HandleStore<MarkedTypes<S>>>,
      .               O: for<'a, 's> DecodeMut<'a, 's, HandleStore<MarkedTypes<S>>>,
      .               D: Copy + Send + 'static,
      .           >(
      .               strategy: &impl ExecutionStrategy,
      .               handle_counters: &'static client::HandleCounters,
      .               server: S,
      .               input: I,
      .               run_client: extern "C" fn(Bridge<'_>, D) -> Buffer<u8>,
      .               client_data: D,
      .               force_show_panics: bool,
      .           ) -> Result<O, PanicMessage> {
      .               let mut dispatcher =
    255 ( 0.00%)          Dispatcher { handle_store: HandleStore::new(handle_counters), server: MarkedTypes(server) };
      .           
      .               let mut b = Buffer::new();
     60 ( 0.00%)      input.encode(&mut b, &mut dispatcher.handle_store);
      .           
     90 ( 0.00%)      b = strategy.run_bridge_and_client(
      .                   &mut dispatcher,
      .                   b,
      .                   run_client,
      .                   client_data,
      .                   force_show_panics,
      .               );
      .           
     75 ( 0.00%)      Result::decode(&mut &b[..], &mut dispatcher.handle_store)
    150 ( 0.00%)  }
      .           
      .           impl client::Client<fn(crate::TokenStream) -> crate::TokenStream> {
      .               pub fn run<S: Server>(
      .                   &self,
      .                   strategy: &impl ExecutionStrategy,
      .                   server: S,
      .                   input: S::TokenStream,
      .                   force_show_panics: bool,
-- line 308 ----------------------------------------
-- line 325 ----------------------------------------
      .               pub fn run<S: Server>(
      .                   &self,
      .                   strategy: &impl ExecutionStrategy,
      .                   server: S,
      .                   input: S::TokenStream,
      .                   input2: S::TokenStream,
      .                   force_show_panics: bool,
      .               ) -> Result<S::TokenStream, PanicMessage> {
     30 ( 0.00%)          let client::Client { get_handle_counters, run, f } = *self;
    195 ( 0.00%)          run_server(
      .                       strategy,
     15 ( 0.00%)              get_handle_counters(),
    150 ( 0.00%)              server,
      .                       (
      .                           <MarkedTypes<S> as Types>::TokenStream::mark(input),
      .                           <MarkedTypes<S> as Types>::TokenStream::mark(input2),
      .                       ),
      .                       run,
      .                       f,
      .                       force_show_panics,
      .                   )
-- line 345 ----------------------------------------

207,561 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs
--------------------------------------------------------------------------------
Ir               

-- line 32 ----------------------------------------
      .           ///
      .           /// If the syntax extension is an MBE macro, it will attempt to match its
      .           /// LHS token tree against the provided token tree, and if it finds a
      .           /// match, will transcribe the RHS token tree, splicing in any captured
      .           /// `macro_parser::matched_nonterminals` into the `SubstNt`s it finds.
      .           ///
      .           /// The RHS of an MBE macro is the only place `SubstNt`s are substituted.
      .           /// Nothing special happens to misnamed or misplaced `SubstNt`s.
476,734 ( 0.06%)  #[derive(Debug, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub enum TokenTree {
      .               /// A single token.
104,270 ( 0.01%)      Token(Token),
      .               /// A delimited sequence of token trees.
 13,600 ( 0.00%)      Delimited(DelimSpan, DelimToken, TokenStream),
      .           }
      .           
      .           #[derive(Copy, Clone)]
      .           pub enum CanSynthesizeMissingTokens {
      .               Yes,
      .               No,
      .           }
      .           
-- line 53 ----------------------------------------
-- line 71 ----------------------------------------
      .                           delim == delim2 && tts.eq_unspanned(&tts2)
      .                       }
      .                       _ => false,
      .                   }
      .               }
      .           
      .               /// Retrieves the `TokenTree`'s span.
      .               pub fn span(&self) -> Span {
     96 ( 0.00%)          match self {
    126 ( 0.00%)              TokenTree::Token(token) => token.span,
    136 ( 0.00%)              TokenTree::Delimited(sp, ..) => sp.entire(),
      .                   }
     15 ( 0.00%)      }
      .           
      .               /// Modify the `TokenTree`'s span in-place.
      .               pub fn set_span(&mut self, span: Span) {
     96 ( 0.00%)          match self {
     15 ( 0.00%)              TokenTree::Token(token) => token.span = span,
     66 ( 0.00%)              TokenTree::Delimited(dspan, ..) => *dspan = DelimSpan::from_single(span),
      .                   }
     48 ( 0.00%)      }
      .           
 14,781 ( 0.00%)      pub fn token(kind: TokenKind, span: Span) -> TokenTree {
 84,972 ( 0.01%)          TokenTree::Token(Token::new(kind, span))
 14,781 ( 0.00%)      }
      .           
      .               /// Returns the opening delimiter as a token tree.
  3,260 ( 0.00%)      pub fn open_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
  9,780 ( 0.00%)          TokenTree::token(token::OpenDelim(delim), span.open)
  3,260 ( 0.00%)      }
      .           
      .               /// Returns the closing delimiter as a token tree.
  3,202 ( 0.00%)      pub fn close_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
  9,606 ( 0.00%)          TokenTree::token(token::CloseDelim(delim), span.close)
  3,202 ( 0.00%)      }
      .           
  1,056 ( 0.00%)      pub fn uninterpolate(self) -> TokenTree {
    704 ( 0.00%)          match self {
  3,168 ( 0.00%)              TokenTree::Token(token) => TokenTree::Token(token.uninterpolate().into_owned()),
      .                       tt => tt,
      .                   }
  1,408 ( 0.00%)      }
      .           }
      .           
      .           impl<CTX> HashStable<CTX> for TokenStream
      .           where
      .               CTX: crate::HashStableContext,
      .           {
    639 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
  3,722 ( 0.00%)          for sub_tt in self.trees() {
      .                       sub_tt.hash_stable(hcx, hasher);
      .                   }
    568 ( 0.00%)      }
      .           }
      .           
      .           pub trait CreateTokenStream: sync::Send + sync::Sync {
      .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream;
      .           }
      .           
      .           impl CreateTokenStream for AttrAnnotatedTokenStream {
      .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
-- line 131 ----------------------------------------
-- line 135 ----------------------------------------
      .           
      .           /// A lazy version of [`TokenStream`], which defers creation
      .           /// of an actual `TokenStream` until it is needed.
      .           /// `Box` is here only to reduce the structure size.
      .           #[derive(Clone)]
      .           pub struct LazyTokenStream(Lrc<Box<dyn CreateTokenStream>>);
      .           
      .           impl LazyTokenStream {
     32 ( 0.00%)      pub fn new(inner: impl CreateTokenStream + 'static) -> LazyTokenStream {
      .                   LazyTokenStream(Lrc::new(Box::new(inner)))
     32 ( 0.00%)      }
      .           
      .               pub fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
    574 ( 0.00%)          self.0.create_token_stream()
      .               }
      .           }
      .           
      .           impl fmt::Debug for LazyTokenStream {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   write!(f, "LazyTokenStream({:?})", self.create_token_stream())
      .               }
      .           }
-- line 156 ----------------------------------------
-- line 188 ----------------------------------------
      .               Delimited(DelimSpan, DelimToken, AttrAnnotatedTokenStream),
      .               /// Stores the attributes for an attribute target,
      .               /// along with the tokens for that attribute target.
      .               /// See `AttributesData` for more information
      .               Attributes(AttributesData),
      .           }
      .           
      .           impl AttrAnnotatedTokenStream {
 11,484 ( 0.00%)      pub fn new(tokens: Vec<(AttrAnnotatedTokenTree, Spacing)>) -> AttrAnnotatedTokenStream {
      .                   AttrAnnotatedTokenStream(Lrc::new(tokens))
 11,484 ( 0.00%)      }
      .           
      .               /// Converts this `AttrAnnotatedTokenStream` to a plain `TokenStream
      .               /// During conversion, `AttrAnnotatedTokenTree::Attributes` get 'flattened'
      .               /// back to a `TokenStream` of the form `outer_attr attr_target`.
      .               /// If there are inner attributes, they are inserted into the proper
      .               /// place in the attribute target tokens.
     94 ( 0.00%)      pub fn to_tokenstream(&self) -> TokenStream {
    294 ( 0.00%)          let trees: Vec<_> = self
      .                       .0
      .                       .iter()
  4,249 ( 0.00%)              .flat_map(|tree| match &tree.0 {
  2,136 ( 0.00%)                  AttrAnnotatedTokenTree::Token(inner) => {
  5,340 ( 0.00%)                      smallvec![(TokenTree::Token(inner.clone()), tree.1)].into_iter()
      .                           }
  4,000 ( 0.00%)                  AttrAnnotatedTokenTree::Delimited(span, delim, stream) => smallvec![(
    600 ( 0.00%)                      TokenTree::Delimited(*span, *delim, stream.to_tokenstream()),
    200 ( 0.00%)                      tree.1,
      .                           )]
      .                           .into_iter(),
      .                           AttrAnnotatedTokenTree::Attributes(data) => {
      .                               let mut outer_attrs = Vec::new();
      .                               let mut inner_attrs = Vec::new();
      .                               for attr in &data.attrs {
     68 ( 0.00%)                          match attr.style {
      .                                       crate::AttrStyle::Outer => {
      .                                           outer_attrs.push(attr);
      .                                       }
      .                                       crate::AttrStyle::Inner => {
      .                                           inner_attrs.push(attr);
      .                                       }
      .                                   }
      .                               }
      .           
     18 ( 0.00%)                      let mut target_tokens: Vec<_> = data
      .                                   .tokens
      .                                   .create_token_stream()
      .                                   .to_tokenstream()
      .                                   .0
      .                                   .iter()
      .                                   .cloned()
      .                                   .collect();
      9 ( 0.00%)                      if !inner_attrs.is_empty() {
      .                                   let mut found = false;
      .                                   // Check the last two trees (to account for a trailing semi)
      .                                   for (tree, _) in target_tokens.iter_mut().rev().take(2) {
      .                                       if let TokenTree::Delimited(span, delim, delim_tokens) = tree {
      .                                           // Inner attributes are only supported on extern blocks, functions, impls,
      .                                           // and modules. All of these have their inner attributes placed at
      .                                           // the beginning of the rightmost outermost braced group:
      .                                           // e.g. fn foo() { #![my_attr} }
-- line 248 ----------------------------------------
-- line 269 ----------------------------------------
      .           
      .                                   assert!(
      .                                       found,
      .                                       "Failed to find trailing delimited group in: {:?}",
      .                                       target_tokens
      .                                   );
      .                               }
      .                               let mut flat: SmallVec<[_; 1]> = SmallVec::new();
    185 ( 0.00%)                      for attr in outer_attrs {
      .                                   // FIXME: Make this more efficient
    204 ( 0.00%)                          flat.extend(attr.tokens().to_tokenstream().0.clone().iter().cloned());
      .                               }
     72 ( 0.00%)                      flat.extend(target_tokens);
     90 ( 0.00%)                      flat.into_iter()
      9 ( 0.00%)                  }
      .                       })
      .                       .collect();
      .                   TokenStream::new(trees)
    188 ( 0.00%)      }
      .           }
      .           
      .           /// Stores the tokens for an attribute target, along
      .           /// with its attributes.
      .           ///
      .           /// This is constructed during parsing when we need to capture
      .           /// tokens.
      .           ///
-- line 295 ----------------------------------------
-- line 316 ----------------------------------------
      .           pub struct TokenStream(pub(crate) Lrc<Vec<TreeAndSpacing>>);
      .           
      .           pub type TreeAndSpacing = (TokenTree, Spacing);
      .           
      .           // `TokenStream` is used a lot. Make sure it doesn't unintentionally get bigger.
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           rustc_data_structures::static_assert_size!(TokenStream, 8);
      .           
 45,139 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Encodable, Decodable)]
      .           pub enum Spacing {
      .               Alone,
      .               Joint,
      .           }
      .           
      .           impl TokenStream {
      .               /// Given a `TokenStream` with a `Stream` of only two arguments, return a new `TokenStream`
      .               /// separating the two arguments with a comma for diagnostic suggestions.
-- line 332 ----------------------------------------
-- line 365 ----------------------------------------
      .                       return Some((TokenStream::new(new_stream), sp));
      .                   }
      .                   None
      .               }
      .           }
      .           
      .           impl From<(AttrAnnotatedTokenTree, Spacing)> for AttrAnnotatedTokenStream {
      .               fn from((tree, spacing): (AttrAnnotatedTokenTree, Spacing)) -> AttrAnnotatedTokenStream {
     70 ( 0.00%)          AttrAnnotatedTokenStream::new(vec![(tree, spacing)])
      .               }
      .           }
      .           
      .           impl From<TokenTree> for TokenStream {
      .               fn from(tree: TokenTree) -> TokenStream {
 61,600 ( 0.01%)          TokenStream::new(vec![(tree, Spacing::Alone)])
      .               }
      .           }
      .           
      .           impl From<TokenTree> for TreeAndSpacing {
      .               fn from(tree: TokenTree) -> TreeAndSpacing {
  7,973 ( 0.00%)          (tree, Spacing::Alone)
      .               }
      .           }
      .           
      .           impl iter::FromIterator<TokenTree> for TokenStream {
     66 ( 0.00%)      fn from_iter<I: IntoIterator<Item = TokenTree>>(iter: I) -> Self {
     66 ( 0.00%)          TokenStream::new(iter.into_iter().map(Into::into).collect::<Vec<TreeAndSpacing>>())
     99 ( 0.00%)      }
      .           }
      .           
      .           impl Eq for TokenStream {}
      .           
      .           impl PartialEq<TokenStream> for TokenStream {
      .               fn eq(&self, other: &TokenStream) -> bool {
      .                   self.trees().eq(other.trees())
      .               }
-- line 400 ----------------------------------------
-- line 401 ----------------------------------------
      .           }
      .           
      .           impl TokenStream {
      .               pub fn new(streams: Vec<TreeAndSpacing>) -> TokenStream {
      .                   TokenStream(Lrc::new(streams))
      .               }
      .           
      .               pub fn is_empty(&self) -> bool {
  1,390 ( 0.00%)          self.0.is_empty()
  1,390 ( 0.00%)      }
      .           
      .               pub fn len(&self) -> usize {
 54,300 ( 0.01%)          self.0.len()
    191 ( 0.00%)      }
      .           
 22,136 ( 0.00%)      pub fn from_streams(mut streams: SmallVec<[TokenStream; 2]>) -> TokenStream {
 11,068 ( 0.00%)          match streams.len() {
      .                       0 => TokenStream::default(),
      .                       1 => streams.pop().unwrap(),
      .                       _ => {
      .                           // We are going to extend the first stream in `streams` with
      .                           // the elements from the subsequent streams. This requires
      .                           // using `make_mut()` on the first stream, and in practice this
      .                           // doesn't cause cloning 99.9% of the time.
      .                           //
-- line 425 ----------------------------------------
-- line 430 ----------------------------------------
      .           
      .                           // Determine how much the first stream will be extended.
      .                           // Needed to avoid quadratic blow up from on-the-fly
      .                           // reallocations (#57735).
      .                           let num_appends = streams.iter().skip(1).map(|ts| ts.len()).sum();
      .           
      .                           // Get the first stream. If it's `None`, create an empty
      .                           // stream.
  5,510 ( 0.00%)                  let mut iter = streams.drain(..);
  5,510 ( 0.00%)                  let mut first_stream_lrc = iter.next().unwrap().0;
      .           
      .                           // Append the elements to the first stream, after reserving
      .                           // space for them.
  2,755 ( 0.00%)                  let first_vec_mut = Lrc::make_mut(&mut first_stream_lrc);
      .                           first_vec_mut.reserve(num_appends);
 49,440 ( 0.01%)                  for stream in iter {
      .                               first_vec_mut.extend(stream.0.iter().cloned());
      .                           }
      .           
      .                           // Create the final `TokenStream`.
  5,510 ( 0.00%)                  TokenStream(first_stream_lrc)
      .                       }
      .                   }
 24,903 ( 0.00%)      }
      .           
      .               pub fn trees(&self) -> Cursor {
  6,265 ( 0.00%)          self.clone().into_trees()
 12,530 ( 0.00%)      }
      .           
  3,783 ( 0.00%)      pub fn into_trees(self) -> Cursor {
      .                   Cursor::new(self)
  7,566 ( 0.00%)      }
      .           
      .               /// Compares two `TokenStream`s, checking equality without regarding span information.
      .               pub fn eq_unspanned(&self, other: &TokenStream) -> bool {
      .                   let mut t1 = self.trees();
      .                   let mut t2 = other.trees();
      .                   for (t1, t2) in iter::zip(&mut t1, &mut t2) {
      .                       if !t1.eq_unspanned(&t2) {
      .                           return false;
      .                       }
      .                   }
      .                   t1.next().is_none() && t2.next().is_none()
      .               }
      .           
      .               pub fn map_enumerated<F: FnMut(usize, &TokenTree) -> TokenTree>(self, mut f: F) -> TokenStream {
     34 ( 0.00%)          TokenStream(Lrc::new(
      .                       self.0
      .                           .iter()
      .                           .enumerate()
    288 ( 0.00%)                  .map(|(i, (tree, is_joint))| (f(i, tree), *is_joint))
      .                           .collect(),
      .                   ))
      .               }
      .           }
      .           
      .           // 99.5%+ of the time we have 1 or 2 elements in this vector.
      .           #[derive(Clone)]
      .           pub struct TokenStreamBuilder(SmallVec<[TokenStream; 2]>);
      .           
      .           impl TokenStreamBuilder {
  2,767 ( 0.00%)      pub fn new() -> TokenStreamBuilder {
  2,767 ( 0.00%)          TokenStreamBuilder(SmallVec::new())
  2,767 ( 0.00%)      }
      .           
132,093 ( 0.02%)      pub fn push<T: Into<TokenStream>>(&mut self, stream: T) {
 14,677 ( 0.00%)          let mut stream = stream.into();
      .           
      .                   // If `self` is not empty and the last tree within the last stream is a
      .                   // token tree marked with `Joint`...
 44,031 ( 0.01%)          if let Some(TokenStream(ref mut last_stream_lrc)) = self.0.last_mut() {
 71,002 ( 0.01%)              if let Some((TokenTree::Token(last_token), Spacing::Joint)) = last_stream_lrc.last() {
      .                           // ...and `stream` is not empty and the first tree within it is
      .                           // a token tree...
      .                           let TokenStream(ref mut stream_lrc) = stream;
  6,580 ( 0.00%)                  if let Some((TokenTree::Token(token), spacing)) = stream_lrc.first() {
      .                               // ...and the two tokens can be glued together...
  6,580 ( 0.00%)                      if let Some(glued_tok) = last_token.glue(&token) {
      .                                   // ...then do so, by overwriting the last token
      .                                   // tree in `self` and removing the first token tree
      .                                   // from `stream`. This requires using `make_mut()`
      .                                   // on the last stream in `self` and on `stream`,
      .                                   // and in practice this doesn't cause cloning 99.9%
      .                                   // of the time.
      .           
      .                                   // Overwrite the last token tree with the merged
      .                                   // token.
    940 ( 0.00%)                          let last_vec_mut = Lrc::make_mut(last_stream_lrc);
 21,620 ( 0.00%)                          *last_vec_mut.last_mut().unwrap() = (TokenTree::Token(glued_tok), *spacing);
      .           
      .                                   // Remove the first token tree from `stream`. (This
      .                                   // is almost always the only tree in `stream`.)
    940 ( 0.00%)                          let stream_vec_mut = Lrc::make_mut(stream_lrc);
  5,640 ( 0.00%)                          stream_vec_mut.remove(0);
      .           
      .                                   // Don't push `stream` if it's empty -- that could
      .                                   // block subsequent token gluing, by getting
      .                                   // between two token trees that should be glued
      .                                   // together.
  2,820 ( 0.00%)                          if !stream.is_empty() {
      .                                       self.0.push(stream);
      .                                   }
      .                                   return;
      .                               }
      .                           }
      .                       }
      .                   }
      .                   self.0.push(stream);
117,416 ( 0.02%)      }
      .           
  2,767 ( 0.00%)      pub fn build(self) -> TokenStream {
 16,602 ( 0.00%)          TokenStream::from_streams(self.0)
  5,534 ( 0.00%)      }
      .           }
      .           
      .           /// By-reference iterator over a [`TokenStream`].
      .           #[derive(Clone)]
      .           pub struct CursorRef<'t> {
      .               stream: &'t TokenStream,
      .               index: usize,
      .           }
-- line 550 ----------------------------------------
-- line 572 ----------------------------------------
      .           pub struct Cursor {
      .               pub stream: TokenStream,
      .               index: usize,
      .           }
      .           
      .           impl Iterator for Cursor {
      .               type Item = TokenTree;
      .           
 41,844 ( 0.01%)      fn next(&mut self) -> Option<TokenTree> {
 52,649 ( 0.01%)          self.next_with_spacing().map(|(tree, _)| tree)
 55,792 ( 0.01%)      }
      .           }
      .           
      .           impl Cursor {
      .               fn new(stream: TokenStream) -> Self {
      .                   Cursor { stream, index: 0 }
      .               }
      .           
145,000 ( 0.02%)      pub fn next_with_spacing(&mut self) -> Option<TreeAndSpacing> {
128,844 ( 0.02%)          if self.index < self.stream.len() {
 59,204 ( 0.01%)              self.index += 1;
151,333 ( 0.02%)              Some(self.stream.0[self.index - 1].clone())
      .                   } else {
 14,762 ( 0.00%)              None
      .                   }
174,000 ( 0.02%)      }
      .           
      .               pub fn index(&self) -> usize {
      .                   self.index
      .               }
      .           
      .               pub fn append(&mut self, new_stream: TokenStream) {
      .                   if new_stream.is_empty() {
      .                       return;
      .                   }
      .                   let index = self.index;
      .                   let stream = mem::take(&mut self.stream);
      .                   *self = TokenStream::from_streams(smallvec![stream, new_stream]).into_trees();
      .                   self.index = index;
      .               }
      .           
 14,456 ( 0.00%)      pub fn look_ahead(&self, n: usize) -> Option<&TokenTree> {
 28,912 ( 0.00%)          self.stream.0[self.index..].get(n).map(|(tree, _)| tree)
 28,912 ( 0.00%)      }
      .           }
      .           
 19,195 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub struct DelimSpan {
      .               pub open: Span,
      .               pub close: Span,
      .           }
      .           
      .           impl DelimSpan {
  2,327 ( 0.00%)      pub fn from_single(sp: Span) -> Self {
      .                   DelimSpan { open: sp, close: sp }
  4,654 ( 0.00%)      }
      .           
  1,280 ( 0.00%)      pub fn from_pair(open: Span, close: Span) -> Self {
      .                   DelimSpan { open, close }
    640 ( 0.00%)      }
      .           
      .               pub fn dummy() -> Self {
      .                   Self::from_single(DUMMY_SP)
  1,173 ( 0.00%)      }
      .           
  4,968 ( 0.00%)      pub fn entire(self) -> Span {
      .                   self.open.with_hi(self.close.hi())
  3,726 ( 0.00%)      }
      .           }

 85,913 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 71 ----------------------------------------
      .               fn default() -> FxHasher {
      .                   FxHasher { hash: 0 }
      .               }
      .           }
      .           
      .           impl FxHasher {
      .               #[inline]
      .               fn add_to_hash(&mut self, i: usize) {
397,552 ( 0.05%)          self.hash = self.hash.rotate_left(5).bitxor(i).wrapping_mul(K);
      .               }
      .           }
      .           
      .           impl Hasher for FxHasher {
      .               #[inline]
  2,590 ( 0.00%)      fn write(&mut self, mut bytes: &[u8]) {
      .                   #[cfg(target_pointer_width = "32")]
      .                   let read_usize = |bytes: &[u8]| u32::from_ne_bytes(bytes[..4].try_into().unwrap());
      .                   #[cfg(target_pointer_width = "64")]
      .                   let read_usize = |bytes: &[u8]| u64::from_ne_bytes(bytes[..8].try_into().unwrap());
      .           
 62,185 ( 0.01%)          let mut hash = FxHasher { hash: self.hash };
      .                   assert!(size_of::<usize>() <= 8);
717,979 ( 0.10%)          while bytes.len() >= size_of::<usize>() {
      .                       hash.add_to_hash(read_usize(bytes) as usize);
      .                       bytes = &bytes[size_of::<usize>()..];
      .                   }
123,858 ( 0.02%)          if (size_of::<usize>() > 4) && (bytes.len() >= 4) {
      .                       hash.add_to_hash(u32::from_ne_bytes(bytes[..4].try_into().unwrap()) as usize);
      .                       bytes = &bytes[4..];
      .                   }
123,858 ( 0.02%)          if (size_of::<usize>() > 2) && bytes.len() >= 2 {
      .                       hash.add_to_hash(u16::from_ne_bytes(bytes[..2].try_into().unwrap()) as usize);
      .                       bytes = &bytes[2..];
      .                   }
138,411 ( 0.02%)          if (size_of::<usize>() > 1) && bytes.len() >= 1 {
 30,108 ( 0.00%)              hash.add_to_hash(bytes[0] as usize);
      .                   }
  3,687 ( 0.00%)          self.hash = hash.hash;
  2,590 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
    124 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u16(&mut self, i: u16) {
    146 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u32(&mut self, i: u32) {
620,353 ( 0.08%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[cfg(target_pointer_width = "32")]
      .               #[inline]
      .               fn write_u64(&mut self, i: u64) {
      .                   self.add_to_hash(i as usize);
      .                   self.add_to_hash((i >> 32) as usize);
      .               }
-- line 131 ----------------------------------------

      1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs
--------------------------------------------------------------------------------
Ir               

-- line 491 ----------------------------------------
      .           
      .           use crate::iter::{self, FromIterator, FusedIterator, TrustedLen};
      .           use crate::ops::{self, ControlFlow, Deref, DerefMut};
      .           use crate::{convert, fmt, hint};
      .           
      .           /// `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).
      .           ///
      .           /// See the [module documentation](self) for details.
    490 ( 0.00%)  #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
      .           #[must_use = "this `Result` may be an `Err` variant, which should be handled"]
      .           #[rustc_diagnostic_item = "Result"]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           pub enum Result<T, E> {
      .               /// Contains the success value
      .               #[lang = "Ok"]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      3 ( 0.00%)      Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
      .           
      .               /// Contains the error value
      .               #[lang = "Err"]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               Err(#[stable(feature = "rust1", since = "1.0.0")] E),
      .           }
      .           
      .           /////////////////////////////////////////////////////////////////////////////
-- line 515 ----------------------------------------
-- line 533 ----------------------------------------
      .               ///
      .               /// let x: Result<i32, &str> = Err("Some error message");
      .               /// assert_eq!(x.is_ok(), false);
      .               /// ```
      .               #[must_use = "if you intended to assert that this is ok, consider `.unwrap()` instead"]
      .               #[rustc_const_stable(feature = "const_result", since = "1.48.0")]
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
    712 ( 0.00%)      pub const fn is_ok(&self) -> bool {
  2,830 ( 0.00%)          matches!(*self, Ok(_))
  1,780 ( 0.00%)      }
      .           
      .               /// Returns `true` if the result is [`Ok`] wrapping a value matching the predicate.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// #![feature(is_some_with)]
      .               ///
-- line 551 ----------------------------------------
-- line 577 ----------------------------------------
      .               ///
      .               /// let x: Result<i32, &str> = Err("Some error message");
      .               /// assert_eq!(x.is_err(), true);
      .               /// ```
      .               #[must_use = "if you intended to assert that this is err, consider `.unwrap_err()` instead"]
      .               #[rustc_const_stable(feature = "const_result", since = "1.48.0")]
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
     42 ( 0.00%)      pub const fn is_err(&self) -> bool {
     63 ( 0.00%)          !self.is_ok()
     84 ( 0.00%)      }
      .           
      .               /// Returns `true` if the result is [`Err`] wrapping a value matching the predicate.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// #![feature(is_some_with)]
      .               /// use std::io::{Error, ErrorKind};
-- line 595 ----------------------------------------
-- line 627 ----------------------------------------
      .               /// let x: Result<u32, &str> = Ok(2);
      .               /// assert_eq!(x.ok(), Some(2));
      .               ///
      .               /// let x: Result<u32, &str> = Err("Nothing here");
      .               /// assert_eq!(x.ok(), None);
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
    300 ( 0.00%)      pub fn ok(self) -> Option<T> {
  9,149 ( 0.00%)          match self {
  9,786 ( 0.00%)              Ok(x) => Some(x),
    128 ( 0.00%)              Err(_) => None,
      .                   }
  1,206 ( 0.00%)      }
      .           
      .               /// Converts from `Result<T, E>` to [`Option<E>`].
      .               ///
      .               /// Converts `self` into an [`Option<E>`], consuming `self`,
      .               /// and discarding the success value, if any.
      .               ///
      .               /// # Examples
      .               ///
-- line 648 ----------------------------------------
-- line 657 ----------------------------------------
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn err(self) -> Option<E> {
      .                   match self {
      .                       Ok(_) => None,
      .                       Err(x) => Some(x),
      .                   }
      4 ( 0.00%)      }
      .           
      .               /////////////////////////////////////////////////////////////////////////
      .               // Adapter for working with references
      .               /////////////////////////////////////////////////////////////////////////
      .           
      .               /// Converts from `&Result<T, E>` to `Result<&T, &E>`.
      .               ///
      .               /// Produces a new `Result`, containing a reference
-- line 673 ----------------------------------------
-- line 683 ----------------------------------------
      .               ///
      .               /// let x: Result<u32, &str> = Err("Error");
      .               /// assert_eq!(x.as_ref(), Err(&"Error"));
      .               /// ```
      .               #[inline]
      .               #[rustc_const_stable(feature = "const_result", since = "1.48.0")]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub const fn as_ref(&self) -> Result<&T, &E> {
     62 ( 0.00%)          match *self {
      .                       Ok(ref x) => Ok(x),
      .                       Err(ref x) => Err(x),
      .                   }
      .               }
      .           
      .               /// Converts from `&mut Result<T, E>` to `Result<&mut T, &mut E>`.
      .               ///
      .               /// # Examples
-- line 699 ----------------------------------------
-- line 715 ----------------------------------------
      .               /// let mut x: Result<i32, i32> = Err(13);
      .               /// mutate(&mut x);
      .               /// assert_eq!(x.unwrap_err(), 0);
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_result", issue = "82814")]
      .               pub const fn as_mut(&mut self) -> Result<&mut T, &mut E> {
    883 ( 0.00%)          match *self {
      .                       Ok(ref mut x) => Ok(x),
      .                       Err(ref mut x) => Err(x),
      .                   }
      .               }
      .           
      .               /////////////////////////////////////////////////////////////////////////
      .               // Transforming contained values
      .               /////////////////////////////////////////////////////////////////////////
-- line 731 ----------------------------------------
-- line 746 ----------------------------------------
      .               ///     match num.parse::<i32>().map(|i| i * 2) {
      .               ///         Ok(n) => println!("{}", n),
      .               ///         Err(..) => {}
      .               ///     }
      .               /// }
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
  1,822 ( 0.00%)      pub fn map<U, F: FnOnce(T) -> U>(self, op: F) -> Result<U, E> {
 82,024 ( 0.01%)          match self {
 83,462 ( 0.01%)              Ok(t) => Ok(op(t)),
 25,347 ( 0.00%)              Err(e) => Err(e),
      .                   }
  2,237 ( 0.00%)      }
      .           
      .               /// Returns the provided default (if [`Err`]), or
      .               /// applies a function to the contained value (if [`Ok`]),
      .               ///
      .               /// Arguments passed to `map_or` are eagerly evaluated; if you are passing
      .               /// the result of a function call, it is recommended to use [`map_or_else`],
      .               /// which is lazily evaluated.
      .               ///
-- line 767 ----------------------------------------
-- line 774 ----------------------------------------
      .               /// assert_eq!(x.map_or(42, |v| v.len()), 3);
      .               ///
      .               /// let x: Result<&str, _> = Err("bar");
      .               /// assert_eq!(x.map_or(42, |v| v.len()), 42);
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "result_map_or", since = "1.41.0")]
      .               pub fn map_or<U, F: FnOnce(T) -> U>(self, default: U, f: F) -> U {
    375 ( 0.00%)          match self {
    212 ( 0.00%)              Ok(t) => f(t),
      .                       Err(_) => default,
      .                   }
      .               }
      .           
      .               /// Maps a `Result<T, E>` to `U` by applying fallback function `default` to
      .               /// a contained [`Err`] value, or function `f` to a contained [`Ok`] value.
      .               ///
      .               /// This function can be used to unpack a successful result
-- line 791 ----------------------------------------
-- line 831 ----------------------------------------
      .               /// let x: Result<u32, u32> = Ok(2);
      .               /// assert_eq!(x.map_err(stringify), Ok(2));
      .               ///
      .               /// let x: Result<u32, u32> = Err(13);
      .               /// assert_eq!(x.map_err(stringify), Err("error code: 13".to_string()));
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
 96,902 ( 0.01%)      pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
494,226 ( 0.07%)          match self {
558,637 ( 0.07%)              Ok(t) => Ok(t),
  1,205 ( 0.00%)              Err(e) => Err(op(e)),
      .                   }
 93,058 ( 0.01%)      }
      .           
      .               /// Calls the provided closure with a reference to the contained value (if [`Ok`]).
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// #![feature(result_option_inspect)]
      .               ///
-- line 852 ----------------------------------------
-- line 1008 ----------------------------------------
      .               ///
      .               /// ```should_panic
      .               /// let x: Result<u32, &str> = Err("emergency failure");
      .               /// x.expect("Testing expect"); // panics with `Testing expect: emergency failure`
      .               /// ```
      .               #[inline]
      .               #[track_caller]
      .               #[stable(feature = "result_expect", since = "1.4.0")]
 24,130 ( 0.00%)      pub fn expect(self, msg: &str) -> T
      .               where
      .                   E: fmt::Debug,
      .               {
154,688 ( 0.02%)          match self {
 21,222 ( 0.00%)              Ok(t) => t,
      .                       Err(e) => unwrap_failed(msg, &e),
      .                   }
  5,564 ( 0.00%)      }
      .           
      .               /// Returns the contained [`Ok`] value, consuming the `self` value.
      .               ///
      .               /// Because this function may panic, its use is generally discouraged.
      .               /// Instead, prefer to use pattern matching and handle the [`Err`]
      .               /// case explicitly, or call [`unwrap_or`], [`unwrap_or_else`], or
      .               /// [`unwrap_or_default`].
      .               ///
-- line 1032 ----------------------------------------
-- line 1051 ----------------------------------------
      .               ///
      .               /// ```should_panic
      .               /// let x: Result<u32, &str> = Err("emergency failure");
      .               /// x.unwrap(); // panics with `emergency failure`
      .               /// ```
      .               #[inline]
      .               #[track_caller]
      .               #[stable(feature = "rust1", since = "1.0.0")]
    234 ( 0.00%)      pub fn unwrap(self) -> T
      .               where
      .                   E: fmt::Debug,
      .               {
 40,425 ( 0.01%)          match self {
 19,899 ( 0.00%)              Ok(t) => t,
      .                       Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
      .                   }
    186 ( 0.00%)      }
      .           
      .               /// Returns the contained [`Ok`] value or a default
      .               ///
      .               /// Consumes the `self` argument then, if [`Ok`], returns the contained
      .               /// value, otherwise if [`Err`], returns the default value for that
      .               /// type.
      .               ///
      .               /// # Examples
-- line 1075 ----------------------------------------
-- line 1092 ----------------------------------------
      .               /// [`parse`]: str::parse
      .               /// [`FromStr`]: crate::str::FromStr
      .               #[inline]
      .               #[stable(feature = "result_unwrap_or_default", since = "1.16.0")]
      .               pub fn unwrap_or_default(self) -> T
      .               where
      .                   T: Default,
      .               {
  1,097 ( 0.00%)          match self {
    656 ( 0.00%)              Ok(x) => x,
      .                       Err(_) => Default::default(),
      .                   }
      .               }
      .           
      .               /// Returns the contained [`Err`] value, consuming the `self` value.
      .               ///
      .               /// # Panics
      .               ///
-- line 1109 ----------------------------------------
-- line 1152 ----------------------------------------
      .               /// ```
      .               #[inline]
      .               #[track_caller]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn unwrap_err(self) -> E
      .               where
      .                   T: fmt::Debug,
      .               {
    234 ( 0.00%)          match self {
      .                       Ok(t) => unwrap_failed("called `Result::unwrap_err()` on an `Ok` value", &t),
      .                       Err(e) => e,
      .                   }
      .               }
      .           
      .               /// Returns the contained [`Ok`] value, but never panics.
      .               ///
      .               /// Unlike [`unwrap`], this method is known to never panic on the
-- line 1168 ----------------------------------------
-- line 1190 ----------------------------------------
      .               /// ```
      .               #[unstable(feature = "unwrap_infallible", reason = "newly added", issue = "61695")]
      .               #[inline]
      .               pub fn into_ok(self) -> T
      .               where
      .                   E: Into<!>,
      .               {
      .                   match self {
176,542 ( 0.02%)              Ok(x) => x,
      .                       Err(e) => e.into(),
      .                   }
      .               }
      .           
      .               /// Returns the contained [`Err`] value, but never panics.
      .               ///
      .               /// Unlike [`unwrap_err`], this method is known to never panic on the
      .               /// result types it is implemented for. Therefore, it can be used
-- line 1206 ----------------------------------------
-- line 1290 ----------------------------------------
      .               /// assert_eq!(Ok(2).and_then(sq).and_then(sq), Ok(16));
      .               /// assert_eq!(Ok(2).and_then(sq).and_then(err), Err(4));
      .               /// assert_eq!(Ok(2).and_then(err).and_then(sq), Err(2));
      .               /// assert_eq!(Err(3).and_then(sq).and_then(sq), Err(3));
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn and_then<U, F: FnOnce(T) -> Result<U, E>>(self, op: F) -> Result<U, E> {
  3,271 ( 0.00%)          match self {
  4,893 ( 0.00%)              Ok(t) => op(t),
    903 ( 0.00%)              Err(e) => Err(e),
      .                   }
      .               }
      .           
      .               /// Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.
      .               ///
      .               /// Arguments passed to `or` are eagerly evaluated; if you are passing the
      .               /// result of a function call, it is recommended to use [`or_else`], which is
      .               /// lazily evaluated.
-- line 1308 ----------------------------------------
-- line 1355 ----------------------------------------
      .               /// assert_eq!(Ok(2).or_else(sq).or_else(sq), Ok(2));
      .               /// assert_eq!(Ok(2).or_else(err).or_else(sq), Ok(2));
      .               /// assert_eq!(Err(3).or_else(sq).or_else(err), Ok(9));
      .               /// assert_eq!(Err(3).or_else(err).or_else(err), Err(3));
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn or_else<F, O: FnOnce(E) -> Result<T, F>>(self, op: O) -> Result<T, F> {
    774 ( 0.00%)          match self {
  2,525 ( 0.00%)              Ok(t) => Ok(t),
      .                       Err(e) => op(e),
      .                   }
      .               }
      .           
      .               /// Returns the contained [`Ok`] value or a provided default.
      .               ///
      .               /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing
      .               /// the result of a function call, it is recommended to use [`unwrap_or_else`],
-- line 1372 ----------------------------------------
-- line 1384 ----------------------------------------
      .               /// assert_eq!(x.unwrap_or(default), 9);
      .               ///
      .               /// let x: Result<u32, &str> = Err("error");
      .               /// assert_eq!(x.unwrap_or(default), default);
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn unwrap_or(self, default: T) -> T {
     51 ( 0.00%)          match self {
      9 ( 0.00%)              Ok(t) => t,
      .                       Err(_) => default,
      .                   }
      .               }
      .           
      .               /// Returns the contained [`Ok`] value or computes it from a closure.
      .               ///
      .               ///
      .               /// # Examples
-- line 1401 ----------------------------------------
-- line 1405 ----------------------------------------
      .               /// ```
      .               /// fn count(x: &str) -> usize { x.len() }
      .               ///
      .               /// assert_eq!(Ok(2).unwrap_or_else(count), 2);
      .               /// assert_eq!(Err("foo").unwrap_or_else(count), 3);
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
    670 ( 0.00%)      pub fn unwrap_or_else<F: FnOnce(E) -> T>(self, op: F) -> T {
199,507 ( 0.03%)          match self {
 41,931 ( 0.01%)              Ok(t) => t,
      .                       Err(e) => op(e),
      .                   }
  1,905 ( 0.00%)      }
      .           
      .               /// Returns the contained [`Ok`] value, consuming the `self` value,
      .               /// without checking that the value is not an [`Err`].
      .               ///
      .               /// # Safety
      .               ///
      .               /// Calling this method on an [`Err`] is *[undefined behavior]*.
      .               ///
-- line 1426 ----------------------------------------
-- line 1647 ----------------------------------------
      .               /// let x: Result<Option<i32>, SomeErr> = Ok(Some(5));
      .               /// let y: Option<Result<i32, SomeErr>> = Some(Ok(5));
      .               /// assert_eq!(x.transpose(), y);
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "transpose_result", since = "1.33.0")]
      .               #[rustc_const_unstable(feature = "const_result", issue = "82814")]
      .               pub const fn transpose(self) -> Option<Result<T, E>> {
    308 ( 0.00%)          match self {
      .                       Ok(Some(x)) => Some(Ok(x)),
      .                       Ok(None) => None,
      .                       Err(e) => Some(Err(e)),
      .                   }
      .               }
      .           }
      .           
      .           impl<T, E> Result<Result<T, E>, E> {
-- line 1663 ----------------------------------------
-- line 1751 ----------------------------------------
      .           
      .           /////////////////////////////////////////////////////////////////////////////
      .           // Trait implementations
      .           /////////////////////////////////////////////////////////////////////////////
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T: Clone, E: Clone> Clone for Result<T, E> {
      .               #[inline]
  7,000 ( 0.00%)      fn clone(&self) -> Self {
 52,037 ( 0.01%)          match self {
 34,535 ( 0.00%)              Ok(x) => Ok(x.clone()),
 13,298 ( 0.00%)              Err(x) => Err(x.clone()),
      .                   }
 14,496 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn clone_from(&mut self, source: &Self) {
      .                   match (self, source) {
      .                       (Ok(to), Ok(from)) => to.clone_from(from),
      .                       (Err(to), Err(from)) => to.clone_from(from),
      .                       (to, from) => *to = from.clone(),
      .                   }
-- line 1772 ----------------------------------------
-- line 2007 ----------------------------------------
      .               /// }).collect();
      .               /// assert_eq!(res, Err("Underflow!"));
      .               /// assert_eq!(shared, 6);
      .               /// ```
      .               ///
      .               /// Since the third element caused an underflow, no further elements were taken,
      .               /// so the final value of `shared` is 6 (= `3 + 2 + 1`), not 16.
      .               #[inline]
    135 ( 0.00%)      fn from_iter<I: IntoIterator<Item = Result<A, E>>>(iter: I) -> Result<V, E> {
      .                   // FIXME(#11084): This could be replaced with Iterator::scan when this
      .                   // performance bug is closed.
      .           
  2,055 ( 0.00%)          iter::process_results(iter.into_iter(), |i| i.collect())
     90 ( 0.00%)      }
      .           }
      .           
      .           #[unstable(feature = "try_trait_v2", issue = "84277")]
      .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
      .           impl<T, E> const ops::Try for Result<T, E> {
      .               type Output = T;
      .               type Residual = Result<convert::Infallible, E>;
      .           
      .               #[inline]
      .               fn from_output(output: Self::Output) -> Self {
    502 ( 0.00%)          Ok(output)
      .               }
      .           
      .               #[inline]
166,687 ( 0.02%)      fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
740,857 ( 0.10%)          match self {
846,859 ( 0.11%)              Ok(v) => ControlFlow::Continue(v),
 71,238 ( 0.01%)              Err(e) => ControlFlow::Break(Err(e)),
      .                   }
120,177 ( 0.02%)      }
      .           }
      .           
      .           #[unstable(feature = "try_trait_v2", issue = "84277")]
      .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
      .           impl<T, E, F: ~const From<E>> const ops::FromResidual<Result<convert::Infallible, E>>
      .               for Result<T, F>
      .           {
      .               #[inline]
      .               #[track_caller]
    984 ( 0.00%)      fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
      .                   match residual {
 39,922 ( 0.01%)              Err(e) => Err(From::from(e)),
      .                   }
    656 ( 0.00%)      }
      .           }
      .           
      .           #[unstable(feature = "try_trait_v2_residual", issue = "91285")]
      .           impl<T, E> ops::Residual<T> for Result<convert::Infallible, E> {
      .               type TryType = Result<T, E>;
      .           }

509,563 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs
--------------------------------------------------------------------------------
Ir               

-- line 176 ----------------------------------------
      .               }
      .               fn sess(self) -> Option<&'tcx Session> {
      .                   None
      .               }
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   None
      .               }
      .           
  8,229 ( 0.00%)      fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {
  2,743 ( 0.00%)          let tcx = self.tcx();
385,281 ( 0.05%)          DecodeContext {
 41,045 ( 0.01%)              opaque: opaque::Decoder::new(self.blob(), pos),
  2,743 ( 0.00%)              cdata: self.cdata(),
      .                       blob: self.blob(),
 14,394 ( 0.00%)              sess: self.sess().or(tcx.map(|tcx| tcx.sess)),
      .                       tcx,
      .                       last_source_file_index: 0,
      .                       lazy_state: LazyState::NoNode,
      .                       alloc_decoding_session: self
      .                           .cdata()
 36,297 ( 0.00%)                  .map(|cdata| cdata.cdata.alloc_decoding_state.new_decoding_session()),
      .                   }
  8,229 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob {
      .               #[inline]
      .               fn blob(self) -> &'a MetadataBlob {
      .                   self
      .               }
      .           }
-- line 206 ----------------------------------------
-- line 255 ----------------------------------------
      .               }
      .               #[inline]
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   Some(self.1)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<T> {
 53,459 ( 0.01%)      fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {
 32,588 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
112,288 ( 0.01%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 37,898 ( 0.01%)          T::decode(&mut dcx)
 68,346 ( 0.01%)      }
      .           }
      .           
      .           impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<[T]> {
      .               fn decode<M: Metadata<'a, 'tcx>>(
      .                   self,
      .                   metadata: M,
      .               ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {
    119 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
     34 ( 0.00%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 21,862 ( 0.00%)          (0..self.meta).map(move |_| T::decode(&mut dcx))
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> DecodeContext<'a, 'tcx> {
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   debug_assert!(self.tcx.is_some(), "missing TyCtxt in DecodeContext");
      .                   self.tcx.unwrap()
-- line 285 ----------------------------------------
-- line 292 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn cdata(&self) -> CrateMetadataRef<'a> {
      .                   debug_assert!(self.cdata.is_some(), "missing CrateMetadata in DecodeContext");
      .                   self.cdata.unwrap()
      .               }
      .           
      .               fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {
101,407 ( 0.01%)          if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }
      .               }
      .           
 46,475 ( 0.01%)      fn read_lazy_with_meta<T: ?Sized + LazyMeta>(&mut self, meta: T::Meta) -> Lazy<T> {
      .                   let distance = self.read_usize();
 43,761 ( 0.01%)          let position = match self.lazy_state {
      .                       LazyState::NoNode => bug!("read_lazy_with_meta: outside of a metadata node"),
  7,987 ( 0.00%)              LazyState::NodeStart(start) => {
      .                           let start = start.get();
 15,974 ( 0.00%)                  assert!(distance <= start);
      .                           start - distance
      .                       }
 11,880 ( 0.00%)              LazyState::Previous(last_pos) => last_pos.get() + distance,
      .                   };
 23,894 ( 0.00%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(position).unwrap());
      .                   Lazy::from_position_and_meta(NonZeroUsize::new(position).unwrap(), meta)
 46,475 ( 0.01%)      }
      .           
      .               #[inline]
      .               pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {
      .                   self.opaque.read_raw_bytes(len)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {
-- line 324 ----------------------------------------
-- line 326 ----------------------------------------
      .           
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   self.tcx.expect("missing TyCtxt in DecodeContext")
      .               }
      .           
      .               #[inline]
      .               fn peek_byte(&self) -> u8 {
 78,685 ( 0.01%)          self.opaque.data[self.opaque.position()]
      .               }
      .           
      .               #[inline]
      .               fn position(&self) -> usize {
      .                   self.opaque.position()
      .               }
      .           
 74,662 ( 0.01%)      fn cached_ty_for_shorthand<F>(&mut self, shorthand: usize, or_insert_with: F) -> Ty<'tcx>
      .               where
      .                   F: FnOnce(&mut Self) -> Ty<'tcx>,
      .               {
 10,666 ( 0.00%)          let tcx = self.tcx();
      .           
 10,666 ( 0.00%)          let key = ty::CReaderCacheKey { cnum: Some(self.cdata().cnum), pos: shorthand };
      .           
 31,504 ( 0.00%)          if let Some(&ty) = tcx.ty_rcache.borrow().get(&key) {
      .                       return ty;
      .                   }
      .           
  2,790 ( 0.00%)          let ty = or_insert_with(self);
      .                   tcx.ty_rcache.borrow_mut().insert(key, ty);
      .                   ty
 95,994 ( 0.01%)      }
      .           
      .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R,
      .               {
      .                   let new_opaque = opaque::Decoder::new(self.opaque.data, pos);
      .                   let old_opaque = mem::replace(&mut self.opaque, new_opaque);
      .                   let old_state = mem::replace(&mut self.lazy_state, LazyState::NoNode);
      .                   let r = f(self);
 15,465 ( 0.00%)          self.opaque = old_opaque;
  3,093 ( 0.00%)          self.lazy_state = old_state;
      .                   r
      .               }
      .           
      .               fn decode_alloc_id(&mut self) -> rustc_middle::mir::interpret::AllocId {
      .                   if let Some(alloc_decoding_session) = self.alloc_decoding_session {
      .                       alloc_decoding_session.decode_alloc_id(self)
      .                   } else {
      .                       bug!("Attempting to decode interpret::AllocId without CrateMetadata")
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for CrateNum {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> CrateNum {
 54,195 ( 0.01%)          let cnum = CrateNum::from_u32(d.read_u32());
      .                   d.map_encoded_cnum_to_current(cnum)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefIndex {
    363 ( 0.00%)      fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefIndex {
113,572 ( 0.02%)          DefIndex::from_u32(d.read_u32())
    726 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnIndex {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> ExpnIndex {
      .                   ExpnIndex::from_u32(d.read_u32())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {
 77,732 ( 0.01%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {
 19,433 ( 0.00%)          let cdata = decoder.cdata();
 19,433 ( 0.00%)          let sess = decoder.sess.unwrap();
 38,866 ( 0.01%)          let cname = cdata.root.name;
      .                   rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {
      .                       debug!("SpecializedDecoder<SyntaxContext>: decoding {}", id);
    456 ( 0.00%)              cdata
      .                           .root
      .                           .syntax_contexts
      .                           .get(cdata, id)
      .                           .unwrap_or_else(|| panic!("Missing SyntaxContext {:?} for crate {:?}", id, cname))
      .                           .decode((cdata, sess))
      .                   })
 97,165 ( 0.01%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {
  5,103 ( 0.00%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {
    729 ( 0.00%)          let local_cdata = decoder.cdata();
    729 ( 0.00%)          let sess = decoder.sess.unwrap();
      .           
      .                   let cnum = CrateNum::decode(decoder);
      .                   let index = u32::decode(decoder);
      .           
      .                   let expn_id = rustc_span::hygiene::decode_expn_id(cnum, index, |expn_id| {
      .                       let ExpnId { krate: cnum, local_id: index } = expn_id;
      .                       // Lookup local `ExpnData`s in our own crate data. Foreign `ExpnData`s
      .                       // are stored in the owning crate, to avoid duplication.
      .                       debug_assert_ne!(cnum, LOCAL_CRATE);
    133 ( 0.00%)              let crate_data = if cnum == local_cdata.cnum {
      .                           local_cdata
      .                       } else {
      .                           local_cdata.cstore.get_crate_data(cnum)
      .                       };
    665 ( 0.00%)              let expn_data = crate_data
      .                           .root
      .                           .expn_data
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
    665 ( 0.00%)              let expn_hash = crate_data
      .                           .root
      .                           .expn_hashes
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
  1,330 ( 0.00%)              (expn_data, expn_hash)
      .                   });
      .                   expn_id
  5,832 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {
152,728 ( 0.02%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Span {
 19,091 ( 0.00%)          let ctxt = SyntaxContext::decode(decoder);
      .                   let tag = u8::decode(decoder);
      .           
 38,182 ( 0.01%)          if tag == TAG_PARTIAL_SPAN {
      .                       return DUMMY_SP.with_ctxt(ctxt);
      .                   }
      .           
      .                   debug_assert!(tag == TAG_VALID_SPAN_LOCAL || tag == TAG_VALID_SPAN_FOREIGN);
      .           
      .                   let lo = BytePos::decode(decoder);
      .                   let len = BytePos::decode(decoder);
      .                   let hi = lo + len;
      .           
 57,246 ( 0.01%)          let Some(sess) = decoder.sess else {
      .                       bug!("Cannot decode Span without Session.")
      .                   };
      .           
      .                   // There are two possibilities here:
      .                   // 1. This is a 'local span', which is located inside a `SourceFile`
      .                   // that came from this crate. In this case, we use the source map data
      .                   // encoded in this crate. This branch should be taken nearly all of the time.
      .                   // 2. This is a 'foreign span', which is located inside a `SourceFile`
-- line 476 ----------------------------------------
-- line 492 ----------------------------------------
      .                   // a transitive dependency.
      .                   //
      .                   // When we encode a foreign span, we adjust its 'lo' and 'high' values
      .                   // to be based on the *foreign* crate (e.g. crate C), not the crate
      .                   // we are writing metadata for (e.g. crate B). This allows us to
      .                   // treat the 'local' and 'foreign' cases almost identically during deserialization:
      .                   // we can call `imported_source_files` for the proper crate, and binary search
      .                   // through the returned slice using our span.
 42,259 ( 0.01%)          let imported_source_files = if tag == TAG_VALID_SPAN_LOCAL {
      .                       decoder.cdata().imported_source_files(sess)
      .                   } else {
      .                       // When we encode a proc-macro crate, all `Span`s should be encoded
      .                       // with `TAG_VALID_SPAN_LOCAL`
    233 ( 0.00%)              if decoder.cdata().root.is_proc_macro_crate() {
      .                           // Decode `CrateNum` as u32 - using `CrateNum::decode` will ICE
      .                           // since we don't have `cnum_map` populated.
      .                           let cnum = u32::decode(decoder);
      .                           panic!(
      .                               "Decoding of crate {:?} tried to access proc-macro dep {:?}",
      .                               decoder.cdata().root.name,
      .                               cnum
      .                           );
-- line 513 ----------------------------------------
-- line 518 ----------------------------------------
      .                           "SpecializedDecoder<Span>::specialized_decode: loading source files from cnum {:?}",
      .                           cnum
      .                       );
      .           
      .                       // Decoding 'foreign' spans should be rare enough that it's
      .                       // not worth it to maintain a per-CrateNum cache for `last_source_file_index`.
      .                       // We just set it to 0, to ensure that we don't try to access something out
      .                       // of bounds for our initial 'guess'
    466 ( 0.00%)              decoder.last_source_file_index = 0;
      .           
    233 ( 0.00%)              let foreign_data = decoder.cdata().cstore.get_crate_data(cnum);
      .                       foreign_data.imported_source_files(sess)
      .                   };
      .           
      .                   let source_file = {
      .                       // Optimize for the case that most spans within a translated item
      .                       // originate from the same source_file.
 57,246 ( 0.01%)              let last_source_file = &imported_source_files[decoder.last_source_file_index];
      .           
 76,210 ( 0.01%)              if lo >= last_source_file.original_start_pos && lo <= last_source_file.original_end_pos
      .                       {
      .                           last_source_file
      .                       } else {
      .                           let index = imported_source_files
      .                               .binary_search_by_key(&lo, |source_file| source_file.original_start_pos)
  8,184 ( 0.00%)                      .unwrap_or_else(|index| index - 1);
      .           
      .                           // Don't try to cache the index for foreign spans,
      .                           // as this would require a map from CrateNums to indices
  4,095 ( 0.00%)                  if tag == TAG_VALID_SPAN_LOCAL {
  3,935 ( 0.00%)                      decoder.last_source_file_index = index;
      .                           }
  8,190 ( 0.00%)                  &imported_source_files[index]
      .                       }
      .                   };
      .           
      .                   // Make sure our binary search above is correct.
      .                   debug_assert!(
      .                       lo >= source_file.original_start_pos && lo <= source_file.original_end_pos,
      .                       "Bad binary search: lo={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       lo,
-- line 558 ----------------------------------------
-- line 565 ----------------------------------------
      .                       hi >= source_file.original_start_pos && hi <= source_file.original_end_pos,
      .                       "Bad binary search: hi={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       hi,
      .                       source_file.original_start_pos,
      .                       source_file.original_end_pos
      .                   );
      .           
      .                   let lo =
 76,328 ( 0.01%)              (lo + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .                   let hi =
      .                       (hi + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .           
      .                   // Do not try to decode parent for foreign spans.
      .                   Span::new(lo, hi, ctxt, None)
171,819 ( 0.02%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [thir::abstract_const::Node<'tcx>] {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
-- line 587 ----------------------------------------
-- line 590 ----------------------------------------
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<T>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
 13,708 ( 0.00%)          decoder.read_lazy_with_meta(())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<[T]>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 18,577 ( 0.00%)          if len == 0 { Lazy::empty() } else { decoder.read_lazy_with_meta(len) }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, I: Idx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<Table<I, T>>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 14,534 ( 0.00%)          decoder.read_lazy_with_meta(len)
      .               }
      .           }
      .           
      .           implement_ty_decoder!(DecodeContext<'a, 'tcx>);
      .           
      .           impl<'tcx> MetadataBlob {
      .               crate fn new(metadata_ref: MetadataRef) -> MetadataBlob {
      .                   MetadataBlob(Lrc::new(metadata_ref))
-- line 626 ----------------------------------------
-- line 630 ----------------------------------------
      .                   self.blob().starts_with(METADATA_HEADER)
      .               }
      .           
      .               crate fn get_rustc_version(&self) -> String {
      .                   Lazy::<String>::from_position(NonZeroUsize::new(METADATA_HEADER.len() + 4).unwrap())
      .                       .decode(self)
      .               }
      .           
    258 ( 0.00%)      crate fn get_root(&self) -> CrateRoot<'tcx> {
     86 ( 0.00%)          let slice = &self.blob()[..];
      .                   let offset = METADATA_HEADER.len();
    430 ( 0.00%)          let pos = (((slice[offset + 0] as u32) << 24)
    172 ( 0.00%)              | ((slice[offset + 1] as u32) << 16)
    344 ( 0.00%)              | ((slice[offset + 2] as u32) << 8)
    258 ( 0.00%)              | ((slice[offset + 3] as u32) << 0)) as usize;
      .                   Lazy::<CrateRoot<'tcx>>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)
    430 ( 0.00%)      }
      .           
      .               crate fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {
      .                   let root = self.get_root();
      .                   writeln!(out, "Crate info:")?;
      .                   writeln!(out, "name {}{}", root.name, root.extra_filename)?;
      .                   writeln!(out, "hash {} stable_crate_id {:?}", root.hash, root.stable_crate_id)?;
      .                   writeln!(out, "proc_macro {:?}", root.proc_macro_data.is_some())?;
      .                   writeln!(out, "=External Dependencies=")?;
-- line 654 ----------------------------------------
-- line 666 ----------------------------------------
      .                   }
      .                   write!(out, "\n")?;
      .                   Ok(())
      .               }
      .           }
      .           
      .           impl CrateRoot<'_> {
      .               crate fn is_proc_macro_crate(&self) -> bool {
     52 ( 0.00%)          self.proc_macro_data.is_some()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
     12 ( 0.00%)          self.name
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
     27 ( 0.00%)          self.hash
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
     60 ( 0.00%)          self.stable_crate_id
      .               }
      .           
      .               crate fn triple(&self) -> &TargetTriple {
      .                   &self.triple
      .               }
      .           
      .               crate fn decode_crate_deps<'a>(
      .                   &self,
      .                   metadata: &'a MetadataBlob,
      .               ) -> impl ExactSizeIterator<Item = CrateDep> + Captures<'a> {
     50 ( 0.00%)          self.crate_deps.decode(metadata)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> CrateMetadataRef<'a> {
     21 ( 0.00%)      fn raw_proc_macro(self, id: DefIndex) -> &'a ProcMacro {
      .                   // DefIndex's in root.proc_macro_data have a one-to-one correspondence
      .                   // with items in 'raw_proc_macros'.
      6 ( 0.00%)          let pos = self
      .                       .root
      .                       .proc_macro_data
      .                       .as_ref()
      .                       .unwrap()
      .                       .macros
      .                       .decode(self)
      .                       .position(|i| i == id)
      .                       .unwrap();
     12 ( 0.00%)          &self.raw_proc_macros.unwrap()[pos]
     27 ( 0.00%)      }
      .           
 52,074 ( 0.01%)      fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {
 38,972 ( 0.01%)          let name = self.def_key(item_index).disambiguated_data.data.get_opt_name()?;
 17,969 ( 0.00%)          let span = match self.root.tables.ident_span.get(self, item_index) {
      .                       Some(lazy_span) => lazy_span.decode((self, sess)),
      .                       None => {
      .                           // FIXME: this weird case of a name with no span is specific to `extern crate`
      .                           // items, which are supposed to be treated like `use` items and only be encoded
      .                           // to metadata as `Export`s, return `None` because that's what all the callers
      .                           // expect in this case.
    162 ( 0.00%)                  assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);
      .                           return None;
      .                       }
      .                   };
      .                   Some(Ident::new(name, span))
 66,716 ( 0.01%)      }
      .           
    340 ( 0.00%)      fn item_ident(self, item_index: DefIndex, sess: &Session) -> Ident {
  7,616 ( 0.00%)          self.opt_item_ident(item_index, sess).expect("no encoded ident for item")
    680 ( 0.00%)      }
      .           
      .               fn maybe_kind(self, item_id: DefIndex) -> Option<EntryKind> {
 13,948 ( 0.00%)          self.root.tables.kind.get(self, item_id).map(|k| k.decode(self))
      .               }
      .           
 55,792 ( 0.01%)      fn kind(self, item_id: DefIndex) -> EntryKind {
      .                   self.maybe_kind(item_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
 41,844 ( 0.01%)      }
      .           
 11,473 ( 0.00%)      fn def_kind(self, item_id: DefIndex) -> DefKind {
 10,131 ( 0.00%)          self.root.tables.def_kind.get(self, item_id).map(|k| k.decode(self)).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
  6,556 ( 0.00%)      }
      .           
  3,060 ( 0.00%)      fn get_span(self, index: DefIndex, sess: &Session) -> Span {
  6,097 ( 0.00%)          self.root
      .                       .tables
      .                       .span
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing span for {:?}", index))
      .                       .decode((self, sess))
  1,700 ( 0.00%)      }
      .           
      .               fn load_proc_macro(self, id: DefIndex, sess: &Session) -> SyntaxExtension {
     36 ( 0.00%)          let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {
      .                       ProcMacro::CustomDerive { trait_name, attributes, client } => {
      .                           let helper_attrs =
      .                               attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();
      .                           (
      .                               trait_name,
      .                               SyntaxExtensionKind::Derive(Box::new(ProcMacroDerive { client })),
      .                               helper_attrs,
      .                           )
      .                       }
      8 ( 0.00%)              ProcMacro::Attr { name, client } => {
      8 ( 0.00%)                  (name, SyntaxExtensionKind::Attr(Box::new(AttrProcMacro { client })), Vec::new())
      .                       }
      .                       ProcMacro::Bang { name, client } => {
      .                           (name, SyntaxExtensionKind::Bang(Box::new(BangProcMacro { client })), Vec::new())
      .                       }
      .                   };
      .           
     10 ( 0.00%)          let attrs: Vec<_> = self.get_item_attrs(id, sess).collect();
     24 ( 0.00%)          SyntaxExtension::new(
      .                       sess,
     10 ( 0.00%)              kind,
      .                       self.get_span(id, sess),
      8 ( 0.00%)              helper_attrs,
      6 ( 0.00%)              self.root.edition,
      2 ( 0.00%)              Symbol::intern(name),
      .                       &attrs,
      .                   )
      .               }
      .           
    624 ( 0.00%)      fn get_trait_def(self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {
    192 ( 0.00%)          match self.kind(item_id) {
     48 ( 0.00%)              EntryKind::Trait(data) => {
    288 ( 0.00%)                  let data = data.decode((self, sess));
    768 ( 0.00%)                  ty::TraitDef::new(
      .                               self.local_def_id(item_id),
     96 ( 0.00%)                      data.unsafety,
     96 ( 0.00%)                      data.paren_sugar,
     96 ( 0.00%)                      data.has_auto_impl,
     96 ( 0.00%)                      data.is_marker,
     48 ( 0.00%)                      data.skip_array_during_method_dispatch,
     48 ( 0.00%)                      data.specialization_kind,
    192 ( 0.00%)                      self.def_path_hash(item_id),
     48 ( 0.00%)                      data.must_implement_one_of,
      .                           )
      .                       }
      .                       EntryKind::TraitAlias => ty::TraitDef::new(
      .                           self.local_def_id(item_id),
      .                           hir::Unsafety::Normal,
      .                           false,
      .                           false,
      .                           false,
      .                           false,
      .                           ty::trait_def::TraitSpecializationKind::None,
      .                           self.def_path_hash(item_id),
      .                           None,
      .                       ),
      .                       _ => bug!("def-index does not refer to trait or trait alias"),
      .                   }
    432 ( 0.00%)      }
      .           
    621 ( 0.00%)      fn get_variant(
      .                   self,
      .                   kind: &EntryKind,
      .                   index: DefIndex,
      .                   parent_did: DefId,
      .                   sess: &Session,
      .               ) -> ty::VariantDef {
    276 ( 0.00%)          let data = match kind {
      .                       EntryKind::Variant(data) | EntryKind::Struct(data, _) | EntryKind::Union(data, _) => {
    345 ( 0.00%)                  data.decode(self)
      .                       }
      .                       _ => bug!(),
      .                   };
      .           
    244 ( 0.00%)          let adt_kind = match kind {
      .                       EntryKind::Variant(_) => ty::AdtKind::Enum,
      .                       EntryKind::Struct(..) => ty::AdtKind::Struct,
      .                       EntryKind::Union(..) => ty::AdtKind::Union,
      .                       _ => bug!(),
      .                   };
      .           
      .                   let variant_did =
      .                       if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };
    138 ( 0.00%)          let ctor_did = data.ctor.map(|index| self.local_def_id(index));
      .           
  1,518 ( 0.00%)          ty::VariantDef::new(
      .                       self.item_ident(index, sess).name,
      .                       variant_did,
      .                       ctor_did,
    276 ( 0.00%)              data.discr,
    414 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, index)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
      .                           .map(|index| ty::FieldDef {
     97 ( 0.00%)                      did: self.local_def_id(index),
    194 ( 0.00%)                      name: self.item_ident(index, sess).name,
    194 ( 0.00%)                      vis: self.get_visibility(index),
      .                           })
      .                           .collect(),
      .                       data.ctor_kind,
      .                       adt_kind,
      .                       parent_did,
      .                       false,
     69 ( 0.00%)              data.is_non_exhaustive,
      .                   )
    621 ( 0.00%)      }
      .           
    915 ( 0.00%)      fn get_adt_def(self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {
    244 ( 0.00%)          let kind = self.kind(item_id);
    122 ( 0.00%)          let did = self.local_def_id(item_id);
      .           
    289 ( 0.00%)          let (adt_kind, repr) = match kind {
      .                       EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),
      .                       EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),
      .                       EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),
      .                       _ => bug!("get_adt_def called on a non-ADT {:?}", did),
      .                   };
      .           
      .                   let variants = if let ty::AdtKind::Enum = adt_kind {
     40 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, item_id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
    272 ( 0.00%)                  .map(|index| self.get_variant(&self.kind(index), index, did, tcx.sess))
      .                           .collect()
      .                   } else {
    424 ( 0.00%)              std::iter::once(self.get_variant(&kind, item_id, did, tcx.sess)).collect()
      .                   };
      .           
    894 ( 0.00%)          tcx.alloc_adt_def(did, adt_kind, variants, repr)
    427 ( 0.00%)      }
      .           
      .               fn get_explicit_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
  3,415 ( 0.00%)          self.root.tables.explicit_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_inferred_outlives(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
  3,415 ( 0.00%)          self.root
      .                       .tables
      .                       .inferred_outlives
      .                       .get(self, item_id)
     28 ( 0.00%)              .map(|predicates| tcx.arena.alloc_from_iter(predicates.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_super_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
    175 ( 0.00%)          self.root.tables.super_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_explicit_item_bounds(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
     55 ( 0.00%)          self.root
      .                       .tables
      .                       .explicit_item_bounds
      .                       .get(self, item_id)
     40 ( 0.00%)              .map(|bounds| tcx.arena.alloc_from_iter(bounds.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_generics(self, item_id: DefIndex, sess: &Session) -> ty::Generics {
  5,619 ( 0.00%)          self.root.tables.generics.get(self, item_id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_type(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
  9,425 ( 0.00%)          self.root
      .                       .tables
      .                       .ty
      .                       .get(self, id)
      .                       .unwrap_or_else(|| panic!("Not a type: {:?}", id))
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_stability(self, id: DefIndex) -> Option<attr::Stability> {
    535 ( 0.00%)          self.root.tables.stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_const_stability(self, id: DefIndex) -> Option<attr::ConstStability> {
     10 ( 0.00%)          self.root.tables.const_stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_deprecation(self, id: DefIndex) -> Option<attr::Deprecation> {
    810 ( 0.00%)          self.root.tables.deprecation.get(self, id).map(|depr| depr.decode(self))
      .               }
      .           
    138 ( 0.00%)      fn get_visibility(self, id: DefIndex) -> ty::Visibility {
  8,762 ( 0.00%)          self.root.tables.visibility.get(self, id).unwrap().decode(self)
     92 ( 0.00%)      }
      .           
      .               fn get_impl_data(self, id: DefIndex) -> ImplData {
 28,116 ( 0.00%)          match self.kind(id) {
 23,430 ( 0.00%)              EntryKind::Impl(data) => data.decode(self),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_parent_impl(self, id: DefIndex) -> Option<DefId> {
 13,107 ( 0.00%)          self.get_impl_data(id).parent_impl
      .               }
      .           
      .               fn get_impl_polarity(self, id: DefIndex) -> ty::ImplPolarity {
    267 ( 0.00%)          self.get_impl_data(id).polarity
      .               }
      .           
      .               fn get_impl_defaultness(self, id: DefIndex) -> hir::Defaultness {
     40 ( 0.00%)          self.get_impl_data(id).defaultness
      .               }
      .           
      .               fn get_impl_constness(self, id: DefIndex) -> hir::Constness {
     10 ( 0.00%)          self.get_impl_data(id).constness
      .               }
      .           
      .               fn get_trait_item_def_id(self, id: DefIndex) -> Option<DefId> {
  6,510 ( 0.00%)          self.root.tables.trait_item_def_id.get(self, id).map(|d| d.decode(self))
      .               }
      .           
      .               fn get_coerce_unsized_info(self, id: DefIndex) -> Option<ty::adjustment::CoerceUnsizedInfo> {
      .                   self.get_impl_data(id).coerce_unsized_info
      .               }
      .           
      .               fn get_impl_trait(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {
 53,538 ( 0.01%)          self.root.tables.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))
      .               }
      .           
      .               fn get_expn_that_defined(self, id: DefIndex, sess: &Session) -> ExpnId {
  2,410 ( 0.00%)          self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_const_param_default(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> rustc_middle::ty::Const<'tcx> {
      .                   self.root.tables.const_defaults.get(self, id).unwrap().decode((self, tcx))
-- line 1026 ----------------------------------------
-- line 1028 ----------------------------------------
      .           
      .               /// Iterates over all the stability attributes in the given crate.
      .               fn get_lib_features(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {
      .                   tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))
      .               }
      .           
      .               /// Iterates over the language items in the given crate.
      .               fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {
     81 ( 0.00%)          tcx.arena.alloc_from_iter(
     54 ( 0.00%)              self.root
      .                           .lang_items
      .                           .decode(self)
    564 ( 0.00%)                  .map(|(def_index, index)| (self.local_def_id(def_index), index)),
      .                   )
      .               }
      .           
      .               /// Iterates over the diagnostic items in the given crate.
      .               fn get_diagnostic_items(self) -> DiagnosticItems {
      .                   let mut id_to_name = FxHashMap::default();
     54 ( 0.00%)          let name_to_id = self
      .                       .root
      .                       .diagnostic_items
      .                       .decode(self)
      .                       .map(|(name, def_index)| {
    130 ( 0.00%)                  let id = self.local_def_id(def_index);
    130 ( 0.00%)                  id_to_name.insert(id, name);
      .                           (name, id)
      .                       })
      .                       .collect();
    243 ( 0.00%)          DiagnosticItems { id_to_name, name_to_id }
      .               }
      .           
      .               /// Iterates over all named children of the given module,
      .               /// including both proper items and reexports.
      .               /// Module here is understood in name resolution sense - it can be a `mod` item,
      .               /// or a crate root, or an enum, or a trait.
      .               fn for_each_module_child(
      .                   self,
      .                   id: DefIndex,
      .                   mut callback: impl FnMut(ModChild),
      .                   sess: &Session,
      .               ) {
    308 ( 0.00%)          if let Some(data) = &self.root.proc_macro_data {
      .                       // If we are loading as a proc macro, we want to return
      .                       // the view of this crate as a proc macro crate.
      1 ( 0.00%)              if id == CRATE_DEF_INDEX {
     15 ( 0.00%)                  for def_index in data.macros.decode(self) {
      3 ( 0.00%)                      let raw_macro = self.raw_proc_macro(def_index);
      .                               let res = Res::Def(
      .                                   DefKind::Macro(macro_kind(raw_macro)),
      .                                   self.local_def_id(def_index),
      .                               );
      .                               let ident = self.item_ident(def_index, sess);
      .                               callback(ModChild {
      .                                   ident,
      .                                   res,
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
      .                                   span: ident.span,
      .                               });
      .                           }
      .                       }
      .                       return;
      .                   }
      .           
      .                   // Iterate over all children.
    608 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
  1,216 ( 0.00%)              for child_index in children.decode((self, sess)) {
 18,642 ( 0.00%)                  if let Some(ident) = self.opt_item_ident(child_index, sess) {
  2,436 ( 0.00%)                      let kind = self.def_kind(child_index);
  1,624 ( 0.00%)                      if matches!(kind, DefKind::Macro(..)) {
      .                                   // FIXME: Macros are currently encoded twice, once as items and once as
      .                                   // reexports. We ignore the items here and only use the reexports.
      .                                   continue;
      .                               }
      .                               let def_id = self.local_def_id(child_index);
      .                               let res = Res::Def(kind, def_id);
      .                               let vis = self.get_visibility(child_index);
      .                               let span = self.get_span(child_index, sess);
      .           
      .                               callback(ModChild { ident, res, vis, span });
      .           
      .                               // For non-re-export structs and variants add their constructors to children.
      .                               // Re-export lists automatically contain constructors when necessary.
  3,102 ( 0.00%)                      match kind {
      .                                   DefKind::Struct => {
     91 ( 0.00%)                              if let Some((ctor_def_id, ctor_kind)) =
      .                                           self.get_ctor_def_id_and_kind(child_index)
      .                                       {
      .                                           let ctor_res =
      .                                               Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
      .                                           let vis = self.get_visibility(ctor_def_id.index);
      .                                           callback(ModChild { ident, res: ctor_res, vis, span });
      .                                       }
      .                                   }
      .                                   DefKind::Variant => {
      .                                       // Braced variants, unlike structs, generate unusable names in
      .                                       // value namespace, they are reserved for possible future use.
      .                                       // It's ok to use the variant's id as a ctor id since an
      .                                       // error will be reported on any use of such resolution anyway.
     21 ( 0.00%)                              let (ctor_def_id, ctor_kind) = self
      .                                           .get_ctor_def_id_and_kind(child_index)
      .                                           .unwrap_or((def_id, CtorKind::Fictive));
      .                                       let ctor_res =
      .                                           Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id);
      .                                       let mut vis = self.get_visibility(ctor_def_id.index);
      7 ( 0.00%)                              if ctor_def_id == def_id && vis.is_public() {
      .                                           // For non-exhaustive variants lower the constructor visibility to
      .                                           // within the crate. We only need this for fictive constructors,
      .                                           // for other constructors correct visibilities
      .                                           // were already encoded in metadata.
      .                                           let mut attrs = self.get_item_attrs(def_id.index, sess);
      .                                           if attrs.any(|item| item.has_name(sym::non_exhaustive)) {
      .                                               let crate_def_id = self.local_def_id(CRATE_DEF_INDEX);
      .                                               vis = ty::Visibility::Restricted(crate_def_id);
-- line 1141 ----------------------------------------
-- line 1144 ----------------------------------------
      .                                       callback(ModChild { ident, res: ctor_res, vis, span });
      .                                   }
      .                                   _ => {}
      .                               }
      .                           }
      .                       }
      .                   }
      .           
    758 ( 0.00%)          match self.kind(id) {
     66 ( 0.00%)              EntryKind::Mod(exports) => {
  2,120 ( 0.00%)                  for exp in exports.decode((self, sess)) {
      .                               callback(exp);
      .                           }
      .                       }
      .                       EntryKind::Enum(..) | EntryKind::Trait(..) => {}
      .                       _ => bug!("`for_each_module_child` is called on a non-module: {:?}", self.def_kind(id)),
      .                   }
      .               }
      .           
      .               fn is_ctfe_mir_available(self, id: DefIndex) -> bool {
     20 ( 0.00%)          self.root.tables.mir_for_ctfe.get(self, id).is_some()
      .               }
      .           
      .               fn is_item_mir_available(self, id: DefIndex) -> bool {
      .                   self.root.tables.mir.get(self, id).is_some()
      .               }
      .           
      .               fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {
  2,912 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::Mod(_) | EntryKind::Enum(_) | EntryKind::Trait(_) => {
      .                           self.get_expn_that_defined(id, sess)
      .                       }
      .                       _ => panic!("Expected module, found {:?}", self.local_def_id(id)),
      .                   }
      .               }
      .           
      .               fn get_optimized_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
-- line 1180 ----------------------------------------
-- line 1184 ----------------------------------------
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_optimized_mir: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_mir_for_ctfe(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
     25 ( 0.00%)          self.root
      .                       .tables
      .                       .mir_for_ctfe
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_mir_for_ctfe: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
-- line 1200 ----------------------------------------
-- line 1242 ----------------------------------------
      .                           qualif,
      .                           _,
      .                       ) => qualif,
      .                       _ => bug!("mir_const_qualif: unexpected kind"),
      .                   }
      .               }
      .           
      .               fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {
    665 ( 0.00%)          match self.kind(id) {
    532 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).has_self,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn get_associated_item_def_ids(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [DefId] {
  2,009 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    861 ( 0.00%)              tcx.arena.alloc_from_iter(
    287 ( 0.00%)                  children.decode((self, tcx.sess)).map(|child_index| self.local_def_id(child_index)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
      .               }
      .           
 13,284 ( 0.00%)      fn get_associated_item(self, id: DefIndex, sess: &Session) -> ty::AssocItem {
  7,749 ( 0.00%)          let def_key = self.def_key(id);
      .                   let parent = self.local_def_id(def_key.parent.unwrap());
      .                   let ident = self.item_ident(id, sess);
      .           
  7,937 ( 0.00%)          let (kind, container, has_self) = match self.kind(id) {
     28 ( 0.00%)              EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),
  1,020 ( 0.00%)              EntryKind::AssocFn(data) => {
      .                           let data = data.decode(self);
  7,140 ( 0.00%)                  (ty::AssocKind::Fn, data.container, data.has_self)
      .                       }
    160 ( 0.00%)              EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),
      .                       _ => bug!("cannot get associated-item of `{:?}`", def_key),
      .                   };
      .           
 19,926 ( 0.00%)          ty::AssocItem {
      .                       name: ident.name,
      .                       kind,
      .                       vis: self.get_visibility(id),
      .                       defaultness: container.defaultness(),
      .                       def_id: self.local_def_id(id),
      .                       trait_item_def_id: self.get_trait_item_def_id(id),
      .                       container: container.with_def_id(parent),
      .                       fn_has_self_parameter: has_self,
      .                   }
  9,963 ( 0.00%)      }
      .           
      .               fn get_item_variances(self, id: DefIndex) -> impl Iterator<Item = ty::Variance> + 'a {
    255 ( 0.00%)          self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self)
      .               }
      .           
      .               fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {
  2,415 ( 0.00%)          match self.kind(node_id) {
      .                       EntryKind::Struct(data, _) | EntryKind::Variant(data) => {
  1,046 ( 0.00%)                  let vdata = data.decode(self);
    500 ( 0.00%)                  vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))
      .                       }
      .                       _ => None,
      .                   }
  1,132 ( 0.00%)      }
      .           
  1,884 ( 0.00%)      fn get_item_attrs(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = ast::Attribute> + 'a {
  2,433 ( 0.00%)          self.root
      .                       .tables
      .                       .attributes
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           // Structure and variant constructors don't have any attributes encoded for them,
      .                           // but we assume that someone passing a constructor ID actually wants to look at
      .                           // the attributes on the corresponding struct or variant.
      .                           let def_key = self.def_key(id);
-- line 1320 ----------------------------------------
-- line 1322 ----------------------------------------
      .                           let parent_id = def_key.parent.expect("no parent for a constructor");
      .                           self.root
      .                               .tables
      .                               .attributes
      .                               .get(self, parent_id)
      .                               .expect("no encoded attributes for a structure or variant")
      .                       })
      .                       .decode((self, sess))
  1,413 ( 0.00%)      }
      .           
      .               fn get_struct_field_names(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = Spanned<Symbol>> + 'a {
  1,100 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
  3,400 ( 0.00%)              .map(move |index| respan(self.get_span(index, sess), self.item_ident(index, sess).name))
      .               }
      .           
      .               fn get_struct_field_visibilities(self, id: DefIndex) -> impl Iterator<Item = Visibility> + 'a {
    150 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
     46 ( 0.00%)              .map(move |field_index| self.get_visibility(field_index))
      .               }
      .           
      .               fn get_inherent_implementations_for_type(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> &'tcx [DefId] {
    108 ( 0.00%)          tcx.arena.alloc_from_iter(
    135 ( 0.00%)              self.root
      .                           .tables
      .                           .inherent_impls
      .                           .get(self, id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
  1,262 ( 0.00%)                  .map(|index| self.local_def_id(index)),
      .                   )
      .               }
      .           
      .               fn get_traits(self) -> impl Iterator<Item = DefId> + 'a {
      .                   self.root.traits.decode(self).map(move |index| self.local_def_id(index))
      .               }
      .           
      .               fn get_trait_impls(self) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + 'a {
-- line 1376 ----------------------------------------
-- line 1380 ----------------------------------------
      .                           index: *trait_index,
      .                       };
      .                       impls.decode(self).map(move |(impl_index, simplified_self_ty)| {
      .                           (trait_def_id, self.local_def_id(impl_index), simplified_self_ty)
      .                       })
      .                   })
      .               }
      .           
 13,608 ( 0.00%)      fn get_implementations_of_trait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_def_id: DefId,
      .               ) -> &'tcx [(DefId, Option<SimplifiedType>)] {
  1,512 ( 0.00%)          if self.trait_impls.is_empty() {
      .                       return &[];
      .                   }
      .           
      .                   // Do a reverse lookup beforehand to avoid touching the crate_num
      .                   // hash map in the loop below.
  1,816 ( 0.00%)          let key = match self.reverse_translate_def_id(trait_def_id) {
      .                       Some(def_id) => (def_id.krate.as_u32(), def_id.index),
      .                       None => return &[],
      .                   };
      .           
      .                   if let Some(impls) = self.trait_impls.get(&key) {
  1,004 ( 0.00%)              tcx.arena.alloc_from_iter(
    502 ( 0.00%)                  impls
      .                               .decode(self)
  8,536 ( 0.00%)                      .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
 12,096 ( 0.00%)      }
      .           
      .               fn get_trait_of_item(self, id: DefIndex) -> Option<DefId> {
    336 ( 0.00%)          let def_key = self.def_key(id);
    420 ( 0.00%)          match def_key.disambiguated_data.data {
      .                       DefPathData::TypeNs(..) | DefPathData::ValueNs(..) => (),
      .                       // Not an associated item
      .                       _ => return None,
      .                   }
    756 ( 0.00%)          def_key.parent.and_then(|parent_index| match self.kind(parent_index) {
      .                       EntryKind::Trait(_) | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn get_native_libraries(self, sess: &'a Session) -> impl Iterator<Item = NativeLib> + 'a {
     54 ( 0.00%)          self.root.native_libraries.decode((self, sess))
      .               }
      .           
      .               fn get_proc_macro_quoted_span(self, index: usize, sess: &Session) -> Span {
      .                   self.root
      .                       .tables
      .                       .proc_macro_quoted_spans
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing proc macro quoted span: {:?}", index))
-- line 1437 ----------------------------------------
-- line 1450 ----------------------------------------
      .                       self.root.dylib_dependency_formats.decode(self).enumerate().flat_map(|(i, link)| {
      .                           let cnum = CrateNum::new(i + 1);
      .                           link.map(|link| (self.cnum_map[cnum], link))
      .                       }),
      .                   )
      .               }
      .           
      .               fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {
    135 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))
      .               }
      .           
      .               fn get_fn_param_names(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {
      .                   let param_names = match self.kind(id) {
      .                       EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,
      .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,
      .                       _ => Lazy::empty(),
      .                   };
-- line 1466 ----------------------------------------
-- line 1479 ----------------------------------------
      .                       EntryKind::AnonConst(_, data)
      .                       | EntryKind::Const(_, data)
      .                       | EntryKind::AssocConst(_, _, data) => data.decode(self).0,
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {
     78 ( 0.00%)          match self.kind(id) {
     13 ( 0.00%)              EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               // This replicates some of the logic of the crate-local `is_const_fn_raw` query, because we
      .               // don't serialize constness for tuple variant and tuple struct constructors.
      .               fn is_const_fn_raw(self, id: DefIndex) -> bool {
    162 ( 0.00%)          let constness = match self.kind(id) {
     36 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).fn_data.constness,
      .                       EntryKind::Fn(data) => data.decode(self).constness,
      .                       EntryKind::ForeignFn(data) => data.decode(self).constness,
      .                       EntryKind::Variant(..) | EntryKind::Struct(..) => hir::Constness::Const,
      .                       _ => hir::Constness::NotConst,
      .                   };
      .                   constness == hir::Constness::Const
      .               }
      .           
-- line 1505 ----------------------------------------
-- line 1532 ----------------------------------------
      .               fn generator_kind(self, id: DefIndex) -> Option<hir::GeneratorKind> {
      .                   match self.kind(id) {
      .                       EntryKind::Generator(data) => Some(data),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn fn_sig(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {
    590 ( 0.00%)          self.root.tables.fn_sig.get(self, id).unwrap().decode((self, tcx))
      .               }
      .           
      .               #[inline]
 50,477 ( 0.01%)      fn def_key(self, index: DefIndex) -> DefKey {
 14,422 ( 0.00%)          *self
      .                       .def_key_cache
      .                       .lock()
      .                       .entry(index)
 22,615 ( 0.00%)              .or_insert_with(|| self.root.tables.def_keys.get(self, index).unwrap().decode(self))
 57,688 ( 0.01%)      }
      .           
      .               // Returns the path leading to the thing with this `id`.
      .               fn def_path(self, id: DefIndex) -> DefPath {
      .                   debug!("def_path(cnum={:?}, id={:?})", self.cnum, id);
      .                   DefPath::make(self.cnum, id, |parent| self.def_key(parent))
      .               }
      .           
      .               fn def_path_hash_unlocked(
      .                   self,
      .                   index: DefIndex,
      .                   def_path_hashes: &mut FxHashMap<DefIndex, DefPathHash>,
      .               ) -> DefPathHash {
  6,426 ( 0.00%)          *def_path_hashes.entry(index).or_insert_with(|| {
    885 ( 0.00%)              self.root.tables.def_path_hashes.get(self, index).unwrap().decode(self)
      .                   })
      .               }
      .           
      .               #[inline]
 22,491 ( 0.00%)      fn def_path_hash(self, index: DefIndex) -> DefPathHash {
      .                   let mut def_path_hashes = self.def_path_hash_cache.lock();
      .                   self.def_path_hash_unlocked(index, &mut def_path_hashes)
 25,704 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn def_path_hash_to_def_index(self, hash: DefPathHash) -> DefIndex {
      .                   self.def_path_hash_map.def_path_hash_to_def_index(&hash)
      .               }
      .           
      .               fn expn_hash_to_expn_id(self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {
      .                   debug_assert_eq!(ExpnId::from_hash(hash), None);
-- line 1580 ----------------------------------------
-- line 1635 ----------------------------------------
      .               /// Proc macro crates don't currently export spans, so this function does not have
      .               /// to work for them.
      .               fn imported_source_files(self, sess: &Session) -> &'a [ImportedSourceFile] {
      .                   // Translate the virtual `/rustc/$hash` prefix back to a real directory
      .                   // that should hold actual sources, where possible.
      .                   //
      .                   // NOTE: if you update this, you might need to also update bootstrap's code for generating
      .                   // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.
 38,164 ( 0.01%)          let virtual_rust_source_base_dir = option_env!("CFG_VIRTUAL_RUST_SOURCE_BASE_DIR")
      .                       .map(Path::new)
      .                       .filter(|_| {
      .                           // Only spend time on further checks if we have what to translate *to*.
      .                           sess.opts.real_rust_source_base_dir.is_some()
      .                       })
      .                       .filter(|virtual_dir| {
      .                           // Don't translate away `/rustc/$hash` if we're still remapping to it,
      .                           // since that means we're still building `std`/`rustc` that need it,
      .                           // and we don't want the real path to leak into codegen/debuginfo.
      .                           !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)
      .                       });
 38,164 ( 0.01%)          let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {
      .                       debug!(
      .                           "try_to_translate_virtual_to_real(name={:?}): \
      .                            virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}",
      .                           name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,
      .                       );
      .           
  2,745 ( 0.00%)              if let Some(virtual_dir) = virtual_rust_source_base_dir {
      .                           if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                               if let rustc_span::FileName::Real(old_name) = name {
      .                                   if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } =
      .                                       old_name
      .                                   {
      .                                       if let Ok(rest) = virtual_name.strip_prefix(virtual_dir) {
      .                                           let virtual_name = virtual_name.clone();
      .           
-- line 1670 ----------------------------------------
-- line 1709 ----------------------------------------
      .                                           *old_name = new_name;
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   };
      .           
 37,931 ( 0.01%)          self.cdata.source_map_import_info.get_or_init(|| {
     45 ( 0.00%)              let external_source_map = self.root.source_map.decode(self);
      .           
      .                       external_source_map
      .                           .map(|source_file_to_import| {
      .                               // We can't reuse an existing SourceFile, so allocate a new one
      .                               // containing the information we need.
      .                               let rustc_span::SourceFile {
 11,529 ( 0.00%)                          mut name,
  3,294 ( 0.00%)                          src_hash,
    549 ( 0.00%)                          start_pos,
  1,098 ( 0.00%)                          end_pos,
  2,745 ( 0.00%)                          mut lines,
  2,745 ( 0.00%)                          mut multibyte_chars,
  3,294 ( 0.00%)                          mut non_narrow_chars,
  2,745 ( 0.00%)                          mut normalized_pos,
  3,294 ( 0.00%)                          name_hash,
      .                                   ..
      .                               } = source_file_to_import;
      .           
      .                               // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped
      .                               // during rust bootstrapping by `remap-debuginfo = true`, and the user
      .                               // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,
      .                               // then we change `name` to a similar state as if the rust was bootstrapped
      .                               // with `remap-debuginfo = true`.
      .                               // This is useful for testing so that tests about the effects of
      .                               // `try_to_translate_virtual_to_real` don't have to worry about how the
      .                               // compiler is bootstrapped.
  1,098 ( 0.00%)                      if let Some(virtual_dir) =
      .                                   &sess.opts.debugging_opts.simulate_remapped_rust_src_base
      .                               {
      .                                   if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                                       if let rustc_span::FileName::Real(ref mut old_name) = name {
      .                                           if let rustc_span::RealFileName::LocalPath(local) = old_name {
      .                                               if let Ok(rest) = local.strip_prefix(real_dir) {
      .                                                   *old_name = rustc_span::RealFileName::Remapped {
      .                                                       local_path: None,
-- line 1753 ----------------------------------------
-- line 1767 ----------------------------------------
      .                               let source_length = (end_pos - start_pos).to_usize();
      .           
      .                               // Translate line-start positions and multibyte character
      .                               // position into frame of reference local to file.
      .                               // `SourceMap::new_imported_source_file()` will then translate those
      .                               // coordinates to their new global frame of reference when the
      .                               // offset of the SourceFile is known.
      .                               for pos in &mut lines {
729,284 ( 0.10%)                          *pos = *pos - start_pos;
      .                               }
      .                               for mbc in &mut multibyte_chars {
  1,656 ( 0.00%)                          mbc.pos = mbc.pos - start_pos;
      .                               }
      .                               for swc in &mut non_narrow_chars {
    924 ( 0.00%)                          *swc = *swc - start_pos;
      .                               }
      .                               for np in &mut normalized_pos {
      .                                   np.pos = np.pos - start_pos;
      .                               }
      .           
  9,882 ( 0.00%)                      let local_version = sess.source_map().new_imported_source_file(
  7,137 ( 0.00%)                          name,
  3,843 ( 0.00%)                          src_hash,
      .                                   name_hash,
      .                                   source_length,
  1,098 ( 0.00%)                          self.cnum,
  2,745 ( 0.00%)                          lines,
  3,294 ( 0.00%)                          multibyte_chars,
  2,745 ( 0.00%)                          non_narrow_chars,
  2,196 ( 0.00%)                          normalized_pos,
      .                                   start_pos,
      .                                   end_pos,
      .                               );
      .                               debug!(
      .                                   "CrateMetaData::imported_source_files alloc \
      .                                    source_file {:?} original (start_pos {:?} end_pos {:?}) \
      .                                    translated (start_pos {:?} end_pos {:?})",
      .                                   local_version.name,
-- line 1804 ----------------------------------------
-- line 1808 ----------------------------------------
      .                                   local_version.end_pos
      .                               );
      .           
      .                               ImportedSourceFile {
      .                                   original_start_pos: start_pos,
      .                                   original_end_pos: end_pos,
      .                                   translated_source_file: local_version,
      .                               }
  1,647 ( 0.00%)                  })
      .                           .collect()
      .                   })
      .               }
      .           }
      .           
      .           impl CrateMetadata {
    324 ( 0.00%)      crate fn new(
      .                   sess: &Session,
      .                   blob: MetadataBlob,
      .                   root: CrateRoot<'static>,
      .                   raw_proc_macros: Option<&'static [ProcMacro]>,
      .                   cnum: CrateNum,
      .                   cnum_map: CrateNumMap,
      .                   dep_kind: CrateDepKind,
      .                   source: CrateSource,
      .                   private_dep: bool,
      .                   host_hash: Option<Svh>,
      .               ) -> CrateMetadata {
     81 ( 0.00%)          let trait_impls = root
      .                       .impls
      .                       .decode((&blob, sess))
      .                       .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))
      .                       .collect();
      .                   let alloc_decoding_state =
     81 ( 0.00%)              AllocDecodingState::new(root.interpret_alloc_index.decode(&blob).collect());
      .                   let dependencies = Lock::new(cnum_map.iter().cloned().collect());
      .           
      .                   // Pre-decode the DefPathHash->DefIndex table. This is a cheap operation
      .                   // that does not copy any data. It just does some data verification.
     27 ( 0.00%)          let def_path_hash_map = root.def_path_hash_map.decode(&blob);
      .           
    621 ( 0.00%)          CrateMetadata {
     27 ( 0.00%)              blob,
     81 ( 0.00%)              root,
    108 ( 0.00%)              trait_impls,
      .                       raw_proc_macros,
      .                       source_map_import_info: OnceCell::new(),
    108 ( 0.00%)              def_path_hash_map,
      .                       expn_hash_map: Default::default(),
    189 ( 0.00%)              alloc_decoding_state,
      .                       cnum,
    108 ( 0.00%)              cnum_map,
    135 ( 0.00%)              dependencies,
      .                       dep_kind: Lock::new(dep_kind),
    324 ( 0.00%)              source,
      .                       private_dep,
      .                       host_hash,
      .                       extern_crate: Lock::new(None),
      .                       hygiene_context: Default::default(),
      .                       def_key_cache: Default::default(),
      .                       def_path_hash_cache: Default::default(),
      .                   }
    243 ( 0.00%)      }
      .           
      .               crate fn dependencies(&self) -> LockGuard<'_, Vec<CrateNum>> {
      .                   self.dependencies.borrow()
      .               }
      .           
      .               crate fn add_dependency(&self, cnum: CrateNum) {
      .                   self.dependencies.borrow_mut().push(cnum);
      .               }
      .           
      .               crate fn update_extern_crate(&self, new_extern_crate: ExternCrate) -> bool {
      .                   let mut extern_crate = self.extern_crate.borrow_mut();
      .                   let update = Some(new_extern_crate.rank()) > extern_crate.as_ref().map(ExternCrate::rank);
      .                   if update {
    145 ( 0.00%)              *extern_crate = Some(new_extern_crate);
      .                   }
      .                   update
      .               }
      .           
      .               crate fn source(&self) -> &CrateSource {
  1,568 ( 0.00%)          &self.source
      .               }
      .           
      .               crate fn dep_kind(&self) -> CrateDepKind {
      .                   *self.dep_kind.lock()
      .               }
      .           
      .               crate fn update_dep_kind(&self, f: impl FnOnce(CrateDepKind) -> CrateDepKind) {
    565 ( 0.00%)          self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))
      .               }
      .           
      .               crate fn panic_strategy(&self) -> PanicStrategy {
      .                   self.root.panic_strategy
      .               }
      .           
      .               crate fn needs_panic_runtime(&self) -> bool {
      .                   self.root.needs_panic_runtime
-- line 1905 ----------------------------------------
-- line 1909 ----------------------------------------
      .                   self.root.panic_runtime
      .               }
      .           
      .               crate fn is_profiler_runtime(&self) -> bool {
      .                   self.root.profiler_runtime
      .               }
      .           
      .               crate fn needs_allocator(&self) -> bool {
      5 ( 0.00%)          self.root.needs_allocator
      .               }
      .           
      .               crate fn has_global_allocator(&self) -> bool {
      .                   self.root.has_global_allocator
      .               }
      .           
      .               crate fn has_default_lib_allocator(&self) -> bool {
      .                   self.root.has_default_lib_allocator
      .               }
      .           
      .               crate fn is_proc_macro_crate(&self) -> bool {
      .                   self.root.is_proc_macro_crate()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
  8,495 ( 0.00%)          self.root.name
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
      .                   self.root.stable_crate_id
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
      .                   self.root.hash
      .               }
      .           
      .               fn num_def_ids(&self) -> usize {
      .                   self.root.tables.def_keys.size()
      .               }
      .           
      .               fn local_def_id(&self, index: DefIndex) -> DefId {
 17,755 ( 0.00%)          DefId { krate: self.cnum, index }
      .               }
      .           
      .               // Translate a DefId from the current compilation environment to a DefId
      .               // for an external crate.
      .               fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> {
      .                   for (local, &global) in self.cnum_map.iter_enumerated() {
  6,255 ( 0.00%)              if global == did.krate {
      .                           return Some(DefId { krate: local, index: did.index });
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           }
      .           
      .           // Cannot be implemented on 'ProcMacro', as libproc_macro
      .           // does not depend on librustc_ast
      .           fn macro_kind(raw: &ProcMacro) -> MacroKind {
      3 ( 0.00%)      match raw {
      .                   ProcMacro::CustomDerive { .. } => MacroKind::Derive,
      .                   ProcMacro::Attr { .. } => MacroKind::Attr,
      .                   ProcMacro::Bang { .. } => MacroKind::Bang,
      .               }
      .           }

442,248 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/remove.rs
--------------------------------------------------------------------------------
Ir               

      .           use super::map::MIN_LEN;
      .           use super::node::{marker, ForceResult::*, Handle, LeftOrRight::*, NodeRef};
      .           
      .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::KV> {
      .               /// Removes a key-value pair from the tree, and returns that pair, as well as
      .               /// the leaf edge corresponding to that former pair. It's possible this empties
      .               /// a root node that is internal, which the caller should pop from the map
      .               /// holding the tree. The caller should also decrement the map's length.
203,112 ( 0.03%)      pub fn remove_kv_tracking<F: FnOnce()>(
      .                   self,
      .                   handle_emptied_internal_root: F,
      .               ) -> ((K, V), Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>) {
155,428 ( 0.02%)          match self.force() {
271,677 ( 0.04%)              Leaf(node) => node.remove_leaf_kv(handle_emptied_internal_root),
      .                       Internal(node) => node.remove_internal_kv(handle_emptied_internal_root),
      .                   }
241,969 ( 0.03%)      }
      .           }
      .           
      .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::KV> {
271,999 ( 0.04%)      fn remove_leaf_kv<F: FnOnce()>(
      .                   self,
      .                   handle_emptied_internal_root: F,
      .               ) -> ((K, V), Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>) {
219,443 ( 0.03%)          let (old_kv, mut pos) = self.remove();
      .                   let len = pos.reborrow().into_node().len();
 77,714 ( 0.01%)          if len < MIN_LEN {
      .                       let idx = pos.idx();
      .                       // We have to temporarily forget the child type, because there is no
      .                       // distinct node type for the immediate parents of a leaf.
      .                       let new_pos = match pos.into_node().forget_type().choose_parent_kv() {
      .                           Ok(Left(left_parent_kv)) => {
      .                               debug_assert!(left_parent_kv.right_child_len() == MIN_LEN - 1);
  2,551 ( 0.00%)                      if left_parent_kv.can_merge() {
 35,010 ( 0.00%)                          left_parent_kv.merge_tracking_child_edge(Right(idx))
      .                               } else {
      .                                   debug_assert!(left_parent_kv.left_child_len() > MIN_LEN);
    310 ( 0.00%)                          left_parent_kv.steal_left(idx)
      .                               }
      .                           }
      .                           Ok(Right(right_parent_kv)) => {
      .                               debug_assert!(right_parent_kv.left_child_len() == MIN_LEN - 1);
     76 ( 0.00%)                      if right_parent_kv.can_merge() {
    551 ( 0.00%)                          right_parent_kv.merge_tracking_child_edge(Left(idx))
      .                               } else {
      .                                   debug_assert!(right_parent_kv.right_child_len() > MIN_LEN);
    264 ( 0.00%)                          right_parent_kv.steal_right(idx)
      .                               }
      .                           }
      .                           Err(pos) => unsafe { Handle::new_edge(pos, idx) },
      .                       };
      .                       // SAFETY: `new_pos` is the leaf we started from or a sibling.
 68,443 ( 0.01%)              pos = unsafe { new_pos.cast_to_leaf_unchecked() };
      .           
      .                       // Only if we merged, the parent (if any) has shrunk, but skipping
      .                       // the following step otherwise does not pay off in benchmarks.
      .                       //
      .                       // SAFETY: We won't destroy or rearrange the leaf where `pos` is at
      .                       // by handling its parent recursively; at worst we will destroy or
      .                       // rearrange the parent through the grandparent, thus change the
      .                       // link to the parent inside the leaf.
      .                       if let Ok(parent) = unsafe { pos.reborrow_mut() }.into_node().ascend() {
  2,559 ( 0.00%)                  if !parent.into_node().forget_type().fix_node_and_affected_ancestors() {
      .                               handle_emptied_internal_root();
      .                           }
      .                       }
      .                   }
339,536 ( 0.05%)          (old_kv, pos)
310,856 ( 0.04%)      }
      .           }
      .           
      .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::KV> {
      .               fn remove_internal_kv<F: FnOnce()>(
      .                   self,
      .                   handle_emptied_internal_root: F,
      .               ) -> ((K, V), Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>) {
      .                   // Remove an adjacent KV from its leaf and then put it back in place of
      .                   // the element we were asked to remove. Prefer the left adjacent KV,
      .                   // for the reasons listed in `choose_parent_kv`.
      .                   let left_leaf_kv = self.left_edge().descend().last_leaf_edge().left_kv();
      .                   let left_leaf_kv = unsafe { left_leaf_kv.ok().unwrap_unchecked() };
    677 ( 0.00%)          let (left_kv, left_hole) = left_leaf_kv.remove_leaf_kv(handle_emptied_internal_root);
      .           
      .                   // The internal node may have been stolen from or merged. Go back right
      .                   // to find where the original KV ended up.
      .                   let mut internal = unsafe { left_hole.next_kv().ok().unwrap_unchecked() };
     32 ( 0.00%)          let old_kv = internal.replace_kv(left_kv.0, left_kv.1);
      .                   let pos = internal.next_leaf_edge();
    408 ( 0.00%)          (old_kv, pos)
      .               }
      .           }

200,459 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/remove.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/../sysdeps/x86_64/tls_get_addr.S
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
282,528,017 (37.54%)  events annotated

