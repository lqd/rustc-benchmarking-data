--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name git2_curl --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 -C metadata=4f3f3b357cb4e697 -C extra-filename=-4f3f3b357cb4e697 --out-dir /usr/home/liquid/tmp/.tmpkrZyhc/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpkrZyhc/target/debug/deps --extern curl=/usr/home/liquid/tmp/.tmpkrZyhc/target/debug/deps/libcurl-488fe5b53990e502.rmeta --extern git2=/usr/home/liquid/tmp/.tmpkrZyhc/target/debug/deps/libgit2-32747cabad6ea206.rmeta --extern log=/usr/home/liquid/tmp/.tmpkrZyhc/target/debug/deps/liblog-7d12981a7e5e29bf.rmeta --extern url=/usr/home/liquid/tmp/.tmpkrZyhc/target/debug/deps/liburl-6504b36c224af005.rmeta -L native=/usr/home/liquid/tmp/.tmpkrZyhc/target/debug/build/curl-sys-1c426d12769caefa/out/build -L native=/usr/home/liquid/.linuxbrew/Cellar/zlib/1.2.11/lib -L native=/usr/home/liquid/.linuxbrew/Cellar/openssl@1.1/1.1.1m/lib -L native=/usr/home/liquid/tmp/.tmpkrZyhc/target/debug/build/libgit2-sys-c18c7c65bc69e1b4/out/build -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-git2-curl-0.14.1-Check-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
231,784,026 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
10,305,124 ( 4.45%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 6,997,064 ( 3.02%)  ./malloc/malloc.c:_int_malloc
 6,221,321 ( 2.68%)  ./malloc/malloc.c:_int_free
 4,835,679 ( 2.09%)  ./elf/dl-lookup.c:do_lookup_x
 4,189,240 ( 1.81%)  ./malloc/malloc.c:malloc
 4,141,271 ( 1.79%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 4,070,620 ( 1.76%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 3,166,054 ( 1.37%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,845,615 ( 1.23%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,656,533 ( 1.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,139,033 ( 0.92%)  ./elf/do-rel.h:_dl_relocate_object
 1,780,176 ( 0.77%)  ./malloc/malloc.c:free
 1,362,217 ( 0.59%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
 1,345,302 ( 0.58%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 1,280,201 ( 0.55%)  ./malloc/malloc.c:malloc_consolidate
 1,238,340 ( 0.53%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
 1,233,536 ( 0.53%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,229,858 ( 0.53%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,124,550 ( 0.49%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   915,973 ( 0.40%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   903,957 ( 0.39%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   864,856 ( 0.37%)  ./elf/dl-lookup.c:check_match
   820,979 ( 0.35%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   773,676 ( 0.33%)  ./malloc/malloc.c:unlink_chunk.constprop.0
   759,597 ( 0.33%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   750,462 ( 0.32%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   698,370 ( 0.30%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   681,759 ( 0.29%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_middle::hir::map::Map>::attrs
   646,352 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
   635,944 ( 0.27%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   625,316 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
   585,252 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
   573,015 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   548,558 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
   529,040 ( 0.23%)  ./string/../sysdeps/x86_64/strcmp.S:strcmp
   521,640 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
   495,606 ( 0.21%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
   487,254 ( 0.21%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_span::def_id::DefId, rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>>::{closure#0}>
   467,894 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   466,128 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
   459,974 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
   459,321 ( 0.20%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
   457,415 ( 0.20%)  ./malloc/malloc.c:realloc
   455,245 ( 0.20%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(&str, rustc_span::symbol::Symbol)>>::insert::<hashbrown::map::make_hasher<&str, &str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   449,303 ( 0.19%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
   446,307 ( 0.19%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
   436,006 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
   429,087 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   416,986 ( 0.18%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   406,255 ( 0.18%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, ())>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   405,967 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   405,967 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   405,967 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   405,559 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
   402,950 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs:<rustc_span::symbol::Symbol>::intern
   399,038 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   385,063 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, ())>>::insert_entry::<hashbrown::map::make_hasher<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   379,144 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   371,515 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<rustc_span::symbol::Symbol>::intern
   367,706 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(&str, rustc_span::symbol::Symbol)>>::reserve_rehash::<hashbrown::map::make_hasher<&str, &str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   366,058 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   355,470 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs:<indexmap::map::core::Entry<rustc_middle::ty::fast_reject::SimplifiedTypeGen<rustc_span::def_id::DefId>, alloc::vec::Vec<rustc_span::def_id::DefId>>>::or_default
   350,694 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs:<rustc_infer::infer::type_variable::TypeVariableTable>::probe
   349,966 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   339,744 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   329,030 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs:<rustc_borrowck::MirBorrowckCtxt>::access_place
   323,291 ( 0.14%)  ./malloc/malloc.c:_int_realloc
   322,645 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   319,812 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::on_all_children_bits::is_terminal_path
   310,516 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u64
   305,158 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs:<indexmap::map::core::Entry<rustc_middle::ty::fast_reject::SimplifiedTypeGen<rustc_span::def_id::DefId>, alloc::vec::Vec<rustc_span::def_id::DefId>>>::or_default
   298,335 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::HashMap<&str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
   296,474 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, rustc_infer::infer::region_constraints::Constraint, rustc_infer::infer::SubregionOrigin, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<rustc_infer::infer::region_constraints::Constraint>
   291,032 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_u32
   289,522 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::PredicateKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   287,575 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
   285,471 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
   279,144 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core/raw.rs:<indexmap::map::core::IndexMapCore<rustc_middle::ty::fast_reject::SimplifiedTypeGen<rustc_span::def_id::DefId>, alloc::vec::Vec<rustc_span::def_id::DefId>>>::entry
   275,107 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, ())>>::insert_entry::<hashbrown::map::make_hasher<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   272,052 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
   269,274 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
   269,080 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTableInner<alloc::alloc::Global>>::prepare_insert_slot
   267,224 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   264,432 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   258,416 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs:<rustc_data_structures::graph::scc::SccsConstruction<rustc_borrowck::constraints::graph::RegionGraph<rustc_borrowck::constraints::graph::Normal>, rustc_borrowck::constraints::ConstraintSccIndex>>::start_walk_from
   257,958 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs:<hashbrown::map::HashMap<rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
   257,087 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
   255,871 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs:stacker::remaining_stack
   254,627 ( 0.11%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
   252,658 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/flags.rs:<rustc_middle::ty::flags::FlagComputation>::for_kind
   249,728 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs:<hashbrown::raw::inner::RawTable<usize>>::reserve_rehash::<indexmap::map::core::get_hash<rustc_middle::ty::fast_reject::SimplifiedTypeGen<rustc_span::def_id::DefId>, alloc::vec::Vec<rustc_span::def_id::DefId>>::{closure#0}>
   247,212 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   242,757 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::cmp::PartialEq>::eq
   235,678 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::sty::RegionKind>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::RegionKind, rustc_middle::ty::context::Interned<rustc_middle::ty::sty::RegionKind>>::{closure#0}>
   233,522 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs:<rustc_privacy::DefIdVisitorSkeleton<rustc_privacy::TypePrivacyVisitor> as rustc_middle::ty::fold::TypeVisitor>::visit_ty

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .                   #[inline]
        .                   pub fn $fn_name(
        .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
        .                       mut value: $int_ty,
        .                   ) -> &[u8] {
        .                       let mut i = 0;
        .           
        .                       loop {
   10,092 ( 0.00%)                  if value < 0x80 {
        .                               unsafe {
    4,651 ( 0.00%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
        .                               }
        .           
    6,318 ( 0.00%)                      i += 1;
        .                               break;
        .                           } else {
        .                               unsafe {
    5,004 ( 0.00%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
        .                               }
        .           
    1,746 ( 0.00%)                      value >>= 7;
        .                               i += 1;
        .                           }
        .                       }
        .           
        .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
        .                   }
        .               };
        .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
        .           macro_rules! impl_read_unsigned_leb128 {
        .               ($fn_name:ident, $int_ty:ty) => {
        .                   #[inline]
        .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
        .                       // The first iteration of this loop is unpeeled. This is a
        .                       // performance win because this code is hot and integer values less
        .                       // than 128 are very common, typically occurring 50-80% or more of
        .                       // the time, even for u64 and u128.
1,189,084 ( 0.51%)              let byte = slice[*position];
  594,542 ( 0.26%)              *position += 1;
  594,542 ( 0.26%)              if (byte & 0x80) == 0 {
        8 ( 0.00%)                  return byte as $int_ty;
        .                       }
    1,282 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
        .                       let mut shift = 7;
        .                       loop {
  425,058 ( 0.18%)                  let byte = slice[*position];
  275,571 ( 0.12%)                  *position += 1;
  283,372 ( 0.12%)                  if (byte & 0x80) == 0 {
  232,757 ( 0.10%)                      result |= (byte as $int_ty) << shift;
        .                               return result;
        .                           } else {
        .                               result |= ((byte & 0x7F) as $int_ty) << shift;
        .                           }
        .                           shift += 7;
        .                       }
        .                   }
        .               };
-- line 80 ----------------------------------------

  441,657 ( 0.19%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs
--------------------------------------------------------------------------------
Ir               

-- line 33 ----------------------------------------
      .           
      .           impl<'tcx> ForestObligation for PendingPredicateObligation<'tcx> {
      .               /// Note that we include both the `ParamEnv` and the `Predicate`,
      .               /// as the `ParamEnv` can influence whether fulfillment succeeds
      .               /// or fails.
      .               type CacheKey = ty::ParamEnvAnd<'tcx, ty::Predicate<'tcx>>;
      .           
      .               fn as_cache_key(&self) -> Self::CacheKey {
 18,999 ( 0.01%)          self.obligation.param_env.and(self.obligation.predicate)
      .               }
      .           }
      .           
      .           /// The fulfillment context is used to drive trait resolution. It
      .           /// consists of a list of obligations that must be (eventually)
      .           /// satisfied. The job is to track which are satisfied, which yielded
      .           /// errors, and which are still pending. At any point, users can call
      .           /// `select_where_possible`, and the fulfillment context will try to do
-- line 49 ----------------------------------------
-- line 79 ----------------------------------------
      .               // outside of any snapshot, so any use of it inside a snapshot
      .               // will lead to trouble and therefore is checked against, but
      .               // other fulfillment contexts sometimes do live inside of
      .               // a snapshot (they don't *straddle* a snapshot, so there
      .               // is no trouble there).
      .               usable_in_snapshot: bool,
      .           }
      .           
     20 ( 0.00%)  #[derive(Clone, Debug)]
      .           pub struct PendingPredicateObligation<'tcx> {
      .               pub obligation: PredicateObligation<'tcx>,
      .               // This is far more often read than modified, meaning that we
      .               // should mostly optimize for reading speed, while modifying is not as relevant.
      .               //
      .               // For whatever reason using a boxed slice is slower than using a `Vec` here.
      .               pub stalled_on: Vec<TyOrConstInferVar<'tcx>>,
      .           }
      .           
      .           // `PendingPredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           static_assert_size!(PendingPredicateObligation<'_>, 72);
      .           
      .           impl<'a, 'tcx> FulfillmentContext<'tcx> {
      .               /// Creates a new fulfillment context.
    147 ( 0.00%)      pub fn new() -> FulfillmentContext<'tcx> {
  1,891 ( 0.00%)          FulfillmentContext {
    542 ( 0.00%)              predicates: ObligationForest::new(),
      .                       relationships: FxHashMap::default(),
      .                       register_region_obligations: true,
      .                       usable_in_snapshot: false,
      .                   }
    147 ( 0.00%)      }
      .           
      .               pub fn new_in_snapshot() -> FulfillmentContext<'tcx> {
     87 ( 0.00%)          FulfillmentContext {
     29 ( 0.00%)              predicates: ObligationForest::new(),
      .                       relationships: FxHashMap::default(),
      .                       register_region_obligations: true,
      .                       usable_in_snapshot: true,
      .                   }
      .               }
      .           
      .               pub fn new_ignoring_regions() -> FulfillmentContext<'tcx> {
  1,388 ( 0.00%)          FulfillmentContext {
    347 ( 0.00%)              predicates: ObligationForest::new(),
      .                       relationships: FxHashMap::default(),
      .                       register_region_obligations: false,
      .                       usable_in_snapshot: false,
      .                   }
      .               }
      .           
      .               /// Attempts to select obligations using `selcx`.
      .               fn select(&mut self, selcx: &mut SelectionContext<'a, 'tcx>) -> Vec<FulfillmentError<'tcx>> {
  4,342 ( 0.00%)          let span = debug_span!("select", obligation_forest_size = ?self.predicates.len());
      .                   let _enter = span.enter();
      .           
      .                   let mut errors = Vec::new();
      .           
      .                   loop {
      .                       debug!("select: starting another iteration");
      .           
      .                       // Process pending obligations.
      .                       let outcome: Outcome<_, _> =
 19,362 ( 0.01%)                  self.predicates.process_obligations(&mut FulfillProcessor {
      .                               selcx,
  2,766 ( 0.00%)                      register_region_obligations: self.register_region_obligations,
      .                           });
      .                       debug!("select: outcome={:#?}", outcome);
      .           
      .                       // FIXME: if we kept the original cache key, we could mark projection
      .                       // obligations as complete for the projection cache here.
      .           
      .                       errors.extend(outcome.errors.into_iter().map(to_fulfillment_error));
      .           
      .                       // If nothing new was added, no need to keep looping.
  5,532 ( 0.00%)              if outcome.stalled {
      .                           break;
      .                       }
      .                   }
      .           
      .                   debug!(
      .                       "select({} predicates remaining, {} errors) done",
      .                       self.predicates.len(),
      .                       errors.len()
-- line 162 ----------------------------------------
-- line 169 ----------------------------------------
      .           impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {
      .               /// "Normalize" a projection type `<SomeType as SomeTrait>::X` by
      .               /// creating a fresh type variable `$0` as well as a projection
      .               /// predicate `<SomeType as SomeTrait>::X == $0`. When the
      .               /// inference engine runs, it will attempt to find an impl of
      .               /// `SomeTrait` or a where-clause that lets us unify `$0` with
      .               /// something concrete. If this fails, we'll unify `$0` with
      .               /// `projection_ty` again.
    638 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self, infcx, param_env, cause))]
      .               fn normalize_projection_type(
      .                   &mut self,
      .                   infcx: &InferCtxt<'_, 'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   projection_ty: ty::ProjectionTy<'tcx>,
      .                   cause: ObligationCause<'tcx>,
      .               ) -> Ty<'tcx> {
      .                   debug_assert!(!projection_ty.has_escaping_bound_vars());
      .           
      .                   // FIXME(#20304) -- cache
      .           
      .                   let mut selcx = SelectionContext::new(infcx);
      .                   let mut obligations = vec![];
    261 ( 0.00%)          let normalized_ty = project::normalize_projection_type(
      .                       &mut selcx,
      .                       param_env,
      .                       projection_ty,
    145 ( 0.00%)              cause,
      .                       0,
      .                       &mut obligations,
      .                   );
      .                   self.register_predicate_obligations(infcx, obligations);
      .           
      .                   debug!(?normalized_ty);
      .           
      .                   normalized_ty
      .               }
      .           
 11,508 ( 0.00%)      fn register_predicate_obligation(
      .                   &mut self,
      .                   infcx: &InferCtxt<'_, 'tcx>,
      .                   obligation: PredicateObligation<'tcx>,
      .               ) {
      .                   // this helps to reduce duplicate errors, as well as making
      .                   // debug output much nicer to read and so on.
  5,754 ( 0.00%)          let obligation = infcx.resolve_vars_if_possible(obligation);
      .           
      .                   debug!(?obligation, "register_predicate_obligation");
      .           
 11,508 ( 0.00%)          assert!(!infcx.is_in_snapshot() || self.usable_in_snapshot);
      .           
  5,754 ( 0.00%)          super::relationships::update(self, infcx, &obligation);
      .           
      .                   self.predicates
      .                       .register_obligation(PendingPredicateObligation { obligation, stalled_on: vec![] });
  9,590 ( 0.00%)      }
      .           
  7,416 ( 0.00%)      fn select_all_or_error(&mut self, infcx: &InferCtxt<'_, 'tcx>) -> Vec<FulfillmentError<'tcx>> {
      .                   {
    927 ( 0.00%)              let errors = self.select_where_possible(infcx);
    927 ( 0.00%)              if !errors.is_empty() {
      5 ( 0.00%)                  return errors;
      .                       }
      .                   }
      .           
  4,630 ( 0.00%)          self.predicates.to_errors(CodeAmbiguity).into_iter().map(to_fulfillment_error).collect()
  6,489 ( 0.00%)      }
      .           
 21,710 ( 0.01%)      fn select_where_possible(
      .                   &mut self,
      .                   infcx: &InferCtxt<'_, 'tcx>,
      .               ) -> Vec<FulfillmentError<'tcx>> {
      .                   let mut selcx = SelectionContext::new(infcx);
      .                   self.select(&mut selcx)
 19,539 ( 0.01%)      }
      .           
     45 ( 0.00%)      fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {
      .                   self.predicates.map_pending_obligations(|o| o.obligation.clone())
     60 ( 0.00%)      }
      .           
      .               fn relationships(&mut self) -> &mut FxHashMap<ty::TyVid, ty::FoundRelationships> {
      3 ( 0.00%)          &mut self.relationships
      3 ( 0.00%)      }
      .           }
      .           
      .           struct FulfillProcessor<'a, 'b, 'tcx> {
      .               selcx: &'a mut SelectionContext<'b, 'tcx>,
      .               register_region_obligations: bool,
      .           }
      .           
      .           fn mk_pending(os: Vec<PredicateObligation<'_>>) -> Vec<PendingPredicateObligation<'_>> {
-- line 258 ----------------------------------------
-- line 275 ----------------------------------------
      .               #[inline(always)]
      .               fn process_obligation(
      .                   &mut self,
      .                   pending_obligation: &mut Self::Obligation,
      .               ) -> ProcessResult<Self::Obligation, Self::Error> {
      .                   // If we were stalled on some unresolved variables, first check whether
      .                   // any of them have been resolved; if not, don't bother doing more work
      .                   // yet.
195,216 ( 0.08%)          let change = match pending_obligation.stalled_on.len() {
      .                       // Match arms are in order of frequency, which matters because this
      .                       // code is so hot. 1 and 0 dominate; 2+ is fairly rare.
      .                       1 => {
 92,535 ( 0.04%)                  let infer_var = pending_obligation.stalled_on[0];
 30,845 ( 0.01%)                  self.selcx.infcx().ty_or_const_infer_var_changed(infer_var)
      .                       }
      .                       0 => {
      .                           // In this case we haven't changed, but wish to make a change.
      .                           true
      .                       }
      .                       _ => {
      .                           // This `for` loop was once a call to `all()`, but this lower-level
      .                           // form was a perf win. See #64545 for details.
  1,599 ( 0.00%)                  (|| {
  3,135 ( 0.00%)                      for &infer_var in &pending_obligation.stalled_on {
      .                                   if self.selcx.infcx().ty_or_const_infer_var_changed(infer_var) {
      .                                       return true;
      .                                   }
      .                               }
      .                               false
      .                           })()
      .                       }
      .                   };
-- line 306 ----------------------------------------
-- line 309 ----------------------------------------
      .                       debug!(
      .                           "process_predicate: pending obligation {:?} still stalled on {:?}",
      .                           self.selcx.infcx().resolve_vars_if_possible(pending_obligation.obligation.clone()),
      .                           pending_obligation.stalled_on
      .                       );
      .                       return ProcessResult::Unchanged;
      .                   }
      .           
  8,643 ( 0.00%)          self.progress_changed_obligations(pending_obligation)
      .               }
      .           
     42 ( 0.00%)      fn process_backedge<'c, I>(
      .                   &mut self,
      .                   cycle: I,
      .                   _marker: PhantomData<&'c PendingPredicateObligation<'tcx>>,
      .               ) where
      .                   I: Clone + Iterator<Item = &'c PendingPredicateObligation<'tcx>>,
      .               {
      6 ( 0.00%)          if self.selcx.coinductive_match(cycle.clone().map(|s| s.obligation.predicate)) {
      .                       debug!("process_child_obligations: coinductive match");
      .                   } else {
      .                       let cycle: Vec<_> = cycle.map(|c| c.obligation.clone()).collect();
      .                       self.selcx.infcx().report_overflow_error_cycle(&cycle);
      .                   }
     48 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {
      .               // The code calling this method is extremely hot and only rarely
      .               // actually uses this, so move this part of the code
      .               // out of that loop.
      .               #[inline(never)]
 28,810 ( 0.01%)      fn progress_changed_obligations(
      .                   &mut self,
      .                   pending_obligation: &mut PendingPredicateObligation<'tcx>,
      .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
      .                   pending_obligation.stalled_on.truncate(0);
      .           
      .                   let obligation = &mut pending_obligation.obligation;
      .           
  8,643 ( 0.00%)          if obligation.predicate.has_infer_types_or_consts() {
  1,400 ( 0.00%)              obligation.predicate =
  4,200 ( 0.00%)                  self.selcx.infcx().resolve_vars_if_possible(obligation.predicate);
      .                   }
      .           
      .                   debug!(?obligation, ?obligation.cause, "process_obligation");
      .           
      .                   let infcx = self.selcx.infcx();
      .           
  2,962 ( 0.00%)          let binder = obligation.predicate.kind();
 20,167 ( 0.01%)          match binder.no_bound_vars() {
    264 ( 0.00%)              None => match binder.skip_binder() {
      .                           // Evaluation will discard candidates using the leak check.
      .                           // This means we need to pass it the bound version of our
      .                           // predicate.
      .                           ty::PredicateKind::Trait(trait_ref) => {
      .                               let trait_obligation = obligation.with(binder.rebind(trait_ref));
      .           
     48 ( 0.00%)                      self.process_trait_obligation(
      .                                   obligation,
    144 ( 0.00%)                          trait_obligation,
      .                                   &mut pending_obligation.stalled_on,
      .                               )
      .                           }
      .                           ty::PredicateKind::Projection(data) => {
      .                               let project_obligation = obligation.with(binder.rebind(data));
      .           
     48 ( 0.00%)                      self.process_projection_obligation(
      .                                   obligation,
    144 ( 0.00%)                          project_obligation,
      .                                   &mut pending_obligation.stalled_on,
      .                               )
      .                           }
      .                           ty::PredicateKind::RegionOutlives(_)
      .                           | ty::PredicateKind::TypeOutlives(_)
      .                           | ty::PredicateKind::WellFormed(_)
      .                           | ty::PredicateKind::ObjectSafe(_)
      .                           | ty::PredicateKind::ClosureKind(..)
-- line 386 ----------------------------------------
-- line 397 ----------------------------------------
      .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
      .                               bug!("TypeWellFormedFromEnv is only used for Chalk")
      .                           }
      .                       },
      .                       Some(pred) => match pred {
      .                           ty::PredicateKind::Trait(data) => {
      .                               let trait_obligation = obligation.with(Binder::dummy(data));
      .           
  6,660 ( 0.00%)                      self.process_trait_obligation(
      .                                   obligation,
 29,304 ( 0.01%)                          trait_obligation,
      .                                   &mut pending_obligation.stalled_on,
      .                               )
      .                           }
      .           
      .                           ty::PredicateKind::RegionOutlives(data) => {
    498 ( 0.00%)                      match infcx.region_outlives_predicate(&obligation.cause, Binder::dummy(data)) {
    332 ( 0.00%)                          Ok(()) => ProcessResult::Changed(vec![]),
      .                                   Err(_) => ProcessResult::Error(CodeSelectionError(Unimplemented)),
      .                               }
      .                           }
      .           
      .                           ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(t_a, r_b)) => {
    748 ( 0.00%)                      if self.register_region_obligations {
  1,870 ( 0.00%)                          self.selcx.infcx().register_region_obligation_with_cause(
      .                                       t_a,
      .                                       r_b,
      .                                       &obligation.cause,
      .                                   );
      .                               }
      .                               ProcessResult::Changed(vec![])
      .                           }
      .           
      .                           ty::PredicateKind::Projection(ref data) => {
      .                               let project_obligation = obligation.with(Binder::dummy(*data));
      .           
    720 ( 0.00%)                      self.process_projection_obligation(
      .                                   obligation,
  2,160 ( 0.00%)                          project_obligation,
      .                                   &mut pending_obligation.stalled_on,
      .                               )
      .                           }
      .           
      .                           ty::PredicateKind::ObjectSafe(trait_def_id) => {
     20 ( 0.00%)                      if !self.selcx.tcx().is_object_safe(trait_def_id) {
      .                                   ProcessResult::Error(CodeSelectionError(Unimplemented))
      .                               } else {
      .                                   ProcessResult::Changed(vec![])
      .                               }
      .                           }
      .           
      .                           ty::PredicateKind::ClosureKind(_, closure_substs, kind) => {
     60 ( 0.00%)                      match self.selcx.infcx().closure_kind(closure_substs) {
      .                                   Some(closure_kind) => {
    120 ( 0.00%)                              if closure_kind.extends(kind) {
      .                                           ProcessResult::Changed(vec![])
      .                                       } else {
      .                                           ProcessResult::Error(CodeSelectionError(Unimplemented))
      .                                       }
      .                                   }
      .                                   None => ProcessResult::Unchanged,
      .                               }
      .                           }
      .           
      .                           ty::PredicateKind::WellFormed(arg) => {
  5,936 ( 0.00%)                      match wf::obligations(
      .                                   self.selcx.infcx(),
  1,696 ( 0.00%)                          obligation.param_env,
  1,696 ( 0.00%)                          obligation.cause.body_id,
  2,544 ( 0.00%)                          obligation.recursion_depth + 1,
      .                                   arg,
      .                                   obligation.cause.span,
      .                               ) {
      .                                   None => {
    688 ( 0.00%)                              pending_obligation.stalled_on =
  1,204 ( 0.00%)                                  vec![TyOrConstInferVar::maybe_from_generic_arg(arg).unwrap()];
    344 ( 0.00%)                              ProcessResult::Unchanged
      .                                   }
  2,028 ( 0.00%)                          Some(os) => ProcessResult::Changed(mk_pending(os)),
      .                               }
      .                           }
      .           
      .                           ty::PredicateKind::Subtype(subtype) => {
    408 ( 0.00%)                      match self.selcx.infcx().subtype_predicate(
      .                                   &obligation.cause,
      .                                   obligation.param_env,
      .                                   Binder::dummy(subtype),
      .                               ) {
      .                                   None => {
      .                                       // None means that both are unresolved.
    245 ( 0.00%)                              pending_obligation.stalled_on = vec![
     49 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(subtype.a).unwrap(),
     98 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(subtype.b).unwrap(),
      .                                       ];
      .                                       ProcessResult::Unchanged
      .                                   }
      .                                   Some(Ok(ok)) => ProcessResult::Changed(mk_pending(ok.obligations)),
      .                                   Some(Err(err)) => {
      .                                       let expected_found =
      .                                           ExpectedFound::new(subtype.a_is_expected, subtype.a, subtype.b);
      .                                       ProcessResult::Error(FulfillmentErrorCode::CodeSubtypeError(
-- line 497 ----------------------------------------
-- line 639 ----------------------------------------
      .                                   }
      .                               }
      .                           }
      .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
      .                               bug!("TypeWellFormedFromEnv is only used for Chalk")
      .                           }
      .                       },
      .                   }
 25,929 ( 0.01%)      }
      .           
 25,536 ( 0.01%)      #[instrument(level = "debug", skip(self, obligation, stalled_on))]
      .               fn process_trait_obligation(
      .                   &mut self,
      .                   obligation: &PredicateObligation<'tcx>,
      .                   trait_obligation: TraitObligation<'tcx>,
      .                   stalled_on: &mut Vec<TyOrConstInferVar<'tcx>>,
      .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
  1,344 ( 0.00%)          let infcx = self.selcx.infcx();
  4,032 ( 0.00%)          if obligation.predicate.is_global() {
      .                       // no type variables present, can use evaluation for better caching.
      .                       // FIXME: consider caching errors too.
  1,300 ( 0.00%)              if infcx.predicate_must_hold_considering_regions(obligation) {
      .                           debug!(
      .                               "selecting trait at depth {} evaluated to holds",
      .                               obligation.recursion_depth
      .                           );
  1,280 ( 0.00%)                  return ProcessResult::Changed(vec![]);
      .                       }
      .                   }
      .           
  4,924 ( 0.00%)          match self.selcx.select(&trait_obligation) {
      .                       Ok(Some(impl_source)) => {
      .                           debug!("selecting trait at depth {} yielded Ok(Some)", obligation.recursion_depth);
  6,930 ( 0.00%)                  ProcessResult::Changed(mk_pending(impl_source.nested_obligations()))
      .                       }
      .                       Ok(None) => {
      .                           debug!("selecting trait at depth {} yielded Ok(None)", obligation.recursion_depth);
      .           
      .                           // This is a bit subtle: for the most part, the
      .                           // only reason we can fail to make progress on
      .                           // trait selection is because we don't have enough
      .                           // information about the types in the trait.
      .                           stalled_on.clear();
      .                           stalled_on.extend(substs_infer_vars(
      .                               self.selcx,
    317 ( 0.00%)                      trait_obligation.predicate.map_bound(|pred| pred.trait_ref.substs),
      .                           ));
      .           
      .                           debug!(
      .                               "process_predicate: pending obligation {:?} now stalled on {:?}",
      .                               infcx.resolve_vars_if_possible(obligation.clone()),
      .                               stalled_on
      .                           );
      .           
    317 ( 0.00%)                  ProcessResult::Unchanged
      .                       }
      .                       Err(selection_err) => {
      .                           debug!("selecting trait at depth {} yielded Err", obligation.recursion_depth);
      .           
     28 ( 0.00%)                  ProcessResult::Error(CodeSelectionError(selection_err))
      .                       }
      .                   }
      .               }
      .           
  1,716 ( 0.00%)      fn process_projection_obligation(
      .                   &mut self,
      .                   obligation: &PredicateObligation<'tcx>,
      .                   project_obligation: PolyProjectionObligation<'tcx>,
      .                   stalled_on: &mut Vec<TyOrConstInferVar<'tcx>>,
      .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
    156 ( 0.00%)          let tcx = self.selcx.tcx();
      .           
    468 ( 0.00%)          if obligation.predicate.is_global() {
      .                       // no type variables present, can use evaluation for better caching.
      .                       // FIXME: consider caching errors too.
      8 ( 0.00%)              if self.selcx.infcx().predicate_must_hold_considering_regions(obligation) {
     12 ( 0.00%)                  if let Some(key) = ProjectionCacheKey::from_poly_projection_predicate(
      .                               &mut self.selcx,
     14 ( 0.00%)                      project_obligation.predicate,
      .                           ) {
      .                               // If `predicate_must_hold_considering_regions` succeeds, then we've
      .                               // evaluated all sub-obligations. We can therefore mark the 'root'
      .                               // obligation as complete, and skip evaluating sub-obligations.
     12 ( 0.00%)                      self.selcx
      .                                   .infcx()
      .                                   .inner
      .                                   .borrow_mut()
      .                                   .projection_cache()
      .                                   .complete(key, EvaluationResult::EvaluatedToOk);
      .                           }
      4 ( 0.00%)                  return ProcessResult::Changed(vec![]);
      .                       } else {
      .                           tracing::debug!("Does NOT hold: {:?}", obligation);
      .                       }
      .                   }
      .           
  1,078 ( 0.00%)          match project::poly_project_and_unify_type(self.selcx, &project_obligation) {
      .                       Ok(Ok(Some(os))) => ProcessResult::Changed(mk_pending(os)),
      .                       Ok(Ok(None)) => {
      .                           stalled_on.clear();
      .                           stalled_on.extend(substs_infer_vars(
      .                               self.selcx,
     75 ( 0.00%)                      project_obligation.predicate.map_bound(|pred| pred.projection_ty.substs),
      .                           ));
     75 ( 0.00%)                  ProcessResult::Unchanged
      .                       }
      .                       // Let the caller handle the recursion
      .                       Ok(Err(project::InProgress)) => ProcessResult::Changed(mk_pending(vec![
      .                           project_obligation.with(project_obligation.predicate.to_predicate(tcx)),
      .                       ])),
      .                       Err(e) => ProcessResult::Error(CodeProjectionError(e)),
      .                   }
  1,248 ( 0.00%)      }
      .           }
      .           
      .           /// Returns the set of inference variables contained in `substs`.
      .           fn substs_infer_vars<'a, 'tcx>(
      .               selcx: &mut SelectionContext<'a, 'tcx>,
      .               substs: ty::Binder<'tcx, SubstsRef<'tcx>>,
      .           ) -> impl Iterator<Item = TyOrConstInferVar<'tcx>> {
      .               selcx
      .                   .infcx()
      .                   .resolve_vars_if_possible(substs)
      .                   .skip_binder() // ok because this check doesn't care about regions
      .                   .iter()
      .                   .filter(|arg| arg.has_infer_types_or_consts())
      .                   .flat_map(|arg| {
  2,170 ( 0.00%)              let mut walker = arg.walk();
  3,906 ( 0.00%)              while let Some(c) = walker.next() {
    434 ( 0.00%)                  if !c.has_infer_types_or_consts() {
      .                               walker.visited.remove(&c);
      .                               walker.skip_current_subtree();
      .                           }
      .                       }
      .                       walker.visited.into_iter()
      .                   })
      .                   .filter_map(TyOrConstInferVar::maybe_from_generic_arg)
      .           }
      .           
      .           fn to_fulfillment_error<'tcx>(
      .               error: Error<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>>,
      .           ) -> FulfillmentError<'tcx> {
      .               let mut iter = error.backtrace.into_iter();
      2 ( 0.00%)      let obligation = iter.next().unwrap().obligation;
      .               // The root obligation is the last item in the backtrace - if there's only
      .               // one item, then it's the same as the main obligation
      .               let root_obligation = iter.next_back().map_or_else(|| obligation.clone(), |e| e.obligation);
     60 ( 0.00%)      FulfillmentError::new(obligation, error.error, root_obligation)
      .           }

158,634 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 23 ----------------------------------------
      .           use std::collections::BTreeMap;
      .           use std::ops::Range;
      .           use std::{cmp, fmt, mem};
      .           
      .           mod leak_check;
      .           
      .           pub use rustc_middle::infer::MemberConstraint;
      .           
 13,827 ( 0.01%)  #[derive(Default)]
      .           pub struct RegionConstraintStorage<'tcx> {
      .               /// For each `RegionVid`, the corresponding `RegionVariableOrigin`.
      .               var_infos: IndexVec<RegionVid, RegionVariableInfo>,
      .           
      .               data: RegionConstraintData<'tcx>,
      .           
      .               /// For a given pair of regions (R1, R2), maps to a region R3 that
      .               /// is designated as their LUB (edges R1 <= R3 and R2 <= R3
-- line 39 ----------------------------------------
-- line 64 ----------------------------------------
      .               storage: &'a mut RegionConstraintStorage<'tcx>,
      .               undo_log: &'a mut InferCtxtUndoLogs<'tcx>,
      .           }
      .           
      .           impl<'tcx> std::ops::Deref for RegionConstraintCollector<'_, 'tcx> {
      .               type Target = RegionConstraintStorage<'tcx>;
      .               #[inline]
      .               fn deref(&self) -> &RegionConstraintStorage<'tcx> {
    503 ( 0.00%)          self.storage
      .               }
      .           }
      .           
      .           impl<'tcx> std::ops::DerefMut for RegionConstraintCollector<'_, 'tcx> {
      .               #[inline]
      .               fn deref_mut(&mut self) -> &mut RegionConstraintStorage<'tcx> {
  3,627 ( 0.00%)          self.storage
      .               }
      .           }
      .           
      .           pub type VarInfos = IndexVec<RegionVid, RegionVariableInfo>;
      .           
      .           /// The full set of region constraints gathered up by the collector.
      .           /// Describes constraints between the region variables and other
      .           /// regions, as well as other conditions that must be verified, or
      .           /// assumptions that can be made.
  6,600 ( 0.00%)  #[derive(Debug, Default, Clone)]
      .           pub struct RegionConstraintData<'tcx> {
      .               /// Constraints of the form `A <= B`, where either `A` or `B` can
      .               /// be a region variable (or neither, as it happens).
      .               pub constraints: BTreeMap<Constraint<'tcx>, SubregionOrigin<'tcx>>,
      .           
      .               /// Constraints of the form `R0 member of [R1, ..., Rn]`, meaning that
      .               /// `R0` must be equal to one of the regions `R1..Rn`. These occur
      .               /// with `impl Trait` quite frequently.
-- line 97 ----------------------------------------
-- line 122 ----------------------------------------
      .               /// This hashmap is used to avoid that naive scenario. Basically
      .               /// we record the fact that `'a <= 'b` is implied by the fn
      .               /// signature, and then ignore the constraint when solving
      .               /// equations. This is a bit of a hack but seems to work.
      .               pub givens: FxHashSet<(Region<'tcx>, ty::RegionVid)>,
      .           }
      .           
      .           /// Represents a constraint that influences the inference process.
227,113 ( 0.10%)  #[derive(Clone, Copy, PartialEq, Eq, Debug, PartialOrd, Ord)]
      .           pub enum Constraint<'tcx> {
      .               /// A region variable is a subregion of another.
 51,692 ( 0.02%)      VarSubVar(RegionVid, RegionVid),
      .           
      .               /// A concrete region is a subregion of region variable.
  9,805 ( 0.00%)      RegSubVar(Region<'tcx>, RegionVid),
      .           
      .               /// A region variable is a subregion of a concrete region. This does not
      .               /// directly affect inference, but instead is checked after
      .               /// inference is complete.
  4,770 ( 0.00%)      VarSubReg(RegionVid, Region<'tcx>),
      .           
      .               /// A constraint where neither side is a variable. This does not
      .               /// directly affect inference, but instead is checked after
      .               /// inference is complete.
    525 ( 0.00%)      RegSubReg(Region<'tcx>, Region<'tcx>),
      .           }
      .           
      .           impl Constraint<'_> {
      .               pub fn involves_placeholders(&self) -> bool {
    550 ( 0.00%)          match self {
      .                       Constraint::VarSubVar(_, _) => false,
      .                       Constraint::VarSubReg(_, r) | Constraint::RegSubVar(r, _) => r.is_placeholder(),
      .                       Constraint::RegSubReg(r, s) => r.is_placeholder() || s.is_placeholder(),
      .                   }
      .               }
      .           }
      .           
      .           #[derive(Debug, Clone)]
-- line 159 ----------------------------------------
-- line 263 ----------------------------------------
      .               /// In other words, if we meet *all* bounds in `B`, that suffices.
      .               /// This is used when *some* bound in `B` is known to suffice, but
      .               /// we don't know which.
      .               AllBounds(Vec<VerifyBound<'tcx>>),
      .           }
      .           
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
      .           pub(crate) struct TwoRegions<'tcx> {
      4 ( 0.00%)      a: Region<'tcx>,
      8 ( 0.00%)      b: Region<'tcx>,
      .           }
      .           
      .           #[derive(Copy, Clone, PartialEq)]
      .           pub(crate) enum UndoLog<'tcx> {
      .               /// We added `RegionVid`.
      .               AddVar(RegionVid),
      .           
      .               /// We added the given `constraint`.
-- line 280 ----------------------------------------
-- line 304 ----------------------------------------
      .               pub universe: ty::UniverseIndex,
      .           }
      .           
      .           pub struct RegionSnapshot {
      .               any_unifications: bool,
      .           }
      .           
      .           impl<'tcx> RegionConstraintStorage<'tcx> {
  2,514 ( 0.00%)      pub fn new() -> Self {
      .                   Self::default()
  2,514 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub(crate) fn with_log<'a>(
      .                   &'a mut self,
      .                   undo_log: &'a mut InferCtxtUndoLogs<'tcx>,
      .               ) -> RegionConstraintCollector<'a, 'tcx> {
      .                   RegionConstraintCollector { storage: self, undo_log }
      .               }
      .           
      .               fn rollback_undo_entry(&mut self, undo_entry: UndoLog<'tcx>) {
  7,155 ( 0.00%)          match undo_entry {
      .                       AddVar(vid) => {
      .                           self.var_infos.pop().unwrap();
  2,192 ( 0.00%)                  assert_eq!(self.var_infos.len(), vid.index() as usize);
      .                       }
    883 ( 0.00%)              AddConstraint(ref constraint) => {
  3,532 ( 0.00%)                  self.data.constraints.remove(constraint);
      .                       }
      .                       AddVerify(index) => {
      .                           self.data.verifys.pop();
      .                           assert_eq!(self.data.verifys.len(), index);
      .                       }
      .                       AddGiven(sub, sup) => {
      .                           self.data.givens.remove(&(sub, sup));
      .                       }
-- line 339 ----------------------------------------
-- line 348 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> RegionConstraintCollector<'_, 'tcx> {
      .               pub fn num_region_vars(&self) -> usize {
      .                   self.var_infos.len()
      .               }
      .           
      .               pub fn region_constraint_data(&self) -> &RegionConstraintData<'tcx> {
    317 ( 0.00%)          &self.data
    317 ( 0.00%)      }
      .           
      .               /// Once all the constraints have been gathered, extract out the final data.
      .               ///
      .               /// Not legal during a snapshot.
      .               pub fn into_infos_and_data(self) -> (VarInfos, RegionConstraintData<'tcx>) {
    393 ( 0.00%)          assert!(!UndoLogs::<super::UndoLog<'_>>::in_snapshot(&self.undo_log));
      .                   (mem::take(&mut self.storage.var_infos), mem::take(&mut self.storage.data))
      .               }
      .           
      .               /// Takes (and clears) the current set of constraints. Note that
      .               /// the set of variables remains intact, but all relationships
      .               /// between them are reset. This is used during NLL checking to
      .               /// grab the set of constraints that arose from a particular
      .               /// operation.
-- line 371 ----------------------------------------
-- line 418 ----------------------------------------
      .           
      .               pub fn start_snapshot(&mut self) -> RegionSnapshot {
      .                   debug!("RegionConstraintCollector: start_snapshot");
      .                   RegionSnapshot { any_unifications: self.any_unifications }
      .               }
      .           
      .               pub fn rollback_to(&mut self, snapshot: RegionSnapshot) {
      .                   debug!("RegionConstraintCollector: rollback_to({:?})", snapshot);
  2,583 ( 0.00%)          self.any_unifications = snapshot.any_unifications;
      .               }
      .           
 21,762 ( 0.01%)      pub fn new_region_var(
      .                   &mut self,
      .                   universe: ty::UniverseIndex,
      .                   origin: RegionVariableOrigin,
      .               ) -> RegionVid {
  3,627 ( 0.00%)          let vid = self.var_infos.push(RegionVariableInfo { origin, universe });
      .           
 10,881 ( 0.00%)          let u_vid = self.unification_table().new_key(UnifiedRegion(None));
  3,627 ( 0.00%)          assert_eq!(vid, u_vid.vid);
      .                   self.undo_log.push(AddVar(vid));
      .                   debug!("created new region variable {:?} in {:?} with origin {:?}", vid, universe, origin);
      .                   vid
 29,016 ( 0.01%)      }
      .           
      .               /// Returns the universe for the given variable.
      .               pub fn var_universe(&self, vid: RegionVid) -> ty::UniverseIndex {
  2,040 ( 0.00%)          self.var_infos[vid].universe
      .               }
      .           
      .               /// Returns the origin for the given variable.
      .               pub fn var_origin(&self, vid: RegionVid) -> RegionVariableOrigin {
      .                   self.var_infos[vid].origin
      .               }
      .           
      .               fn add_constraint(&mut self, constraint: Constraint<'tcx>, origin: SubregionOrigin<'tcx>) {
      .                   // cannot add constraints once regions are resolved
      .                   debug!("RegionConstraintCollector: add_constraint({:?})", constraint);
      .           
      .                   // never overwrite an existing (constraint, origin) - only insert one if it isn't
      .                   // present in the map yet. This prevents origins from outside the snapshot being
      .                   // replaced with "less informative" origins e.g., during calls to `can_eq`
      .                   let undo_log = &mut self.undo_log;
 22,301 ( 0.01%)          self.storage.data.constraints.entry(constraint).or_insert_with(|| {
 12,186 ( 0.01%)              undo_log.push(AddConstraint(constraint));
  8,124 ( 0.00%)              origin
      .                   });
      .               }
      .           
      .               fn add_verify(&mut self, verify: Verify<'tcx>) {
      .                   // cannot add verifys once regions are resolved
      .                   debug!("RegionConstraintCollector: add_verify({:?})", verify);
      .           
      .                   // skip no-op cases known to be satisfied
-- line 471 ----------------------------------------
-- line 484 ----------------------------------------
      .                   // cannot add givens once regions are resolved
      .                   if self.data.givens.insert((sub, sup)) {
      .                       debug!("add_given({:?} <= {:?})", sub, sup);
      .           
      .                       self.undo_log.push(AddGiven(sub, sup));
      .                   }
      .               }
      .           
  8,380 ( 0.00%)      pub fn make_eqregion(
      .                   &mut self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   sub: Region<'tcx>,
      .                   sup: Region<'tcx>,
      .               ) {
  4,190 ( 0.00%)          if sub != sup {
      .                       // Eventually, it would be nice to add direct support for
      .                       // equating regions.
  4,720 ( 0.00%)              self.make_subregion(origin.clone(), sub, sup);
  5,310 ( 0.00%)              self.make_subregion(origin, sup, sub);
      .           
  2,950 ( 0.00%)              match (sub, sup) {
  1,329 ( 0.00%)                  (&ty::ReVar(sub), &ty::ReVar(sup)) => {
      .                               debug!("make_eqregion: unifying {:?} with {:?}", sub, sup);
  2,215 ( 0.00%)                      self.unification_table().union(sub, sup);
      .                               self.any_unifications = true;
      .                           }
      .                           (&ty::ReVar(vid), value) | (value, &ty::ReVar(vid)) => {
      .                               debug!("make_eqregion: unifying {:?} with {:?}", vid, value);
    588 ( 0.00%)                      self.unification_table().union_value(vid, UnifiedRegion(Some(value)));
      .                               self.any_unifications = true;
      .                           }
      .                           (_, _) => {}
      .                       }
      .                   }
  4,130 ( 0.00%)      }
      .           
      .               pub fn member_constraint(
      .                   &mut self,
      .                   opaque_type_def_id: DefId,
      .                   definition_span: Span,
      .                   hidden_ty: Ty<'tcx>,
      .                   member_region: ty::Region<'tcx>,
      .                   choice_regions: &Lrc<Vec<ty::Region<'tcx>>>,
-- line 526 ----------------------------------------
-- line 535 ----------------------------------------
      .                       opaque_type_def_id,
      .                       definition_span,
      .                       hidden_ty,
      .                       member_region,
      .                       choice_regions: choice_regions.clone(),
      .                   });
      .               }
      .           
 31,384 ( 0.01%)      #[instrument(skip(self, origin), level = "debug")]
      .               pub fn make_subregion(
      .                   &mut self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   sub: Region<'tcx>,
      .                   sup: Region<'tcx>,
      .               ) {
      .                   // cannot add constraints once regions are resolved
      .                   debug!("origin = {:#?}", origin);
      .           
 22,874 ( 0.01%)          match (sub, sup) {
      .                       (&ReLateBound(..), _) | (_, &ReLateBound(..)) => {
      .                           span_bug!(origin.span(), "cannot relate bound region: {:?} <= {:?}", sub, sup);
      .                       }
      .                       (_, &ReStatic) => {
      .                           // all regions are subregions of static, so we can ignore this
      .                       }
  1,569 ( 0.00%)              (&ReVar(sub_id), &ReVar(sup_id)) => {
 10,983 ( 0.00%)                  self.add_constraint(Constraint::VarSubVar(sub_id, sup_id), origin);
      .                       }
      .                       (_, &ReVar(sup_id)) => {
  1,589 ( 0.00%)                  self.add_constraint(Constraint::RegSubVar(sub, sup_id), origin);
      .                       }
    239 ( 0.00%)              (&ReVar(sub_id), _) => {
  1,673 ( 0.00%)                  self.add_constraint(Constraint::VarSubReg(sub_id, sup), origin);
      .                       }
      .                       _ => {
    742 ( 0.00%)                  self.add_constraint(Constraint::RegSubReg(sub, sup), origin);
      .                       }
      .                   }
      .               }
      .           
      .               pub fn verify_generic_bound(
      .                   &mut self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   kind: GenericKind<'tcx>,
-- line 578 ----------------------------------------
-- line 599 ----------------------------------------
      .                       _ if a == b => {
      .                           a // LUB(a,a) = a
      .                       }
      .           
      .                       _ => self.combine_vars(tcx, Lub, a, b, origin),
      .                   }
      .               }
      .           
    104 ( 0.00%)      pub fn glb_regions(
      .                   &mut self,
      .                   tcx: TyCtxt<'tcx>,
      .                   origin: SubregionOrigin<'tcx>,
      .                   a: Region<'tcx>,
      .                   b: Region<'tcx>,
      .               ) -> Region<'tcx> {
      .                   // cannot add constraints once regions are resolved
      .                   debug!("RegionConstraintCollector: glb_regions({:?}, {:?})", a, b);
     52 ( 0.00%)          match (a, b) {
      .                       (&ReStatic, r) | (r, &ReStatic) => {
      .                           r // static lives longer than everything else
      .                       }
      .           
     14 ( 0.00%)              _ if a == b => {
      .                           a // GLB(a,a) = a
      .                       }
      .           
     84 ( 0.00%)              _ => self.combine_vars(tcx, Glb, a, b, origin),
      .                   }
    104 ( 0.00%)      }
      .           
      .               /// Resolves the passed RegionVid to the root RegionVid in the unification table
      .               pub fn opportunistic_resolve_var(&mut self, rid: ty::RegionVid) -> ty::RegionVid {
  3,760 ( 0.00%)          self.unification_table().find(rid).vid
      .               }
      .           
      .               /// If the Region is a `ReVar`, then resolves it either to the root value in
      .               /// the unification table, if it exists, or to the root `ReVar` in the table.
      .               /// If the Region is not a `ReVar`, just returns the Region itself.
      .               pub fn opportunistic_resolve_region(
      .                   &mut self,
      .                   tcx: TyCtxt<'tcx>,
-- line 639 ----------------------------------------
-- line 647 ----------------------------------------
      .                               tcx.reuse_or_mk_region(region, ty::ReVar(root))
      .                           })
      .                       }
      .                       _ => region,
      .                   }
      .               }
      .           
      .               fn combine_map(&mut self, t: CombineMapType) -> &mut CombineMap<'tcx> {
     56 ( 0.00%)          match t {
      .                       Glb => &mut self.glbs,
      .                       Lub => &mut self.lubs,
      .                   }
      .               }
      .           
     84 ( 0.00%)      fn combine_vars(
      .                   &mut self,
      .                   tcx: TyCtxt<'tcx>,
      .                   t: CombineMapType,
      .                   a: Region<'tcx>,
      .                   b: Region<'tcx>,
      .                   origin: SubregionOrigin<'tcx>,
      .               ) -> Region<'tcx> {
      .                   let vars = TwoRegions { a, b };
      2 ( 0.00%)          if let Some(&c) = self.combine_map(t).get(&vars) {
     12 ( 0.00%)              return tcx.mk_region(ReVar(c));
      .                   }
      .                   let a_universe = self.universe(a);
      .                   let b_universe = self.universe(b);
      .                   let c_universe = cmp::max(a_universe, b_universe);
     25 ( 0.00%)          let c = self.new_region_var(c_universe, MiscVariable(origin.span()));
      .                   self.combine_map(t).insert(vars, c);
      5 ( 0.00%)          self.undo_log.push(AddCombination(t, vars));
     25 ( 0.00%)          let new_r = tcx.mk_region(ReVar(c));
     40 ( 0.00%)          for old_r in [a, b] {
     10 ( 0.00%)              match t {
     85 ( 0.00%)                  Glb => self.make_subregion(origin.clone(), new_r, old_r),
      .                           Lub => self.make_subregion(origin.clone(), old_r, new_r),
      .                       }
      .                   }
      .                   debug!("combine_vars() c={:?}", c);
      .                   new_r
     63 ( 0.00%)      }
      .           
      .               pub fn universe(&self, region: Region<'tcx>) -> ty::UniverseIndex {
  1,588 ( 0.00%)          match *region {
      .                       ty::ReStatic | ty::ReErased | ty::ReFree(..) | ty::ReEarlyBound(..) => {
      .                           ty::UniverseIndex::ROOT
      .                       }
      .                       ty::ReEmpty(ui) => ui,
      .                       ty::RePlaceholder(placeholder) => placeholder.universe,
    192 ( 0.00%)              ty::ReVar(vid) => self.var_universe(vid),
      .                       ty::ReLateBound(..) => bug!("universe(): encountered bound region {:?}", region),
      .                   }
      .               }
      .           
    810 ( 0.00%)      pub fn vars_since_snapshot(
      .                   &self,
      .                   value_count: usize,
      .               ) -> (Range<RegionVid>, Vec<RegionVariableOrigin>) {
      .                   let range = RegionVid::from(value_count)..RegionVid::from(self.unification_table.len());
    972 ( 0.00%)          (
      .                       range.clone(),
      .                       (range.start.index()..range.end.index())
      .                           .map(|index| self.var_infos[ty::RegionVid::from(index)].origin)
      .                           .collect(),
      .                   )
    972 ( 0.00%)      }
      .           
      .               /// See `InferCtxt::region_constraints_added_in_snapshot`.
  1,878 ( 0.00%)      pub fn region_constraints_added_in_snapshot(&self, mark: &Snapshot<'tcx>) -> Option<bool> {
    626 ( 0.00%)          self.undo_log
      .                       .region_constraints_in_snapshot(mark)
    695 ( 0.00%)              .map(|&elt| match elt {
    210 ( 0.00%)                  AddConstraint(constraint) => Some(constraint.involves_placeholders()),
      .                           _ => None,
      .                       })
      .                       .max()
      .                       .unwrap_or(None)
  2,504 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn unification_table(&mut self) -> super::UnificationTable<'_, 'tcx, RegionVidKey<'tcx>> {
 10,314 ( 0.00%)          ut::UnificationTable::with_log(&mut self.storage.unification_table, self.undo_log)
      .               }
      .           }
      .           
      .           impl fmt::Debug for RegionSnapshot {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   write!(f, "RegionSnapshot")
      .               }
      .           }
-- line 737 ----------------------------------------
-- line 796 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> RegionConstraintData<'tcx> {
      .               /// Returns `true` if this region constraint data contains no constraints, and `false`
      .               /// otherwise.
      .               pub fn is_empty(&self) -> bool {
      .                   let RegionConstraintData { constraints, member_constraints, verifys, givens } = self;
     48 ( 0.00%)          constraints.is_empty()
      .                       && member_constraints.is_empty()
      .                       && verifys.is_empty()
      .                       && givens.is_empty()
      .               }
      .           }
      .           
      .           impl<'tcx> Rollback<UndoLog<'tcx>> for RegionConstraintStorage<'tcx> {
  7,155 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
  5,724 ( 0.00%)          self.rollback_undo_entry(undo)
  7,155 ( 0.00%)      }
      .           }

 84,927 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/region_constraints/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir              

-- line 27 ----------------------------------------
     .           impl CacheEntry {
     .               #[inline]
     .               fn update(
     .                   &mut self,
     .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
     .                   pos: BytePos,
     .                   time_stamp: usize,
     .               ) {
   634 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
   457 ( 0.00%)              self.file = file;
   476 ( 0.00%)              self.file_index = file_idx;
     .                   }
     .           
   369 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
     .                   let line_bounds = self.file.line_bounds(line_index);
 1,360 ( 0.00%)          self.line_number = line_index + 1;
 2,136 ( 0.00%)          self.line = line_bounds;
     .                   self.touch(time_stamp);
     .               }
     .           
     .               #[inline]
     .               fn touch(&mut self, time_stamp: usize) {
 7,198 ( 0.00%)          self.time_stamp = time_stamp;
     .               }
     .           }
     .           
     .           #[derive(Clone)]
     .           pub struct CachingSourceMapView<'sm> {
     .               source_map: &'sm SourceMap,
     .               line_cache: [CacheEntry; 3],
     .               time_stamp: usize,
     .           }
     .           
     .           impl<'sm> CachingSourceMapView<'sm> {
   286 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
     .                   let files = source_map.files();
   143 ( 0.00%)          let first_file = files[0].clone();
     .                   let entry = CacheEntry {
     .                       time_stamp: 0,
     .                       line_number: 0,
     .                       line: BytePos(0)..BytePos(0),
     .                       file: first_file,
     .                       file_index: 0,
     .                   };
     .           
   715 ( 0.00%)          CachingSourceMapView {
     .                       source_map,
 1,001 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
     .                       time_stamp: 0,
     .                   }
   572 ( 0.00%)      }
     .           
     .               pub fn byte_pos_to_line_and_col(
     .                   &mut self,
     .                   pos: BytePos,
     .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
     .                   self.time_stamp += 1;
     .           
     .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
     .                   };
     .           
     .                   let cache_entry = &mut self.line_cache[oldest];
     .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
     .           
     .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
     .               }
     .           
27,062 ( 0.01%)      pub fn span_data_to_lines_and_cols(
     .                   &mut self,
     .                   span_data: &SpanData,
     .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
15,464 ( 0.01%)          self.time_stamp += 1;
     .           
     .                   // Check if lo and hi are in the cached lines.
 3,866 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
 3,866 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
     .           
 6,676 ( 0.00%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
     .                       // Cache hit for span lo and hi. Check if they belong to the same file.
     .                       let result = {
 6,664 ( 0.00%)                  let lo = &self.line_cache[lo_cache_idx as usize];
     .                           let hi = &self.line_cache[hi_cache_idx as usize];
     .           
19,992 ( 0.01%)                  if lo.file_index != hi.file_index {
     .                               return None;
     .                           }
     .           
     .                           (
 6,664 ( 0.00%)                      lo.file.clone(),
     .                               lo.line_number,
     .                               span_data.lo - lo.line.start,
 3,332 ( 0.00%)                      hi.line_number,
     .                               span_data.hi - hi.line.start,
     .                           )
     .                       };
     .           
 3,332 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
 3,332 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
     .           
13,328 ( 0.01%)              return Some(result);
     .                   }
     .           
     .                   // No cache hit or cache hit for only one of span lo and hi.
 1,056 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
     .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
     .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
     .                   } else {
     .                       self.oldest_cache_entry_index()
     .                   };
     .           
     .                   // If the entry doesn't point to the correct file, get the new file and index.
     .                   // Return early if the file containing beginning of span doesn't contain end of span.
 4,112 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
   825 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
   990 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
     .                           return None;
     .                       }
     .           
   660 ( 0.00%)              Some(new_file_and_idx)
     .                   } else {
     .                       let file = &self.line_cache[oldest].file;
 1,107 ( 0.00%)              if !file_contains(&file, span_data.hi) {
     .                           return None;
     .                       }
     .           
 1,107 ( 0.00%)              None
     .                   };
     .           
     .                   // Update the cache entries.
 2,670 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
     .                       // Oldest cache entry is for span_data.lo line.
     .                       (-1, -1) => {
     .                           let lo = &mut self.line_cache[oldest];
     .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
     .           
 1,434 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
     .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
     .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
     .                               let hi = &mut self.line_cache[next_oldest];
     .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
     .                               (oldest, next_oldest)
     .                           } else {
     .                               (oldest, oldest)
     .                           }
     .                       }
     .                       // Oldest cache entry is for span_data.lo line.
     .                       (-1, _) => {
     .                           let lo = &mut self.line_cache[oldest];
     .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
    12 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
    18 ( 0.00%)                  hi.touch(self.time_stamp);
     .                           (oldest, hi_cache_idx as usize)
     .                       }
     .                       // Oldest cache entry is for span_data.hi line.
     .                       (_, -1) => {
     .                           let hi = &mut self.line_cache[oldest];
    50 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
   100 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
   200 ( 0.00%)                  lo.touch(self.time_stamp);
     .                           (lo_cache_idx as usize, oldest)
     .                       }
     .                       _ => {
     .                           panic!();
     .                       }
     .                   };
     .           
     .                   let lo = &self.line_cache[lo_idx];
     .                   let hi = &self.line_cache[hi_idx];
     .           
     .                   // Span lo and hi may equal line end when last line doesn't
     .                   // end in newline, hence the inclusive upper bounds below.
 1,068 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
   534 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
 1,068 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
   534 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
 2,670 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
 1,602 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
 1,602 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
     .           
 1,602 ( 0.00%)          Some((
   534 ( 0.00%)              lo.file.clone(),
     .                       lo.line_number,
     .                       span_data.lo - lo.line.start,
   534 ( 0.00%)              hi.line_number,
     .                       span_data.hi - hi.line.start,
     .                   ))
34,794 ( 0.02%)      }
     .           
     .               fn cache_entry_index(&self, pos: BytePos) -> isize {
     .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
42,337 ( 0.02%)              if cache_entry.line.contains(&pos) {
     .                           return idx as isize;
     .                       }
     .                   }
     .           
     .                   -1
     .               }
     .           
     .               fn oldest_cache_entry_index(&self) -> usize {
     .                   let mut oldest = 0;
     .           
     .                   for idx in 1..self.line_cache.len() {
 2,868 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
     .                           oldest = idx;
     .                       }
     .                   }
     .           
     .                   oldest
     .               }
     .           
     .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
     .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
     .           
     .                   for idx in 0..self.line_cache.len() {
 1,182 ( 0.00%)              if idx != avoid_idx
   799 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
     .                       {
     .                           oldest = idx;
     .                       }
     .                   }
     .           
     .                   oldest
     .               }
     .           
   825 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
   165 ( 0.00%)          if !self.source_map.files().is_empty() {
   330 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
     .                       let file = &self.source_map.files()[file_idx];
     .           
 1,320 ( 0.00%)              if file_contains(file, pos) {
     .                           return Some((file.clone(), file_idx));
     .                       }
     .                   }
     .           
     .                   None
   825 ( 0.00%)      }
     .           }
     .           
     .           #[inline]
     .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
     .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
     .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
     .               // purposes of converting a byte position to a line and column number, we can't come up with a
     .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

51,524 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 111 ----------------------------------------
        .           const EMPTY: u8 = 0b1111_1111;
        .           
        .           /// Control byte value for a deleted bucket.
        .           const DELETED: u8 = 0b1000_0000;
        .           
        .           /// Checks whether a control byte represents a full bucket (top bit is clear).
        .           #[inline]
        .           fn is_full(ctrl: u8) -> bool {
  330,512 ( 0.14%)      ctrl & 0x80 == 0
        .           }
        .           
        .           /// Checks whether a control byte represents a special value (top bit is set).
        .           #[inline]
        .           fn is_special(ctrl: u8) -> bool {
        .               ctrl & 0x80 != 0
        .           }
        .           
        .           /// Checks whether a special control value is EMPTY (just check 1 bit).
        .           #[inline]
        .           fn special_is_empty(ctrl: u8) -> bool {
        .               debug_assert!(is_special(ctrl));
   22,522 ( 0.01%)      ctrl & 0x01 != 0
        .           }
        .           
        .           /// Primary hash function, used to select the initial bucket to probe from.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h1(hash: u64) -> usize {
        .               // On 32-bit platforms we simply ignore the higher hash bits.
        .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
        .           /// Secondary hash function, saved in the low 7 bits of the control byte.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h2(hash: u64) -> u8 {
        .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
        .               // value, some hash functions (such as FxHash) produce a usize result
        .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
        .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
3,330,453 ( 1.44%)      let top7 = hash >> (hash_len * 8 - 7);
        .               (top7 & 0x7f) as u8 // truncation
        .           }
        .           
        .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
        .           /// table size is a power of two) to visit every group of elements exactly once.
        .           ///
        .           /// A triangular probe has us jump by 1 more group every time. So first we
        .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
        .               #[inline]
        .               fn move_next(&mut self, bucket_mask: usize) {
        .                   // We should have found an empty bucket by now and ended the probe.
        .                   debug_assert!(
        .                       self.stride <= bucket_mask,
        .                       "Went past end of probe sequence"
        .                   );
        .           
   45,300 ( 0.02%)          self.stride += Group::WIDTH;
   45,300 ( 0.02%)          self.pos += self.stride;
   38,101 ( 0.02%)          self.pos &= bucket_mask;
        .               }
        .           }
        .           
        .           /// Returns the number of buckets needed to hold the given number of items,
        .           /// taking the maximum load factor into account.
        .           ///
        .           /// Returns `None` if an overflow occurs.
        .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
        .           #[cfg_attr(target_os = "emscripten", inline(never))]
        .           #[cfg_attr(not(target_os = "emscripten"), inline)]
        .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
        .               debug_assert_ne!(cap, 0);
        .           
        .               // For small tables we require at least 1 empty bucket so that lookups are
        .               // guaranteed to terminate if an element doesn't exist in the table.
   11,778 ( 0.01%)      if cap < 8 {
        .                   // We don't bother with a table size of 2 buckets since that can only
        .                   // hold a single element. Instead we skip directly to a 4 bucket table
        .                   // which can hold 3 elements.
   23,430 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
        .               }
        .           
        .               // Otherwise require 1/8 buckets to be empty (87.5% load)
        .               //
        .               // Be careful when modifying this, calculate_layout relies on the
        .               // overflow check here.
    7,218 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
        .           
        .               // Any overflows will have been caught by the checked_mul. Also, any
        .               // rounding errors from the division above will be cleaned up by
        .               // next_power_of_two (which can't overflow because of the previous division).
        .               Some(adjusted_cap.next_power_of_two())
        .           }
        .           
        .           /// Returns the maximum effective capacity for the given bucket mask, taking
        .           /// the maximum load factor into account.
        .           #[inline]
        .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   32,299 ( 0.01%)      if bucket_mask < 8 {
        .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
        .                   // Keep in mind that the bucket mask is one less than the bucket count.
        .                   bucket_mask
        .               } else {
        .                   // For larger tables we reserve 12.5% of the slots as empty.
   13,012 ( 0.01%)          ((bucket_mask + 1) / 8) * 7
        .               }
        .           }
        .           
        .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
        .           /// while keeping the rest of `calculate_layout_for` independent of `T`
        .           #[derive(Copy, Clone)]
        .           struct TableLayout {
        .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
        .           
        .               #[inline]
        .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   let TableLayout { size, ctrl_align } = self;
        .                   // Manual layout calculation since Layout methods are not yet stable.
        .                   let ctrl_offset =
   24,391 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   32,534 ( 0.01%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
        .           
        .                   Some((
        .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
        .                       ctrl_offset,
        .                   ))
        .               }
        .           }
        .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub unsafe fn drop(&self) {
        .                   self.as_ptr().drop_in_place();
        .               }
        .               #[inline]
        .               pub unsafe fn read(&self) -> T {
      144 ( 0.00%)          self.as_ptr().read()
        .               }
        .               #[inline]
        .               pub unsafe fn write(&self, val: T) {
        .                   self.as_ptr().write(val);
        .               }
        .               #[inline]
        .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
        .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
        .               /// Creates a new empty hash table without allocating any memory, using the
        .               /// given allocator.
        .               ///
        .               /// In effect this returns a table with exactly 1 bucket. However we can
        .               /// leave the data pointer dangling since that bucket is never written to
        .               /// due to our load factor forcing us to always have at least 1 free bucket.
        .               #[inline]
        .               pub fn new_in(alloc: A) -> Self {
      174 ( 0.00%)          Self {
        .                       table: RawTableInner::new_in(alloc),
        .                       marker: PhantomData,
        .                   }
        .               }
        .           
        .               /// Allocates a new hash table with the given number of buckets.
        .               ///
        .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
        .               unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   Ok(Self {
       20 ( 0.00%)              table: RawTableInner::new_uninitialized(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           buckets,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
        .               /// Attempts to allocate a new hash table with at least enough capacity
        .               /// for inserting the given number of elements without reallocating.
        .               fn fallible_with_capacity(
        .                   alloc: A,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   Ok(Self {
    1,602 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           capacity,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
        .                   debug_assert_ne!(self.table.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               /// Erases an element from the table without dropping it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    2,268 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    2,268 ( 0.00%)          let index = self.bucket_index(item);
        .                   self.table.erase(index);
    4,536 ( 0.00%)      }
        .           
        .               /// Erases an element from the table, dropping it in place.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
        .                   // Erase the element from the table first since drop might panic.
    1,336 ( 0.00%)          self.erase_no_drop(&item);
        .                   item.drop();
        .               }
        .           
        .               /// Finds and erases an element from the table, dropping it in place.
        .               /// Returns true if an element was found.
        .               #[cfg(feature = "raw")]
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    3,200 ( 0.00%)          self.erase_no_drop(&item);
        7 ( 0.00%)          item.read()
        .               }
        .           
        .               /// Finds and removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
   77,962 ( 0.03%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
       24 ( 0.00%)          match self.find(hash, eq) {
      980 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
   10,576 ( 0.00%)              None => None,
        .                   }
  111,356 ( 0.05%)      }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear_no_drop(&mut self) {
        .                   self.table.clear_no_drop();
        .               }
        .           
        .               /// Removes all elements from the table without freeing the backing memory.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear(&mut self) {
        .                   // Ensure that the table is reset even if one of the drops panic
        .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
        .                   unsafe {
        1 ( 0.00%)              self_.drop_elements();
        .                   }
        .               }
        .           
        7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
      796 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
        .                       for item in self.iter() {
        .                           item.drop();
        .                       }
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
        .                   // Calculate the minimal number of elements that we need to reserve
        .                   // space for.
        .                   let min_size = usize::max(self.table.items, min_size);
        .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Ensures that at least `additional` items can be inserted into the table
        .               /// without reallocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   53,873 ( 0.02%)          if additional > self.table.growth_left {
        .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   20,974 ( 0.01%)              if self
        .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
        .                           .is_err()
        .                       {
        .                           unsafe { hint::unreachable_unchecked() }
        .                       }
        .                   }
        .               }
        .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
        .                   } else {
        .                       Ok(())
        .                   }
        .               }
        .           
        .               /// Out-of-line slow path for `reserve` and `try_reserve`.
        .               #[cold]
        .               #[inline(never)]
   46,601 ( 0.02%)      fn reserve_rehash(
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
        .               ) -> Result<(), TryReserveError> {
        .                   unsafe {
        .                       self.table.reserve_rehash_inner(
        .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
        .                           TableLayout::new::<T>(),
        .                           if mem::needs_drop::<T>() {
        .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
        .                           } else {
        .                               None
        .                           },
        .                       )
        .                   }
   31,184 ( 0.01%)      }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
        .               /// current table into it.
        .               fn resize(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
        .                       )
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns its raw bucket.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  402,842 ( 0.17%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
        .                   unsafe {
        .                       let mut index = self.table.find_insert_slot(hash);
        .           
        .                       // We can avoid growing the table once we have reached our load
        .                       // factor if we are replacing a tombstone. This works since the
        .                       // number of EMPTY slots does not change in this case.
      537 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  298,375 ( 0.13%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
        .                           self.reserve(1, hasher);
        .                           index = self.table.find_insert_slot(hash);
        .                       }
        .           
        .                       self.table.record_item_insert_at(index, old_ctrl, hash);
        .           
        .                       let bucket = self.bucket(index);
        2 ( 0.00%)              bucket.write(value);
        .                       bucket
        .                   }
  297,287 ( 0.13%)      }
        .           
        .               /// Attempts to insert a new element without growing the table and return its raw bucket.
        .               ///
        .               /// Returns an `Err` containing the given element if inserting it would require growing the
        .               /// table.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns a mutable reference to it.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  178,520 ( 0.08%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
      190 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
  133,890 ( 0.06%)      }
        .           
        .               /// Inserts a new element into the table, without growing the table.
        .               ///
        .               /// There must be enough space in the table to insert the new element.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
      539 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   65,664 ( 0.03%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    1,248 ( 0.00%)          let bucket = self.table.bucket(index);
        .           
        .                   // If we are replacing a DELETED entry then we don't need to update
        .                   // the load counter.
  134,414 ( 0.06%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
        .           
        .                   bucket.write(value);
  107,712 ( 0.05%)          self.table.items += 1;
        .                   bucket
    1,073 ( 0.00%)      }
        .           
        .               /// Temporary removes a bucket, applying the given function to the removed
        .               /// element and optionally put back the returned value in the same bucket.
        .               ///
        .               /// Returns `true` if the bucket still contains an element
        .               ///
        .               /// This does not check if the given bucket is actually occupied.
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// Searches for an element in the table.
        .               #[inline]
      120 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
      433 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    2,024 ( 0.00%)              eq(self.bucket(index).as_ref())
      160 ( 0.00%)          });
        .           
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match result {
       67 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
        .                       None => None,
        .                   }
      120 ( 0.00%)      }
        .           
        .               /// Gets a reference to an element in the table.
        .               #[inline]
        .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    1,262 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Gets a mutable reference to an element in the table.
        .               #[inline]
        .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      137 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Attempts to get mutable references to `N` entries in the table at once.
        .               ///
        .               /// Returns an array of length `N` with the results of each query.
-- line 855 ----------------------------------------
-- line 920 ----------------------------------------
        .               #[inline]
        .               pub fn len(&self) -> usize {
        .                   self.table.items
        .               }
        .           
        .               /// Returns `true` if the table contains no elements.
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
   89,976 ( 0.04%)          self.len() == 0
        .               }
        .           
        .               /// Returns the number of buckets in the table.
        .               #[inline]
        .               pub fn buckets(&self) -> usize {
        .                   self.table.bucket_mask + 1
        .               }
        .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
        .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
        .               /// Because we cannot make the `next` method unsafe on the `RawIter`
        .               /// struct, we have to make the `iter` method unsafe.
        .               #[inline]
        .               pub unsafe fn iter(&self) -> RawIter<T> {
        .                   let data = Bucket::from_base_index(self.data_end(), 0);
        .                   RawIter {
        .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    8,595 ( 0.00%)              items: self.table.items,
        .                   }
        .               }
        .           
        .               /// Returns an iterator over occupied buckets that could match a given hash.
        .               ///
        .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
        .               /// return items that have a hash value different than the one provided. You
        .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
        .               /// Iteration starts at the provided iterator's current location.
        .               ///
        .               /// It is up to the caller to ensure that the iterator is valid for this
        .               /// `RawTable` and covers all items that remain in the table.
        .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
        .                   debug_assert_eq!(iter.len(), self.len());
        .           
        .                   let alloc = self.table.alloc.clone();
      812 ( 0.00%)          let allocation = self.into_allocation();
      609 ( 0.00%)          RawIntoIter {
    1,015 ( 0.00%)              iter,
        .                       allocation,
        .                       marker: PhantomData,
        .                       alloc,
        .                   }
        .               }
        .           
        .               /// Converts the table into a raw allocation. The contents of the table
        .               /// should be dropped using a `RawIter` before freeing the allocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
      248 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
        .                       None
        .                   } else {
        .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
        .                           Some(lco) => lco,
        .                           None => unsafe { hint::unreachable_unchecked() },
        .                       };
        .                       Some((
      133 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
        .                           layout,
        .                       ))
        .                   };
        .                   mem::forget(self);
        .                   alloc
        .               }
        .           }
        .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<A> RawTableInner<A> {
        .               #[inline]
        .               const fn new_in(alloc: A) -> Self {
   61,057 ( 0.03%)          Self {
        .                       // Be careful to cast the entire slice to a raw pointer.
        .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
        .                       bucket_mask: 0,
        .                       items: 0,
        .                       growth_left: 0,
        .                       alloc,
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Allocator + Clone> RawTableInner<A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
   39,531 ( 0.02%)      unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
        .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
        .                   // such allocations will never succeed anyways.
        .                   //
        .                   // This mirrors what Vec does in the standard library.
        .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
        .                       return Err(fallibility.capacity_overflow());
        .                   }
        .           
   10,088 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
        .                       Ok(block) => block.cast(),
        .                       Err(_) => return Err(fallibility.alloc_err(layout)),
        .                   };
        .           
        .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   23,256 ( 0.01%)          Ok(Self {
        .                       ctrl,
    9,769 ( 0.00%)              bucket_mask: buckets - 1,
        .                       items: 0,
        .                       growth_left: bucket_mask_to_capacity(buckets - 1),
        .                       alloc,
        .                   })
   28,938 ( 0.01%)      }
        .           
        .               #[inline]
    6,274 ( 0.00%)      fn fallible_with_capacity(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
    1,576 ( 0.00%)          if capacity == 0 {
      982 ( 0.00%)              Ok(Self::new_in(alloc))
        .                   } else {
        .                       unsafe {
        .                           let buckets =
        .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
        .           
   17,979 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
        .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
        .           
    3,538 ( 0.00%)                  Ok(result)
        .                       }
        .                   }
    6,274 ( 0.00%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element and sets the hash for that slot.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
   21,988 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
        .                   let index = self.find_insert_slot(hash);
   21,988 ( 0.01%)          let old_ctrl = *self.ctrl(index);
        .                   self.set_ctrl_h2(index, hash);
        .                   (index, old_ctrl)
   43,976 ( 0.02%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
        .               fn find_insert_slot(&self, hash: u64) -> usize {
        .                   let mut probe_seq = self.probe_seq(hash);
        .                   loop {
        .                       unsafe {
        .                           let group = Group::load(self.ctrl(probe_seq.pos));
  212,657 ( 0.09%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
  617,850 ( 0.27%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
        .           
        .                               // In tables smaller than the group width, trailing control
        .                               // bytes outside the range of the table are filled with
        .                               // EMPTY entries. These will unfortunately trigger a
        .                               // match, but once masked may point to a full bucket that
        .                               // is already occupied. We detect this situation here and
        .                               // perform a second scan starting at the beginning of the
        .                               // table. This second scan is guaranteed to find an empty
        .                               // slot (due to the load factor) before hitting the trailing
        .                               // control bytes (containing EMPTY).
  280,468 ( 0.12%)                      if unlikely(is_full(*self.ctrl(result))) {
        .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
        .                                   debug_assert_ne!(probe_seq.pos, 0);
        .                                   return Group::load_aligned(self.ctrl(0))
        .                                       .match_empty_or_deleted()
        .                                       .lowest_set_bit_nonzero();
        .                               }
        .           
        .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
        .           
        .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
        .               /// code generated, but it is eliminated by LLVM optimizations.
        .               #[inline]
        .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
        .                   let h2_hash = h2(hash);
        .                   let mut probe_seq = self.probe_seq(hash);
        .           
    8,692 ( 0.00%)          loop {
        .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
        .           
  385,794 ( 0.17%)              for bit in group.match_byte(h2_hash) {
  600,137 ( 0.26%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
        .           
  376,022 ( 0.16%)                  if likely(eq(index)) {
        .                               return Some(index);
        .                           }
        .                       }
        .           
  172,050 ( 0.07%)              if likely(group.match_empty().any_bit_set()) {
        .                           return None;
        .                       }
        .           
        .                       probe_seq.move_next(self.bucket_mask);
        .                   }
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               #[inline]
        .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
        .                   debug_assert_ne!(self.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   let base: *mut u8 = self.data_end().as_ptr();
  842,208 ( 0.36%)          base.sub((index + 1) * size_of)
        .               }
        .           
        .               #[inline]
        .               unsafe fn data_end<T>(&self) -> NonNull<T> {
        .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
        .               }
        .           
        .               /// Returns an iterator-like object for a probe sequence on the table.
        .               ///
        .               /// This iterator never terminates, but is guaranteed to visit each bucket
        .               /// group exactly once. The loop using `probe_seq` must terminate upon
        .               /// reaching a group containing an empty bucket.
        .               #[inline]
        .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
        .                   ProbeSeq {
2,532,795 ( 1.09%)              pos: h1(hash) & self.bucket_mask,
        .                       stride: 0,
        .                   }
        .               }
        .           
        .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
        .               /// in the table, otherwise returns error
        .               #[cfg(feature = "raw")]
        .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
        .                   } else {
        .                       self.record_item_insert_at(index, old_ctrl, hash);
        .                       Ok(index)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
  372,880 ( 0.16%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
        .                   self.set_ctrl_h2(index, hash);
  298,304 ( 0.13%)          self.items += 1;
        .               }
        .           
        .               #[inline]
        .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
        .                   let probe_seq_pos = self.probe_seq(hash).pos;
        .                   let probe_index =
        .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
        .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
        .                   // replicate the buckets at the end of the trailing group. For example
        .                   // with 2 buckets and a group size of 4, the control bytes will look
        .                   // like this:
        .                   //
        .                   //     Real    |             Replicated
        .                   // ---------------------------------------------
        .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
        .                   // ---------------------------------------------
  607,122 ( 0.26%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
        .           
  202,374 ( 0.09%)          *self.ctrl(index) = ctrl;
  202,399 ( 0.09%)          *self.ctrl(index2) = ctrl;
        .               }
        .           
        .               /// Returns a pointer to a control byte.
        .               #[inline]
        .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
        .                   debug_assert!(index < self.num_ctrl_bytes());
        .                   self.ctrl.as_ptr().add(index)
        .               }
        .           
        .               #[inline]
        .               fn buckets(&self) -> usize {
   27,319 ( 0.01%)          self.bucket_mask + 1
        .               }
        .           
        .               #[inline]
        .               fn num_ctrl_bytes(&self) -> usize {
   28,195 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
        .               }
        .           
        .               #[inline]
        .               fn is_empty_singleton(&self) -> bool {
  117,203 ( 0.05%)          self.bucket_mask == 0
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
        .               #[inline]
        .               unsafe fn prepare_resize(
        .                   &self,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
        .                   debug_assert!(self.items <= capacity);
        .           
        .                   // Allocate and initialize the new table.
    1,155 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
        .                       self.alloc.clone(),
        .                       table_layout,
        .                       capacity,
        .                       fallibility,
        .                   )?;
   12,733 ( 0.01%)          new_table.growth_left -= self.items;
        .                   new_table.items = self.items;
        .           
        .                   // The hash function may panic, in which case we simply free the new
        .                   // table without dropping any elements that may have been copied into
        .                   // it.
        .                   //
        .                   // This guard is also used to free the old table on success, see
        .                   // the comment at the bottom of this function.
        .                   Ok(guard(new_table, move |self_| {
    5,684 ( 0.00%)              if !self_.is_empty_singleton() {
        .                           self_.free_buckets(table_layout);
        .                       }
        .                   }))
        .               }
        .           
        .               /// Reserves or rehashes to make room for `additional` more elements.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .                   drop: Option<fn(*mut u8)>,
        .               ) -> Result<(), TryReserveError> {
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
   11,368 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
        .                       Some(new_items) => new_items,
        .                       None => return Err(fallibility.capacity_overflow()),
        .                   };
   11,368 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   24,329 ( 0.01%)          if new_items <= full_capacity / 2 {
        .                       // Rehash in-place without re-allocating if we have plenty of spare
        .                       // capacity that is locked up due to DELETED entries.
        .                       self.rehash_in_place(hasher, layout.size, drop);
        .                       Ok(())
        .                   } else {
        .                       // Otherwise, conservatively resize to at least the next size up
        .                       // to avoid churning deletes into frequent rehashes.
        .                       self.resize_inner(
    5,684 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
        .                           hasher,
        .                           fallibility,
        .                           layout,
        .                       )
        .                   }
        .               }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
        .               #[inline(always)]
        .               unsafe fn resize_inner(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .               ) -> Result<(), TryReserveError> {
    2,845 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
        .           
        .                   // Copy all elements to the new table.
        .                   for i in 0..self.buckets() {
  124,620 ( 0.05%)              if !is_full(*self.ctrl(i)) {
        .                           continue;
        .                       }
        .           
        .                       // This may panic.
        .                       let hash = hasher(self, i);
        .           
        .                       // We can use a simpler version of insert() here since:
        .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
        .                   }
        .           
        .                   // We successfully copied all elements without panicking. Now replace
        .                   // self with the new table. The old table will have its memory freed but
        .                   // the items will not be dropped (since they have been moved into the
        .                   // new table).
        .                   mem::swap(self, &mut new_table);
        .           
    5,684 ( 0.00%)          Ok(())
        .               }
        .           
        .               /// Rehashes the contents of the table in place (i.e. without changing the
        .               /// allocation).
        .               ///
        .               /// If `hasher` panics then some the table's contents may be lost.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
        .               #[inline]
        .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
        .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
        .                       Some(lco) => lco,
        .                       None => hint::unreachable_unchecked(),
        .                   };
        .                   self.alloc.deallocate(
    3,781 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
        .                       layout,
        .                   );
        .               }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[inline]
        .               fn clear_no_drop(&mut self) {
    1,413 ( 0.00%)          if !self.is_empty_singleton() {
        .                       unsafe {
        .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
        .                       }
        .                   }
    1,494 ( 0.00%)          self.items = 0;
    1,413 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
        .               }
        .           
        .               #[inline]
        .               unsafe fn erase(&mut self, index: usize) {
        .                   debug_assert!(is_full(*self.ctrl(index)));
   16,541 ( 0.01%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
        .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
        .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
        .           
        .                   // If we are inside a continuous block of Group::WIDTH full or deleted
        .                   // cells then a probe window may have seen a full block when trying to
        .                   // insert. We therefore need to keep that block non-empty so that
        .                   // lookups will continue searching to the next probe window.
        .                   //
        .                   // Note that in this context `leading_zeros` refers to the bytes at the
        .                   // end of a group, while `trailing_zeros` refers to the bytes at the
        .                   // beginning of a group.
   66,164 ( 0.03%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
        .                       DELETED
        .                   } else {
   80,705 ( 0.03%)              self.growth_left += 1;
        .                       EMPTY
        .                   };
        .                   self.set_ctrl(index, ctrl);
   66,164 ( 0.03%)          self.items -= 1;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
      480 ( 0.00%)      fn clone(&self) -> Self {
       63 ( 0.00%)          if self.table.is_empty_singleton() {
        .                       Self::new_in(self.table.alloc.clone())
        .                   } else {
        .                       unsafe {
        .                           let mut new_table = ManuallyDrop::new(
        .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
        .                               match Self::new_uninitialized(
        .                                   self.table.alloc.clone(),
        .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
        .                               // We need to free the memory allocated for the new table.
        .                               new_table.free_buckets();
        .                           });
        .           
        .                           // Return the newly created table.
        .                           ManuallyDrop::into_inner(new_table)
        .                       }
        .                   }
      540 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   if source.table.is_empty_singleton() {
        .                       *self = Self::new_in(self.table.alloc.clone());
        .                   } else {
        .                       unsafe {
        .                           // First, drop all our elements without clearing the control bytes.
        .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
        .                       .table
        .                       .ctrl(0)
        .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
        .                   source
        .                       .data_start()
        .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
        .           
        .                   self.table.items = source.table.items;
        8 ( 0.00%)          self.table.growth_left = source.table.growth_left;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
        .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
        .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
        .               fn default() -> Self {
        .                   Self::new_in(Default::default())
        .               }
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
   52,184 ( 0.02%)      fn drop(&mut self) {
   49,882 ( 0.02%)          if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
        .                           self.free_buckets();
        .                       }
        .                   }
   56,866 ( 0.02%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
        .               type Item = T;
        .               type IntoIter = RawIntoIter<T, A>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
      812 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
        .                   unsafe {
        .                       let iter = self.iter();
        .                       self.into_iter_from(iter)
        .                   }
    1,015 ( 0.00%)      }
        .           }
        .           
        .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
        .           /// not track an item count.
        .           pub(crate) struct RawIterRange<T> {
        .               // Mask of full buckets in the current group. Bits are cleared from this
        .               // mask as each element is processed.
        .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
        .           
        .           impl<T> Iterator for RawIterRange<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<Bucket<T>> {
        .                   unsafe {
        .                       loop {
   22,579 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    2,927 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    4,110 ( 0.00%)                      return Some(self.data.next_n(index));
        .                           }
        .           
   20,366 ( 0.01%)                  if self.next_ctrl >= self.end {
        .                               return None;
        .                           }
        .           
        .                           // We might read past self.end up to the next group boundary,
        .                           // but this is fine because it only occurs on tables smaller
        .                           // than the group size where the trailing control bytes are all
        .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
        .                           // to the group size (since tables are power-of-two sized).
      680 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
      352 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    1,474 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
        .                       }
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // We don't have an item count, so just guess based on the range size.
        .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
        .                           }
        .                       } else {
        .                           // We must have already iterated past the removed item.
        .                       }
        .                   }
        .               }
        .           
        .               unsafe fn drop_elements(&mut self) {
      493 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
        .                       for item in self {
        .                           item.drop();
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Iterator for RawIter<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    2,941 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    6,200 ( 0.00%)          if let Some(b) = self.iter.next() {
   45,232 ( 0.02%)              self.items -= 1;
        .                       Some(b)
        .                   } else {
        .                       // We don't check against items == 0 here to allow the
        .                       // compiler to optimize away the item count entirely if the
        .                       // iterator length is never queried.
        .                       debug_assert_eq!(self.items, 0);
        .                       None
        .                   }
    5,882 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.items, Some(self.items))
        .               }
        .           }
        .           
        .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
      772 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
        .           
        .                       // Free the table
    1,162 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
        .                           self.alloc.deallocate(ptr, layout);
        .                       }
        .                   }
      158 ( 0.00%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
       16 ( 0.00%)      fn next(&mut self) -> Option<T> {
        6 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
       32 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        2 ( 0.00%)          self.iter.size_hint()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
        .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
        .           
        .           /// Iterator which consumes elements without freeing the table storage.
        .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
        .           where
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
      216 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements. Note that this may panic.
        .                       self.iter.drop_elements();
        .           
        .                       // Reset the contents of the table now that all elements have been
        .                       // dropped.
        .                       self.table.clear_no_drop();
        .           
        .                       // Move the now empty table back to its original location.
       27 ( 0.00%)              self.orig_table
        .                           .as_ptr()
        .                           .copy_from_nonoverlapping(&*self.table, 1);
        .                   }
      216 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<T> {
        .                   unsafe {
-- line 2289 ----------------------------------------

1,503,774 ( 0.65%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/flags.rs
--------------------------------------------------------------------------------
Ir              

-- line 11 ----------------------------------------
     .           }
     .           
     .           impl FlagComputation {
     .               fn new() -> FlagComputation {
     .                   FlagComputation { flags: TypeFlags::empty(), outer_exclusive_binder: ty::INNERMOST }
     .               }
     .           
     .               #[allow(rustc::usage_of_ty_tykind)]
58,688 ( 0.03%)      pub fn for_kind(kind: &ty::TyKind<'_>) -> FlagComputation {
 8,384 ( 0.00%)          let mut result = FlagComputation::new();
     .                   result.add_kind(kind);
     .                   result
83,840 ( 0.04%)      }
     .           
20,650 ( 0.01%)      pub fn for_predicate<'tcx>(binder: ty::Binder<'tcx, ty::PredicateKind<'_>>) -> FlagComputation {
     .                   let mut result = FlagComputation::new();
     .                   result.add_predicate(binder);
     .                   result
28,910 ( 0.01%)      }
     .           
   290 ( 0.00%)      pub fn for_const(c: &ty::Const<'_>) -> TypeFlags {
   871 ( 0.00%)          let mut result = FlagComputation::new();
   573 ( 0.00%)          result.add_const(c);
   257 ( 0.00%)          result.flags
   290 ( 0.00%)      }
     .           
     3 ( 0.00%)      pub fn for_unevaluated_const(uv: ty::Unevaluated<'_>) -> TypeFlags {
     3 ( 0.00%)          let mut result = FlagComputation::new();
     3 ( 0.00%)          result.add_unevaluated_const(uv);
     .                   result.flags
     6 ( 0.00%)      }
     .           
     .               fn add_flags(&mut self, flags: TypeFlags) {
18,844 ( 0.01%)          self.flags = self.flags | flags;
     .               }
     .           
     .               /// indicates that `self` refers to something at binding level `binder`
     .               fn add_bound_var(&mut self, binder: ty::DebruijnIndex) {
   840 ( 0.00%)          let exclusive_binder = binder.shifted_in(1);
     .                   self.add_exclusive_binder(exclusive_binder);
     .               }
     .           
     .               /// indicates that `self` refers to something *inside* binding
     .               /// level `binder` -- not bound by `binder`, but bound by the next
     .               /// binder internal to it
     .               fn add_exclusive_binder(&mut self, exclusive_binder: ty::DebruijnIndex) {
30,217 ( 0.01%)          self.outer_exclusive_binder = self.outer_exclusive_binder.max(exclusive_binder);
     .               }
     .           
     .               /// Adds the flags/depth from a set of types that appear within the current type, but within a
     .               /// region binder.
     .               fn bound_computation<T, F>(&mut self, value: ty::Binder<'_, T>, f: F)
     .               where
     .                   F: FnOnce(&mut Self, T),
     .               {
 4,299 ( 0.00%)          let mut computation = FlagComputation::new();
     .           
 4,299 ( 0.00%)          if !value.bound_vars().is_empty() {
   144 ( 0.00%)              computation.flags = computation.flags | TypeFlags::HAS_RE_LATE_BOUND;
     .                   }
     .           
     .                   f(&mut computation, value.skip_binder());
     .           
 4,005 ( 0.00%)          self.add_flags(computation.flags);
     .           
     .                   // The types that contributed to `computation` occurred within
     .                   // a region binder, so subtract one from the region depth
     .                   // within when adding the depth to `self`.
 4,005 ( 0.00%)          let outer_exclusive_binder = computation.outer_exclusive_binder;
 4,250 ( 0.00%)          if outer_exclusive_binder > ty::INNERMOST {
   820 ( 0.00%)              self.add_exclusive_binder(outer_exclusive_binder.shifted_out(1));
     .                   } // otherwise, this binder captures nothing
     .               }
     .           
     .               #[allow(rustc::usage_of_ty_tykind)]
     .               fn add_kind(&mut self, kind: &ty::TyKind<'_>) {
41,920 ( 0.02%)          match kind {
     .                       &ty::Bool
     .                       | &ty::Char
     .                       | &ty::Int(_)
     .                       | &ty::Float(_)
     .                       | &ty::Uint(_)
     .                       | &ty::Never
     .                       | &ty::Str
     .                       | &ty::Foreign(..) => {}
-- line 95 ----------------------------------------
-- line 116 ----------------------------------------
     .                           self.add_ty(substs.yield_ty());
     .                           self.add_ty(substs.tupled_upvars_ty());
     .                       }
     .           
     .                       &ty::GeneratorWitness(ts) => {
     .                           self.bound_computation(ts, |flags, ts| flags.add_tys(ts));
     .                       }
     .           
    51 ( 0.00%)              &ty::Closure(_, substs) => {
     .                           let substs = substs.as_closure();
     .                           let should_remove_further_specializable =
     .                               !self.flags.contains(TypeFlags::STILL_FURTHER_SPECIALIZABLE);
    51 ( 0.00%)                  self.add_substs(substs.parent_substs());
     .                           if should_remove_further_specializable {
     .                               self.flags -= TypeFlags::STILL_FURTHER_SPECIALIZABLE;
     .                           }
     .           
    51 ( 0.00%)                  self.add_ty(substs.sig_as_fn_ptr_ty());
    51 ( 0.00%)                  self.add_ty(substs.kind_ty());
    51 ( 0.00%)                  self.add_ty(substs.tupled_upvars_ty());
     .                       }
     .           
     6 ( 0.00%)              &ty::Bound(debruijn, _) => {
     .                           self.add_bound_var(debruijn);
     .                       }
     .           
     .                       &ty::Placeholder(..) => {
     .                           self.add_flags(TypeFlags::HAS_TY_PLACEHOLDER);
     .                           self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);
     .                       }
     .           
     .                       &ty::Infer(infer) => {
     .                           self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);
 1,434 ( 0.00%)                  match infer {
     .                               ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_) => {
     .                                   self.add_flags(TypeFlags::HAS_TY_FRESH)
     .                               }
     .           
     .                               ty::TyVar(_) | ty::IntVar(_) | ty::FloatVar(_) => {
     .                                   self.add_flags(TypeFlags::HAS_TY_INFER)
     .                               }
     .                           }
     .                       }
     .           
     .                       &ty::Adt(_, substs) => {
     .                           self.add_substs(substs);
     .                       }
     .           
   139 ( 0.00%)              &ty::Projection(data) => {
     .                           self.add_flags(TypeFlags::HAS_TY_PROJECTION);
     .                           self.add_projection_ty(data);
     .                       }
     .           
     .                       &ty::Opaque(_, substs) => {
     .                           self.add_flags(TypeFlags::HAS_TY_OPAQUE);
     .                           self.add_substs(substs);
     .                       }
     .           
   276 ( 0.00%)              &ty::Dynamic(obj, r) => {
   338 ( 0.00%)                  for predicate in obj.iter() {
   492 ( 0.00%)                      self.bound_computation(predicate, |computation, predicate| match predicate {
   184 ( 0.00%)                          ty::ExistentialPredicate::Trait(tr) => computation.add_substs(tr.substs),
     .                                   ty::ExistentialPredicate::Projection(p) => {
     .                                       computation.add_existential_projection(&p);
     .                                   }
     .                                   ty::ExistentialPredicate::AutoTrait(_) => {}
     .                               });
     .                           }
     .           
     .                           self.add_region(r);
     .                       }
     .           
   388 ( 0.00%)              &ty::Array(tt, len) => {
   194 ( 0.00%)                  self.add_ty(tt);
   388 ( 0.00%)                  self.add_const(len);
     .                       }
     .           
     .                       &ty::Slice(tt) => self.add_ty(tt),
     .           
     .                       &ty::RawPtr(ref m) => {
     .                           self.add_ty(m.ty);
     .                       }
     .           
 6,388 ( 0.00%)              &ty::Ref(r, ty, _) => {
     .                           self.add_region(r);
 3,194 ( 0.00%)                  self.add_ty(ty);
     .                       }
     .           
     .                       &ty::Tuple(ref substs) => {
   246 ( 0.00%)                  self.add_substs(substs);
     .                       }
     .           
     .                       &ty::FnDef(_, substs) => {
     .                           self.add_substs(substs);
     .                       }
     .           
   568 ( 0.00%)              &ty::FnPtr(fn_sig) => self.bound_computation(fn_sig, |computation, fn_sig| {
     .                           computation.add_tys(fn_sig.inputs());
   284 ( 0.00%)                  computation.add_ty(fn_sig.output());
     .                       }),
     .                   }
     .               }
     .           
     .               fn add_predicate(&mut self, binder: ty::Binder<'_, ty::PredicateKind<'_>>) {
24,780 ( 0.01%)          self.bound_computation(binder, |computation, atom| computation.add_predicate_atom(atom));
     .               }
     .           
     .               fn add_predicate_atom(&mut self, atom: ty::PredicateKind<'_>) {
20,650 ( 0.01%)          match atom {
     .                       ty::PredicateKind::Trait(trait_pred) => {
 4,612 ( 0.00%)                  self.add_substs(trait_pred.trait_ref.substs);
     .                       }
     .                       ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(a, b)) => {
     .                           self.add_region(a);
     .                           self.add_region(b);
     .                       }
     .                       ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty, region)) => {
   361 ( 0.00%)                  self.add_ty(ty);
     .                           self.add_region(region);
     .                       }
     .                       ty::PredicateKind::Subtype(ty::SubtypePredicate { a_is_expected: _, a, b }) => {
     .                           self.add_ty(a);
     .                           self.add_ty(b);
     .                       }
     .                       ty::PredicateKind::Coerce(ty::CoercePredicate { a, b }) => {
     .                           self.add_ty(a);
     .                           self.add_ty(b);
     .                       }
     .                       ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, term }) => {
     .                           self.add_projection_ty(projection_ty);
   336 ( 0.00%)                  match term {
   168 ( 0.00%)                      Term::Ty(ty) => self.add_ty(ty),
     .                               Term::Const(c) => self.add_const(c),
     .                           }
     .                       }
 3,138 ( 0.00%)              ty::PredicateKind::WellFormed(arg) => {
 3,138 ( 0.00%)                  self.add_substs(slice::from_ref(&arg));
     .                       }
     .                       ty::PredicateKind::ObjectSafe(_def_id) => {}
     .                       ty::PredicateKind::ClosureKind(_def_id, substs, _kind) => {
    60 ( 0.00%)                  self.add_substs(substs);
     .                       }
     .                       ty::PredicateKind::ConstEvaluatable(uv) => {
     .                           self.add_unevaluated_const(uv);
     .                       }
     .                       ty::PredicateKind::ConstEquate(expected, found) => {
     .                           self.add_const(expected);
     .                           self.add_const(found);
     .                       }
-- line 264 ----------------------------------------
-- line 269 ----------------------------------------
     .               }
     .           
     .               fn add_ty(&mut self, ty: Ty<'_>) {
     .                   self.add_flags(ty.flags());
     .                   self.add_exclusive_binder(ty.outer_exclusive_binder);
     .               }
     .           
     .               fn add_tys(&mut self, tys: &[Ty<'_>]) {
   487 ( 0.00%)          for &ty in tys {
   487 ( 0.00%)              self.add_ty(ty);
     .                   }
     .               }
     .           
     .               fn add_region(&mut self, r: ty::Region<'_>) {
     .                   self.add_flags(r.type_flags());
 5,123 ( 0.00%)          if let ty::ReLateBound(debruijn, _) = *r {
     .                       self.add_bound_var(debruijn);
     .                   }
     .               }
     .           
 2,672 ( 0.00%)      fn add_const(&mut self, c: &ty::Const<'_>) {
 1,336 ( 0.00%)          self.add_ty(c.ty);
 3,340 ( 0.00%)          match c.val {
     8 ( 0.00%)              ty::ConstKind::Unevaluated(unevaluated) => self.add_unevaluated_const(unevaluated),
     .                       ty::ConstKind::Infer(infer) => {
     .                           self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);
     4 ( 0.00%)                  match infer {
     .                               InferConst::Fresh(_) => self.add_flags(TypeFlags::HAS_CT_FRESH),
     .                               InferConst::Var(_) => self.add_flags(TypeFlags::HAS_CT_INFER),
     .                           }
     .                       }
     .                       ty::ConstKind::Bound(debruijn, _) => {
     .                           self.add_bound_var(debruijn);
     .                       }
     .                       ty::ConstKind::Param(_) => {
-- line 303 ----------------------------------------
-- line 306 ----------------------------------------
     .                       }
     .                       ty::ConstKind::Placeholder(_) => {
     .                           self.add_flags(TypeFlags::HAS_CT_PLACEHOLDER);
     .                           self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);
     .                       }
     .                       ty::ConstKind::Value(_) => {}
     .                       ty::ConstKind::Error(_) => self.add_flags(TypeFlags::HAS_ERROR),
     .                   }
 2,672 ( 0.00%)      }
     .           
     .               fn add_unevaluated_const<P>(&mut self, ct: ty::Unevaluated<'_, P>) {
    22 ( 0.00%)          self.add_substs(ct.substs);
     .                   self.add_flags(TypeFlags::HAS_CT_PROJECTION);
     .               }
     .           
     .               fn add_existential_projection(&mut self, projection: &ty::ExistentialProjection<'_>) {
    98 ( 0.00%)          self.add_substs(projection.substs);
    98 ( 0.00%)          match projection.term {
    49 ( 0.00%)              ty::Term::Ty(ty) => self.add_ty(ty),
     .                       ty::Term::Const(ct) => self.add_const(ct),
     .                   }
     .               }
     .           
     .               fn add_projection_ty(&mut self, projection_ty: ty::ProjectionTy<'_>) {
   168 ( 0.00%)          self.add_substs(projection_ty.substs);
     .               }
     .           
51,387 ( 0.02%)      fn add_substs(&mut self, substs: &[GenericArg<'_>]) {
     .                   for kind in substs {
 8,288 ( 0.00%)              match kind.unpack() {
14,012 ( 0.01%)                  GenericArgKind::Type(ty) => self.add_ty(ty),
     .                           GenericArgKind::Lifetime(lt) => self.add_region(lt),
    22 ( 0.00%)                  GenericArgKind::Const(ct) => self.add_const(ct),
     .                       }
     .                   }
58,728 ( 0.03%)      }
     .           }

33,068 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/flags.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs
--------------------------------------------------------------------------------
Ir               

-- line 176 ----------------------------------------
      .               }
      .               fn sess(self) -> Option<&'tcx Session> {
      .                   None
      .               }
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   None
      .               }
      .           
  2,304 ( 0.00%)      fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {
    768 ( 0.00%)          let tcx = self.tcx();
243,528 ( 0.11%)          DecodeContext {
 25,556 ( 0.01%)              opaque: opaque::Decoder::new(self.blob(), pos),
    768 ( 0.00%)              cdata: self.cdata(),
      .                       blob: self.blob(),
  5,210 ( 0.00%)              sess: self.sess().or(tcx.map(|tcx| tcx.sess)),
      .                       tcx,
      .                       last_source_file_index: 0,
      .                       lazy_state: LazyState::NoNode,
      .                       alloc_decoding_session: self
      .                           .cdata()
 22,882 ( 0.01%)                  .map(|cdata| cdata.cdata.alloc_decoding_state.new_decoding_session()),
      .                   }
  2,304 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob {
      .               #[inline]
      .               fn blob(self) -> &'a MetadataBlob {
      .                   self
      .               }
      .           }
-- line 206 ----------------------------------------
-- line 255 ----------------------------------------
      .               }
      .               #[inline]
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   Some(self.1)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<T> {
 23,488 ( 0.01%)      fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {
 10,961 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
 72,054 ( 0.03%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 28,435 ( 0.01%)          T::decode(&mut dcx)
 30,121 ( 0.01%)      }
      .           }
      .           
      .           impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<[T]> {
      .               fn decode<M: Metadata<'a, 'tcx>>(
      .                   self,
      .                   metadata: M,
      .               ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {
     28 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
      8 ( 0.00%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 18,566 ( 0.01%)          (0..self.meta).map(move |_| T::decode(&mut dcx))
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> DecodeContext<'a, 'tcx> {
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   debug_assert!(self.tcx.is_some(), "missing TyCtxt in DecodeContext");
      .                   self.tcx.unwrap()
-- line 285 ----------------------------------------
-- line 292 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn cdata(&self) -> CrateMetadataRef<'a> {
      .                   debug_assert!(self.cdata.is_some(), "missing CrateMetadata in DecodeContext");
      .                   self.cdata.unwrap()
      .               }
      .           
      .               fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {
 78,332 ( 0.03%)          if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }
      .               }
      .           
 44,667 ( 0.02%)      fn read_lazy_with_meta<T: ?Sized + LazyMeta>(&mut self, meta: T::Meta) -> Lazy<T> {
      .                   let distance = self.read_usize();
 42,121 ( 0.02%)          let position = match self.lazy_state {
      .                       LazyState::NoNode => bug!("read_lazy_with_meta: outside of a metadata node"),
  4,957 ( 0.00%)              LazyState::NodeStart(start) => {
      .                           let start = start.get();
  9,914 ( 0.00%)                  assert!(distance <= start);
      .                           start - distance
      .                       }
 16,350 ( 0.01%)              LazyState::Previous(last_pos) => last_pos.get() + distance,
      .                   };
 20,814 ( 0.01%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(position).unwrap());
      .                   Lazy::from_position_and_meta(NonZeroUsize::new(position).unwrap(), meta)
 44,667 ( 0.02%)      }
      .           
      .               #[inline]
      .               pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {
      .                   self.opaque.read_raw_bytes(len)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {
-- line 324 ----------------------------------------
-- line 326 ----------------------------------------
      .           
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   self.tcx.expect("missing TyCtxt in DecodeContext")
      .               }
      .           
      .               #[inline]
      .               fn peek_byte(&self) -> u8 {
 30,020 ( 0.01%)          self.opaque.data[self.opaque.position()]
      .               }
      .           
      .               #[inline]
      .               fn position(&self) -> usize {
      .                   self.opaque.position()
      .               }
      .           
 23,359 ( 0.01%)      fn cached_ty_for_shorthand<F>(&mut self, shorthand: usize, or_insert_with: F) -> Ty<'tcx>
      .               where
      .                   F: FnOnce(&mut Self) -> Ty<'tcx>,
      .               {
  3,337 ( 0.00%)          let tcx = self.tcx();
      .           
  3,337 ( 0.00%)          let key = ty::CReaderCacheKey { cnum: Some(self.cdata().cnum), pos: shorthand };
      .           
  5,428 ( 0.00%)          if let Some(&ty) = tcx.ty_rcache.borrow().get(&key) {
      .                       return ty;
      .                   }
      .           
  1,980 ( 0.00%)          let ty = or_insert_with(self);
      .                   tcx.ty_rcache.borrow_mut().insert(key, ty);
      .                   ty
 30,033 ( 0.01%)      }
      .           
      .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R,
      .               {
      .                   let new_opaque = opaque::Decoder::new(self.opaque.data, pos);
      .                   let old_opaque = mem::replace(&mut self.opaque, new_opaque);
      .                   let old_state = mem::replace(&mut self.lazy_state, LazyState::NoNode);
      .                   let r = f(self);
 10,500 ( 0.00%)          self.opaque = old_opaque;
  2,100 ( 0.00%)          self.lazy_state = old_state;
      .                   r
      .               }
      .           
      .               fn decode_alloc_id(&mut self) -> rustc_middle::mir::interpret::AllocId {
      .                   if let Some(alloc_decoding_session) = self.alloc_decoding_session {
      .                       alloc_decoding_session.decode_alloc_id(self)
      .                   } else {
      .                       bug!("Attempting to decode interpret::AllocId without CrateMetadata")
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for CrateNum {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> CrateNum {
 42,556 ( 0.02%)          let cnum = CrateNum::from_u32(d.read_u32());
      .                   d.map_encoded_cnum_to_current(cnum)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefIndex {
    562 ( 0.00%)      fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefIndex {
 89,818 ( 0.04%)          DefIndex::from_u32(d.read_u32())
  1,124 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnIndex {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> ExpnIndex {
      .                   ExpnIndex::from_u32(d.read_u32())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {
 53,680 ( 0.02%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {
 13,420 ( 0.01%)          let cdata = decoder.cdata();
 13,420 ( 0.01%)          let sess = decoder.sess.unwrap();
 26,840 ( 0.01%)          let cname = cdata.root.name;
      .                   rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {
      .                       debug!("SpecializedDecoder<SyntaxContext>: decoding {}", id);
    264 ( 0.00%)              cdata
      .                           .root
      .                           .syntax_contexts
      .                           .get(cdata, id)
      .                           .unwrap_or_else(|| panic!("Missing SyntaxContext {:?} for crate {:?}", id, cname))
      .                           .decode((cdata, sess))
      .                   })
 67,100 ( 0.03%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {
  4,914 ( 0.00%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {
    702 ( 0.00%)          let local_cdata = decoder.cdata();
    702 ( 0.00%)          let sess = decoder.sess.unwrap();
      .           
      .                   let cnum = CrateNum::decode(decoder);
      .                   let index = u32::decode(decoder);
      .           
      .                   let expn_id = rustc_span::hygiene::decode_expn_id(cnum, index, |expn_id| {
      .                       let ExpnId { krate: cnum, local_id: index } = expn_id;
      .                       // Lookup local `ExpnData`s in our own crate data. Foreign `ExpnData`s
      .                       // are stored in the owning crate, to avoid duplication.
      .                       debug_assert_ne!(cnum, LOCAL_CRATE);
    133 ( 0.00%)              let crate_data = if cnum == local_cdata.cnum {
      .                           local_cdata
      .                       } else {
      .                           local_cdata.cstore.get_crate_data(cnum)
      .                       };
    665 ( 0.00%)              let expn_data = crate_data
      .                           .root
      .                           .expn_data
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
    665 ( 0.00%)              let expn_hash = crate_data
      .                           .root
      .                           .expn_hashes
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
  1,330 ( 0.00%)              (expn_data, expn_hash)
      .                   });
      .                   expn_id
  5,616 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {
105,776 ( 0.05%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Span {
 13,222 ( 0.01%)          let ctxt = SyntaxContext::decode(decoder);
      .                   let tag = u8::decode(decoder);
      .           
 26,444 ( 0.01%)          if tag == TAG_PARTIAL_SPAN {
      .                       return DUMMY_SP.with_ctxt(ctxt);
      .                   }
      .           
      .                   debug_assert!(tag == TAG_VALID_SPAN_LOCAL || tag == TAG_VALID_SPAN_FOREIGN);
      .           
      .                   let lo = BytePos::decode(decoder);
      .                   let len = BytePos::decode(decoder);
      .                   let hi = lo + len;
      .           
 39,645 ( 0.02%)          let Some(sess) = decoder.sess else {
      .                       bug!("Cannot decode Span without Session.")
      .                   };
      .           
      .                   // There are two possibilities here:
      .                   // 1. This is a 'local span', which is located inside a `SourceFile`
      .                   // that came from this crate. In this case, we use the source map data
      .                   // encoded in this crate. This branch should be taken nearly all of the time.
      .                   // 2. This is a 'foreign span', which is located inside a `SourceFile`
-- line 476 ----------------------------------------
-- line 492 ----------------------------------------
      .                   // a transitive dependency.
      .                   //
      .                   // When we encode a foreign span, we adjust its 'lo' and 'high' values
      .                   // to be based on the *foreign* crate (e.g. crate C), not the crate
      .                   // we are writing metadata for (e.g. crate B). This allows us to
      .                   // treat the 'local' and 'foreign' cases almost identically during deserialization:
      .                   // we can call `imported_source_files` for the proper crate, and binary search
      .                   // through the returned slice using our span.
 30,498 ( 0.01%)          let imported_source_files = if tag == TAG_VALID_SPAN_LOCAL {
      .                       decoder.cdata().imported_source_files(sess)
      .                   } else {
      .                       // When we encode a proc-macro crate, all `Span`s should be encoded
      .                       // with `TAG_VALID_SPAN_LOCAL`
    138 ( 0.00%)              if decoder.cdata().root.is_proc_macro_crate() {
      .                           // Decode `CrateNum` as u32 - using `CrateNum::decode` will ICE
      .                           // since we don't have `cnum_map` populated.
      .                           let cnum = u32::decode(decoder);
      .                           panic!(
      .                               "Decoding of crate {:?} tried to access proc-macro dep {:?}",
      .                               decoder.cdata().root.name,
      .                               cnum
      .                           );
-- line 513 ----------------------------------------
-- line 518 ----------------------------------------
      .                           "SpecializedDecoder<Span>::specialized_decode: loading source files from cnum {:?}",
      .                           cnum
      .                       );
      .           
      .                       // Decoding 'foreign' spans should be rare enough that it's
      .                       // not worth it to maintain a per-CrateNum cache for `last_source_file_index`.
      .                       // We just set it to 0, to ensure that we don't try to access something out
      .                       // of bounds for our initial 'guess'
    276 ( 0.00%)              decoder.last_source_file_index = 0;
      .           
    138 ( 0.00%)              let foreign_data = decoder.cdata().cstore.get_crate_data(cnum);
      .                       foreign_data.imported_source_files(sess)
      .                   };
      .           
      .                   let source_file = {
      .                       // Optimize for the case that most spans within a translated item
      .                       // originate from the same source_file.
 39,645 ( 0.02%)              let last_source_file = &imported_source_files[decoder.last_source_file_index];
      .           
 52,757 ( 0.02%)              if lo >= last_source_file.original_start_pos && lo <= last_source_file.original_end_pos
      .                       {
      .                           last_source_file
      .                       } else {
      .                           let index = imported_source_files
      .                               .binary_search_by_key(&lo, |source_file| source_file.original_start_pos)
  8,132 ( 0.00%)                      .unwrap_or_else(|index| index - 1);
      .           
      .                           // Don't try to cache the index for foreign spans,
      .                           // as this would require a map from CrateNums to indices
  4,068 ( 0.00%)                  if tag == TAG_VALID_SPAN_LOCAL {
  4,011 ( 0.00%)                      decoder.last_source_file_index = index;
      .                           }
  8,136 ( 0.00%)                  &imported_source_files[index]
      .                       }
      .                   };
      .           
      .                   // Make sure our binary search above is correct.
      .                   debug_assert!(
      .                       lo >= source_file.original_start_pos && lo <= source_file.original_end_pos,
      .                       "Bad binary search: lo={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       lo,
-- line 558 ----------------------------------------
-- line 565 ----------------------------------------
      .                       hi >= source_file.original_start_pos && hi <= source_file.original_end_pos,
      .                       "Bad binary search: hi={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       hi,
      .                       source_file.original_start_pos,
      .                       source_file.original_end_pos
      .                   );
      .           
      .                   let lo =
 52,860 ( 0.02%)              (lo + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .                   let hi =
      .                       (hi + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .           
      .                   // Do not try to decode parent for foreign spans.
      .                   Span::new(lo, hi, ctxt, None)
118,998 ( 0.05%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [thir::abstract_const::Node<'tcx>] {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
-- line 587 ----------------------------------------
-- line 590 ----------------------------------------
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<T>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
  7,873 ( 0.00%)          decoder.read_lazy_with_meta(())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<[T]>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 20,740 ( 0.01%)          if len == 0 { Lazy::empty() } else { decoder.read_lazy_with_meta(len) }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, I: Idx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<Table<I, T>>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 20,449 ( 0.01%)          decoder.read_lazy_with_meta(len)
      .               }
      .           }
      .           
      .           implement_ty_decoder!(DecodeContext<'a, 'tcx>);
      .           
      .           impl<'tcx> MetadataBlob {
      .               crate fn new(metadata_ref: MetadataRef) -> MetadataBlob {
      .                   MetadataBlob(Lrc::new(metadata_ref))
-- line 626 ----------------------------------------
-- line 630 ----------------------------------------
      .                   self.blob().starts_with(METADATA_HEADER)
      .               }
      .           
      .               crate fn get_rustc_version(&self) -> String {
      .                   Lazy::<String>::from_position(NonZeroUsize::new(METADATA_HEADER.len() + 4).unwrap())
      .                       .decode(self)
      .               }
      .           
    363 ( 0.00%)      crate fn get_root(&self) -> CrateRoot<'tcx> {
    121 ( 0.00%)          let slice = &self.blob()[..];
      .                   let offset = METADATA_HEADER.len();
    605 ( 0.00%)          let pos = (((slice[offset + 0] as u32) << 24)
    242 ( 0.00%)              | ((slice[offset + 1] as u32) << 16)
    484 ( 0.00%)              | ((slice[offset + 2] as u32) << 8)
    363 ( 0.00%)              | ((slice[offset + 3] as u32) << 0)) as usize;
      .                   Lazy::<CrateRoot<'tcx>>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)
    605 ( 0.00%)      }
      .           
      .               crate fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {
      .                   let root = self.get_root();
      .                   writeln!(out, "Crate info:")?;
      .                   writeln!(out, "name {}{}", root.name, root.extra_filename)?;
      .                   writeln!(out, "hash {} stable_crate_id {:?}", root.hash, root.stable_crate_id)?;
      .                   writeln!(out, "proc_macro {:?}", root.proc_macro_data.is_some())?;
      .                   writeln!(out, "=External Dependencies=")?;
-- line 654 ----------------------------------------
-- line 666 ----------------------------------------
      .                   }
      .                   write!(out, "\n")?;
      .                   Ok(())
      .               }
      .           }
      .           
      .           impl CrateRoot<'_> {
      .               crate fn is_proc_macro_crate(&self) -> bool {
     80 ( 0.00%)          self.proc_macro_data.is_some()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
      6 ( 0.00%)          self.name
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
     40 ( 0.00%)          self.hash
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
     80 ( 0.00%)          self.stable_crate_id
      .               }
      .           
      .               crate fn triple(&self) -> &TargetTriple {
      .                   &self.triple
      .               }
      .           
      .               crate fn decode_crate_deps<'a>(
      .                   &self,
      .                   metadata: &'a MetadataBlob,
      .               ) -> impl ExactSizeIterator<Item = CrateDep> + Captures<'a> {
     80 ( 0.00%)          self.crate_deps.decode(metadata)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> CrateMetadataRef<'a> {
      .               fn raw_proc_macro(self, id: DefIndex) -> &'a ProcMacro {
      .                   // DefIndex's in root.proc_macro_data have a one-to-one correspondence
      .                   // with items in 'raw_proc_macros'.
      .                   let pos = self
-- line 705 ----------------------------------------
-- line 709 ----------------------------------------
      .                       .unwrap()
      .                       .macros
      .                       .decode(self)
      .                       .position(|i| i == id)
      .                       .unwrap();
      .                   &self.raw_proc_macros.unwrap()[pos]
      .               }
      .           
 43,472 ( 0.02%)      fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {
 32,356 ( 0.01%)          let name = self.def_key(item_index).disambiguated_data.data.get_opt_name()?;
 17,318 ( 0.01%)          let span = match self.root.tables.ident_span.get(self, item_index) {
      .                       Some(lazy_span) => lazy_span.decode((self, sess)),
      .                       None => {
      .                           // FIXME: this weird case of a name with no span is specific to `extern crate`
      .                           // items, which are supposed to be treated like `use` items and only be encoded
      .                           // to metadata as `Export`s, return `None` because that's what all the callers
      .                           // expect in this case.
    144 ( 0.00%)                  assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);
      .                           return None;
      .                       }
      .                   };
      .                   Some(Ident::new(name, span))
 55,624 ( 0.02%)      }
      .           
    531 ( 0.00%)      fn item_ident(self, item_index: DefIndex, sess: &Session) -> Ident {
  6,993 ( 0.00%)          self.opt_item_ident(item_index, sess).expect("no encoded ident for item")
  1,062 ( 0.00%)      }
      .           
      .               fn maybe_kind(self, item_id: DefIndex) -> Option<EntryKind> {
  8,046 ( 0.00%)          self.root.tables.kind.get(self, item_id).map(|k| k.decode(self))
      .               }
      .           
 32,184 ( 0.01%)      fn kind(self, item_id: DefIndex) -> EntryKind {
      .                   self.maybe_kind(item_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
 24,138 ( 0.01%)      }
      .           
  9,611 ( 0.00%)      fn def_kind(self, item_id: DefIndex) -> DefKind {
  7,172 ( 0.00%)          self.root.tables.def_kind.get(self, item_id).map(|k| k.decode(self)).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
  5,492 ( 0.00%)      }
      .           
  4,779 ( 0.00%)      fn get_span(self, index: DefIndex, sess: &Session) -> Span {
  6,304 ( 0.00%)          self.root
      .                       .tables
      .                       .span
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing span for {:?}", index))
      .                       .decode((self, sess))
  2,655 ( 0.00%)      }
      .           
      .               fn load_proc_macro(self, id: DefIndex, sess: &Session) -> SyntaxExtension {
      .                   let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {
      .                       ProcMacro::CustomDerive { trait_name, attributes, client } => {
      .                           let helper_attrs =
      .                               attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();
      .                           (
      .                               trait_name,
-- line 778 ----------------------------------------
-- line 795 ----------------------------------------
      .                       self.get_span(id, sess),
      .                       helper_attrs,
      .                       self.root.edition,
      .                       Symbol::intern(name),
      .                       &attrs,
      .                   )
      .               }
      .           
    442 ( 0.00%)      fn get_trait_def(self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {
    136 ( 0.00%)          match self.kind(item_id) {
     34 ( 0.00%)              EntryKind::Trait(data) => {
    204 ( 0.00%)                  let data = data.decode((self, sess));
    544 ( 0.00%)                  ty::TraitDef::new(
      .                               self.local_def_id(item_id),
     68 ( 0.00%)                      data.unsafety,
     68 ( 0.00%)                      data.paren_sugar,
     68 ( 0.00%)                      data.has_auto_impl,
     68 ( 0.00%)                      data.is_marker,
     34 ( 0.00%)                      data.skip_array_during_method_dispatch,
     34 ( 0.00%)                      data.specialization_kind,
    136 ( 0.00%)                      self.def_path_hash(item_id),
     34 ( 0.00%)                      data.must_implement_one_of,
      .                           )
      .                       }
      .                       EntryKind::TraitAlias => ty::TraitDef::new(
      .                           self.local_def_id(item_id),
      .                           hir::Unsafety::Normal,
      .                           false,
      .                           false,
      .                           false,
      .                           false,
      .                           ty::trait_def::TraitSpecializationKind::None,
      .                           self.def_path_hash(item_id),
      .                           None,
      .                       ),
      .                       _ => bug!("def-index does not refer to trait or trait alias"),
      .                   }
    306 ( 0.00%)      }
      .           
  1,260 ( 0.00%)      fn get_variant(
      .                   self,
      .                   kind: &EntryKind,
      .                   index: DefIndex,
      .                   parent_did: DefId,
      .                   sess: &Session,
      .               ) -> ty::VariantDef {
    560 ( 0.00%)          let data = match kind {
      .                       EntryKind::Variant(data) | EntryKind::Struct(data, _) | EntryKind::Union(data, _) => {
    700 ( 0.00%)                  data.decode(self)
      .                       }
      .                       _ => bug!(),
      .                   };
      .           
    392 ( 0.00%)          let adt_kind = match kind {
      .                       EntryKind::Variant(_) => ty::AdtKind::Enum,
      .                       EntryKind::Struct(..) => ty::AdtKind::Struct,
      .                       EntryKind::Union(..) => ty::AdtKind::Union,
      .                       _ => bug!(),
      .                   };
      .           
      .                   let variant_did =
      .                       if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };
    280 ( 0.00%)          let ctor_did = data.ctor.map(|index| self.local_def_id(index));
      .           
  3,080 ( 0.00%)          ty::VariantDef::new(
      .                       self.item_ident(index, sess).name,
      .                       variant_did,
      .                       ctor_did,
    560 ( 0.00%)              data.discr,
    840 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, index)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
      .                           .map(|index| ty::FieldDef {
    135 ( 0.00%)                      did: self.local_def_id(index),
    270 ( 0.00%)                      name: self.item_ident(index, sess).name,
    270 ( 0.00%)                      vis: self.get_visibility(index),
      .                           })
      .                           .collect(),
      .                       data.ctor_kind,
      .                       adt_kind,
      .                       parent_did,
      .                       false,
    140 ( 0.00%)              data.is_non_exhaustive,
      .                   )
  1,260 ( 0.00%)      }
      .           
  1,035 ( 0.00%)      fn get_adt_def(self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {
    276 ( 0.00%)          let kind = self.kind(item_id);
    138 ( 0.00%)          let did = self.local_def_id(item_id);
      .           
    319 ( 0.00%)          let (adt_kind, repr) = match kind {
      .                       EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),
      .                       EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),
      .                       EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),
      .                       _ => bug!("get_adt_def called on a non-ADT {:?}", did),
      .                   };
      .           
      .                   let variants = if let ty::AdtKind::Enum = adt_kind {
     65 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, item_id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
  1,428 ( 0.00%)                  .map(|index| self.get_variant(&self.kind(index), index, did, tcx.sess))
      .                           .collect()
      .                   } else {
    448 ( 0.00%)              std::iter::once(self.get_variant(&kind, item_id, did, tcx.sess)).collect()
      .                   };
      .           
  1,031 ( 0.00%)          tcx.alloc_adt_def(did, adt_kind, variants, repr)
    483 ( 0.00%)      }
      .           
      .               fn get_explicit_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
  1,520 ( 0.00%)          self.root.tables.explicit_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_inferred_outlives(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
  1,520 ( 0.00%)          self.root
      .                       .tables
      .                       .inferred_outlives
      .                       .get(self, item_id)
     12 ( 0.00%)              .map(|predicates| tcx.arena.alloc_from_iter(predicates.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_super_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
    125 ( 0.00%)          self.root.tables.super_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_explicit_item_bounds(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
      5 ( 0.00%)          self.root
      .                       .tables
      .                       .explicit_item_bounds
      .                       .get(self, item_id)
      4 ( 0.00%)              .map(|bounds| tcx.arena.alloc_from_iter(bounds.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_generics(self, item_id: DefIndex, sess: &Session) -> ty::Generics {
  1,881 ( 0.00%)          self.root.tables.generics.get(self, item_id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_type(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
  1,680 ( 0.00%)          self.root
      .                       .tables
      .                       .ty
      .                       .get(self, id)
      .                       .unwrap_or_else(|| panic!("Not a type: {:?}", id))
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_stability(self, id: DefIndex) -> Option<attr::Stability> {
    375 ( 0.00%)          self.root.tables.stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_const_stability(self, id: DefIndex) -> Option<attr::ConstStability> {
      5 ( 0.00%)          self.root.tables.const_stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_deprecation(self, id: DefIndex) -> Option<attr::Deprecation> {
    535 ( 0.00%)          self.root.tables.deprecation.get(self, id).map(|depr| depr.decode(self))
      .               }
      .           
    186 ( 0.00%)      fn get_visibility(self, id: DefIndex) -> ty::Visibility {
  7,485 ( 0.00%)          self.root.tables.visibility.get(self, id).unwrap().decode(self)
    124 ( 0.00%)      }
      .           
      .               fn get_impl_data(self, id: DefIndex) -> ImplData {
 10,920 ( 0.00%)          match self.kind(id) {
  9,100 ( 0.00%)              EntryKind::Impl(data) => data.decode(self),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_parent_impl(self, id: DefIndex) -> Option<DefId> {
  5,127 ( 0.00%)          self.get_impl_data(id).parent_impl
      .               }
      .           
      .               fn get_impl_polarity(self, id: DefIndex) -> ty::ImplPolarity {
     93 ( 0.00%)          self.get_impl_data(id).polarity
      .               }
      .           
      .               fn get_impl_defaultness(self, id: DefIndex) -> hir::Defaultness {
      6 ( 0.00%)          self.get_impl_data(id).defaultness
      .               }
      .           
      .               fn get_impl_constness(self, id: DefIndex) -> hir::Constness {
     12 ( 0.00%)          self.get_impl_data(id).constness
      .               }
      .           
      .               fn get_trait_item_def_id(self, id: DefIndex) -> Option<DefId> {
  4,745 ( 0.00%)          self.root.tables.trait_item_def_id.get(self, id).map(|d| d.decode(self))
      .               }
      .           
      .               fn get_coerce_unsized_info(self, id: DefIndex) -> Option<ty::adjustment::CoerceUnsizedInfo> {
      .                   self.get_impl_data(id).coerce_unsized_info
      .               }
      .           
      .               fn get_impl_trait(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {
 22,104 ( 0.01%)          self.root.tables.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))
      .               }
      .           
      .               fn get_expn_that_defined(self, id: DefIndex, sess: &Session) -> ExpnId {
  2,515 ( 0.00%)          self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_const_param_default(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> rustc_middle::ty::Const<'tcx> {
      .                   self.root.tables.const_defaults.get(self, id).unwrap().decode((self, tcx))
-- line 1026 ----------------------------------------
-- line 1028 ----------------------------------------
      .           
      .               /// Iterates over all the stability attributes in the given crate.
      .               fn get_lib_features(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {
      .                   tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))
      .               }
      .           
      .               /// Iterates over the language items in the given crate.
      .               fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {
    120 ( 0.00%)          tcx.arena.alloc_from_iter(
     80 ( 0.00%)              self.root
      .                           .lang_items
      .                           .decode(self)
    564 ( 0.00%)                  .map(|(def_index, index)| (self.local_def_id(def_index), index)),
      .                   )
      .               }
      .           
      .               /// Iterates over the diagnostic items in the given crate.
      .               fn get_diagnostic_items(self) -> DiagnosticItems {
      .                   let mut id_to_name = FxHashMap::default();
     14 ( 0.00%)          let name_to_id = self
      .                       .root
      .                       .diagnostic_items
      .                       .decode(self)
      .                       .map(|(name, def_index)| {
    130 ( 0.00%)                  let id = self.local_def_id(def_index);
    130 ( 0.00%)                  id_to_name.insert(id, name);
      .                           (name, id)
      .                       })
      .                       .collect();
     63 ( 0.00%)          DiagnosticItems { id_to_name, name_to_id }
      .               }
      .           
      .               /// Iterates over all named children of the given module,
      .               /// including both proper items and reexports.
      .               /// Module here is understood in name resolution sense - it can be a `mod` item,
      .               /// or a crate root, or an enum, or a trait.
      .               fn for_each_module_child(
      .                   self,
      .                   id: DefIndex,
      .                   mut callback: impl FnMut(ModChild),
      .                   sess: &Session,
      .               ) {
    220 ( 0.00%)          if let Some(data) = &self.root.proc_macro_data {
      .                       // If we are loading as a proc macro, we want to return
      .                       // the view of this crate as a proc macro crate.
      .                       if id == CRATE_DEF_INDEX {
      .                           for def_index in data.macros.decode(self) {
      .                               let raw_macro = self.raw_proc_macro(def_index);
      .                               let res = Res::Def(
      .                                   DefKind::Macro(macro_kind(raw_macro)),
      .                                   self.local_def_id(def_index),
-- line 1078 ----------------------------------------
-- line 1085 ----------------------------------------
      .                                   span: ident.span,
      .                               });
      .                           }
      .                       }
      .                       return;
      .                   }
      .           
      .                   // Iterate over all children.
    440 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    880 ( 0.00%)              for child_index in children.decode((self, sess)) {
 13,398 ( 0.01%)                  if let Some(ident) = self.opt_item_ident(child_index, sess) {
  1,995 ( 0.00%)                      let kind = self.def_kind(child_index);
  1,330 ( 0.00%)                      if matches!(kind, DefKind::Macro(..)) {
      .                                   // FIXME: Macros are currently encoded twice, once as items and once as
      .                                   // reexports. We ignore the items here and only use the reexports.
      .                                   continue;
      .                               }
      .                               let def_id = self.local_def_id(child_index);
      .                               let res = Res::Def(kind, def_id);
      .                               let vis = self.get_visibility(child_index);
      .                               let span = self.get_span(child_index, sess);
      .           
      .                               callback(ModChild { ident, res, vis, span });
      .           
      .                               // For non-re-export structs and variants add their constructors to children.
      .                               // Re-export lists automatically contain constructors when necessary.
  2,532 ( 0.00%)                      match kind {
      .                                   DefKind::Struct => {
     51 ( 0.00%)                              if let Some((ctor_def_id, ctor_kind)) =
      .                                           self.get_ctor_def_id_and_kind(child_index)
      .                                       {
      .                                           let ctor_res =
      .                                               Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
      .                                           let vis = self.get_visibility(ctor_def_id.index);
      .                                           callback(ModChild { ident, res: ctor_res, vis, span });
      .                                       }
      .                                   }
      .                                   DefKind::Variant => {
      .                                       // Braced variants, unlike structs, generate unusable names in
      .                                       // value namespace, they are reserved for possible future use.
      .                                       // It's ok to use the variant's id as a ctor id since an
      .                                       // error will be reported on any use of such resolution anyway.
    150 ( 0.00%)                              let (ctor_def_id, ctor_kind) = self
      .                                           .get_ctor_def_id_and_kind(child_index)
      .                                           .unwrap_or((def_id, CtorKind::Fictive));
      .                                       let ctor_res =
      .                                           Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id);
      .                                       let mut vis = self.get_visibility(ctor_def_id.index);
     50 ( 0.00%)                              if ctor_def_id == def_id && vis.is_public() {
      .                                           // For non-exhaustive variants lower the constructor visibility to
      .                                           // within the crate. We only need this for fictive constructors,
      .                                           // for other constructors correct visibilities
      .                                           // were already encoded in metadata.
      .                                           let mut attrs = self.get_item_attrs(def_id.index, sess);
      .                                           if attrs.any(|item| item.has_name(sym::non_exhaustive)) {
      .                                               let crate_def_id = self.local_def_id(CRATE_DEF_INDEX);
      .                                               vis = ty::Visibility::Restricted(crate_def_id);
-- line 1141 ----------------------------------------
-- line 1144 ----------------------------------------
      .                                       callback(ModChild { ident, res: ctor_res, vis, span });
      .                                   }
      .                                   _ => {}
      .                               }
      .                           }
      .                       }
      .                   }
      .           
    555 ( 0.00%)          match self.kind(id) {
     38 ( 0.00%)              EntryKind::Mod(exports) => {
  1,552 ( 0.00%)                  for exp in exports.decode((self, sess)) {
      .                               callback(exp);
      .                           }
      .                       }
      .                       EntryKind::Enum(..) | EntryKind::Trait(..) => {}
      .                       _ => bug!("`for_each_module_child` is called on a non-module: {:?}", self.def_kind(id)),
      .                   }
      .               }
      .           
      .               fn is_ctfe_mir_available(self, id: DefIndex) -> bool {
     16 ( 0.00%)          self.root.tables.mir_for_ctfe.get(self, id).is_some()
      .               }
      .           
      .               fn is_item_mir_available(self, id: DefIndex) -> bool {
      .                   self.root.tables.mir.get(self, id).is_some()
      .               }
      .           
      .               fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {
  3,262 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::Mod(_) | EntryKind::Enum(_) | EntryKind::Trait(_) => {
      .                           self.get_expn_that_defined(id, sess)
      .                       }
      .                       _ => panic!("Expected module, found {:?}", self.local_def_id(id)),
      .                   }
      .               }
      .           
      .               fn get_optimized_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
-- line 1180 ----------------------------------------
-- line 1184 ----------------------------------------
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_optimized_mir: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_mir_for_ctfe(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
     20 ( 0.00%)          self.root
      .                       .tables
      .                       .mir_for_ctfe
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_mir_for_ctfe: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
-- line 1200 ----------------------------------------
-- line 1227 ----------------------------------------
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_promoted_mir: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn mir_const_qualif(self, id: DefIndex) -> mir::ConstQualifs {
      8 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::AnonConst(qualif, _)
      .                       | EntryKind::Const(qualif, _)
      .                       | EntryKind::AssocConst(
      .                           AssocContainer::ImplDefault
      .                           | AssocContainer::ImplFinal
      .                           | AssocContainer::TraitWithDefault,
      .                           qualif,
      .                           _,
      .                       ) => qualif,
      .                       _ => bug!("mir_const_qualif: unexpected kind"),
      .                   }
      .               }
      .           
      .               fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {
    720 ( 0.00%)          match self.kind(id) {
    576 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).has_self,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn get_associated_item_def_ids(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [DefId] {
    784 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    336 ( 0.00%)              tcx.arena.alloc_from_iter(
    112 ( 0.00%)                  children.decode((self, tcx.sess)).map(|child_index| self.local_def_id(child_index)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
      .               }
      .           
 10,788 ( 0.00%)      fn get_associated_item(self, id: DefIndex, sess: &Session) -> ty::AssocItem {
  6,293 ( 0.00%)          let def_key = self.def_key(id);
      .                   let parent = self.local_def_id(def_key.parent.unwrap());
      .                   let ident = self.item_ident(id, sess);
      .           
  6,337 ( 0.00%)          let (kind, container, has_self) = match self.kind(id) {
      .                       EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),
    877 ( 0.00%)              EntryKind::AssocFn(data) => {
      .                           let data = data.decode(self);
  6,139 ( 0.00%)                  (ty::AssocKind::Fn, data.container, data.has_self)
      .                       }
     44 ( 0.00%)              EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),
      .                       _ => bug!("cannot get associated-item of `{:?}`", def_key),
      .                   };
      .           
 16,182 ( 0.01%)          ty::AssocItem {
      .                       name: ident.name,
      .                       kind,
      .                       vis: self.get_visibility(id),
      .                       defaultness: container.defaultness(),
      .                       def_id: self.local_def_id(id),
      .                       trait_item_def_id: self.get_trait_item_def_id(id),
      .                       container: container.with_def_id(parent),
      .                       fn_has_self_parameter: has_self,
      .                   }
  8,091 ( 0.00%)      }
      .           
      .               fn get_item_variances(self, id: DefIndex) -> impl Iterator<Item = ty::Variance> + 'a {
    195 ( 0.00%)          self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self)
      .               }
      .           
      .               fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {
  2,898 ( 0.00%)          match self.kind(node_id) {
      .                       EntryKind::Struct(data, _) | EntryKind::Variant(data) => {
  1,235 ( 0.00%)                  let vdata = data.decode(self);
    750 ( 0.00%)                  vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))
      .                       }
      .                       _ => None,
      .                   }
  1,685 ( 0.00%)      }
      .           
    576 ( 0.00%)      fn get_item_attrs(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = ast::Attribute> + 'a {
    996 ( 0.00%)          self.root
      .                       .tables
      .                       .attributes
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           // Structure and variant constructors don't have any attributes encoded for them,
      .                           // but we assume that someone passing a constructor ID actually wants to look at
      .                           // the attributes on the corresponding struct or variant.
      .                           let def_key = self.def_key(id);
-- line 1320 ----------------------------------------
-- line 1322 ----------------------------------------
      .                           let parent_id = def_key.parent.expect("no parent for a constructor");
      .                           self.root
      .                               .tables
      .                               .attributes
      .                               .get(self, parent_id)
      .                               .expect("no encoded attributes for a structure or variant")
      .                       })
      .                       .decode((self, sess))
    432 ( 0.00%)      }
      .           
      .               fn get_struct_field_names(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = Spanned<Symbol>> + 'a {
  1,385 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
  5,310 ( 0.00%)              .map(move |index| respan(self.get_span(index, sess), self.item_ident(index, sess).name))
      .               }
      .           
      .               fn get_struct_field_visibilities(self, id: DefIndex) -> impl Iterator<Item = Visibility> + 'a {
    185 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
     62 ( 0.00%)              .map(move |field_index| self.get_visibility(field_index))
      .               }
      .           
      .               fn get_inherent_implementations_for_type(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> &'tcx [DefId] {
     76 ( 0.00%)          tcx.arena.alloc_from_iter(
     95 ( 0.00%)              self.root
      .                           .tables
      .                           .inherent_impls
      .                           .get(self, id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
    949 ( 0.00%)                  .map(|index| self.local_def_id(index)),
      .                   )
      .               }
      .           
      .               fn get_traits(self) -> impl Iterator<Item = DefId> + 'a {
      .                   self.root.traits.decode(self).map(move |index| self.local_def_id(index))
      .               }
      .           
      .               fn get_trait_impls(self) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + 'a {
-- line 1376 ----------------------------------------
-- line 1380 ----------------------------------------
      .                           index: *trait_index,
      .                       };
      .                       impls.decode(self).map(move |(impl_index, simplified_self_ty)| {
      .                           (trait_def_id, self.local_def_id(impl_index), simplified_self_ty)
      .                       })
      .                   })
      .               }
      .           
 14,040 ( 0.01%)      fn get_implementations_of_trait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_def_id: DefId,
      .               ) -> &'tcx [(DefId, Option<SimplifiedType>)] {
  1,560 ( 0.00%)          if self.trait_impls.is_empty() {
      .                       return &[];
      .                   }
      .           
      .                   // Do a reverse lookup beforehand to avoid touching the crate_num
      .                   // hash map in the loop below.
  2,170 ( 0.00%)          let key = match self.reverse_translate_def_id(trait_def_id) {
      .                       Some(def_id) => (def_id.krate.as_u32(), def_id.index),
      .                       None => return &[],
      .                   };
      .           
      .                   if let Some(impls) = self.trait_impls.get(&key) {
  1,180 ( 0.00%)              tcx.arena.alloc_from_iter(
    590 ( 0.00%)                  impls
      .                               .decode(self)
  7,757 ( 0.00%)                      .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
 12,480 ( 0.01%)      }
      .           
      .               fn get_trait_of_item(self, id: DefIndex) -> Option<DefId> {
    196 ( 0.00%)          let def_key = self.def_key(id);
    245 ( 0.00%)          match def_key.disambiguated_data.data {
      .                       DefPathData::TypeNs(..) | DefPathData::ValueNs(..) => (),
      .                       // Not an associated item
      .                       _ => return None,
      .                   }
    441 ( 0.00%)          def_key.parent.and_then(|parent_index| match self.kind(parent_index) {
      .                       EntryKind::Trait(_) | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn get_native_libraries(self, sess: &'a Session) -> impl Iterator<Item = NativeLib> + 'a {
     80 ( 0.00%)          self.root.native_libraries.decode((self, sess))
      .               }
      .           
      .               fn get_proc_macro_quoted_span(self, index: usize, sess: &Session) -> Span {
      .                   self.root
      .                       .tables
      .                       .proc_macro_quoted_spans
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing proc macro quoted span: {:?}", index))
-- line 1437 ----------------------------------------
-- line 1450 ----------------------------------------
      .                       self.root.dylib_dependency_formats.decode(self).enumerate().flat_map(|(i, link)| {
      .                           let cnum = CrateNum::new(i + 1);
      .                           link.map(|link| (self.cnum_map[cnum], link))
      .                       }),
      .                   )
      .               }
      .           
      .               fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {
    200 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))
      .               }
      .           
      .               fn get_fn_param_names(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {
      .                   let param_names = match self.kind(id) {
      .                       EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,
      .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,
      .                       _ => Lazy::empty(),
      .                   };
-- line 1466 ----------------------------------------
-- line 1479 ----------------------------------------
      .                       EntryKind::AnonConst(_, data)
      .                       | EntryKind::Const(_, data)
      .                       | EntryKind::AssocConst(_, _, data) => data.decode(self).0,
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {
     84 ( 0.00%)          match self.kind(id) {
     14 ( 0.00%)              EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               // This replicates some of the logic of the crate-local `is_const_fn_raw` query, because we
      .               // don't serialize constness for tuple variant and tuple struct constructors.
      .               fn is_const_fn_raw(self, id: DefIndex) -> bool {
     81 ( 0.00%)          let constness = match self.kind(id) {
     16 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).fn_data.constness,
      6 ( 0.00%)              EntryKind::Fn(data) => data.decode(self).constness,
      .                       EntryKind::ForeignFn(data) => data.decode(self).constness,
      .                       EntryKind::Variant(..) | EntryKind::Struct(..) => hir::Constness::Const,
      .                       _ => hir::Constness::NotConst,
      .                   };
      .                   constness == hir::Constness::Const
      .               }
      .           
      .               fn asyncness(self, id: DefIndex) -> hir::IsAsync {
-- line 1506 ----------------------------------------
-- line 1517 ----------------------------------------
      .                       EntryKind::ForeignImmStatic | EntryKind::ForeignMutStatic | EntryKind::ForeignFn(_) => {
      .                           true
      .                       }
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn static_mutability(self, id: DefIndex) -> Option<hir::Mutability> {
     11 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::ImmStatic | EntryKind::ForeignImmStatic => Some(hir::Mutability::Not),
      .                       EntryKind::MutStatic | EntryKind::ForeignMutStatic => Some(hir::Mutability::Mut),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn generator_kind(self, id: DefIndex) -> Option<hir::GeneratorKind> {
      .                   match self.kind(id) {
      .                       EntryKind::Generator(data) => Some(data),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn fn_sig(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {
    475 ( 0.00%)          self.root.tables.fn_sig.get(self, id).unwrap().decode((self, tcx))
      .               }
      .           
      .               #[inline]
 41,328 ( 0.02%)      fn def_key(self, index: DefIndex) -> DefKey {
 11,808 ( 0.01%)          *self
      .                       .def_key_cache
      .                       .lock()
      .                       .entry(index)
 19,100 ( 0.01%)              .or_insert_with(|| self.root.tables.def_keys.get(self, index).unwrap().decode(self))
 47,232 ( 0.02%)      }
      .           
      .               // Returns the path leading to the thing with this `id`.
      .               fn def_path(self, id: DefIndex) -> DefPath {
      .                   debug!("def_path(cnum={:?}, id={:?})", self.cnum, id);
      .                   DefPath::make(self.cnum, id, |parent| self.def_key(parent))
      .               }
      .           
      .               fn def_path_hash_unlocked(
      .                   self,
      .                   index: DefIndex,
      .                   def_path_hashes: &mut FxHashMap<DefIndex, DefPathHash>,
      .               ) -> DefPathHash {
  1,702 ( 0.00%)          *def_path_hashes.entry(index).or_insert_with(|| {
    565 ( 0.00%)              self.root.tables.def_path_hashes.get(self, index).unwrap().decode(self)
      .                   })
      .               }
      .           
      .               #[inline]
  5,957 ( 0.00%)      fn def_path_hash(self, index: DefIndex) -> DefPathHash {
      .                   let mut def_path_hashes = self.def_path_hash_cache.lock();
      .                   self.def_path_hash_unlocked(index, &mut def_path_hashes)
  6,808 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn def_path_hash_to_def_index(self, hash: DefPathHash) -> DefIndex {
      .                   self.def_path_hash_map.def_path_hash_to_def_index(&hash)
      .               }
      .           
      .               fn expn_hash_to_expn_id(self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {
      .                   debug_assert_eq!(ExpnId::from_hash(hash), None);
-- line 1580 ----------------------------------------
-- line 1635 ----------------------------------------
      .               /// Proc macro crates don't currently export spans, so this function does not have
      .               /// to work for them.
      .               fn imported_source_files(self, sess: &Session) -> &'a [ImportedSourceFile] {
      .                   // Translate the virtual `/rustc/$hash` prefix back to a real directory
      .                   // that should hold actual sources, where possible.
      .                   //
      .                   // NOTE: if you update this, you might need to also update bootstrap's code for generating
      .                   // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.
 26,430 ( 0.01%)          let virtual_rust_source_base_dir = option_env!("CFG_VIRTUAL_RUST_SOURCE_BASE_DIR")
      .                       .map(Path::new)
      .                       .filter(|_| {
      .                           // Only spend time on further checks if we have what to translate *to*.
      .                           sess.opts.real_rust_source_base_dir.is_some()
      .                       })
      .                       .filter(|virtual_dir| {
      .                           // Don't translate away `/rustc/$hash` if we're still remapping to it,
      .                           // since that means we're still building `std`/`rustc` that need it,
      .                           // and we don't want the real path to leak into codegen/debuginfo.
      .                           !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)
      .                       });
 26,430 ( 0.01%)          let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {
      .                       debug!(
      .                           "try_to_translate_virtual_to_real(name={:?}): \
      .                            virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}",
      .                           name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,
      .                       );
      .           
  3,205 ( 0.00%)              if let Some(virtual_dir) = virtual_rust_source_base_dir {
      .                           if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                               if let rustc_span::FileName::Real(old_name) = name {
      .                                   if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } =
      .                                       old_name
      .                                   {
      .                                       if let Ok(rest) = virtual_name.strip_prefix(virtual_dir) {
      .                                           let virtual_name = virtual_name.clone();
      .           
-- line 1670 ----------------------------------------
-- line 1709 ----------------------------------------
      .                                           *old_name = new_name;
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   };
      .           
 26,292 ( 0.01%)          self.cdata.source_map_import_info.get_or_init(|| {
     48 ( 0.00%)              let external_source_map = self.root.source_map.decode(self);
      .           
      .                       external_source_map
      .                           .map(|source_file_to_import| {
      .                               // We can't reuse an existing SourceFile, so allocate a new one
      .                               // containing the information we need.
      .                               let rustc_span::SourceFile {
 13,461 ( 0.01%)                          mut name,
  3,846 ( 0.00%)                          src_hash,
    641 ( 0.00%)                          start_pos,
  1,282 ( 0.00%)                          end_pos,
  3,205 ( 0.00%)                          mut lines,
  3,205 ( 0.00%)                          mut multibyte_chars,
  3,846 ( 0.00%)                          mut non_narrow_chars,
  3,205 ( 0.00%)                          mut normalized_pos,
  3,846 ( 0.00%)                          name_hash,
      .                                   ..
      .                               } = source_file_to_import;
      .           
      .                               // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped
      .                               // during rust bootstrapping by `remap-debuginfo = true`, and the user
      .                               // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,
      .                               // then we change `name` to a similar state as if the rust was bootstrapped
      .                               // with `remap-debuginfo = true`.
      .                               // This is useful for testing so that tests about the effects of
      .                               // `try_to_translate_virtual_to_real` don't have to worry about how the
      .                               // compiler is bootstrapped.
  1,282 ( 0.00%)                      if let Some(virtual_dir) =
      .                                   &sess.opts.debugging_opts.simulate_remapped_rust_src_base
      .                               {
      .                                   if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                                       if let rustc_span::FileName::Real(ref mut old_name) = name {
      .                                           if let rustc_span::RealFileName::LocalPath(local) = old_name {
      .                                               if let Ok(rest) = local.strip_prefix(real_dir) {
      .                                                   *old_name = rustc_span::RealFileName::Remapped {
      .                                                       local_path: None,
-- line 1753 ----------------------------------------
-- line 1767 ----------------------------------------
      .                               let source_length = (end_pos - start_pos).to_usize();
      .           
      .                               // Translate line-start positions and multibyte character
      .                               // position into frame of reference local to file.
      .                               // `SourceMap::new_imported_source_file()` will then translate those
      .                               // coordinates to their new global frame of reference when the
      .                               // offset of the SourceFile is known.
      .                               for pos in &mut lines {
811,934 ( 0.35%)                          *pos = *pos - start_pos;
      .                               }
      .                               for mbc in &mut multibyte_chars {
  1,790 ( 0.00%)                          mbc.pos = mbc.pos - start_pos;
      .                               }
      .                               for swc in &mut non_narrow_chars {
    930 ( 0.00%)                          *swc = *swc - start_pos;
      .                               }
      .                               for np in &mut normalized_pos {
  4,050 ( 0.00%)                          np.pos = np.pos - start_pos;
      .                               }
      .           
 11,538 ( 0.00%)                      let local_version = sess.source_map().new_imported_source_file(
  8,333 ( 0.00%)                          name,
  4,487 ( 0.00%)                          src_hash,
      .                                   name_hash,
      .                                   source_length,
  1,282 ( 0.00%)                          self.cnum,
  3,205 ( 0.00%)                          lines,
  3,846 ( 0.00%)                          multibyte_chars,
  3,205 ( 0.00%)                          non_narrow_chars,
  2,564 ( 0.00%)                          normalized_pos,
      .                                   start_pos,
      .                                   end_pos,
      .                               );
      .                               debug!(
      .                                   "CrateMetaData::imported_source_files alloc \
      .                                    source_file {:?} original (start_pos {:?} end_pos {:?}) \
      .                                    translated (start_pos {:?} end_pos {:?})",
      .                                   local_version.name,
-- line 1804 ----------------------------------------
-- line 1808 ----------------------------------------
      .                                   local_version.end_pos
      .                               );
      .           
      .                               ImportedSourceFile {
      .                                   original_start_pos: start_pos,
      .                                   original_end_pos: end_pos,
      .                                   translated_source_file: local_version,
      .                               }
  1,923 ( 0.00%)                  })
      .                           .collect()
      .                   })
      .               }
      .           }
      .           
      .           impl CrateMetadata {
    480 ( 0.00%)      crate fn new(
      .                   sess: &Session,
      .                   blob: MetadataBlob,
      .                   root: CrateRoot<'static>,
      .                   raw_proc_macros: Option<&'static [ProcMacro]>,
      .                   cnum: CrateNum,
      .                   cnum_map: CrateNumMap,
      .                   dep_kind: CrateDepKind,
      .                   source: CrateSource,
      .                   private_dep: bool,
      .                   host_hash: Option<Svh>,
      .               ) -> CrateMetadata {
    120 ( 0.00%)          let trait_impls = root
      .                       .impls
      .                       .decode((&blob, sess))
      .                       .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))
      .                       .collect();
      .                   let alloc_decoding_state =
    120 ( 0.00%)              AllocDecodingState::new(root.interpret_alloc_index.decode(&blob).collect());
      .                   let dependencies = Lock::new(cnum_map.iter().cloned().collect());
      .           
      .                   // Pre-decode the DefPathHash->DefIndex table. This is a cheap operation
      .                   // that does not copy any data. It just does some data verification.
     40 ( 0.00%)          let def_path_hash_map = root.def_path_hash_map.decode(&blob);
      .           
    920 ( 0.00%)          CrateMetadata {
     40 ( 0.00%)              blob,
    120 ( 0.00%)              root,
    160 ( 0.00%)              trait_impls,
      .                       raw_proc_macros,
      .                       source_map_import_info: OnceCell::new(),
    160 ( 0.00%)              def_path_hash_map,
      .                       expn_hash_map: Default::default(),
    280 ( 0.00%)              alloc_decoding_state,
      .                       cnum,
    160 ( 0.00%)              cnum_map,
    200 ( 0.00%)              dependencies,
      .                       dep_kind: Lock::new(dep_kind),
    480 ( 0.00%)              source,
      .                       private_dep,
      .                       host_hash,
      .                       extern_crate: Lock::new(None),
      .                       hygiene_context: Default::default(),
      .                       def_key_cache: Default::default(),
      .                       def_path_hash_cache: Default::default(),
      .                   }
    360 ( 0.00%)      }
      .           
      .               crate fn dependencies(&self) -> LockGuard<'_, Vec<CrateNum>> {
      .                   self.dependencies.borrow()
      .               }
      .           
      .               crate fn add_dependency(&self, cnum: CrateNum) {
      .                   self.dependencies.borrow_mut().push(cnum);
      .               }
      .           
      .               crate fn update_extern_crate(&self, new_extern_crate: ExternCrate) -> bool {
      .                   let mut extern_crate = self.extern_crate.borrow_mut();
      .                   let update = Some(new_extern_crate.rank()) > extern_crate.as_ref().map(ExternCrate::rank);
      .                   if update {
    210 ( 0.00%)              *extern_crate = Some(new_extern_crate);
      .                   }
      .                   update
      .               }
      .           
      .               crate fn source(&self) -> &CrateSource {
    236 ( 0.00%)          &self.source
      .               }
      .           
      .               crate fn dep_kind(&self) -> CrateDepKind {
      .                   *self.dep_kind.lock()
      .               }
      .           
      .               crate fn update_dep_kind(&self, f: impl FnOnce(CrateDepKind) -> CrateDepKind) {
    444 ( 0.00%)          self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))
      .               }
      .           
      .               crate fn panic_strategy(&self) -> PanicStrategy {
      .                   self.root.panic_strategy
      .               }
      .           
      .               crate fn needs_panic_runtime(&self) -> bool {
      .                   self.root.needs_panic_runtime
-- line 1905 ----------------------------------------
-- line 1909 ----------------------------------------
      .                   self.root.panic_runtime
      .               }
      .           
      .               crate fn is_profiler_runtime(&self) -> bool {
      .                   self.root.profiler_runtime
      .               }
      .           
      .               crate fn needs_allocator(&self) -> bool {
      5 ( 0.00%)          self.root.needs_allocator
      .               }
      .           
      .               crate fn has_global_allocator(&self) -> bool {
      .                   self.root.has_global_allocator
      .               }
      .           
      .               crate fn has_default_lib_allocator(&self) -> bool {
      .                   self.root.has_default_lib_allocator
      .               }
      .           
      .               crate fn is_proc_macro_crate(&self) -> bool {
      .                   self.root.is_proc_macro_crate()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
    965 ( 0.00%)          self.root.name
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
      .                   self.root.stable_crate_id
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
      .                   self.root.hash
      .               }
      .           
      .               fn num_def_ids(&self) -> usize {
      .                   self.root.tables.def_keys.size()
      .               }
      .           
      .               fn local_def_id(&self, index: DefIndex) -> DefId {
 15,854 ( 0.01%)          DefId { krate: self.cnum, index }
      .               }
      .           
      .               // Translate a DefId from the current compilation environment to a DefId
      .               // for an external crate.
      .               fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> {
      .                   for (local, &global) in self.cnum_map.iter_enumerated() {
  5,850 ( 0.00%)              if global == did.krate {
      .                           return Some(DefId { krate: local, index: did.index });
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           }
      .           
-- line 1964 ----------------------------------------

321,773 ( 0.14%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
300,666 ( 0.13%)      pub fn rustc_entry(&mut self, key: K) -> RustcEntry<'_, K, V, A> {
      .                   let hash = make_insert_hash(&self.hash_builder, &key);
    261 ( 0.00%)          if let Some(elem) = self.table.find(hash, |q| q.0.eq(&key)) {
 18,636 ( 0.01%)              RustcEntry::Occupied(RustcOccupiedEntry {
 11,141 ( 0.00%)                  key: Some(key),
      .                           elem,
      .                           table: &mut self.table,
      .                       })
      .                   } else {
      .                       // Ideally we would put this in VacantEntry::insert, but Entry is not
      .                       // generic over the BuildHasher and adding a generic parameter would be
      .                       // a breaking change.
      .                       self.reserve(1);
      .           
 81,224 ( 0.04%)              RustcEntry::Vacant(RustcVacantEntry {
      .                           hash,
 17,857 ( 0.01%)                  key,
      .                           table: &mut self.table,
      .                       })
      .                   }
234,447 ( 0.10%)      }
      .           }
      .           
      .           /// A view into a single entry in a map, which may either be vacant or occupied.
      .           ///
      .           /// This `enum` is constructed from the [`entry`] method on [`HashMap`].
      .           ///
      .           /// [`HashMap`]: struct.HashMap.html
      .           /// [`entry`]: struct.HashMap.html#method.rustc_entry
-- line 62 ----------------------------------------
-- line 405 ----------------------------------------
      .               /// if let RustcEntry::Occupied(o) = map.rustc_entry("poneyland") {
      .               ///     *o.into_mut() += 10;
      .               /// }
      .               ///
      .               /// assert_eq!(map["poneyland"], 22);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn into_mut(self) -> &'a mut V {
  2,470 ( 0.00%)          unsafe { &mut self.elem.as_mut().1 }
      .               }
      .           
      .               /// Sets the value of the entry, and returns the entry's old value.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 421 ----------------------------------------
-- line 568 ----------------------------------------
      .               /// let mut map: HashMap<&str, u32> = HashMap::new();
      .               ///
      .               /// if let RustcEntry::Vacant(o) = map.rustc_entry("poneyland") {
      .               ///     o.insert(37);
      .               /// }
      .               /// assert_eq!(map["poneyland"], 37);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  1,980 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
      .                   unsafe {
 12,405 ( 0.01%)              let bucket = self.table.insert_no_grow(self.hash, (self.key, value));
    537 ( 0.00%)              &mut bucket.as_mut().1
      .                   }
  2,667 ( 0.00%)      }
      .           
      .               /// Sets the value of the entry with the RustcVacantEntry's key,
      .               /// and returns a RustcOccupiedEntry.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 589 ----------------------------------------

 66,798 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs
--------------------------------------------------------------------------------
Ir               

-- line 40 ----------------------------------------
      .           
      .           impl<BorrowType: marker::BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
      .               /// Looks up a given key in a (sub)tree headed by the node, recursively.
      .               /// Returns a `Found` with the handle of the matching KV, if any. Otherwise,
      .               /// returns a `GoDown` with the handle of the leaf edge where the key belongs.
      .               ///
      .               /// The result is meaningful only if the tree is ordered by key, like the tree
      .               /// in a `BTreeMap` is.
 60,406 ( 0.03%)      pub fn search_tree<Q: ?Sized>(
      .                   mut self,
      .                   key: &Q,
      .               ) -> SearchResult<BorrowType, K, V, marker::LeafOrInternal, marker::Leaf>
      .               where
      .                   Q: Ord,
      .                   K: Borrow<Q>,
      .               {
      .                   loop {
      .                       self = match self.search_node(key) {
      .                           Found(handle) => return Found(handle),
  4,323 ( 0.00%)                  GoDown(handle) => match handle.force() {
      .                               Leaf(leaf) => return GoDown(leaf),
      .                               Internal(internal) => internal.descend(),
      .                           },
      .                       }
      .                   }
 32,546 ( 0.01%)      }
      .           
      .               /// Descends to the nearest node where the edge matching the lower bound
      .               /// of the range is different from the edge matching the upper bound, i.e.,
      .               /// the nearest node that has at least one key contained in the range.
      .               ///
      .               /// If found, returns an `Ok` with that node, the strictly ascending pair of
      .               /// edge indices in the node delimiting the range, and the corresponding
      .               /// pair of bounds for continuing the search in the child nodes, in case
-- line 73 ----------------------------------------
-- line 202 ----------------------------------------
      .               unsafe fn find_key_index<Q: ?Sized>(&self, key: &Q, start_index: usize) -> IndexResult
      .               where
      .                   Q: Ord,
      .                   K: Borrow<Q>,
      .               {
      .                   let node = self.reborrow();
      .                   let keys = node.keys();
      .                   debug_assert!(start_index <= keys.len());
 50,128 ( 0.02%)          for (offset, k) in unsafe { keys.get_unchecked(start_index..) }.iter().enumerate() {
238,243 ( 0.10%)              match key.cmp(k.borrow()) {
      .                           Ordering::Greater => {}
      .                           Ordering::Equal => return IndexResult::KV(start_index + offset),
      .                           Ordering::Less => return IndexResult::Edge(start_index + offset),
      .                       }
      .                   }
      .                   IndexResult::Edge(keys.len())
      .               }
      .           
-- line 219 ----------------------------------------

114,822 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs
--------------------------------------------------------------------------------
Ir               

-- line 198 ----------------------------------------
      .                   }
      .           
      .                   #[inline]
      .                   #[allow(arithmetic_overflow)]
      .                   #[rustc_inherit_overflow_checks]
      .                   fn forward(start: Self, n: usize) -> Self {
      .                       // In debug builds, trigger a panic on overflow.
      .                       // This should optimize completely out in release builds.
  4,513 ( 0.00%)              if Self::forward_checked(start, n).is_none() {
      .                           let _ = Self::MAX + 1;
      .                       }
      .                       // Do wrapping math to allow e.g. `Step::forward(-128i8, 255)`.
      .                       start.wrapping_add(n as Self)
      .                   }
      .           
      .                   #[inline]
      .                   #[allow(arithmetic_overflow)]
-- line 214 ----------------------------------------
-- line 613 ----------------------------------------
      .           
      .                   if taken < n { Err(taken) } else { Ok(()) }
      .               }
      .           }
      .           
      .           impl<T: TrustedStep> RangeIteratorImpl for ops::Range<T> {
      .               #[inline]
      .               fn spec_next(&mut self) -> Option<T> {
882,197 ( 0.38%)          if self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       Some(mem::replace(&mut self.start, n))
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
-- line 629 ----------------------------------------
-- line 657 ----------------------------------------
      .                   // Otherwise 0 is returned which always safe to use.
      .                   self.start = unsafe { Step::forward_unchecked(self.start.clone(), taken) };
      .           
      .                   if taken < n { Err(taken) } else { Ok(()) }
      .               }
      .           
      .               #[inline]
      .               fn spec_next_back(&mut self) -> Option<T> {
 20,679 ( 0.01%)          if self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       self.end = unsafe { Step::backward_unchecked(self.end.clone(), 1) };
      .                       Some(self.end.clone())
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
-- line 673 ----------------------------------------
-- line 708 ----------------------------------------
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
      .                   self.spec_next()
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
 27,474 ( 0.01%)          if self.start < self.end {
      .                       let hint = Step::steps_between(&self.start, &self.end);
      .                       (hint.unwrap_or(usize::MAX), hint)
      .                   } else {
      .                       (0, Some(0))
      .                   }
      .               }
      .           
      .               #[inline]
-- line 724 ----------------------------------------
-- line 857 ----------------------------------------
      .           impl<A: Step> FusedIterator for ops::Range<A> {}
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<A: Step> Iterator for ops::RangeFrom<A> {
      .               type Item = A;
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
  1,571 ( 0.00%)          let n = Step::forward(self.start.clone(), 1);
      .                   Some(mem::replace(&mut self.start, n))
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   (usize::MAX, None)
      .               }
      .           
-- line 873 ----------------------------------------
-- line 998 ----------------------------------------
      .           
      .                   try { accum }
      .               }
      .           }
      .           
      .           impl<T: TrustedStep> RangeInclusiveIteratorImpl for ops::RangeInclusive<T> {
      .               #[inline]
      .               fn spec_next(&mut self) -> Option<T> {
 10,789 ( 0.00%)          if self.is_empty() {
      .                       return None;
      .                   }
      .                   let is_iterating = self.start < self.end;
  7,520 ( 0.00%)          Some(if is_iterating {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       mem::replace(&mut self.start, n)
      .                   } else {
      .                       self.exhausted = true;
      .                       self.start.clone()
      .                   })
      .               }
-- line 1018 ----------------------------------------
-- line 1025 ----------------------------------------
      .                   R: Try<Output = B>,
      .               {
      .                   if self.is_empty() {
      .                       return try { init };
      .                   }
      .           
      .                   let mut accum = init;
      .           
  3,111 ( 0.00%)          while self.start < self.end {
      .                       // SAFETY: just checked precondition
      .                       let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
      .                       let n = mem::replace(&mut self.start, n);
      .                       accum = f(accum, n)?;
      .                   }
      .           
      .                   self.exhausted = true;
      .           
    251 ( 0.00%)          if self.start == self.end {
      .                       accum = f(accum, self.start.clone())?;
      .                   }
      .           
      .                   try { accum }
      .               }
      .           
      .               #[inline]
      .               fn spec_next_back(&mut self) -> Option<T> {
-- line 1050 ----------------------------------------
-- line 1098 ----------------------------------------
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
      .                   self.spec_next()
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
  2,856 ( 0.00%)          if self.is_empty() {
      .                       return (0, Some(0));
      .                   }
      .           
      .                   match Step::steps_between(&self.start, &self.end) {
      .                       Some(hint) => (hint.saturating_add(1), hint.checked_add(1)),
      .                       None => (usize::MAX, None),
      .                   }
      .               }
-- line 1114 ----------------------------------------

149,625 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/range.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs
--------------------------------------------------------------------------------
Ir               

-- line 72 ----------------------------------------
      .                   fn deref(&self) -> &Self::Target {
      .                       &self.0
      .                   }
      .               }
      .           
      .               impl<T> !DerefMut for MonotonicVec<T> {}
      .           }
      .           
    705 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, Copy, HashStable_Generic)]
      .           pub struct Spanned<T> {
      .               pub node: T,
      .               pub span: Span,
      .           }
      .           
      .           pub fn respan<T>(sp: Span, t: T) -> Spanned<T> {
    988 ( 0.00%)      Spanned { node: t, span: sp }
  2,691 ( 0.00%)  }
      .           
      .           pub fn dummy_spanned<T>(t: T) -> Spanned<T> {
      .               respan(DUMMY_SP, t)
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // SourceFile, MultiByteChar, FileName, FileLines
      .           //
-- line 96 ----------------------------------------
-- line 107 ----------------------------------------
      .           /// A FileLoader that uses std::fs to load real files.
      .           pub struct RealFileLoader;
      .           
      .           impl FileLoader for RealFileLoader {
      .               fn file_exists(&self, path: &Path) -> bool {
      .                   path.exists()
      .               }
      .           
      2 ( 0.00%)      fn read_file(&self, path: &Path) -> io::Result<String> {
      .                   fs::read_to_string(path)
      3 ( 0.00%)      }
      .           }
      .           
      .           /// This is a [SourceFile] identifier that is used to correlate source files between
      .           /// subsequent compilation sessions (which is something we need to do during
      .           /// incremental compilation).
      .           ///
      .           /// The [StableSourceFileId] also contains the CrateNum of the crate the source
      .           /// file was originally parsed for. This way we get two separate entries in
-- line 125 ----------------------------------------
-- line 128 ----------------------------------------
      .           /// at the point where we discover that there's a local use of the file in
      .           /// addition to the upstream one, we might already have made decisions based on
      .           /// the assumption that it's an upstream file. Treating the two files as
      .           /// different has no real downsides.
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Encodable, Decodable, Debug)]
      .           pub struct StableSourceFileId {
      .               // A hash of the source file's FileName. This is hash so that it's size
      .               // is more predictable than if we included the actual FileName value.
     54 ( 0.00%)      pub file_name_hash: u64,
      .           
      .               // The CrateNum of the crate this source file was originally parsed for.
      .               // We cannot include this information in the hash because at the time
      .               // of hashing we don't have the context to map from the CrateNum's numeric
      .               // value to a StableCrateId.
      .               pub cnum: CrateNum,
      .           }
      .           
      .           // FIXME: we need a more globally consistent approach to the problem solved by
      .           // StableSourceFileId, perhaps built atop source_file.name_hash.
      .           impl StableSourceFileId {
      .               pub fn new(source_file: &SourceFile) -> StableSourceFileId {
  1,282 ( 0.00%)          StableSourceFileId::new_from_name(&source_file.name, source_file.cnum)
      .               }
      .           
  3,210 ( 0.00%)      fn new_from_name(name: &FileName, cnum: CrateNum) -> StableSourceFileId {
      .                   let mut hasher = StableHasher::new();
    642 ( 0.00%)          name.hash(&mut hasher);
      .                   StableSourceFileId { file_name_hash: hasher.finish(), cnum }
  3,852 ( 0.00%)      }
      .           }
      .           
      .           // _____________________________________________________________________________
      .           // SourceMap
      .           //
      .           
      .           #[derive(Default)]
      .           pub(super) struct SourceMapFiles {
-- line 164 ----------------------------------------
-- line 184 ----------------------------------------
      .               pub fn new(path_mapping: FilePathMapping) -> SourceMap {
      .                   Self::with_file_loader_and_hash_kind(
      .                       Box::new(RealFileLoader),
      .                       path_mapping,
      .                       SourceFileHashAlgorithm::Md5,
      .                   )
      .               }
      .           
      1 ( 0.00%)      pub fn with_file_loader_and_hash_kind(
      .                   file_loader: Box<dyn FileLoader + Sync + Send>,
      .                   path_mapping: FilePathMapping,
      .                   hash_kind: SourceFileHashAlgorithm,
      .               ) -> SourceMap {
      5 ( 0.00%)          SourceMap {
      .                       used_address_space: AtomicU32::new(0),
      .                       files: Default::default(),
      .                       file_loader,
      4 ( 0.00%)              path_mapping,
      .                       hash_kind,
      .                   }
      1 ( 0.00%)      }
      .           
      .               pub fn path_mapping(&self) -> &FilePathMapping {
      3 ( 0.00%)          &self.path_mapping
      3 ( 0.00%)      }
      .           
      .               pub fn file_exists(&self, path: &Path) -> bool {
      .                   self.file_loader.file_exists(path)
      .               }
      .           
     11 ( 0.00%)      pub fn load_file(&self, path: &Path) -> io::Result<Lrc<SourceFile>> {
      4 ( 0.00%)          let src = self.file_loader.read_file(path)?;
      .                   let filename = path.to_owned().into();
     18 ( 0.00%)          Ok(self.new_source_file(filename, src))
      9 ( 0.00%)      }
      .           
      .               /// Loads source file as a binary blob.
      .               ///
      .               /// Unlike `load_file`, guarantees that no normalization like BOM-removal
      .               /// takes place.
      .               pub fn load_binary_file(&self, path: &Path) -> io::Result<Vec<u8>> {
      .                   // Ideally, this should use `self.file_loader`, but it can't
      .                   // deal with binary files yet.
-- line 226 ----------------------------------------
-- line 233 ----------------------------------------
      .                   // empty string.
      .                   let text = std::str::from_utf8(&bytes).unwrap_or("").to_string();
      .                   self.new_source_file(path.to_owned().into(), text);
      .                   Ok(bytes)
      .               }
      .           
      .               // By returning a `MonotonicVec`, we ensure that consumers cannot invalidate
      .               // any existing indices pointing into `files`.
     12 ( 0.00%)      pub fn files(&self) -> MappedReadGuard<'_, monotonic::MonotonicVec<Lrc<SourceFile>>> {
      .                   ReadGuard::map(self.files.borrow(), |files| &files.source_files)
     36 ( 0.00%)      }
      .           
      4 ( 0.00%)      pub fn source_file_by_stable_id(
      .                   &self,
      .                   stable_id: StableSourceFileId,
      .               ) -> Option<Lrc<SourceFile>> {
      .                   self.files.borrow().stable_id_to_source_file.get(&stable_id).cloned()
      5 ( 0.00%)      }
      .           
      .               fn allocate_address_space(&self, size: usize) -> Result<usize, OffsetOverflowError> {
    642 ( 0.00%)          let size = u32::try_from(size).map_err(|_| OffsetOverflowError)?;
      .           
      .                   loop {
    642 ( 0.00%)              let current = self.used_address_space.load(Ordering::Relaxed);
  1,926 ( 0.00%)              let next = current
      .                           .checked_add(size)
      .                           // Add one so there is some space between files. This lets us distinguish
      .                           // positions in the `SourceMap`, even in the presence of zero-length files.
      .                           .and_then(|next| next.checked_add(1))
      .                           .ok_or(OffsetOverflowError)?;
      .           
      .                       if self
      .                           .used_address_space
-- line 265 ----------------------------------------
-- line 269 ----------------------------------------
      .                           return Ok(usize::try_from(current).unwrap());
      .                       }
      .                   }
      .               }
      .           
      .               /// Creates a new `SourceFile`.
      .               /// If a file already exists in the `SourceMap` with the same ID, that file is returned
      .               /// unmodified.
      8 ( 0.00%)      pub fn new_source_file(&self, filename: FileName, src: String) -> Lrc<SourceFile> {
     12 ( 0.00%)          self.try_new_source_file(filename, src).unwrap_or_else(|OffsetOverflowError| {
      .                       eprintln!("fatal error: rustc does not support files larger than 4GB");
      .                       crate::fatal_error::FatalError.raise()
      .                   })
      9 ( 0.00%)      }
      .           
      .               fn try_new_source_file(
      .                   &self,
      .                   filename: FileName,
      .                   src: String,
      .               ) -> Result<Lrc<SourceFile>, OffsetOverflowError> {
      .                   // Note that filename may not be a valid path, eg it may be `<anon>` etc,
      .                   // but this is okay because the directory determined by `path.pop()` will
      .                   // be empty, so the working directory will be used.
     13 ( 0.00%)          let (filename, _) = self.path_mapping.map_filename_prefix(&filename);
      .           
      2 ( 0.00%)          let file_id = StableSourceFileId::new_from_name(&filename, LOCAL_CRATE);
      .           
      6 ( 0.00%)          let lrc_sf = match self.source_file_by_stable_id(file_id) {
      .                       Some(lrc_sf) => lrc_sf,
      .                       None => {
      .                           let start_pos = self.allocate_address_space(src.len())?;
      .           
      6 ( 0.00%)                  let source_file = Lrc::new(SourceFile::new(
      9 ( 0.00%)                      filename,
      3 ( 0.00%)                      src,
      .                               Pos::from_usize(start_pos),
      .                               self.hash_kind,
      .                           ));
      .           
      .                           // Let's make sure the file_id we generated above actually matches
      .                           // the ID we generate for the SourceFile we just created.
      .                           debug_assert_eq!(StableSourceFileId::new(&source_file), file_id);
      .           
-- line 311 ----------------------------------------
-- line 319 ----------------------------------------
      .                   };
      .                   Ok(lrc_sf)
      .               }
      .           
      .               /// Allocates a new `SourceFile` representing a source file from an external
      .               /// crate. The source code of such an "imported `SourceFile`" is not available,
      .               /// but we still know enough to generate accurate debuginfo location
      .               /// information for things inlined from other crates.
  5,128 ( 0.00%)      pub fn new_imported_source_file(
      .                   &self,
      .                   filename: FileName,
      .                   src_hash: SourceFileHash,
      .                   name_hash: u128,
      .                   source_len: usize,
      .                   cnum: CrateNum,
      .                   mut file_local_lines: Vec<BytePos>,
      .                   mut file_local_multibyte_chars: Vec<MultiByteChar>,
-- line 335 ----------------------------------------
-- line 341 ----------------------------------------
      .                   let start_pos = self
      .                       .allocate_address_space(source_len)
      .                       .expect("not enough address space for imported source file");
      .           
      .                   let end_pos = Pos::from_usize(start_pos + source_len);
      .                   let start_pos = Pos::from_usize(start_pos);
      .           
      .                   for pos in &mut file_local_lines {
405,967 ( 0.18%)              *pos = *pos + start_pos;
      .                   }
      .           
      .                   for mbc in &mut file_local_multibyte_chars {
    895 ( 0.00%)              mbc.pos = mbc.pos + start_pos;
      .                   }
      .           
      .                   for swc in &mut file_local_non_narrow_chars {
    620 ( 0.00%)              *swc = *swc + start_pos;
      .                   }
      .           
      .                   for nc in &mut file_local_normalized_pos {
  2,025 ( 0.00%)              nc.pos = nc.pos + start_pos;
      .                   }
      .           
  1,923 ( 0.00%)          let source_file = Lrc::new(SourceFile {
  5,128 ( 0.00%)              name: filename,
      .                       src: None,
      .                       src_hash,
      .                       external_src: Lock::new(ExternalSource::Foreign {
      .                           kind: ExternalSourceKind::AbsentOk,
      .                           original_start_pos,
      .                           original_end_pos,
      .                       }),
      .                       start_pos,
-- line 373 ----------------------------------------
-- line 383 ----------------------------------------
      .                   let mut files = self.files.borrow_mut();
      .           
      .                   files.source_files.push(source_file.clone());
      .                   files
      .                       .stable_id_to_source_file
      .                       .insert(StableSourceFileId::new(&source_file), source_file.clone());
      .           
      .                   source_file
  5,769 ( 0.00%)      }
      .           
      .               // If there is a doctest offset, applies it to the line.
      .               pub fn doctest_offset_line(&self, file: &FileName, orig: usize) -> usize {
      .                   match file {
      .                       FileName::DocTest(_, offset) => {
      .                           if *offset < 0 {
      .                               orig - (-(*offset)) as usize
      .                           } else {
-- line 399 ----------------------------------------
-- line 400 ----------------------------------------
      .                               orig + *offset as usize
      .                           }
      .                       }
      .                       _ => orig,
      .                   }
      .               }
      .           
      .               /// Return the SourceFile that contains the given `BytePos`
     15 ( 0.00%)      pub fn lookup_source_file(&self, pos: BytePos) -> Lrc<SourceFile> {
      5 ( 0.00%)          let idx = self.lookup_source_file_idx(pos);
      5 ( 0.00%)          (*self.files.borrow().source_files)[idx].clone()
     15 ( 0.00%)      }
      .           
      .               /// Looks up source information about a `BytePos`.
     24 ( 0.00%)      pub fn lookup_char_pos(&self, pos: BytePos) -> Loc {
     25 ( 0.00%)          let sf = self.lookup_source_file(pos);
     22 ( 0.00%)          let (line, col, col_display) = sf.lookup_file_pos_with_col_display(pos);
     15 ( 0.00%)          Loc { file: sf, line, col, col_display }
     24 ( 0.00%)      }
      .           
      .               // If the corresponding `SourceFile` is empty, does not return a line number.
      .               pub fn lookup_line(&self, pos: BytePos) -> Result<SourceFileAndLine, Lrc<SourceFile>> {
      .                   let f = self.lookup_source_file(pos);
      .           
      .                   match f.lookup_line(pos) {
      .                       Some(line) => Ok(SourceFileAndLine { sf: f, line }),
      .                       None => Err(f),
-- line 426 ----------------------------------------
-- line 451 ----------------------------------------
      .           
      .               /// Format the span location to be printed in diagnostics. Must not be emitted
      .               /// to build artifacts as this may leak local file paths. Use span_to_embeddable_string
      .               /// for string suitable for embedding.
      .               pub fn span_to_diagnostic_string(&self, sp: Span) -> String {
      .                   self.span_to_string(sp, self.path_mapping.filename_display_for_diagnostics)
      .               }
      .           
     11 ( 0.00%)      pub fn span_to_filename(&self, sp: Span) -> FileName {
      3 ( 0.00%)          self.lookup_char_pos(sp.lo()).file.name.clone()
      8 ( 0.00%)      }
      .           
      .               pub fn filename_for_diagnostics<'a>(&self, filename: &'a FileName) -> FileNameDisplay<'a> {
      .                   filename.display(self.path_mapping.filename_display_for_diagnostics)
      .               }
      .           
    561 ( 0.00%)      pub fn is_multiline(&self, sp: Span) -> bool {
    204 ( 0.00%)          let lo = self.lookup_source_file_idx(sp.lo());
    204 ( 0.00%)          let hi = self.lookup_source_file_idx(sp.hi());
    102 ( 0.00%)          if lo != hi {
      .                       return true;
      .                   }
    102 ( 0.00%)          let f = (*self.files.borrow().source_files)[lo].clone();
      .                   f.lookup_line(sp.lo()) != f.lookup_line(sp.hi())
    459 ( 0.00%)      }
      .           
      .               #[instrument(skip(self), level = "trace")]
      .               pub fn is_valid_span(&self, sp: Span) -> Result<(Loc, Loc), SpanLinesError> {
      .                   let lo = self.lookup_char_pos(sp.lo());
      .                   trace!(?lo);
      .                   let hi = self.lookup_char_pos(sp.hi());
      .                   trace!(?hi);
      .                   if lo.file.start_pos != hi.file.start_pos {
-- line 483 ----------------------------------------
-- line 533 ----------------------------------------
      .           
      .               /// Extracts the source surrounding the given `Span` using the `extract_source` function. The
      .               /// extract function takes three arguments: a string slice containing the source, an index in
      .               /// the slice for the beginning of the span and an index in the slice for the end of the span.
      .               fn span_to_source<F, T>(&self, sp: Span, extract_source: F) -> Result<T, SpanSnippetError>
      .               where
      .                   F: Fn(&str, usize, usize) -> Result<T, SpanSnippetError>,
      .               {
    140 ( 0.00%)          let local_begin = self.lookup_byte_offset(sp.lo());
    140 ( 0.00%)          let local_end = self.lookup_byte_offset(sp.hi());
      .           
     40 ( 0.00%)          if local_begin.sf.start_pos != local_end.sf.start_pos {
      .                       Err(SpanSnippetError::DistinctSources(DistinctSources {
      .                           begin: (local_begin.sf.name.clone(), local_begin.sf.start_pos),
      .                           end: (local_end.sf.name.clone(), local_end.sf.start_pos),
      .                       }))
      .                   } else {
      .                       self.ensure_source_file_source_present(local_begin.sf.clone());
      .           
      .                       let start_index = local_begin.pos.to_usize();
      .                       let end_index = local_end.pos.to_usize();
     20 ( 0.00%)              let source_len = (local_begin.sf.end_pos - local_begin.sf.start_pos).to_usize();
      .           
     80 ( 0.00%)              if start_index > end_index || end_index > source_len {
      .                           return Err(SpanSnippetError::MalformedForSourcemap(MalformedSourceMapPositions {
      .                               name: local_begin.sf.name.clone(),
      .                               source_len,
      .                               begin_pos: local_begin.pos,
      .                               end_pos: local_end.pos,
      .                           }));
      .                       }
      .           
     60 ( 0.00%)              if let Some(ref src) = local_begin.sf.src {
      .                           extract_source(src, start_index, end_index)
      .                       } else if let Some(src) = local_begin.sf.external_src.borrow().get_source() {
      .                           extract_source(src, start_index, end_index)
      .                       } else {
      .                           Err(SpanSnippetError::SourceNotAvailable { filename: local_begin.sf.name.clone() })
      .                       }
      .                   }
      .               }
-- line 573 ----------------------------------------
-- line 579 ----------------------------------------
      .               pub fn is_local_span(&self, sp: Span) -> bool {
      .                   let local_begin = self.lookup_byte_offset(sp.lo());
      .                   let local_end = self.lookup_byte_offset(sp.hi());
      .                   // This might be a weird span that covers multiple files
      .                   local_begin.sf.src.is_some() && local_end.sf.src.is_some()
      .               }
      .           
      .               /// Returns the source snippet as `String` corresponding to the given `Span`.
    240 ( 0.00%)      pub fn span_to_snippet(&self, sp: Span) -> Result<String, SpanSnippetError> {
      .                   self.span_to_source(sp, |src, start_index, end_index| {
      .                       src.get(start_index..end_index)
      .                           .map(|s| s.to_string())
      .                           .ok_or(SpanSnippetError::IllFormedSpan(sp))
      .                   })
    180 ( 0.00%)      }
      .           
      .               pub fn span_to_margin(&self, sp: Span) -> Option<usize> {
      .                   Some(self.indentation_before(sp)?.len())
      .               }
      .           
      .               pub fn indentation_before(&self, sp: Span) -> Option<String> {
      .                   self.span_to_source(sp, |src, start_index, _| {
      .                       let before = &src[..start_index];
-- line 601 ----------------------------------------
-- line 679 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   sp
      .               }
      .           
      .               /// Given a `Span`, tries to get a shorter span ending before the first occurrence of `char`
      .               /// `c`.
     88 ( 0.00%)      pub fn span_until_char(&self, sp: Span, c: char) -> Span {
     32 ( 0.00%)          match self.span_to_snippet(sp) {
     32 ( 0.00%)              Ok(snippet) => {
      .                           let snippet = snippet.split(c).next().unwrap_or("").trim_end();
     16 ( 0.00%)                  if !snippet.is_empty() && !snippet.contains('\n') {
     35 ( 0.00%)                      sp.with_hi(BytePos(sp.lo().0 + snippet.len() as u32))
      .                           } else {
      .                               sp
      .                           }
      .                       }
      .                       _ => sp,
      .                   }
     72 ( 0.00%)      }
      .           
      .               /// Given a `Span`, tries to get a shorter span ending just after the first occurrence of `char`
      .               /// `c`.
      .               pub fn span_through_char(&self, sp: Span, c: char) -> Span {
      .                   if let Ok(snippet) = self.span_to_snippet(sp) {
      .                       if let Some(offset) = snippet.find(c) {
      .                           return sp.with_hi(BytePos(sp.lo().0 + (offset + c.len_utf8()) as u32));
      .                       }
-- line 707 ----------------------------------------
-- line 750 ----------------------------------------
      .               /// Given a `Span`, return a span ending in the closest `{`. This is useful when you have a
      .               /// `Span` enclosing a whole item but we need to point at only the head (usually the first
      .               /// line) of that item.
      .               ///
      .               /// *Only suitable for diagnostics.*
      .               pub fn guess_head_span(&self, sp: Span) -> Span {
      .                   // FIXME: extend the AST items to have a head span, or replace callers with pointing at
      .                   // the item's ident when appropriate.
     16 ( 0.00%)          self.span_until_char(sp, '{')
      .               }
      .           
      .               /// Returns a new span representing just the first character of the given span.
     84 ( 0.00%)      pub fn start_point(&self, sp: Span) -> Span {
      .                   let width = {
      .                       let sp = sp.data();
     35 ( 0.00%)              let local_begin = self.lookup_byte_offset(sp.lo);
      .                       let start_index = local_begin.pos.to_usize();
      .                       let src = local_begin.sf.external_src.borrow();
      .           
     21 ( 0.00%)              let snippet = if let Some(ref src) = local_begin.sf.src {
      .                           Some(&src[start_index..])
      .                       } else if let Some(src) = src.get_source() {
      .                           Some(&src[start_index..])
      .                       } else {
      .                           None
      .                       };
      .           
      7 ( 0.00%)              match snippet {
      .                           None => 1,
      .                           Some(snippet) => match snippet.chars().next() {
      .                               None => 1,
      .                               Some(c) => c.len_utf8(),
      .                           },
      .                       }
      .                   };
      .           
     84 ( 0.00%)          sp.with_hi(BytePos(sp.lo().0 + width as u32))
      .               }
      .           
      .               /// Returns a new span representing just the last character of this span.
  9,744 ( 0.00%)      pub fn end_point(&self, sp: Span) -> Span {
      .                   let pos = sp.hi().0;
      .           
  3,248 ( 0.00%)          let width = self.find_width_of_character_at_span(sp, false);
      .                   let corrected_end_position = pos.checked_sub(width).unwrap_or(pos);
      .           
      .                   let end_point = BytePos(cmp::max(corrected_end_position, sp.lo().0));
  8,120 ( 0.00%)          sp.with_lo(end_point)
      .               }
      .           
      .               /// Returns a new span representing the next character after the end-point of this span.
    165 ( 0.00%)      pub fn next_point(&self, sp: Span) -> Span {
     15 ( 0.00%)          if sp.is_dummy() {
      .                       return sp;
      .                   }
      .                   let start_of_next_point = sp.hi().0;
      .           
     60 ( 0.00%)          let width = self.find_width_of_character_at_span(sp.shrink_to_hi(), true);
      .                   // If the width is 1, then the next span should point to the same `lo` and `hi`. However,
      .                   // in the case of a multibyte character, where the width != 1, the next span should
      .                   // span multiple bytes to include the whole character.
      .                   let end_of_next_point =
     30 ( 0.00%)              start_of_next_point.checked_add(width - 1).unwrap_or(start_of_next_point);
      .           
     30 ( 0.00%)          let end_of_next_point = BytePos(cmp::max(sp.lo().0 + 1, end_of_next_point));
      .                   Span::new(BytePos(start_of_next_point), end_of_next_point, sp.ctxt(), None)
    135 ( 0.00%)      }
      .           
      .               /// Finds the width of the character, either before or after the end of provided span,
      .               /// depending on the `forwards` parameter.
  9,924 ( 0.00%)      fn find_width_of_character_at_span(&self, sp: Span, forwards: bool) -> u32 {
      .                   let sp = sp.data();
    827 ( 0.00%)          if sp.lo == sp.hi {
      .                       debug!("find_width_of_character_at_span: early return empty span");
      .                       return 1;
      .                   }
      .           
  5,684 ( 0.00%)          let local_begin = self.lookup_byte_offset(sp.lo);
  7,308 ( 0.00%)          let local_end = self.lookup_byte_offset(sp.hi);
      .                   debug!(
      .                       "find_width_of_character_at_span: local_begin=`{:?}`, local_end=`{:?}`",
      .                       local_begin, local_end
      .                   );
      .           
  1,624 ( 0.00%)          if local_begin.sf.start_pos != local_end.sf.start_pos {
      .                       debug!("find_width_of_character_at_span: begin and end are in different files");
      .                       return 1;
      .                   }
      .           
      .                   let start_index = local_begin.pos.to_usize();
      .                   let end_index = local_end.pos.to_usize();
      .                   debug!(
      .                       "find_width_of_character_at_span: start_index=`{:?}`, end_index=`{:?}`",
      .                       start_index, end_index
      .                   );
      .           
      .                   // Disregard indexes that are at the start or end of their spans, they can't fit bigger
      .                   // characters.
  3,248 ( 0.00%)          if (!forwards && end_index == usize::MIN) || (forwards && start_index == usize::MAX) {
      .                       debug!("find_width_of_character_at_span: start or end of span, cannot be multibyte");
      .                       return 1;
      .                   }
      .           
    812 ( 0.00%)          let source_len = (local_begin.sf.end_pos - local_begin.sf.start_pos).to_usize();
      .                   debug!("find_width_of_character_at_span: source_len=`{:?}`", source_len);
      .                   // Ensure indexes are also not malformed.
  3,248 ( 0.00%)          if start_index > end_index || end_index > source_len {
      .                       debug!("find_width_of_character_at_span: source indexes are malformed");
      .                       return 1;
      .                   }
      .           
      .                   let src = local_begin.sf.external_src.borrow();
      .           
      .                   // We need to extend the snippet to the end of the src rather than to end_index so when
      .                   // searching forwards for boundaries we've got somewhere to search.
  2,436 ( 0.00%)          let snippet = if let Some(ref src) = local_begin.sf.src {
      .                       &src[start_index..]
    216 ( 0.00%)          } else if let Some(src) = src.get_source() {
      .                       &src[start_index..]
      .                   } else {
      .                       return 1;
      .                   };
      .                   debug!("find_width_of_character_at_span: snippet=`{:?}`", snippet);
      .           
  3,576 ( 0.00%)          let mut target = if forwards { end_index + 1 } else { end_index - 1 };
      .                   debug!("find_width_of_character_at_span: initial target=`{:?}`", target);
      .           
  2,384 ( 0.00%)          while !snippet.is_char_boundary(target - start_index) && target < source_len {
      .                       target = if forwards {
      .                           target + 1
      .                       } else {
      .                           match target.checked_sub(1) {
      .                               Some(target) => target,
      .                               None => {
      .                                   break;
      .                               }
      .                           }
      .                       };
      .                       debug!("find_width_of_character_at_span: target=`{:?}`", target);
      .                   }
      .                   debug!("find_width_of_character_at_span: final target=`{:?}`", target);
      .           
  2,384 ( 0.00%)          if forwards { (target - end_index) as u32 } else { (end_index - target) as u32 }
  7,443 ( 0.00%)      }
      .           
      .               pub fn get_source_file(&self, filename: &FileName) -> Option<Lrc<SourceFile>> {
      .                   // Remap filename before lookup
      .                   let filename = self.path_mapping().map_filename_prefix(filename).0;
      .                   for sf in self.files.borrow().source_files.iter() {
      .                       if filename == sf.name {
      .                           return Some(sf.clone());
      .                       }
      .                   }
      .                   None
      .               }
      .           
      .               /// For a global `BytePos`, computes the local offset within the containing `SourceFile`.
  8,355 ( 0.00%)      pub fn lookup_byte_offset(&self, bpos: BytePos) -> SourceFileAndBytePos {
  1,671 ( 0.00%)          let idx = self.lookup_source_file_idx(bpos);
  3,342 ( 0.00%)          let sf = (*self.files.borrow().source_files)[idx].clone();
      .                   let offset = bpos - sf.start_pos;
      .                   SourceFileAndBytePos { sf, pos: offset }
  8,355 ( 0.00%)      }
      .           
      .               // Returns the index of the `SourceFile` (in `self.files`) that contains `pos`.
      .               // This index is guaranteed to be valid for the lifetime of this `SourceMap`,
      .               // since `source_files` is a `MonotonicVec`
  5,853 ( 0.00%)      pub fn lookup_source_file_idx(&self, pos: BytePos) -> usize {
      .                   self.files
      .                       .borrow()
      .                       .source_files
      .                       .binary_search_by_key(&pos, |key| key.start_pos)
  3,900 ( 0.00%)              .unwrap_or_else(|p| p - 1)
  7,804 ( 0.00%)      }
      .           
      .               pub fn count_lines(&self) -> usize {
      .                   self.files().iter().fold(0, |a, f| a + f.count_lines())
      .               }
      .           
      .               pub fn generate_fn_name_span(&self, span: Span) -> Option<Span> {
      .                   let prev_span = self.span_extend_to_prev_str(span, "fn", true);
      .                   if let Ok(snippet) = self.span_to_snippet(prev_span) {
-- line 931 ----------------------------------------
-- line 1010 ----------------------------------------
      .           
      .                           return Some((sugg_span, new_snippet));
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .               pub fn ensure_source_file_source_present(&self, source_file: Lrc<SourceFile>) -> bool {
    140 ( 0.00%)          source_file.add_external_src(|| {
      .                       match source_file.name {
      .                           FileName::Real(ref name) if let Some(local_path) = name.local_path() => {
      .                               self.file_loader.read_file(local_path).ok()
      .                           }
      .                           _ => None,
      .                       }
      .                   })
      .               }
-- line 1026 ----------------------------------------
-- line 1053 ----------------------------------------
      .                   let span = span.shrink_to_hi().with_hi(BytePos(span.hi().0.checked_add(1)?));
      .                   if self.span_to_snippet(span).as_deref() != Ok(";") {
      .                       return None;
      .                   }
      .                   Some(span)
      .               }
      .           }
      .           
      8 ( 0.00%)  #[derive(Clone)]
      .           pub struct FilePathMapping {
      4 ( 0.00%)      mapping: Vec<(PathBuf, PathBuf)>,
      2 ( 0.00%)      filename_display_for_diagnostics: FileNameDisplayPreference,
      .           }
      .           
      .           impl FilePathMapping {
      .               pub fn empty() -> FilePathMapping {
      .                   FilePathMapping::new(Vec::new())
      .               }
      .           
      3 ( 0.00%)      pub fn new(mapping: Vec<(PathBuf, PathBuf)>) -> FilePathMapping {
      .                   let filename_display_for_diagnostics = if mapping.is_empty() {
      .                       FileNameDisplayPreference::Local
      .                   } else {
      .                       FileNameDisplayPreference::Remapped
      .                   };
      .           
     12 ( 0.00%)          FilePathMapping { mapping, filename_display_for_diagnostics }
      3 ( 0.00%)      }
      .           
      .               /// Applies any path prefix substitution as defined by the mapping.
      .               /// The return value is the remapped path and a boolean indicating whether
      .               /// the path was affected by the mapping.
     45 ( 0.00%)      pub fn map_prefix(&self, path: PathBuf) -> (PathBuf, bool) {
      .                   // NOTE: We are iterating over the mapping entries from last to first
      .                   //       because entries specified later on the command line should
      .                   //       take precedence.
      .                   for &(ref from, ref to) in self.mapping.iter().rev() {
      .                       if let Ok(rest) = path.strip_prefix(from) {
      .                           return (to.join(rest), true);
      .                       }
      .                   }
      .           
     25 ( 0.00%)          (path, false)
     45 ( 0.00%)      }
      .           
      8 ( 0.00%)      fn map_filename_prefix(&self, file: &FileName) -> (FileName, bool) {
      2 ( 0.00%)          match file {
      2 ( 0.00%)              FileName::Real(realfile) if let RealFileName::LocalPath(local_path) = realfile => {
     14 ( 0.00%)                  let (mapped_path, mapped) = self.map_prefix(local_path.to_path_buf());
      1 ( 0.00%)                  let realfile = if mapped {
      .                               RealFileName::Remapped {
      .                                   local_path: Some(local_path.clone()),
      .                                   virtual_name: mapped_path,
      .                               }
      .                           } else {
      .                               realfile.clone()
      .                           };
     10 ( 0.00%)                  (FileName::Real(realfile), mapped)
      4 ( 0.00%)              }
      .                       FileName::Real(_) => unreachable!("attempted to remap an already remapped filename"),
      .                       other => (other.clone(), false),
      .                   }
      .               }
      .           }

 10,197 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/source_map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs
--------------------------------------------------------------------------------
Ir              

-- line 42 ----------------------------------------
     .           /// `stack_size` bytes.
     .           ///
     .           /// The closure `f` is guaranteed to run on a stack with at least `red_zone` bytes, and it will be
     .           /// run on the current stack if there's space available.
     .           #[inline(always)]
     .           pub fn maybe_grow<R, F: FnOnce() -> R>(red_zone: usize, stack_size: usize, callback: F) -> R {
     .               // if we can't guess the remaining stack (unsupported on some platforms) we immediately grow
     .               // the stack and then cache the new stack size (which we do know now because we allocated it.
51,824 ( 0.02%)      let enough_space = match remaining_stack() {
     .                   Some(remaining) => remaining >= red_zone,
     .                   None => false,
     .               };
69,783 ( 0.03%)      if enough_space {
 3,286 ( 0.00%)          callback()
     .               } else {
     .                   grow(stack_size, callback)
     .               }
     .           }
     .           
     .           /// Always creates a new stack for the passed closure to run on.
     .           /// The closure will still be on the same thread as the caller of `grow`.
     .           /// This will allocate a new stack with at least `stack_size` bytes.
-- line 63 ----------------------------------------
-- line 82 ----------------------------------------
     .               _grow(stack_size, dyn_callback);
     .               ret.unwrap()
     .           }
     .           
     .           /// Queries the amount of remaining stack as interpreted by this library.
     .           ///
     .           /// This function will return the amount of stack space left which will be used
     .           /// to determine whether a stack switch should be made or not.
46,522 ( 0.02%)  pub fn remaining_stack() -> Option<usize> {
     .               let current_ptr = current_stack_ptr();
46,522 ( 0.02%)      get_stack_limit().map(|limit| current_ptr - limit)
93,044 ( 0.04%)  }
     .           
     .           psm_stack_information! (
     .               yes {
     .                   fn current_stack_ptr() -> usize {
46,522 ( 0.02%)              psm::stack_pointer() as usize
     .                   }
     .               }
     .               no {
     .                   #[inline(always)]
     .                   fn current_stack_ptr() -> usize {
     .                       unsafe {
     .                           let mut x = std::mem::MaybeUninit::<u8>::uninit();
     .                           // Unlikely to be ever exercised. As a fallback we execute a volatile read to a
-- line 106 ----------------------------------------
-- line 111 ----------------------------------------
     .                           x.as_ptr() as usize
     .                       }
     .                   }
     .               }
     .           );
     .           
     .           thread_local! {
     .               static STACK_LIMIT: Cell<Option<usize>> = Cell::new(unsafe {
     1 ( 0.00%)          guess_os_stack_limit()
     .               })
     .           }
     .           
     .           #[inline(always)]
     .           fn get_stack_limit() -> Option<usize> {
     .               STACK_LIMIT.with(|s| s.get())
     .           }
     .           
-- line 127 ----------------------------------------
-- line 403 ----------------------------------------
     .                       VirtualQuery(
     .                           psm::stack_pointer() as *const _,
     .                           mi.as_mut_ptr(),
     .                           std::mem::size_of::<QueryT>() as SIZE_T,
     .                       );
     .                       Some(mi.assume_init().AllocationBase as usize + get_thread_stack_guarantee() + 0x1000)
     .                   }
     .               } else if #[cfg(any(target_os = "linux", target_os="solaris", target_os = "netbsd"))] {
     2 ( 0.00%)          unsafe fn guess_os_stack_limit() -> Option<usize> {
     .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
     4 ( 0.00%)              assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
     7 ( 0.00%)              assert_eq!(libc::pthread_getattr_np(libc::pthread_self(),
     .                                                           attr.as_mut_ptr()), 0);
     1 ( 0.00%)              let mut stackaddr = std::ptr::null_mut();
     4 ( 0.00%)              let mut stacksize = 0;
     4 ( 0.00%)              assert_eq!(libc::pthread_attr_getstack(
     .                           attr.as_ptr(), &mut stackaddr, &mut stacksize
     .                       ), 0);
     4 ( 0.00%)              assert_eq!(libc::pthread_attr_destroy(attr.as_mut_ptr()), 0);
     1 ( 0.00%)              Some(stackaddr as usize)
     3 ( 0.00%)          }
     .               } else if #[cfg(any(target_os = "freebsd", target_os = "dragonfly"))] {
     .                   unsafe fn guess_os_stack_limit() -> Option<usize> {
     .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
     .                       assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
     .                       assert_eq!(libc::pthread_attr_get_np(libc::pthread_self(), attr.as_mut_ptr()), 0);
     .                       let mut stackaddr = std::ptr::null_mut();
     .                       let mut stacksize = 0;
     .                       assert_eq!(libc::pthread_attr_getstack(
-- line 431 ----------------------------------------

27,460 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                 

-- line 23 ----------------------------------------
        .           use std::cmp::Ordering;
        .           use std::marker::PhantomData;
        .           use std::ops::Range;
        .           use ty::util::IntTypeExt;
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct TypeAndMut<'tcx> {
       20 ( 0.00%)      pub ty: Ty<'tcx>,
      100 ( 0.00%)      pub mutbl: hir::Mutability,
        .           }
        .           
        .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        .           #[derive(HashStable)]
        .           /// A "free" region `fr` can be interpreted as "some region
        .           /// at least as big as the scope `fr.scope`".
        .           pub struct FreeRegion {
      637 ( 0.00%)      pub scope: DefId,
    1,372 ( 0.00%)      pub bound_region: BoundRegionKind,
        .           }
        .           
   33,268 ( 0.01%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        .           #[derive(HashStable)]
        .           pub enum BoundRegionKind {
        .               /// An anonymous region parameter for a given fn (&T)
    5,298 ( 0.00%)      BrAnon(u32),
        .           
        .               /// Named region parameters for functions (a in &'a T)
        .               ///
        .               /// The `DefId` is needed to distinguish free regions in
        .               /// the event of shadowing.
       66 ( 0.00%)      BrNamed(DefId, Symbol),
        .           
        .               /// Anonymous region for the implicit env pointer parameter
        .               /// to a closure
        .               BrEnv,
        .           }
        .           
       54 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           #[derive(HashStable)]
        .           pub struct BoundRegion {
    5,780 ( 0.00%)      pub var: BoundVar,
    4,580 ( 0.00%)      pub kind: BoundRegionKind,
        .           }
        .           
        .           impl BoundRegionKind {
        .               pub fn is_named(&self) -> bool {
        .                   match *self {
        .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
        .                       _ => false,
        .                   }
        .               }
        .           }
        .           
        .           /// Defines the kinds of types.
        .           ///
        .           /// N.B., if you change this, you'll probably want to change the corresponding
        .           /// AST structure in `rustc_ast/src/ast.rs` as well.
  931,413 ( 0.40%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
        .           #[derive(HashStable)]
        .           #[rustc_diagnostic_item = "TyKind"]
        .           pub enum TyKind<'tcx> {
        .               /// The primitive boolean type. Written as `bool`.
        .               Bool,
        .           
        .               /// The primitive character type; holds a Unicode scalar value
        .               /// (a non-surrogate code point). Written as `char`.
-- line 89 ----------------------------------------
-- line 99 ----------------------------------------
        .               Float(ty::FloatTy),
        .           
        .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
        .               ///
        .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
        .               /// That is, even after substitution it is possible that there are type
        .               /// variables. This happens when the `Adt` corresponds to an ADT
        .               /// definition and not a concrete use of it.
  102,640 ( 0.04%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
        .           
        .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
        .               Foreign(DefId),
        .           
        .               /// The pointee of a string slice. Written as `str`.
        .               Str,
        .           
        .               /// An array with the given length. Written as `[T; n]`.
    3,356 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
        .           
        .               /// The pointee of an array slice. Written as `[T]`.
        .               Slice(Ty<'tcx>),
        .           
        .               /// A raw pointer. Written as `*mut T` or `*const T`
        .               RawPtr(TypeAndMut<'tcx>),
        .           
        .               /// A reference; a pointer with an associated lifetime. Written as
        .               /// `&'a mut T` or `&'a T`.
   82,380 ( 0.04%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
        .           
        .               /// The anonymous type of a function declaration/definition. Each
        .               /// function has a unique type, which is output (for a function
        .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
        .               ///
        .               /// For example the type of `bar` here:
        .               ///
        .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .               ///
        .               /// ```rust
        .               /// fn foo() -> i32 { 1 }
        .               /// let bar: fn() -> i32 = foo;
        .               /// ```
        .               FnPtr(PolyFnSig<'tcx>),
        .           
        .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
    2,920 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
        .           
        .               /// The anonymous type of a closure. Used to represent the type of
        .               /// `|a| a`.
        .               Closure(DefId, SubstsRef<'tcx>),
        .           
        .               /// The anonymous type of a generator. Used to represent the type of
        .               /// `|a| yield a`.
        .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
        .               /// The substitutions are for the generics of the function in question.
        .               /// After typeck, the concrete type can be found in the `types` map.
        .               Opaque(DefId, SubstsRef<'tcx>),
        .           
        .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
        .               Param(ParamTy),
        .           
        .               /// Bound type variable, used only when preparing a trait query.
      338 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
        .           
        .               /// A placeholder type - universally quantified higher-ranked type.
        .               Placeholder(ty::PlaceholderType),
        .           
        .               /// A type variable used during type checking.
        .               Infer(InferTy),
        .           
        .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
        .               pub closure_kind_ty: T,
        .               pub closure_sig_as_fn_ptr_ty: T,
        .               pub tupled_upvars_ty: T,
        .           }
        .           
        .           impl<'tcx> ClosureSubsts<'tcx> {
        .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
        .               /// for the closure parent, alongside additional closure-specific components.
        6 ( 0.00%)      pub fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
        .               ) -> ClosureSubsts<'tcx> {
        .                   ClosureSubsts {
        .                       substs: tcx.mk_substs(
       12 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
       24 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
        .                                   .iter()
        .                                   .map(|&ty| ty.into()),
        .                           ),
        .                       ),
        .                   }
       12 ( 0.00%)      }
        .           
        .               /// Divides the closure substs into their respective components.
        .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
      163 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
        .                   match self.substs[..] {
      900 ( 0.00%)              [
      265 ( 0.00%)                  ref parent_substs @ ..,
      294 ( 0.00%)                  closure_kind_ty,
      105 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
      217 ( 0.00%)                  tupled_upvars_ty,
      652 ( 0.00%)              ] => ClosureSubstsParts {
        .                           parent_substs,
        .                           closure_kind_ty,
        .                           closure_sig_as_fn_ptr_ty,
        .                           tupled_upvars_ty,
        .                       },
        .                       _ => bug!("closure substs missing synthetics"),
        .                   }
      489 ( 0.00%)      }
        .           
        .               /// Returns `true` only if enough of the synthetic types are known to
        .               /// allow using all of the methods on `ClosureSubsts` without panicking.
        .               ///
        .               /// Used primarily by `ty::print::pretty` to be able to handle closure
        .               /// types that haven't had their synthetic types substituted in.
        3 ( 0.00%)      pub fn is_valid(self) -> bool {
        6 ( 0.00%)          self.substs.len() >= 3
        6 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
        6 ( 0.00%)      }
        .           
        .               /// Returns the substitutions of the closure's parent.
        .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
        .                   self.split().parent_substs
        .               }
        .           
        .               /// Returns an iterator over the list of types of captured paths by the closure.
        .               /// In case there was a type error in figuring out the types of the captured path, an
        .               /// empty iterator is returned.
        .               #[inline]
       42 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       66 ( 0.00%)          match self.tupled_upvars_ty().kind() {
        .                       TyKind::Error(_) => None,
       47 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
        .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
        .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
        .                   }
        .                   .into_iter()
        .                   .flatten()
       28 ( 0.00%)      }
        .           
        .               /// Returns the tuple type representing the upvars for this closure.
        .               #[inline]
        .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
      718 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
        .               }
        .           
        .               /// Returns the closure kind for this closure; may return a type
        .               /// variable during inference. To get the closure kind during
        .               /// inference, use `infcx.closure_kind(substs)`.
       62 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
        .                   self.split().closure_kind_ty.expect_ty()
      124 ( 0.00%)      }
        .           
        .               /// Returns the `fn` pointer type representing the closure signature for this
        .               /// closure.
        .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
        .               // type is known at the time of the creation of `ClosureSubsts`,
        .               // see `rustc_typeck::check::closure`.
        .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
        .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
        .               }
        .           
        .               /// Returns the closure kind for this closure; only usable outside
        .               /// of an inference context, because in that context we know that
        .               /// there are no type variables.
        .               ///
        .               /// If you have an inference context, use `infcx.closure_kind()`.
        6 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
        6 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
       12 ( 0.00%)      }
        .           
        .               /// Extracts the signature from the closure.
       54 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
        .                   let ty = self.sig_as_fn_ptr_ty();
      108 ( 0.00%)          match ty.kind() {
      216 ( 0.00%)              ty::FnPtr(sig) => *sig,
        .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
        .                   }
      162 ( 0.00%)      }
        .           }
        .           
        .           /// Similar to `ClosureSubsts`; see the above documentation for more.
        .           #[derive(Copy, Clone, Debug, TypeFoldable)]
        .           pub struct GeneratorSubsts<'tcx> {
        .               pub substs: SubstsRef<'tcx>,
        .           }
        .           
-- line 448 ----------------------------------------
-- line 676 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> UpvarSubsts<'tcx> {
        .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
        .               /// In case there was a type error in figuring out the types of the captured path, an
        .               /// empty iterator is returned.
        .               #[inline]
        .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       24 ( 0.00%)          let tupled_tys = match self {
       30 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
        .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
        .                   };
        .           
       48 ( 0.00%)          match tupled_tys.kind() {
        .                       TyKind::Error(_) => None,
       42 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
        .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
        .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
        .                   }
        .                   .into_iter()
        .                   .flatten()
        .               }
        .           
        .               #[inline]
        .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
       36 ( 0.00%)          match self {
       43 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
        .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
        .                   }
        .               }
        .           }
        .           
        .           /// An inline const is modeled like
        .           ///
        .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
-- line 710 ----------------------------------------
-- line 760 ----------------------------------------
        .               }
        .           
        .               /// Returns the type of this inline const.
        .               pub fn ty(self) -> Ty<'tcx> {
        .                   self.split().ty.expect_ty()
        .               }
        .           }
        .           
    7,736 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
    4,005 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub enum ExistentialPredicate<'tcx> {
        .               /// E.g., `Iterator`.
        .               Trait(ExistentialTraitRef<'tcx>),
        .               /// E.g., `Iterator::Item = T`.
        .               Projection(ExistentialProjection<'tcx>),
        .               /// E.g., `Send`.
      271 ( 0.00%)      AutoTrait(DefId),
        .           }
        .           
        .           impl<'tcx> ExistentialPredicate<'tcx> {
        .               /// Compares via an ordering that will not change if modules are reordered or other changes are
        .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
    1,385 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
        .                   use self::ExistentialPredicate::*;
    1,996 ( 0.00%)          match (*self, *other) {
        .                       (Trait(_), Trait(_)) => Ordering::Equal,
        .                       (Projection(ref a), Projection(ref b)) => {
        .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
        .                       }
        .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
        .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
        .                       }
        .                       (Trait(_), _) => Ordering::Less,
        .                       (Projection(_), Trait(_)) => Ordering::Greater,
        .                       (Projection(_), _) => Ordering::Less,
        .                       (AutoTrait(_), _) => Ordering::Greater,
        .                   }
    1,662 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
      225 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
        .                   use crate::ty::ToPredicate;
      165 ( 0.00%)          match self.skip_binder() {
        .                       ExistentialPredicate::Trait(tr) => {
        .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
        .                       }
        .                       ExistentialPredicate::Projection(p) => {
        .                           self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
        .                       }
        .                       ExistentialPredicate::AutoTrait(did) => {
       30 ( 0.00%)                  let trait_ref = self.rebind(ty::TraitRef {
        .                               def_id: did,
        .                               substs: tcx.mk_substs_trait(self_ty, &[]),
        .                           });
        .                           trait_ref.without_const().to_predicate(tcx)
        .                       }
        .                   }
      200 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
        .               /// Returns the "principal `DefId`" of this set of existential predicates.
        .               ///
        .               /// A Rust trait object type consists (in addition to a lifetime bound)
        .               /// of a set of trait bounds, which are separated into any number
        .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 840 ----------------------------------------
        .               ///
        .               /// It is also possible to have a "trivial" trait object that
        .               /// consists only of auto traits, with no principal - for example,
        .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
        .               /// is `{Send, Sync}`, while there is no principal. These trait objects
        .               /// have a "trivial" vtable consisting of just the size, alignment,
        .               /// and destructor.
        .               pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
       21 ( 0.00%)          self[0]
       21 ( 0.00%)              .map_bound(|this| match this {
        .                           ExistentialPredicate::Trait(tr) => Some(tr),
        .                           _ => None,
        .                       })
        .                       .transpose()
        .               }
        .           
        7 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
        .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
       14 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn projection_bounds<'a>(
        .                   &'a self,
        .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
        .                   self.iter().filter_map(|predicate| {
        .                       predicate
        .                           .map_bound(|pred| match pred {
-- line 866 ----------------------------------------
-- line 886 ----------------------------------------
        .           ///     T: Foo<U>
        .           ///
        .           /// This would be represented by a trait-reference where the `DefId` is the
        .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
        .           /// and `U` as parameter 1.
        .           ///
        .           /// Trait references also appear in object types like `Foo<U>`, but in
        .           /// that case the `Self` parameter is absent from the substitutions.
    5,526 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
   50,917 ( 0.02%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct TraitRef<'tcx> {
        4 ( 0.00%)      pub def_id: DefId,
   36,093 ( 0.02%)      pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> TraitRef<'tcx> {
      102 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
        .                   TraitRef { def_id, substs }
      408 ( 0.00%)      }
        .           
        .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
        .               /// are the parameters defined on trait.
      738 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
      328 ( 0.00%)          ty::Binder::dummy(TraitRef {
        .                       def_id,
      492 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
        .                   })
      656 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn self_ty(&self) -> Ty<'tcx> {
        .                   self.substs.type_at(0)
        .               }
        .           
       64 ( 0.00%)      pub fn from_method(
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_id: DefId,
        .                   substs: SubstsRef<'tcx>,
        .               ) -> ty::TraitRef<'tcx> {
        .                   let defs = tcx.generics_of(trait_id);
        .           
        8 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
       88 ( 0.00%)      }
        .           }
        .           
        .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
        .           
        .           impl<'tcx> PolyTraitRef<'tcx> {
        .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
        .                   self.map_bound_ref(|tr| tr.self_ty())
        .               }
        .           
        .               pub fn def_id(&self) -> DefId {
      384 ( 0.00%)          self.skip_binder().def_id
      128 ( 0.00%)      }
        .           
      133 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
      266 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
        .                       trait_ref,
        .                       constness: ty::BoundConstness::NotConst,
        .                       polarity: ty::ImplPolarity::Positive,
        .                   })
      133 ( 0.00%)      }
        .           }
        .           
        .           /// An existential reference to a trait, where `Self` is erased.
        .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
        .           ///
        .           ///     exists T. T: Trait<'a, 'b, X, Y>
        .           ///
        .           /// The substitutions don't include the erased `Self`, only trait
        .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
       76 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    1,097 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ExistentialTraitRef<'tcx> {
      184 ( 0.00%)      pub def_id: DefId,
    1,380 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> ExistentialTraitRef<'tcx> {
      120 ( 0.00%)      pub fn erase_self_ty(
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_ref: ty::TraitRef<'tcx>,
        .               ) -> ty::ExistentialTraitRef<'tcx> {
        .                   // Assert there is a Self.
        .                   trait_ref.substs.type_at(0);
        .           
        .                   ty::ExistentialTraitRef {
        .                       def_id: trait_ref.def_id,
        .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
        .                   }
      120 ( 0.00%)      }
        .           
        .               /// Object types don't have a self type specified. Therefore, when
        .               /// we convert the principal trait-ref into a normal trait-ref,
        .               /// you must give *some* self type. A common choice is `mk_err()`
        .               /// or some placeholder type.
        .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
        .                   // otherwise the escaping vars would be captured by the binder
        .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 985 ----------------------------------------
-- line 999 ----------------------------------------
        .               /// we convert the principal trait-ref into a normal trait-ref,
        .               /// you must give *some* self type. A common choice is `mk_err()`
        .               /// or some placeholder type.
        .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
        .                   self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
        .               }
        .           }
        .           
    6,265 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum BoundVariableKind {
        .               Ty(BoundTyKind),
        .               Region(BoundRegionKind),
        .               Const,
        .           }
        .           
        .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
-- line 1015 ----------------------------------------
-- line 1016 ----------------------------------------
        .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
        .           /// (which would be represented by the type `PolyTraitRef ==
        .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
        .           /// erase, or otherwise "discharge" these bound vars, we change the
        .           /// type from `Binder<'tcx, T>` to just `T` (see
        .           /// e.g., `liberate_late_bound_regions`).
        .           ///
        .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
    6,321 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
   40,096 ( 0.02%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
        .           
        .           impl<'tcx, T> Binder<'tcx, T>
        .           where
        .               T: TypeFoldable<'tcx>,
        .           {
        .               /// Wraps `value` in a binder, asserting that `value` does not
        .               /// contain any bound vars that would be bound by the
        .               /// binder. This is commonly used to 'inject' a value T into a
        .               /// different binding level.
    2,485 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
    9,547 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
   20,375 ( 0.01%)          Binder(value, ty::List::empty())
    2,483 ( 0.00%)      }
        .           
        .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(vars);
        .                       value.visit_with(&mut validator);
        .                   }
    3,006 ( 0.00%)          Binder(value, vars)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Binder<'tcx, T> {
        .               /// Skips the binder and returns the "bound" value. This is a
        .               /// risky thing to do because it's easy to get confused about
        .               /// De Bruijn indices and the like. It is usually better to
        .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
        .               /// accounting.
        .               ///
        .               /// Some examples where `skip_binder` is reasonable:
        .               ///
        .               /// - extracting the `DefId` from a PolyTraitRef;
        .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
        .               ///   a type parameter `X`, since the type `X` does not reference any regions
        .               pub fn skip_binder(self) -> T {
   80,232 ( 0.03%)          self.0
        .               }
        .           
        .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
      178 ( 0.00%)          self.1
        .               }
        .           
        .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
      393 ( 0.00%)          Binder(&self.0, self.1)
        .               }
        .           
        .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(&T) -> U,
        .               {
        .                   let value = f(&self.0);
        .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
        .           
        .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(&T) -> U,
        .               {
        .                   self.as_ref().map_bound(f)
        .               }
        .           
      120 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(T) -> U,
        .               {
    4,121 ( 0.00%)          let value = f(self.0);
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
   16,108 ( 0.01%)          Binder(value, self.1)
      120 ( 0.00%)      }
        .           
        .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
        .               where
        .                   F: FnOnce(T) -> Result<U, E>,
        .               {
        .                   let value = f(self.0)?;
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
      531 ( 0.00%)          Ok(Binder(value, self.1))
        .               }
        .           
        .               /// Wraps a `value` in a binder, using the same bound variables as the
        .               /// current `Binder`. This should not be used if the new value *changes*
        .               /// the bound variables. Note: the (old or new) value itself does not
        .               /// necessarily need to *name* all the bound variables.
        .               ///
        .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
        .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
        .               where
        .                   U: TypeFoldable<'tcx>,
        .               {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
        .                       value.visit_with(&mut validator);
        .                   }
    1,530 ( 0.00%)          Binder(value, self.1)
        .               }
        .           
        .               /// Unwraps and returns the value within, but only if it contains
        .               /// no bound vars at all. (In other words, if this binder --
        .               /// and indeed any enclosing binder -- doesn't bind anything at
        .               /// all.) Otherwise, returns `None`.
        .               ///
        .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
        .               /// binder, but permits late-bound vars bound by enclosing
        .               /// binders, but that would require adjusting the debruijn
        .               /// indices, and given the shallow binding structure we often use,
        .               /// would not be that useful.)
        .               pub fn no_bound_vars(self) -> Option<T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
   12,551 ( 0.01%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
      165 ( 0.00%)      }
        .           
        .               /// Splits the contents into two things that share the same binder
        .               /// level as the original, returning two distinct binders.
        .               ///
        .               /// `f` should consider bound regions at depth 1 to be free, and
        .               /// anything it produces with bound regions at depth 1 will be
        .               /// bound in the resulting return values.
        .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
        .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
        .                   let bound_vars = self.1;
        .                   self.0.map(|v| Binder(v, bound_vars))
        .               }
        .           }
        .           
        .           /// Represents the projection of an associated type. In explicit UFCS
        .           /// form this would be written `<T as Trait<..>>::N`.
       80 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    2,951 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ProjectionTy<'tcx> {
        .               /// The parameters of the associated item.
    1,813 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .           
        .               /// The `DefId` of the `TraitItem` for the associated type `N`.
        .               ///
        .               /// Note that this is not the `DefId` of the `TraitRef` containing this
        .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
    1,506 ( 0.00%)      pub item_def_id: DefId,
        .           }
        .           
        .           impl<'tcx> ProjectionTy<'tcx> {
    1,169 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
      334 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
    1,336 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference and own substs from this projection.
        .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
        .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
      308 ( 0.00%)      pub fn trait_ref_and_own_substs(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
      132 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
        .                   let trait_generics = tcx.generics_of(def_id);
      220 ( 0.00%)          (
        .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
        .                       &self.substs[trait_generics.count()..],
        .                   )
      396 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference from this projection.
        .               /// For example, if this is a projection of `<T as Iterator>::Item`,
        .               /// then this function would return a `T: Iterator` trait reference.
        .               ///
        .               /// WARNING: This will drop the substs for generic associated types
        .               /// consider calling [Self::trait_ref_and_own_substs] to get those
        .               /// as well.
    1,449 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
      161 ( 0.00%)          let def_id = self.trait_def_id(tcx);
      161 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
    1,771 ( 0.00%)      }
        .           
      260 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
      780 ( 0.00%)          self.substs.type_at(0)
      520 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Copy, Clone, Debug, TypeFoldable)]
        .           pub struct GenSig<'tcx> {
        .               pub resume_ty: Ty<'tcx>,
        .               pub yield_ty: Ty<'tcx>,
        .               pub return_ty: Ty<'tcx>,
        .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
        .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
        .           
        .           /// Signature of a function type, which we have arbitrarily
        .           /// decided to use to refer to the input/output types.
        .           ///
        .           /// - `inputs`: is the list of arguments and their modes.
        .           /// - `output`: is the return type.
        .           /// - `c_variadic`: indicates whether this is a C-variadic function.
    3,150 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    2,274 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct FnSig<'tcx> {
      429 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
    3,455 ( 0.00%)      pub c_variadic: bool,
      638 ( 0.00%)      pub unsafety: hir::Unsafety,
    3,773 ( 0.00%)      pub abi: abi::Abi,
        .           }
        .           
        .           impl<'tcx> FnSig<'tcx> {
    2,230 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
    9,781 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
    4,460 ( 0.00%)      }
        .           
    1,344 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
   10,278 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
    2,688 ( 0.00%)      }
        .           
        .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
        .               // method.
        .               fn fake() -> FnSig<'tcx> {
        .                   FnSig {
        .                       inputs_and_output: List::empty(),
        .                       c_variadic: false,
        .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
        .               }
        .           }
        .           
        .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
        .           
        .           impl<'tcx> PolyFnSig<'tcx> {
        .               #[inline]
        .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
      220 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
        .               }
        .               #[inline]
        .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    1,180 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
        .               }
        .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
        .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
       15 ( 0.00%)      }
        .               #[inline]
        .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
      505 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
        .               }
        .               pub fn c_variadic(&self) -> bool {
       30 ( 0.00%)          self.skip_binder().c_variadic
       15 ( 0.00%)      }
        .               pub fn unsafety(&self) -> hir::Unsafety {
      504 ( 0.00%)          self.skip_binder().unsafety
      252 ( 0.00%)      }
        .               pub fn abi(&self) -> abi::Abi {
      464 ( 0.00%)          self.skip_binder().abi
      116 ( 0.00%)      }
        .           }
        .           
        .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
        .           
        4 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct ParamTy {
        .               pub index: u32,
        .               pub name: Symbol,
        .           }
        .           
        .           impl<'tcx> ParamTy {
        2 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
        .                   ParamTy { index, name }
        1 ( 0.00%)      }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
        .                   ParamTy::new(def.index, def.name)
        .               }
        .           
        .               #[inline]
        .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
        .                   tcx.mk_ty_param(self.index, self.name)
        .               }
        .           }
        .           
        .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
        .           #[derive(HashStable)]
        .           pub struct ParamConst {
       24 ( 0.00%)      pub index: u32,
       24 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           impl ParamConst {
        .               pub fn new(index: u32, name: Symbol) -> ParamConst {
        .                   ParamConst { index, name }
        .               }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
        .           /// the inference variable is supposed to satisfy the relation
        .           /// *for every value of the placeholder region*. To ensure that doesn't
        .           /// happen, you can use `leak_check`. This is more clearly explained
        .           /// by the [rustc dev guide].
        .           ///
        .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
        .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
        .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
  311,496 ( 0.13%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
       38 ( 0.00%)  pub enum RegionKind {
        .               /// Region bound in a type or fn declaration which will be
        .               /// substituted 'early' -- that is, at the same time when type
        .               /// parameters are substituted.
        .               ReEarlyBound(EarlyBoundRegion),
        .           
        .               /// Region bound in a function scope, which will be substituted when the
        .               /// function is called.
    8,632 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
        .           
        .               /// When checking a function body, the types of all arguments and so forth
        .               /// that refer to bound region parameters are modified to refer to free
        .               /// region parameters.
        .               ReFree(FreeRegion),
        .           
        .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
        .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
        .               /// regions visible from `U`, but not less than regions not visible
        .               /// from `U`.
        .               ReEmpty(ty::UniverseIndex),
        .           
        .               /// Erased region, used by trait selection, in MIR and during codegen.
        .               ReErased,
        .           }
        .           
    2,988 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           pub struct EarlyBoundRegion {
       31 ( 0.00%)      pub def_id: DefId,
    2,051 ( 0.00%)      pub index: u32,
      472 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           /// A **`const`** **v**ariable **ID**.
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           pub struct ConstVid<'tcx> {
      127 ( 0.00%)      pub index: u32,
        1 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
        .           }
        .           
        .           rustc_index::newtype_index! {
        .               /// A **region** (lifetime) **v**ariable **ID**.
        .               pub struct RegionVid {
        .                   DEBUG_FORMAT = custom,
        .               }
        .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
        .           rustc_index::newtype_index! {
        .               pub struct BoundVar { .. }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct BoundTy {
        .               pub var: BoundVar,
      338 ( 0.00%)      pub kind: BoundTyKind,
        .           }
        .           
    5,827 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum BoundTyKind {
        .               Anon,
        .               Param(Symbol),
        .           }
        .           
        .           impl From<BoundVar> for BoundTy {
        .               fn from(var: BoundVar) -> Self {
        .                   BoundTy { var, kind: BoundTyKind::Anon }
        .               }
        .           }
        .           
        .           /// A `ProjectionPredicate` for an `ExistentialTraitRef`.
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
      182 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ExistentialProjection<'tcx> {
        .               pub item_def_id: DefId,
      168 ( 0.00%)      pub substs: SubstsRef<'tcx>,
       42 ( 0.00%)      pub term: Term<'tcx>,
        .           }
        .           
        .           pub type PolyExistentialProjection<'tcx> = Binder<'tcx, ExistentialProjection<'tcx>>;
        .           
        .           impl<'tcx> ExistentialProjection<'tcx> {
        .               /// Extracts the underlying existential trait reference from this projection.
        .               /// For example, if this is a projection of `exists T. <T as Iterator>::Item == X`,
        .               /// then this function would return an `exists T. T: Iterator` existential trait
-- line 1551 ----------------------------------------
-- line 1616 ----------------------------------------
        .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
        .                       RegionKind::ReEmpty(_) => false,
        .                       RegionKind::ReErased => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_late_bound(&self) -> bool {
      288 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_placeholder(&self) -> bool {
        .                   matches!(*self, ty::RePlaceholder(..))
        .               }
        .           
        .               #[inline]
        .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
    8,019 ( 0.00%)          match *self {
        .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               pub fn type_flags(&self) -> TypeFlags {
        .                   let mut flags = TypeFlags::empty();
        .           
   23,506 ( 0.01%)          match *self {
        .                       ty::ReVar(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
        .                           flags = flags | TypeFlags::HAS_RE_INFER;
        .                       }
        .                       ty::RePlaceholder(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
        .                       ty::ReErased => {
        .                           flags = flags | TypeFlags::HAS_RE_ERASED;
        .                       }
        .                   }
        .           
        .                   debug!("type_flags({:?}) = {:?}", self, flags);
        .           
        .                   flags
      519 ( 0.00%)      }
        .           
        .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
        .               /// For example, consider the regions in this snippet of code:
        .               ///
        .               /// ```
        .               /// impl<'a> Foo {
        .               ///      ^^ -- early bound, declared on an impl
        .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
        .           
        .               #[inline(always)]
        .               pub fn flags(&self) -> TypeFlags {
        .                   self.flags
        .               }
        .           
        .               #[inline]
        .               pub fn is_unit(&self) -> bool {
      182 ( 0.00%)          match self.kind() {
       67 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_never(&self) -> bool {
    2,749 ( 0.00%)          matches!(self.kind(), Never)
        .               }
        .           
        .               #[inline]
        .               pub fn is_primitive(&self) -> bool {
        .                   self.kind().is_primitive()
        .               }
        .           
        .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_ref(&self) -> bool {
        .                   matches!(self.kind(), Ref(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_var(&self) -> bool {
    3,930 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
    3,336 ( 0.00%)          match self.kind() {
      651 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_infer(&self) -> bool {
       18 ( 0.00%)          matches!(self.kind(), Infer(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_phantom_data(&self) -> bool {
        .                   if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
        .               }
        .           
        .               #[inline]
-- line 1770 ----------------------------------------
-- line 1775 ----------------------------------------
        .               /// Returns `true` if this type is a `str`.
        .               #[inline]
        .               pub fn is_str(&self) -> bool {
        .                   *self.kind() == Str
        .               }
        .           
        .               #[inline]
        .               pub fn is_param(&self, index: u32) -> bool {
       30 ( 0.00%)          match self.kind() {
        .                       ty::Param(ref data) => data.index == index,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_slice(&self) -> bool {
        .                   match self.kind() {
        .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_array(&self) -> bool {
       13 ( 0.00%)          matches!(self.kind(), Array(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_simd(&self) -> bool {
        .                   match self.kind() {
        .                       Adt(def, _) => def.repr.simd(),
        .                       _ => false,
        .                   }
        .               }
        .           
       50 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
      100 ( 0.00%)          match self.kind() {
        .                       Array(ty, _) | Slice(ty) => ty,
        .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
        .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
        .                   }
       50 ( 0.00%)      }
        .           
        .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
        .                   match self.kind() {
        .                       Adt(def, substs) => {
        .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
        .                           let variant = def.non_enum_variant();
        .                           let f0_ty = variant.fields[0].ty(tcx, substs);
        .           
-- line 1824 ----------------------------------------
-- line 1843 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_region_ptr(&self) -> bool {
        .                   matches!(self.kind(), Ref(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_mutable_ptr(&self) -> bool {
        6 ( 0.00%)          matches!(
        4 ( 0.00%)              self.kind(),
        .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
        .                           | Ref(_, _, hir::Mutability::Mut)
        .                   )
        .               }
        .           
        .               /// Get the mutability of the reference or `None` when not a reference
        .               #[inline]
        .               pub fn ref_mutability(&self) -> Option<hir::Mutability> {
-- line 1860 ----------------------------------------
-- line 1861 ----------------------------------------
        .                   match self.kind() {
        .                       Ref(_, _, mutability) => Some(*mutability),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_unsafe_ptr(&self) -> bool {
      205 ( 0.00%)          matches!(self.kind(), RawPtr(_))
        .               }
        .           
        .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
        .               #[inline]
        .               pub fn is_any_ptr(&self) -> bool {
        .                   self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
        .               }
        .           
        .               #[inline]
        .               pub fn is_box(&self) -> bool {
    3,928 ( 0.00%)          match self.kind() {
      894 ( 0.00%)              Adt(def, _) => def.is_box(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               /// Panics if called on any type other than `Box<T>`.
        .               pub fn boxed_ty(&self) -> Ty<'tcx> {
        .                   match self.kind() {
        .                       Adt(def, substs) if def.is_box() => substs.type_at(0),
-- line 1889 ----------------------------------------
-- line 1891 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
        .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
        .               /// contents are abstract to rustc.)
        .               #[inline]
        .               pub fn is_scalar(&self) -> bool {
       32 ( 0.00%)          matches!(
       79 ( 0.00%)              self.kind(),
        .                       Bool | Char
        .                           | Int(_)
        .                           | Float(_)
        .                           | Uint(_)
        .                           | FnDef(..)
        .                           | FnPtr(_)
        .                           | RawPtr(_)
        .                           | Infer(IntVar(_) | FloatVar(_))
-- line 1908 ----------------------------------------
-- line 1922 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_enum(&self) -> bool {
        .                   matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
        .               }
        .           
        .               #[inline]
        .               pub fn is_union(&self) -> bool {
      603 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
        .               }
        .           
        .               #[inline]
        .               pub fn is_closure(&self) -> bool {
      106 ( 0.00%)          matches!(self.kind(), Closure(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_generator(&self) -> bool {
      126 ( 0.00%)          matches!(self.kind(), Generator(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_integral(&self) -> bool {
      359 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh_ty(&self) -> bool {
        .                   matches!(self.kind(), Infer(FreshTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh(&self) -> bool {
      428 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_char(&self) -> bool {
        .                   matches!(self.kind(), Char)
        .               }
        .           
        .               #[inline]
-- line 1963 ----------------------------------------
-- line 1967 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_signed(&self) -> bool {
        .                   matches!(self.kind(), Int(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ptr_sized_integral(&self) -> bool {
       12 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
        .               }
        .           
        .               #[inline]
        .               pub fn has_concrete_skeleton(&self) -> bool {
        .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
        .               }
        .           
        .               /// Returns the type and mutability of `*ty`.
        .               ///
        .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
        .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
      542 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
    3,257 ( 0.00%)          match self.kind() {
      104 ( 0.00%)              Adt(def, _) if def.is_box() => {
        .                           Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
        .                       }
    1,910 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
        .                       RawPtr(mt) if explicit => Some(*mt),
        .                       _ => None,
        .                   }
    1,084 ( 0.00%)      }
        .           
        .               /// Returns the type of `ty[i]`.
        .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
       16 ( 0.00%)          match self.kind() {
        .                       Array(ty, _) | Slice(ty) => Some(ty),
        .                       _ => None,
        .                   }
        4 ( 0.00%)      }
        .           
    4,480 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
    2,240 ( 0.00%)          match self.kind() {
    1,680 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
        .                       FnPtr(f) => *f,
        .                       Error(_) => {
        .                           // ignore errors (#54954)
        .                           ty::Binder::dummy(FnSig::fake())
        .                       }
        .                       Closure(..) => bug!(
        .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
        .                       ),
        .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
        .                   }
    5,040 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn is_fn(&self) -> bool {
       24 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fn_ptr(&self) -> bool {
        .                   matches!(self.kind(), FnPtr(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_impl_trait(&self) -> bool {
        .                   matches!(self.kind(), Opaque(..))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
      167 ( 0.00%)          match self.kind() {
        .                       Adt(adt, _) => Some(adt),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Iterates over tuple fields.
        .               /// Panics when called on anything but a tuple.
       34 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
      196 ( 0.00%)          match self.kind() {
      143 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
        .                       _ => bug!("tuple_fields called on non-tuple"),
        .                   }
       68 ( 0.00%)      }
        .           
        .               /// Get the `i`-th element of a tuple.
        .               /// Panics when called on anything but a tuple.
       21 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
       42 ( 0.00%)          match self.kind() {
       42 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
        .                       _ => bug!("tuple_fields called on non-tuple"),
        .                   }
       42 ( 0.00%)      }
        .           
        .               /// If the type contains variants, returns the valid range of variant indices.
        .               //
        .               // FIXME: This requires the optimized MIR in the case of generators.
        .               #[inline]
        .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
        .                   match self.kind() {
        .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2095 ----------------------------------------
        .                       TyKind::Generator(def_id, substs, _) => {
        .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
        .                       }
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Returns the type of the discriminant of this type.
      560 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
      280 ( 0.00%)          match self.kind() {
      448 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
        .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
        .           
        .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
        .                           let assoc_items = tcx.associated_item_def_ids(
        .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
        .                           );
        .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
        .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
        .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
        .           
        .                       ty::Bound(..)
        .                       | ty::Placeholder(_)
        .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
        .                       }
        .                   }
      448 ( 0.00%)      }
        .           
        .               /// Returns the type of metadata for (potentially fat) pointers to this type.
        .               pub fn ptr_metadata_ty(
        .                   &'tcx self,
        .                   tcx: TyCtxt<'tcx>,
        .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
        .               ) -> Ty<'tcx> {
        .                   let tail = tcx.struct_tail_with_normalize(self, normalize);
-- line 2151 ----------------------------------------
-- line 2200 ----------------------------------------
        .               /// function converts such a special type into the closure
        .               /// kind. To go the other way, use
        .               /// `tcx.closure_kind_ty(closure_kind)`.
        .               ///
        .               /// Note that during type checking, we use an inference variable
        .               /// to represent the closure kind, because it has not yet been
        .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
        .               /// is complete, that type variable will be unified.
      160 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
      320 ( 0.00%)          match self.kind() {
      320 ( 0.00%)              Int(int_ty) => match int_ty {
        .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
        .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
        .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
        .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
        .                       },
        .           
        .                       // "Bound" types appear in canonical queries when the
        .                       // closure type is not yet known
        .                       Bound(..) | Infer(_) => None,
        .           
        .                       Error(_) => Some(ty::ClosureKind::Fn),
        .           
        .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
        .                   }
      160 ( 0.00%)      }
        .           
        .               /// Fast path helper for testing if a type is `Sized`.
        .               ///
        .               /// Returning true means the type is known to be sized. Returning
        .               /// `false` means nothing -- could be sized, might not be.
        .               ///
        .               /// Note that we could never rely on the fact that a type such as `[_]` is
        .               /// trivially `!Sized` because we could be in a type environment with a
        .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
        .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
        .               /// this method doesn't return `Option<bool>`.
   12,933 ( 0.01%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
    8,622 ( 0.00%)          match self.kind() {
        .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
        .                       | ty::Uint(_)
        .                       | ty::Int(_)
        .                       | ty::Bool
        .                       | ty::Float(_)
        .                       | ty::FnDef(..)
        .                       | ty::FnPtr(_)
        .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
        .                       | ty::GeneratorWitness(..)
        .                       | ty::Array(..)
        .                       | ty::Closure(..)
        .                       | ty::Never
        .                       | ty::Error(_) => true,
        .           
        .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
        .           
      230 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
        .           
    1,053 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
        .           
        .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
        .           
        .                       ty::Infer(ty::TyVar(_)) => false,
        .           
        .                       ty::Bound(..)
        .                       | ty::Placeholder(..)
        .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
        .                       }
        .                   }
   12,933 ( 0.01%)      }
        .           }
        .           
        .           /// Extra information about why we ended up with a particular variance.
        .           /// This is only used to add more information to error messages, and
        .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
        .           /// may lead to confusing notes in error messages, it will never cause
        .           /// a miscompilation or unsoundness.
        .           ///
-- line 2280 ----------------------------------------
-- line 2295 ----------------------------------------
        .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
        .                   param_index: u32,
        .               },
        .           }
        .           
        .           impl<'tcx> VarianceDiagInfo<'tcx> {
        .               /// Mirrors `Variance::xform` - used to 'combine' the existing
        .               /// and new `VarianceDiagInfo`s when our variance changes.
    4,942 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
        .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
    7,413 ( 0.00%)          match self {
        .                       VarianceDiagInfo::None => other,
        .                       VarianceDiagInfo::Invariant { .. } => self,
        .                   }
    2,471 ( 0.00%)      }
        .           }

1,170,942 ( 0.51%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
      909 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
   15,517 ( 0.01%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
       14 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
      511 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
   13,386 ( 0.01%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
      139 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
       40 ( 0.00%)          self.position += bytes;
       40 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
      645 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
    2,970 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   30,956 ( 0.01%)      fn read_u32(&mut self) -> u32 {
  134,310 ( 0.06%)          read_leb128!(self, read_u32_leb128)
   61,912 ( 0.03%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  566,398 ( 0.24%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   80,914 ( 0.03%)          let value = u16::from_le_bytes(bytes);
  161,834 ( 0.07%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
2,141,031 ( 0.92%)          let value = self.data[self.position];
  408,137 ( 0.18%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
  159,274 ( 0.07%)      fn read_usize(&mut self) -> usize {
  159,346 ( 0.07%)          read_leb128!(self, read_usize_leb128)
  318,548 ( 0.14%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
    7,855 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
   30,851 ( 0.01%)          let len = self.read_usize();
  162,072 ( 0.07%)          let sentinel = self.data[self.position + len];
   40,572 ( 0.02%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
  101,430 ( 0.04%)          self.position += len + 1;
   31,905 ( 0.01%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
      113 ( 0.00%)          let start = self.position;
      851 ( 0.00%)          self.position += s.len();
      113 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  389,532 ( 0.17%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 57 ----------------------------------------
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        8 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
        4 ( 0.00%)              from_str_radix(src, radix)
       12 ( 0.00%)          }
        .           
        .                   /// Returns the number of ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[doc(alias = "popcount")]
        .                   #[doc(alias = "popcnt")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn count_ones(self) -> u32 {
    5,355 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of zeros in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
        .                   /// assert_eq!(n.leading_zeros(), 2);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn leading_zeros(self) -> u32 {
   66,105 ( 0.03%)              intrinsics::ctlz(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of trailing zeros in the binary representation
        .                   /// of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
        .                   /// assert_eq!(n.trailing_zeros(), 3);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn trailing_zeros(self) -> u32 {
   56,580 ( 0.02%)              intrinsics::cttz(self) as u32
        .                   }
        .           
        .                   /// Returns the number of leading ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn rotate_left(self, n: u32) -> Self {
1,041,687 ( 0.45%)              intrinsics::rotate_left(self, n as $SelfT)
        .                   }
        .           
        .                   /// Shifts the bits to the right by a specified amount, `n`,
        .                   /// wrapping the truncated bits to the beginning of the resulting
        .                   /// integer.
        .                   ///
        .                   /// Please note this isn't the same operation as the `>>` shifting operator!
        .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
        .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
        2 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
        .                       if unlikely!(b) {None} else {Some(a)}
        .                   }
        .           
        .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
        .                   /// cannot occur.
        .                   ///
        .                   /// # Safety
        .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_add`.
  187,680 ( 0.08%)              unsafe { intrinsics::unchecked_add(self, rhs) }
        .                   }
        .           
        .                   /// Checked addition with a signed integer. Computes `self + rhs`,
        .                   /// returning `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_sub`.
    3,880 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
        .                   }
        .           
        .                   /// Checked integer multiplication. Computes `self * rhs`, returning
        .                   /// `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 1035 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   14,222 ( 0.01%)              intrinsics::saturating_add(self, rhs)
        .                   }
        .           
        .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
      202 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
        .                   }
        .           
        .                   /// Saturating integer multiplication. Computes `self * rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
  353,809 ( 0.15%)              intrinsics::wrapping_add(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) addition with a signed integer. Computes
        .                   /// `self + rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
  284,884 ( 0.12%)              intrinsics::wrapping_sub(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) multiplication. Computes `self *
        .                   /// rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
        .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
  900,921 ( 0.39%)              intrinsics::wrapping_mul(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) division. Computes `self / rhs`.
        .                   /// Wrapped division on unsigned types is just normal division.
        .                   /// There's no way wrapping could ever happen.
        .                   /// This function exists, so that all operations
        .                   /// are accounted for in the wrapping operations.
        .                   ///
-- line 1256 ----------------------------------------
-- line 1492 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
   93,306 ( 0.04%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self + rhs + carry` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
        .                   /// additional bit of overflow. This allows for chaining together multiple additions
        .                   /// to create "big integers" which represent larger values.
-- line 1508 ----------------------------------------
-- line 1588 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   61,108 ( 0.03%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
        .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
        .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1674 ----------------------------------------
        .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                     without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
  154,048 ( 0.07%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates the divisor when `self` is divided by `rhs`.
        .                   ///
        .                   /// Returns a tuple of the divisor along with a boolean indicating
        .                   /// whether an arithmetic overflow would occur. Note that for unsigned
        .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 2132 ----------------------------------------
        .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
        .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
        .                   /// ```
        .                   #[must_use]
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
        .                   #[inline(always)]
        .                   pub const fn is_power_of_two(self) -> bool {
      264 ( 0.00%)              self.count_ones() == 1
        .                   }
        .           
        .                   // Returns one less than next power of two.
        .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
        .                   //
        .                   // 8u8.one_less_than_next_power_of_two() == 7
        .                   // 6u8.one_less_than_next_power_of_two() == 7
        .                   //
        .                   // This method cannot overflow, as in the `next_power_of_two`
        .                   // overflow cases it instead ends up returning the maximum value
        .                   // of the type, and can return 0 for 0.
        .                   #[inline]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   const fn one_less_than_next_power_of_two(self) -> Self {
    1,356 ( 0.00%)              if self <= 1 { return 0; }
        .           
    2,233 ( 0.00%)              let p = self - 1;
        .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
        .                       // That means the shift is always in-bounds, and some processors
        .                       // (such as intel pre-haswell) have more efficient ctlz
        .                       // intrinsics when the argument is non-zero.
    6,687 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    2,229 ( 0.00%)              <$SelfT>::MAX >> z
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `self`.
        .                   ///
        .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
        .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
        .                   /// release mode (the only situation in which method can return 0).
        .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   #[rustc_inherit_overflow_checks]
        .                   pub const fn next_power_of_two(self) -> Self {
    3,102 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `n`. If
        .                   /// the next power of two is greater than the type's maximum value,
        .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 2195 ----------------------------------------

   10,460 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 417 ----------------------------------------
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> Self {
  275,920 ( 0.12%)          Vec { buf: RawVec::NEW, len: 0 }
       74 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
   99,155 ( 0.04%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
        .               }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
    4,525 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        .               }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn capacity(&self) -> usize {
   15,359 ( 0.01%)          self.buf.capacity()
        .               }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve(&mut self, additional: usize) {
   25,888 ( 0.01%)          self.buf.reserve(self.len, additional);
        .               }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
    1,229 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
    2,536 ( 0.00%)          if self.capacity() > self.len {
      237 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
        .               }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
        .                       self.shrink_to_fit();
      781 ( 0.00%)              let me = ManuallyDrop::new(self);
        .                       let buf = ptr::read(&me.buf);
        .                       let len = me.len();
        .                       buf.into_box(len).assume_init()
        .                   }
        .               }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
   14,767 ( 0.01%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
   12,723 ( 0.01%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   16,081 ( 0.01%)              self.len = len;
      580 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
   17,720 ( 0.01%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
  467,342 ( 0.20%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
  705,207 ( 0.30%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
   46,846 ( 0.02%)          self.len = new_len;
      120 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // We replace self[index] with the last element. Note that if the
        .                       // bounds check above succeeds there must be a last element (which
        .                       // can be self[index] itself).
        .                       let value = ptr::read(self.as_ptr().add(index));
        .                       let base_ptr = self.as_mut_ptr();
        1 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
        .                       self.set_len(len - 1);
        .                       value
        .                   }
        .               }
        .           
        .               /// Inserts an element at position `index` within the vector, shifting all
        .               /// elements after it to the right.
        .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      616 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
       88 ( 0.00%)          let len = self.len();
      254 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
      298 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
      405 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
      270 ( 0.00%)              self.set_len(len + 1);
        .                   }
      528 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
        .               pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
       94 ( 0.00%)          let len = self.len();
      376 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
        .                           ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
      288 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
       94 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
   27,138 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
    1,847 ( 0.00%)          self.retain_mut(|elem| f(elem));
   25,904 ( 0.01%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    3,462 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
    3,120 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
    2,676 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
   34,611 ( 0.01%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
    8,272 ( 0.00%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
      204 ( 0.00%)                      g.processed_len += 1;
       92 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
      101 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
      834 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
      556 ( 0.00%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
      910 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
      130 ( 0.00%)          let len = self.len();
      344 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
      647 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
       46 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
        .                           } else {
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
      520 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
    1,040 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      135 ( 0.00%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
1,608,905 ( 0.69%)          if self.len == self.buf.capacity() {
   51,094 ( 0.02%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
   21,159 ( 0.01%)              let end = self.as_mut_ptr().add(self.len);
        .                       ptr::write(end, value);
1,754,360 ( 0.76%)              self.len += 1;
        .                   }
      108 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
  107,043 ( 0.05%)          if self.len == 0 {
       30 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
   79,600 ( 0.03%)                  self.len -= 1;
   16,740 ( 0.01%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
       28 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
       24 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               unsafe fn append_elements(&mut self, other: *const [T]) {
        .                   let count = unsafe { (*other).len() };
        .                   self.reserve(count);
    2,041 ( 0.00%)          let len = self.len();
        .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
   24,974 ( 0.01%)          self.len += count;
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
    3,327 ( 0.00%)          let len = self.len();
        .                   let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
        .                       self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
        6 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
      279 ( 0.00%)              Drain {
        .                           tail_start: end,
        6 ( 0.00%)                  tail_len: len - end,
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
   26,057 ( 0.01%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
   37,062 ( 0.02%)          self.len() == 0
        .               }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
       43 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
       35 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    4,367 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
      569 ( 0.00%)          let len = self.len();
    1,138 ( 0.00%)          if new_len > len {
    2,986 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
    3,798 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
        .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
        .                       slice::from_raw_parts_mut(
        2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
       26 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
        .               }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
       20 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
        2 ( 0.00%)          let len = self.len();
        .           
        6 ( 0.00%)          if new_len > len {
      330 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
        2 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2271 ----------------------------------------
        .           trait ExtendWith<T> {
        .               fn next(&mut self) -> T;
        .               fn last(self) -> T;
        .           }
        .           
        .           struct ExtendElement<T>(T);
        .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
        .               fn next(&mut self) -> T {
       22 ( 0.00%)          self.0.clone()
        .               }
        .               fn last(self) -> T {
        .                   self.0
        .               }
        .           }
        .           
        .           struct ExtendFunc<F>(F);
        .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
-- line 2287 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
   16,980 ( 0.01%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
      428 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
   18,294 ( 0.01%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
   13,443 ( 0.01%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
      131 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
    3,331 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   21,757 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
    4,557 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
        .               fn deref(&self) -> &[T] {
  654,765 ( 0.28%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
       71 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
        .               fn deref_mut(&mut self) -> &mut [T] {
  204,619 ( 0.09%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
   12,156 ( 0.01%)      fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
        2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   15,238 ( 0.01%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
   31,302 ( 0.01%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
-- line 2534 ----------------------------------------
-- line 2539 ----------------------------------------
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
  139,257 ( 0.06%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
        .               fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
   51,907 ( 0.02%)              let mut me = ManuallyDrop::new(self);
        .                       let alloc = ptr::read(me.allocator());
        .                       let begin = me.as_mut_ptr();
        .                       let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
        .                           begin.add(me.len()) as *const T
        .                       };
        .                       let cap = me.buf.capacity();
   21,677 ( 0.01%)              IntoIter {
        .                           buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
        .                           end,
        .                       }
        .                   }
-- line 2589 ----------------------------------------
-- line 2591 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a Vec<T, A> {
        .               type Item = &'a T;
        .               type IntoIter = slice::Iter<'a, T>;
        .           
        .               fn into_iter(self) -> slice::Iter<'a, T> {
       69 ( 0.00%)          self.iter()
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        .               fn into_iter(self) -> slice::IterMut<'a, T> {
    1,282 ( 0.00%)          self.iter_mut()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
      304 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
   80,789 ( 0.03%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
      304 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
       64 ( 0.00%)          self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
        .                   self.reserve(additional);
        .               }
        .           }
        .           
-- line 2631 ----------------------------------------
-- line 2636 ----------------------------------------
        .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
   13,345 ( 0.01%)          while let Some(element) = iterator.next() {
    3,737 ( 0.00%)              let len = self.len();
   35,352 ( 0.02%)              if len == self.capacity() {
      130 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
   25,843 ( 0.01%)                  self.set_len(len + 1);
        .                       }
        .                   }
      403 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
      236 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
      504 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
   78,417 ( 0.03%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
   34,107 ( 0.01%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
   92,592 ( 0.04%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

  181,875 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir               

-- line 5 ----------------------------------------
      .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
      .           unsafe impl GlobalAlloc for System {
      .               #[inline]
      .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
      .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
      .                   // So only rely on MIN_ALIGN if size >= align.
      .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
      .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
298,080 ( 0.13%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
223,560 ( 0.10%)              libc::malloc(layout.size()) as *mut u8
      .                   } else {
      .                       #[cfg(target_os = "macos")]
      .                       {
      .                           if layout.align() > (1 << 31) {
      .                               return ptr::null_mut();
      .                           }
      .                       }
      .                       aligned_malloc(&layout)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
      .                   // See the comment above in `alloc` for why this check looks the way it does.
  2,816 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
  4,224 ( 0.00%)              libc::calloc(layout.size(), 1) as *mut u8
      .                   } else {
      .                       let ptr = self.alloc(layout);
      .                       if !ptr.is_null() {
      .                           ptr::write_bytes(ptr, 0, layout.size());
      .                       }
      .                       ptr
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
 75,213 ( 0.03%)          libc::free(ptr as *mut libc::c_void)
      .               }
      .           
      .               #[inline]
      .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 19,548 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
 39,096 ( 0.02%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
      .                   } else {
      .                       realloc_fallback(self, ptr, layout, new_size)
      .                   }
      .               }
      .           }
      .           
      .           cfg_if::cfg_if! {
      .               if #[cfg(any(
-- line 56 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs
--------------------------------------------------------------------------------
Ir               

-- line 44 ----------------------------------------
      .           /// Convert from a specific kind of undo to the more general UndoLog
      .           impl<'tcx> From<Instantiate> for UndoLog<'tcx> {
      .               fn from(l: Instantiate) -> Self {
      .                   UndoLog::Values(sv::UndoLog::Other(l))
      .               }
      .           }
      .           
      .           impl<'tcx> Rollback<UndoLog<'tcx>> for TypeVariableStorage<'tcx> {
  4,441 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
 18,723 ( 0.01%)          match undo {
  3,482 ( 0.00%)              UndoLog::EqRelation(undo) => self.eq_relations.reverse(undo),
  2,026 ( 0.00%)              UndoLog::SubRelation(undo) => self.sub_relations.reverse(undo),
  3,374 ( 0.00%)              UndoLog::Values(undo) => self.values.reverse(undo),
      .                   }
  8,882 ( 0.00%)      }
      .           }
      .           
      .           pub struct TypeVariableStorage<'tcx> {
      .               values: sv::SnapshotVecStorage<Delegate>,
      .           
      .               /// Two variables are unified in `eq_relations` when we have a
      .               /// constraint `?X == ?Y`. This table also stores, for each key,
      .               /// the known value.
-- line 66 ----------------------------------------
-- line 136 ----------------------------------------
      .               DynReturnFn,
      .               LatticeVariable,
      .           }
      .           
      .           pub(crate) struct TypeVariableData {
      .               origin: TypeVariableOrigin,
      .           }
      .           
 42,618 ( 0.02%)  #[derive(Copy, Clone, Debug)]
      .           pub enum TypeVariableValue<'tcx> {
      .               Known { value: Ty<'tcx> },
      .               Unknown { universe: ty::UniverseIndex },
      .           }
      .           
      .           impl<'tcx> TypeVariableValue<'tcx> {
      .               /// If this value is known, returns the type it is known to be.
      .               /// Otherwise, `None`.
      .               pub fn known(&self) -> Option<Ty<'tcx>> {
 26,712 ( 0.01%)          match *self {
      .                       TypeVariableValue::Unknown { .. } => None,
      .                       TypeVariableValue::Known { value } => Some(value),
      .                   }
      .               }
      .           
      .               pub fn is_unknown(&self) -> bool {
      .                   match *self {
      .                       TypeVariableValue::Unknown { .. } => true,
-- line 162 ----------------------------------------
-- line 166 ----------------------------------------
      .           }
      .           
      .           pub(crate) struct Instantiate;
      .           
      .           pub(crate) struct Delegate;
      .           
      .           impl<'tcx> TypeVariableStorage<'tcx> {
      .               pub fn new() -> TypeVariableStorage<'tcx> {
  3,771 ( 0.00%)          TypeVariableStorage {
      .                       values: sv::SnapshotVecStorage::new(),
      .                       eq_relations: ut::UnificationTableStorage::new(),
      .                       sub_relations: ut::UnificationTableStorage::new(),
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub(crate) fn with_log<'a>(
-- line 182 ----------------------------------------
-- line 188 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> TypeVariableTable<'_, 'tcx> {
      .               /// Returns the origin that was given when `vid` was created.
      .               ///
      .               /// Note that this function does not return care whether
      .               /// `vid` has been unified with something else or not.
      .               pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin {
     86 ( 0.00%)          &self.storage.values.get(vid.as_usize()).origin
      .               }
      .           
      .               /// Records that `a == b`, depending on `dir`.
      .               ///
      .               /// Precondition: neither `a` nor `b` are known.
      .               pub fn equate(&mut self, a: ty::TyVid, b: ty::TyVid) {
      .                   debug_assert!(self.probe(a).is_unknown());
      .                   debug_assert!(self.probe(b).is_unknown());
    308 ( 0.00%)          self.eq_relations().union(a, b);
    264 ( 0.00%)          self.sub_relations().union(a, b);
      .               }
      .           
      .               /// Records that `a <: b`, depending on `dir`.
      .               ///
      .               /// Precondition: neither `a` nor `b` are known.
      .               pub fn sub(&mut self, a: ty::TyVid, b: ty::TyVid) {
      .                   debug_assert!(self.probe(a).is_unknown());
      .                   debug_assert!(self.probe(b).is_unknown());
    550 ( 0.00%)          self.sub_relations().union(a, b);
      .               }
      .           
      .               /// Instantiates `vid` with the type `ty`.
      .               ///
      .               /// Precondition: `vid` must not have been previously instantiated.
  8,910 ( 0.00%)      pub fn instantiate(&mut self, vid: ty::TyVid, ty: Ty<'tcx>) {
      .                   let vid = self.root_var(vid);
      .                   debug_assert!(self.probe(vid).is_unknown());
      .                   debug_assert!(
      .                       self.eq_relations().probe_value(vid).is_unknown(),
      .                       "instantiating type variable `{:?}` twice: new-value = {:?}, old-value={:?}",
      .                       vid,
      .                       ty,
      .                       self.eq_relations().probe_value(vid)
      .                   );
 12,474 ( 0.01%)          self.eq_relations().union_value(vid, TypeVariableValue::Known { value: ty });
      .           
      .                   // Hack: we only need this so that `types_escaping_snapshot`
      .                   // can see what has been unified; see the Delegate impl for
      .                   // more details.
      .                   self.undo_log.push(Instantiate);
  8,910 ( 0.00%)      }
      .           
      .               /// Creates a new type variable.
      .               ///
      .               /// - `diverging`: indicates if this is a "diverging" type
      .               ///   variable, e.g.,  one created as the type of a `return`
      .               ///   expression. The code in this module doesn't care if a
      .               ///   variable is diverging, but the main Rust type-checker will
      .               ///   sometimes "unify" such variables with the `!` or `()` types.
      .               /// - `origin`: indicates *why* the type variable was created.
      .               ///   The code in this module doesn't care, but it can be useful
      .               ///   for improving error messages.
 10,758 ( 0.00%)      pub fn new_var(
      .                   &mut self,
      .                   universe: ty::UniverseIndex,
      .                   origin: TypeVariableOrigin,
      .               ) -> ty::TyVid {
 16,137 ( 0.01%)          let eq_key = self.eq_relations().new_key(TypeVariableValue::Unknown { universe });
      .           
  8,965 ( 0.00%)          let sub_key = self.sub_relations().new_key(());
  1,793 ( 0.00%)          assert_eq!(eq_key.vid, sub_key);
      .           
 16,137 ( 0.01%)          let index = self.values().push(TypeVariableData { origin });
  7,172 ( 0.00%)          assert_eq!(eq_key.vid.as_u32(), index as u32);
      .           
      .                   debug!("new_var(index={:?}, universe={:?}, origin={:?}", eq_key.vid, universe, origin,);
      .           
      .                   eq_key.vid
 12,551 ( 0.01%)      }
      .           
      .               /// Returns the number of type variables created thus far.
      .               pub fn num_vars(&self) -> usize {
    162 ( 0.00%)          self.storage.values.len()
      .               }
      .           
      .               /// Returns the "root" variable of `vid` in the `eq_relations`
      .               /// equivalence table. All type variables that have been equated
      .               /// will yield the same root variable (per the union-find
      .               /// algorithm), so `root_var(a) == root_var(b)` implies that `a ==
      .               /// b` (transitively).
      .               pub fn root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
  8,175 ( 0.00%)          self.eq_relations().find(vid).vid
      .               }
      .           
      .               /// Returns the "root" variable of `vid` in the `sub_relations`
      .               /// equivalence table. All type variables that have been are
      .               /// related via equality or subtyping will yield the same root
      .               /// variable (per the union-find algorithm), so `sub_root_var(a)
      .               /// == sub_root_var(b)` implies that:
      .               ///
      .               ///     exists X. (a <: X || X <: a) && (b <: X || X <: b)
     44 ( 0.00%)      pub fn sub_root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
  5,712 ( 0.00%)          self.sub_relations().find(vid)
     88 ( 0.00%)      }
      .           
      .               /// Returns `true` if `a` and `b` have same "sub-root" (i.e., exists some
      .               /// type X such that `forall i in {a, b}. (i <: X || X <: i)`.
      .               pub fn sub_unified(&mut self, a: ty::TyVid, b: ty::TyVid) -> bool {
      .                   self.sub_root_var(a) == self.sub_root_var(b)
      .               }
      .           
      .               /// Retrieves the type to which `vid` has been instantiated, if
      .               /// any.
 97,415 ( 0.04%)      pub fn probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
      .                   self.inlined_probe(vid)
 97,415 ( 0.04%)      }
      .           
      .               /// An always-inlined variant of `probe`, for very hot call sites.
      .               #[inline(always)]
      .               pub fn inlined_probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
102,746 ( 0.04%)          self.eq_relations().inlined_probe_value(vid)
      .               }
      .           
      .               /// If `t` is a type-inference variable, and it has been
      .               /// instantiated, then return the with which it was
      .               /// instantiated. Otherwise, returns `t`.
      .               pub fn replace_if_possible(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
 20,294 ( 0.01%)          match *t.kind() {
 14,666 ( 0.01%)              ty::Infer(ty::TyVar(v)) => match self.probe(v) {
      .                           TypeVariableValue::Unknown { .. } => t,
      .                           TypeVariableValue::Known { value } => value,
      .                       },
      .                       _ => t,
      .                   }
      .               }
      .           
      .               #[inline]
-- line 323 ----------------------------------------
-- line 324 ----------------------------------------
      .               fn values(
      .                   &mut self,
      .               ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {
      .                   self.storage.values.with_log(self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn eq_relations(&mut self) -> super::UnificationTable<'_, 'tcx, TyVidEqKey<'tcx>> {
102,051 ( 0.04%)          self.storage.eq_relations.with_log(self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn sub_relations(&mut self) -> super::UnificationTable<'_, 'tcx, ty::TyVid> {
  4,089 ( 0.00%)          self.storage.sub_relations.with_log(self.undo_log)
      .               }
      .           
      .               /// Returns a range of the type variables created during the snapshot.
    810 ( 0.00%)      pub fn vars_since_snapshot(
      .                   &mut self,
      .                   value_count: usize,
      .               ) -> (Range<TyVid>, Vec<TypeVariableOrigin>) {
      .                   let range = TyVid::from_usize(value_count)..TyVid::from_usize(self.num_vars());
    972 ( 0.00%)          (
      .                       range.start..range.end,
      .                       (range.start.as_usize()..range.end.as_usize())
      .                           .map(|index| self.storage.values.get(index).origin)
      .                           .collect(),
      .                   )
    972 ( 0.00%)      }
      .           
      .               /// Returns indices of all variables that are not yet
      .               /// instantiated.
      .               pub fn unsolved_variables(&mut self) -> Vec<ty::TyVid> {
      .                   (0..self.storage.values.len())
      .                       .filter_map(|i| {
      .                           let vid = ty::TyVid::from_usize(i);
  6,216 ( 0.00%)                  match self.probe(vid) {
      .                               TypeVariableValue::Unknown { .. } => Some(vid),
      .                               TypeVariableValue::Known { .. } => None,
      .                           }
      .                       })
      .                       .collect()
      .               }
      .           }
      .           
-- line 368 ----------------------------------------
-- line 391 ----------------------------------------
      .           /// These structs (a newtyped TyVid) are used as the unification key
      .           /// for the `eq_relations`; they carry a `TypeVariableValue` along
      .           /// with them.
      .           #[derive(Copy, Clone, Debug, PartialEq, Eq)]
      .           pub(crate) struct TyVidEqKey<'tcx> {
      .               vid: ty::TyVid,
      .           
      .               // in the table, we map each ty-vid to one of these:
121,820 ( 0.05%)      phantom: PhantomData<TypeVariableValue<'tcx>>,
      .           }
      .           
      .           impl<'tcx> From<ty::TyVid> for TyVidEqKey<'tcx> {
      .               #[inline] // make this function eligible for inlining - it is quite hot.
      .               fn from(vid: ty::TyVid) -> Self {
      .                   TyVidEqKey { vid, phantom: PhantomData }
      .               }
      .           }
-- line 407 ----------------------------------------
-- line 419 ----------------------------------------
      .                   "TyVidEqKey"
      .               }
      .           }
      .           
      .           impl<'tcx> ut::UnifyValue for TypeVariableValue<'tcx> {
      .               type Error = ut::NoError;
      .           
      .               fn unify_values(value1: &Self, value2: &Self) -> Result<Self, ut::NoError> {
  7,348 ( 0.00%)          match (value1, value2) {
      .                       // We never equate two type variables, both of which
      .                       // have known types.  Instead, we recursively equate
      .                       // those types.
      .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Known { .. }) => {
      .                           bug!("equating two type variables, both of which have known types")
      .                       }
      .           
      .                       // If one side is known, prefer that one.
      .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Unknown { .. }) => Ok(*value1),
      .                       (&TypeVariableValue::Unknown { .. }, &TypeVariableValue::Known { .. }) => Ok(*value2),
      .           
      .                       // If both sides are *unknown*, it hardly matters, does it?
      .                       (
     44 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe1 },
     44 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe2 },
      .                       ) => {
      .                           // If we unify two unbound variables, ?T and ?U, then whatever
      .                           // value they wind up taking (which must be the same value) must
      .                           // be nameable by both universes. Therefore, the resulting
      .                           // universe is the minimum of the two universes, because that is
      .                           // the one which contains the fewest names in scope.
      .                           let universe = cmp::min(universe1, universe2);
    176 ( 0.00%)                  Ok(TypeVariableValue::Unknown { universe })
      .                       }
      .                   }
      .               }
      .           }

  4,991 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs
--------------------------------------------------------------------------------
Ir               

-- line 267 ----------------------------------------
      .           macro_rules! bitor_impl {
      .               ($($t:ty)*) => ($(
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
      .                   impl const BitOr for $t {
      .                       type Output = $t;
      .           
      .                       #[inline]
    318 ( 0.00%)              fn bitor(self, rhs: $t) -> $t { self | rhs }
      .                   }
      .           
      .                   forward_ref_binop! { impl const BitOr, bitor for $t, $t }
      .               )*)
      .           }
      .           
      .           bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
      .           
-- line 283 ----------------------------------------
-- line 368 ----------------------------------------
      .           macro_rules! bitxor_impl {
      .               ($($t:ty)*) => ($(
      .                   #[stable(feature = "rust1", since = "1.0.0")]
      .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
      .                   impl const BitXor for $t {
      .                       type Output = $t;
      .           
      .                       #[inline]
620,257 ( 0.27%)              fn bitxor(self, other: $t) -> $t { self ^ other }
      .                   }
      .           
      .                   forward_ref_binop! { impl const BitXor, bitxor for $t, $t }
      .               )*)
      .           }
      .           
      .           bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
      .           
-- line 384 ----------------------------------------

107,075 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs
--------------------------------------------------------------------------------
Ir              

-- line 35 ----------------------------------------
     .           
     .               /// Contains the successors for all the Sccs, concatenated. The
     .               /// range of indices corresponding to a given SCC is found in its
     .               /// SccData.
     .               all_successors: Vec<S>,
     .           }
     .           
     .           impl<N: Idx, S: Idx + Ord> Sccs<N, S> {
   172 ( 0.00%)      pub fn new(graph: &(impl DirectedGraph<Node = N> + WithNumNodes + WithSuccessors)) -> Self {
     .                   SccsConstruction::construct(graph)
   180 ( 0.00%)      }
     .           
     .               /// Returns the number of SCCs in the graph.
     .               pub fn num_sccs(&self) -> usize {
     .                   self.scc_data.len()
     .               }
     .           
     .               /// Returns an iterator over the SCCs in the graph.
     .               ///
-- line 53 ----------------------------------------
-- line 56 ----------------------------------------
     .               /// This is convenient when the edges represent dependencies: when you visit
     .               /// `S1`, the value for `S2` will already have been computed.
     .               pub fn all_sccs(&self) -> impl Iterator<Item = S> {
     .                   (0..self.scc_data.len()).map(S::new)
     .               }
     .           
     .               /// Returns the SCC to which a node `r` belongs.
     .               pub fn scc(&self, r: N) -> S {
 4,017 ( 0.00%)          self.scc_indices[r]
     .               }
     .           
     .               /// Returns the successors of the given SCC.
     .               pub fn successors(&self, scc: S) -> &[S] {
     .                   self.scc_data.successors(scc)
     .               }
     .           
     .               /// Construct the reverse graph of the SCC graph.
-- line 72 ----------------------------------------
-- line 116 ----------------------------------------
     .                   self.ranges.len()
     .               }
     .           
     .               /// Returns the successors of the given SCC.
     .               fn successors(&self, scc: S) -> &[S] {
     .                   // Annoyingly, `range` does not implement `Copy`, so we have
     .                   // to do `range.start..range.end`:
     .                   let range = &self.ranges[scc];
11,032 ( 0.00%)          &self.all_successors[range.start..range.end]
     .               }
     .           
     .               /// Creates a new SCC with `successors` as its successors and
     .               /// returns the resulting index.
     .               fn create_scc(&mut self, successors: impl IntoIterator<Item = S>) -> S {
     .                   // Store the successors on `scc_successors_vec`, remembering
     .                   // the range of indices.
 1,385 ( 0.00%)          let all_successors_start = self.all_successors.len();
     .                   self.all_successors.extend(successors);
     .                   let all_successors_end = self.all_successors.len();
     .           
     .                   debug!(
     .                       "create_scc({:?}) successors={:?}",
     .                       self.ranges.len(),
     .                       &self.all_successors[all_successors_start..all_successors_end],
     .                   );
-- line 140 ----------------------------------------
-- line 164 ----------------------------------------
     .               /// into the successors_stack, we sometimes get duplicate entries.
     .               /// We use this set to remove those -- we also keep its storage
     .               /// around between successors to amortize memory allocation costs.
     .               duplicate_set: FxHashSet<S>,
     .           
     .               scc_data: SccData<S>,
     .           }
     .           
   100 ( 0.00%)  #[derive(Copy, Clone, Debug)]
     .           enum NodeState<N, S> {
     .               /// This node has not yet been visited as part of the DFS.
     .               ///
     .               /// After SCC construction is complete, this state ought to be
     .               /// impossible.
     .               NotVisited,
     .           
     .               /// This node is currently being walk as part of our DFS. It is on
-- line 180 ----------------------------------------
-- line 216 ----------------------------------------
     .               /// N with depth D can reach some other node N' with lower depth
     .               /// D' (i.e., D' < D), we know that N, N', and all nodes in
     .               /// between them on the stack are part of an SCC.
     .               ///
     .               /// [wikipedia]: https://bit.ly/2EZIx84
     .               fn construct(graph: &'c G) -> Sccs<G::Node, S> {
     .                   let num_nodes = graph.num_nodes();
     .           
   220 ( 0.00%)          let mut this = Self {
     .                       graph,
     .                       node_states: IndexVec::from_elem_n(NodeState::NotVisited, num_nodes),
     .                       node_stack: Vec::with_capacity(num_nodes),
     .                       successors_stack: Vec::new(),
     .                       scc_data: SccData { ranges: IndexVec::new(), all_successors: Vec::new() },
     .                       duplicate_set: FxHashSet::default(),
     .                   };
     .           
     .                   let scc_indices = (0..num_nodes)
     .                       .map(G::Node::new)
11,502 ( 0.00%)              .map(|node| match this.start_walk_from(node) {
     .                           WalkReturn::Complete { scc_index } => scc_index,
     .                           WalkReturn::Cycle { min_depth } => panic!(
     .                               "`start_walk_node({:?})` returned cycle with depth {:?}",
     .                               node, min_depth
     .                           ),
     .                       })
     .                       .collect();
     .           
   120 ( 0.00%)          Sccs { scc_indices, scc_data: this.scc_data }
     .               }
     .           
17,253 ( 0.01%)      fn start_walk_from(&mut self, node: G::Node) -> WalkReturn<S> {
 7,668 ( 0.00%)          if let Some(result) = self.inspect_node(node) {
     .                       result
     .                   } else {
     .                       self.walk_unvisited_node(node)
     .                   }
19,170 ( 0.01%)      }
     .           
     .               /// Inspect a node during the DFS. We first examine its current
     .               /// state -- if it is not yet visited (`NotVisited`), return `None` so
     .               /// that the caller might push it onto the stack and start walking its
     .               /// successors.
     .               ///
     .               /// If it is already on the DFS stack it will be in the state
     .               /// `BeingVisited`. In that case, we have found a cycle and we
     .               /// return the depth from the stack.
     .               ///
     .               /// Otherwise, we are looking at a node that has already been
     .               /// completely visited. We therefore return `WalkReturn::Complete`
     .               /// with its associated SCC index.
22,996 ( 0.01%)      fn inspect_node(&mut self, node: G::Node) -> Option<WalkReturn<S>> {
45,992 ( 0.02%)          Some(match self.find_state(node) {
 9,759 ( 0.00%)              NodeState::InCycle { scc_index } => WalkReturn::Complete { scc_index },
     .           
 1,737 ( 0.00%)              NodeState::BeingVisited { depth: min_depth } => WalkReturn::Cycle { min_depth },
     .           
     .                       NodeState::NotVisited => return None,
     .           
     .                       NodeState::InCycleWith { parent } => panic!(
     .                           "`find_state` returned `InCycleWith({:?})`, which ought to be impossible",
     .                           parent
     .                       ),
     .                   })
40,243 ( 0.02%)      }
     .           
     .               /// Fetches the state of the node `r`. If `r` is recorded as being
     .               /// in a cycle with some other node `r2`, then fetches the state
     .               /// of `r2` (and updates `r` to reflect current result). This is
     .               /// basically the "find" part of a standard union-find algorithm
     .               /// (with path compression).
     .               fn find_state(&mut self, mut node: G::Node) -> NodeState<G::Node, S> {
     .                   // To avoid recursion we temporarily reuse the `parent` of each
-- line 288 ----------------------------------------
-- line 299 ----------------------------------------
     .                   // following links downwards is then simply as soon as we have
     .                   // found the initial self-loop.
     .                   let mut previous_node = node;
     .           
     .                   // Ultimately assigned by the parent when following
     .                   // `InCycleWith` upwards.
     .                   let node_state = loop {
     .                       debug!("find_state(r = {:?} in state {:?})", node, self.node_states[node]);
45,482 ( 0.02%)              match self.node_states[node] {
13,012 ( 0.01%)                  NodeState::InCycle { scc_index } => break NodeState::InCycle { scc_index },
 2,316 ( 0.00%)                  NodeState::BeingVisited { depth } => break NodeState::BeingVisited { depth },
 1,917 ( 0.00%)                  NodeState::NotVisited => break NodeState::NotVisited,
   831 ( 0.00%)                  NodeState::InCycleWith { parent } => {
     .                               // We test this, to be extremely sure that we never
     .                               // ever break our termination condition for the
     .                               // reverse iteration loop.
   831 ( 0.00%)                      assert!(node != parent, "Node can not be in cycle with itself");
     .                               // Store the previous node as an inverted list link
 4,155 ( 0.00%)                      self.node_states[node] = NodeState::InCycleWith { parent: previous_node };
     .                               // Update to parent node.
     .                               previous_node = node;
     .                               node = parent;
     .                           }
     .                       }
     .                   };
     .           
     .                   // The states form a graph where up to one outgoing link is stored at
-- line 325 ----------------------------------------
-- line 355 ----------------------------------------
     .                   // We can then walk backwards, starting from `previous_node`, and assign
     .                   // each node in the list with the updated state. The loop terminates
     .                   // when we reach the self-cycle.
     .           
     .                   // Move backwards until we found the node where we started. We
     .                   // will know when we hit the state where previous_node == node.
     .                   loop {
     .                       // Back at the beginning, we can return.
 8,907 ( 0.00%)              if previous_node == node {
     .                           return node_state;
     .                       }
     .                       // Update to previous node in the link.
 1,662 ( 0.00%)              match self.node_states[previous_node] {
   831 ( 0.00%)                  NodeState::InCycleWith { parent: previous } => {
     .                               node = previous_node;
     .                               previous_node = previous;
     .                           }
     .                           // Only InCycleWith nodes were added to the reverse linked list.
     .                           other => panic!("Invalid previous link while compressing cycle: {:?}", other),
     .                       }
     .           
     .                       debug!("find_state: parent_state = {:?}", node_state);
     .           
     .                       // Update the node state from the parent state. The assigned
     .                       // state is actually a loop invariant but it will only be
     .                       // evaluated if there is at least one backlink to follow.
     .                       // Fully trusting llvm here to find this loop optimization.
 3,324 ( 0.00%)              match node_state {
     .                           // Path compression, make current node point to the same root.
     .                           NodeState::InCycle { .. } => {
 1,064 ( 0.00%)                      self.node_states[node] = node_state;
     .                           }
     .                           // Still visiting nodes, compress to cycle to the node
     .                           // at that depth.
   299 ( 0.00%)                  NodeState::BeingVisited { depth } => {
   598 ( 0.00%)                      self.node_states[node] =
   299 ( 0.00%)                          NodeState::InCycleWith { parent: self.node_stack[depth] };
     .                           }
     .                           // These are never allowed as parent nodes. InCycleWith
     .                           // should have been followed to a real parent and
     .                           // NotVisited can not be part of a cycle since it should
     .                           // have instead gotten explored.
     .                           NodeState::NotVisited | NodeState::InCycleWith { .. } => {
     .                               panic!("invalid parent state: {:?}", node_state)
     .                           }
     .                       }
     .                   }
11,498 ( 0.00%)      }
     .           
     .               /// Walks a node that has never been visited before.
     .               ///
     .               /// Call this method when `inspect_node` has returned `None`. Having the
     .               /// caller decide avoids mutual recursion between the two methods and allows
     .               /// us to maintain an allocated stack for nodes on the path between calls.
     .               #[instrument(skip(self, initial), level = "debug")]
     .               fn walk_unvisited_node(&mut self, initial: G::Node) -> WalkReturn<S> {
-- line 410 ----------------------------------------
-- line 418 ----------------------------------------
     .                       successor_node: G::Node,
     .                   }
     .           
     .                   // Move the stack to a local variable. We want to utilize the existing allocation and
     .                   // mutably borrow it without borrowing self at the same time.
     .                   let mut successors_stack = core::mem::take(&mut self.successors_stack);
     .                   debug_assert_eq!(successors_stack.len(), 0);
     .           
   168 ( 0.00%)          let mut stack: Vec<VisitingNodeFrame<G, _>> = vec![VisitingNodeFrame {
     .                       node: initial,
     .                       depth: 0,
     .                       min_depth: 0,
     .                       iter: None,
     .                       successors_len: 0,
     .                       min_cycle_root: initial,
     .                       successor_node: initial,
     .                   }];
     .           
     .                   let mut return_value = None;
     .           
 1,917 ( 0.00%)          'recurse: while let Some(frame) = stack.last_mut() {
     .                       let VisitingNodeFrame {
 7,588 ( 0.00%)                  node,
     .                           depth,
     .                           iter,
 7,620 ( 0.00%)                  successors_len,
     .                           min_depth,
     .                           min_cycle_root,
     .                           successor_node,
     .                       } = frame;
     .           
 3,810 ( 0.00%)              let node = *node;
 7,652 ( 0.00%)              let depth = *depth;
     .           
11,430 ( 0.00%)              let successors = match iter {
     .                           Some(iter) => iter,
     .                           None => {
     .                               // This None marks that we still have the initialize this node's frame.
     .                               debug!(?depth, ?node);
     .           
     .                               debug_assert!(matches!(self.node_states[node], NodeState::NotVisited));
     .           
     .                               // Push `node` onto the stack.
 7,668 ( 0.00%)                      self.node_states[node] = NodeState::BeingVisited { depth };
     .                               self.node_stack.push(node);
     .           
     .                               // Walk each successor of the node, looking to see if any of
     .                               // them can reach a node that is presently on the stack. If
     .                               // so, that means they can also reach us.
 3,834 ( 0.00%)                      *successors_len = successors_stack.len();
     .                               // Set and return a reference, this is currently empty.
 7,648 ( 0.00%)                      iter.get_or_insert(self.graph.successors(node))
     .                           }
     .                       };
     .           
     .                       // Now that iter is initialized, this is a constant for this frame.
 7,620 ( 0.00%)              let successors_len = *successors_len;
     .           
     .                       // Construct iterators for the nodes and walk results. There are two cases:
     .                       // * The walk of a successor node returned.
     .                       // * The remaining successor nodes.
     .                       let returned_walk =
     .                           return_value.take().into_iter().map(|walk| (*successor_node, Some(walk)));
     .           
     .                       let successor_walk = successors.by_ref().map(|successor_node| {
     .                           debug!(?node, ?successor_node);
11,496 ( 0.00%)                  (successor_node, self.inspect_node(successor_node))
     .                       });
     .           
15,316 ( 0.01%)              for (successor_node, walk) in returned_walk.chain(successor_walk) {
20,678 ( 0.01%)                  match walk {
     .                               Some(WalkReturn::Cycle { min_depth: successor_min_depth }) => {
     .                                   // Track the minimum depth we can reach.
 2,222 ( 0.00%)                          assert!(successor_min_depth <= depth);
 2,773 ( 0.00%)                          if successor_min_depth < *min_depth {
     .                                       debug!(?node, ?successor_min_depth);
 1,641 ( 0.00%)                              *min_depth = successor_min_depth;
   551 ( 0.00%)                              *min_cycle_root = successor_node;
     .                                   }
     .                               }
     .           
     .                               Some(WalkReturn::Complete { scc_index: successor_scc_index }) => {
     .                                   // Push the completed SCC indices onto
     .                                   // the `successors_stack` for later.
     .                                   debug!(?node, ?successor_scc_index);
     .                                   successors_stack.push(successor_scc_index);
     .                               }
     .           
     .                               None => {
 3,786 ( 0.00%)                          let depth = depth + 1;
     .                                   debug!(?depth, ?successor_node);
     .                                   // Remember which node the return value will come from.
 1,893 ( 0.00%)                          frame.successor_node = successor_node;
     .                                   // Start a new stack frame the step into it.
     .                                   stack.push(VisitingNodeFrame {
     .                                       node: successor_node,
     .                                       depth,
     .                                       iter: None,
     .                                       successors_len: 0,
     .                                       min_depth: depth,
     .                                       min_cycle_root: successor_node,
-- line 518 ----------------------------------------
-- line 531 ----------------------------------------
     .                       let frame = stack.pop().unwrap();
     .           
     .                       // If `min_depth == depth`, then we are the root of the
     .                       // cycle: we can't reach anyone further down the stack.
     .           
     .                       // Pass the 'return value' down the stack.
     .                       // We return one frame at a time so there can't be another return value.
     .                       debug_assert!(return_value.is_none());
 3,834 ( 0.00%)              return_value = Some(if frame.min_depth == depth {
     .                           // Note that successor stack may have duplicates, so we
     .                           // want to remove those:
     .                           let deduplicated_successors = {
     .                               let duplicate_set = &mut self.duplicate_set;
     .                               duplicate_set.clear();
     .                               successors_stack
     .                                   .drain(successors_len..)
 2,721 ( 0.00%)                          .filter(move |&i| duplicate_set.insert(i))
     .                           };
     .                           let scc_index = self.scc_data.create_scc(deduplicated_successors);
 8,310 ( 0.00%)                  self.node_states[node] = NodeState::InCycle { scc_index };
     .                           WalkReturn::Complete { scc_index }
     .                       } else {
     .                           // We are not the head of the cycle. Return back to our
     .                           // caller. They will take ownership of the
     .                           // `self.successors` data that we pushed.
 3,192 ( 0.00%)                  self.node_states[node] = NodeState::InCycleWith { parent: frame.min_cycle_root };
     .                           WalkReturn::Cycle { min_depth: frame.min_depth }
     .                       });
     .                   }
     .           
     .                   // Keep the allocation we used for successors_stack.
   216 ( 0.00%)          self.successors_stack = successors_stack;
     .                   debug_assert_eq!(self.successors_stack.len(), 0);
     .           
     .                   return_value.unwrap()
     .               }
     .           }

83,373 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/graph/scc/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir               

-- line 186 ----------------------------------------
      .           /// // use the values stored in map
      .           /// ```
      .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
      .               pub(crate) hash_builder: S,
      .               pub(crate) table: RawTable<(K, V), A>,
      .           }
      .           
      .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
     24 ( 0.00%)      fn clone(&self) -> Self {
    277 ( 0.00%)          HashMap {
      .                       hash_builder: self.hash_builder.clone(),
     59 ( 0.00%)              table: self.table.clone(),
      .                   }
     27 ( 0.00%)      }
      .           
      .               fn clone_from(&mut self, source: &Self) {
      .                   self.table.clone_from(&source.table);
      .           
      .                   // Update hash_builder only if we successfully cloned all elements.
      .                   self.hash_builder.clone_from(&source.hash_builder);
      .               }
      .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash,
      .               S: BuildHasher,
      .           {
 11,183 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
 28,472 ( 0.01%)      move |x| k.eq(x.0.borrow())
      .           }
      .           
      .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
      .           /// instances of any functions like RawTable::reserve from being generated
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
      .           where
      .               K: Borrow<Q>,
      .               Q: ?Sized + Eq,
      .           {
 33,233 ( 0.01%)      move |x| k.eq(x.borrow())
      .           }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
      .               use core::hash::Hasher;
      .               let mut state = hash_builder.build_hasher();
      .               val.hash(&mut state);
      .               state.finish()
      .           }
      .           
      .           #[cfg(feature = "nightly")]
      .           #[cfg_attr(feature = "inline-more", inline)]
      2 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
      .           where
      .               K: Borrow<Q>,
      .               Q: Hash + ?Sized,
      .               S: BuildHasher,
      .           {
      .               hash_builder.hash_one(val)
      4 ( 0.00%)  }
      .           
      .           #[cfg(not(feature = "nightly"))]
      .           #[cfg_attr(feature = "inline-more", inline)]
      .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
      .           where
      .               K: Hash,
      .               S: BuildHasher,
      .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               ///
      .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub const fn with_hasher(hash_builder: S) -> Self {
 14,692 ( 0.01%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new(),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys.
      .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
      .               /// use hashbrown::hash_map::DefaultHashBuilder;
      .               ///
      .               /// let s = DefaultHashBuilder::default();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
    118 ( 0.00%)          Self {
      .                       hash_builder,
      .                       table: RawTable::new_in(alloc),
      .                   }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys. It will be allocated with the given allocator.
      .               ///
-- line 453 ----------------------------------------
-- line 663 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert_eq!(a.len(), 0);
      .               /// a.insert(1, "a");
      .               /// assert_eq!(a.len(), 1);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn len(&self) -> usize {
  1,172 ( 0.00%)          self.table.len()
      .               }
      .           
      .               /// Returns `true` if the map contains no elements.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// assert!(a.is_empty());
      .               /// a.insert(1, "a");
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn is_empty(&self) -> bool {
  8,137 ( 0.00%)          self.len() == 0
      .               }
      .           
      .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
      .               /// allocated memory for reuse.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut a = HashMap::new();
      .               /// a.insert(1, "a");
      .               /// a.clear();
      .               /// assert!(a.is_empty());
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      6 ( 0.00%)      pub fn clear(&mut self) {
      .                   self.table.clear();
      6 ( 0.00%)      }
      .           
      .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
      .               /// The map cannot be used after calling this.
      .               /// The iterator element type is `K`.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
    492 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
      .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
     45 ( 0.00%)              Entry::Occupied(OccupiedEntry {
      .                           hash,
      .                           key: Some(key),
      .                           elem,
      .                           table: self,
      .                       })
      .                   } else {
    570 ( 0.00%)              Entry::Vacant(VacantEntry {
      .                           hash,
      .                           key,
      .                           table: self,
      .                       })
      .                   }
    615 ( 0.00%)      }
      .           
      .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
      .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
      .               /// ```
      .               #[inline]
      .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 65,580 ( 0.03%)          match self.get_inner(k) {
      .                       Some(&(_, ref v)) => Some(v),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
 88,813 ( 0.04%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      1 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.contains_key(&1), true);
      .               /// assert_eq!(map.contains_key(&2), false);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
 27,871 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   self.get_inner(k).is_some()
 34,112 ( 0.01%)      }
      .           
      .               /// Returns a mutable reference to the value corresponding to the key.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
      .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// if let Some(x) = map.get_mut(&1) {
      .               ///     *x = "b";
      .               /// }
      .               /// assert_eq!(map[&1], "b");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
     32 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
     96 ( 0.00%)          match self.get_inner_mut(k) {
      .                       Some(&mut (_, ref mut v)) => Some(v),
      .                       None => None,
      .                   }
     64 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
     32 ( 0.00%)          if self.table.is_empty() {
      .                       None
      .                   } else {
      .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
      .                       self.table.get_mut(hash, equivalent_key(k))
      .                   }
      .               }
      .           
      .               /// Attempts to get mutable references to `N` values in the map at once.
-- line 1219 ----------------------------------------
-- line 1495 ----------------------------------------
      .               /// assert_eq!(map.insert(37, "a"), None);
      .               /// assert_eq!(map.is_empty(), false);
      .               ///
      .               /// map.insert(37, "b");
      .               /// assert_eq!(map.insert(37, "c"), Some("b"));
      .               /// assert_eq!(map[&37], "c");
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
402,360 ( 0.17%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
      .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
     15 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
      4 ( 0.00%)              Some(mem::replace(item, v))
      .                   } else {
220,459 ( 0.10%)              self.table
207,475 ( 0.09%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
 18,769 ( 0.01%)              None
      .                   }
361,413 ( 0.16%)      }
      .           
      .               /// Insert a key-value pair into the map without checking
      .               /// if the key already exists in the map.
      .               ///
      .               /// Returns a reference to the key and value just inserted.
      .               ///
      .               /// This operation is safe if a key does not exist in the map.
      .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
      .               /// use hashbrown::HashMap;
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.remove(&1), Some("a"));
      .               /// assert_eq!(map.remove(&1), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  5,166 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
 91,046 ( 0.04%)          match self.remove_entry(k) {
  2,435 ( 0.00%)              Some((_, v)) => Some(v),
  4,003 ( 0.00%)              None => None,
      .                   }
 12,215 ( 0.01%)      }
      .           
      .               /// Removes a key from the map, returning the stored key and value if the
      .               /// key was previously in the map.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
 24,953 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
      .               }
      .           }
      .           
      .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
      .               /// Creates a raw entry builder for the HashMap.
      .               ///
      .               /// Raw entries provide the lowest level of control for searching and
      .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
      .               /// Creates a `RawEntryMut` from the given key and its hash.
      .               #[inline]
      .               #[allow(clippy::wrong_self_convention)]
      .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
189,390 ( 0.08%)          self.from_hash(hash, equivalent(k))
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
      .               /// Creates a `RawEntryMut` from the given hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
504,740 ( 0.22%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
      .                   self.search(hash, is_match)
538,374 ( 0.23%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
      .               {
 45,340 ( 0.02%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
241,303 ( 0.10%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
      .                           elem,
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
 77,723 ( 0.03%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
      .                           table: &mut self.map.table,
      .                           hash_builder: &self.map.hash_builder,
      .                       }),
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
      .               {
      .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
      .                   self.from_key_hashed_nocheck(hash, k)
      .               }
      .           
      .               /// Access an entry by a key and its hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
 94,551 ( 0.04%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
114,661 ( 0.05%)          self.from_hash(hash, equivalent(k))
167,356 ( 0.07%)      }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
      .               where
      .                   F: FnMut(&K) -> bool,
      .               {
150,354 ( 0.06%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
      .                       Some(&(ref key, ref value)) => Some((key, value)),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Access an entry by hash.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
      .               /// and returns a mutable reference to it.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               #[allow(clippy::shadow_unrelated)]
      .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
      .               where
      .                   K: Hash,
      .                   S: BuildHasher,
      .               {
126,151 ( 0.05%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
      .                       hash,
      .                       (key, value),
      .                       make_hasher::<K, _, V, S>(self.hash_builder),
      .                   );
      .                   (k, v)
      .               }
      .           
      .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
      .               /// map.insert("a", 1);
      .               /// map.insert("b", 2);
      .               /// map.insert("c", 3);
      .               ///
      .               /// // Not possible with .iter()
      .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
     45 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
  2,140 ( 0.00%)          IntoIter {
  1,702 ( 0.00%)              inner: self.table.into_iter(),
      .                   }
    135 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
      .               type Item = (&'a K, &'a V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
  8,794 ( 0.00%)          match self.inner.next() {
      .                       Some(x) => unsafe {
      .                           let r = x.as_ref();
    102 ( 0.00%)                  Some((&r.0, &r.1))
      .                       },
      .                       None => None,
      .                   }
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      1 ( 0.00%)          self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn len(&self) -> usize {
      .                   self.inner.len()
      .               }
      .           }
-- line 3013 ----------------------------------------
-- line 3051 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
      .               type Item = (K, V);
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<(K, V)> {
     30 ( 0.00%)          self.inner.next()
      .               }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
      .                   f.debug_list().entries(self.iter()).finish()
      .               }
      .           }
      .           
      .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
      .               type Item = &'a K;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
     22 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
      .                   match self.inner.next() {
      .                       Some((k, _)) => Some(k),
      .                       None => None,
      .                   }
     44 ( 0.00%)      }
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
      .                   self.inner.size_hint()
      .               }
      .           }
      .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn insert(self, value: V) -> &'a mut V
      .               where
      .                   K: Hash,
      .                   S: BuildHasher,
      .               {
      .                   let table = &mut self.table.table;
     44 ( 0.00%)          let entry = table.insert_entry(
      .                       self.hash,
      .                       (self.key, value),
      .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
      .                   );
      .                   &mut entry.1
      .               }
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
      .           /// keys with new values returned from the iterator.
      .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
      .           where
      .               K: Eq + Hash,
      .               S: BuildHasher,
      .               A: Allocator + Clone,
      .           {
      .               #[cfg_attr(feature = "inline-more", inline)]
  1,926 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
      .                   // Keys may be already present or show multiple times in the iterator.
      .                   // Reserve the entire hint lower bound if the map is empty.
      .                   // Otherwise reserve half the hint (rounded up), so the map
      .                   // will only resize twice in the worst case.
  1,430 ( 0.00%)          let iter = iter.into_iter();
  1,441 ( 0.00%)          let reserve = if self.is_empty() {
      .                       iter.size_hint().0
      .                   } else {
      3 ( 0.00%)              (iter.size_hint().0 + 1) / 2
      .                   };
      .                   self.reserve(reserve);
      .                   iter.for_each(move |(k, v)| {
 19,033 ( 0.01%)              self.insert(k, v);
      .                   });
  1,368 ( 0.00%)      }
      .           
      .               #[inline]
      .               #[cfg(feature = "nightly")]
      .               fn extend_one(&mut self, (k, v): (K, V)) {
      .                   self.insert(k, v);
      .               }
      .           
      .               #[inline]
-- line 4588 ----------------------------------------

250,285 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core/raw.rs
--------------------------------------------------------------------------------
Ir               

-- line 30 ----------------------------------------
      .                               bucket.write(i - offset);
      .                           } else if i >= start {
      .                               self.indices.erase(bucket);
      .                           }
      .                       }
      .                   }
      .               }
      .           
128,650 ( 0.06%)      pub(crate) fn entry(&mut self, hash: HashValue, key: K) -> Entry<'_, K, V>
      .               where
      .                   K: Eq,
      .               {
      .                   let eq = equivalent(&key, &self.entries);
  8,570 ( 0.00%)          match self.indices.find(hash.get(), eq) {
      .                       // SAFETY: The entry is created with a live raw bucket, at the same time
      .                       // we have a &mut reference to the map, so it can not be modified further.
  9,875 ( 0.00%)              Some(raw_bucket) => Entry::Occupied(OccupiedEntry {
      .                           map: self,
      .                           raw_bucket,
  5,208 ( 0.00%)                  key,
      .                       }),
 41,572 ( 0.02%)              None => Entry::Vacant(VacantEntry {
      .                           map: self,
      .                           hash,
 10,578 ( 0.00%)                  key,
      .                       }),
      .                   }
 96,849 ( 0.04%)      }
      .           
      .               pub(super) fn indices_mut(&mut self) -> impl Iterator<Item = &mut usize> {
      .                   // SAFETY: we're not letting any of the buckets escape this function,
      .                   // only the item references that are appropriately bound to `&mut self`.
      .                   unsafe { self.indices.iter().map(|bucket| bucket.as_mut()) }
      .               }
      .           
      .               /// Return the raw bucket for the given index
-- line 65 ----------------------------------------
-- line 139 ----------------------------------------
      .               pub fn index(&self) -> usize {
      .                   // SAFETY: we have &mut map keep keeping the bucket stable
      .                   unsafe { self.raw_bucket.read() }
      .               }
      .           
      .               /// Converts into a mutable reference to the entry's value in the map,
      .               /// with a lifetime bound to the map itself.
      .               pub fn into_mut(self) -> &'a mut V {
  1,830 ( 0.00%)          let index = self.index();
  5,490 ( 0.00%)          &mut self.map.entries[index].value
      .               }
      .           
      .               /// Remove and return the key, value pair stored in the map for this entry
      .               ///
      .               /// Like `Vec::swap_remove`, the pair is removed by swapping it with the
      .               /// last element of the map and popping it off. **This perturbs
      .               /// the position of what used to be the last element!**
      .               ///
-- line 156 ----------------------------------------

 87,003 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core/raw.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 168 ----------------------------------------
      .               pub self_ty: Ty<'tcx>,
      .               pub trait_ref: Option<TraitRef<'tcx>>,
      .               pub predicates: Vec<Predicate<'tcx>>,
      .           }
      .           
      .           #[derive(
      .               Copy,
      .               Clone,
  6,078 ( 0.00%)      PartialEq,
      .               Eq,
      .               Hash,
      .               TyEncodable,
  3,966 ( 0.00%)      TyDecodable,
      .               HashStable,
      .               Debug,
      .               TypeFoldable
      .           )]
      .           pub enum ImplPolarity {
      .               /// `impl Trait for Type`
      .               Positive,
      .               /// `impl !Trait for Type`
-- line 188 ----------------------------------------
-- line 210 ----------------------------------------
      .                   match self {
      .                       Self::Positive => f.write_str("positive"),
      .                       Self::Negative => f.write_str("negative"),
      .                       Self::Reservation => f.write_str("reservation"),
      .                   }
      .               }
      .           }
      .           
102,878 ( 0.04%)  #[derive(Clone, Debug, PartialEq, Eq, Copy, Hash, TyEncodable, TyDecodable, HashStable)]
      .           pub enum Visibility {
      .               /// Visible everywhere (including in other crates).
      .               Public,
      .               /// Visible only in the given crate-local module.
      .               Restricted(DefId),
      .               /// Not visible anywhere in the local crate. This is the visibility of private external items.
      .               Invisible,
      .           }
      .           
  6,631 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]
      .           pub enum BoundConstness {
      .               /// `T: Trait`
      .               NotConst,
      .               /// `T: ~const Trait`
      .               ///
      .               /// Requires resolving to const only when we are in a const context.
      .               ConstIfConst,
      .           }
      .           
      .           impl BoundConstness {
      .               /// Reduce `self` and `constness` to two possible combined states instead of four.
  2,672 ( 0.00%)      pub fn and(&mut self, constness: hir::Constness) -> hir::Constness {
  4,008 ( 0.00%)          match (constness, self) {
      .                       (hir::Constness::Const, BoundConstness::ConstIfConst) => hir::Constness::Const,
      .                       (_, this) => {
  3,912 ( 0.00%)                  *this = BoundConstness::NotConst;
      .                           hir::Constness::NotConst
      .                       }
      .                   }
  1,336 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Display for BoundConstness {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   match self {
      .                       Self::NotConst => f.write_str("normal"),
      .                       Self::ConstIfConst => f.write_str("`~const`"),
      .                   }
-- line 256 ----------------------------------------
-- line 274 ----------------------------------------
      .               pub before_feature_tys: Ty<'tcx>,
      .               /// Tuple containing the types of closure captures after the feature `capture_disjoint_fields`
      .               pub after_feature_tys: Ty<'tcx>,
      .           }
      .           
      .           pub trait DefIdTree: Copy {
      .               fn parent(self, id: DefId) -> Option<DefId>;
      .           
      7 ( 0.00%)      fn is_descendant_of(self, mut descendant: DefId, ancestor: DefId) -> bool {
      1 ( 0.00%)          if descendant.krate != ancestor.krate {
      .                       return false;
      .                   }
      .           
    750 ( 0.00%)          while descendant != ancestor {
    705 ( 0.00%)              match self.parent(descendant) {
      .                           Some(parent) => descendant = parent,
      .                           None => return false,
      .                       }
      .                   }
      .                   true
      8 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> DefIdTree for TyCtxt<'tcx> {
    756 ( 0.00%)      fn parent(self, id: DefId) -> Option<DefId> {
      .                   self.def_key(id).parent.map(|index| DefId { index, ..id })
  1,134 ( 0.00%)      }
      .           }
      .           
      .           impl Visibility {
     24 ( 0.00%)      pub fn from_hir(visibility: &hir::Visibility<'_>, id: hir::HirId, tcx: TyCtxt<'_>) -> Self {
     72 ( 0.00%)          match visibility.node {
      .                       hir::VisibilityKind::Public => Visibility::Public,
      .                       hir::VisibilityKind::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),
      .                       hir::VisibilityKind::Restricted { ref path, .. } => match path.res {
      .                           // If there is no resolution, `resolve` will have already reported an error, so
      .                           // assume that the visibility is public to avoid reporting more privacy errors.
      .                           Res::Err => Visibility::Public,
      .                           def => Visibility::Restricted(def.def_id()),
      .                       },
      .                       hir::VisibilityKind::Inherited => {
     48 ( 0.00%)                  Visibility::Restricted(tcx.parent_module(id).to_def_id())
      .                       }
      .                   }
     24 ( 0.00%)      }
      .           
      .               /// Returns `true` if an item with this visibility is accessible from the given block.
  3,906 ( 0.00%)      pub fn is_accessible_from<T: DefIdTree>(self, module: DefId, tree: T) -> bool {
 21,592 ( 0.01%)          let restriction = match self {
      .                       // Public items are visible everywhere.
      .                       Visibility::Public => return true,
      .                       // Private items from other crates are visible nowhere.
      .                       Visibility::Invisible => return false,
      .                       // Restricted items are visible in an arbitrary local module.
    331 ( 0.00%)              Visibility::Restricted(other) if other.krate != module.krate => return false,
      .                       Visibility::Restricted(module) => module,
      .                   };
      .           
      2 ( 0.00%)          tree.is_descendant_of(module, restriction)
  3,906 ( 0.00%)      }
      .           
      .               /// Returns `true` if this visibility is at least as accessible as the given visibility
    882 ( 0.00%)      pub fn is_at_least<T: DefIdTree>(self, vis: Visibility, tree: T) -> bool {
  1,126 ( 0.00%)          let vis_restriction = match vis {
      .                       Visibility::Public => return self == Visibility::Public,
      .                       Visibility::Invisible => return true,
      .                       Visibility::Restricted(module) => module,
      .                   };
      .           
      .                   self.is_accessible_from(vis_restriction, tree)
    882 ( 0.00%)      }
      .           
      .               // Returns `true` if this item is visible anywhere in the local crate.
      .               pub fn is_visible_locally(self) -> bool {
      .                   match self {
      .                       Visibility::Public => true,
      .                       Visibility::Restricted(def_id) => def_id.is_local(),
      .                       Visibility::Invisible => false,
      .                   }
      .               }
      .           
      .               pub fn is_public(self) -> bool {
    144 ( 0.00%)          matches!(self, Visibility::Public)
     72 ( 0.00%)      }
      .           }
      .           
      .           /// The crate variances map is computed during typeck and contains the
      .           /// variance of every item in the local crate. You should not use it
      .           /// directly, because to do so will make your pass dependent on the
      .           /// HIR of every item in the local crate. Instead, use
      .           /// `tcx.variances_of()` to get the variance for a *particular*
      .           /// item.
-- line 365 ----------------------------------------
-- line 509 ----------------------------------------
      .           #[derive(Clone, Copy, Lift)]
      .           pub struct Predicate<'tcx> {
      .               inner: &'tcx PredicateInner<'tcx>,
      .           }
      .           
      .           impl<'tcx> PartialEq for Predicate<'tcx> {
      .               fn eq(&self, other: &Self) -> bool {
      .                   // `self.kind` is always interned.
  6,278 ( 0.00%)          ptr::eq(self.inner, other.inner)
  5,872 ( 0.00%)      }
      .           }
      .           
      .           impl Hash for Predicate<'_> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   (self.inner as *const PredicateInner<'_>).hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Predicate<'tcx> {}
      .           
      .           impl<'tcx> Predicate<'tcx> {
      .               /// Gets the inner `Binder<'tcx, PredicateKind<'tcx>>`.
      .               #[inline]
      .               pub fn kind(self) -> Binder<'tcx, PredicateKind<'tcx>> {
 61,303 ( 0.03%)          self.inner.kind
      .               }
      .           
      .               /// Flips the polarity of a Predicate.
      .               ///
      .               /// Given `T: Trait` predicate it returns `T: !Trait` and given `T: !Trait` returns `T: Trait`.
      .               pub fn flip_polarity(&self, tcx: TyCtxt<'tcx>) -> Option<Predicate<'tcx>> {
      .                   let kind = self
      .                       .inner
-- line 541 ----------------------------------------
-- line 567 ----------------------------------------
      .                       flags: _,
      .                       outer_exclusive_binder: _,
      .                   } = self.inner;
      .           
      .                   kind.hash_stable(hcx, hasher);
      .               }
      .           }
      .           
301,824 ( 0.13%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
177,354 ( 0.08%)  #[derive(HashStable, TypeFoldable)]
      .           pub enum PredicateKind<'tcx> {
      .               /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be
      .               /// the `Self` type of the trait reference and `A`, `B`, and `C`
      .               /// would be the type parameters.
      .               Trait(TraitPredicate<'tcx>),
      .           
      .               /// `where 'a: 'b`
      .               RegionOutlives(RegionOutlivesPredicate<'tcx>),
-- line 584 ----------------------------------------
-- line 594 ----------------------------------------
      .               WellFormed(GenericArg<'tcx>),
      .           
      .               /// Trait must be object-safe.
      .               ObjectSafe(DefId),
      .           
      .               /// No direct syntax. May be thought of as `where T: FnFoo<...>`
      .               /// for some substitutions `...` and `T` being a closure type.
      .               /// Satisfied (or refuted) once we know the closure's kind.
    102 ( 0.00%)      ClosureKind(DefId, SubstsRef<'tcx>, ClosureKind),
      .           
      .               /// `T1 <: T2`
      .               ///
      .               /// This obligation is created most often when we have two
      .               /// unresolved type variables and hence don't have enough
      .               /// information to process the subtyping obligation yet.
    211 ( 0.00%)      Subtype(SubtypePredicate<'tcx>),
      .           
      .               /// `T1` coerced to `T2`
      .               ///
      .               /// Like a subtyping obligation, this is created most often
      .               /// when we have two unresolved type variables and hence
      .               /// don't have enough information to process the coercion
      .               /// obligation yet. At the moment, we actually process coercions
      .               /// very much like subtyping and don't handle the full coercion
-- line 617 ----------------------------------------
-- line 645 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> Predicate<'tcx> {
      .               /// Performs a substitution suitable for going from a
      .               /// poly-trait-ref to supertraits that must hold if that
      .               /// poly-trait-ref holds. This is slightly different from a normal
      .               /// substitution in terms of what happens with bound regions. See
      .               /// lengthy comment below for details.
  1,602 ( 0.00%)      pub fn subst_supertrait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_ref: &ty::PolyTraitRef<'tcx>,
      .               ) -> Predicate<'tcx> {
      .                   // The interaction between HRTB and supertraits is not entirely
      .                   // obvious. Let me walk you (and myself) through an example.
      .                   //
      .                   // Let's start with an easy case. Consider two traits:
-- line 661 ----------------------------------------
-- line 731 ----------------------------------------
      .                   //    ['x, 'b]
      .                   let bound_pred = self.kind();
      .                   let pred_bound_vars = bound_pred.bound_vars();
      .                   let trait_bound_vars = trait_ref.bound_vars();
      .                   // 1) Self: Bar1<'a, '^0.0> -> Self: Bar1<'a, '^0.1>
      .                   let shifted_pred =
      .                       tcx.shift_bound_var_indices(trait_bound_vars.len(), bound_pred.skip_binder());
      .                   // 2) Self: Bar1<'a, '^0.1> -> T: Bar1<'^0.0, '^0.1>
    178 ( 0.00%)          let new = shifted_pred.subst(tcx, trait_ref.skip_binder().substs);
      .                   // 3) ['x] + ['b] -> ['x, 'b]
      .                   let bound_vars =
      .                       tcx.mk_bound_variable_kinds(trait_bound_vars.iter().chain(pred_bound_vars));
  1,602 ( 0.00%)          tcx.reuse_or_mk_predicate(self, ty::Binder::bind_with_vars(new, bound_vars))
  1,246 ( 0.00%)      }
      .           }
      .           
    162 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
 11,420 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct TraitPredicate<'tcx> {
      .               pub trait_ref: TraitRef<'tcx>,
      .           
 25,692 ( 0.01%)      pub constness: BoundConstness,
      .           
 24,285 ( 0.01%)      pub polarity: ImplPolarity,
      .           }
      .           
      .           pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;
      .           
      .           impl<'tcx> TraitPredicate<'tcx> {
 20,712 ( 0.01%)      pub fn remap_constness(&mut self, tcx: TyCtxt<'tcx>, param_env: &mut ParamEnv<'tcx>) {
 18,145 ( 0.01%)          if unlikely!(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {
      .                       // remap without changing constness of this predicate.
      .                       // this is because `T: ~const Drop` has a different meaning to `T: Drop`
     22 ( 0.00%)              param_env.remap_constness_with(self.constness)
      .                   } else {
  2,578 ( 0.00%)              *param_env = param_env.with_constness(self.constness.and(param_env.constness()))
      .                   }
 15,534 ( 0.01%)      }
      .           
      .               /// Remap the constness of this predicate before emitting it for diagnostics.
      .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
      .                   // this is different to `remap_constness` that callees want to print this predicate
      .                   // in case of selection errors. `T: ~const Drop` bounds cannot end up here when the
      .                   // param_env is not const because we it is always satisfied in non-const contexts.
      .                   if let hir::Constness::NotConst = param_env.constness() {
      .                       self.constness = ty::BoundConstness::NotConst;
      .                   }
      .               }
      .           
      .               pub fn def_id(self) -> DefId {
  4,722 ( 0.00%)          self.trait_ref.def_id
  2,361 ( 0.00%)      }
      .           
  3,740 ( 0.00%)      pub fn self_ty(self) -> Ty<'tcx> {
 11,220 ( 0.00%)          self.trait_ref.self_ty()
  7,480 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> PolyTraitPredicate<'tcx> {
      .               pub fn def_id(self) -> DefId {
      .                   // Ok to skip binder since trait `DefId` does not care about regions.
      .                   self.skip_binder().def_id()
  2,749 ( 0.00%)      }
      .           
     36 ( 0.00%)      pub fn self_ty(self) -> ty::Binder<'tcx, Ty<'tcx>> {
    144 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.self_ty())
     72 ( 0.00%)      }
      .           
      .               /// Remap the constness of this predicate before emitting it for diagnostics.
      .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
      .                   *self = self.map_bound(|mut p| {
      .                       p.remap_constness_diag(param_env);
      .                       p
      .                   });
      .               }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
  3,816 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
  3,616 ( 0.00%)  pub struct OutlivesPredicate<A, B>(pub A, pub B); // `A: B`
      .           pub type RegionOutlivesPredicate<'tcx> = OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>;
      .           pub type TypeOutlivesPredicate<'tcx> = OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>;
      .           pub type PolyRegionOutlivesPredicate<'tcx> = ty::Binder<'tcx, RegionOutlivesPredicate<'tcx>>;
      .           pub type PolyTypeOutlivesPredicate<'tcx> = ty::Binder<'tcx, TypeOutlivesPredicate<'tcx>>;
      .           
      .           /// Encodes that `a` must be a subtype of `b`. The `a_is_expected` flag indicates
      .           /// whether the `a` type is the type that we should label as "expected" when
      .           /// presenting user diagnostics.
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
    386 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct SubtypePredicate<'tcx> {
    576 ( 0.00%)      pub a_is_expected: bool,
      .               pub a: Ty<'tcx>,
      .               pub b: Ty<'tcx>,
      .           }
      .           pub type PolySubtypePredicate<'tcx> = ty::Binder<'tcx, SubtypePredicate<'tcx>>;
      .           
      .           /// Encodes that we have to coerce *from* the `a` type to the `b` type.
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable, TypeFoldable)]
      .           pub struct CoercePredicate<'tcx> {
      .               pub a: Ty<'tcx>,
      .               pub b: Ty<'tcx>,
      .           }
      .           pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;
      .           
  1,849 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]
  2,172 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub enum Term<'tcx> {
     42 ( 0.00%)      Ty(Ty<'tcx>),
      .               Const(&'tcx Const<'tcx>),
      .           }
      .           
      .           impl<'tcx> From<Ty<'tcx>> for Term<'tcx> {
      .               fn from(ty: Ty<'tcx>) -> Self {
      .                   Term::Ty(ty)
    249 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> From<&'tcx Const<'tcx>> for Term<'tcx> {
      .               fn from(c: &'tcx Const<'tcx>) -> Self {
      .                   Term::Const(c)
      .               }
      .           }
      .           
      .           impl<'tcx> Term<'tcx> {
      .               pub fn ty(&self) -> Option<Ty<'tcx>> {
    376 ( 0.00%)          if let Term::Ty(ty) = self { Some(ty) } else { None }
    188 ( 0.00%)      }
      .           }
      .           
      .           /// This kind of predicate has no *direct* correspondent in the
      .           /// syntax, but it roughly corresponds to the syntactic forms:
      .           ///
      .           /// 1. `T: TraitRef<..., Item = Type>`
      .           /// 2. `<T as TraitRef<...>>::Item == Type` (NYI)
      .           ///
      .           /// In particular, form #1 is "desugared" to the combination of a
      .           /// normal trait predicate (`T: TraitRef<...>`) and one of these
      .           /// predicates. Form #2 is a broader form in that it also permits
      .           /// equality between arbitrary types. Processing an instance of
      .           /// Form #2 eventually yields one of these `ProjectionPredicate`
      .           /// instances to normalize the LHS.
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    527 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct ProjectionPredicate<'tcx> {
      .               pub projection_ty: ProjectionTy<'tcx>,
    561 ( 0.00%)      pub term: Term<'tcx>,
      .           }
      .           
      .           pub type PolyProjectionPredicate<'tcx> = Binder<'tcx, ProjectionPredicate<'tcx>>;
      .           
      .           impl<'tcx> PolyProjectionPredicate<'tcx> {
      .               /// Returns the `DefId` of the trait of the associated item being projected.
      .               #[inline]
      .               pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
     24 ( 0.00%)          self.skip_binder().projection_ty.trait_def_id(tcx)
      .               }
      .           
      .               /// Get the [PolyTraitRef] required for this projection to be well formed.
      .               /// Note that for generic associated types the predicates of the associated
      .               /// type also need to be checked.
      .               #[inline]
      .               pub fn required_poly_trait_ref(&self, tcx: TyCtxt<'tcx>) -> PolyTraitRef<'tcx> {
      .                   // Note: unlike with `TraitRef::to_poly_trait_ref()`,
      .                   // `self.0.trait_ref` is permitted to have escaping regions.
      .                   // This is because here `self` has a `Binder` and so does our
      .                   // return value, so we are preserving the number of binding
      .                   // levels.
     34 ( 0.00%)          self.map_bound(|predicate| predicate.projection_ty.trait_ref(tcx))
      .               }
      .           
      .               pub fn term(&self) -> Binder<'tcx, Term<'tcx>> {
      .                   self.map_bound(|predicate| predicate.term)
      .               }
      .           
      .               /// The `DefId` of the `TraitItem` for the associated type.
      .               ///
-- line 908 ----------------------------------------
-- line 914 ----------------------------------------
      .               }
      .           }
      .           
      .           pub trait ToPolyTraitRef<'tcx> {
      .               fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;
      .           }
      .           
      .           impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {
    378 ( 0.00%)      fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> {
    378 ( 0.00%)          self.map_bound_ref(|trait_pred| trait_pred.trait_ref)
    378 ( 0.00%)      }
      .           }
      .           
      .           pub trait ToPredicate<'tcx> {
      .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {
      .               #[inline(always)]
      .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
      .                   tcx.mk_predicate(self)
      .               }
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {
  1,169 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
  5,845 ( 0.00%)          self.map_bound(PredicateKind::Trait).to_predicate(tcx)
  2,338 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {
      4 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
      8 ( 0.00%)          self.map_bound(PredicateKind::RegionOutlives).to_predicate(tcx)
      8 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {
      2 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
      4 ( 0.00%)          self.map_bound(PredicateKind::TypeOutlives).to_predicate(tcx)
      4 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {
     69 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
    345 ( 0.00%)          self.map_bound(PredicateKind::Projection).to_predicate(tcx)
    138 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Predicate<'tcx> {
    396 ( 0.00%)      pub fn to_opt_poly_trait_pred(self) -> Option<PolyTraitPredicate<'tcx>> {
      .                   let predicate = self.kind();
  1,188 ( 0.00%)          match predicate.skip_binder() {
    945 ( 0.00%)              PredicateKind::Trait(t) => Some(predicate.rebind(t)),
      .                       PredicateKind::Projection(..)
      .                       | PredicateKind::Subtype(..)
      .                       | PredicateKind::Coerce(..)
      .                       | PredicateKind::RegionOutlives(..)
      .                       | PredicateKind::WellFormed(..)
      .                       | PredicateKind::ObjectSafe(..)
      .                       | PredicateKind::ClosureKind(..)
      .                       | PredicateKind::TypeOutlives(..)
      .                       | PredicateKind::ConstEvaluatable(..)
      .                       | PredicateKind::ConstEquate(..)
      9 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
      .                   }
    396 ( 0.00%)      }
      .           
      1 ( 0.00%)      pub fn to_opt_type_outlives(self) -> Option<PolyTypeOutlivesPredicate<'tcx>> {
      .                   let predicate = self.kind();
      2 ( 0.00%)          match predicate.skip_binder() {
      3 ( 0.00%)              PredicateKind::TypeOutlives(data) => Some(predicate.rebind(data)),
      .                       PredicateKind::Trait(..)
      .                       | PredicateKind::Projection(..)
      .                       | PredicateKind::Subtype(..)
      .                       | PredicateKind::Coerce(..)
      .                       | PredicateKind::RegionOutlives(..)
      .                       | PredicateKind::WellFormed(..)
      .                       | PredicateKind::ObjectSafe(..)
      .                       | PredicateKind::ClosureKind(..)
      .                       | PredicateKind::ConstEvaluatable(..)
      .                       | PredicateKind::ConstEquate(..)
      .                       | PredicateKind::TypeWellFormedFromEnv(..) => None,
      .                   }
      1 ( 0.00%)      }
      .           }
      .           
      .           /// Represents the bounds declared on a particular set of type
      .           /// parameters. Should eventually be generalized into a flag list of
      .           /// where-clauses. You can obtain an `InstantiatedPredicates` list from a
      .           /// `GenericPredicates` by using the `instantiate` method. Note that this method
      .           /// reflects an important semantic invariant of `InstantiatedPredicates`: while
      .           /// the `GenericPredicates` are expressed in terms of the bound type
-- line 1005 ----------------------------------------
-- line 1011 ----------------------------------------
      .           /// Example:
      .           ///
      .           ///     struct Foo<T, U: Bar<T>> { ... }
      .           ///
      .           /// Here, the `GenericPredicates` for `Foo` would contain a list of bounds like
      .           /// `[[], [U:Bar<T>]]`. Now if there were some particular reference
      .           /// like `Foo<isize,usize>`, then the `InstantiatedPredicates` would be `[[],
      .           /// [usize:Bar<isize>]]`.
  8,185 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
      .           pub struct InstantiatedPredicates<'tcx> {
      .               pub predicates: Vec<Predicate<'tcx>>,
      .               pub spans: Vec<Span>,
      .           }
      .           
      .           impl<'tcx> InstantiatedPredicates<'tcx> {
     34 ( 0.00%)      pub fn empty() -> InstantiatedPredicates<'tcx> {
  4,144 ( 0.00%)          InstantiatedPredicates { predicates: vec![], spans: vec![] }
     34 ( 0.00%)      }
      .           
      .               pub fn is_empty(&self) -> bool {
      .                   self.predicates.is_empty()
      .               }
      .           }
      .           
      .           #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, TyEncodable, TyDecodable, TypeFoldable)]
      .           pub struct OpaqueTypeKey<'tcx> {
-- line 1036 ----------------------------------------
-- line 1091 ----------------------------------------
      .               /// ```
      .               /// for<'a> fn(&'a u32)
      .               /// ```
      .               ///
      .               /// Once we "enter" into this `for<'a>` quantifier, we are in a
      .               /// new universe that extends `U` -- in this new universe, we can
      .               /// name the region `'a`, but that region was not nameable from
      .               /// `U` because it was not in scope there.
  1,185 ( 0.00%)      pub fn next_universe(self) -> UniverseIndex {
      .                   UniverseIndex::from_u32(self.private.checked_add(1).unwrap())
  3,555 ( 0.00%)      }
      .           
      .               /// Returns `true` if `self` can name a name from `other` -- in other words,
      .               /// if the set of names in `self` is a superset of those in
      .               /// `other` (`self >= other`).
      .               pub fn can_name(self, other: UniverseIndex) -> bool {
  6,080 ( 0.00%)          self.private >= other.private
  3,040 ( 0.00%)      }
      .           
      .               /// Returns `true` if `self` cannot name some names from `other` -- in other
      .               /// words, if the set of names in `self` is a strict subset of
      .               /// those in `other` (`self < other`).
      .               pub fn cannot_name(self, other: UniverseIndex) -> bool {
    128 ( 0.00%)          self.private < other.private
     64 ( 0.00%)      }
      .           }
      .           
      .           /// The "placeholder index" fully defines a placeholder region, type, or const. Placeholders are
      .           /// identified by both a universe, as well as a name residing within that universe. Distinct bound
      .           /// regions/types/consts within the same universe simply have an unknown relationship to one
      .           /// another.
      .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, PartialOrd, Ord)]
      .           pub struct Placeholder<T> {
  2,457 ( 0.00%)      pub universe: UniverseIndex,
  1,019 ( 0.00%)      pub name: T,
      .           }
      .           
      .           impl<'a, T> HashStable<StableHashingContext<'a>> for Placeholder<T>
      .           where
      .               T: HashStable<StableHashingContext<'a>>,
      .           {
      .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
      .                   self.universe.hash_stable(hcx, hasher);
-- line 1133 ----------------------------------------
-- line 1194 ----------------------------------------
      .           /// aren't allowed to call that query: it is equal to `type_of(const_param)` which is
      .           /// trivial to compute.
      .           ///
      .           /// If we now want to use that constant in a place which potentionally needs its type
      .           /// we also pass the type of its `const_param`. This is the point of `WithOptConstParam`,
      .           /// except that instead of a `Ty` we bundle the `DefId` of the const parameter.
      .           /// Meaning that we need to use `type_of(const_param_did)` if `const_param_did` is `Some`
      .           /// to get the type of `did`.
    128 ( 0.00%)  #[derive(Copy, Clone, Debug, TypeFoldable, Lift, TyEncodable, TyDecodable)]
      .           #[derive(PartialEq, Eq, PartialOrd, Ord)]
      .           #[derive(Hash, HashStable)]
      .           pub struct WithOptConstParam<T> {
    141 ( 0.00%)      pub did: T,
      .               /// The `DefId` of the corresponding generic parameter in case `did` is
      .               /// a const argument.
      .               ///
      .               /// Note that even if `did` is a const argument, this may still be `None`.
      .               /// All queries taking `WithOptConstParam` start by calling `tcx.opt_const_param_of(def.did)`
      .               /// to potentially update `param_did` in the case it is `None`.
    200 ( 0.00%)      pub const_param_did: Option<DefId>,
      .           }
      .           
      .           impl<T> WithOptConstParam<T> {
      .               /// Creates a new `WithOptConstParam` setting `const_param_did` to `None`.
      .               #[inline(always)]
      .               pub fn unknown(did: T) -> WithOptConstParam<T> {
      .                   WithOptConstParam { did, const_param_did: None }
    378 ( 0.00%)      }
      .           }
      .           
      .           impl WithOptConstParam<LocalDefId> {
      .               /// Returns `Some((did, param_did))` if `def_id` is a const argument,
      .               /// `None` otherwise.
      .               #[inline(always)]
      .               pub fn try_lookup(did: LocalDefId, tcx: TyCtxt<'_>) -> Option<(LocalDefId, DefId)> {
      .                   tcx.opt_const_param_of(did).map(|param_did| (did, param_did))
      .               }
      .           
      .               /// In case `self` is unknown but `self.did` is a const argument, this returns
      .               /// a `WithOptConstParam` with the correct `const_param_did`.
      .               #[inline(always)]
      .               pub fn try_upgrade(self, tcx: TyCtxt<'_>) -> Option<WithOptConstParam<LocalDefId>> {
     49 ( 0.00%)          if self.const_param_did.is_none() {
     81 ( 0.00%)              if let const_param_did @ Some(_) = tcx.opt_const_param_of(self.did) {
      .                           return Some(WithOptConstParam { did: self.did, const_param_did });
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           
      .               pub fn to_global(self) -> WithOptConstParam<DefId> {
      .                   WithOptConstParam { did: self.did.to_def_id(), const_param_did: self.const_param_did }
      .               }
      .           
      4 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
      3 ( 0.00%)          if let Some(did) = self.const_param_did { did } else { self.did.to_def_id() }
      1 ( 0.00%)      }
      .           }
      .           
      .           impl WithOptConstParam<DefId> {
     39 ( 0.00%)      pub fn as_local(self) -> Option<WithOptConstParam<LocalDefId>> {
      .                   self.did
      .                       .as_local()
      .                       .map(|did| WithOptConstParam { did, const_param_did: self.const_param_did })
     39 ( 0.00%)      }
      .           
      .               pub fn as_const_arg(self) -> Option<(LocalDefId, DefId)> {
     82 ( 0.00%)          if let Some(param_did) = self.const_param_did {
     32 ( 0.00%)              if let Some(did) = self.did.as_local() {
      .                           return Some((did, param_did));
      .                       }
      .                   }
      .           
      .                   None
     54 ( 0.00%)      }
      .           
      .               pub fn is_local(self) -> bool {
      .                   self.did.is_local()
      .               }
      .           
     20 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
      .                   self.const_param_did.unwrap_or(self.did)
     20 ( 0.00%)      }
      .           }
      .           
      .           /// When type checking, we use the `ParamEnv` to track
      .           /// details about the set of where-clauses that are in scope at this
      .           /// particular point.
      .           #[derive(Copy, Clone, Hash, PartialEq, Eq)]
      .           pub struct ParamEnv<'tcx> {
      .               /// This packs both caller bounds and the reveal enum into one pointer.
-- line 1285 ----------------------------------------
-- line 1302 ----------------------------------------
      .               reveal: traits::Reveal,
      .               constness: hir::Constness,
      .           }
      .           
      .           unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {
      .               const BITS: usize = 2;
      .               #[inline]
      .               fn into_usize(self) -> usize {
  5,669 ( 0.00%)          match self {
      .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } => 0,
      .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst } => 1,
      .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const } => 2,
      .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::Const } => 3,
      .                   }
      .               }
      .               #[inline]
      .               unsafe fn from_usize(ptr: usize) -> Self {
 42,787 ( 0.02%)          match ptr {
      .                       0 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },
      .                       1 => Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst },
      .                       2 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const },
      .                       3 => Self { reveal: traits::Reveal::All, constness: hir::Constness::Const },
      .                       _ => std::hint::unreachable_unchecked(),
      .                   }
      .               }
      .           }
-- line 1327 ----------------------------------------
-- line 1405 ----------------------------------------
      .               pub fn new(
      .                   caller_bounds: &'tcx List<Predicate<'tcx>>,
      .                   reveal: Reveal,
      .                   constness: hir::Constness,
      .               ) -> Self {
      .                   ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, ParamTag { reveal, constness }) }
      .               }
      .           
      2 ( 0.00%)      pub fn with_user_facing(mut self) -> Self {
      .                   self.packed.set_tag(ParamTag { reveal: Reveal::UserFacing, ..self.packed.tag() });
      .                   self
      2 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn with_constness(mut self, constness: hir::Constness) -> Self {
      .                   self.packed.set_tag(ParamTag { constness, ..self.packed.tag() });
      .                   self
      .               }
      .           
      .               #[inline]
-- line 1424 ----------------------------------------
-- line 1430 ----------------------------------------
      .               #[inline]
      .               pub fn without_const(mut self) -> Self {
      .                   self.packed.set_tag(ParamTag { constness: hir::Constness::NotConst, ..self.packed.tag() });
      .                   self
      .               }
      .           
      .               #[inline]
      .               pub fn remap_constness_with(&mut self, mut constness: ty::BoundConstness) {
  1,059 ( 0.00%)          *self = self.with_constness(constness.and(self.constness()))
      .               }
      .           
      .               /// Returns a new parameter environment with the same clauses, but
      .               /// which "reveals" the true results of projections in all cases
      .               /// (even for associated types that are specializable). This is
      .               /// the desired behavior during codegen and certain other special
      .               /// contexts; normally though we want to use `Reveal::UserFacing`,
      .               /// which is the default.
      .               /// All opaque types in the caller_bounds of the `ParamEnv`
      .               /// will be normalized to their underlying types.
      .               /// See PR #65989 and issue #65918 for more details
    624 ( 0.00%)      pub fn with_reveal_all_normalized(self, tcx: TyCtxt<'tcx>) -> Self {
      .                   if self.packed.tag().reveal == traits::Reveal::All {
      .                       return self;
      .                   }
      .           
      .                   ParamEnv::new(
      .                       tcx.normalize_opaque_types(self.caller_bounds()),
      .                       Reveal::All,
      .                       self.constness(),
      .                   )
    702 ( 0.00%)      }
      .           
      .               /// Returns this same environment but with no caller bounds.
      .               #[inline]
      .               pub fn without_caller_bounds(self) -> Self {
      .                   Self::new(List::empty(), self.reveal(), self.constness())
      .               }
      .           
      .               /// Creates a suitable environment in which to perform trait
-- line 1468 ----------------------------------------
-- line 1472 ----------------------------------------
      .               /// pair it with the empty environment. This improves caching and is generally
      .               /// invisible.
      .               ///
      .               /// N.B., we preserve the environment when type-checking because it
      .               /// is possible for the user to have wacky where-clauses like
      .               /// `where Box<u32>: Copy`, which are clearly never
      .               /// satisfiable. We generally want to behave as if they were true,
      .               /// although the surrounding function is never reachable.
  5,373 ( 0.00%)      pub fn and<T: TypeFoldable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {
      .                   match self.reveal() {
      .                       Reveal::UserFacing => ParamEnvAnd { param_env: self, value },
      .           
      .                       Reveal::All => {
    102 ( 0.00%)                  if value.is_global() {
      .                               ParamEnvAnd { param_env: self.without_caller_bounds(), value }
      .                           } else {
      .                               ParamEnvAnd { param_env: self, value }
      .                           }
      .                       }
      .                   }
  5,283 ( 0.00%)      }
      .           }
      .           
      .           // FIXME(ecstaticmorse): Audit all occurrences of `without_const().to_predicate(tcx)` to ensure that
      .           // the constness of trait bounds is being propagated correctly.
      .           impl<'tcx> PolyTraitRef<'tcx> {
      .               #[inline]
      .               pub fn with_constness(self, constness: BoundConstness) -> PolyTraitPredicate<'tcx> {
    144 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
      .                       trait_ref,
      .                       constness,
      .                       polarity: ty::ImplPolarity::Positive,
      .                   })
      .               }
      .               #[inline]
      .               pub fn without_const(self) -> PolyTraitPredicate<'tcx> {
      .                   self.with_constness(BoundConstness::NotConst)
      .               }
      .           }
      .           
    177 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]
      .           pub struct ParamEnvAnd<'tcx, T> {
  1,678 ( 0.00%)      pub param_env: ParamEnv<'tcx>,
 33,617 ( 0.01%)      pub value: T,
      .           }
      .           
      .           impl<'tcx, T> ParamEnvAnd<'tcx, T> {
      .               pub fn into_parts(self) -> (ParamEnv<'tcx>, T) {
      .                   (self.param_env, self.value)
      .               }
      .           
      .               #[inline]
      .               pub fn without_const(mut self) -> Self {
      .                   self.param_env = self.param_env.without_const();
    142 ( 0.00%)          self
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T> HashStable<StableHashingContext<'a>> for ParamEnvAnd<'tcx, T>
      .           where
      .               T: HashStable<StableHashingContext<'a>>,
      .           {
      .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
-- line 1534 ----------------------------------------
-- line 1542 ----------------------------------------
      .           #[derive(Copy, Clone, Debug, HashStable)]
      .           pub struct Destructor {
      .               /// The `DefId` of the destructor method
      .               pub did: DefId,
      .               /// The constness of the destructor method
      .               pub constness: hir::Constness,
      .           }
      .           
    286 ( 0.00%)  bitflags! {
    450 ( 0.00%)      #[derive(HashStable, TyEncodable, TyDecodable)]
      .               pub struct VariantFlags: u32 {
      .                   const NO_VARIANT_FLAGS        = 0;
      .                   /// Indicates whether the field list of this variant is `#[non_exhaustive]`.
      .                   const IS_FIELD_LIST_NON_EXHAUSTIVE = 1 << 0;
      .                   /// Indicates whether this variant was obtained as part of recovering from
      .                   /// a syntactic error. May be incomplete or bogus.
      .                   const IS_RECOVERED = 1 << 1;
      .               }
      .           }
      .           
      .           /// Definition of a variant -- a struct's fields or an enum variant.
 98,268 ( 0.04%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
      .           pub struct VariantDef {
      .               /// `DefId` that identifies the variant itself.
      .               /// If this variant belongs to a struct or union, then this is a copy of its `DefId`.
      .               pub def_id: DefId,
      .               /// `DefId` that identifies the variant's constructor.
      .               /// If this variant is a struct variant, then this is `None`.
      .               pub ctor_def_id: Option<DefId>,
      .               /// Variant or struct name.
-- line 1571 ----------------------------------------
-- line 1592 ----------------------------------------
      .               /// `parent_did` is the `DefId` of the `AdtDef` representing the enum or struct that
      .               /// owns this variant. It is used for checking if a struct has `#[non_exhaustive]` w/out having
      .               /// to go through the redirect of checking the ctor's attributes - but compiling a small crate
      .               /// requires loading the `AdtDef`s for all the structs in the universe (e.g., coherence for any
      .               /// built-in trait), and we do not want to load attributes twice.
      .               ///
      .               /// If someone speeds up attribute loading to not be a performance concern, they can
      .               /// remove this hack and use the constructor `DefId` everywhere.
  1,136 ( 0.00%)      pub fn new(
      .                   name: Symbol,
      .                   variant_did: Option<DefId>,
      .                   ctor_def_id: Option<DefId>,
      .                   discr: VariantDiscr,
      .                   fields: Vec<FieldDef>,
      .                   ctor_kind: CtorKind,
      .                   adt_kind: AdtKind,
      .                   parent_did: DefId,
-- line 1608 ----------------------------------------
-- line 1611 ----------------------------------------
      .               ) -> Self {
      .                   debug!(
      .                       "VariantDef::new(name = {:?}, variant_did = {:?}, ctor_def_id = {:?}, discr = {:?},
      .                        fields = {:?}, ctor_kind = {:?}, adt_kind = {:?}, parent_did = {:?})",
      .                       name, variant_did, ctor_def_id, discr, fields, ctor_kind, adt_kind, parent_did,
      .                   );
      .           
      .                   let mut flags = VariantFlags::NO_VARIANT_FLAGS;
    142 ( 0.00%)          if is_field_list_non_exhaustive {
      .                       flags |= VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE;
      .                   }
      .           
    426 ( 0.00%)          if recovered {
      .                       flags |= VariantFlags::IS_RECOVERED;
      .                   }
      .           
  1,278 ( 0.00%)          VariantDef {
      .                       def_id: variant_did.unwrap_or(parent_did),
      .                       ctor_def_id,
      .                       name,
      .                       discr,
    568 ( 0.00%)              fields,
      .                       ctor_kind,
      .                       flags,
      .                   }
    568 ( 0.00%)      }
      .           
      .               /// Is this field list non-exhaustive?
      .               #[inline]
      .               pub fn is_field_list_non_exhaustive(&self) -> bool {
      .                   self.flags.intersects(VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE)
      .               }
      .           
      .               /// Was this variant obtained as part of recovering from a syntactic error?
      .               #[inline]
      .               pub fn is_recovered(&self) -> bool {
      .                   self.flags.intersects(VariantFlags::IS_RECOVERED)
      .               }
      .           
      .               /// Computes the `Ident` of this variant by looking up the `Span`
    392 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
    224 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.def_id).unwrap())
    504 ( 0.00%)      }
      .           }
      .           
 57,855 ( 0.02%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]
      .           pub enum VariantDiscr {
      .               /// Explicit value for this variant, i.e., `X = 123`.
      .               /// The `DefId` corresponds to the embedded constant.
      .               Explicit(DefId),
      .           
      .               /// The previous variant's discriminant plus one.
      .               /// For efficiency reasons, the distance from the
      .               /// last `Explicit` discriminant is being stored,
      .               /// or `0` for the first variant, if it has none.
      .               Relative(u32),
      .           }
      .           
147,805 ( 0.06%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
      .           pub struct FieldDef {
      .               pub did: DefId,
      .               pub name: Symbol,
      .               pub vis: Visibility,
      .           }
      .           
     43 ( 0.00%)  bitflags! {
      .               #[derive(TyEncodable, TyDecodable, Default, HashStable)]
      .               pub struct ReprFlags: u8 {
      .                   const IS_C               = 1 << 0;
      .                   const IS_SIMD            = 1 << 1;
      .                   const IS_TRANSPARENT     = 1 << 2;
      .                   // Internal only for now. If true, don't reorder fields.
      .                   const IS_LINEAR          = 1 << 3;
      .                   // If true, don't expose any niche to type's context.
-- line 1684 ----------------------------------------
-- line 1689 ----------------------------------------
      .                   // Any of these flags being set prevent field reordering optimisation.
      .                   const IS_UNOPTIMISABLE   = ReprFlags::IS_C.bits
      .                                            | ReprFlags::IS_SIMD.bits
      .                                            | ReprFlags::IS_LINEAR.bits;
      .               }
      .           }
      .           
      .           /// Represents the repr options provided by the user,
 78,600 ( 0.03%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, TyEncodable, TyDecodable, Default, HashStable)]
      .           pub struct ReprOptions {
      .               pub int: Option<attr::IntType>,
      .               pub align: Option<Align>,
      .               pub pack: Option<Align>,
      .               pub flags: ReprFlags,
      .               /// The seed to be used for randomizing a type's layout
      .               ///
      .               /// Note: This could technically be a `[u8; 16]` (a `u128`) which would
-- line 1705 ----------------------------------------
-- line 1706 ----------------------------------------
      .               /// be the "most accurate" hash as it'd encompass the item and crate
      .               /// hash without loss, but it does pay the price of being larger.
      .               /// Everything's a tradeoff, a `u64` seed should be sufficient for our
      .               /// purposes (primarily `-Z randomize-layout`)
      .               pub field_shuffle_seed: u64,
      .           }
      .           
      .           impl ReprOptions {
     26 ( 0.00%)      pub fn new(tcx: TyCtxt<'_>, did: DefId) -> ReprOptions {
      .                   let mut flags = ReprFlags::empty();
      .                   let mut size = None;
      .                   let mut max_align: Option<Align> = None;
      .                   let mut min_pack: Option<Align> = None;
      .           
      .                   // Generate a deterministically-derived seed from the item's path hash
      .                   // to allow for cross-crate compilation to actually work
      .                   let mut field_shuffle_seed = tcx.def_path_hash(did).0.to_smaller_hash();
      .           
      .                   // If the user defined a custom seed for layout randomization, xor the item's
      .                   // path hash with the user defined seed, this will allowing determinism while
      .                   // still allowing users to further randomize layout generation for e.g. fuzzing
      6 ( 0.00%)          if let Some(user_seed) = tcx.sess.opts.debugging_opts.layout_seed {
      .                       field_shuffle_seed ^= user_seed;
      .                   }
      .           
      8 ( 0.00%)          for attr in tcx.get_attrs(did).iter() {
      .                       for r in attr::find_repr_attrs(&tcx.sess, attr) {
      .                           flags.insert(match r {
      .                               attr::ReprC => ReprFlags::IS_C,
      .                               attr::ReprPacked(pack) => {
      .                                   let pack = Align::from_bytes(pack as u64).unwrap();
      .                                   min_pack = Some(if let Some(min_pack) = min_pack {
      .                                       min_pack.min(pack)
      .                                   } else {
-- line 1739 ----------------------------------------
-- line 1753 ----------------------------------------
      .                                   ReprFlags::empty()
      .                               }
      .                           });
      .                       }
      .                   }
      .           
      .                   // If `-Z randomize-layout` was enabled for the type definition then we can
      .                   // consider performing layout randomization
     16 ( 0.00%)          if tcx.sess.opts.debugging_opts.randomize_layout {
      .                       flags.insert(ReprFlags::RANDOMIZE_LAYOUT);
      .                   }
      .           
      .                   // This is here instead of layout because the choice must make it into metadata.
     12 ( 0.00%)          if !tcx.consider_optimizing(|| format!("Reorder fields of {:?}", tcx.def_path_str(did))) {
      .                       flags.insert(ReprFlags::IS_LINEAR);
      .                   }
      .           
      4 ( 0.00%)          Self { int: size, align: max_align, pack: min_pack, flags, field_shuffle_seed }
     56 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn simd(&self) -> bool {
      .                   self.flags.contains(ReprFlags::IS_SIMD)
      .               }
      .           
      .               #[inline]
      .               pub fn c(&self) -> bool {
-- line 1779 ----------------------------------------
-- line 1798 ----------------------------------------
      .               #[inline]
      .               pub fn hide_niche(&self) -> bool {
      .                   self.flags.contains(ReprFlags::HIDE_NICHE)
      .               }
      .           
      .               /// Returns the discriminant type, given these `repr` options.
      .               /// This must only be called on enums!
      .               pub fn discr_type(&self) -> attr::IntType {
    140 ( 0.00%)          self.int.unwrap_or(attr::SignedInt(ast::IntTy::Isize))
     84 ( 0.00%)      }
      .           
      .               /// Returns `true` if this `#[repr()]` should inhabit "smart enum
      .               /// layout" optimizations, such as representing `Foo<&T>` as a
      .               /// single pointer.
      .               pub fn inhibit_enum_layout_opt(&self) -> bool {
      .                   self.c() || self.int.is_some()
      .               }
      .           
      .               /// Returns `true` if this `#[repr()]` should inhibit struct field reordering
      .               /// optimizations, such as with `repr(C)`, `repr(packed(1))`, or `repr(<int>)`.
      .               pub fn inhibit_struct_field_reordering_opt(&self) -> bool {
     20 ( 0.00%)          if let Some(pack) = self.pack {
      .                       if pack.bytes() == 1 {
      .                           return true;
      .                       }
      .                   }
      .           
     44 ( 0.00%)          self.flags.intersects(ReprFlags::IS_UNOPTIMISABLE) || self.int.is_some()
      .               }
      .           
      .               /// Returns `true` if this type is valid for reordering and `-Z randomize-layout`
      .               /// was enabled for its declaration crate
      .               pub fn can_randomize_type_layout(&self) -> bool {
      9 ( 0.00%)          !self.inhibit_struct_field_reordering_opt()
      .                       && self.flags.contains(ReprFlags::RANDOMIZE_LAYOUT)
      .               }
      .           
      .               /// Returns `true` if this `#[repr()]` should inhibit union ABI optimisations.
      .               pub fn inhibit_union_abi_opt(&self) -> bool {
      .                   self.c()
      .               }
      .           }
      .           
      .           impl<'tcx> FieldDef {
      .               /// Returns the type of this field. The resulting type is not normalized. The `subst` is
      .               /// typically obtained via the second field of [`TyKind::Adt`].
  4,074 ( 0.00%)      pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {
  1,164 ( 0.00%)          tcx.type_of(self.did).subst(tcx, subst)
  4,656 ( 0.00%)      }
      .           
      .               /// Computes the `Ident` of this variant by looking up the `Span`
  1,225 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
    700 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.did).unwrap())
  1,575 ( 0.00%)      }
      .           }
      .           
      .           pub type Attributes<'tcx> = &'tcx [ast::Attribute];
      .           
      .           #[derive(Debug, PartialEq, Eq)]
      .           pub enum ImplOverlapKind {
      .               /// These impls are always allowed to overlap.
      .               Permitted {
-- line 1859 ----------------------------------------
-- line 1891 ----------------------------------------
      .               /// marker traits.
      .               /// 4. Neither of the impls can have any where-clauses.
      .               ///
      .               /// Once `traitobject` 0.1.0 is no longer an active concern, this hack can be removed.
      .               Issue33140,
      .           }
      .           
      .           impl<'tcx> TyCtxt<'tcx> {
    816 ( 0.00%)      pub fn typeck_body(self, body: hir::BodyId) -> &'tcx TypeckResults<'tcx> {
    204 ( 0.00%)          self.typeck(self.hir().body_owner_def_id(body))
    816 ( 0.00%)      }
      .           
      .               pub fn provided_trait_methods(self, id: DefId) -> impl 'tcx + Iterator<Item = &'tcx AssocItem> {
      .                   self.associated_items(id)
      .                       .in_definition_order()
      .                       .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())
      .               }
      .           
      .               fn item_name_from_hir(self, def_id: DefId) -> Option<Ident> {
-- line 1909 ----------------------------------------
-- line 1947 ----------------------------------------
      .               ///
      .               /// See [`item_name`][Self::item_name] for more information.
      .               pub fn opt_item_name(self, def_id: DefId) -> Option<Ident> {
      .                   // Look at the HIR first so the span will be correct if this is a local item.
      .                   self.item_name_from_hir(def_id)
      .                       .or_else(|| self.item_name_from_def_id(def_id).map(Ident::with_dummy_span))
      .               }
      .           
 27,780 ( 0.01%)      pub fn opt_associated_item(self, def_id: DefId) -> Option<&'tcx AssocItem> {
 11,112 ( 0.00%)          if let DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy = self.def_kind(def_id) {
      .                       Some(self.associated_item(def_id))
      .                   } else {
      .                       None
      .                   }
 25,002 ( 0.01%)      }
      .           
    228 ( 0.00%)      pub fn field_index(self, hir_id: hir::HirId, typeck_results: &TypeckResults<'_>) -> usize {
      .                   typeck_results.field_indices().get(hir_id).cloned().expect("no index for a field")
    456 ( 0.00%)      }
      .           
      .               pub fn find_field_index(self, ident: Ident, variant: &VariantDef) -> Option<usize> {
      .                   variant
      .                       .fields
      .                       .iter()
      .                       .position(|field| self.hygienic_eq(ident, field.ident(self), variant.def_id))
      .               }
      .           
      .               /// Returns `true` if the impls are the same polarity and the trait either
      .               /// has no items or is annotated `#[marker]` and prevents item overrides.
    220 ( 0.00%)      pub fn impls_are_allowed_to_overlap(
      .                   self,
      .                   def_id1: DefId,
      .                   def_id2: DefId,
      .               ) -> Option<ImplOverlapKind> {
      .                   // If either trait impl references an error, they're allowed to overlap,
      .                   // as one of them essentially doesn't exist.
      .                   if self.impl_trait_ref(def_id1).map_or(false, |tr| tr.references_error())
     44 ( 0.00%)              || self.impl_trait_ref(def_id2).map_or(false, |tr| tr.references_error())
      .                   {
      .                       return Some(ImplOverlapKind::Permitted { marker: false });
      .                   }
      .           
    220 ( 0.00%)          match (self.impl_polarity(def_id1), self.impl_polarity(def_id2)) {
      .                       (ImplPolarity::Reservation, _) | (_, ImplPolarity::Reservation) => {
      .                           // `#[rustc_reservation_impl]` impls don't overlap with anything
      .                           debug!(
      .                               "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (reservations)",
      .                               def_id1, def_id2
      .                           );
      .                           return Some(ImplOverlapKind::Permitted { marker: false });
      .                       }
-- line 1997 ----------------------------------------
-- line 2004 ----------------------------------------
      .                           );
      .                           return None;
      .                       }
      .                       (ImplPolarity::Positive, ImplPolarity::Positive)
      .                       | (ImplPolarity::Negative, ImplPolarity::Negative) => {}
      .                   };
      .           
      .                   let is_marker_overlap = {
    220 ( 0.00%)              let is_marker_impl = |def_id: DefId| -> bool {
     66 ( 0.00%)                  let trait_ref = self.impl_trait_ref(def_id);
     66 ( 0.00%)                  trait_ref.map_or(false, |tr| self.trait_def(tr.def_id).is_marker)
    176 ( 0.00%)              };
     88 ( 0.00%)              is_marker_impl(def_id1) && is_marker_impl(def_id2)
      .                   };
      .           
      .                   if is_marker_overlap {
      .                       debug!(
      .                           "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (marker overlap)",
      .                           def_id1, def_id2
      .                       );
      .                       Some(ImplOverlapKind::Permitted { marker: true })
      .                   } else {
     88 ( 0.00%)              if let Some(self_ty1) = self.issue33140_self_ty(def_id1) {
      .                           if let Some(self_ty2) = self.issue33140_self_ty(def_id2) {
      .                               if self_ty1 == self_ty2 {
      .                                   debug!(
      .                                       "impls_are_allowed_to_overlap({:?}, {:?}) - issue #33140 HACK",
      .                                       def_id1, def_id2
      .                                   );
      .                                   return Some(ImplOverlapKind::Issue33140);
      .                               } else {
-- line 2034 ----------------------------------------
-- line 2038 ----------------------------------------
      .                                   );
      .                               }
      .                           }
      .                       }
      .           
      .                       debug!("impls_are_allowed_to_overlap({:?}, {:?}) = None", def_id1, def_id2);
      .                       None
      .                   }
    176 ( 0.00%)      }
      .           
      .               /// Returns `ty::VariantDef` if `res` refers to a struct,
      .               /// or variant or their constructors, panics otherwise.
     56 ( 0.00%)      pub fn expect_variant_res(self, res: Res) -> &'tcx VariantDef {
     96 ( 0.00%)          match res {
      .                       Res::Def(DefKind::Variant, did) => {
      .                           let enum_did = self.parent(did).unwrap();
      .                           self.adt_def(enum_did).variant_with_id(did)
      .                       }
      .                       Res::Def(DefKind::Struct | DefKind::Union, did) => self.adt_def(did).non_enum_variant(),
      .                       Res::Def(DefKind::Ctor(CtorOf::Variant, ..), variant_ctor_did) => {
      .                           let variant_did = self.parent(variant_ctor_did).unwrap();
      .                           let enum_did = self.parent(variant_did).unwrap();
-- line 2059 ----------------------------------------
-- line 2060 ----------------------------------------
      .                           self.adt_def(enum_did).variant_with_ctor_id(variant_ctor_did)
      .                       }
      .                       Res::Def(DefKind::Ctor(CtorOf::Struct, ..), ctor_did) => {
      .                           let struct_did = self.parent(ctor_did).expect("struct ctor has no parent");
      .                           self.adt_def(struct_did).non_enum_variant()
      .                       }
      .                       _ => bug!("expect_variant_res used with unexpected res {:?}", res),
      .                   }
     64 ( 0.00%)      }
      .           
      .               /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.
      .               pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {
      .                   match instance {
      .                       ty::InstanceDef::Item(def) => match self.def_kind(def.did) {
      .                           DefKind::Const
      .                           | DefKind::Static
      .                           | DefKind::AssocConst
-- line 2076 ----------------------------------------
-- line 2091 ----------------------------------------
      .                       | ty::InstanceDef::Virtual(..)
      .                       | ty::InstanceDef::ClosureOnceShim { .. }
      .                       | ty::InstanceDef::DropGlue(..)
      .                       | ty::InstanceDef::CloneShim(..) => self.mir_shims(instance),
      .                   }
      .               }
      .           
      .               /// Gets the attributes of a definition.
  6,950 ( 0.00%)      pub fn get_attrs(self, did: DefId) -> Attributes<'tcx> {
  2,085 ( 0.00%)          if let Some(did) = did.as_local() {
  1,182 ( 0.00%)              self.hir().attrs(self.hir().local_def_id_to_hir_id(did))
      .                   } else {
      .                       self.item_attrs(did)
      .                   }
  5,560 ( 0.00%)      }
      .           
      .               /// Determines whether an item is annotated with an attribute.
    864 ( 0.00%)      pub fn has_attr(self, did: DefId, attr: Symbol) -> bool {
  2,385 ( 0.00%)          self.sess.contains_name(&self.get_attrs(did), attr)
      .               }
      .           
      .               /// Determines whether an item is annotated with `doc(hidden)`.
     21 ( 0.00%)      pub fn is_doc_hidden(self, did: DefId) -> bool {
      3 ( 0.00%)          self.get_attrs(did)
      .                       .iter()
      2 ( 0.00%)              .filter_map(|attr| if attr.has_name(sym::doc) { attr.meta_item_list() } else { None })
      .                       .any(|items| items.iter().any(|item| item.has_name(sym::hidden)))
     24 ( 0.00%)      }
      .           
      .               /// Returns `true` if this is an `auto trait`.
  1,715 ( 0.00%)      pub fn trait_is_auto(self, trait_def_id: DefId) -> bool {
    245 ( 0.00%)          self.trait_def(trait_def_id).has_auto_impl
  1,960 ( 0.00%)      }
      .           
      .               /// Returns layout of a generator. Layout might be unavailable if the
      .               /// generator is tainted by errors.
      .               pub fn generator_layout(self, def_id: DefId) -> Option<&'tcx GeneratorLayout<'tcx>> {
      .                   self.optimized_mir(def_id).generator_layout()
      .               }
      .           
      .               /// Given the `DefId` of an impl, returns the `DefId` of the trait it implements.
      .               /// If it implements no trait, returns `None`.
    399 ( 0.00%)      pub fn trait_id_of_impl(self, def_id: DefId) -> Option<DefId> {
      .                   self.impl_trait_ref(def_id).map(|tr| tr.def_id)
    513 ( 0.00%)      }
      .           
      .               /// If the given defid describes a method belonging to an impl, returns the
      .               /// `DefId` of the impl that the method belongs to; otherwise, returns `None`.
      7 ( 0.00%)      pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {
     28 ( 0.00%)          self.opt_associated_item(def_id).and_then(|trait_item| match trait_item.container {
      .                       TraitContainer(_) => None,
      .                       ImplContainer(def_id) => Some(def_id),
      .                   })
     14 ( 0.00%)      }
      .           
      .               /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`
      .               /// with the name of the crate containing the impl.
      .               pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> {
      .                   if let Some(impl_did) = impl_did.as_local() {
      .                       Ok(self.def_span(impl_did))
      .                   } else {
      .                       Err(self.crate_name(impl_did.krate))
      .                   }
      .               }
      .           
      .               /// Hygienically compares a use-site name (`use_name`) for a field or an associated item with
      .               /// its supposed definition name (`def_name`). The method also needs `DefId` of the supposed
      .               /// definition's parent/scope to perform comparison.
  1,352 ( 0.00%)      pub fn hygienic_eq(self, use_name: Ident, def_name: Ident, def_parent_def_id: DefId) -> bool {
      .                   // We could use `Ident::eq` here, but we deliberately don't. The name
      .                   // comparison fails frequently, and we want to avoid the expensive
      .                   // `normalize_to_macros_2_0()` calls required for the span comparison whenever possible.
    169 ( 0.00%)          use_name.name == def_name.name
    507 ( 0.00%)              && use_name
      .                           .span
      .                           .ctxt()
      .                           .hygienic_eq(def_name.span.ctxt(), self.expn_that_defined(def_parent_def_id))
  1,352 ( 0.00%)      }
      .           
    468 ( 0.00%)      pub fn adjust_ident(self, mut ident: Ident, scope: DefId) -> Ident {
    104 ( 0.00%)          ident.span.normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope));
    104 ( 0.00%)          ident
    416 ( 0.00%)      }
      .           
  1,323 ( 0.00%)      pub fn adjust_ident_and_get_scope(
      .                   self,
      .                   mut ident: Ident,
      .                   scope: DefId,
      .                   block: hir::HirId,
      .               ) -> (Ident, DefId) {
    147 ( 0.00%)          let scope = ident
      .                       .span
      .                       .normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope))
      .                       .and_then(|actual_expansion| actual_expansion.expn_data().parent_module)
    588 ( 0.00%)              .unwrap_or_else(|| self.parent_module(block).to_def_id());
    882 ( 0.00%)          (ident, scope)
  1,323 ( 0.00%)      }
      .           
     49 ( 0.00%)      pub fn is_object_safe(self, key: DefId) -> bool {
      .                   self.object_safety_violations(key).is_empty()
     56 ( 0.00%)      }
      .           }
      .           
      .           /// Yields the parent function's `LocalDefId` if `def_id` is an `impl Trait` definition.
    504 ( 0.00%)  pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<LocalDefId> {
    504 ( 0.00%)      let def_id = def_id.as_local()?;
    188 ( 0.00%)      if let Node::Item(item) = tcx.hir().get_by_def_id(def_id) {
     68 ( 0.00%)          if let hir::ItemKind::OpaqueTy(ref opaque_ty) = item.kind {
      .                       return match opaque_ty.origin {
      .                           hir::OpaqueTyOrigin::FnReturn(parent) | hir::OpaqueTyOrigin::AsyncFn(parent) => {
      .                               Some(parent)
      .                           }
      .                           hir::OpaqueTyOrigin::TyAlias => None,
      .                       };
      .                   }
      .               }
      .               None
    672 ( 0.00%)  }
      .           
      .           pub fn int_ty(ity: ast::IntTy) -> IntTy {
      .               match ity {
      .                   ast::IntTy::Isize => IntTy::Isize,
      .                   ast::IntTy::I8 => IntTy::I8,
      .                   ast::IntTy::I16 => IntTy::I16,
      .                   ast::IntTy::I32 => IntTy::I32,
      .                   ast::IntTy::I64 => IntTy::I64,
-- line 2216 ----------------------------------------
-- line 2231 ----------------------------------------
      .           
      .           pub fn float_ty(fty: ast::FloatTy) -> FloatTy {
      .               match fty {
      .                   ast::FloatTy::F32 => FloatTy::F32,
      .                   ast::FloatTy::F64 => FloatTy::F64,
      .               }
      .           }
      .           
     25 ( 0.00%)  pub fn ast_int_ty(ity: IntTy) -> ast::IntTy {
      .               match ity {
      .                   IntTy::Isize => ast::IntTy::Isize,
      .                   IntTy::I8 => ast::IntTy::I8,
      .                   IntTy::I16 => ast::IntTy::I16,
      .                   IntTy::I32 => ast::IntTy::I32,
      .                   IntTy::I64 => ast::IntTy::I64,
      .                   IntTy::I128 => ast::IntTy::I128,
      .               }
     25 ( 0.00%)  }
      .           
      .           pub fn ast_uint_ty(uty: UintTy) -> ast::UintTy {
      .               match uty {
      .                   UintTy::Usize => ast::UintTy::Usize,
      .                   UintTy::U8 => ast::UintTy::U8,
      .                   UintTy::U16 => ast::UintTy::U16,
      .                   UintTy::U32 => ast::UintTy::U32,
      .                   UintTy::U64 => ast::UintTy::U64,
-- line 2256 ----------------------------------------
-- line 2262 ----------------------------------------
      .               closure::provide(providers);
      .               context::provide(providers);
      .               erase_regions::provide(providers);
      .               layout::provide(providers);
      .               util::provide(providers);
      .               print::provide(providers);
      .               super::util::bug::provide(providers);
      .               super::middle::provide(providers);
      8 ( 0.00%)      *providers = ty::query::Providers {
      .                   trait_impls_of: trait_def::trait_impls_of_provider,
      .                   type_uninhabited_from: inhabitedness::type_uninhabited_from,
      .                   const_param_default: consts::const_param_default,
      .                   vtable_allocation: vtable::vtable_allocation_provider,
      .                   ..*providers
      .               };
      1 ( 0.00%)  }
      .           
      .           /// A map for the local crate mapping each type to a vector of its
      .           /// inherent impls. This is not meant to be used outside of coherence;
      .           /// rather, you should request the vector for a specific type via
      .           /// `tcx.inherent_impls(def_id)` so as to minimize your dependencies
      .           /// (constructing this map requires touching the entire crate).
      .           #[derive(Clone, Debug, Default, HashStable)]
      .           pub struct CrateInherentImpls {
-- line 2285 ----------------------------------------
-- line 2288 ----------------------------------------
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, HashStable)]
      .           pub struct SymbolName<'tcx> {
      .               /// `&str` gives a consistent ordering, which ensures reproducible builds.
      .               pub name: &'tcx str,
      .           }
      .           
      .           impl<'tcx> SymbolName<'tcx> {
      6 ( 0.00%)      pub fn new(tcx: TyCtxt<'tcx>, name: &str) -> SymbolName<'tcx> {
      .                   SymbolName {
      .                       name: unsafe { str::from_utf8_unchecked(tcx.arena.alloc_slice(name.as_bytes())) },
      .                   }
      8 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> fmt::Display for SymbolName<'tcx> {
      .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Display::fmt(&self.name, fmt)
      .               }
      .           }
      .           
-- line 2308 ----------------------------------------

248,559 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs
--------------------------------------------------------------------------------
Ir              

-- line 59 ----------------------------------------
     .                   &mut self,
     .                   def_id: DefId,
     .                   kind: &str,
     .                   descr: &dyn fmt::Display,
     .               ) -> ControlFlow<Self::BreakTy>;
     .           
     .               /// Not overridden, but used to actually visit types and traits.
     .               fn skeleton(&mut self) -> DefIdVisitorSkeleton<'_, 'tcx, Self> {
13,317 ( 0.01%)          DefIdVisitorSkeleton {
     .                       def_id_visitor: self,
     .                       visited_opaque_tys: Default::default(),
     .                       dummy: Default::default(),
     .                   }
     .               }
    24 ( 0.00%)      fn visit(&mut self, ty_fragment: impl TypeFoldable<'tcx>) -> ControlFlow<Self::BreakTy> {
     .                   ty_fragment.visit_with(&mut self.skeleton())
    40 ( 0.00%)      }
    18 ( 0.00%)      fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<Self::BreakTy> {
     .                   self.skeleton().visit_trait(trait_ref)
    18 ( 0.00%)      }
     .               fn visit_projection_ty(
     .                   &mut self,
     .                   projection: ty::ProjectionTy<'tcx>,
     .               ) -> ControlFlow<Self::BreakTy> {
     .                   self.skeleton().visit_projection_ty(projection)
     .               }
     .               fn visit_predicates(
     .                   &mut self,
     .                   predicates: ty::GenericPredicates<'tcx>,
     .               ) -> ControlFlow<Self::BreakTy> {
    14 ( 0.00%)          self.skeleton().visit_predicates(predicates)
     .               }
     .           }
     .           
     .           struct DefIdVisitorSkeleton<'v, 'tcx, V: ?Sized> {
     .               def_id_visitor: &'v mut V,
     .               visited_opaque_tys: FxHashSet<DefId>,
     .               dummy: PhantomData<TyCtxt<'tcx>>,
     .           }
     .           
     .           impl<'tcx, V> DefIdVisitorSkeleton<'_, 'tcx, V>
     .           where
     .               V: DefIdVisitor<'tcx> + ?Sized,
     .           {
     .               fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<V::BreakTy> {
     3 ( 0.00%)          let TraitRef { def_id, substs } = trait_ref;
   923 ( 0.00%)          self.def_id_visitor.visit_def_id(def_id, "trait", &trait_ref.print_only_trait_path())?;
     3 ( 0.00%)          if self.def_id_visitor.shallow() { ControlFlow::CONTINUE } else { substs.visit_with(self) }
     .               }
     .           
   440 ( 0.00%)      fn visit_projection_ty(
     .                   &mut self,
     .                   projection: ty::ProjectionTy<'tcx>,
     .               ) -> ControlFlow<V::BreakTy> {
   352 ( 0.00%)          let (trait_ref, assoc_substs) =
    88 ( 0.00%)              projection.trait_ref_and_own_substs(self.def_id_visitor.tcx());
     .                   self.visit_trait(trait_ref)?;
     .                   if self.def_id_visitor.shallow() {
     .                       ControlFlow::CONTINUE
     .                   } else {
     .                       assoc_substs.iter().try_for_each(|subst| subst.visit_with(self))
     .                   }
   396 ( 0.00%)      }
     .           
     .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<V::BreakTy> {
     2 ( 0.00%)          match predicate.kind().skip_binder() {
     .                       ty::PredicateKind::Trait(ty::TraitPredicate {
     .                           trait_ref,
     .                           constness: _,
     .                           polarity: _,
     .                       }) => self.visit_trait(trait_ref),
     .                       ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, term }) => {
     .                           term.visit_with(self)?;
     .                           self.visit_projection_ty(projection_ty)
-- line 132 ----------------------------------------
-- line 157 ----------------------------------------
     .                       ACNode::Leaf(leaf) => self.visit_const(leaf),
     .                       ACNode::Cast(_, _, ty) => self.visit_ty(ty),
     .                       ACNode::Binop(..) | ACNode::UnaryOp(..) | ACNode::FunctionCall(_, _) => {
     .                           ControlFlow::CONTINUE
     .                       }
     .                   })
     .               }
     .           
    98 ( 0.00%)      fn visit_predicates(
     .                   &mut self,
     .                   predicates: ty::GenericPredicates<'tcx>,
     .               ) -> ControlFlow<V::BreakTy> {
     .                   let ty::GenericPredicates { parent: _, predicates } = predicates;
     .                   predicates.iter().try_for_each(|&(predicate, _span)| self.visit_predicate(predicate))
   112 ( 0.00%)      }
     .           }
     .           
     .           impl<'tcx, V> TypeVisitor<'tcx> for DefIdVisitorSkeleton<'_, 'tcx, V>
     .           where
     .               V: DefIdVisitor<'tcx> + ?Sized,
     .           {
     .               type BreakTy = V::BreakTy;
     .           
49,888 ( 0.02%)      fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<V::BreakTy> {
 5,553 ( 0.00%)          let tcx = self.def_id_visitor.tcx();
     .                   // InternalSubsts are not visited here because they are visited below in `super_visit_with`.
27,721 ( 0.01%)          match *ty.kind() {
 7,292 ( 0.00%)              ty::Adt(&ty::AdtDef { did: def_id, .. }, ..)
     .                       | ty::Foreign(def_id)
     .                       | ty::FnDef(def_id, ..)
     .                       | ty::Closure(def_id, ..)
     .                       | ty::Generator(def_id, ..) => {
36,768 ( 0.02%)                  self.def_id_visitor.visit_def_id(def_id, "type", &ty)?;
     .                           if self.def_id_visitor.shallow() {
     .                               return ControlFlow::CONTINUE;
     .                           }
     .                           // Default type visitor doesn't visit signatures of fn types.
     .                           // Something like `fn() -> Priv {my_func}` is considered a private type even if
     .                           // `my_func` is public, so we need to visit signatures.
 7,923 ( 0.00%)                  if let ty::FnDef(..) = ty.kind() {
     .                               tcx.fn_sig(def_id).visit_with(self)?;
     .                           }
     .                           // Inherent static methods don't have self type in substs.
     .                           // Something like `fn() {my_method}` type of the method
     .                           // `impl Pub<Priv> { pub fn my_method() {} }` is considered a private type,
     .                           // so we need to visit the self type additionally.
10,726 ( 0.00%)                  if let Some(assoc_item) = tcx.opt_associated_item(def_id) {
   552 ( 0.00%)                      if let ty::ImplContainer(impl_def_id) = assoc_item.container {
   194 ( 0.00%)                          tcx.type_of(impl_def_id).visit_with(self)?;
     .                               }
     .                           }
     .                       }
    88 ( 0.00%)              ty::Projection(proj) => {
     .                           if self.def_id_visitor.skip_assoc_tys() {
     .                               // Visitors searching for minimal visibility/reachability want to
     .                               // conservatively approximate associated types like `<Type as Trait>::Alias`
     .                               // as visible/reachable even if both `Type` and `Trait` are private.
     .                               // Ideally, associated types should be substituted in the same way as
     .                               // free type aliases, but this isn't done yet.
     .                               return ControlFlow::CONTINUE;
     .                           }
     .                           // This will also visit substs if necessary, so we don't need to recurse.
   440 ( 0.00%)                  return self.visit_projection_ty(proj);
     .                       }
    13 ( 0.00%)              ty::Dynamic(predicates, ..) => {
     .                           // All traits in the list are considered the "primary" part of the type
     .                           // and are visited by shallow visitors.
   118 ( 0.00%)                  for predicate in predicates {
   142 ( 0.00%)                      let trait_ref = match predicate.skip_binder() {
    78 ( 0.00%)                          ty::ExistentialPredicate::Trait(trait_ref) => trait_ref,
     .                                   ty::ExistentialPredicate::Projection(proj) => proj.trait_ref(tcx),
     .                                   ty::ExistentialPredicate::AutoTrait(def_id) => {
    40 ( 0.00%)                              ty::ExistentialTraitRef { def_id, substs: InternalSubsts::empty() }
     .                                   }
     .                               };
    26 ( 0.00%)                      let ty::ExistentialTraitRef { def_id, substs: _ } = trait_ref;
   240 ( 0.00%)                      self.def_id_visitor.visit_def_id(def_id, "trait", &trait_ref)?;
     .                           }
     .                       }
     .                       ty::Opaque(def_id, ..) => {
     .                           // Skip repeated `Opaque`s to avoid infinite recursion.
     .                           if self.visited_opaque_tys.insert(def_id) {
     .                               // The intent is to treat `impl Trait1 + Trait2` identically to
     .                               // `dyn Trait1 + Trait2`. Therefore we ignore def-id of the opaque type itself
     .                               // (it either has no visibility, or its visibility is insignificant, like
-- line 241 ----------------------------------------
-- line 270 ----------------------------------------
     .                       ty::Bound(..) | ty::Placeholder(..) | ty::Infer(..) => {
     .                           bug!("unexpected type: {:?}", ty)
     .                       }
     .                   }
     .           
     .                   if self.def_id_visitor.shallow() {
     .                       ControlFlow::CONTINUE
     .                   } else {
16,367 ( 0.01%)              ty.super_visit_with(self)
     .                   }
49,363 ( 0.02%)      }
     .           
     .               fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {
   600 ( 0.00%)          self.visit_ty(c.ty)?;
   100 ( 0.00%)          let tcx = self.def_id_visitor.tcx();
   700 ( 0.00%)          if let Ok(Some(ct)) = AbstractConst::from_const(tcx, c) {
     .                       self.visit_abstract_const_expr(tcx, ct)?;
     .                   }
     .                   ControlFlow::CONTINUE
     .               }
     .           }
     .           
     .           fn min(vis1: ty::Visibility, vis2: ty::Visibility, tcx: TyCtxt<'_>) -> ty::Visibility {
     4 ( 0.00%)      if vis1.is_at_least(vis2, tcx) { vis2 } else { vis1 }
     .           }
     .           
     .           ////////////////////////////////////////////////////////////////////////////////
     .           /// Visitor used to determine if pub(restricted) is used anywhere in the crate.
     .           ///
     .           /// This is done so that `private_in_public` warnings can be turned into hard errors
     .           /// in crates that have been updated to use pub(restricted).
     .           ////////////////////////////////////////////////////////////////////////////////
-- line 301 ----------------------------------------
-- line 303 ----------------------------------------
     .               tcx: TyCtxt<'tcx>,
     .               has_pub_restricted: bool,
     .           }
     .           
     .           impl<'tcx> Visitor<'tcx> for PubRestrictedVisitor<'tcx> {
     .               type NestedFilter = nested_filter::All;
     .           
     .               fn nested_visit_map(&mut self) -> Self::Map {
    57 ( 0.00%)          self.tcx.hir()
     .               }
     .               fn visit_vis(&mut self, vis: &'tcx hir::Visibility<'tcx>) {
   259 ( 0.00%)          self.has_pub_restricted = self.has_pub_restricted || vis.node.is_pub_restricted();
     .               }
     .           }
     .           
     .           ////////////////////////////////////////////////////////////////////////////////
     .           /// Visitor used to determine impl visibility and reachability.
     .           ////////////////////////////////////////////////////////////////////////////////
     .           
     .           struct FindMin<'a, 'tcx, VL: VisibilityLike> {
-- line 322 ----------------------------------------
-- line 336 ----------------------------------------
     .                   true
     .               }
     .               fn visit_def_id(
     .                   &mut self,
     .                   def_id: DefId,
     .                   _kind: &str,
     .                   _descr: &dyn fmt::Display,
     .               ) -> ControlFlow<Self::BreakTy> {
    85 ( 0.00%)          self.min = VL::new_min(self, def_id);
     .                   ControlFlow::CONTINUE
     .               }
     .           }
     .           
     .           trait VisibilityLike: Sized {
     .               const MAX: Self;
     .               const SHALLOW: bool = false;
     .               fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self;
     .           
     .               // Returns an over-approximation (`skip_assoc_tys` = true) of visibility due to
     .               // associated types for which we can't determine visibility precisely.
    56 ( 0.00%)      fn of_impl(def_id: LocalDefId, tcx: TyCtxt<'_>, access_levels: &AccessLevels) -> Self {
    28 ( 0.00%)          let mut find = FindMin { tcx, access_levels, min: Self::MAX };
     8 ( 0.00%)          find.visit(tcx.type_of(def_id));
    24 ( 0.00%)          if let Some(trait_ref) = tcx.impl_trait_ref(def_id) {
     3 ( 0.00%)              find.visit_trait(trait_ref);
     .                   }
    10 ( 0.00%)          find.min
    64 ( 0.00%)      }
     .           }
     .           impl VisibilityLike for ty::Visibility {
     .               const MAX: Self = ty::Visibility::Public;
    70 ( 0.00%)      fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {
    30 ( 0.00%)          min(find.tcx.visibility(def_id), find.min, find.tcx)
   100 ( 0.00%)      }
     .           }
     .           impl VisibilityLike for Option<AccessLevel> {
     .               const MAX: Self = Some(AccessLevel::Public);
     .               // Type inference is very smart sometimes.
     .               // It can make an impl reachable even some components of its type or trait are unreachable.
     .               // E.g. methods of `impl ReachableTrait<UnreachableTy> for ReachableTy<UnreachableTy> { ... }`
     .               // can be usable from other crates (#57264). So we skip substs when calculating reachability
     .               // and consider an impl reachable if its "shallow" type and trait are reachable.
     .               //
     .               // The assumption we make here is that type-inference won't let you use an impl without knowing
     .               // both "shallow" version of its self type and "shallow" version of its trait if it exists
     .               // (which require reaching the `DefId`s in them).
     .               const SHALLOW: bool = true;
    21 ( 0.00%)      fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {
     .                   cmp::min(
    21 ( 0.00%)              if let Some(def_id) = def_id.as_local() {
     8 ( 0.00%)                  find.access_levels.map.get(&def_id).copied()
     .                       } else {
     .                           Self::MAX
     .                       },
     9 ( 0.00%)              find.min,
     .                   )
    28 ( 0.00%)      }
     .           }
     .           
     .           ////////////////////////////////////////////////////////////////////////////////
     .           /// The embargo visitor, used to determine the exports of the AST.
     .           ////////////////////////////////////////////////////////////////////////////////
     .           
     .           struct EmbargoVisitor<'tcx> {
     .               tcx: TyCtxt<'tcx>,
-- line 400 ----------------------------------------
-- line 422 ----------------------------------------
     .           
     .           struct ReachEverythingInTheInterfaceVisitor<'a, 'tcx> {
     .               access_level: Option<AccessLevel>,
     .               item_def_id: LocalDefId,
     .               ev: &'a mut EmbargoVisitor<'tcx>,
     .           }
     .           
     .           impl<'tcx> EmbargoVisitor<'tcx> {
    80 ( 0.00%)      fn get(&self, def_id: LocalDefId) -> Option<AccessLevel> {
     .                   self.access_levels.map.get(&def_id).copied()
    80 ( 0.00%)      }
     .           
     .               fn update_with_hir_id(
     .                   &mut self,
     .                   hir_id: hir::HirId,
     .                   level: Option<AccessLevel>,
     .               ) -> Option<AccessLevel> {
     .                   let def_id = self.tcx.hir().local_def_id(hir_id);
     .                   self.update(def_id, level)
     .               }
     .           
     .               /// Updates node level and returns the updated level.
     .               fn update(&mut self, def_id: LocalDefId, level: Option<AccessLevel>) -> Option<AccessLevel> {
    29 ( 0.00%)          let old_level = self.get(def_id);
     .                   // Accessibility levels can only grow.
     .                   if level > old_level {
     .                       self.access_levels.map.insert(def_id, level.unwrap());
     .                       self.changed = true;
     .                       level
     .                   } else {
     .                       old_level
     .                   }
-- line 453 ----------------------------------------
-- line 458 ----------------------------------------
     .                   def_id: LocalDefId,
     .                   access_level: Option<AccessLevel>,
     .               ) -> ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {
     .                   ReachEverythingInTheInterfaceVisitor {
     .                       access_level: cmp::min(access_level, Some(AccessLevel::Reachable)),
     .                       item_def_id: def_id,
     .                       ev: self,
     .                   }
     3 ( 0.00%)      }
     .           
     .               // We have to make sure that the items that macros might reference
     .               // are reachable, since they might be exported transitively.
     .               fn update_reachability_from_macro(&mut self, local_def_id: LocalDefId, md: &MacroDef) {
     .                   // Non-opaque macros cannot make other items more accessible than they already are.
     .           
     .                   let hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);
     .                   let attrs = self.tcx.hir().attrs(hir_id);
-- line 474 ----------------------------------------
-- line 630 ----------------------------------------
     .           }
     .           
     .           impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {
     .               type NestedFilter = nested_filter::All;
     .           
     .               /// We want to visit items in the context of their containing
     .               /// module and so forth, so supply a crate for doing a deep walk.
     .               fn nested_visit_map(&mut self) -> Self::Map {
    57 ( 0.00%)          self.tcx.hir()
     .               }
     .           
   306 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    68 ( 0.00%)          let item_level = match item.kind {
     .                       hir::ItemKind::Impl { .. } => {
     .                           let impl_level =
    24 ( 0.00%)                      Option::<AccessLevel>::of_impl(item.def_id, self.tcx, &self.access_levels);
     4 ( 0.00%)                  self.update(item.def_id, impl_level)
     .                       }
   120 ( 0.00%)              _ => self.get(item.def_id),
     .                   };
     .           
     .                   // Update levels of nested things.
   170 ( 0.00%)          match item.kind {
     .                       hir::ItemKind::Enum(ref def, _) => {
     .                           for variant in def.variants {
     .                               let variant_level = self.update_with_hir_id(variant.id, item_level);
     .                               if let Some(ctor_hir_id) = variant.data.ctor_hir_id() {
     .                                   self.update_with_hir_id(ctor_hir_id, item_level);
     .                               }
     .                               for field in variant.data.fields() {
     .                                   self.update_with_hir_id(field.hir_id, variant_level);
     .                               }
     .                           }
     .                       }
     .                       hir::ItemKind::Impl(ref impl_) => {
    12 ( 0.00%)                  for impl_item_ref in impl_.items {
    29 ( 0.00%)                      if impl_.of_trait.is_some()
     4 ( 0.00%)                          || self.tcx.visibility(impl_item_ref.id.def_id) == ty::Visibility::Public
     .                               {
    10 ( 0.00%)                          self.update(impl_item_ref.id.def_id, item_level);
     .                               }
     .                           }
     .                       }
     .                       hir::ItemKind::Trait(.., trait_item_refs) => {
     .                           for trait_item_ref in trait_item_refs {
     .                               self.update(trait_item_ref.id.def_id, item_level);
     .                           }
     .                       }
     .                       hir::ItemKind::Struct(ref def, _) | hir::ItemKind::Union(ref def, _) => {
     8 ( 0.00%)                  if let Some(ctor_hir_id) = def.ctor_hir_id() {
     .                               self.update_with_hir_id(ctor_hir_id, item_level);
     .                           }
     4 ( 0.00%)                  for field in def.fields() {
    36 ( 0.00%)                      if field.vis.node.is_pub() {
     .                                   self.update_with_hir_id(field.hir_id, item_level);
     .                               }
     .                           }
     .                       }
     .                       hir::ItemKind::Macro(ref macro_def) => {
     .                           self.update_reachability_from_macro(item.def_id, macro_def);
     .                       }
     .                       hir::ItemKind::ForeignMod { items, .. } => {
-- line 691 ----------------------------------------
-- line 704 ----------------------------------------
     .                       | hir::ItemKind::TyAlias(..)
     .                       | hir::ItemKind::Mod(..)
     .                       | hir::ItemKind::TraitAlias(..)
     .                       | hir::ItemKind::Fn(..)
     .                       | hir::ItemKind::ExternCrate(..) => {}
     .                   }
     .           
     .                   // Mark all items in interfaces of reachable items as reachable.
   170 ( 0.00%)          match item.kind {
     .                       // The interface is empty.
     .                       hir::ItemKind::Macro(..) | hir::ItemKind::ExternCrate(..) => {}
     .                       // All nested items are checked by `visit_item`.
     .                       hir::ItemKind::Mod(..) => {}
     .                       // Handled in the access level of in rustc_resolve
     .                       hir::ItemKind::Use(..) => {}
     .                       // The interface is empty.
     .                       hir::ItemKind::GlobalAsm(..) => {}
-- line 720 ----------------------------------------
-- line 732 ----------------------------------------
     .                               self.reach(item.def_id, exist_level).generics().predicates().ty();
     .                           }
     .                       }
     .                       // Visit everything.
     .                       hir::ItemKind::Const(..)
     .                       | hir::ItemKind::Static(..)
     .                       | hir::ItemKind::Fn(..)
     .                       | hir::ItemKind::TyAlias(..) => {
     3 ( 0.00%)                  if item_level.is_some() {
     2 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates().ty();
     .                           }
     .                       }
     .                       hir::ItemKind::Trait(.., trait_item_refs) => {
     .                           if item_level.is_some() {
     .                               self.reach(item.def_id, item_level).generics().predicates();
     .           
     .                               for trait_item_ref in trait_item_refs {
     .                                   let mut reach = self.reach(trait_item_ref.id.def_id, item_level);
-- line 749 ----------------------------------------
-- line 761 ----------------------------------------
     .                       }
     .                       hir::ItemKind::TraitAlias(..) => {
     .                           if item_level.is_some() {
     .                               self.reach(item.def_id, item_level).generics().predicates();
     .                           }
     .                       }
     .                       // Visit everything except for private impl items.
     .                       hir::ItemKind::Impl(ref impl_) => {
     4 ( 0.00%)                  if item_level.is_some() {
     .                               self.reach(item.def_id, item_level).generics().predicates().ty().trait_ref();
     .           
     .                               for impl_item_ref in impl_.items {
     .                                   let impl_item_level = self.get(impl_item_ref.id.def_id);
     .                                   if impl_item_level.is_some() {
     .                                       self.reach(impl_item_ref.id.def_id, impl_item_level)
     .                                           .generics()
     .                                           .predicates()
-- line 777 ----------------------------------------
-- line 808 ----------------------------------------
     .                                       .generics()
     .                                       .predicates()
     .                                       .ty();
     .                               }
     .                           }
     .                       }
     .                       // Visit everything except for private fields.
     .                       hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {
     2 ( 0.00%)                  if item_level.is_some() {
     .                               self.reach(item.def_id, item_level).generics().predicates();
     .                               for field in struct_def.fields() {
     .                                   let def_id = self.tcx.hir().local_def_id(field.hir_id);
     .                                   let field_level = self.get(def_id);
     .                                   if field_level.is_some() {
     .                                       self.reach(def_id, field_level).ty();
     .                                   }
     .                               }
     .                           }
     .                       }
     .                   }
     .           
     .                   let orig_level = mem::replace(&mut self.prev_level, item_level);
   102 ( 0.00%)          intravisit::walk_item(self, item);
    34 ( 0.00%)          self.prev_level = orig_level;
   272 ( 0.00%)      }
     .           
     .               fn visit_block(&mut self, b: &'tcx hir::Block<'tcx>) {
     .                   // Blocks can have public items, for example impls, but they always
     .                   // start as completely private regardless of publicity of a function,
     .                   // constant, type, field, etc., in which this block resides.
     .                   let orig_level = mem::replace(&mut self.prev_level, None);
     .                   intravisit::walk_block(self, b);
     .                   self.prev_level = orig_level;
     .               }
     .           }
     .           
     .           impl ReachEverythingInTheInterfaceVisitor<'_, '_> {
     7 ( 0.00%)      fn generics(&mut self) -> &mut Self {
     4 ( 0.00%)          for param in &self.ev.tcx.generics_of(self.item_def_id).params {
     .                       match param.kind {
     .                           GenericParamDefKind::Lifetime => {}
     .                           GenericParamDefKind::Type { has_default, .. } => {
     .                               if has_default {
     .                                   self.visit(self.ev.tcx.type_of(param.def_id));
     .                               }
     .                           }
     .                           GenericParamDefKind::Const { has_default, .. } => {
-- line 854 ----------------------------------------
-- line 855 ----------------------------------------
     .                               self.visit(self.ev.tcx.type_of(param.def_id));
     .                               if has_default {
     .                                   self.visit(self.ev.tcx.const_param_default(param.def_id));
     .                               }
     .                           }
     .                       }
     .                   }
     .                   self
     9 ( 0.00%)      }
     .           
     5 ( 0.00%)      fn predicates(&mut self) -> &mut Self {
     3 ( 0.00%)          self.visit_predicates(self.ev.tcx.predicates_of(self.item_def_id));
     .                   self
     6 ( 0.00%)      }
     .           
     5 ( 0.00%)      fn ty(&mut self) -> &mut Self {
     3 ( 0.00%)          self.visit(self.ev.tcx.type_of(self.item_def_id));
     .                   self
     6 ( 0.00%)      }
     .           
     .               fn trait_ref(&mut self) -> &mut Self {
     .                   if let Some(trait_ref) = self.ev.tcx.impl_trait_ref(self.item_def_id) {
     .                       self.visit_trait(trait_ref);
     .                   }
     .                   self
     .               }
     .           }
     .           
     .           impl<'tcx> DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {
     .               fn tcx(&self) -> TyCtxt<'tcx> {
     8 ( 0.00%)          self.ev.tcx
     .               }
    10 ( 0.00%)      fn visit_def_id(
     .                   &mut self,
     .                   def_id: DefId,
     .                   _kind: &str,
     .                   _descr: &dyn fmt::Display,
     .               ) -> ControlFlow<Self::BreakTy> {
     6 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
     3 ( 0.00%)              if let (ty::Visibility::Public, _) | (_, Some(AccessLevel::ReachableFromImplTrait)) =
     1 ( 0.00%)                  (self.tcx().visibility(def_id.to_def_id()), self.access_level)
     .                       {
     .                           self.ev.update(def_id, self.access_level);
     .                       }
     .                   }
     .                   ControlFlow::CONTINUE
    14 ( 0.00%)      }
     .           }
     .           
     .           //////////////////////////////////////////////////////////////////////////////////////
     .           /// Name privacy visitor, checks privacy and reports violations.
     .           /// Most of name privacy checks are performed during the main resolution phase,
     .           /// or later in type checking when field accesses and associated items are resolved.
     .           /// This pass performs remaining checks for fields in struct expressions and patterns.
     .           //////////////////////////////////////////////////////////////////////////////////////
-- line 909 ----------------------------------------
-- line 920 ----------------------------------------
     .               /// `Expr` or `Pat` nodes (they are guaranteed to be found only in bodies).
     .               #[track_caller]
     .               fn typeck_results(&self) -> &'tcx ty::TypeckResults<'tcx> {
     .                   self.maybe_typeck_results
     .                       .expect("`NamePrivacyVisitor::typeck_results` called outside of body")
     .               }
     .           
     .               // Checks that a field in a struct constructor (expression or pattern) is accessible.
   520 ( 0.00%)      fn check_field(
     .                   &mut self,
     .                   use_ctxt: Span,        // syntax context of the field name at the use site
     .                   span: Span,            // span of the field pattern, e.g., `x: 0`
     .                   def: &'tcx ty::AdtDef, // definition of the struct or enum
     .                   field: &'tcx ty::FieldDef,
     .                   in_update_syntax: bool,
     .               ) {
   104 ( 0.00%)          if def.is_enum() {
     .                       return;
     .                   }
     .           
     .                   // definition of the field
     .                   let ident = Ident::new(kw::Empty, use_ctxt);
    20 ( 0.00%)          let hir_id = self.tcx.hir().local_def_id_to_hir_id(self.current_item);
    70 ( 0.00%)          let def_id = self.tcx.adjust_ident_and_get_scope(ident, def.did, hir_id).1;
    10 ( 0.00%)          if !field.vis.is_accessible_from(def_id, self.tcx) {
     .                       let label = if in_update_syntax {
     .                           format!("field `{}` is private", field.name)
     .                       } else {
     .                           "private field".to_string()
     .                       };
     .           
     .                       struct_span_err!(
     .                           self.tcx.sess,
-- line 952 ----------------------------------------
-- line 955 ----------------------------------------
     .                           "field `{}` of {} `{}` is private",
     .                           field.name,
     .                           def.variant_descr(),
     .                           self.tcx.def_path_str(def.did)
     .                       )
     .                       .span_label(span, label)
     .                       .emit();
     .                   }
   416 ( 0.00%)      }
     .           }
     .           
     .           impl<'tcx> Visitor<'tcx> for NamePrivacyVisitor<'tcx> {
     .               type NestedFilter = nested_filter::All;
     .           
     .               /// We want to visit items in the context of their containing
     .               /// module and so forth, so supply a crate for doing a deep walk.
     .               fn nested_visit_map(&mut self) -> Self::Map {
    40 ( 0.00%)          self.tcx.hir()
     .               }
     .           
     .               fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {
     .                   // Don't visit nested modules, since we run a separate visitor walk
     .                   // for each module in `privacy_access_levels`
     .               }
     .           
     .               fn visit_nested_body(&mut self, body: hir::BodyId) {
     .                   let old_maybe_typeck_results =
    94 ( 0.00%)              self.maybe_typeck_results.replace(self.tcx.typeck_body(body));
    96 ( 0.00%)          let body = self.tcx.hir().body(body);
     .                   self.visit_body(body);
    12 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
     .               }
     .           
     .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    34 ( 0.00%)          let orig_current_item = mem::replace(&mut self.current_item, item.def_id);
   101 ( 0.00%)          intravisit::walk_item(self, item);
    34 ( 0.00%)          self.current_item = orig_current_item;
     .               }
     .           
 7,317 ( 0.00%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
 1,626 ( 0.00%)          if let hir::ExprKind::Struct(qpath, fields, ref base) = expr.kind {
    36 ( 0.00%)              let res = self.typeck_results().qpath_res(qpath, expr.hir_id);
    18 ( 0.00%)              let adt = self.typeck_results().expr_ty(expr).ty_adt_def().unwrap();
    54 ( 0.00%)              let variant = adt.variant_of_res(res);
    24 ( 0.00%)              if let Some(base) = *base {
     .                           // If the expression uses FRU we need to make sure all the unmentioned fields
     .                           // are checked for privacy (RFC 736). Rather than computing the set of
     .                           // unmentioned fields, just check them all.
     .                           for (vf_index, variant_field) in variant.fields.iter().enumerate() {
     .                               let field = fields.iter().find(|f| {
     .                                   self.tcx.field_index(f.hir_id, self.typeck_results()) == vf_index
     .                               });
     .                               let (use_ctxt, span) = match field {
     .                                   Some(field) => (field.ident.span, field.span),
     .                                   None => (base.span, base.span),
     .                               };
     .                               self.check_field(use_ctxt, span, adt, variant_field, true);
     .                           }
     .                       } else {
     .                           for field in fields {
    10 ( 0.00%)                      let use_ctxt = field.ident.span;
    65 ( 0.00%)                      let index = self.tcx.field_index(field.hir_id, self.typeck_results());
   110 ( 0.00%)                      self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);
     .                           }
     .                       }
     .                   }
     .           
 8,130 ( 0.00%)          intravisit::walk_expr(self, expr);
     .               }
     .           
 1,336 ( 0.00%)      fn visit_pat(&mut self, pat: &'tcx hir::Pat<'tcx>) {
   376 ( 0.00%)          if let PatKind::Struct(ref qpath, fields, _) = pat.kind {
   294 ( 0.00%)              let res = self.typeck_results().qpath_res(qpath, pat.hir_id);
   168 ( 0.00%)              let adt = self.typeck_results().pat_ty(pat).ty_adt_def().unwrap();
   336 ( 0.00%)              let variant = adt.variant_of_res(res);
     .                       for field in fields {
    42 ( 0.00%)                  let use_ctxt = field.ident.span;
   336 ( 0.00%)                  let index = self.tcx.field_index(field.hir_id, self.typeck_results());
   420 ( 0.00%)                  self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);
     .                       }
     .                   }
     .           
 1,503 ( 0.00%)          intravisit::walk_pat(self, pat);
     .               }
     .           }
     .           
     .           ////////////////////////////////////////////////////////////////////////////////////////////
     .           /// Type privacy visitor, checks types for privacy and reports violations.
     .           /// Both explicitly written types and inferred types of expressions and patterns are checked.
     .           /// Checks are performed on "semantic" types regardless of names and their hygiene.
     .           ////////////////////////////////////////////////////////////////////////////////////////////
-- line 1045 ----------------------------------------
-- line 1061 ----------------------------------------
     .                       .expect("`TypePrivacyVisitor::typeck_results` called outside of body")
     .               }
     .           
     .               fn item_is_accessible(&self, did: DefId) -> bool {
     .                   self.tcx.visibility(did).is_accessible_from(self.current_item.to_def_id(), self.tcx)
     .               }
     .           
     .               // Take node-id of an expression or pattern and check its type for privacy.
 7,315 ( 0.00%)      fn check_expr_pat_type(&mut self, id: hir::HirId, span: Span) -> bool {
 1,045 ( 0.00%)          self.span = span;
 1,045 ( 0.00%)          let typeck_results = self.typeck_results();
     .                   let result: ControlFlow<()> = try {
 4,180 ( 0.00%)              self.visit(typeck_results.node_type(id))?;
 8,360 ( 0.00%)              self.visit(typeck_results.node_substs(id))?;
 9,405 ( 0.00%)              if let Some(adjustments) = typeck_results.adjustments().get(id) {
     .                           adjustments.iter().try_for_each(|adjustment| self.visit(adjustment.target))?;
     .                       }
     .                   };
     .                   result.is_break()
 8,360 ( 0.00%)      }
     .           
     .               fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {
 5,276 ( 0.00%)          let is_error = !self.item_is_accessible(def_id);
     .                   if is_error {
     .                       self.tcx
     .                           .sess
     .                           .struct_span_err(self.span, &format!("{} `{}` is private", kind, descr))
     .                           .span_label(self.span, &format!("private {}", kind))
     .                           .emit();
     .                   }
     .                   is_error
-- line 1091 ----------------------------------------
-- line 1093 ----------------------------------------
     .           }
     .           
     .           impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {
     .               type NestedFilter = nested_filter::All;
     .           
     .               /// We want to visit items in the context of their containing
     .               /// module and so forth, so supply a crate for doing a deep walk.
     .               fn nested_visit_map(&mut self) -> Self::Map {
    40 ( 0.00%)          self.tcx.hir()
     .               }
     .           
     .               fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {
     .                   // Don't visit nested modules, since we run a separate visitor walk
     .                   // for each module in `privacy_access_levels`
     .               }
     .           
   160 ( 0.00%)      fn visit_nested_body(&mut self, body: hir::BodyId) {
     .                   let old_maybe_typeck_results =
    48 ( 0.00%)              self.maybe_typeck_results.replace(self.tcx.typeck_body(body));
    96 ( 0.00%)          let body = self.tcx.hir().body(body);
     .                   self.visit_body(body);
    16 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
   128 ( 0.00%)      }
     .           
     .               fn visit_generic_arg(&mut self, generic_arg: &'tcx hir::GenericArg<'tcx>) {
   267 ( 0.00%)          match generic_arg {
   104 ( 0.00%)              hir::GenericArg::Type(t) => self.visit_ty(t),
     .                       hir::GenericArg::Infer(inf) => self.visit_infer(inf),
     .                       hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}
     .                   }
     .               }
     .           
   889 ( 0.00%)      fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'tcx>) {
   254 ( 0.00%)          self.span = hir_ty.span;
   381 ( 0.00%)          if let Some(typeck_results) = self.maybe_typeck_results {
     .                       // Types in bodies.
   135 ( 0.00%)              if self.visit(typeck_results.node_type(hir_ty.hir_id)).is_break() {
     .                           return;
     .                       }
     .                   } else {
     .                       // Types in signatures.
     .                       // FIXME: This is very ineffective. Ideally each HIR type should be converted
     .                       // into a semantic type only once and the result should be cached somehow.
   246 ( 0.00%)              if self.visit(rustc_typeck::hir_ty_to_ty(self.tcx, hir_ty)).is_break() {
     .                           return;
     .                       }
     .                   }
     .           
   381 ( 0.00%)          intravisit::walk_ty(self, hir_ty);
   762 ( 0.00%)      }
     .           
     .               fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {
     .                   self.span = inf.span;
     .                   if let Some(typeck_results) = self.maybe_typeck_results {
     .                       if let Some(ty) = typeck_results.node_type_opt(inf.hir_id) {
     .                           if self.visit(ty).is_break() {
     .                               return;
     .                           }
-- line 1150 ----------------------------------------
-- line 1152 ----------------------------------------
     .                           // We don't do anything for const infers here.
     .                       }
     .                   } else {
     .                       bug!("visit_infer without typeck_results");
     .                   }
     .                   intravisit::walk_inf(self, inf);
     .               }
     .           
    64 ( 0.00%)      fn visit_trait_ref(&mut self, trait_ref: &'tcx hir::TraitRef<'tcx>) {
    24 ( 0.00%)          self.span = trait_ref.path.span;
     8 ( 0.00%)          if self.maybe_typeck_results.is_none() {
     .                       // Avoid calling `hir_trait_to_predicates` in bodies, it will ICE.
     .                       // The traits' privacy in bodies is already checked as a part of trait object types.
     8 ( 0.00%)              let bounds = rustc_typeck::hir_trait_to_predicates(
     8 ( 0.00%)                  self.tcx,
     .                           trait_ref,
     .                           // NOTE: This isn't really right, but the actual type doesn't matter here. It's
     .                           // just required by `ty::TraitRef`.
    24 ( 0.00%)                  self.tcx.types.never,
     .                       );
     .           
    72 ( 0.00%)              for (trait_predicate, _, _) in bounds.trait_bounds {
    56 ( 0.00%)                  if self.visit_trait(trait_predicate.skip_binder()).is_break() {
     .                               return;
     .                           }
     .                       }
     .           
    48 ( 0.00%)              for (poly_predicate, _) in bounds.projection_bounds {
     .                           let pred = poly_predicate.skip_binder();
     .                           let poly_pred_term = self.visit(pred.term);
     .                           if poly_pred_term.is_break()
     .                               || self.visit_projection_ty(pred.projection_ty).is_break()
     .                           {
     .                               return;
     .                           }
     .                       }
     .                   }
     .           
     .                   intravisit::walk_trait_ref(self, trait_ref);
    64 ( 0.00%)      }
     .           
     .               // Check types of expressions
 7,317 ( 0.00%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
 7,317 ( 0.00%)          if self.check_expr_pat_type(expr.hir_id, expr.span) {
     .                       // Do not check nested expressions if the error already happened.
     .                       return;
     .                   }
 5,363 ( 0.00%)          match expr.kind {
    36 ( 0.00%)              hir::ExprKind::Assign(_, rhs, _) | hir::ExprKind::Match(rhs, ..) => {
     .                           // Do not report duplicate errors for `x = y` and `match x { ... }`.
   224 ( 0.00%)                  if self.check_expr_pat_type(rhs.hir_id, rhs.span) {
     .                               return;
     .                           }
     .                       }
    68 ( 0.00%)              hir::ExprKind::MethodCall(segment, ..) => {
     .                           // Method calls have to be checked specially.
   136 ( 0.00%)                  self.span = segment.ident.span;
   408 ( 0.00%)                  if let Some(def_id) = self.typeck_results().type_dependent_def_id(expr.hir_id) {
   204 ( 0.00%)                      if self.visit(self.tcx.type_of(def_id)).is_break() {
     .                                   return;
     .                               }
     .                           } else {
     .                               self.tcx
     .                                   .sess
     .                                   .delay_span_bug(expr.span, "no type-dependent def for method call");
     .                           }
     .                       }
     .                       _ => {}
     .                   }
     .           
 2,439 ( 0.00%)          intravisit::walk_expr(self, expr);
 6,504 ( 0.00%)      }
     .           
     .               // Prohibit access to associated items with insufficient nominal visibility.
     .               //
     .               // Additionally, until better reachability analysis for macros 2.0 is available,
     .               // we prohibit access to private statics from other crates, this allows to give
     .               // more code internal visibility at link time. (Access to private functions
     .               // is already prohibited by type privacy for function types.)
 4,640 ( 0.00%)      fn visit_qpath(&mut self, qpath: &'tcx hir::QPath<'tcx>, id: hir::HirId, span: Span) {
   928 ( 0.00%)          let def = match qpath {
 1,008 ( 0.00%)              hir::QPath::Resolved(_, path) => match path.res {
   918 ( 0.00%)                  Res::Def(kind, def_id) => Some((kind, def_id)),
     .                           _ => None,
     .                       },
   128 ( 0.00%)              hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
     .                           .maybe_typeck_results
 1,152 ( 0.00%)                  .and_then(|typeck_results| typeck_results.type_dependent_def(id)),
     .                   };
     .                   let def = def.filter(|(kind, _)| {
   562 ( 0.00%)              matches!(
     .                           kind,
     .                           DefKind::AssocFn | DefKind::AssocConst | DefKind::AssocTy | DefKind::Static
     .                       )
     .                   });
     .                   if let Some((kind, def_id)) = def {
     .                       let is_local_static =
   392 ( 0.00%)                  if let DefKind::Static = kind { def_id.is_local() } else { false };
   200 ( 0.00%)              if !self.item_is_accessible(def_id) && !is_local_static {
     .                           let sess = self.tcx.sess;
     .                           let sm = sess.source_map();
     .                           let name = match qpath {
     .                               hir::QPath::Resolved(..) | hir::QPath::LangItem(..) => {
     .                                   sm.span_to_snippet(qpath.span()).ok()
     .                               }
     .                               hir::QPath::TypeRelative(_, segment) => Some(segment.ident.to_string()),
     .                           };
-- line 1258 ----------------------------------------
-- line 1263 ----------------------------------------
     .                           };
     .                           sess.struct_span_err(span, &msg)
     .                               .span_label(span, &format!("private {}", kind))
     .                               .emit();
     .                           return;
     .                       }
     .                   }
     .           
 5,104 ( 0.00%)          intravisit::walk_qpath(self, qpath, id, span);
     .               }
     .           
     .               // Check types of patterns.
     .               fn visit_pat(&mut self, pattern: &'tcx hir::Pat<'tcx>) {
 1,108 ( 0.00%)          if self.check_expr_pat_type(pattern.hir_id, pattern.span) {
     .                       // Do not check nested patterns if the error already happened.
     .                       return;
     .                   }
     .           
   573 ( 0.00%)          intravisit::walk_pat(self, pattern);
     .               }
     .           
   165 ( 0.00%)      fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>) {
    99 ( 0.00%)          if let Some(init) = local.init {
   231 ( 0.00%)              if self.check_expr_pat_type(init.hir_id, init.span) {
     .                           // Do not report duplicate errors for `let x = y`.
     .                           return;
     .                       }
     .                   }
     .           
     .                   intravisit::walk_local(self, local);
   132 ( 0.00%)      }
     .           
     .               // Check types in item interfaces.
     .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    34 ( 0.00%)          let orig_current_item = mem::replace(&mut self.current_item, item.def_id);
     .                   let old_maybe_typeck_results = self.maybe_typeck_results.take();
   101 ( 0.00%)          intravisit::walk_item(self, item);
    34 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
    36 ( 0.00%)          self.current_item = orig_current_item;
     .               }
     .           }
     .           
     .           impl<'tcx> DefIdVisitor<'tcx> for TypePrivacyVisitor<'tcx> {
     .               fn tcx(&self) -> TyCtxt<'tcx> {
11,178 ( 0.00%)          self.tcx
     .               }
39,570 ( 0.02%)      fn visit_def_id(
     .                   &mut self,
     .                   def_id: DefId,
     .                   kind: &str,
     .                   descr: &dyn fmt::Display,
     .               ) -> ControlFlow<Self::BreakTy> {
     .                   if self.check_def_id(def_id, kind, descr) {
     .                       ControlFlow::BREAK
     .                   } else {
     .                       ControlFlow::CONTINUE
     .                   }
23,742 ( 0.01%)      }
     .           }
     .           
     .           ///////////////////////////////////////////////////////////////////////////////
     .           /// Obsolete visitors for checking for private items in public interfaces.
     .           /// These visitors are supposed to be kept in frozen state and produce an
     .           /// "old error node set". For backward compatibility the new visitor reports
     .           /// warnings instead of hard errors when the erroneous node is not in this old set.
     .           ///////////////////////////////////////////////////////////////////////////////
-- line 1328 ----------------------------------------
-- line 1342 ----------------------------------------
     .               /// Whether we've recurred at all (i.e., if we're pointing at the
     .               /// first type on which `visit_ty` was called).
     .               at_outer_type: bool,
     .               /// Whether that first type is a public path.
     .               outer_type_is_public_path: bool,
     .           }
     .           
     .           impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {
     5 ( 0.00%)      fn path_is_private_type(&self, path: &hir::Path<'_>) -> bool {
    15 ( 0.00%)          let did = match path.res {
     .                       Res::PrimTy(..) | Res::SelfTy(..) | Res::Err => return false,
    30 ( 0.00%)              res => res.def_id(),
     .                   };
     .           
     .                   // A path can only be private if:
     .                   // it's in this crate...
     5 ( 0.00%)          if let Some(did) = did.as_local() {
     .                       // .. and it corresponds to a private type in the AST (this returns
     .                       // `None` for type parameters).
    20 ( 0.00%)              match self.tcx.hir().find(self.tcx.hir().local_def_id_to_hir_id(did)) {
    16 ( 0.00%)                  Some(Node::Item(item)) => !item.vis.node.is_pub(),
     .                           Some(_) | None => false,
     .                       }
     .                   } else {
     .                       false
     .                   }
    10 ( 0.00%)      }
     .           
     .               fn trait_is_public(&self, trait_id: LocalDefId) -> bool {
     .                   // FIXME: this would preferably be using `exported_items`, but all
     .                   // traits are exported currently (see `EmbargoVisitor.exported_trait`).
     .                   self.access_levels.is_public(trait_id)
     .               }
     .           
     .               fn check_generic_bound(&mut self, bound: &hir::GenericBound<'_>) {
-- line 1376 ----------------------------------------
-- line 1377 ----------------------------------------
     .                   if let hir::GenericBound::Trait(ref trait_ref, _) = *bound {
     .                       if self.path_is_private_type(trait_ref.trait_ref.path) {
     .                           self.old_error_set.insert(trait_ref.trait_ref.hir_ref_id);
     .                       }
     .                   }
     .               }
     .           
     .               fn item_is_public(&self, def_id: LocalDefId, vis: &hir::Visibility<'_>) -> bool {
    57 ( 0.00%)          self.access_levels.is_reachable(def_id) || vis.node.is_pub()
     .               }
     .           }
     .           
     .           impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {
     .               fn visit_generic_arg(&mut self, generic_arg: &'v hir::GenericArg<'v>) {
     .                   match generic_arg {
     .                       hir::GenericArg::Type(t) => self.visit_ty(t),
     .                       hir::GenericArg::Infer(inf) => self.visit_ty(&inf.to_ty()),
     .                       hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}
     .                   }
     .               }
     .           
     .               fn visit_ty(&mut self, ty: &hir::Ty<'_>) {
    20 ( 0.00%)          if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = ty.kind {
    16 ( 0.00%)              if self.inner.path_is_private_type(path) {
     .                           self.contains_private = true;
     .                           // Found what we're looking for, so let's stop working.
     .                           return;
     .                       }
     .                   }
     .                   if let hir::TyKind::Path(_) = ty.kind {
     .                       if self.at_outer_type {
     .                           self.outer_type_is_public_path = true;
-- line 1408 ----------------------------------------
-- line 1417 ----------------------------------------
     .           }
     .           
     .           impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {
     .               type NestedFilter = nested_filter::All;
     .           
     .               /// We want to visit items in the context of their containing
     .               /// module and so forth, so supply a crate for doing a deep walk.
     .               fn nested_visit_map(&mut self) -> Self::Map {
    34 ( 0.00%)          self.tcx.hir()
     .               }
     .           
   297 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
   132 ( 0.00%)          match item.kind {
     .                       // Contents of a private mod can be re-exported, so we need
     .                       // to check internals.
     .                       hir::ItemKind::Mod(_) => {}
     .           
     .                       // An `extern {}` doesn't introduce a new privacy
     .                       // namespace (the contents have their own privacies).
     .                       hir::ItemKind::ForeignMod { .. } => {}
     .           
-- line 1437 ----------------------------------------
-- line 1454 ----------------------------------------
     .                           // `impl [... for] Private` is never visible.
     .                           let self_contains_private;
     .                           // `impl [... for] Public<...>`, but not `impl [... for]
     .                           // Vec<Public>` or `(Public,)`, etc.
     .                           let self_is_public_path;
     .           
     .                           // Check the properties of the `Self` type:
     .                           {
    16 ( 0.00%)                      let mut visitor = ObsoleteCheckTypeForPrivatenessVisitor {
     .                                   inner: self,
     .                                   contains_private: false,
     .                                   at_outer_type: true,
     .                                   outer_type_is_public_path: false,
     .                               };
     4 ( 0.00%)                      visitor.visit_ty(impl_.self_ty);
     .                               self_contains_private = visitor.contains_private;
     .                               self_is_public_path = visitor.outer_type_is_public_path;
     .                           }
     .           
     .                           // Miscellaneous info about the impl:
     .           
     .                           // `true` iff this is `impl Private for ...`.
     .                           let not_private_trait = impl_.of_trait.as_ref().map_or(
     .                               true, // no trait counts as public trait
     .                               |tr| {
     9 ( 0.00%)                          if let Some(def_id) = tr.path.res.def_id().as_local() {
     .                                       self.trait_is_public(def_id)
     .                                   } else {
     .                                       true // external traits must be public
     .                                   }
     .                               },
     .                           );
     .           
     .                           // `true` iff this is a trait impl or at least one method is public.
-- line 1487 ----------------------------------------
-- line 1488 ----------------------------------------
     .                           //
     .                           // `impl Public { $( fn ...() {} )* }` is not visible.
     .                           //
     .                           // This is required over just using the methods' privacy
     .                           // directly because we might have `impl<T: Foo<Private>> ...`,
     .                           // and we shouldn't warn about the generics if all the methods
     .                           // are private (because `T` won't be visible externally).
     .                           let trait_or_some_public_method = impl_.of_trait.is_some()
     1 ( 0.00%)                      || impl_.items.iter().any(|impl_item_ref| {
     8 ( 0.00%)                          let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
     9 ( 0.00%)                          match impl_item.kind {
     .                                       hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..) => {
     .                                           self.access_levels.is_reachable(impl_item_ref.id.def_id)
     .                                       }
     .                                       hir::ImplItemKind::TyAlias(_) => false,
     .                                   }
     .                               });
     .           
     6 ( 0.00%)                  if !self_contains_private && not_private_trait && trait_or_some_public_method {
     .                               intravisit::walk_generics(self, &impl_.generics);
     .           
     .                               match impl_.of_trait {
     .                                   None => {
     .                                       for impl_item_ref in impl_.items {
     .                                           // This is where we choose whether to walk down
     .                                           // further into the impl to check its items. We
     .                                           // should only walk into public items so that we
-- line 1514 ----------------------------------------
-- line 1549 ----------------------------------------
     .                                       for impl_item_ref in impl_.items {
     .                                           let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
     .                                           if let hir::ImplItemKind::TyAlias(ty) = impl_item.kind {
     .                                               self.visit_ty(ty);
     .                                           }
     .                                       }
     .                                   }
     .                               }
    12 ( 0.00%)                  } else if impl_.of_trait.is_none() && self_is_public_path {
     .                               // `impl Public<Private> { ... }`. Any public static
     .                               // methods will be visible as `Public::foo`.
     .                               let mut found_pub_static = false;
     .                               for impl_item_ref in impl_.items {
     .                                   if self.access_levels.is_reachable(impl_item_ref.id.def_id)
     .                                       || self.tcx.visibility(impl_item_ref.id.def_id)
     .                                           == ty::Visibility::Public
     .                                   {
-- line 1565 ----------------------------------------
-- line 1584 ----------------------------------------
     .                           return;
     .                       }
     .           
     .                       // `type ... = ...;` can contain private types, because
     .                       // we're introducing a new name.
     .                       hir::ItemKind::TyAlias(..) => return,
     .           
     .                       // Not at all public, so we don't care.
   200 ( 0.00%)              _ if !self.item_is_public(item.def_id, &item.vis) => {
     .                           return;
     .                       }
     .           
     .                       _ => {}
     .                   }
     .           
     .                   // We've carefully constructed it so that if we're here, then
     .                   // any `visit_ty`'s will be called on things that are in
     .                   // public signatures, i.e., things that we're interested in for
     .                   // this visitor.
    10 ( 0.00%)          intravisit::walk_item(self, item);
   256 ( 0.00%)      }
     .           
     8 ( 0.00%)      fn visit_generics(&mut self, generics: &'tcx hir::Generics<'tcx>) {
     .                   for param in generics.params {
     .                       for bound in param.bounds {
     .                           self.check_generic_bound(bound);
     .                       }
     .                   }
     1 ( 0.00%)          for predicate in generics.where_clause.predicates {
     .                       match predicate {
     .                           hir::WherePredicate::BoundPredicate(bound_pred) => {
     .                               for bound in bound_pred.bounds.iter() {
     .                                   self.check_generic_bound(bound)
     .                               }
     .                           }
     .                           hir::WherePredicate::RegionPredicate(_) => {}
     .                           hir::WherePredicate::EqPredicate(eq_pred) => {
     .                               self.visit_ty(eq_pred.rhs_ty);
     .                           }
     .                       }
     .                   }
     8 ( 0.00%)      }
     .           
     .               fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem<'tcx>) {
     .                   if self.access_levels.is_reachable(item.def_id) {
     .                       intravisit::walk_foreign_item(self, item)
     .                   }
     .               }
     .           
     .               fn visit_ty(&mut self, t: &'tcx hir::Ty<'tcx>) {
     5 ( 0.00%)          if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = t.kind {
     4 ( 0.00%)              if self.path_is_private_type(path) {
     .                           self.old_error_set.insert(t.hir_id);
     .                       }
     .                   }
     4 ( 0.00%)          intravisit::walk_ty(self, t)
     .               }
     .           
     .               fn visit_variant(
     .                   &mut self,
     .                   v: &'tcx hir::Variant<'tcx>,
     .                   g: &'tcx hir::Generics<'tcx>,
     .                   item_id: hir::HirId,
     .               ) {
-- line 1647 ----------------------------------------
-- line 1679 ----------------------------------------
     .               /// The visitor checks that each component type is at least this visible.
     .               required_visibility: ty::Visibility,
     .               has_pub_restricted: bool,
     .               has_old_errors: bool,
     .               in_assoc_ty: bool,
     .           }
     .           
     .           impl SearchInterfaceForPrivateItemsVisitor<'_> {
    91 ( 0.00%)      fn generics(&mut self) -> &mut Self {
    39 ( 0.00%)          for param in &self.tcx.generics_of(self.item_def_id).params {
     8 ( 0.00%)              match param.kind {
     .                           GenericParamDefKind::Lifetime => {}
     1 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
     1 ( 0.00%)                      if has_default {
     .                                   self.visit(self.tcx.type_of(param.def_id));
     .                               }
     .                           }
     .                           // FIXME(generic_const_exprs): May want to look inside const here
     .                           GenericParamDefKind::Const { .. } => {
     .                               self.visit(self.tcx.type_of(param.def_id));
     .                           }
     .                       }
     .                   }
     .                   self
   104 ( 0.00%)      }
     .           
    65 ( 0.00%)      fn predicates(&mut self) -> &mut Self {
     .                   // N.B., we use `explicit_predicates_of` and not `predicates_of`
     .                   // because we don't want to report privacy errors due to where
     .                   // clauses that the compiler inferred. We only want to
     .                   // consider the ones that the user wrote. This is important
     .                   // for the inferred outlives rules; see
     .                   // `src/test/ui/rfc-2093-infer-outlives/privacy.rs`.
    26 ( 0.00%)          self.visit_predicates(self.tcx.explicit_predicates_of(self.item_def_id));
     .                   self
    78 ( 0.00%)      }
     .           
     .               fn bounds(&mut self) -> &mut Self {
     .                   self.visit_predicates(ty::GenericPredicates {
     .                       parent: None,
     .                       predicates: self.tcx.explicit_item_bounds(self.item_def_id),
     .                   });
     .                   self
     .               }
     .           
    95 ( 0.00%)      fn ty(&mut self) -> &mut Self {
    38 ( 0.00%)          self.visit(self.tcx.type_of(self.item_def_id));
     .                   self
    95 ( 0.00%)      }
     .           
     .               fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {
   290 ( 0.00%)          if self.leaks_private_dep(def_id) {
     .                       self.tcx.struct_span_lint_hir(
     .                           lint::builtin::EXPORTED_PRIVATE_DEPENDENCIES,
     .                           self.tcx.hir().local_def_id_to_hir_id(self.item_def_id),
     .                           self.tcx.def_span(self.item_def_id.to_def_id()),
     .                           |lint| {
     .                               lint.build(&format!(
     .                                   "{} `{}` from private dependency '{}' in public \
     .                                                           interface",
-- line 1738 ----------------------------------------
-- line 1740 ----------------------------------------
     .                                   descr,
     .                                   self.tcx.crate_name(def_id.krate)
     .                               ))
     .                               .emit()
     .                           },
     .                       );
     .                   }
     .           
   118 ( 0.00%)          let hir_id = match def_id.as_local() {
    23 ( 0.00%)              Some(def_id) => self.tcx.hir().local_def_id_to_hir_id(def_id),
     .                       None => return false,
     .                   };
     .           
     .                   let vis = self.tcx.visibility(def_id);
    24 ( 0.00%)          if !vis.is_at_least(self.required_visibility, self.tcx) {
     .                       let vis_descr = match vis {
     .                           ty::Visibility::Public => "public",
     .                           ty::Visibility::Invisible => "private",
     .                           ty::Visibility::Restricted(vis_def_id) => {
     .                               if vis_def_id == self.tcx.parent_module(hir_id).to_def_id() {
     .                                   "private"
     .                               } else if vis_def_id.is_top_level_module() {
     .                                   "crate-private"
-- line 1762 ----------------------------------------
-- line 1792 ----------------------------------------
     .                   false
     .               }
     .           
     .               /// An item is 'leaked' from a private dependency if all
     .               /// of the following are true:
     .               /// 1. It's contained within a public type
     .               /// 2. It comes from a private crate
     .               fn leaks_private_dep(&self, item_id: DefId) -> bool {
   216 ( 0.00%)          let ret = self.required_visibility.is_public() && self.tcx.is_private_dep(item_id.krate);
     .           
     .                   tracing::debug!("leaks_private_dep(item_id={:?})={}", item_id, ret);
     .                   ret
     .               }
     .           }
     .           
     .           impl<'tcx> DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {
     .               fn tcx(&self) -> TyCtxt<'tcx> {
   105 ( 0.00%)          self.tcx
     .               }
 1,152 ( 0.00%)      fn visit_def_id(
     .                   &mut self,
     .                   def_id: DefId,
     .                   kind: &str,
     .                   descr: &dyn fmt::Display,
     .               ) -> ControlFlow<Self::BreakTy> {
     .                   if self.check_def_id(def_id, kind, descr) {
     .                       ControlFlow::BREAK
     .                   } else {
     .                       ControlFlow::CONTINUE
     .                   }
   648 ( 0.00%)      }
     .           }
     .           
     .           struct PrivateItemsInPublicInterfacesVisitor<'tcx> {
     .               tcx: TyCtxt<'tcx>,
     .               has_pub_restricted: bool,
     .               old_error_set_ancestry: LocalDefIdSet,
     .           }
     .           
     .           impl<'tcx> PrivateItemsInPublicInterfacesVisitor<'tcx> {
     .               fn check(
     .                   &self,
     .                   def_id: LocalDefId,
     .                   required_visibility: ty::Visibility,
     .               ) -> SearchInterfaceForPrivateItemsVisitor<'tcx> {
   175 ( 0.00%)          SearchInterfaceForPrivateItemsVisitor {
    16 ( 0.00%)              tcx: self.tcx,
     .                       item_def_id: def_id,
     .                       required_visibility,
    31 ( 0.00%)              has_pub_restricted: self.has_pub_restricted,
     .                       has_old_errors: self.old_error_set_ancestry.contains(&def_id),
     .                       in_assoc_ty: false,
     .                   }
     .               }
     .           
    91 ( 0.00%)      fn check_assoc_item(
     .                   &self,
     .                   def_id: LocalDefId,
     .                   assoc_item_kind: AssocItemKind,
     .                   defaultness: hir::Defaultness,
     .                   vis: ty::Visibility,
     .               ) {
     .                   let mut check = self.check(def_id, vis);
     .           
    14 ( 0.00%)          let (check_ty, is_assoc_ty) = match assoc_item_kind {
     .                       AssocItemKind::Const | AssocItemKind::Fn { .. } => (true, false),
     .                       AssocItemKind::Type => (defaultness.has_value(), true),
     .                   };
    14 ( 0.00%)          check.in_assoc_ty = is_assoc_ty;
    28 ( 0.00%)          check.generics().predicates();
     .                   if check_ty {
     7 ( 0.00%)              check.ty();
     .                   }
    56 ( 0.00%)      }
     .           }
     .           
     .           impl<'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'tcx> {
     .               type NestedFilter = nested_filter::OnlyBodies;
     .           
     .               fn nested_visit_map(&mut self) -> Self::Map {
    10 ( 0.00%)          self.tcx.hir()
     .               }
     .           
   306 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    34 ( 0.00%)          let tcx = self.tcx;
    34 ( 0.00%)          let item_visibility = tcx.visibility(item.def_id);
     .           
   170 ( 0.00%)          match item.kind {
     .                       // Crates are always public.
     .                       hir::ItemKind::ExternCrate(..) => {}
     .                       // All nested items are checked by `visit_item`.
     .                       hir::ItemKind::Mod(..) => {}
     .                       // Checked in resolve.
     .                       hir::ItemKind::Use(..) => {}
     .                       // No subitems.
     .                       hir::ItemKind::Macro(..) | hir::ItemKind::GlobalAsm(..) => {}
     .                       // Subitems of these items have inherited publicity.
     .                       hir::ItemKind::Const(..)
     .                       | hir::ItemKind::Static(..)
     .                       | hir::ItemKind::Fn(..)
     .                       | hir::ItemKind::TyAlias(..) => {
    18 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates().ty();
     .                       }
     .                       hir::ItemKind::OpaqueTy(..) => {
     .                           // `ty()` for opaque types is the underlying type,
     .                           // it's not a part of interface, so we skip it.
     .                           self.check(item.def_id, item_visibility).generics().bounds();
     .                       }
     .                       hir::ItemKind::Trait(.., trait_item_refs) => {
     .                           self.check(item.def_id, item_visibility).generics().predicates();
-- line 1901 ----------------------------------------
-- line 1929 ----------------------------------------
     .                       hir::ItemKind::ForeignMod { items, .. } => {
     .                           for foreign_item in items {
     .                               let vis = tcx.visibility(foreign_item.id.def_id);
     .                               self.check(foreign_item.id.def_id, vis).generics().predicates().ty();
     .                           }
     .                       }
     .                       // Subitems of structs and unions have their own publicity.
     .                       hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {
     8 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
     .           
     6 ( 0.00%)                  for field in struct_def.fields() {
    54 ( 0.00%)                      let def_id = tcx.hir().local_def_id(field.hir_id);
     .                               let field_visibility = tcx.visibility(def_id);
    27 ( 0.00%)                      self.check(def_id, min(item_visibility, field_visibility, tcx)).ty();
     .                           }
     .                       }
     .                       // An inherent impl is public when its type is public
     .                       // Subitems of inherent impls have their own publicity.
     .                       // A trait impl is public when both its type and its trait are public
     .                       // Subitems of trait impls have inherited publicity.
     .                       hir::ItemKind::Impl(ref impl_) => {
    16 ( 0.00%)                  let impl_vis = ty::Visibility::of_impl(item.def_id, tcx, &Default::default());
     .                           // check that private components do not appear in the generics or predicates of inherent impls
     .                           // this check is intentionally NOT performed for impls of traits, per #90586
     8 ( 0.00%)                  if impl_.of_trait.is_none() {
     5 ( 0.00%)                      self.check(item.def_id, impl_vis).generics().predicates();
     .                           }
     4 ( 0.00%)                  for impl_item_ref in impl_.items {
     7 ( 0.00%)                      let impl_item_vis = if impl_.of_trait.is_none() {
     2 ( 0.00%)                          min(tcx.visibility(impl_item_ref.id.def_id), impl_vis, tcx)
     .                               } else {
     .                                   impl_vis
     .                               };
    40 ( 0.00%)                      self.check_assoc_item(
     7 ( 0.00%)                          impl_item_ref.id.def_id,
     .                                   impl_item_ref.kind,
     .                                   impl_item_ref.defaultness,
     .                                   impl_item_vis,
     .                               );
     .                           }
     .                       }
     .                   }
   272 ( 0.00%)      }
     .           }
     .           
     .           pub fn provide(providers: &mut Providers) {
     8 ( 0.00%)      *providers = Providers {
     .                   visibility,
     .                   privacy_access_levels,
     .                   check_private_in_public,
     .                   check_mod_privacy,
     .                   ..*providers
     .               };
     1 ( 0.00%)  }
     .           
   513 ( 0.00%)  fn visibility(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Visibility {
    57 ( 0.00%)      let def_id = def_id.expect_local();
     .               match tcx.resolutions(()).visibilities.get(&def_id) {
    68 ( 0.00%)          Some(vis) => *vis,
     .                   None => {
     .                       let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);
   290 ( 0.00%)              match tcx.hir().get(hir_id) {
     .                           // Unique types created for closures participate in type privacy checking.
     .                           // They have visibilities inherited from the module they are defined in.
     .                           Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => {
    36 ( 0.00%)                      ty::Visibility::Restricted(tcx.parent_module(hir_id).to_def_id())
     .                           }
     .                           // - AST lowering may clone `use` items and the clones don't
     .                           //   get their entries in the resolver's visibility table.
     .                           // - AST lowering also creates opaque type items with inherited visibilies.
     .                           //   Visibility on them should have no effect, but to avoid the visibility
     .                           //   query failing on some items, we provide it for opaque types as well.
     .                           Node::Item(hir::Item {
    12 ( 0.00%)                      vis,
     .                               kind: hir::ItemKind::Use(..) | hir::ItemKind::OpaqueTy(..),
     .                               ..
    72 ( 0.00%)                  }) => ty::Visibility::from_hir(vis, hir_id, tcx),
     .                           // Visibilities of trait impl items are inherited from their traits
     .                           // and are not filled in resolve.
     .                           Node::ImplItem(impl_item) => {
    65 ( 0.00%)                      match tcx.hir().get_by_def_id(tcx.hir().get_parent_item(hir_id)) {
     .                                   Node::Item(hir::Item {
     .                                       kind: hir::ItemKind::Impl(hir::Impl { of_trait: Some(tr), .. }),
     .                                       ..
     5 ( 0.00%)                          }) => tr.path.res.opt_def_id().map_or_else(
     .                                       || {
     .                                           tcx.sess.delay_span_bug(tr.path.span, "trait without a def-id");
     .                                           ty::Visibility::Public
     .                                       },
     .                                       |def_id| tcx.visibility(def_id),
     .                                   ),
     .                                   _ => span_bug!(impl_item.span, "the parent is not a trait impl"),
     .                               }
-- line 2021 ----------------------------------------
-- line 2023 ----------------------------------------
     .                           _ => span_bug!(
     .                               tcx.def_span(def_id),
     .                               "visibility table unexpectedly missing a def-id: {:?}",
     .                               def_id,
     .                           ),
     .                       }
     .                   }
     .               }
   456 ( 0.00%)  }
     .           
     8 ( 0.00%)  fn check_mod_privacy(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {
     .               // Check privacy of names not checked in previous compilation stages.
     .               let mut visitor =
     4 ( 0.00%)          NamePrivacyVisitor { tcx, maybe_typeck_results: None, current_item: module_def_id };
     9 ( 0.00%)      let (module, span, hir_id) = tcx.hir().get_module(module_def_id);
     .           
     .               intravisit::walk_mod(&mut visitor, module, hir_id);
     .           
     .               // Check privacy of explicitly written types and traits as well as
     .               // inferred types of expressions and patterns.
     .               let mut visitor =
     6 ( 0.00%)          TypePrivacyVisitor { tcx, maybe_typeck_results: None, current_item: module_def_id, span };
     .               intravisit::walk_mod(&mut visitor, module, hir_id);
     8 ( 0.00%)  }
     .           
     7 ( 0.00%)  fn privacy_access_levels(tcx: TyCtxt<'_>, (): ()) -> &AccessLevels {
     .               // Build up a set of all exported items in the AST. This is a set of all
     .               // items which are reachable from external crates based on visibility.
     9 ( 0.00%)      let mut visitor = EmbargoVisitor {
     .                   tcx,
     .                   access_levels: tcx.resolutions(()).access_levels.clone(),
     .                   macro_reachable: Default::default(),
     .                   prev_level: Some(AccessLevel::Public),
     .                   changed: false,
     .               };
     .           
     .               loop {
     .                   tcx.hir().walk_toplevel_module(&mut visitor);
     2 ( 0.00%)          if visitor.changed {
     .                       visitor.changed = false;
     .                   } else {
     .                       break;
     .                   }
     .               }
     .           
     1 ( 0.00%)      tcx.arena.alloc(visitor.access_levels)
     9 ( 0.00%)  }
     .           
     8 ( 0.00%)  fn check_private_in_public(tcx: TyCtxt<'_>, (): ()) {
     .               let access_levels = tcx.privacy_access_levels(());
     .           
     9 ( 0.00%)      let mut visitor = ObsoleteVisiblePrivateTypesVisitor {
     .                   tcx,
     .                   access_levels,
     .                   in_variant: false,
     .                   old_error_set: Default::default(),
     .               };
     .               tcx.hir().walk_toplevel_module(&mut visitor);
     .           
     .               let has_pub_restricted = {
     5 ( 0.00%)          let mut pub_restricted_visitor = PubRestrictedVisitor { tcx, has_pub_restricted: false };
     .                   tcx.hir().walk_toplevel_module(&mut pub_restricted_visitor);
     1 ( 0.00%)          pub_restricted_visitor.has_pub_restricted
     .               };
     .           
     .               let mut old_error_set_ancestry = HirIdSet::default();
     9 ( 0.00%)      for mut id in visitor.old_error_set.iter().copied() {
     .                   loop {
     .                       if !old_error_set_ancestry.insert(id) {
     .                           break;
     .                       }
     .                       let parent = tcx.hir().get_parent_node(id);
     .                       if parent == id {
     .                           break;
     .                       }
     .                       id = parent;
     .                   }
     .               }
     .           
     .               // Check for private types and traits in public interfaces.
     8 ( 0.00%)      let mut visitor = PrivateItemsInPublicInterfacesVisitor {
     .                   tcx,
     .                   has_pub_restricted,
     .                   // Only definition IDs are ever searched in `old_error_set_ancestry`,
     .                   // so we can filter away all non-definition IDs at this point.
     .                   old_error_set_ancestry: old_error_set_ancestry
     .                       .into_iter()
     .                       .filter_map(|hir_id| tcx.hir().opt_local_def_id(hir_id))
     .                       .collect(),
     .               };
     6 ( 0.00%)      tcx.hir().visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));
     8 ( 0.00%)  }

22,692 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
   56,335 ( 0.02%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       13 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,268 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    3,195 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
        2 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
        8 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    2,556 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
        2 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        1 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
        3 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    6,511 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    7,656 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        .               QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
-- line 281 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
        7 ( 0.00%)      fn from(p: PathBuf) -> Self {
        2 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
        6 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
        7 ( 0.00%)      }
        .           }
        .           
        2 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
        4 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
        6 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
        6 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
        5 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        8 ( 0.00%)      pub fn to_string_lossy(&self) -> Cow<'_, str> {
        6 ( 0.00%)          match self.inner {
        2 ( 0.00%)              FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        8 ( 0.00%)      }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,284 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
        .                       | DocTest(_, _)
        .                       | InlineAsm(_) => false,
        .                   }
        .               }
        .           
        2 ( 0.00%)      pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
        4 ( 0.00%)      }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        1 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
        2 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
        1 ( 0.00%)      pub lo: BytePos,
        1 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
        3 ( 0.00%)      pub ctxt: SyntaxContext,
        1 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
   14,607 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
       81 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
    8,664 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
    6,498 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
    8,664 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
    8,766 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
    5,844 ( 0.00%)      }
        .               #[inline]
      540 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
      540 ( 0.00%)      }
        .               #[inline]
    1,512 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
    1,008 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
      430 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
      258 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
       27 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
       18 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
      243 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
      162 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 663 ----------------------------------------
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
        .               pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
        .               }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
      270 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
      135 ( 0.00%)          while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
      297 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
    1,440 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
      960 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
      282 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
      206 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
      290 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
      350 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
       70 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
      280 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
    1,596 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
    1,368 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
    1,140 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
       10 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
       12 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
        4 ( 0.00%)      pub fn allows_unsafe(self) -> bool {
        1 ( 0.00%)          self.ctxt().outer_expn_data().allow_internal_unsafe
        4 ( 0.00%)      }
        .           
        .               pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
        .                   let mut prev_span = DUMMY_SP;
        .                   std::iter::from_fn(move || {
        .                       loop {
        .                           let expn_data = self.ctxt().outer_expn_data();
        .                           if expn_data.is_root() {
        .                               return None;
-- line 752 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
   22,902 ( 0.01%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
    4,101 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
       63 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
       42 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
   14,133 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
   18,738 ( 0.01%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
       44 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
       28 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
       32 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
       99 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
       18 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
       63 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
       81 ( 0.00%)      }
        .           
      165 ( 0.00%)      pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
      105 ( 0.00%)      }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
      332 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
        2 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
    2,004 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
    1,169 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
    3,762 ( 0.00%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.remove_mark();
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
    4,923 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
    3,282 ( 0.00%)          let mut span = self.data();
    2,725 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
    4,923 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
    5,460 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
       74 ( 0.00%)          let mut span = self.data();
      111 ( 0.00%)          let mark = span.ctxt.glob_adjust(expn_id, glob_span);
      296 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
       36 ( 0.00%)      pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
       32 ( 0.00%)          let mut span = self.data();
       36 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
       68 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
       40 ( 0.00%)      }
        .           
        .               #[inline]
    2,904 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
    2,541 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
       50 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
        .                   MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
        3 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        .               }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
       50 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
       50 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
        .               fn from(spans: Vec<Span>) -> MultiSpan {
        .                   MultiSpan::from_spans(spans)
        .               }
        .           }
        .           
-- line 1157 ----------------------------------------
-- line 1160 ----------------------------------------
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      310 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      536 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      155 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      536 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      465 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
        3 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
      216 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,282 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
        6 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,564 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        .                   let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
        3 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
        3 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
       58 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        1 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        1 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        1 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
        4 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
        2 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
        2 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
        3 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       11 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    5,769 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      641 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  972,474 ( 0.42%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,282 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    7,051 ( 0.00%)              SourceFile {
    5,128 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,564 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,564 ( 0.00%)                  lines,
    2,564 ( 0.00%)                  multibyte_chars,
    2,564 ( 0.00%)                  non_narrow_chars,
    2,564 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    5,769 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
       11 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
        3 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
        2 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
        2 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
        3 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
       12 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
        2 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
       17 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
       11 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
        4 ( 0.00%)              lines,
        4 ( 0.00%)              multibyte_chars,
        4 ( 0.00%)              non_narrow_chars,
        4 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
        9 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
      140 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
       20 ( 0.00%)          if matches!(
       40 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        .                       let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        .                       if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
       20 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
      180 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      642 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
      845 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
    1,008 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
    2,186 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
    1,410 ( 0.00%)          assert!(line_index < self.lines.len());
    2,040 ( 0.00%)          if line_index == (self.lines.len() - 1) {
       13 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
    1,350 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
       10 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
       30 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
        .                       if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
       60 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
       50 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
       20 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
       35 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
       10 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
        4 ( 0.00%)          match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
        5 ( 0.00%)                  let linebpos = self.lines[a];
       10 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
        5 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
       40 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
       40 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
       15 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
       10 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
        5 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
       25 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
       35 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
       10 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
        9 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        1 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        1 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
    4,609 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
      238 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
    5,002 ( 0.00%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,716,691 ( 0.74%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
  918,925 ( 0.40%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
   88,976 ( 0.04%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2042 ----------------------------------------
        .           /// Range inside of a `Span` used for diagnostics when we only have access to relative positions.
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           pub struct InnerSpan {
        .               pub start: usize,
        .               pub end: usize,
        .           }
        .           
        .           impl InnerSpan {
       84 ( 0.00%)      pub fn new(start: usize, end: usize) -> InnerSpan {
        .                   InnerSpan { start, end }
       42 ( 0.00%)      }
        .           }
        .           
        .           /// Requirements for a `StableHashingContext` to be used in this crate.
        .           ///
        .           /// This is a hack to allow using the [`HashStable_Generic`] derive macro
        .           /// instead of implementing everything in rustc_middle.
        .           pub trait HashStableContext {
        .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash;
-- line 2060 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
   28,252 ( 0.01%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
    4,722 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
   23,530 ( 0.01%)          let span = self.data_untracked();
   10,050 ( 0.00%)          span.ctxt.hash_stable(ctx, hasher);
   12,108 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
    8,242 ( 0.00%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
    7,732 ( 0.00%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
   15,464 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
    7,732 ( 0.00%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
    3,866 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
    3,866 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
   32,288 ( 0.01%)      }
        .           }

1,342,538 ( 0.58%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir               

-- line 118 ----------------------------------------
      .               stability: InternedSet<'tcx, attr::Stability>,
      .           
      .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
      .               const_stability: InternedSet<'tcx, attr::ConstStability>,
      .           }
      .           
      .           impl<'tcx> CtxtInterners<'tcx> {
      .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
     17 ( 0.00%)          CtxtInterners {
      .                       arena,
      .                       type_: Default::default(),
      .                       type_list: Default::default(),
      .                       substs: Default::default(),
      .                       region: Default::default(),
      .                       poly_existential_predicates: Default::default(),
      .                       canonical_var_infos: Default::default(),
      .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
      .                       stability: Default::default(),
      .                       const_stability: Default::default(),
      .                   }
      .               }
      .           
      .               /// Interns a type.
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline(never)]
213,696 ( 0.09%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
      .                   self.type_
133,560 ( 0.06%)              .intern(kind, |kind| {
 16,768 ( 0.01%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
      .           
      .                           let ty_struct = TyS {
 33,536 ( 0.01%)                      kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(ty_struct))
      .                       })
      .                       .0
240,408 ( 0.10%)      }
      .           
      .               #[inline(never)]
 66,360 ( 0.03%)      fn intern_predicate(
      .                   &self,
      .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> &'tcx PredicateInner<'tcx> {
      .                   self.predicate
 58,065 ( 0.03%)              .intern(kind, |kind| {
 24,780 ( 0.01%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
      .           
      .                           let predicate_struct = PredicateInner {
      .                               kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(predicate_struct))
      .                       })
      .                       .0
 74,655 ( 0.03%)      }
      .           }
      .           
      .           pub struct CommonTypes<'tcx> {
      .               pub unit: Ty<'tcx>,
      .               pub bool: Ty<'tcx>,
      .               pub char: Ty<'tcx>,
      .               pub isize: Ty<'tcx>,
      .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
      .           /// safely used as a key in the maps of a TypeckResults. For that to be
      .           /// the case, the HirId must have the same `owner` as all the other IDs in
      .           /// this table (signified by `hir_owner`). Otherwise the HirId
      .           /// would be in a different frame of reference and using its `local_id`
      .           /// would result in lookup errors, or worse, in silently wrong data being
      .           /// stored/returned.
      .           #[inline]
      .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
 22,104 ( 0.01%)      if hir_id.owner != hir_owner {
      .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
      .               }
      .           }
      .           
      .           #[cold]
      .           #[inline(never)]
      .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
      .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
      .           }
      .           
      .           impl<'a, V> LocalTableInContext<'a, V> {
      .               pub fn contains_key(&self, id: hir::HirId) -> bool {
      .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.data.contains_key(&id.local_id)
      .               }
      .           
 16,070 ( 0.01%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
  3,187 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
  3,187 ( 0.00%)          self.data.get(&id.local_id)
 12,898 ( 0.01%)      }
      .           
      .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
      .                   self.data.iter()
      .               }
      .           }
      .           
      .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
      .               type Output = V;
      .           
     90 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
      .                   self.get(key).expect("LocalTableInContext: key not found")
     60 ( 0.00%)      }
      .           }
      .           
      .           pub struct LocalTableInContextMut<'a, V> {
      .               hir_owner: LocalDefId,
      .               data: &'a mut ItemLocalMap<V>,
      .           }
      .           
      .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
      .               pub treat_byte_string_as_slice: ItemLocalSet,
      .           
      .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
      .               /// on closure size.
      .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
      .           }
      .           
      .           impl<'tcx> TypeckResults<'tcx> {
    216 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
  2,556 ( 0.00%)          TypeckResults {
      .                       hir_owner,
      .                       type_dependent_defs: Default::default(),
      .                       field_indices: Default::default(),
      .                       user_provided_types: Default::default(),
      .                       user_provided_sigs: Default::default(),
      .                       node_types: Default::default(),
      .                       node_substs: Default::default(),
      .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
      .                       tainted_by_errors: None,
      .                       concrete_opaque_types: Default::default(),
      .                       closure_min_captures: Default::default(),
      .                       closure_fake_reads: Default::default(),
      .                       generator_interior_types: ty::Binder::dummy(Default::default()),
      .                       treat_byte_string_as_slice: Default::default(),
      .                       closure_size_eval: Default::default(),
      .                   }
    216 ( 0.00%)      }
      .           
      .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
  3,849 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
  2,566 ( 0.00%)          match *qpath {
  4,674 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
      .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
      .                           .type_dependent_def(id)
  3,024 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
      .                   }
  6,415 ( 0.00%)      }
      .           
     40 ( 0.00%)      pub fn type_dependent_defs(
      .                   &self,
      .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    185 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
     40 ( 0.00%)      }
      .           
    645 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
  1,357 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
  1,290 ( 0.00%)      }
      .           
    832 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
      .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    832 ( 0.00%)      }
      .           
  1,470 ( 0.00%)      pub fn type_dependent_defs_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
  1,470 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
  1,470 ( 0.00%)      }
      .           
      .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
    366 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
     69 ( 0.00%)      }
      .           
      .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    432 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
    216 ( 0.00%)      }
      .           
      .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    690 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    345 ( 0.00%)      }
      .           
      .               pub fn user_provided_types_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
    144 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
     72 ( 0.00%)      }
      .           
      .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
  2,720 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
  1,360 ( 0.00%)      }
      .           
      .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
  4,820 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
  2,410 ( 0.00%)      }
      .           
 24,168 ( 0.01%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
  4,028 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
      .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
      .                   })
 20,140 ( 0.01%)      }
      .           
  5,191 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
  5,191 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_types.get(&id.local_id).cloned()
 10,382 ( 0.00%)      }
      .           
      .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    560 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    280 ( 0.00%)      }
      .           
  1,691 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
  1,691 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
  3,382 ( 0.00%)      }
      .           
  1,044 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
  1,044 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned()
  2,088 ( 0.00%)      }
      .           
      .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
      .               // doesn't provide type parameter substitutions.
      .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    716 ( 0.00%)          self.node_type(pat.hir_id)
      .               }
      .           
      .               // Returns the type of an expression as a monotype.
      .               //
      .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
      .               // some cases, we insert `Adjustment` annotations such as auto-deref or
      .               // auto-ref.  The type returned by this function does not consider such
      .               // adjustments.  See `expr_ty_adjusted()` instead.
      .               //
      .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
      .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
      .               // instead of "fn(ty) -> T with T = isize".
      .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
  4,676 ( 0.00%)          self.node_type(expr.hir_id)
      .               }
      .           
      .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
  4,348 ( 0.00%)          self.node_type_opt(expr.hir_id)
      .               }
      .           
      .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  2,198 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
  1,099 ( 0.00%)      }
      .           
      .               pub fn adjustments_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  3,082 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
  1,541 ( 0.00%)      }
      .           
  1,954 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
  3,908 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
      .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
  3,908 ( 0.00%)      }
      .           
      .               /// Returns the type of `expr`, considering any `Adjustment`
      .               /// entry recorded for that expression.
    250 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
     50 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
     88 ( 0.00%)      }
      .           
     90 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
     18 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
     56 ( 0.00%)      }
      .           
    145 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
      .                   // Only paths and method calls/overloaded operators have
      .                   // entries in type_dependent_defs, ignore the former here.
    290 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
      .                       return false;
      .                   }
      .           
    382 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    290 ( 0.00%)      }
      .           
    954 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
      .                   self.pat_binding_modes().get(id).copied().or_else(|| {
      .                       s.delay_span_bug(sp, "missing binding mode");
      .                       None
      .                   })
  1,272 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
    860 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    271 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    412 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    206 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
  1,154 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    577 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    334 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
    167 ( 0.00%)      }
      .           
      .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
      .               /// by the closure.
    208 ( 0.00%)      pub fn closure_min_captures_flattened(
      .                   &self,
      .                   closure_def_id: DefId,
      .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
      .                   self.closure_min_captures
      .                       .get(&closure_def_id)
      .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
      .                       .into_iter()
      .                       .flatten()
    260 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
     20 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
     10 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
      .               }
      .           
      .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
     80 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
     40 ( 0.00%)      }
      .           
      .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
     60 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
     30 ( 0.00%)      }
      .           
      .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
     20 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
     10 ( 0.00%)      }
      .           
      .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
      .               }
      .           
      .               pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
      .                   validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
      .                   self.coercion_casts.contains(&hir_id.local_id)
      .               }
      .           
      .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
      .                   self.coercion_casts.insert(id);
      .               }
      .           
      .               pub fn coercion_casts(&self) -> &ItemLocalSet {
     10 ( 0.00%)          &self.coercion_casts
     10 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
      .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
      .                   let ty::TypeckResults {
      .                       hir_owner,
      .                       ref type_dependent_defs,
      .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
      .                   const START_INDEX = 0,
      .               }
      .           }
      .           
      .           /// Mapping of type annotation indices to canonical user type annotations.
      .           pub type CanonicalUserTypeAnnotations<'tcx> =
      .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
      .           
     70 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
      .           pub struct CanonicalUserTypeAnnotation<'tcx> {
      .               pub user_ty: CanonicalUserType<'tcx>,
      .               pub span: Span,
     36 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
      .           }
      .           
      .           /// Canonicalized user type annotation.
      .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
      .           
      .           impl<'tcx> CanonicalUserType<'tcx> {
      .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
      .               /// i.e., each thing is mapped to a canonical variable with the same index.
    135 ( 0.00%)      pub fn is_identity(&self) -> bool {
    270 ( 0.00%)          match self.value {
      .                       UserType::Ty(_) => false,
      .                       UserType::TypeOf(_, user_substs) => {
    135 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
      .                               return false;
      .                           }
      .           
      .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
      .                               match kind.unpack() {
    314 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
      .                                       ty::Bound(debruijn, b) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
    157 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
      .                                           cvar == b.var
      .                                       }
      .                                       _ => false,
      .                                   },
      .           
     14 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
      .                                       ty::ReLateBound(debruijn, br) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
      .                                           assert_eq!(*debruijn, ty::INNERMOST);
      .                                           cvar == br.var
      .                                       }
      .                                       _ => false,
      .                                   },
      .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
      .                                           cvar == b
      .                                       }
      .                                       _ => false,
      .                                   },
      .                               }
      .                           })
      .                       }
      .                   }
    270 ( 0.00%)      }
      .           }
      .           
      .           /// A user-given type annotation attached to a constant. These arise
      .           /// from constants that are named via paths, like `Foo::<A>::new` and
      .           /// so forth.
    216 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
  1,645 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
      .           pub enum UserType<'tcx> {
      .               Ty(Ty<'tcx>),
      .           
      .               /// The canonical type is the result of `type_of(def_id)` with the
      .               /// given substitutions applied.
      .               TypeOf(DefId, UserSubsts<'tcx>),
      .           }
      .           
      .           impl<'tcx> CommonTypes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
    111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
      .           
      .                   CommonTypes {
      .                       unit: mk(Tuple(List::empty())),
      .                       bool: mk(Bool),
      .                       char: mk(Char),
      .                       never: mk(Never),
      .                       isize: mk(Int(ty::IntTy::Isize)),
      .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
      .           
      .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonLifetimes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
     67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
      .           
      .                   CommonLifetimes {
      5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
      5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
      5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonConsts<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
      6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
      .           
      .                   CommonConsts {
      .                       unit: mk_const(ty::Const {
      .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
      .                           ty: types.unit,
      .                       }),
      .                   }
      .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
      .           
      .               /// Stores memory for globals (statics/consts).
      .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
      .           
      .               output_filenames: Arc<OutputFilenames>,
      .           }
      .           
      .           impl<'tcx> TyCtxt<'tcx> {
    660 ( 0.00%)      pub fn typeck_opt_const_arg(
      .                   self,
      .                   def: ty::WithOptConstParam<LocalDefId>,
      .               ) -> &'tcx TypeckResults<'tcx> {
    264 ( 0.00%)          if let Some(param_did) = def.const_param_did {
      .                       self.typeck_const_arg((def.did, param_did))
      .                   } else {
      .                       self.typeck(def.did)
      .                   }
    528 ( 0.00%)      }
      .           
     48 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
     16 ( 0.00%)          self.arena.alloc(Steal::new(thir))
     64 ( 0.00%)      }
      .           
    245 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
     49 ( 0.00%)          self.arena.alloc(Steal::new(mir))
    343 ( 0.00%)      }
      .           
     64 ( 0.00%)      pub fn alloc_steal_promoted(
      .                   self,
      .                   promoted: IndexVec<Promoted, Body<'tcx>>,
      .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
     16 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
     80 ( 0.00%)      }
      .           
    639 ( 0.00%)      pub fn alloc_adt_def(
      .                   self,
      .                   did: DefId,
      .                   kind: AdtKind,
      .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
      .                   repr: ReprOptions,
      .               ) -> &'tcx ty::AdtDef {
  1,136 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
    284 ( 0.00%)      }
      .           
      .               /// Allocates a read-only byte or string literal for `mir::interpret`.
      .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
      .                   // Create an allocation that just contains these bytes.
      .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
      .                   let alloc = self.intern_const_alloc(alloc);
      .                   self.create_memory_alloc(alloc)
      .               }
      .           
      .               /// Returns a range of the start/end indices specified with the
      .               /// `rustc_layout_scalar_valid_range` attribute.
      .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
    384 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    192 ( 0.00%)          let attrs = self.get_attrs(def_id);
    816 ( 0.00%)          let get = |name| {
    192 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
      .                           Some(attr) => attr,
      .                           None => return Bound::Unbounded,
      .                       };
      .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
      .                       if let Some(
      .                           &[
      .                               ast::NestedMetaItem::Literal(ast::Lit {
      .                                   kind: ast::LitKind::Int(a, _), ..
-- line 1111 ----------------------------------------
-- line 1114 ----------------------------------------
      .                       ) = attr.meta_item_list().as_deref()
      .                       {
      .                           Bound::Included(a)
      .                       } else {
      .                           self.sess
      .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
      .                           Bound::Unbounded
      .                       }
    960 ( 0.00%)          };
    288 ( 0.00%)          (
    288 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    144 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
      .                   )
    384 ( 0.00%)      }
      .           
      .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
      .                   value.lift_to_tcx(self)
      .               }
      .           
      .               /// Creates a type context and call the closure with a `TyCtxt` reference
      .               /// to the context. The closure enforces that the type context and any interned
      .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
      .               /// reference to the context, to allow formatting values that need it.
     23 ( 0.00%)      pub fn create_global_ctxt(
      .                   s: &'tcx Session,
      .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
      .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
      .                   resolutions: ty::ResolverOutputs,
      .                   krate: &'tcx hir::Crate<'tcx>,
      .                   dep_graph: DepGraph,
      .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
      .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
      .                   query_kinds: &'tcx [DepKindStruct],
      .                   crate_name: &str,
      .                   output_filenames: OutputFilenames,
      .               ) -> GlobalCtxt<'tcx> {
      1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
      .                       s.fatal(&err);
      .                   });
      .                   let interners = CtxtInterners::new(arena);
      .                   let common_types = CommonTypes::new(&interners);
      .                   let common_lifetimes = CommonLifetimes::new(&interners);
      .                   let common_consts = CommonConsts::new(&interners, &common_types);
      .           
    127 ( 0.00%)          GlobalCtxt {
      .                       sess: s,
      6 ( 0.00%)              lint_store,
      .                       arena,
      2 ( 0.00%)              interners,
      5 ( 0.00%)              dep_graph,
      4 ( 0.00%)              untracked_resolutions: resolutions,
      2 ( 0.00%)              prof: s.prof.clone(),
      .                       types: common_types,
      .                       lifetimes: common_lifetimes,
      .                       consts: common_consts,
      .                       untracked_crate: krate,
      .                       on_disk_cache,
      .                       queries,
      .                       query_caches: query::QueryCaches::default(),
      .                       query_kinds,
      .                       ty_rcache: Default::default(),
      .                       pred_rcache: Default::default(),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
      .                       data_layout,
      .                       alloc_map: Lock::new(interpret::AllocMap::new()),
      .                       output_filenames: Arc::new(output_filenames),
      .                   }
      9 ( 0.00%)      }
      .           
      .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
      .                   &self.query_kinds[k as usize]
      .               }
      .           
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
      .                   ty: Ty<'tcx>,
      .                   span: S,
      .                   msg: &str,
      .               ) -> &'tcx Const<'tcx> {
      .                   self.sess.delay_span_bug(span, msg);
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
      .               }
      .           
     14 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
      2 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
     16 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
     16 ( 0.00%)      }
      .           
      .               /// Obtain all lang items of this crate and all dependencies (recursively)
 66,388 ( 0.03%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
      .                   self.get_lang_items(())
 85,356 ( 0.04%)      }
      .           
      .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
      .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
      .               pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
      .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
      .               }
      .           
      .               /// Obtain the diagnostic item's name
  2,506 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
      .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
  2,864 ( 0.00%)      }
      .           
      .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
  3,073 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
      .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
  3,512 ( 0.00%)      }
      .           
    203 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
      .                   self.stability_index(())
    261 ( 0.00%)      }
      .           
 22,386 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
      .                   self.features_query(())
 25,584 ( 0.01%)      }
      .           
      .               pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
      .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
  1,273 ( 0.00%)          if let Some(id) = id.as_local() {
      .                       self.untracked_resolutions.definitions.def_key(id)
      .                   } else {
  1,198 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
      .                   }
      .               }
      .           
      .               /// Converts a `DefId` into its fully expanded `DefPath` (every
      .               /// `DefId` is really just an interned `DefPath`).
      .               ///
      .               /// Note that if `id` is not local to this crate, the result will
      .               ///  be a non-local `DefPath`.
-- line 1272 ----------------------------------------
-- line 1277 ----------------------------------------
      .                   } else {
      .                       self.untracked_resolutions.cstore.def_path(id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
      .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    129 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
      .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
      .                   } else {
     44 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
      .                   if crate_num == LOCAL_CRATE {
      .                       self.sess.local_stable_crate_id()
      .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
      .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
      .                       self.def_path(def_id).to_string_no_crate_verbose()
      .                   )
      .               }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
 18,966 ( 0.01%)          &*self.untracked_resolutions.cstore
  9,483 ( 0.00%)      }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
      .                   &self.untracked_resolutions.definitions
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      2 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
      9 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      .                   let resolutions = &self.gcx.untracked_resolutions;
      .                   StableHashingContext::ignore_spans(
      .                       self.sess,
      .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
      .               /// If `true`, we should use the MIR-based borrowck, but also
      .               /// fall back on the AST borrowck if the MIR-based one errors.
      .               pub fn migrate_borrowck(self) -> bool {
      .                   self.borrowck_mode().migrate()
      .               }
      .           
      .               /// What mode(s) of borrowck should we run? AST? MIR? both?
      .               /// (Also considers the `#![feature(nll)]` setting.)
     20 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
      .                   // Here are the main constraints we need to deal with:
      .                   //
      .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
      .                   //    synonymous with no `-Z borrowck=...` flag at all.
      .                   //
      .                   // 2. We want to allow developers on the Nightly channel
      .                   //    to opt back into the "hard error" mode for NLL,
      .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
      .                   //   errors. (To simplify the code here, it now even overrides
      .                   //   a user's attempt to specify `-Z borrowck=compare`, which
      .                   //   we arguably do not need anymore and should remove.)
      .                   //
      .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
      .                   //
      .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
      .           
     30 ( 0.00%)          if self.features().nll {
      .                       return BorrowckMode::Mir;
      .                   }
      .           
     10 ( 0.00%)          self.sess.opts.borrowck_mode
     40 ( 0.00%)      }
      .           
      .               /// If `true`, we should use lazy normalization for constants, otherwise
      .               /// we still evaluate them eagerly.
      .               #[inline]
      .               pub fn lazy_normalization(self) -> bool {
      .                   let features = self.features();
      .                   // Note: We only use lazy normalization for generic const expressions.
      .                   features.generic_const_exprs
-- line 1434 ----------------------------------------
-- line 1554 ----------------------------------------
      .                   self.mk_imm_ref(
      .                       self.lifetimes.re_static,
      .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
      .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
      .                   )
      .               }
      .           
      .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
     77 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
     56 ( 0.00%)          match self.def_kind(def_id) {
      .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
      .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
      .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
      .                       },
    126 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
      .                   }
     63 ( 0.00%)      }
      .           
      .               pub fn type_length_limit(self) -> Limit {
      .                   self.limits(()).type_length_limit
      .               }
      .           
 23,548 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
      .                   self.limits(()).recursion_limit
 26,912 ( 0.01%)      }
      .           
      .               pub fn move_size_limit(self) -> Limit {
      .                   self.limits(()).move_size_limit
      .               }
      .           
     21 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
      .                   self.limits(()).const_eval_limit
     24 ( 0.00%)      }
      .           
      .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
      .                   iter::once(LOCAL_CRATE)
      .                       .chain(self.crates(()).iter().copied())
      .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
      .               }
      .           }
      .           
-- line 1594 ----------------------------------------
-- line 1684 ----------------------------------------
      .               /// This is the implicit state of rustc. It contains the current
      .               /// `TyCtxt` and query. It is updated when creating a local interner or
      .               /// executing a new query. Whenever there's a `TyCtxt` value available
      .               /// you should also have access to an `ImplicitCtxt` through the functions
      .               /// in this module.
      .               #[derive(Clone)]
      .               pub struct ImplicitCtxt<'a, 'tcx> {
      .                   /// The current `TyCtxt`.
      1 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
      .           
      .                   /// The current query job, if any. This is updated by `JobOwner::start` in
      .                   /// `ty::query::plumbing` when executing a query.
      .                   pub query: Option<query::QueryJobId<DepKind>>,
      .           
      .                   /// Where to store diagnostics for the current query job, if any.
      .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
      .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
      .                   pub layout_depth: usize,
      .           
      .                   /// The current dep graph task. This is used to add dependencies to queries
      .                   /// when executing them.
      .                   pub task_deps: TaskDepsRef<'a>,
      .               }
      .           
      .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
      5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
      .                       let tcx = TyCtxt { gcx };
     25 ( 0.00%)              ImplicitCtxt {
      .                           tcx,
      .                           query: None,
      .                           diagnostics: None,
      .                           layout_depth: 0,
      .                           task_deps: TaskDepsRef::Ignore,
      .                       }
      5 ( 0.00%)          }
      .               }
      .           
      .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
      .               /// to `value` during the call to `f`. It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(parallel_compiler)]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
      .           
      .               /// Sets TLV to `value` during the call to `f`.
      .               /// It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
      .                   let old = get_tlv();
 12,510 ( 0.01%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
      .                   TLV.with(|tlv| tlv.set(value));
      .                   f()
      .               }
      .           
      .               /// Gets the pointer to the current `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
      .               }
      .           
      .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
      .               #[inline]
      .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
      .               {
      1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
      .               }
      .           
      .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
      .               #[inline]
      .               pub fn with_context_opt<F, R>(f: F) -> R
      .               where
      .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
      .               {
      .                   let context = get_tlv();
 54,537 ( 0.02%)          if context == 0 {
      .                       f(None)
      .                   } else {
      .                       // We could get an `ImplicitCtxt` pointer from another thread.
      .                       // Ensure that `ImplicitCtxt` is `Sync`.
      .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
      .           
      .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
      .                   }
-- line 1789 ----------------------------------------
-- line 1805 ----------------------------------------
      .               /// This will panic if you pass it a `TyCtxt` which is different from the current
      .               /// `ImplicitCtxt`'s `tcx` field.
      .               #[inline]
      .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
      .               {
      .                   with_context(|context| unsafe {
 26,976 ( 0.01%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
      .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
 26,908 ( 0.01%)              f(context)
      .                   })
      .               }
      .           
      .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
      .               /// Panics if there is no `ImplicitCtxt` available.
      .               #[inline]
      .               pub fn with<F, R>(f: F) -> R
      .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
      .               fn into_pointer(&self) -> *const () {
      .                   self.0 as *const _ as *const ()
      .               }
      .           }
      .           
      .           #[allow(rustc::usage_of_ty_tykind)]
      .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
 19,243 ( 0.01%)          &self.0.kind()
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
 42,996 ( 0.02%)          self.0.kind().hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
  4,602 ( 0.00%)          &self.0.kind
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  7,164 ( 0.00%)          self.0.kind.hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
      .               fn borrow<'a>(&'a self) -> &'a [T] {
 18,690 ( 0.01%)          &self.0[..]
      .               }
      .           }
      .           
      .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
      .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
      .           
      .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  9,212 ( 0.00%)          self.0[..].hash(s)
      .               }
      .           }
      .           
      .           macro_rules! direct_interners {
      .               ($($name:ident: $method:ident($ty:ty),)+) => {
      .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
      .                       fn borrow<'a>(&'a self) -> &'a $ty {
  7,383 ( 0.00%)                  &self.0
      .                       }
      .                   }
      .           
      .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
      .                       fn eq(&self, other: &Self) -> bool {
      .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
      .                           // equals `x == y`.
      .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
      .                   }
      .           
      .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
      .           
      .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
      .                       fn hash<H: Hasher>(&self, s: &mut H) {
      .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
      .                           // x.hash(s)`.
 12,484 ( 0.01%)                  self.0.hash(s)
      .                       }
      .                   }
      .           
      .                   impl<'tcx> TyCtxt<'tcx> {
 77,422 ( 0.03%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
 39,976 ( 0.02%)                  self.interners.$name.intern(v, |v| {
  2,418 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
      .                           }).0
 86,832 ( 0.04%)              }
      .                   })+
      .               }
      .           }
      .           
      .           direct_interners! {
      .               region: mk_region(RegionKind),
      .               const_: mk_const(Const<'tcx>),
      .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
      .               adt_def: intern_adt_def(AdtDef),
      .               stability: intern_stability(attr::Stability),
      .               const_stability: intern_const_stability(attr::ConstStability),
      .           }
      .           
      .           macro_rules! slice_interners {
      .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
      .                   impl<'tcx> TyCtxt<'tcx> {
251,875 ( 0.11%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
      .                           self.interners.$field.intern_ref(v, || {
      .                               Interned(List::from_arena(&*self.arena, v))
      .                           }).0
225,162 ( 0.10%)              })+
      .                   }
      .               );
      .           }
      .           
      .           slice_interners!(
      .               type_list: _intern_type_list(Ty<'tcx>),
      .               substs: _intern_substs(GenericArg<'tcx>),
      .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2188 ----------------------------------------
      .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
      .                   })
      .               }
      .           
      .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
      .               /// `*r == kind`.
      .               #[inline]
      .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
  9,664 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
      .               }
      .           
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline]
      .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
186,972 ( 0.08%)          self.interners.intern_ty(st)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
 90,132 ( 0.04%)          let inner = self.interners.intern_predicate(binder);
      .                   Predicate { inner }
      .               }
      .           
      .               #[inline]
 65,960 ( 0.03%)      pub fn reuse_or_mk_predicate(
      .                   self,
      .                   pred: Predicate<'tcx>,
      .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> Predicate<'tcx> {
  3,912 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
 65,960 ( 0.03%)      }
      .           
      .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
      .                   match tm {
      .                       IntTy::Isize => self.types.isize,
      .                       IntTy::I8 => self.types.i8,
      .                       IntTy::I16 => self.types.i16,
      .                       IntTy::I32 => self.types.i32,
      .                       IntTy::I64 => self.types.i64,
      .                       IntTy::I128 => self.types.i128,
      .                   }
      .               }
      .           
      .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
     25 ( 0.00%)          match tm {
      .                       UintTy::Usize => self.types.usize,
      .                       UintTy::U8 => self.types.u8,
      .                       UintTy::U16 => self.types.u16,
      .                       UintTy::U32 => self.types.u32,
      .                       UintTy::U64 => self.types.u64,
      .                       UintTy::U128 => self.types.u128,
      .                   }
     25 ( 0.00%)      }
      .           
      .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
      .                   match tm {
      .                       FloatTy::F32 => self.types.f32,
      .                       FloatTy::F64 => self.types.f64,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn mk_static_str(self) -> Ty<'tcx> {
    108 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   // Take a copy of substs so that we own the vectors inside.
      .                   self.mk_ty(Adt(def, substs))
      .               }
      .           
-- line 2259 ----------------------------------------
-- line 2329 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
      .               }
      .           
      .               #[inline]
    575 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
      .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
    600 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Slice(ty))
      .               }
      .           
      .               #[inline]
      .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
      8 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
     31 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
      .               }
      .           
      .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
    800 ( 0.00%)          iter.intern_with(|ts| {
    338 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
  2,546 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
    720 ( 0.00%)          })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_unit(self) -> Ty<'tcx> {
     46 ( 0.00%)          self.types.unit
      .               }
      .           
      .               #[inline]
      .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
      .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(FnDef(def_id, substs))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
    344 ( 0.00%)          self.mk_ty(FnPtr(fty))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_dynamic(
      .                   self,
      .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   reg: ty::Region<'tcx>,
      .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
      .                   self.mk_ty_infer(TyVar(v))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
      6 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
      .                   self.mk_ty_infer(IntVar(v))
      .               }
      .           
      .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
      .                   self.mk_ty(Param(ParamTy { index, name }))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
      .               }
      .           
    644 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
    460 ( 0.00%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
      .                           self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
      .                       }
    184 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
      .                       GenericParamDefKind::Const { .. } => {
      .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
      .                       }
      .                   }
    644 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Opaque(def_id, substs))
      .               }
      .           
      2 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
      2 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
      4 ( 0.00%)      }
      .           
      .               pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Deref)
      .               }
      .           
      .               pub fn mk_place_downcast(
      .                   self,
      .                   place: Place<'tcx>,
-- line 2480 ----------------------------------------
-- line 2497 ----------------------------------------
      .           
      .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Index(index))
      .               }
      .           
      .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
      .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
      .               /// flight.
     18 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
      .                   let mut projection = place.projection.to_vec();
      .                   projection.push(elem);
      .           
      .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
     20 ( 0.00%)      }
      .           
    742 ( 0.00%)      pub fn intern_poly_existential_predicates(
      .                   self,
      .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
    106 ( 0.00%)          assert!(!eps.is_empty());
      .                   assert!(
      .                       eps.array_windows()
    515 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
      .                               != Ordering::Greater)
      .                   );
    424 ( 0.00%)          self._intern_poly_existential_predicates(eps)
    848 ( 0.00%)      }
      .           
      .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
      .                   // FIXME consider asking the input slice to be sorted to avoid
      .                   // re-interning permutations, in which case that would be asserted
      .                   // here.
    750 ( 0.00%)          if preds.is_empty() {
      .                       // The macro-generated method below asserts we don't intern an empty slice.
      .                       List::empty()
      .                   } else {
    307 ( 0.00%)              self._intern_predicates(preds)
      .                   }
    888 ( 0.00%)      }
      .           
      .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
  3,786 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
    104 ( 0.00%)      }
      .           
      .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
 42,361 ( 0.02%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
  5,918 ( 0.00%)      }
      .           
      .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
      .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
      .               }
      .           
      .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
    923 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    562 ( 0.00%)      }
      .           
      .               pub fn intern_canonical_var_infos(
      .                   self,
      .                   ts: &[CanonicalVarInfo<'tcx>],
      .               ) -> CanonicalVarInfos<'tcx> {
  2,590 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
    108 ( 0.00%)      }
      .           
      .               pub fn intern_bound_variable_kinds(
      .                   self,
      .                   ts: &[ty::BoundVariableKind],
      .               ) -> &'tcx List<ty::BoundVariableKind> {
  1,008 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
  1,368 ( 0.00%)      }
      .           
      .               pub fn mk_fn_sig<I>(
      .                   self,
      .                   inputs: I,
      .                   output: I::Item,
      .                   c_variadic: bool,
      .                   unsafety: hir::Unsafety,
      .                   abi: abi::Abi,
      .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
      .               where
      .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
      .               {
      .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    161 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
     26 ( 0.00%)              c_variadic,
     34 ( 0.00%)              unsafety,
     36 ( 0.00%)              abi,
     60 ( 0.00%)          })
      .               }
      .           
      .               pub fn mk_poly_existential_predicates<
      .                   I: InternAs<
      .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   >,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
    323 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
      .               }
      .           
      .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
      2 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
      .               }
      .           
      .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    670 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
      .               }
      .           
      .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
 62,245 ( 0.03%)          iter.intern_with(|xs| self.intern_substs(xs))
      .               }
      .           
      .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
    285 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
      .               }
      .           
  1,775 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
      .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
  3,550 ( 0.00%)      }
      .           
      .               pub fn mk_bound_variable_kinds<
      .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
  5,650 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
      .               }
      .           
      .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
      .               /// It stops at `bound` and just returns it if reached.
 12,754 ( 0.01%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
 12,754 ( 0.01%)          let hir = self.hir();
      .                   loop {
 28,353 ( 0.01%)              if id == bound {
      .                           return bound;
      .                       }
      .           
 39,489 ( 0.02%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
      .                           return id;
      .                       }
      .                       let next = hir.get_parent_node(id);
 22,887 ( 0.01%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
 18,220 ( 0.01%)      }
      .           
    400 ( 0.00%)      pub fn lint_level_at_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   mut id: hir::HirId,
      .               ) -> (Level, LintLevelSource) {
      .                   let sets = self.lint_levels(());
      .                   loop {
  2,050 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
      .                           return pair;
      .                       }
    150 ( 0.00%)              let next = self.hir().get_parent_node(id);
    450 ( 0.00%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
    400 ( 0.00%)      }
      .           
      .               pub fn struct_span_lint_hir(
      .                   self,
      .                   lint: &'static Lint,
      .                   hir_id: HirId,
      .                   span: impl Into<MultiSpan>,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
     56 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
     14 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
      .               }
      .           
      .               pub fn struct_lint_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   id: HirId,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
      .                   let (level, src) = self.lint_level_at_node(lint, id);
      .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
      .               }
      .           
    756 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
    216 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
      .                   let candidates = map.get(&id.local_id)?;
    216 ( 0.00%)          Some(&*candidates)
    864 ( 0.00%)      }
      .           
    532 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
      .                   debug!(?id, "named_region");
      .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
    684 ( 0.00%)      }
      .           
      .               pub fn is_late_bound(self, id: HirId) -> bool {
      .                   self.is_late_bound_map(id.owner)
      .                       .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
      .               }
      .           
    399 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
      .                   self.object_lifetime_defaults_map(id.owner)
    513 ( 0.00%)      }
      .           
    360 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
      .                   self.mk_bound_variable_kinds(
      .                       self.late_bound_vars_map(id.owner)
      .                           .and_then(|map| map.get(&id.local_id).cloned())
      .                           .unwrap_or_else(|| {
      .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
      .                           })
      .                           .iter(),
      .                   )
    360 ( 0.00%)      }
      .           
      .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
      .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
      .               }
      .           
      .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
      .               /// feature gates
     60 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
      6 ( 0.00%)          if self.is_const_fn_raw(def_id) {
      .                       match self.lookup_const_stability(def_id) {
      .                           Some(stability) if stability.level.is_unstable() => {
      .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
      .                               // corresponding feature gate.
      .                               self.features()
      .                                   .declared_lib_features
      .                                   .iter()
      .                                   .any(|&(sym, _)| sym == stability.feature)
-- line 2741 ----------------------------------------
-- line 2743 ----------------------------------------
      .                           // functions without const stability are either stable user written
      .                           // const fn or the user is using feature gates and we thus don't
      .                           // care what they do
      .                           _ => true,
      .                       }
      .                   } else {
      .                       false
      .                   }
     54 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TyCtxtAt<'tcx> {
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
      .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
      .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
      .           }
      .           
      .           impl<I, T, R, E> InternAs<[T], R> for I
      .           where
      .               E: InternIteratorElement<T, R>,
      .               I: Iterator<Item = E>,
      .           {
      .               type Output = E::Output;
 31,896 ( 0.01%)      fn intern_with<F>(self, f: F) -> Self::Output
      .               where
      .                   F: FnOnce(&[T]) -> R,
      .               {
107,667 ( 0.05%)          E::intern_with(self, f)
 26,001 ( 0.01%)      }
      .           }
      .           
      .           pub trait InternIteratorElement<T, R>: Sized {
      .               type Output;
      .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
      .           }
      .           
      .           impl<T, R> InternIteratorElement<T, R> for T {
      .               type Output = R;
 15,519 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`.
 28,050 ( 0.01%)          match iter.size_hint() {
      .                       (0, Some(0)) => {
      3 ( 0.00%)                  assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
      .                           let t0 = iter.next().unwrap();
      1 ( 0.00%)                  assert!(iter.next().is_none());
  4,589 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
      .                           let t0 = iter.next().unwrap();
      .                           let t1 = iter.next().unwrap();
     15 ( 0.00%)                  assert!(iter.next().is_none());
  2,388 ( 0.00%)                  f(&[t0, t1])
      .                       }
     48 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
      .                   }
 13,271 ( 0.01%)      }
      .           }
      .           
      .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
      .           where
      .               T: Clone + 'a,
      .           {
      .               type Output = R;
    278 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
      .                   // This code isn't hot.
     24 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    244 ( 0.00%)      }
      .           }
      .           
      .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
      .               type Output = Result<R, E>;
 34,411 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`, unless a failure happens first, in which case the result
      .                   // will be an error anyway.
 26,208 ( 0.01%)          Ok(match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
     60 ( 0.00%)                  let t0 = iter.next().unwrap()?;
      .                           assert!(iter.next().is_none());
  1,473 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
     16 ( 0.00%)                  let t0 = iter.next().unwrap()?;
     16 ( 0.00%)                  let t1 = iter.next().unwrap()?;
     24 ( 0.00%)                  assert!(iter.next().is_none());
  2,592 ( 0.00%)                  f(&[t0, t1])
      .                       }
  1,060 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
      .                   })
 38,877 ( 0.02%)      }
      .           }
      .           
      .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
      .           // won't work for us.
      .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
 26,976 ( 0.01%)      t as *const () == u as *const ()
      .           }
      .           
      .           pub fn provide(providers: &mut ty::query::Providers) {
      2 ( 0.00%)      providers.in_scope_traits_map =
      .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
      3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
      2 ( 0.00%)      providers.module_reexports =
      .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
      2 ( 0.00%)      providers.crate_name = |tcx, id| {
      1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
      1 ( 0.00%)          tcx.crate_name
      .               };
      2 ( 0.00%)      providers.maybe_unused_trait_import =
      .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
      2 ( 0.00%)      providers.maybe_unused_extern_crates =
      .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
      2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
      .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
      .               };
      .           
     11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_const_stability =
      .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_deprecation_entry =
    216 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
      2 ( 0.00%)      providers.extern_mod_stmt_cnum =
      .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
      3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
      3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
      2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
      .                   assert_eq!(cnum, LOCAL_CRATE);
      .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
      .               };
      2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
      .                   assert_eq!(cnum, LOCAL_CRATE);
      .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
      .               };
      2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
      1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
      .                   // We want to check if the panic handler was defined in this crate
      3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
      .               };
      .           }

122,458 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs
--------------------------------------------------------------------------------
Ir              

-- line 26 ----------------------------------------
     .               /// indices mapping from the entry hash to its index.
     .               indices: RawTable<usize>,
     .               /// entries is a dense vec of entries in their order.
     .               entries: Vec<Bucket<K, V>>,
     .           }
     .           
     .           #[inline(always)]
     .           fn get_hash<K, V>(entries: &[Bucket<K, V>]) -> impl Fn(&usize) -> u64 + '_ {
68,109 ( 0.03%)      move |&i| entries[i].hash.get()
     .           }
     .           
     .           #[inline]
     .           fn equivalent<'a, K, V, Q: ?Sized + Equivalent<K>>(
     .               key: &'a Q,
     .               entries: &'a [Bucket<K, V>],
     .           ) -> impl Fn(&usize) -> bool + 'a {
 9,859 ( 0.00%)      move |&i| Q::equivalent(key, &entries[i].key)
     .           }
     .           
     .           #[inline]
     .           fn erase_index(table: &mut RawTable<usize>, hash: HashValue, index: usize) {
     .               table.erase_entry(hash.get(), move |&i| i == index);
     .           }
     .           
     .           #[inline]
-- line 50 ----------------------------------------
-- line 96 ----------------------------------------
     .           
     .               #[inline]
     .               fn into_entries(self) -> Vec<Self::Entry> {
     .                   self.entries
     .               }
     .           
     .               #[inline]
     .               fn as_entries(&self) -> &[Self::Entry] {
   126 ( 0.00%)          &self.entries
     .               }
     .           
     .               #[inline]
     .               fn as_entries_mut(&mut self) -> &mut [Self::Entry] {
     .                   &mut self.entries
     .               }
     .           
     .               fn with_entries<F>(&mut self, f: F)
-- line 112 ----------------------------------------
-- line 124 ----------------------------------------
     .                   IndexMapCore {
     .                       indices: RawTable::new(),
     .                       entries: Vec::new(),
     .                   }
     .               }
     .           
     .               #[inline]
     .               pub(crate) fn with_capacity(n: usize) -> Self {
    36 ( 0.00%)          IndexMapCore {
     .                       indices: RawTable::with_capacity(n),
     .                       entries: Vec::with_capacity(n),
     .                   }
     .               }
     .           
     .               #[inline]
     .               pub(crate) fn len(&self) -> usize {
   370 ( 0.00%)          self.indices.len()
     .               }
     .           
     .               #[inline]
     .               pub(crate) fn capacity(&self) -> usize {
     .                   cmp::min(self.indices.capacity(), self.entries.capacity())
     .               }
     .           
     .               pub(crate) fn clear(&mut self) {
-- line 148 ----------------------------------------
-- line 152 ----------------------------------------
     .           
     .               pub(crate) fn truncate(&mut self, len: usize) {
     .                   if len < self.len() {
     .                       self.erase_indices(len, self.entries.len());
     .                       self.entries.truncate(len);
     .                   }
     .               }
     .           
    27 ( 0.00%)      pub(crate) fn drain<R>(&mut self, range: R) -> Drain<'_, Bucket<K, V>>
     .               where
     .                   R: RangeBounds<usize>,
     .               {
     9 ( 0.00%)          let range = simplify_range(range, self.entries.len());
     .                   self.erase_indices(range.start, range.end);
     .                   self.entries.drain(range)
    24 ( 0.00%)      }
     .           
     .               #[cfg(feature = "rayon")]
     .               pub(crate) fn par_drain<R>(&mut self, range: R) -> rayon::vec::Drain<'_, Bucket<K, V>>
     .               where
     .                   K: Send,
     .                   V: Send,
     .                   R: RangeBounds<usize>,
     .               {
-- line 175 ----------------------------------------
-- line 194 ----------------------------------------
     .               /// Reserve capacity for `additional` more key-value pairs.
     .               pub(crate) fn reserve(&mut self, additional: usize) {
     .                   self.indices.reserve(additional, get_hash(&self.entries));
     .                   self.reserve_entries();
     .               }
     .           
     .               /// Reserve entries capacity to match the indices
     .               fn reserve_entries(&mut self) {
 2,380 ( 0.00%)          let additional = self.indices.capacity() - self.entries.len();
     .                   self.entries.reserve_exact(additional);
     .               }
     .           
     .               /// Shrink the capacity of the map as much as possible.
     .               pub(crate) fn shrink_to_fit(&mut self) {
     .                   self.indices.shrink_to(0, get_hash(&self.entries));
     .                   self.entries.shrink_to_fit();
     .               }
-- line 210 ----------------------------------------
-- line 218 ----------------------------------------
     .                   } else {
     .                       None
     .                   }
     .               }
     .           
     .               /// Append a key-value pair, *without* checking whether it already exists,
     .               /// and return the pair's new index.
     .               fn push(&mut self, hash: HashValue, key: K, value: V) -> usize {
10,549 ( 0.00%)          let i = self.entries.len();
     .                   self.indices.insert(hash.get(), i, get_hash(&self.entries));
21,471 ( 0.01%)          if i == self.entries.capacity() {
     .                       // Reserve our own capacity synced to the indices,
     .                       // rather than letting `Vec::push` just double it.
     .                       self.reserve_entries();
     .                   }
61,204 ( 0.03%)          self.entries.push(Bucket { hash, key, value });
     .                   i
     .               }
     .           
     .               /// Return the index in `entries` where an equivalent key can be found
 3,834 ( 0.00%)      pub(crate) fn get_index_of<Q>(&self, hash: HashValue, key: &Q) -> Option<usize>
     .               where
     .                   Q: ?Sized + Equivalent<K>,
     .               {
   270 ( 0.00%)          let eq = equivalent(key, &self.entries);
     .                   self.indices.get(hash.get(), eq).copied()
 3,834 ( 0.00%)      }
     .           
 1,447 ( 0.00%)      pub(crate) fn insert_full(&mut self, hash: HashValue, key: K, value: V) -> (usize, Option<V>)
     .               where
     .                   K: Eq,
     .               {
     .                   match self.get_index_of(hash, &key) {
     .                       Some(i) => (i, Some(replace(&mut self.entries[i].value, value))),
   294 ( 0.00%)              None => (self.push(hash, key, value), None),
     .                   }
 1,185 ( 0.00%)      }
     .           
     .               /// Remove an entry by shifting all entries that follow it
     .               pub(crate) fn shift_remove_full<Q>(&mut self, hash: HashValue, key: &Q) -> Option<(usize, K, V)>
     .               where
     .                   Q: ?Sized + Equivalent<K>,
     .               {
     .                   let eq = equivalent(key, &self.entries);
     .                   match self.indices.remove_entry(hash.get(), eq) {
-- line 262 ----------------------------------------
-- line 361 ----------------------------------------
     .                   let (init, shifted_entries) = self.entries.split_at(end);
     .                   let (start_entries, erased_entries) = init.split_at(start);
     .           
     .                   let erased = erased_entries.len();
     .                   let shifted = shifted_entries.len();
     .                   let half_capacity = self.indices.buckets() / 2;
     .           
     .                   // Use a heuristic between different strategies
     6 ( 0.00%)          if erased == 0 {
     .                       // Degenerate case, nothing to do
     .                   } else if start + shifted < half_capacity && start < erased {
     .                       // Reinsert everything, as there are few kept indices
     .                       self.indices.clear();
     .           
     .                       // Reinsert stable indices
     .                       for (i, entry) in enumerate(start_entries) {
     .                           self.indices.insert_no_grow(entry.hash.get(), i);
-- line 377 ----------------------------------------
-- line 457 ----------------------------------------
     .               Vacant(VacantEntry<'a, K, V>),
     .           }
     .           
     .           impl<'a, K, V> Entry<'a, K, V> {
     .               /// Inserts the given default value in the entry if it is vacant and returns a mutable
     .               /// reference to it. Otherwise a mutable reference to an already existent value is returned.
     .               ///
     .               /// Computes in **O(1)** time (amortized average).
    49 ( 0.00%)      pub fn or_insert(self, default: V) -> &'a mut V {
    14 ( 0.00%)          match self {
     .                       Entry::Occupied(entry) => entry.into_mut(),
    35 ( 0.00%)              Entry::Vacant(entry) => entry.insert(default),
     .                   }
    56 ( 0.00%)      }
     .           
     .               /// Inserts the result of the `call` function in the entry if it is vacant and returns a mutable
     .               /// reference to it. Otherwise a mutable reference to an already existent value is returned.
     .               ///
     .               /// Computes in **O(1)** time (amortized average).
20,152 ( 0.01%)      pub fn or_insert_with<F>(self, call: F) -> &'a mut V
     .               where
     .                   F: FnOnce() -> V,
     .               {
 5,038 ( 0.00%)          match self {
   852 ( 0.00%)              Entry::Occupied(entry) => entry.into_mut(),
 2,079 ( 0.00%)              Entry::Vacant(entry) => entry.insert(call()),
     .                   }
20,152 ( 0.01%)      }
     .           
     .               /// Inserts the result of the `call` function with a reference to the entry's key if it is
     .               /// vacant, and returns a mutable reference to the new value. Otherwise a mutable reference to
     .               /// an already existent value is returned.
     .               ///
     .               /// Computes in **O(1)** time (amortized average).
     .               pub fn or_insert_with_key<F>(self, call: F) -> &'a mut V
     .               where
-- line 492 ----------------------------------------
-- line 531 ----------------------------------------
     .                       x => x,
     .                   }
     .               }
     .           
     .               /// Inserts a default-constructed value in the entry if it is vacant and returns a mutable
     .               /// reference to it. Otherwise a mutable reference to an already existent value is returned.
     .               ///
     .               /// Computes in **O(1)** time (amortized average).
66,276 ( 0.03%)      pub fn or_default(self) -> &'a mut V
     .               where
     .                   V: Default,
     .               {
18,936 ( 0.01%)          match self {
   978 ( 0.00%)              Entry::Occupied(entry) => entry.into_mut(),
25,470 ( 0.01%)              Entry::Vacant(entry) => entry.insert(V::default()),
     .                   }
75,744 ( 0.03%)      }
     .           }
     .           
     .           impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for Entry<'_, K, V> {
     .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     .                   match *self {
     .                       Entry::Vacant(ref v) => f.debug_tuple(stringify!(Entry)).field(v).finish(),
     .                       Entry::Occupied(ref o) => f.debug_tuple(stringify!(Entry)).field(o).finish(),
     .                   }
-- line 555 ----------------------------------------
-- line 634 ----------------------------------------
     .           
     .               /// Return the index where the key-value pair will be inserted.
     .               pub fn index(&self) -> usize {
     .                   self.map.len()
     .               }
     .           
     .               /// Inserts the entry's key and the given value into the map, and returns a mutable reference
     .               /// to the value.
 3,251 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
26,596 ( 0.01%)          let i = self.map.push(self.hash, self.key, value);
   324 ( 0.00%)          &mut self.map.entries[i].value
 3,350 ( 0.00%)      }
     .           }
     .           
     .           impl<K: fmt::Debug, V> fmt::Debug for VacantEntry<'_, K, V> {
     .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     .                   f.debug_tuple(stringify!(VacantEntry))
     .                       .field(self.key())
     .                       .finish()
     .               }
-- line 653 ----------------------------------------

69,776 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 121 ----------------------------------------
      .           #[derive(Debug)]
      .           pub enum ProcessResult<O, E> {
      .               Unchanged,
      .               Changed(Vec<O>),
      .               Error(E),
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
  3,142 ( 0.00%)  struct ObligationTreeId(usize);
      .           
      .           type ObligationTreeIdGenerator =
      .               std::iter::Map<std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;
      .           
      .           pub struct ObligationForest<O: ForestObligation> {
      .               /// The list of obligations. In between calls to `process_obligations`,
      .               /// this list only contains nodes in the `Pending` or `Waiting` state.
      .               ///
-- line 137 ----------------------------------------
-- line 181 ----------------------------------------
      .               has_parent: bool,
      .           
      .               /// Identifier of the obligation tree to which this node belongs.
      .               obligation_tree_id: ObligationTreeId,
      .           }
      .           
      .           impl<O> Node<O> {
      .               fn new(parent: Option<usize>, obligation: O, obligation_tree_id: ObligationTreeId) -> Node<O> {
 37,056 ( 0.02%)          Node {
      .                       obligation,
      .                       state: Cell::new(NodeState::Pending),
  4,551 ( 0.00%)              dependents: if let Some(parent_index) = parent { vec![parent_index] } else { vec![] },
      .                       has_parent: parent.is_some(),
      .                       obligation_tree_id,
      .                   }
      .               }
      .           }
      .           
      .           /// The state of one node in some tree within the forest. This represents the
      .           /// current state of processing for the obligation (of type `O`) associated
-- line 200 ----------------------------------------
-- line 223 ----------------------------------------
      .           ///  |     compress()
      .           ///  v
      .           /// (Removed)
      .           /// ```
      .           /// The `Error` state can be introduced in several places, via `error_at()`.
      .           ///
      .           /// Outside of `ObligationForest` methods, nodes should be either `Pending` or
      .           /// `Waiting`.
 82,477 ( 0.04%)  #[derive(Debug, Copy, Clone, PartialEq, Eq)]
      .           enum NodeState {
      .               /// This obligation has not yet been selected successfully. Cannot have
      .               /// subobligations.
      .               Pending,
      .           
      .               /// This obligation was selected successfully, but may or may not have
      .               /// subobligations.
      .               Success,
-- line 239 ----------------------------------------
-- line 279 ----------------------------------------
      .               pub stalled: bool,
      .           }
      .           
      .           impl<O, E> OutcomeTrait for Outcome<O, E> {
      .               type Error = Error<O, E>;
      .               type Obligation = O;
      .           
      .               fn new() -> Self {
  5,532 ( 0.00%)          Self { stalled: true, errors: vec![] }
      .               }
      .           
      .               fn mark_not_stalled(&mut self) {
  2,268 ( 0.00%)          self.stalled = false;
      .               }
      .           
      .               fn is_stalled(&self) -> bool {
  1,326 ( 0.00%)          self.stalled
      .               }
      .           
      .               fn record_completed(&mut self, _outcome: &Self::Obligation) {
      .                   // do nothing
      .               }
      .           
      .               fn record_error(&mut self, error: Self::Error) {
     32 ( 0.00%)          self.errors.push(error)
      .               }
      .           }
      .           
      .           #[derive(Debug, PartialEq, Eq)]
      .           pub struct Error<O, E> {
      .               pub error: E,
      .               pub backtrace: Vec<O>,
      .           }
      .           
      .           impl<O: ForestObligation> ObligationForest<O> {
    918 ( 0.00%)      pub fn new() -> ObligationForest<O> {
 11,016 ( 0.00%)          ObligationForest {
      .                       nodes: vec![],
      .                       done_cache: Default::default(),
      .                       active_cache: Default::default(),
      .                       reused_node_vec: vec![],
      .                       obligation_tree_id_generator: (0..).map(ObligationTreeId),
      .                       error_cache: Default::default(),
      .                   }
    918 ( 0.00%)      }
      .           
      .               /// Returns the total number of nodes in the forest that have not
      .               /// yet been fully resolved.
      .               pub fn len(&self) -> usize {
      .                   self.nodes.len()
      .               }
      .           
      .               /// Registers an obligation.
      .               pub fn register_obligation(&mut self, obligation: O) {
      .                   // Ignore errors here - there is no guarantee of success.
 24,934 ( 0.01%)          let _ = self.register_obligation_at(obligation, None);
      .               }
      .           
      .               // Returns Err(()) if we already know this obligation failed.
 37,345 ( 0.02%)      fn register_obligation_at(&mut self, obligation: O, parent: Option<usize>) -> Result<(), ()> {
  6,790 ( 0.00%)          let cache_key = obligation.as_cache_key();
  6,790 ( 0.00%)          if self.done_cache.contains(&cache_key) {
      .                       debug!("register_obligation_at: ignoring already done obligation: {:?}", obligation);
      .                       return Ok(());
      .                   }
      .           
 16,188 ( 0.01%)          match self.active_cache.entry(cache_key) {
      .                       Entry::Occupied(o) => {
    764 ( 0.00%)                  let node = &mut self.nodes[*o.get()];
    764 ( 0.00%)                  if let Some(parent_index) = parent {
      .                               // If the node is already in `active_cache`, it has already
      .                               // had its chance to be marked with a parent. So if it's
      .                               // not already present, just dump `parent` into the
      .                               // dependents as a non-parent.
    660 ( 0.00%)                      if !node.dependents.contains(&parent_index) {
      .                                   node.dependents.push(parent_index);
      .                               }
      .                           }
  1,146 ( 0.00%)                  if let NodeState::Error = node.state.get() { Err(()) } else { Ok(()) }
      .                       }
  6,948 ( 0.00%)              Entry::Vacant(v) => {
 13,896 ( 0.01%)                  let obligation_tree_id = match parent {
  1,490 ( 0.00%)                      Some(parent_index) => self.nodes[parent_index].obligation_tree_id,
      .                               None => self.obligation_tree_id_generator.next().unwrap(),
      .                           };
      .           
      .                           let already_failed = parent.is_some()
      .                               && self
      .                                   .error_cache
      .                                   .get(&obligation_tree_id)
      .                                   .map_or(false, |errors| errors.contains(v.key()));
      .           
      .                           if already_failed {
      .                               Err(())
      .                           } else {
  2,316 ( 0.00%)                      let new_index = self.nodes.len();
      .                               v.insert(new_index);
      .                               self.nodes.push(Node::new(parent, obligation, obligation_tree_id));
      .                               Ok(())
      .                           }
      .                       }
      .                   }
 30,555 ( 0.01%)      }
      .           
      .               /// Converts all remaining obligations to the given error.
  6,482 ( 0.00%)      pub fn to_errors<E: Clone>(&mut self, error: E) -> Vec<Error<O, E>> {
      .                   let errors = self
      .                       .nodes
      .                       .iter()
      .                       .enumerate()
      .                       .filter(|(_index, node)| node.state.get() == NodeState::Pending)
      .                       .map(|(index, _node)| Error { error: error.clone(), backtrace: self.error_at(index) })
      .                       .collect();
      .           
  1,852 ( 0.00%)          self.compress(|_| assert!(false));
      .                   errors
  5,556 ( 0.00%)      }
      .           
      .               /// Returns the set of obligations that are in a pending state.
      .               pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>
      .               where
      .                   F: Fn(&O) -> P,
      .               {
     29 ( 0.00%)          self.nodes
      .                       .iter()
      .                       .filter(|node| node.state.get() == NodeState::Pending)
      .                       .map(|node| f(&node.obligation))
      .                       .collect()
      .               }
      .           
     14 ( 0.00%)      fn insert_into_error_cache(&mut self, index: usize) {
      .                   let node = &self.nodes[index];
      2 ( 0.00%)          self.error_cache
      6 ( 0.00%)              .entry(node.obligation_tree_id)
      .                       .or_default()
      .                       .insert(node.obligation.as_cache_key());
     16 ( 0.00%)      }
      .           
      .               /// Performs a pass through the obligation list. This must
      .               /// be called in a loop until `outcome.stalled` is false.
      .               ///
      .               /// This _cannot_ be unrolled (presently, at least).
      .               #[inline(never)]
 24,894 ( 0.01%)      pub fn process_obligations<P, OUT>(&mut self, processor: &mut P) -> OUT
      .               where
      .                   P: ObligationProcessor<Obligation = O>,
      .                   OUT: OutcomeTrait<Obligation = O, Error = Error<O, P::Error>>,
      .               {
      .                   let mut outcome = OUT::new();
      .           
      .                   // Note that the loop body can append new nodes, and those new nodes
      .                   // will then be processed by subsequent iterations of the loop.
      .                   //
      .                   // We can't use an iterator for the loop because `self.nodes` is
      .                   // appended to and the borrow checker would complain. We also can't use
      .                   // `for index in 0..self.nodes.len() { ... }` because the range would
      .                   // be computed with the initial length, and we would miss the appended
      .                   // nodes. Therefore we use a `while` loop.
      .                   let mut index = 0;
 39,839 ( 0.02%)          while let Some(node) = self.nodes.get_mut(index) {
      .                       // `processor.process_obligation` can modify the predicate within
      .                       // `node.obligation`, and that predicate is the key used for
      .                       // `self.active_cache`. This means that `self.active_cache` can get
      .                       // out of sync with `nodes`. It's not very common, but it does
      .                       // happen, and code in `compress` has to allow for it.
 74,146 ( 0.03%)              if node.state.get() != NodeState::Pending {
  3,379 ( 0.00%)                  index += 1;
      .                           continue;
      .                       }
      .           
 13,179 ( 0.01%)              match processor.process_obligation(&mut node.obligation) {
      .                           ProcessResult::Unchanged => {
      .                               // No change in state.
      .                           }
  9,064 ( 0.00%)                  ProcessResult::Changed(children) => {
      .                               // We are not (yet) stalled.
      .                               outcome.mark_not_stalled();
      .                               node.state.set(NodeState::Success);
      .           
 12,018 ( 0.01%)                      for child in children {
 25,109 ( 0.01%)                          let st = self.register_obligation_at(child, Some(index));
  2,954 ( 0.00%)                          if let Err(()) = st {
      .                                       // Error already reported - propagate it
      .                                       // to our node.
      .                                       self.error_at(index);
      .                                   }
      .                               }
      .                           }
      .                           ProcessResult::Error(err) => {
      .                               outcome.mark_not_stalled();
     66 ( 0.00%)                      outcome.record_error(Error { error: err, backtrace: self.error_at(index) });
      .                           }
      .                       }
 67,388 ( 0.03%)              index += 1;
      .                   }
      .           
      .                   // There's no need to perform marking, cycle processing and compression when nothing
      .                   // changed.
  1,326 ( 0.00%)          if !outcome.is_stalled() {
      .                       self.mark_successes();
      .                       self.process_cycles(processor);
  1,190 ( 0.00%)              self.compress(|obl| outcome.record_completed(obl));
      .                   }
      .           
      .                   outcome
 24,894 ( 0.01%)      }
      .           
      .               /// Returns a vector of obligations for `p` and all of its
      .               /// ancestors, putting them into the error state in the process.
     14 ( 0.00%)      fn error_at(&self, mut index: usize) -> Vec<O> {
      .                   let mut error_stack: Vec<usize> = vec![];
      .                   let mut trace = vec![];
      .           
      .                   loop {
      .                       let node = &self.nodes[index];
      2 ( 0.00%)              node.state.set(NodeState::Error);
      .                       trace.push(node.obligation.clone());
      4 ( 0.00%)              if node.has_parent {
      .                           // The first dependent is the parent, which is treated
      .                           // specially.
      .                           error_stack.extend(node.dependents.iter().skip(1));
      .                           index = node.dependents[0];
      .                       } else {
      .                           // No parent; treat all dependents non-specially.
      .                           error_stack.extend(node.dependents.iter());
      .                           break;
-- line 504 ----------------------------------------
-- line 509 ----------------------------------------
      .                       let node = &self.nodes[index];
      .                       if node.state.get() != NodeState::Error {
      .                           node.state.set(NodeState::Error);
      .                           error_stack.extend(node.dependents.iter());
      .                       }
      .                   }
      .           
      .                   trace
     16 ( 0.00%)      }
      .           
      .               /// Mark all `Waiting` nodes as `Success`, except those that depend on a
      .               /// pending node.
      .               fn mark_successes(&self) {
      .                   // Convert all `Waiting` nodes to `Success`.
      .                   for node in &self.nodes {
 21,070 ( 0.01%)              if node.state.get() == NodeState::Waiting {
      .                           node.state.set(NodeState::Success);
      .                       }
      .                   }
      .           
      .                   // Convert `Success` nodes that depend on a pending node back to
      .                   // `Waiting`.
      .                   for node in &self.nodes {
 13,547 ( 0.01%)              if node.state.get() == NodeState::Pending {
      .                           // This call site is hot.
      .                           self.inlined_mark_dependents_as_waiting(node);
      .                       }
      .                   }
      .               }
      .           
      .               // This always-inlined function is for the hot call site.
      .               #[inline(always)]
      .               fn inlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
  1,252 ( 0.00%)          for &index in node.dependents.iter() {
      .                       let node = &self.nodes[index];
  1,252 ( 0.00%)              let state = node.state.get();
  1,252 ( 0.00%)              if state == NodeState::Success {
      .                           // This call site is cold.
  3,390 ( 0.00%)                  self.uninlined_mark_dependents_as_waiting(node);
      .                       } else {
      .                           debug_assert!(state == NodeState::Waiting || state == NodeState::Error)
      .                       }
      .                   }
      .               }
      .           
      .               // This never-inlined function is for the cold call site.
      .               #[inline(never)]
  7,910 ( 0.00%)      fn uninlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
      .                   // Mark node Waiting in the cold uninlined code instead of the hot inlined
      .                   node.state.set(NodeState::Waiting);
      .                   self.inlined_mark_dependents_as_waiting(node)
  9,040 ( 0.00%)      }
      .           
      .               /// Report cycles between all `Success` nodes, and convert all `Success`
      .               /// nodes to `Done`. This must be called after `mark_successes`.
      .               fn process_cycles<P>(&mut self, processor: &mut P)
      .               where
      .                   P: ObligationProcessor<Obligation = O>,
      .               {
    595 ( 0.00%)          let mut stack = std::mem::take(&mut self.reused_node_vec);
      .                   for (index, node) in self.nodes.iter().enumerate() {
      .                       // For some benchmarks this state test is extremely hot. It's a win
      .                       // to handle the no-op cases immediately to avoid the cost of the
      .                       // function call.
 13,547 ( 0.01%)              if node.state.get() == NodeState::Success {
 10,905 ( 0.00%)                  self.find_cycles_from_node(&mut stack, processor, index);
      .                       }
      .                   }
      .           
      .                   debug_assert!(stack.is_empty());
  4,760 ( 0.00%)          self.reused_node_vec = stack;
      .               }
      .           
 27,846 ( 0.01%)      fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)
      .               where
      .                   P: ObligationProcessor<Obligation = O>,
      .               {
      .                   let node = &self.nodes[index];
  6,188 ( 0.00%)          if node.state.get() == NodeState::Success {
    182 ( 0.00%)              match stack.iter().rposition(|&n| n == index) {
      .                           None => {
      .                               stack.push(index);
    913 ( 0.00%)                      for &dep_index in node.dependents.iter() {
  3,652 ( 0.00%)                          self.find_cycles_from_node(stack, processor, dep_index);
      .                               }
      .                               stack.pop();
      .                               node.state.set(NodeState::Done);
      .                           }
      .                           Some(rpos) => {
      .                               // Cycle detected.
     18 ( 0.00%)                      processor.process_backedge(
      .                                   stack[rpos..].iter().map(|&i| &self.nodes[i].obligation),
      .                                   PhantomData,
      .                               );
      .                           }
      .                       }
      .                   }
 24,752 ( 0.01%)      }
      .           
      .               /// Compresses the vector, removing all popped nodes. This adjusts the
      .               /// indices and hence invalidates any outstanding indices. `process_cycles`
      .               /// must be run beforehand to remove any cycles on `Success` nodes.
      .               #[inline(never)]
 11,242 ( 0.00%)      fn compress(&mut self, mut outcome_cb: impl FnMut(&O)) {
  1,521 ( 0.00%)          let orig_nodes_len = self.nodes.len();
      .                   let mut node_rewrites: Vec<_> = std::mem::take(&mut self.reused_node_vec);
      .                   debug_assert!(node_rewrites.is_empty());
      .                   node_rewrites.extend(0..orig_nodes_len);
      .                   let mut dead_nodes = 0;
      .           
      .                   // Move removable nodes to the end, preserving the order of the
      .                   // remaining nodes.
      .                   //
      .                   // LOOP INVARIANT:
      .                   //     self.nodes[0..index - dead_nodes] are the first remaining nodes
      .                   //     self.nodes[index - dead_nodes..index] are all dead
      .                   //     self.nodes[index..] are unchanged
      .                   for index in 0..orig_nodes_len {
      .                       let node = &self.nodes[index];
 70,115 ( 0.03%)              match node.state.get() {
      .                           NodeState::Pending | NodeState::Waiting => {
 22,558 ( 0.01%)                      if dead_nodes > 0 {
  6,390 ( 0.00%)                          self.nodes.swap(index, index - dead_nodes);
 10,650 ( 0.00%)                          node_rewrites[index] -= dead_nodes;
      .                               }
      .                           }
      .                           NodeState::Done => {
      .                               // This lookup can fail because the contents of
      .                               // `self.active_cache` are not guaranteed to match those of
      .                               // `self.nodes`. See the comment in `process_obligation`
      .                               // for more details.
  8,396 ( 0.00%)                      if let Some((predicate, _)) =
  6,798 ( 0.00%)                          self.active_cache.remove_entry(&node.obligation.as_cache_key())
      .                               {
      .                                   self.done_cache.insert(predicate);
      .                               } else {
      .                                   self.done_cache.insert(node.obligation.as_cache_key().clone());
      .                               }
      .                               // Extract the success stories.
      .                               outcome_cb(&node.obligation);
  4,532 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
  4,532 ( 0.00%)                      dead_nodes += 1;
      .                           }
      .                           NodeState::Error => {
      .                               // We *intentionally* remove the node from the cache at this point. Otherwise
      .                               // tests must come up with a different type on every type error they
      .                               // check against.
      6 ( 0.00%)                      self.active_cache.remove(&node.obligation.as_cache_key());
      4 ( 0.00%)                      self.insert_into_error_cache(index);
      4 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
      4 ( 0.00%)                      dead_nodes += 1;
      .                           }
      .                           NodeState::Success => unreachable!(),
      .                       }
      .                   }
      .           
      .                   if dead_nodes > 0 {
      .                       // Remove the dead nodes and rewrite indices.
  1,160 ( 0.00%)              self.nodes.truncate(orig_nodes_len - dead_nodes);
    580 ( 0.00%)              self.apply_rewrites(&node_rewrites);
      .                   }
      .           
      .                   node_rewrites.truncate(0);
  6,084 ( 0.00%)          self.reused_node_vec = node_rewrites;
 12,168 ( 0.01%)      }
      .           
      .               #[inline(never)]
  5,220 ( 0.00%)      fn apply_rewrites(&mut self, node_rewrites: &[usize]) {
      .                   let orig_nodes_len = node_rewrites.len();
      .           
      .                   for node in &mut self.nodes {
      .                       let mut i = 0;
 12,143 ( 0.01%)              while let Some(dependent) = node.dependents.get_mut(i) {
  4,724 ( 0.00%)                  let new_index = node_rewrites[*dependent];
  2,362 ( 0.00%)                  if new_index >= orig_nodes_len {
      .                               node.dependents.swap_remove(i);
      .                               if i == 0 && node.has_parent {
      .                                   // We just removed the parent.
      .                                   node.has_parent = false;
      .                               }
      .                           } else {
  1,181 ( 0.00%)                      *dependent = new_index;
  2,362 ( 0.00%)                      i += 1;
      .                           }
      .                       }
      .                   }
      .           
      .                   // This updating of `self.active_cache` is necessary because the
      .                   // removal of nodes within `compress` can fail. See above.
      .                   self.active_cache.retain(|_predicate, index| {
 46,520 ( 0.02%)              let new_index = node_rewrites[*index];
 23,260 ( 0.01%)              if new_index >= orig_nodes_len {
      .                           false
      .                       } else {
 10,962 ( 0.00%)                  *index = new_index;
      .                           true
      .                       }
      .                   });
  4,640 ( 0.00%)      }
      .           }

118,793 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs
--------------------------------------------------------------------------------
Ir               

-- line 48 ----------------------------------------
      .           //
      .           // FIXME: we have to do something for moving slice patterns.
      .           fn place_contents_drop_state_cannot_differ<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               place: mir::Place<'tcx>,
      .           ) -> bool {
      .               let ty = place.ty(body, tcx).ty;
 50,598 ( 0.02%)      match ty.kind() {
      .                   ty::Array(..) => {
      .                       debug!(
      .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} => false",
      .                           place, ty
      .                       );
      .                       false
      .                   }
      .                   ty::Slice(..) | ty::Ref(..) | ty::RawPtr(..) => {
      .                       debug!(
      .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} refd => true",
      .                           place, ty
      .                       );
      .                       true
      .                   }
 41,616 ( 0.02%)          ty::Adt(def, _) if (def.has_dtor(tcx) && !def.is_box()) || def.is_union() => {
      .                       debug!(
      .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} Drop => true",
      .                           place, ty
      .                       );
      .                       true
      .                   }
      .                   _ => false,
      .               }
-- line 79 ----------------------------------------
-- line 83 ----------------------------------------
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               move_data: &MoveData<'tcx>,
      .               lookup_result: LookupResult,
      .               each_child: F,
      .           ) where
      .               F: FnMut(MovePathIndex),
      .           {
    944 ( 0.00%)      match lookup_result {
      .                   LookupResult::Parent(..) => {
      .                       // access to untracked value - do not touch children
      .                   }
      .                   LookupResult::Exact(e) => on_all_children_bits(tcx, body, move_data, e, each_child),
      .               }
      .           }
      .           
      .           pub fn on_all_children_bits<'tcx, F>(
-- line 99 ----------------------------------------
-- line 100 ----------------------------------------
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               move_data: &MoveData<'tcx>,
      .               move_path_index: MovePathIndex,
      .               mut each_child: F,
      .           ) where
      .               F: FnMut(MovePathIndex),
      .           {
 76,488 ( 0.03%)      fn is_terminal_path<'tcx>(
      .                   tcx: TyCtxt<'tcx>,
      .                   body: &Body<'tcx>,
      .                   move_data: &MoveData<'tcx>,
      .                   path: MovePathIndex,
      .               ) -> bool {
 19,122 ( 0.01%)          place_contents_drop_state_cannot_differ(tcx, body, move_data.move_paths[path].place)
 76,488 ( 0.03%)      }
      .           
 85,544 ( 0.04%)      fn on_all_children_bits<'tcx, F>(
      .                   tcx: TyCtxt<'tcx>,
      .                   body: &Body<'tcx>,
      .                   move_data: &MoveData<'tcx>,
      .                   move_path_index: MovePathIndex,
      .                   each_child: &mut F,
      .               ) where
      .                   F: FnMut(MovePathIndex),
      .               {
  2,126 ( 0.00%)          each_child(move_path_index);
      .           
 66,927 ( 0.03%)          if is_terminal_path(tcx, body, move_data, move_path_index) {
      .                       return;
      .                   }
      .           
  5,794 ( 0.00%)          let mut next_child_index = move_data.move_paths[move_path_index].first_child;
 16,619 ( 0.01%)          while let Some(child_index) = next_child_index {
  6,264 ( 0.00%)              on_all_children_bits(tcx, body, move_data, child_index, each_child);
  1,044 ( 0.00%)              next_child_index = move_data.move_paths[child_index].next_sibling;
      .                   }
 76,486 ( 0.03%)      }
 53,404 ( 0.02%)      on_all_children_bits(tcx, body, move_data, move_path_index, &mut each_child);
      .           }
      .           
      .           pub fn on_all_drop_children_bits<'tcx, F>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               ctxt: &MoveDataParamEnv<'tcx>,
      .               path: MovePathIndex,
      .               mut each_child: F,
-- line 146 ----------------------------------------
-- line 156 ----------------------------------------
      .                   if erased_ty.needs_drop(tcx, ctxt.param_env) {
      .                       each_child(child);
      .                   } else {
      .                       debug!("on_all_drop_children_bits - skipping")
      .                   }
      .               })
      .           }
      .           
    397 ( 0.00%)  pub fn drop_flag_effects_for_function_entry<'tcx, F>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               ctxt: &MoveDataParamEnv<'tcx>,
      .               mut callback: F,
      .           ) where
      .               F: FnMut(MovePathIndex, DropFlagState),
      .           {
      .               let move_data = &ctxt.move_data;
     36 ( 0.00%)      for arg in body.args_iter() {
    108 ( 0.00%)          let place = mir::Place::from(arg);
    162 ( 0.00%)          let lookup_result = move_data.rev_lookup.find(place.as_ref());
      .                   on_lookup_result_bits(tcx, body, move_data, lookup_result, |mpi| {
     58 ( 0.00%)              callback(mpi, DropFlagState::Present)
      .                   });
      .               }
    288 ( 0.00%)  }
      .           
125,280 ( 0.05%)  pub fn drop_flag_effects_for_location<'tcx, F>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               ctxt: &MoveDataParamEnv<'tcx>,
      .               loc: Location,
      .               mut callback: F,
      .           ) where
      .               F: FnMut(MovePathIndex, DropFlagState),
      .           {
      .               let move_data = &ctxt.move_data;
      .               debug!("drop_flag_effects_for_location({:?})", loc);
      .           
      .               // first, move out of the RHS
 10,434 ( 0.00%)      for mi in &move_data.loc_map[loc] {
 23,408 ( 0.01%)          let path = mi.move_path_index(move_data);
      .                   debug!("moving out of path {:?}", move_data.move_paths[path]);
      .           
  6,768 ( 0.00%)          on_all_children_bits(tcx, body, move_data, path, |mpi| callback(mpi, DropFlagState::Absent))
      .               }
      .           
      .               debug!("drop_flag_effects: assignment for location({:?})", loc);
      .           
  2,126 ( 0.00%)      for_location_inits(tcx, body, move_data, loc, |mpi| callback(mpi, DropFlagState::Present));
 83,536 ( 0.04%)  }
      .           
      .           pub fn for_location_inits<'tcx, F>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               move_data: &MoveData<'tcx>,
      .               loc: Location,
      .               mut callback: F,
      .           ) where
      .               F: FnMut(MovePathIndex),
      .           {
 10,434 ( 0.00%)      for ii in &move_data.init_loc_map[loc] {
 11,880 ( 0.01%)          let init = move_data.inits[*ii];
  7,656 ( 0.00%)          match init.kind {
      .                       InitKind::Deep => {
      .                           let path = init.path;
      .           
      .                           on_all_children_bits(tcx, body, move_data, path, &mut callback)
      .                       }
      .                       InitKind::Shallow => {
      .                           let mpi = init.path;
      .                           callback(mpi);
-- line 226 ----------------------------------------
-- line 230 ----------------------------------------
      .               }
      .           }
      .           
      .           /// Calls `handle_inactive_variant` for each descendant move path of `enum_place` that contains a
      .           /// `Downcast` to a variant besides the `active_variant`.
      .           ///
      .           /// NOTE: If there are no move paths corresponding to an inactive variant,
      .           /// `handle_inactive_variant` will not be called for that variant.
    672 ( 0.00%)  pub(crate) fn on_all_inactive_variants<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &mir::Body<'tcx>,
      .               move_data: &MoveData<'tcx>,
      .               enum_place: mir::Place<'tcx>,
      .               active_variant: VariantIdx,
      .               mut handle_inactive_variant: impl FnMut(MovePathIndex),
      .           ) {
    280 ( 0.00%)      let enum_mpi = match move_data.rev_lookup.find(enum_place.as_ref()) {
      .                   LookupResult::Exact(mpi) => mpi,
      .                   LookupResult::Parent(_) => return,
      .               };
      .           
      .               let enum_path = &move_data.move_paths[enum_mpi];
    333 ( 0.00%)      for (variant_mpi, variant_path) in enum_path.children(&move_data.move_paths) {
      .                   // Because of the way we build the `MoveData` tree, each child should have exactly one more
      .                   // projection than `enum_place`. This additional projection must be a downcast since the
      .                   // base is an enum.
     44 ( 0.00%)          let (downcast, base_proj) = variant_path.place.projection.split_last().unwrap();
    176 ( 0.00%)          assert_eq!(enum_place.projection.len(), base_proj.len());
      .           
    132 ( 0.00%)          let variant_idx = match *downcast {
      .                       mir::ProjectionElem::Downcast(_, idx) => idx,
      .                       _ => unreachable!(),
      .                   };
      .           
     44 ( 0.00%)          if variant_idx != active_variant {
      .                       on_all_children_bits(tcx, body, move_data, variant_mpi, |mpi| {
     44 ( 0.00%)                  handle_inactive_variant(mpi)
      .                       });
      .                   }
      .               }
    448 ( 0.00%)  }

 67,906 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir               

-- line 91 ----------------------------------------
      .           // maximum of number bytes needed to fill an 8-byte-sized element on which
      .           // SipHash operates. Note that for variable-sized copies which are known to be
      .           // less than 8 bytes, this function will perform more work than necessary unless
      .           // the compiler is able to optimize the extra work away.
      .           #[inline]
      .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
      .               debug_assert!(count <= 8);
      .           
  9,297 ( 0.00%)      if count == 8 {
      .                   ptr::copy_nonoverlapping(src, dst, 8);
      .                   return;
      .               }
      .           
      .               let mut i = 0;
 15,430 ( 0.01%)      if i + 3 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
      .                   i += 4;
      .               }
      .           
 33,026 ( 0.01%)      if i + 1 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
  4,876 ( 0.00%)          i += 2
      .               }
      .           
 15,430 ( 0.01%)      if i < count {
  8,223 ( 0.00%)          *dst.add(i) = *src.add(i);
      .                   i += 1;
      .               }
      .           
      .               debug_assert_eq!(i, count);
      .           }
      .           
      .           // # Implementation
      .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
      .           
      .                   hasher
      .               }
      .           
      .               // A specialized write function for values with size <= 8.
      .               #[inline]
      .               fn short_write<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
 32,663 ( 0.01%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
215,439 ( 0.09%)          if nbuf + size < BUFFER_SIZE {
      .                       unsafe {
      .                           // The memcpy call is optimized away because the size is known.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .                       }
      .           
 66,911 ( 0.03%)              self.nbuf = nbuf + size;
      .           
      .                       return;
      .                   }
      .           
 10,062 ( 0.00%)          unsafe { self.short_write_process_buffer(x) }
      .               }
      .           
      .               // A specialized write function for values with size <= 8 that should only
      .               // be called when the write would cause the buffer to fill.
      .               //
      .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
      .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
      .               // overflow) if it wasn't already.
      .               #[inline(never)]
  3,008 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
  3,008 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
      .                   // Copy first part of input into end of buffer, possibly into spill
      .                   // element. The memcpy call is optimized away because the size is known.
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .           
      .                   // Process buffer.
      .                   for i in 0..BUFFER_CAPACITY {
 30,080 ( 0.01%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 24,064 ( 0.01%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
 27,072 ( 0.01%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer by copying size - 1
      .                   // elements from spill (at most size - 1 bytes could have overflowed
      .                   // into the spill). The memcpy call is optimized away because the size
      .                   // is known. And the whole copy is optimized away for size == 1.
      .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
      .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
      .           
      .                   // This function should only be called when the write fills the buffer.
      .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
      .                   // is statically known, so the branch is optimized away.
 13,964 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
 12,032 ( 0.01%)          self.processed += BUFFER_SIZE;
  6,016 ( 0.00%)      }
      .           
      .               // A write function for byte slices.
      .               #[inline]
      .               fn slice_write(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
  7,334 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .           
 42,629 ( 0.02%)          if nbuf + length < BUFFER_SIZE {
      .                       unsafe {
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .           
 15,524 ( 0.01%)                  if length <= 8 {
      .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
      .                           } else {
      .                               // This memcpy is *not* optimized away.
      .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
      .                           }
      .                       }
      .           
  7,777 ( 0.00%)              self.nbuf = nbuf + length;
      .           
      .                       return;
      .                   }
      .           
  4,322 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
      .               }
      .           
      .               // A write function for byte slices that should only be called when the
      .               // write would cause the buffer to fill.
      .               //
      .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
      .               // and `msg` must contain enough bytes to initialize the rest of the element
      .               // containing the byte offset `self.nbuf`.
      .               #[inline(never)]
  3,755 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
    751 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
      .           
      .                   // Always copy first part of input into current element of buffer.
      .                   // This function should only be called when the write fills the buffer,
      .                   // so we know that there is enough input to fill the current element.
  2,253 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    751 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
      .           
      .                   let src = msg.as_ptr();
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
      .           
      .                   // Process buffer.
      .           
      .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
      .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
      .                   // We know that is true, because last step ensured we have a full
      .                   // element in the buffer.
  1,502 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
      .           
      .                   for i in 0..last {
  5,584 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  6,335 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
 11,168 ( 0.00%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Process the remaining element-sized chunks of input.
      .                   let mut processed = needed_in_elem;
  1,502 ( 0.00%)          let input_left = length - processed;
    750 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
      .                   let extra_bytes_left = input_left % ELEM_SIZE;
      .           
      .                   for _ in 0..elems_left {
    528 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    528 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
    528 ( 0.00%)              self.state.v0 ^= elem;
  1,056 ( 0.00%)              processed += ELEM_SIZE;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer.
      .                   let src = msg.as_ptr().add(processed);
      .                   let dst = self.buf.as_mut_ptr() as *mut u8;
      .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
      .           
    751 ( 0.00%)          self.nbuf = extra_bytes_left;
  3,755 ( 0.00%)          self.processed += nbuf + processed;
  4,506 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn finish128(mut self) -> (u64, u64) {
      .                   debug_assert!(self.nbuf < BUFFER_SIZE);
      .           
      .                   // Process full elements in buffer.
  3,393 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
      .           
      .                   // Since we're consuming self, avoid updating members for a potential
      .                   // performance gain.
  4,524 ( 0.00%)          let mut state = self.state;
      .           
      .                   for i in 0..last {
  3,038 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
  3,038 ( 0.00%)              state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut state);
  3,038 ( 0.00%)              state.v0 ^= elem;
      .                   }
      .           
      .                   // Get remaining partial element.
  2,262 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
      .                       unsafe {
      .                           // Ensure element is initialized by writing zero bytes. At most
      .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
      .                           // to write this many because we have the spill and we maintain
      .                           // `self.nbuf` such that this write will start before the spill.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
      .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
    993 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
      .                       }
      .                   } else {
      .                       0
      .                   };
      .           
      .                   // Finalize the hash.
  3,255 ( 0.00%)          let length = self.processed + self.nbuf;
  2,260 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
      .           
  1,130 ( 0.00%)          state.v3 ^= b;
      .                   Sip24Rounds::c_rounds(&mut state);
  1,130 ( 0.00%)          state.v0 ^= b;
      .           
  1,130 ( 0.00%)          state.v2 ^= 0xee;
      .                   Sip24Rounds::d_rounds(&mut state);
  2,854 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
    592 ( 0.00%)          state.v1 ^= 0xdd;
      .                   Sip24Rounds::d_rounds(&mut state);
    592 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
      .                   (_0, _1)
      .               }
      .           }
      .           
      .           impl Hasher for SipHasher128 {
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
      .           }
      .           
      .           #[derive(Debug, Clone, Default)]
      .           struct Sip24Rounds;
      .           
      .           impl Sip24Rounds {
      .               #[inline]
      .               fn c_rounds(state: &mut State) {
142,637 ( 0.06%)          compress!(state);
163,152 ( 0.07%)          compress!(state);
      .               }
      .           
      .               #[inline]
      .               fn d_rounds(state: &mut State) {
  5,704 ( 0.00%)          compress!(state);
  5,704 ( 0.00%)          compress!(state);
  5,704 ( 0.00%)          compress!(state);
  4,575 ( 0.00%)          compress!(state);
      .               }
      .           }

 27,494 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 180 ----------------------------------------
        .           /// assert_eq!(v, &[0.into()]);
        .           ///
        .           /// // Ensure that the last item was dropped.
        .           /// assert!(weak.upgrade().is_none());
        .           /// ```
        .           #[stable(feature = "drop_in_place", since = "1.8.0")]
        .           #[lang = "drop_in_place"]
        .           #[allow(unconditional_recursion)]
1,761,213 ( 0.76%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
        .               // Code here does not matter - this is replaced by the
        .               // real drop glue by the compiler.
        .           
        .               // SAFETY: see comment above
        .               unsafe { drop_in_place(to_drop) }
        .           }
        .           
        .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 366 ----------------------------------------
        .               let mut tmp = MaybeUninit::<T>::uninit();
        .           
        .               // Perform the swap
        .               // SAFETY: the caller must guarantee that `x` and `y` are
        .               // valid for writes and properly aligned. `tmp` cannot be
        .               // overlapping either `x` or `y` because `tmp` was just allocated
        .               // on the stack as a separate allocated object.
        .               unsafe {
       16 ( 0.00%)          copy_nonoverlapping(x, tmp.as_mut_ptr(), 1);
       16 ( 0.00%)          copy(y, x, 1); // `x` and `y` may overlap
        .                   copy_nonoverlapping(tmp.as_ptr(), y, 1);
        .               }
        .           }
        .           
        .           /// Swaps `count * size_of::<T>()` bytes between the two regions of memory
        .           /// beginning at `x` and `y`. The two regions must *not* overlap.
        .           ///
        .           /// # Safety
-- line 383 ----------------------------------------
-- line 448 ----------------------------------------
        .                       return;
        .                   }
        .               }
        .           
        .               // Direct swapping, for the cases not going through the block optimization.
        .               // SAFETY: the caller must guarantee that `x` and `y` are valid
        .               // for writes, properly aligned, and non-overlapping.
        .               unsafe {
       12 ( 0.00%)          let z = read(x);
        .                   copy_nonoverlapping(y, x, 1);
        .                   write(y, z);
        .               }
        .           }
        .           
        .           #[inline]
        .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
-- line 464 ----------------------------------------
-- line 693 ----------------------------------------
        .               let mut tmp = MaybeUninit::<T>::uninit();
        .               // SAFETY: the caller must guarantee that `src` is valid for reads.
        .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
        .               // the stack as a separate allocated object.
        .               //
        .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
        .               // to be properly initialized.
        .               unsafe {
   60,851 ( 0.03%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
  260,641 ( 0.11%)          tmp.assume_init()
        .               }
        .           }
        .           
        .           /// Reads the value from `src` without moving it. This leaves the
        .           /// memory in `src` unchanged.
        .           ///
        .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
        .           ///
-- line 710 ----------------------------------------
-- line 884 ----------------------------------------
        .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
        .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
        .               }
        .           
        .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
        .               // `dst` cannot overlap `src` because the caller has mutable access
        .               // to `dst` while `src` is owned by this function.
        .               unsafe {
3,377,760 ( 1.46%)          copy_nonoverlapping(&src as *const T, dst, 1);
        .                   intrinsics::forget(src);
        .               }
        .           }
        .           
        .           /// Overwrites a memory location with the given value without reading or
        .           /// dropping the old value.
        .           ///
        .           /// Unlike [`write()`], the pointer may be unaligned.
-- line 900 ----------------------------------------
-- line 1206 ----------------------------------------
        .               if stride == 1 {
        .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
        .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
        .                   //
        .                   //    round_up_to_next_alignment(p, a) - p
        .                   //
        .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
        .                   // for LLVM to be able to utilize the various optimizations it knows about.
       89 ( 0.00%)          return wrapping_sub(
      468 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
        .                       p as usize,
        .                   );
        .               }
        .           
        .               let pmoda = p as usize & a_minus_one;
        .               if pmoda == 0 {
        .                   // Already aligned. Yay!
        .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
        .           /// assert!(std::ptr::eq(
        .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
        .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
        .           /// ));
        .           /// ```
        .           #[stable(feature = "ptr_eq", since = "1.17.0")]
        .           #[inline]
        .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
   86,254 ( 0.04%)      a == b
        .           }
        .           
        .           /// Hash a raw pointer.
        .           ///
        .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
        .           /// by its address rather than the value it points to
        .           /// (which is what the `Hash for &T` implementation does).
        .           ///
-- line 1364 ----------------------------------------

  287,811 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 108 ----------------------------------------
      .                   suppress_errors: bool,
      .               },
      .           }
      .           
      .           impl RegionckMode {
      .               /// Indicates that the MIR borrowck will repeat these region
      .               /// checks, so we should ignore errors if NLL is (unconditionally)
      .               /// enabled.
     10 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
      .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
      .                   // this always `true` and then proceed to eliminate the dead code.
     10 ( 0.00%)          match tcx.borrowck_mode() {
      .                       // If we're on Migrate mode, report AST region errors
      .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
      .           
      .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
      .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
      .                   }
     20 ( 0.00%)      }
      .           }
      .           
      .           /// This type contains all the things within `InferCtxt` that sit within a
      .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
      .           /// operations are hot enough that we want only one call to `borrow_mut` per
      .           /// call to `start_snapshot` and `rollback_to`.
      .           pub struct InferCtxtInner<'tcx> {
      .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
      .               /// type instantiations (`ty::Infer`) to the actual opaque
      .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
      .               /// opaque type inference variables to their corresponding
      .               /// opaque type.
      .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
      .           }
      .           
      .           impl<'tcx> InferCtxtInner<'tcx> {
  6,285 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
 42,738 ( 0.02%)          InferCtxtInner {
      .                       projection_cache: Default::default(),
      .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
      .                       undo_log: InferCtxtUndoLogs::default(),
      .                       const_unification_storage: ut::UnificationTableStorage::new(),
      .                       int_unification_storage: ut::UnificationTableStorage::new(),
      .                       float_unification_storage: ut::UnificationTableStorage::new(),
  3,771 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
      .                       region_obligations: vec![],
      .                       opaque_types: Default::default(),
      .                       opaque_types_vars: Default::default(),
      .                   }
  7,542 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
      .                   &self.region_obligations
      .               }
      .           
      .               #[inline]
      .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
    458 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
 57,520 ( 0.02%)          self.type_variable_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn int_unification_table(
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::IntVid,
-- line 245 ----------------------------------------
-- line 268 ----------------------------------------
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::ConstVid<'tcx>,
      .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
      .                       &mut InferCtxtUndoLogs<'tcx>,
      .                   >,
      .               > {
    166 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
  7,284 ( 0.00%)          self.region_constraint_storage
      .                       .as_mut()
      .                       .expect("region constraints already solved")
  9,002 ( 0.00%)              .with_log(&mut self.undo_log)
      .               }
      .           }
      .           
      .           pub struct InferCtxt<'a, 'tcx> {
      .               pub tcx: TyCtxt<'tcx>,
      .           
      .               /// The `DefId` of the item in whose context we are performing inference or typeck.
      .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
      .               /// item we are type-checking, and just consider those names as
      .               /// part of the root universe. So this would only get incremented
      .               /// when we enter into a higher-ranked (`for<..>`) type or trait
      .               /// bound.
      .               universe: Cell<ty::UniverseIndex>,
      .           }
      .           
      .           /// See the `error_reporting` module for more details.
 12,160 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
      .           pub enum ValuePairs<'tcx> {
      .               Types(ExpectedFound<Ty<'tcx>>),
      .               Regions(ExpectedFound<ty::Region<'tcx>>),
      .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
      .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
      .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
      .           }
      .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
      .           pub struct TypeTrace<'tcx> {
      .               cause: ObligationCause<'tcx>,
      .               values: ValuePairs<'tcx>,
      .           }
      .           
      .           /// The origin of a `r1 <= r2` constraint.
      .           ///
      .           /// See `error_reporting` module for more details
 10,615 ( 0.00%)  #[derive(Clone, Debug)]
      .           pub enum SubregionOrigin<'tcx> {
      .               /// Arose from a subtyping relation
    600 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
      .           
      .               /// When casting `&'a T` to an `&'b Trait` object,
      .               /// relating `'a` to `'b`
      .               RelateObjectBound(Span),
      .           
      .               /// Some type parameter was instantiated with the given type,
      .               /// and that type must outlive some region.
     72 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
      .           
      .               /// The given region parameter was instantiated with a region
      .               /// that must outlive some other region.
      .               RelateRegionParamBound(Span),
      .           
      .               /// Creating a pointer `b` to contents of another reference
      .               Reborrow(Span),
      .           
      .               /// Creating a pointer `b` to contents of an upvar
      .               ReborrowUpvar(Span, ty::UpvarId),
      .           
      .               /// Data with type `Ty<'tcx>` was borrowed
    106 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
      .           
      .               /// (&'a &'b T) where a >= b
     83 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
      .           
      .               /// Comparing the signature and requirements of an impl method against
      .               /// the containing trait.
      .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
      .           
      .               /// Comparing the signature and requirements of an impl associated type
      .               /// against the containing trait
      .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
      .               defining_use_anchor: Option<LocalDefId>,
      .           }
      .           
      .           pub trait TyCtxtInferExt<'tcx> {
      .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
      .           }
      .           
      .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
  1,257 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
  3,771 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
  1,257 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> InferCtxtBuilder<'tcx> {
      .               /// Used only by `rustc_typeck` during body type-checking/inference,
      .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
      .               /// Will also change the scope for opaque type defining use checks to the given owner.
    234 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
    286 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
    130 ( 0.00%)          self.with_opaque_type_inference(table_owner)
    182 ( 0.00%)      }
      .           
      .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
      .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
      .               ///
      .               /// It is only meant to be called in two places, for typeck
      .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
      .               /// in mir borrowck.
     32 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
     16 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
     84 ( 0.00%)          self
     48 ( 0.00%)      }
      .           
      .               /// Given a canonical value `C` as a starting point, create an
      .               /// inference context that contains each of the bound values
      .               /// within instantiated as a fresh variable. The `f` closure is
      .               /// invoked with the new infcx, along with the instantiated value
      .               /// `V` and a substitution `S`. This substitution `S` maps from
      .               /// the bound values in `C` to their instantiated values in `V`
      .               /// (in other words, `S(C) = V`).
  3,531 ( 0.00%)      pub fn enter_with_canonical<T, R>(
      .                   &mut self,
      .                   span: Span,
      .                   canonical: &Canonical<'tcx, T>,
      .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
      .               ) -> R
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   self.enter(|infcx| {
  4,336 ( 0.00%)              let (value, subst) =
    224 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
  6,546 ( 0.00%)              f(infcx, value, subst)
      .                   })
  3,823 ( 0.00%)      }
      .           
  5,075 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
  3,472 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
      .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
 52,213 ( 0.02%)          f(InferCtxt {
      .                       tcx,
      .                       defining_use_anchor,
      .                       in_progress_typeck_results,
  1,257 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
      .                       lexical_region_resolutions: RefCell::new(None),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      .                       reported_trait_errors: Default::default(),
      .                       reported_closure_mismatch: Default::default(),
      .                       tainted_by_errors_flag: Cell::new(false),
  1,257 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
      .                       in_snapshot: Cell::new(false),
      .                       skip_leak_check: Cell::new(false),
      .                       universe: Cell::new(ty::UniverseIndex::ROOT),
      .                   })
  5,439 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, T> InferOk<'tcx, T> {
      .               pub fn unit(self) -> InferOk<'tcx, ()> {
      .                   InferOk { value: (), obligations: self.obligations }
      .               }
      .           
      .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
      .               pub fn into_value_registering_obligations(
      .                   self,
      .                   infcx: &InferCtxt<'_, 'tcx>,
      .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
      .               ) -> T {
     79 ( 0.00%)          let InferOk { value, obligations } = self;
    344 ( 0.00%)          for obligation in obligations {
      .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
      .                   }
      .                   value
      .               }
      .           }
      .           
      .           impl<'tcx> InferOk<'tcx, ()> {
    784 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
  3,136 ( 0.00%)          self.obligations
    784 ( 0.00%)      }
      .           }
      .           
      .           #[must_use = "once you start a snapshot, you should always consume it"]
      .           pub struct CombinedSnapshot<'a, 'tcx> {
      .               undo_snapshot: Snapshot<'tcx>,
      .               region_constraints_snapshot: RegionSnapshot,
      .               universe: ty::UniverseIndex,
      .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
      .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
      .                   debug!("canonical consts: {:?}", &canonical.value);
      .           
      .                   self.tcx.try_unify_abstract_consts(canonical.value)
      .               }
      .           
      .               pub fn is_in_snapshot(&self) -> bool {
      .                   self.in_snapshot.get()
  1,918 ( 0.00%)      }
      .           
 12,144 ( 0.01%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
 13,662 ( 0.01%)          t.fold_with(&mut self.freshener())
 13,662 ( 0.01%)      }
      .           
      .               /// Returns the origin of the type variable identified by `vid`, or `None`
      .               /// if this is not a type variable.
      .               ///
      .               /// No attempt is made to resolve `ty`.
     32 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
     64 ( 0.00%)          match *ty.kind() {
     16 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
     64 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
      .                       }
      .                       _ => None,
      .                   }
     64 ( 0.00%)      }
      .           
  1,518 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
      .                   freshen::TypeFreshener::new(self, false)
  1,518 ( 0.00%)      }
      .           
      .               /// Like `freshener`, but does not replace `'static` regions.
  6,101 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
      .                   freshen::TypeFreshener::new(self, true)
  6,101 ( 0.00%)      }
      .           
     52 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
     26 ( 0.00%)          let mut inner = self.inner.borrow_mut();
     26 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
      .                       .type_variables()
      .                       .unsolved_variables()
      .                       .into_iter()
     32 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
      .                       .collect();
      .                   vars.extend(
      .                       (0..inner.int_unification_table().len())
      .                           .map(|i| ty::IntVid { index: i as u32 })
      .                           .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
      .                           .map(|v| self.tcx.mk_int_var(v)),
      .                   );
      .                   vars.extend(
      .                       (0..inner.float_unification_table().len())
      .                           .map(|i| ty::FloatVid { index: i as u32 })
      .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
      .                           .map(|v| self.tcx.mk_float_var(v)),
      .                   );
      .                   vars
     91 ( 0.00%)      }
      .           
  2,714 ( 0.00%)      fn combine_fields(
      .                   &'a self,
      .                   trace: TypeTrace<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .               ) -> CombineFields<'a, 'tcx> {
 10,864 ( 0.00%)          CombineFields {
      .                       infcx: self,
 27,160 ( 0.01%)              trace,
      .                       cause: None,
      .                       param_env,
      .                       obligations: PredicateObligations::new(),
      .                   }
  2,714 ( 0.00%)      }
      .           
      .               /// Clear the "currently in a snapshot" flag, invoke the closure,
      .               /// then restore the flag to its original value. This flag is a
      .               /// debugging measure designed to detect cases where we start a
      .               /// snapshot, create type variables, and register obligations
      .               /// which may involve those type variables in the fulfillment cx,
      .               /// potentially leaving "dangling type variables" behind.
      .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 755 ----------------------------------------
      .               /// better than grovelling through megabytes of `RUSTC_LOG` output.
      .               ///
      .               /// HOWEVER, in some cases the flag is unhelpful. In particular, we
      .               /// sometimes create a "mini-fulfilment-cx" in which we enroll
      .               /// obligations. As long as this fulfillment cx is fully drained
      .               /// before we return, this is not a problem, as there won't be any
      .               /// escaping obligations in the main cx. In those cases, you can
      .               /// use this function.
      8 ( 0.00%)      pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
      .               where
      .                   F: FnOnce(&Self) -> R,
      .               {
      .                   let flag = self.in_snapshot.replace(false);
    975 ( 0.00%)          let result = func(self);
      .                   self.in_snapshot.set(flag);
      .                   result
      9 ( 0.00%)      }
      .           
 15,082 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
      .                   debug!("start_snapshot()");
      .           
      .                   let in_snapshot = self.in_snapshot.replace(true);
      .           
      .                   let mut inner = self.inner.borrow_mut();
      .           
 45,246 ( 0.02%)          CombinedSnapshot {
      .                       undo_snapshot: inner.undo_log.start_snapshot(),
      .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
      .                       universe: self.universe(),
      .                       was_in_snapshot: in_snapshot,
      .                       // Borrow typeck results "in progress" (i.e., during typeck)
      .                       // to ban writes from within a snapshot to them.
  7,541 ( 0.00%)              _in_progress_typeck_results: self
      .                           .in_progress_typeck_results
      .                           .map(|typeck_results| typeck_results.borrow()),
      .                   }
 30,164 ( 0.01%)      }
      .           
 28,413 ( 0.01%)      #[instrument(skip(self, snapshot), level = "debug")]
      .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
      .                   let CombinedSnapshot {
  2,583 ( 0.00%)              undo_snapshot,
  2,583 ( 0.00%)              region_constraints_snapshot,
  2,583 ( 0.00%)              universe,
  2,583 ( 0.00%)              was_in_snapshot,
  5,166 ( 0.00%)              _in_progress_typeck_results,
      .                   } = snapshot;
      .           
      .                   self.in_snapshot.set(was_in_snapshot);
      .                   self.universe.set(universe);
      .           
      .                   let mut inner = self.inner.borrow_mut();
  2,583 ( 0.00%)          inner.rollback_to(undo_snapshot);
      .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
      .               }
      .           
 74,370 ( 0.03%)      #[instrument(skip(self, snapshot), level = "debug")]
      .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
      .                   let CombinedSnapshot {
  4,958 ( 0.00%)              undo_snapshot,
      .                       region_constraints_snapshot: _,
      .                       universe: _,
  4,958 ( 0.00%)              was_in_snapshot,
  9,916 ( 0.00%)              _in_progress_typeck_results,
      .                   } = snapshot;
      .           
      .                   self.in_snapshot.set(was_in_snapshot);
      .           
      .                   self.inner.borrow_mut().commit(undo_snapshot);
      .               }
      .           
      .               /// Executes `f` and commit the bindings.
  4,253 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
  5,280 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
    480 ( 0.00%)          let snapshot = self.start_snapshot();
  1,847 ( 0.00%)          let r = f(&snapshot);
  3,360 ( 0.00%)          self.commit_from(snapshot);
  2,741 ( 0.00%)          r
      .               }
      .           
      .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
 30,583 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
 37,751 ( 0.02%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
      .               {
  5,621 ( 0.00%)          let snapshot = self.start_snapshot();
 17,321 ( 0.01%)          let r = f(&snapshot);
      .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
  5,710 ( 0.00%)          match r {
      .                       Ok(_) => {
 31,856 ( 0.01%)                  self.commit_from(snapshot);
      .                       }
      .                       Err(_) => {
  6,474 ( 0.00%)                  self.rollback_to("commit_if_ok -- error", snapshot);
      .                       }
      .                   }
 31,684 ( 0.01%)          r
      .               }
      .           
      .               /// Execute `f` then unroll any bindings it creates.
 14,305 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
 16,517 ( 0.01%)      pub fn probe<R, F>(&self, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
  3,696 ( 0.00%)          let snapshot = self.start_snapshot();
  5,809 ( 0.00%)          let r = f(&snapshot);
 17,425 ( 0.01%)          self.rollback_to("probe", snapshot);
  3,209 ( 0.00%)          r
      .               }
      .           
      .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
      .               #[instrument(skip(self, f), level = "debug")]
      .               pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
-- line 875 ----------------------------------------
-- line 884 ----------------------------------------
      .                   r
      .               }
      .           
      .               /// Scan the constraints produced since `snapshot` began and returns:
      .               ///
      .               /// - `None` -- if none of them involve "region outlives" constraints
      .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
      .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
  1,252 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
      .                   &self,
      .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
      .               ) -> Option<bool> {
  2,504 ( 0.00%)          self.inner
      .                       .borrow_mut()
      .                       .unwrap_region_constraints()
      .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
  1,878 ( 0.00%)      }
      .           
      .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
      .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
      .               }
      .           
     24 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
      .               where
      .                   T: at::ToTrace<'tcx>,
      .               {
      .                   let origin = &ObligationCause::dummy();
      .                   self.probe(|_| {
      .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
      .                           // Ignore obligations, since we are unrolling
      .                           // everything anyway.
      .                       })
      .                   })
     18 ( 0.00%)      }
      .           
    168 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
      .               where
      .                   T: at::ToTrace<'tcx>,
      .               {
      .                   let origin = &ObligationCause::dummy();
      .                   self.probe(|_| {
      .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
      .                           // Ignore obligations, since we are unrolling
      .                           // everything anyway.
      .                       })
      .                   })
    126 ( 0.00%)      }
      .           
  4,110 ( 0.00%)      #[instrument(skip(self), level = "debug")]
      .               pub fn sub_regions(
      .                   &self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   a: ty::Region<'tcx>,
      .                   b: ty::Region<'tcx>,
      .               ) {
  3,699 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
      .               }
      .           
      .               /// Require that the region `r` be equal to one of the regions in
      .               /// the set `regions`.
      .               #[instrument(skip(self), level = "debug")]
      .               pub fn member_constraint(
      .                   &self,
      .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 983 ----------------------------------------
      .                   let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
      .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
      .                       a: p.a,
      .                       b: p.b,
      .                   });
      .                   self.subtype_predicate(cause, param_env, subtype_predicate)
      .               }
      .           
    624 ( 0.00%)      pub fn subtype_predicate(
      .                   &self,
      .                   cause: &ObligationCause<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   predicate: ty::PolySubtypePredicate<'tcx>,
      .               ) -> Option<InferResult<'tcx, ()>> {
      .                   // Check for two unresolved inference variables, in which case we can
      .                   // make no progress. This is partly a micro-optimization, but it's
      .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
      .                   // earlier that they are sub-unified).
      .                   //
      .                   // Note that we can just skip the binders here because
      .                   // type variables can't (at present, at
      .                   // least) capture any of the things bound by this binder.
      .                   //
      .                   // Note that this sub here is not just for diagnostics - it has semantic
      .                   // effects as well.
     52 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
     52 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
    408 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
    100 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
      .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
    100 ( 0.00%)                  return None;
      .                       }
      .                       _ => {}
      .                   }
      .           
      .                   Some(self.commit_if_ok(|_snapshot| {
      2 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
      .                           self.replace_bound_vars_with_placeholders(predicate);
      .           
      4 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
      .           
      .                       Ok(ok.unit())
      .                   }))
    468 ( 0.00%)      }
      .           
    996 ( 0.00%)      pub fn region_outlives_predicate(
      .                   &self,
      .                   cause: &traits::ObligationCause<'tcx>,
      .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
      .               ) -> UnitResult<'tcx> {
      .                   self.commit_if_ok(|_snapshot| {
      .                       let ty::OutlivesPredicate(r_a, r_b) =
      .                           self.replace_bound_vars_with_placeholders(predicate);
      .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
      .                           RelateRegionParamBound(cause.span)
      .                       });
    830 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
      .                       Ok(())
      .                   })
    664 ( 0.00%)      }
      .           
      .               /// Number of type variables created so far.
      3 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
      .                   self.inner.borrow_mut().type_variables().num_vars()
      6 ( 0.00%)      }
      .           
  1,302 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
  6,510 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
  1,953 ( 0.00%)      }
      .           
  1,054 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
  4,433 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
  1,581 ( 0.00%)      }
      .           
    188 ( 0.00%)      pub fn next_ty_var_in_universe(
      .                   &self,
      .                   origin: TypeVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> Ty<'tcx> {
  1,034 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
     94 ( 0.00%)          self.tcx.mk_ty_var(vid)
    282 ( 0.00%)      }
      .           
      .               pub fn next_const_var(
      .                   &self,
      .                   ty: Ty<'tcx>,
      .                   origin: ConstVariableOrigin,
      .               ) -> &'tcx ty::Const<'tcx> {
      .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
      .               }
-- line 1074 ----------------------------------------
-- line 1108 ----------------------------------------
      .           
      .               pub fn next_float_var(&self) -> Ty<'tcx> {
      .                   self.tcx.mk_float_var(self.next_float_var_id())
      .               }
      .           
      .               /// Creates a fresh region variable with the next available index.
      .               /// The variable will be created in the maximum universe created
      .               /// thus far, allowing it to name any region created thus far.
    744 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
 17,782 ( 0.01%)          self.next_region_var_in_universe(origin, self.universe())
  1,488 ( 0.00%)      }
      .           
      .               /// Creates a fresh region variable with the next available index
      .               /// in the given universe; typically, you can use
      .               /// `next_region_var` and just use the maximal universe.
  7,244 ( 0.00%)      pub fn next_region_var_in_universe(
      .                   &self,
      .                   origin: RegionVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> ty::Region<'tcx> {
      .                   let region_var =
 47,086 ( 0.02%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
 18,110 ( 0.01%)          self.tcx.mk_region(ty::ReVar(region_var))
 10,866 ( 0.00%)      }
      .           
      .               /// Return the universe that the region `r` was created in.  For
      .               /// most regions (e.g., `'static`, named regions from the user,
      .               /// etc) this is the root universe U0. For inference variables or
      .               /// placeholders, however, it will return the universe which which
      .               /// they are associated.
    466 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
      .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
    699 ( 0.00%)      }
      .           
      .               /// Number of region variables created so far.
    140 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
      .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
    210 ( 0.00%)      }
      .           
      .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
  1,498 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
      .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
  2,996 ( 0.00%)      }
      .           
      .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
    150 ( 0.00%)      pub fn next_nll_region_var_in_universe(
      .                   &self,
      .                   origin: NllRegionVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> ty::Region<'tcx> {
  1,094 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
    300 ( 0.00%)      }
      .           
 11,376 ( 0.00%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
  6,224 ( 0.00%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
      .                           // Create a region inference variable for the given
      .                           // region parameter definition.
    443 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
      .                       }
      .                       GenericParamDefKind::Type { .. } => {
      .                           // Create a type inference variable for the given
      .                           // type parameter definition. The substitutions are
      .                           // for actual parameters that may be referred to by
      .                           // the default of this type parameter, if it exists.
      .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
      .                           // used in a path such as `Foo::<T, U>::new()` will
      .                           // use an inference variable for `C` with `[T, U]`
      .                           // as the substitutions for the default, `(T, U)`.
  3,912 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
      .                               self.universe(),
  4,890 ( 0.00%)                      TypeVariableOrigin {
      .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
    978 ( 0.00%)                              param.name,
    978 ( 0.00%)                              Some(param.def_id),
      .                                   ),
      .                                   span,
      .                               },
      .                           );
      .           
    978 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
      .                       }
      .                       GenericParamDefKind::Const { .. } => {
      .                           let origin = ConstVariableOrigin {
      .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
      .                                   param.name,
      .                                   param.def_id,
      .                               ),
      .                               span,
      .                           };
      .                           let const_var_id =
     11 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
      .                                   origin,
      .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
      .                               });
      1 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
      .                       }
      .                   }
      8 ( 0.00%)      }
      .           
      .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
      .               /// type/region parameter to a fresh inference variable.
  2,295 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
 11,075 ( 0.00%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
  1,530 ( 0.00%)      }
      .           
      .               /// Returns `true` if errors have been reported since this infcx was
      .               /// created. This is sometimes used as a heuristic to skip
      .               /// reporting errors that often occur as a result of earlier
      .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
      .               /// inference variables, regionck errors).
     52 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
      .                   debug!(
      .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
      .                        tainted_by_errors_flag={})",
      .                       self.tcx.sess.err_count(),
      .                       self.err_count_on_creation,
      .                       self.tainted_by_errors_flag.get()
      .                   );
      .           
  2,444 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
      .                       return true; // errors reported since this infcx was made
      .                   }
      .                   self.tainted_by_errors_flag.get()
     78 ( 0.00%)      }
      .           
      .               /// Set the "tainted by errors" flag to true. We call this when we
      .               /// observe an error from a prior pass.
      .               pub fn set_tainted_by_errors(&self) {
      .                   debug!("set_tainted_by_errors()");
      .                   self.tainted_by_errors_flag.set(true)
      .               }
      .           
      .               /// Process the region constraints and return any any errors that
      .               /// result. After this, no more unification operations should be
      .               /// done -- or the compiler will panic -- but it is legal to use
      .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
  2,639 ( 0.00%)      pub fn resolve_regions(
      .                   &self,
      .                   region_context: DefId,
      .                   outlives_env: &OutlivesEnvironment<'tcx>,
      .                   mode: RegionckMode,
      .               ) -> Vec<RegionResolutionError<'tcx>> {
  7,163 ( 0.00%)          let (var_infos, data) = {
      .                       let mut inner = self.inner.borrow_mut();
      .                       let inner = &mut *inner;
    377 ( 0.00%)              assert!(
  1,131 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
      .                           "region_obligations not empty: {:#?}",
      .                           inner.region_obligations
      .                       );
      .                       inner
      .                           .region_constraint_storage
      .                           .take()
      .                           .expect("regions already resolved")
      .                           .with_log(&mut inner.undo_log)
      .                           .into_infos_and_data()
    377 ( 0.00%)          };
      .           
      .                   let region_rels =
    377 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
      .           
  3,393 ( 0.00%)          let (lexical_region_resolutions, errors) =
  9,048 ( 0.00%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
      .           
  1,508 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
    377 ( 0.00%)          assert!(old_value.is_none());
      .           
      .                   errors
  3,393 ( 0.00%)      }
      .           
      .               /// Process the region constraints and report any errors that
      .               /// result. After this, no more unification operations should be
      .               /// done -- or the compiler will panic -- but it is legal to use
      .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
  3,770 ( 0.00%)      pub fn resolve_regions_and_report_errors(
      .                   &self,
      .                   region_context: DefId,
      .                   outlives_env: &OutlivesEnvironment<'tcx>,
      .                   mode: RegionckMode,
      .               ) {
    754 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
      .           
  1,131 ( 0.00%)          if !self.is_tainted_by_errors() {
      .                       // As a heuristic, just skip reporting region errors
      .                       // altogether if other errors have been reported while
      .                       // this infcx was in use.  This is totally hokey but
      .                       // otherwise we have a hard time separating legit region
      .                       // errors from silly ones.
    754 ( 0.00%)              self.report_region_errors(&errors);
      .                   }
  1,885 ( 0.00%)      }
      .           
      .               /// Obtains (and clears) the current set of region
      .               /// constraints. The inference context is still usable: further
      .               /// unifications will simply add new constraints.
      .               ///
      .               /// This method is not meant to be used with normal lexical region
      .               /// resolution. Rather, it is used in the NLL mode as a kind of
      .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
      .               }
      .           
      .               /// Gives temporary access to the region constraint data.
      .               pub fn with_region_constraints<R>(
      .                   &self,
      .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
      .               ) -> R {
      .                   let mut inner = self.inner.borrow_mut();
  1,268 ( 0.00%)          op(inner.unwrap_region_constraints().data())
      .               }
      .           
      .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
      .                   let mut inner = self.inner.borrow_mut();
      .                   let inner = &mut *inner;
      .                   inner
      .                       .region_constraint_storage
      .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
      .                       .var_origin(vid)
      .               }
      .           
      .               /// Takes ownership of the list of variable regions. This implies
      .               /// that all the region constraints have already been taken, and
      .               /// hence that `resolve_regions_and_report_errors` can never be
      .               /// called. This is used only during NLL processing to "hand off" ownership
      .               /// of the set of region variables into the NLL region context.
     80 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
      .                   let mut inner = self.inner.borrow_mut();
    304 ( 0.00%)          let (var_infos, data) = inner
      .                       .region_constraint_storage
      .                       .take()
      .                       .expect("regions already resolved")
      .                       .with_log(&mut inner.undo_log)
     16 ( 0.00%)              .into_infos_and_data();
     16 ( 0.00%)          assert!(data.is_empty());
      .                   var_infos
    128 ( 0.00%)      }
      .           
      .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
      .                   self.resolve_vars_if_possible(t).to_string()
      .               }
      .           
      .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
      .               /// universe index of `TyVar(vid)`.
    848 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
      .                   use self::type_variable::TypeVariableValue;
      .           
  2,544 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
      .                       TypeVariableValue::Known { value } => Ok(value),
      .                       TypeVariableValue::Unknown { universe } => Err(universe),
      .                   }
  2,968 ( 0.00%)      }
      .           
      .               /// Resolve any type variables found in `value` -- but only one
      .               /// level.  So, if the variable `?X` is bound to some type
      .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
      .               /// itself be bound to a type).
      .               ///
      .               /// Useful when you only need to inspect the outermost level of
      .               /// the type and don't care about nested types (or perhaps you
      .               /// will be resolving them as well, e.g. in a loop).
      .               pub fn shallow_resolve<T>(&self, value: T) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 14,950 ( 0.01%)          value.fold_with(&mut ShallowResolver { infcx: self })
      .               }
      .           
  1,642 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
      .                   self.inner.borrow_mut().type_variables().root_var(var)
  2,463 ( 0.00%)      }
      .           
      .               /// Where possible, replaces type/const variables in
      .               /// `value` with their final value. Note that region variables
      .               /// are unaffected. If a type/const variable has not been unified, it
      .               /// is left as is. This is an idempotent operation that does
      .               /// not affect inference state in any way and so you can do it
      .               /// at will.
     92 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 13,636 ( 0.01%)          if !value.needs_infer() {
  7,873 ( 0.00%)              return value; // Avoid duplicated subst-folding.
      .                   }
 15,394 ( 0.01%)          let mut r = resolve::OpportunisticVarResolver::new(self);
 20,666 ( 0.01%)          value.fold_with(&mut r)
    115 ( 0.00%)      }
      .           
      .               /// Returns the first unresolved variable contained in `T`. In the
      .               /// process of visiting `T`, this will resolve (where possible)
      .               /// type variables in `T`, but it never constructs the final,
      .               /// resolved type, so it's more efficient than
      .               /// `resolve_vars_if_possible()`.
      .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
      .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
      .                   expected: &'tcx ty::Const<'tcx>,
      .                   actual: &'tcx ty::Const<'tcx>,
      .                   err: TypeError<'tcx>,
      .               ) -> DiagnosticBuilder<'tcx> {
      .                   let trace = TypeTrace::consts(cause, true, expected, actual);
      .                   self.report_and_explain_type_error(trace, &err)
      .               }
      .           
  1,494 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
      .                   &self,
      .                   span: Span,
      .                   lbrct: LateBoundRegionConversionTime,
      .                   value: ty::Binder<'tcx, T>,
      .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   let fld_r =
  8,911 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
      .                   let fld_t = |_| {
      .                       self.next_ty_var(TypeVariableOrigin {
      .                           kind: TypeVariableOriginKind::MiscVariable,
      .                           span,
      .                       })
      .                   };
      .                   let fld_c = |_, ty| {
      .                       self.next_const_var(
      .                           ty,
      .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
      .                       )
      .                   };
  8,684 ( 0.00%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
    996 ( 0.00%)      }
      .           
      .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
      .               pub fn verify_generic_bound(
      .                   &self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   kind: GenericKind<'tcx>,
      .                   a: ty::Region<'tcx>,
      .                   bound: VerifyBound<'tcx>,
-- line 1530 ----------------------------------------
-- line 1535 ----------------------------------------
      .                       .borrow_mut()
      .                       .unwrap_region_constraints()
      .                       .verify_generic_bound(origin, kind, a, bound);
      .               }
      .           
      .               /// Obtains the latest type of the given closure; this may be a
      .               /// closure in the current function, in which case its
      .               /// `ClosureKind` may not yet be known.
    124 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
    248 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
      .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
    186 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
      .               }
      .           
      .               /// Clears the selection, evaluation, and projection caches. This is useful when
      .               /// repeatedly attempting to select an `Obligation` while changing only
      .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
      .               pub fn clear_caches(&self) {
      .                   self.selection_cache.clear();
      .                   self.evaluation_cache.clear();
      .                   self.inner.borrow_mut().projection_cache().clear();
      .               }
      .           
      .               pub fn universe(&self) -> ty::UniverseIndex {
 24,389 ( 0.01%)          self.universe.get()
  8,834 ( 0.00%)      }
      .           
      .               /// Creates and return a fresh universe that extends all previous
      .               /// universes. Updates `self.universe` to that new universe.
    152 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
    234 ( 0.00%)          let u = self.universe.get().next_universe();
      .                   self.universe.set(u);
      .                   u
    152 ( 0.00%)      }
      .           
      .               /// Resolves and evaluates a constant.
      .               ///
      .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
      .               /// substitutions and environment are used to resolve the constant. Alternatively if the
      .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
      .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
      .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
-- line 1576 ----------------------------------------
-- line 1606 ----------------------------------------
      .                   // variables, thus we don't need to substitute back the original values.
      .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
      .               }
      .           
      .               /// If `typ` is a type variable of some kind, resolve it one level
      .               /// (but do not resolve types found in the result). If `typ` is
      .               /// not a type variable, just return it unmodified.
      .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
163,824 ( 0.07%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
 87,384 ( 0.04%)          match *typ.kind() {
      .                       ty::Infer(ty::TyVar(v)) => {
      .                           // Not entirely obvious: if `typ` is a type variable,
      .                           // it can be resolved to an int/float variable, which
      .                           // can then be recursively resolved, hence the
      .                           // recursion. Note though that we prevent type
      .                           // variables from unifying to other type variables
      .                           // directly (though they may be embedded
      .                           // structurally), and we prevent cycles in any case,
      .                           // so this recursion should always be of very limited
      .                           // depth.
      .                           //
      .                           // Note: if these two lines are combined into one we get
      .                           // dynamic borrow errors on `self.inner`.
 47,516 ( 0.02%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
      .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
      .                       }
      .           
      .                       ty::Infer(ty::IntVar(v)) => self
      .                           .inner
      .                           .borrow_mut()
      .                           .int_unification_table()
      .                           .probe_value(v)
-- line 1637 ----------------------------------------
-- line 1643 ----------------------------------------
      .                           .borrow_mut()
      .                           .float_unification_table()
      .                           .probe_value(v)
      .                           .map(|v| v.to_type(self.tcx))
      .                           .unwrap_or(typ),
      .           
      .                       _ => typ,
      .                   }
184,302 ( 0.08%)      }
      .           
      .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
      .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
      .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
      .               ///
      .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
      .               /// inlined, despite being large, because it has only two call sites that
      .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
      .               #[inline(always)]
      .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
      .                   match infer_var {
      .                       TyOrConstInferVar::Ty(v) => {
      .                           use self::type_variable::TypeVariableValue;
      .           
      .                           // If `inlined_probe` returns a `Known` value, it never equals
      .                           // `ty::Infer(ty::TyVar(v))`.
160,015 ( 0.07%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
      .                               TypeVariableValue::Unknown { .. } => false,
      .                               TypeVariableValue::Known { .. } => true,
      .                           }
      .                       }
      .           
      .                       TyOrConstInferVar::TyInt(v) => {
      .                           // If `inlined_probe_value` returns a value it's always a
      .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
-- line 1678 ----------------------------------------
-- line 1716 ----------------------------------------
      .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
      .               Const(ConstVid<'tcx>),
      .           }
      .           
      .           impl<'tcx> TyOrConstInferVar<'tcx> {
      .               /// Tries to extract an inference variable from a type or a constant, returns `None`
      .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
      .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
    606 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
      .                   match arg.unpack() {
      .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
      .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
      .                       GenericArgKind::Lifetime(_) => None,
      .                   }
    606 ( 0.00%)      }
      .           
      .               /// Tries to extract an inference variable from a type, returns `None`
      .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
     98 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
  6,336 ( 0.00%)          match *ty.kind() {
  1,408 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
      .                       ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
      .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
      .                       _ => None,
      .                   }
     98 ( 0.00%)      }
      .           
      .               /// Tries to extract an inference variable from a constant, returns `None`
      .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
      .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
      .                   match ct.val {
      .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
      .                       _ => None,
      .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
      .           }
      .           
      .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
      .                   self.infcx.tcx
      .               }
      .           
      .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
 30,952 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
      .               }
      .           
    436 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    220 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
      5 ( 0.00%)              self.infcx
      .                           .inner
      .                           .borrow_mut()
      .                           .const_unification_table()
      3 ( 0.00%)                  .probe_value(*vid)
      .                           .val
      .                           .known()
      .                           .unwrap_or(ct)
      .                   } else {
      .                       ct
      .                   }
    545 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TypeTrace<'tcx> {
      .               pub fn span(&self) -> Span {
     10 ( 0.00%)          self.cause.span
      .               }
      .           
      .               pub fn types(
      .                   cause: &ObligationCause<'tcx>,
      .                   a_is_expected: bool,
      .                   a: Ty<'tcx>,
      .                   b: Ty<'tcx>,
      .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
      .                   b: &'tcx ty::Const<'tcx>,
      .               ) -> TypeTrace<'tcx> {
      .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
      .               }
      .           }
      .           
      .           impl<'tcx> SubregionOrigin<'tcx> {
      .               pub fn span(&self) -> Span {
     25 ( 0.00%)          match *self {
      5 ( 0.00%)              Subtype(ref a) => a.span(),
      .                       RelateObjectBound(a) => a,
      .                       RelateParamBound(a, ..) => a,
      .                       RelateRegionParamBound(a) => a,
      .                       Reborrow(a) => a,
      .                       ReborrowUpvar(a, _) => a,
      .                       DataBorrowed(_, a) => a,
      .                       ReferenceOutlivesReferent(_, a) => a,
      .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
      .                       CompareImplTypeObligation { span, .. } => span,
      .                   }
      .               }
      .           
      .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
      .               where
      .                   F: FnOnce() -> Self,
      .               {
  1,871 ( 0.00%)          match *cause.code() {
    332 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
  1,660 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
      .                       }
      .           
      .                       traits::ObligationCauseCode::CompareImplMethodObligation {
      .                           impl_item_def_id,
      .                           trait_item_def_id,
      .                       } => SubregionOrigin::CompareImplMethodObligation {
      .                           span: cause.span,
      .                           impl_item_def_id,
-- line 1836 ----------------------------------------

215,634 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs
--------------------------------------------------------------------------------
Ir                 

-- line 223 ----------------------------------------
        .               fn eq(&self, other: &Rhs) -> bool;
        .           
        .               /// This method tests for `!=`.
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        .               fn ne(&self, other: &Rhs) -> bool {
    1,902 ( 0.00%)          !self.eq(other)
        .               }
        .           }
        .           
        .           /// Derive macro generating an impl of the trait `PartialEq`.
        .           #[rustc_builtin_macro]
        .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
        .           #[allow_internal_unstable(core_intrinsics, structural_match)]
        .           pub macro PartialEq($item:item) {
-- line 239 ----------------------------------------
-- line 328 ----------------------------------------
        .           /// assert_eq!(Ordering::Less, result);
        .           ///
        .           /// let result = 1.cmp(&1);
        .           /// assert_eq!(Ordering::Equal, result);
        .           ///
        .           /// let result = 2.cmp(&1);
        .           /// assert_eq!(Ordering::Greater, result);
        .           /// ```
    1,621 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Debug, Hash)]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[repr(i8)]
        .           pub enum Ordering {
        .               /// An ordering where a compared value is less than another.
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               Less = -1,
        .               /// An ordering where a compared value is equal to another.
        .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 344 ----------------------------------------
-- line 569 ----------------------------------------
        .               /// let result = x.0.cmp(&y.0).then_with(|| x.1.cmp(&y.1)).then_with(|| x.2.cmp(&y.2));
        .               ///
        .               /// assert_eq!(result, Ordering::Less);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "ordering_chaining", since = "1.17.0")]
        .               pub fn then_with<F: FnOnce() -> Ordering>(self, f: F) -> Ordering {
    1,348 ( 0.00%)          match self {
        .                       Equal => f(),
        .                       _ => self,
        .                   }
        .               }
        .           }
        .           
        .           /// A helper struct for reverse ordering.
        .           ///
-- line 585 ----------------------------------------
-- line 792 ----------------------------------------
        .               /// ```
        .               #[stable(feature = "ord_max_min", since = "1.21.0")]
        .               #[inline]
        .               #[must_use]
        .               fn max(self, other: Self) -> Self
        .               where
        .                   Self: Sized,
        .               {
    8,384 ( 0.00%)          max_by(self, other, Ord::cmp)
        .               }
        .           
        .               /// Compares and returns the minimum of two values.
        .               ///
        .               /// Returns the first argument if the comparison determines them to be equal.
        .               ///
        .               /// # Examples
        .               ///
-- line 808 ----------------------------------------
-- line 812 ----------------------------------------
        .               /// ```
        .               #[stable(feature = "ord_max_min", since = "1.21.0")]
        .               #[inline]
        .               #[must_use]
        .               fn min(self, other: Self) -> Self
        .               where
        .                   Self: Sized,
        .               {
      870 ( 0.00%)          min_by(self, other, Ord::cmp)
        .               }
        .           
        .               /// Restrict a value to a certain interval.
        .               ///
        .               /// Returns `max` if `self` is greater than `max`, and `min` if `self` is
        .               /// less than `min`. Otherwise this returns `self`.
        .               ///
        .               /// # Panics
-- line 828 ----------------------------------------
-- line 1097 ----------------------------------------
        .               /// let result = 2.0 < 1.0;
        .               /// assert_eq!(result, false);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        .               fn lt(&self, other: &Rhs) -> bool {
    5,390 ( 0.00%)          matches!(self.partial_cmp(other), Some(Less))
        .               }
        .           
        .               /// This method tests less than or equal to (for `self` and `other`) and is used by the `<=`
        .               /// operator.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1113 ----------------------------------------
-- line 1121 ----------------------------------------
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        .               fn le(&self, other: &Rhs) -> bool {
        .                   // Pattern `Some(Less | Eq)` optimizes worse than negating `None | Some(Greater)`.
        .                   // FIXME: The root cause was fixed upstream in LLVM with:
        .                   // https://github.com/llvm/llvm-project/commit/9bad7de9a3fb844f1ca2965f35d0c2a3d1e11775
        .                   // Revert this workaround once support for LLVM 12 gets dropped.
   41,294 ( 0.02%)          !matches!(self.partial_cmp(other), None | Some(Greater))
        .               }
        .           
        .               /// This method tests greater than (for `self` and `other`) and is used by the `>` operator.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let result = 1.0 > 2.0;
-- line 1137 ----------------------------------------
-- line 1140 ----------------------------------------
        .               /// let result = 2.0 > 2.0;
        .               /// assert_eq!(result, false);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        .               fn gt(&self, other: &Rhs) -> bool {
   76,991 ( 0.03%)          matches!(self.partial_cmp(other), Some(Greater))
        .               }
        .           
        .               /// This method tests greater than or equal to (for `self` and `other`) and is used by the `>=`
        .               /// operator.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1156 ----------------------------------------
-- line 1160 ----------------------------------------
        .               /// let result = 2.0 >= 2.0;
        .               /// assert_eq!(result, true);
        .               /// ```
        .               #[inline]
        .               #[must_use]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[default_method_body_is_const]
        .               fn ge(&self, other: &Rhs) -> bool {
        2 ( 0.00%)          matches!(self.partial_cmp(other), Some(Greater | Equal))
        .               }
        .           }
        .           
        .           /// Derive macro generating an impl of the trait `PartialOrd`.
        .           #[rustc_builtin_macro]
        .           #[stable(feature = "builtin_macro_prelude", since = "1.38.0")]
        .           #[allow_internal_unstable(core_intrinsics)]
        .           pub macro PartialOrd($item:item) {
-- line 1176 ----------------------------------------
-- line 1210 ----------------------------------------
        .           ///
        .           /// assert_eq!(cmp::min_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 1);
        .           /// assert_eq!(cmp::min_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
        .           pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
   18,695 ( 0.01%)      match compare(&v1, &v2) {
        .                   Ordering::Less | Ordering::Equal => v1,
        .                   Ordering::Greater => v2,
        .               }
        .           }
        .           
        .           /// Returns the element that gives the minimum value from the specified function.
        .           ///
        .           /// Returns the first argument if the comparison determines them to be equal.
-- line 1226 ----------------------------------------
-- line 1273 ----------------------------------------
        .           ///
        .           /// assert_eq!(cmp::max_by(-2, 1, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), -2);
        .           /// assert_eq!(cmp::max_by(-2, 2, |x: &i32, y: &i32| x.abs().cmp(&y.abs())), 2);
        .           /// ```
        .           #[inline]
        .           #[must_use]
        .           #[stable(feature = "cmp_min_max_by", since = "1.53.0")]
        .           pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
   50,878 ( 0.02%)      match compare(&v1, &v2) {
      270 ( 0.00%)          Ordering::Less | Ordering::Equal => v2,
        .                   Ordering::Greater => v1,
        .               }
        .           }
        .           
        .           /// Returns the element that gives the maximum value from the specified function.
        .           ///
        .           /// Returns the second argument if the comparison determines them to be equal.
        .           ///
-- line 1290 ----------------------------------------
-- line 1308 ----------------------------------------
        .               use crate::cmp::Ordering::{self, Equal, Greater, Less};
        .               use crate::hint::unreachable_unchecked;
        .           
        .               macro_rules! partial_eq_impl {
        .                   ($($t:ty)*) => ($(
        .                       #[stable(feature = "rust1", since = "1.0.0")]
        .                       impl PartialEq for $t {
        .                           #[inline]
      917 ( 0.00%)                  fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
        .                           #[inline]
   17,496 ( 0.01%)                  fn ne(&self, other: &$t) -> bool { (*self) != (*other) }
        .                       }
        .                   )*)
        .               }
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl PartialEq for () {
        .                   #[inline]
        .                   fn eq(&self, _other: &()) -> bool {
-- line 1326 ----------------------------------------
-- line 1392 ----------------------------------------
        .                   ($($t:ty)*) => ($(
        .                       #[stable(feature = "rust1", since = "1.0.0")]
        .                       impl PartialOrd for $t {
        .                           #[inline]
        .                           fn partial_cmp(&self, other: &$t) -> Option<Ordering> {
        .                               Some(self.cmp(other))
        .                           }
        .                           #[inline]
1,146,361 ( 0.49%)                  fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
        .                           #[inline]
    3,680 ( 0.00%)                  fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
        .                           #[inline]
        .                           fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }
        .                           #[inline]
        .                           fn gt(&self, other: &$t) -> bool { (*self) > (*other) }
        .                       }
        .           
        .                       #[stable(feature = "rust1", since = "1.0.0")]
        .                       impl Ord for $t {
        .                           #[inline]
        .                           fn cmp(&self, other: &$t) -> Ordering {
        .                               // The order here is important to generate more optimal assembly.
        .                               // See <https://github.com/rust-lang/rust/issues/63758> for more info.
  330,904 ( 0.14%)                      if *self < *other { Less }
        .                               else if *self == *other { Equal }
        .                               else { Greater }
        .                           }
        .                       }
        .                   )*)
        .               }
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
-- line 1423 ----------------------------------------
-- line 1430 ----------------------------------------
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl Ord for bool {
        .                   #[inline]
        .                   fn cmp(&self, other: &bool) -> Ordering {
        .                       // Casting to i8's and converting the difference to an Ordering generates
        .                       // more optimal assembly.
        .                       // See <https://github.com/rust-lang/rust/issues/66780> for more info.
    2,830 ( 0.00%)              match (*self as i8) - (*other as i8) {
        .                           -1 => Less,
        .                           0 => Equal,
        .                           1 => Greater,
        .                           // SAFETY: bool as i8 returns 0 or 1, so the difference can't be anything else
        .                           _ => unsafe { unreachable_unchecked() },
        .                       }
        .                   }
        .               }
-- line 1446 ----------------------------------------
-- line 1474 ----------------------------------------
        .               // & pointers
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized, B: ?Sized> PartialEq<&B> for &A
        .               where
        .                   A: PartialEq<B>,
        .               {
        .                   #[inline]
      582 ( 0.00%)          fn eq(&self, other: &&B) -> bool {
   77,253 ( 0.03%)              PartialEq::eq(*self, *other)
    9,889 ( 0.00%)          }
        .                   #[inline]
        .                   fn ne(&self, other: &&B) -> bool {
      120 ( 0.00%)              PartialEq::ne(*self, *other)
    2,727 ( 0.00%)          }
        .               }
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized, B: ?Sized> PartialOrd<&B> for &A
        .               where
        .                   A: PartialOrd<B>,
        .               {
        .                   #[inline]
        .                   fn partial_cmp(&self, other: &&B) -> Option<Ordering> {
-- line 1496 ----------------------------------------
-- line 1516 ----------------------------------------
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized> Ord for &A
        .               where
        .                   A: Ord,
        .               {
        .                   #[inline]
        .                   fn cmp(&self, other: &Self) -> Ordering {
        .                       Ord::cmp(*self, *other)
    2,231 ( 0.00%)          }
        .               }
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized> Eq for &A where A: Eq {}
        .           
        .               // &mut pointers
        .           
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               impl<A: ?Sized, B: ?Sized> PartialEq<&mut B> for &mut A
-- line 1532 ----------------------------------------

  196,771 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cmp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 71 ----------------------------------------
      .               fn default() -> FxHasher {
      .                   FxHasher { hash: 0 }
      .               }
      .           }
      .           
      .           impl FxHasher {
      .               #[inline]
      .               fn add_to_hash(&mut self, i: usize) {
220,366 ( 0.10%)          self.hash = self.hash.rotate_left(5).bitxor(i).wrapping_mul(K);
      .               }
      .           }
      .           
      .           impl Hasher for FxHasher {
      .               #[inline]
  1,981 ( 0.00%)      fn write(&mut self, mut bytes: &[u8]) {
      .                   #[cfg(target_pointer_width = "32")]
      .                   let read_usize = |bytes: &[u8]| u32::from_ne_bytes(bytes[..4].try_into().unwrap());
      .                   #[cfg(target_pointer_width = "64")]
      .                   let read_usize = |bytes: &[u8]| u64::from_ne_bytes(bytes[..8].try_into().unwrap());
      .           
 46,740 ( 0.02%)          let mut hash = FxHasher { hash: self.hash };
      .                   assert!(size_of::<usize>() <= 8);
606,107 ( 0.26%)          while bytes.len() >= size_of::<usize>() {
      .                       hash.add_to_hash(read_usize(bytes) as usize);
      .                       bytes = &bytes[size_of::<usize>()..];
      .                   }
 92,342 ( 0.04%)          if (size_of::<usize>() > 4) && (bytes.len() >= 4) {
      .                       hash.add_to_hash(u32::from_ne_bytes(bytes[..4].try_into().unwrap()) as usize);
      .                       bytes = &bytes[4..];
      .                   }
 92,342 ( 0.04%)          if (size_of::<usize>() > 2) && bytes.len() >= 2 {
      .                       hash.add_to_hash(u16::from_ne_bytes(bytes[..2].try_into().unwrap()) as usize);
      .                       bytes = &bytes[2..];
      .                   }
102,782 ( 0.04%)          if (size_of::<usize>() > 1) && bytes.len() >= 1 {
 22,817 ( 0.01%)              hash.add_to_hash(bytes[0] as usize);
      .                   }
  3,250 ( 0.00%)          self.hash = hash.hash;
  1,981 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
     73 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u16(&mut self, i: u16) {
     44 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u32(&mut self, i: u32) {
195,369 ( 0.08%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[cfg(target_pointer_width = "32")]
      .               #[inline]
      .               fn write_u64(&mut self, i: u64) {
      .                   self.add_to_hash(i as usize);
      .                   self.add_to_hash((i >> 32) as usize);
      .               }
-- line 131 ----------------------------------------

      1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 141 ----------------------------------------
      .               /// ```
      .               /// let a = [1, 2, 3];
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
      .               #[inline]
      .               pub const fn is_empty(&self) -> bool {
 60,277 ( 0.03%)          self.len() == 0
      .               }
      .           
      .               /// Returns the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.first());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn first(&self) -> Option<&T> {
    272 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
      .               ///     *first = 5;
      .               /// }
      .               /// assert_eq!(x, &[5, 1, 2]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
      .               #[inline]
      .               pub const fn first_mut(&mut self) -> Option<&mut T> {
    244 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
      .               }
      .           
      .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 237 ----------------------------------------
      .               ///     assert_eq!(last, &2);
      .               ///     assert_eq!(elements, &[0, 1]);
      .               /// }
      .               /// ```
      .               #[stable(feature = "slice_splits", since = "1.5.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
  1,566 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
      .               }
      .           
      .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.last());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn last(&self) -> Option<&T> {
 21,880 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the last item in the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
      .               ///     *last = 10;
      .               /// }
      .               /// assert_eq!(x, &[0, 1, 10]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
      .               #[inline]
      .               pub const fn last_mut(&mut self) -> Option<&mut T> {
 60,408 ( 0.03%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a reference to an element or subslice depending on the type of
      .               /// index.
      .               ///
      .               /// - If given a position, returns a reference to the element at that
      .               ///   position or `None` if out of bounds.
      .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
      .               /// }
      .               /// ```
      .               ///
      .               /// [`as_mut_ptr`]: slice::as_mut_ptr
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
      .               #[inline]
      .               pub const fn as_ptr(&self) -> *const T {
 64,686 ( 0.03%)          self as *const [T] as *const T
      .               }
      .           
      .               /// Returns an unsafe mutable pointer to the slice's buffer.
      .               ///
      .               /// The caller must ensure that the slice outlives the pointer this
      .               /// function returns, or else it will end up pointing to garbage.
      .               ///
      .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
      .               ///     }
      .               /// }
      .               /// assert_eq!(x, &[3, 4, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
      .               #[inline]
      .               pub const fn as_mut_ptr(&mut self) -> *mut T {
      1 ( 0.00%)          self as *mut [T] as *mut T
      .               }
      .           
      .               /// Returns the two raw pointers spanning the slice.
      .               ///
      .               /// The returned range is half-open, which means that the end pointer
      .               /// points *one past* the last element of the slice. This way, an empty
      .               /// slice is represented by two equal pointers, and the difference between
      .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 582 ----------------------------------------
      .               /// v.swap(2, 4);
      .               /// assert!(v == ["a", "b", "e", "d", "c"]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
      .               #[inline]
      .               #[track_caller]
      .               pub const fn swap(&mut self, a: usize, b: usize) {
  1,254 ( 0.00%)          let _ = &self[a];
  6,031 ( 0.00%)          let _ = &self[b];
      .           
      .                   // SAFETY: we just checked that both `a` and `b` are in bounds
      .                   unsafe { self.swap_unchecked(a, b) }
      .               }
      .           
      .               /// Swaps two elements in the slice, without doing bounds checking.
      .               ///
      .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
      .           
      .                       // Because this function is first compiled in isolation,
      .                       // this check tells LLVM that the indexing below is
      .                       // in-bounds.  Then after inlining -- once the actual
      .                       // lengths of the slices are known -- it's removed.
      .                       let (a, b) = (&mut a[..n], &mut b[..n]);
      .           
      .                       for i in 0..n {
    265 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
      .                       }
      .                   }
      .               }
      .           
      .               /// Returns an iterator over the slice.
      .               ///
      .               /// # Examples
      .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
      .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
      .               ///     assert_eq!(right, []);
      .               /// }
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
     18 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_unchecked(mid) }
      .               }
      .           
      .               /// Divides one mutable slice into two at an index.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
      .               /// left[1] = 2;
      .               /// right[1] = 4;
      .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
  5,566 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_mut_unchecked(mid) }
      .               }
      .           
      .               /// Divides one slice into two at an index, without doing bounds checking.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
      .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
      .                   let len = self.len();
      .                   let ptr = self.as_mut_ptr();
      .           
      .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
      .                   //
      .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
      .                   // is fine.
    543 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
      .               }
      .           
      .               /// Divides one slice into an array and a remainder slice at an index.
      .               ///
      .               /// The array will contain all indices from `[0, N)` (excluding
      .               /// the index `N` itself) and the slice will contain all
      .               /// indices from `[N, len)` (excluding the index `len` itself).
      .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
      .               /// assert!(!v.iter().any(|e| e == "hi"));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               pub fn contains(&self, x: &T) -> bool
      .               where
      .                   T: PartialEq,
      .               {
     82 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
      .               }
      .           
      .               /// Returns `true` if `needle` is a prefix of the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
      .               /// assert!(v.starts_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn starts_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let n = needle.len();
 22,561 ( 0.01%)          self.len() >= n && needle == &self[..n]
      .               }
      .           
      .               /// Returns `true` if `needle` is a suffix of the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
      .               /// assert!(v.ends_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn ends_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let (m, n) = (self.len(), needle.len());
 12,860 ( 0.01%)          m >= n && needle == &self[m - n..]
      .               }
      .           
      .               /// Returns a subslice with the prefix removed.
      .               ///
      .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
      .               /// If `prefix` is empty, simply returns the original slice.
      .               ///
      .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
      .               /// s.insert(idx, num);
      .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
      .               where
      .                   T: Ord,
      .               {
      3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
      .               }
      .           
      .               /// Binary searches this sorted slice with a comparator function.
      .               ///
      .               /// The comparator function should implement an order consistent
      .               /// with the sort order of the underlying slice, returning an
      .               /// order code that indicates whether its argument is `Less`,
      .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
      .               #[inline]
      .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
      .               where
      .                   F: FnMut(&'a T) -> Ordering,
      .               {
      .                   let mut size = self.len();
      .                   let mut left = 0;
      .                   let mut right = size;
335,607 ( 0.14%)          while left < right {
435,532 ( 0.19%)              let mid = left + size / 2;
      .           
      .                       // SAFETY: the call is made safe by the following invariants:
      .                       // - `mid >= 0`
      .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
 74,311 ( 0.03%)              let cmp = f(unsafe { self.get_unchecked(mid) });
      .           
      .                       // The reason why we use if/else control flow rather than match
      .                       // is because match reorders comparison operations, which is perf sensitive.
      .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
136,757 ( 0.06%)              if cmp == Less {
166,935 ( 0.07%)                  left = mid + 1;
 53,641 ( 0.02%)              } else if cmp == Greater {
      .                           right = mid;
      .                       } else {
      .                           // SAFETY: same as the `get_unchecked` above
      .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
      .                           return Ok(mid);
      .                       }
      .           
402,008 ( 0.17%)              size = right - left;
      .                   }
      .                   Err(left)
      .               }
      .           
      .               /// Binary searches this sorted slice with a key extraction function.
      .               ///
      .               /// Assumes that the slice is sorted by the key, for instance with
      .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
      .                   #[track_caller]
      .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
      .                       panic!(
      .                           "source slice length ({}) does not match destination slice length ({})",
      .                           src_len, dst_len,
      .                       );
      .                   }
      .           
 11,676 ( 0.01%)          if self.len() != src.len() {
      .                       len_mismatch_fail(self.len(), src.len());
      .                   }
      .           
      .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
      .                   // checked to have the same length. The slices cannot overlap because
      .                   // mutable references are exclusive.
      .                   unsafe {
      .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3382 ----------------------------------------
      .                   }
      .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
      .                   let ts: usize = mem::size_of::<U>() / gcd;
      .                   let us: usize = mem::size_of::<T>() / gcd;
      .           
      .                   // Armed with this knowledge, we can find how many `U`s we can fit!
      .                   let us_len = self.len() / ts * us;
      .                   // And how many `T`s will be in the trailing slice!
    178 ( 0.00%)          let ts_len = self.len() % ts;
      .                   (us_len, ts_len)
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
      .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
      .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
      .                       return (self, &[], &[]);
      .                   }
      .           
      .                   // First, find at what point do we split between the first and 2nd slice. Easy with
      .                   // ptr.align_offset.
      .                   let ptr = self.as_ptr();
      .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
      .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
    178 ( 0.00%)          if offset > self.len() {
      .                       (self, &[], &[])
      .                   } else {
      .                       let (left, rest) = self.split_at(offset);
      .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
      .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
      .                       // since the caller guarantees that we can transmute `T` to `U` safely.
      .                       unsafe {
      .                           (
      .                               left,
      .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
    178 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
      .                           )
      .                       }
      .                   }
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
-- line 3456 ----------------------------------------

255,595 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 114 ----------------------------------------
      .           const EMPTY: u8 = 0b1111_1111;
      .           
      .           /// Control byte value for a deleted bucket.
      .           const DELETED: u8 = 0b1000_0000;
      .           
      .           /// Checks whether a control byte represents a full bucket (top bit is clear).
      .           #[inline]
      .           fn is_full(ctrl: u8) -> bool {
 27,080 ( 0.01%)      ctrl & 0x80 == 0
      .           }
      .           
      .           /// Checks whether a control byte represents a special value (top bit is set).
      .           #[inline]
      .           fn is_special(ctrl: u8) -> bool {
      .               ctrl & 0x80 != 0
      .           }
      .           
-- line 130 ----------------------------------------
-- line 146 ----------------------------------------
      .           /// Secondary hash function, saved in the low 7 bits of the control byte.
      .           #[inline]
      .           #[allow(clippy::cast_possible_truncation)]
      .           fn h2(hash: u64) -> u8 {
      .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
      .               // value, some hash functions (such as FxHash) produce a usize result
      .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
      .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
 26,054 ( 0.01%)      let top7 = hash >> (hash_len * 8 - 7);
      .               (top7 & 0x7f) as u8 // truncation
      .           }
      .           
      .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
      .           /// table size is a power of two) to visit every group of elements exactly once.
      .           ///
      .           /// A triangular probe has us jump by 1 more group every time. So first we
      .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 162 ----------------------------------------
-- line 173 ----------------------------------------
      .               #[inline]
      .               fn move_next(&mut self, bucket_mask: usize) {
      .                   // We should have found an empty bucket by now and ended the probe.
      .                   debug_assert!(
      .                       self.stride <= bucket_mask,
      .                       "Went past end of probe sequence"
      .                   );
      .           
  2,442 ( 0.00%)          self.stride += Group::WIDTH;
  2,442 ( 0.00%)          self.pos += self.stride;
  1,221 ( 0.00%)          self.pos &= bucket_mask;
      .               }
      .           }
      .           
      .           /// Returns the number of buckets needed to hold the given number of items,
      .           /// taking the maximum load factor into account.
      .           ///
      .           /// Returns `None` if an overflow occurs.
      .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
      .           #[cfg_attr(target_os = "emscripten", inline(never))]
      .           #[cfg_attr(not(target_os = "emscripten"), inline)]
      .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
      .               debug_assert_ne!(cap, 0);
      .           
      .               // For small tables we require at least 1 empty bucket so that lookups are
      .               // guaranteed to terminate if an element doesn't exist in the table.
  1,200 ( 0.00%)      if cap < 8 {
      .                   // We don't bother with a table size of 2 buckets since that can only
      .                   // hold a single element. Instead we skip directly to a 4 bucket table
      .                   // which can hold 3 elements.
  1,870 ( 0.00%)          return Some(if cap < 4 { 4 } else { 8 });
      .               }
      .           
      .               // Otherwise require 1/8 buckets to be empty (87.5% load)
      .               //
      .               // Be careful when modifying this, calculate_layout relies on the
      .               // overflow check here.
  1,356 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
      .           
      .               // Any overflows will have been caught by the checked_mul. Also, any
      .               // rounding errors from the division above will be cleaned up by
      .               // next_power_of_two (which can't overflow because of the previous divison).
      .               Some(adjusted_cap.next_power_of_two())
      .           }
      .           
      .           /// Returns the maximum effective capacity for the given bucket mask, taking
      .           /// the maximum load factor into account.
      .           #[inline]
      .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
  4,675 ( 0.00%)      if bucket_mask < 8 {
      .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
      .                   // Keep in mind that the bucket mask is one less than the bucket count.
      .                   bucket_mask
      .               } else {
      .                   // For larger tables we reserve 12.5% of the slots as empty.
    948 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
      .               }
      .           }
      .           
      .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
      .           /// while keeping the rest of `calculate_layout_for` independent of `T`
      .           #[derive(Copy, Clone)]
      .           struct TableLayout {
      .               size: usize,
-- line 236 ----------------------------------------
-- line 249 ----------------------------------------
      .           
      .               #[inline]
      .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
      .                   debug_assert!(buckets.is_power_of_two());
      .           
      .                   let TableLayout { size, ctrl_align } = self;
      .                   // Manual layout calculation since Layout methods are not yet stable.
      .                   let ctrl_offset =
  2,620 ( 0.00%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
  3,220 ( 0.00%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
      .           
      .                   Some((
      .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
      .                       ctrl_offset,
      .                   ))
      .               }
      .           }
      .           
-- line 266 ----------------------------------------
-- line 460 ----------------------------------------
      .               /// Attempts to allocate a new hash table with at least enough capacity
      .               /// for inserting the given number of elements without reallocating.
      .               fn fallible_with_capacity(
      .                   alloc: A,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<Self, TryReserveError> {
      .                   Ok(Self {
     36 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
      .                           alloc,
      .                           TableLayout::new::<T>(),
      .                           capacity,
      .                           fallibility,
      .                       )?,
      .                       marker: PhantomData,
      .                   })
      .               }
-- line 476 ----------------------------------------
-- line 636 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           
      .               /// Ensures that at least `additional` items can be inserted into the table
      .               /// without reallocation.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
      7 ( 0.00%)          if additional > self.table.growth_left {
      .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
  2,990 ( 0.00%)              if self
      .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
      .                           .is_err()
      .                       {
      .                           unsafe { hint::unreachable_unchecked() }
      .                       }
      .                   }
      .               }
      .           
-- line 654 ----------------------------------------
-- line 665 ----------------------------------------
      .                   } else {
      .                       Ok(())
      .                   }
      .               }
      .           
      .               /// Out-of-line slow path for `reserve` and `try_reserve`.
      .               #[cold]
      .               #[inline(never)]
  4,942 ( 0.00%)      fn reserve_rehash(
      .                   &mut self,
      .                   additional: usize,
      .                   hasher: impl Fn(&T) -> u64,
      .                   fallibility: Fallibility,
      .               ) -> Result<(), TryReserveError> {
      .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
  1,188 ( 0.00%)          let new_items = match self.table.items.checked_add(additional) {
      .                       Some(new_items) => new_items,
      .                       None => return Err(fallibility.capacity_overflow()),
      .                   };
  1,188 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.table.bucket_mask);
  2,376 ( 0.00%)          if new_items <= full_capacity / 2 {
      .                       // Rehash in-place without re-allocating if we have plenty of spare
      .                       // capacity that is locked up due to DELETED entries.
      .                       self.rehash_in_place(hasher);
      .                       Ok(())
      .                   } else {
      .                       // Otherwise, conservatively resize to at least the next size up
      .                       // to avoid churning deletes into frequent rehashes.
      .                       self.resize(
    594 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
      .                           hasher,
      .                           fallibility,
      .                       )
      .                   }
  5,346 ( 0.00%)      }
      .           
      .               /// Rehashes the contents of the table in place (i.e. without changing the
      .               /// allocation).
      .               ///
      .               /// If `hasher` panics then some the table's contents may be lost.
      .               fn rehash_in_place(&mut self, hasher: impl Fn(&T) -> u64) {
      .                   unsafe {
      .                       // If the hash function panics then properly clean up any elements
-- line 707 ----------------------------------------
-- line 780 ----------------------------------------
      .               fn resize(
      .                   &mut self,
      .                   capacity: usize,
      .                   hasher: impl Fn(&T) -> u64,
      .                   fallibility: Fallibility,
      .               ) -> Result<(), TryReserveError> {
      .                   unsafe {
      .                       let mut new_table =
  4,859 ( 0.00%)                  self.table
      .                               .prepare_resize(TableLayout::new::<T>(), capacity, fallibility)?;
      .           
      .                       // Copy all elements to the new table.
      .                       for item in self.iter() {
      .                           // This may panic.
 14,136 ( 0.01%)                  let hash = hasher(item.as_ref());
      .           
      .                           // We can use a simpler version of insert() here since:
      .                           // - there are no DELETED entries.
      .                           // - we know there is enough space in the table.
      .                           // - all elements are unique.
      .                           let (index, _) = new_table.prepare_insert_slot(hash);
 14,136 ( 0.01%)                  new_table.bucket(index).copy_from_nonoverlapping(&item);
      .                       }
      .           
      .                       // We successfully copied all elements without panicking. Now replace
      .                       // self with the new table. The old table will have its memory freed but
      .                       // the items will not be dropped (since they have been moved into the
      .                       // new table).
      .                       mem::swap(&mut self.table, &mut new_table);
      .           
    594 ( 0.00%)              Ok(())
      .                   }
      .               }
      .           
      .               /// Inserts a new element into the table, and returns its raw bucket.
      .               ///
      .               /// This does not check if the given element already exists in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
      .                   unsafe {
      .                       let mut index = self.table.find_insert_slot(hash);
      .           
      .                       // We can avoid growing the table once we have reached our load
      .                       // factor if we are replacing a tombstone. This works since the
      .                       // number of EMPTY slots does not change in this case.
     62 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 42,684 ( 0.02%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
      .                           self.reserve(1, hasher);
      .                           index = self.table.find_insert_slot(hash);
      .                       }
      .           
      .                       self.table.record_item_insert_at(index, old_ctrl, hash);
      .           
 10,684 ( 0.00%)              let bucket = self.bucket(index);
      .                       bucket.write(value);
      .                       bucket
      .                   }
      .               }
      .           
      .               /// Attempts to insert a new element without growing the table and return its raw bucket.
      .               ///
      .               /// Returns an `Err` containing the given element if inserting it would require growing the
-- line 841 ----------------------------------------
-- line 911 ----------------------------------------
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
      .               /// Searches for an element in the table.
      .               #[inline]
  6,252 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
      .                   unsafe {
 86,424 ( 0.04%)              for bucket in self.iter_hash(hash) {
      .                           let elm = bucket.as_ref();
 11,286 ( 0.00%)                  if likely(eq(elm)) {
      .                               return Some(bucket);
      .                           }
      .                       }
      .                       None
      .                   }
  8,336 ( 0.00%)      }
      .           
      .               /// Gets a reference to an element in the table.
      .               #[inline]
      .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
  1,480 ( 0.00%)          match self.find(hash, eq) {
      .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Gets a mutable reference to an element in the table.
      .               #[inline]
      .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
-- line 943 ----------------------------------------
-- line 1007 ----------------------------------------
      .               }
      .           
      .               /// Returns the number of elements the map can hold without reallocating.
      .               ///
      .               /// This number is a lower bound; the table might be able to hold
      .               /// more, but is guaranteed to be able to hold at least this many.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn capacity(&self) -> usize {
  1,190 ( 0.00%)          self.table.items + self.table.growth_left
      .               }
      .           
      .               /// Returns the number of elements in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn len(&self) -> usize {
      .                   self.table.items
      .               }
      .           
      .               /// Returns the number of buckets in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn buckets(&self) -> usize {
     12 ( 0.00%)          self.table.bucket_mask + 1
      .               }
      .           
      .               /// Returns an iterator over every element in the table. It is up to
      .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
      .               /// Because we cannot make the `next` method unsafe on the `RawIter`
      .               /// struct, we have to make the `iter` method unsafe.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub unsafe fn iter(&self) -> RawIter<T> {
    594 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
      .                   RawIter {
      .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
      .                       items: self.table.items,
      .                   }
      .               }
      .           
      .               /// Returns an iterator over occupied buckets that could match a given hash.
      .               ///
-- line 1044 ----------------------------------------
-- line 1122 ----------------------------------------
      .           }
      .           
      .           unsafe impl<T, A: Allocator + Clone> Send for RawTable<T, A> where T: Send {}
      .           unsafe impl<T, A: Allocator + Clone> Sync for RawTable<T, A> where T: Sync {}
      .           
      .           impl<A> RawTableInner<A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               const fn new_in(alloc: A) -> Self {
  2,227 ( 0.00%)          Self {
      .                       // Be careful to cast the entire slice to a raw pointer.
  1,176 ( 0.00%)              ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
      .                       bucket_mask: 0,
      .                       items: 0,
      .                       growth_left: 0,
      .                       alloc,
      .                   }
      .               }
      .           }
      .           
-- line 1140 ----------------------------------------
-- line 1149 ----------------------------------------
      .                   debug_assert!(buckets.is_power_of_two());
      .           
      .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
      .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(buckets) {
      .                       Some(lco) => lco,
      .                       None => return Err(fallibility.capacity_overflow()),
      .                   };
      .           
  1,200 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
      .                       Ok(block) => block.cast(),
      .                       Err(_) => return Err(fallibility.alloc_err(layout)),
      .                   };
      .           
      .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
      .                   Ok(Self {
      .                       ctrl,
    707 ( 0.00%)              bucket_mask: buckets - 1,
      .                       items: 0,
      .                       growth_left: bucket_mask_to_capacity(buckets - 1),
      .                       alloc,
      .                   })
      .               }
      .           
      .               #[inline]
  3,004 ( 0.00%)      fn fallible_with_capacity(
      .                   alloc: A,
      .                   table_layout: TableLayout,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<Self, TryReserveError> {
     26 ( 0.00%)          if capacity == 0 {
      .                       Ok(Self::new_in(alloc))
      .                   } else {
      .                       unsafe {
      .                           let buckets =
      .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
      .           
      .                           let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
      .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
      .           
  1,805 ( 0.00%)                  Ok(result)
      .                       }
      .                   }
  2,424 ( 0.00%)      }
      .           
      .               /// Searches for an empty or deleted bucket which is suitable for inserting
      .               /// a new element and sets the hash for that slot.
      .               ///
      .               /// There must be at least 1 empty bucket in the table.
      .               #[inline]
      .               unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
      .                   let index = self.find_insert_slot(hash);
-- line 1200 ----------------------------------------
-- line 1208 ----------------------------------------
      .               ///
      .               /// There must be at least 1 empty bucket in the table.
      .               #[inline]
      .               fn find_insert_slot(&self, hash: u64) -> usize {
      .                   let mut probe_seq = self.probe_seq(hash);
      .                   loop {
      .                       unsafe {
      .                           let group = Group::load(self.ctrl(probe_seq.pos));
 26,013 ( 0.01%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 76,239 ( 0.03%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
      .           
      .                               // In tables smaller than the group width, trailing control
      .                               // bytes outside the range of the table are filled with
      .                               // EMPTY entries. These will unfortunately trigger a
      .                               // match, but once masked may point to a full bucket that
      .                               // is already occupied. We detect this situation here and
      .                               // perform a second scan starting at the begining of the
      .                               // table. This second scan is guaranteed to find an empty
      .                               // slot (due to the load factor) before hitting the trailing
      .                               // control bytes (containing EMPTY).
 36,097 ( 0.02%)                      if unlikely(is_full(*self.ctrl(result))) {
      .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
      .                                   debug_assert_ne!(probe_seq.pos, 0);
      .                                   return Group::load_aligned(self.ctrl(0))
      .                                       .match_empty_or_deleted()
      .                                       .lowest_set_bit_nonzero();
      .                               }
      .           
      .                               return result;
-- line 1236 ----------------------------------------
-- line 1278 ----------------------------------------
      .               /// Returns an iterator-like object for a probe sequence on the table.
      .               ///
      .               /// This iterator never terminates, but is guaranteed to visit each bucket
      .               /// group exactly once. The loop using `probe_seq` must terminate upon
      .               /// reaching a group containing an empty bucket.
      .               #[inline]
      .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
      .                   ProbeSeq {
130,366 ( 0.06%)              pos: h1(hash) & self.bucket_mask,
      .                       stride: 0,
      .                   }
      .               }
      .           
      .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
      .               /// in the table, otherwise returns error
      .               #[cfg(feature = "raw")]
      .               #[inline]
-- line 1294 ----------------------------------------
-- line 1300 ----------------------------------------
      .                   } else {
      .                       self.record_item_insert_at(index, old_ctrl, hash);
      .                       Ok(index)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 53,420 ( 0.02%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
      .                   self.set_ctrl_h2(index, hash);
 42,736 ( 0.02%)          self.items += 1;
      .               }
      .           
      .               #[inline]
      .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
      .                   let probe_seq_pos = self.probe_seq(hash).pos;
      .                   let probe_index =
      .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
      .                   probe_index(i) == probe_index(new_i)
-- line 1318 ----------------------------------------
-- line 1349 ----------------------------------------
      .                   // replicate the buckets at the end of the trailing group. For example
      .                   // with 2 buckets and a group size of 4, the control bytes will look
      .                   // like this:
      .                   //
      .                   //     Real    |             Replicated
      .                   // ---------------------------------------------
      .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
      .                   // ---------------------------------------------
 74,460 ( 0.03%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
      .           
 24,820 ( 0.01%)          *self.ctrl(index) = ctrl;
 24,820 ( 0.01%)          *self.ctrl(index2) = ctrl;
      .               }
      .           
      .               /// Returns a pointer to a control byte.
      .               #[inline]
      .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
      .                   debug_assert!(index < self.num_ctrl_bytes());
      .                   self.ctrl.as_ptr().add(index)
      .               }
      .           
      .               #[inline]
      .               fn buckets(&self) -> usize {
  1,200 ( 0.00%)          self.bucket_mask + 1
      .               }
      .           
      .               #[inline]
      .               fn num_ctrl_bytes(&self) -> usize {
      .                   self.bucket_mask + 1 + Group::WIDTH
      .               }
      .           
      .               #[inline]
      .               fn is_empty_singleton(&self) -> bool {
  3,436 ( 0.00%)          self.bucket_mask == 0
      .               }
      .           
      .               #[allow(clippy::mut_mut)]
      .               #[inline]
  1,177 ( 0.00%)      unsafe fn prepare_resize(
      .                   &self,
      .                   table_layout: TableLayout,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
      .                   debug_assert!(self.items <= capacity);
      .           
      .                   // Allocate and initialize the new table.
  1,485 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
      .                       self.alloc.clone(),
      .                       table_layout,
      .                       capacity,
      .                       fallibility,
      .                   )?;
  1,188 ( 0.00%)          new_table.growth_left -= self.items;
      .                   new_table.items = self.items;
      .           
      .                   // The hash function may panic, in which case we simply free the new
      .                   // table without dropping any elements that may have been copied into
      .                   // it.
      .                   //
      .                   // This guard is also used to free the old table on success, see
      .                   // the comment at the bottom of this function.
    856 ( 0.00%)          Ok(guard(new_table, move |self_| {
    594 ( 0.00%)              if !self_.is_empty_singleton() {
      .                           self_.free_buckets(table_layout);
      .                       }
      .                   }))
    856 ( 0.00%)      }
      .           
      .               #[inline]
      .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
      .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
      .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
      .                       Some(lco) => lco,
      .                       None => hint::unreachable_unchecked(),
      .                   };
      .                   self.alloc.deallocate(
    166 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
      .                       layout,
      .                   );
      .               }
      .           
      .               /// Marks all table buckets as empty without dropping their contents.
      .               #[inline]
      .               fn clear_no_drop(&mut self) {
      .                   if !self.is_empty_singleton() {
-- line 1434 ----------------------------------------
-- line 1667 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           }
      .           #[cfg(not(feature = "nightly"))]
      .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn drop(&mut self) {
  1,192 ( 0.00%)          if !self.table.is_empty_singleton() {
      .                       unsafe {
      .                           self.drop_elements();
      .                           self.free_buckets();
      .                       }
      .                   }
      .               }
      .           }
      .           
-- line 1683 ----------------------------------------
-- line 1798 ----------------------------------------
      .           
      .           impl<T> Iterator for RawIterRange<T> {
      .               type Item = Bucket<T>;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<Bucket<T>> {
      .                   unsafe {
      .                       loop {
  1,693 ( 0.00%)                  if let Some(index) = self.current_group.lowest_set_bit() {
      .                               self.current_group = self.current_group.remove_lowest_bit();
      .                               return Some(self.data.next_n(index));
      .                           }
      .           
  2,778 ( 0.00%)                  if self.next_ctrl >= self.end {
      .                               return None;
      .                           }
      .           
      .                           // We might read past self.end up to the next group boundary,
      .                           // but this is fine because it only occurs on tables smaller
      .                           // than the group size where the trailing control bytes are all
      .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
      .                           // to the group size (since tables are power-of-two sized).
-- line 1819 ----------------------------------------
-- line 1990 ----------------------------------------
      .           }
      .           
      .           impl<T> Iterator for RawIter<T> {
      .               type Item = Bucket<T>;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<Bucket<T>> {
      .                   if let Some(b) = self.iter.next() {
 28,272 ( 0.01%)              self.items -= 1;
      .                       Some(b)
      .                   } else {
      .                       // We don't check against items == 0 here to allow the
      .                       // compiler to optimize away the item count entirely if the
      .                       // iterator length is never queried.
      .                       debug_assert_eq!(self.items, 0);
      .                       None
      .                   }
-- line 2006 ----------------------------------------
-- line 2178 ----------------------------------------
      .               }
      .           }
      .           impl<'a, A: Allocator + Clone> RawIterHashInner<'a, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn new(table: &'a RawTableInner<A>, hash: u64) -> Self {
      .                   unsafe {
      .                       let h2_hash = h2(hash);
      .                       let probe_seq = table.probe_seq(hash);
 14,505 ( 0.01%)              let group = Group::load(table.ctrl(probe_seq.pos));
      .                       let bitmask = group.match_byte(h2_hash).into_iter();
      .           
      .                       RawIterHashInner {
      .                           table,
      .                           h2_hash,
      .                           probe_seq,
      .                           group,
      .                           bitmask,
-- line 2194 ----------------------------------------
-- line 2195 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, T, A: Allocator + Clone> Iterator for RawIterHash<'a, T, A> {
      .               type Item = Bucket<T>;
      .           
    412 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
      .                   unsafe {
      .                       match self.inner.next() {
    206 ( 0.00%)                  Some(index) => Some(self.inner.table.bucket(index)),
      .                           None => None,
      .                       }
      .                   }
    412 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, A: Allocator + Clone> Iterator for RawIterHashInner<'a, A> {
      .               type Item = usize;
      .           
      .               fn next(&mut self) -> Option<Self::Item> {
      .                   unsafe {
      .                       loop {
      .                           if let Some(bit) = self.bitmask.next() {
 12,946 ( 0.01%)                      let index = (self.probe_seq.pos + bit) & self.table.bucket_mask;
      .                               return Some(index);
      .                           }
 11,646 ( 0.01%)                  if likely(self.group.match_empty().any_bit_set()) {
      .                               return None;
      .                           }
      .                           self.probe_seq.move_next(self.table.bucket_mask);
      .                           self.group = Group::load(self.table.ctrl(self.probe_seq.pos));
  1,863 ( 0.00%)                  self.bitmask = self.group.match_byte(self.h2_hash).into_iter();
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           #[cfg(test)]
      .           mod test_map {
      .               use super::*;
-- line 2236 ----------------------------------------

118,075 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 70 ----------------------------------------
        .           
        .                   impl<'a, T> $name<'a, T> {
        .                       // Helper function for creating a slice from the iterator.
        .                       #[inline(always)]
        .                       fn make_slice(&self) -> &'a [T] {
        .                           // SAFETY: the iterator was created from a slice with pointer
        .                           // `self.ptr` and length `len!(self)`. This guarantees that all
        .                           // the prerequisites for `from_raw_parts` are fulfilled.
    5,772 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
        .                       }
        .           
        .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
        .                       // returning the old start.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
        .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               let old = self.ptr.as_ptr();
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
   29,655 ( 0.01%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
        .                               old
        .                           }
        .                       }
        .           
        .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
        .                       // returning the new end.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
        .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
        .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
       40 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
        .                               self.end
        .                           }
        .                       }
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<T> ExactSizeIterator for $name<'_, T> {
        .                       #[inline(always)]
        .                       fn len(&self) -> usize {
   12,256 ( 0.01%)                  len!(self)
        .                       }
        .           
        .                       #[inline(always)]
        .                       fn is_empty(&self) -> bool {
        .                           is_empty!(self)
        .                       }
        .                   }
        .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
        .                       fn next(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer
        .                           // must be non-null, and slices over non-ZSTs must also have a
        .                           // non-null end pointer. The call to `next_unchecked!` is safe
        .                           // since we check if the iterator is empty first.
        .                           unsafe {
   13,107 ( 0.01%)                      assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
    4,699 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
5,140,458 ( 2.22%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
        .                       fn size_hint(&self) -> (usize, Option<usize>) {
   86,982 ( 0.04%)                  let exact = len!(self);
        .                           (exact, Some(exact))
        .                       }
        .           
        .                       #[inline]
        .                       fn count(self) -> usize {
        .                           len!(self)
        .                       }
        .           
        .                       #[inline]
        .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    1,257 ( 0.00%)                  if n >= len!(self) {
        .                               // This iterator is now empty.
        .                               if mem::size_of::<T>() == 0 {
        .                                   // We have to do it this way as `ptr` may never be 0, but `end`
        .                                   // could be (due to wrapping).
        .                                   self.end = self.ptr.as_ptr();
        .                               } else {
        .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
        .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
        .                       // faster to compile.
        .                       #[inline]
        .                       fn for_each<F>(mut self, mut f: F)
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item),
        .                       {
        .                           while let Some(x) = self.next() {
      445 ( 0.00%)                      f(x);
        .                           }
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn all<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
       75 ( 0.00%)                  while let Some(x) = self.next() {
    6,362 ( 0.00%)                      if !f(x) {
        .                                   return false;
        .                               }
        .                           }
        .                           true
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
      272 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
   36,441 ( 0.02%)                  while let Some(x) = self.next() {
   45,576 ( 0.02%)                      if f(x) {
        .                                   return true;
        .                               }
        .                           }
        .                           false
      272 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
        .                       where
        .                           Self: Sized,
        .                           P: FnMut(&Self::Item) -> bool,
        .                       {
    1,818 ( 0.00%)                  while let Some(x) = self.next() {
   19,318 ( 0.01%)                      if predicate(&x) {
        .                                   return Some(x);
        .                               }
        .                           }
        .                           None
    8,304 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> Option<B>,
        .                       {
    3,256 ( 0.00%)                  while let Some(x) = self.next() {
   10,644 ( 0.00%)                      if let Some(y) = f(x) {
    1,727 ( 0.00%)                          return Some(y);
        .                               }
        .                           }
        .                           None
      205 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       #[rustc_inherit_overflow_checks]
        .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           Self: Sized,
        .                           P: FnMut(Self::Item) -> bool,
        .                       {
        .                           let n = len!(self);
        .                           let mut i = 0;
        .                           while let Some(x) = self.next() {
   10,545 ( 0.00%)                      if predicate(x) {
        .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
        .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                               i += 1;
        .                           }
        .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           P: FnMut(Self::Item) -> bool,
        .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
        .                       {
        .                           let n = len!(self);
        .                           let mut i = n;
      906 ( 0.00%)                  while let Some(x) = self.next_back() {
   15,294 ( 0.01%)                      i -= 1;
   13,110 ( 0.01%)                      if predicate(x) {
        .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
        .                                   // and is only decreasing.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                           }
        .                           None
        .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
        .                           // the returned references is guaranteed to refer to an element
        .                           // of the slice and thus guaranteed to be valid.
        .                           //
        .                           // Also note that the caller also guarantees that we're never
        .                           // called with the same index again, and that no other methods
        .                           // that will access this subslice are called, so it is valid
        .                           // for the returned reference to be mutable in the case of
        .                           // `IterMut`
    5,274 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
        .                       }
        .           
        .                       $($extra)*
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
        .                       #[inline]
-- line 348 ----------------------------------------
-- line 351 ----------------------------------------
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
        .                           // and slices over non-ZSTs must also have a non-null end pointer.
        .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
        .                           // empty first.
        .                           unsafe {
        .                               assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
       41 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
   79,672 ( 0.03%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_back_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
-- line 369 ----------------------------------------

  530,324 ( 0.23%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs
--------------------------------------------------------------------------------
Ir               

-- line 15 ----------------------------------------
      .           use std::str;
      .           
      .           use crate::{with_session_globals, Edition, Span, DUMMY_SP};
      .           
      .           #[cfg(test)]
      .           mod tests;
      .           
      .           // The proc macro code for this is in `compiler/rustc_macros/src/symbols.rs`.
      8 ( 0.00%)  symbols! {
      .               // After modifying this list adjust `is_special`, `is_used_keyword`/`is_unused_keyword`,
      .               // this should be rarely necessary though if the keywords are kept in alphabetic order.
      .               Keywords {
      .                   // Special reserved identifiers used internally for elided lifetimes,
      .                   // unnamed method parameters, crate root module, error recovery etc.
      .                   Empty:              "",
      .                   PathRoot:           "{{root}}",
      .                   DollarCrate:        "$crate",
-- line 31 ----------------------------------------
-- line 1498 ----------------------------------------
      .                   write_str,
      .                   writeln_macro,
      .                   x87_reg,
      .                   xer,
      .                   xmm_reg,
      .                   ymm_reg,
      .                   zmm_reg,
      .               }
     10 ( 0.00%)  }
      .           
  6,183 ( 0.00%)  #[derive(Copy, Clone, Eq, HashStable_Generic, Encodable, Decodable)]
      .           pub struct Ident {
      .               pub name: Symbol,
      .               pub span: Span,
      .           }
      .           
      .           impl Ident {
      .               #[inline]
      .               /// Constructs a new identifier from a symbol and a span.
      .               pub const fn new(name: Symbol, span: Span) -> Ident {
      .                   Ident { name, span }
 32,843 ( 0.01%)      }
      .           
      .               /// Constructs a new identifier with a dummy span.
      .               #[inline]
      .               pub const fn with_dummy_span(name: Symbol) -> Ident {
      .                   Ident::new(name, DUMMY_SP)
      .               }
      .           
      .               #[inline]
      .               pub fn empty() -> Ident {
      .                   Ident::with_dummy_span(kw::Empty)
      .               }
      .           
      .               /// Maps a string to an identifier with a dummy span.
      6 ( 0.00%)      pub fn from_str(string: &str) -> Ident {
      6 ( 0.00%)          Ident::with_dummy_span(Symbol::intern(string))
     24 ( 0.00%)      }
      .           
      .               /// Maps a string and a span to an identifier.
      .               pub fn from_str_and_span(string: &str, span: Span) -> Ident {
      .                   Ident::new(Symbol::intern(string), span)
      .               }
      .           
      .               /// Replaces `lo` and `hi` with those from `span`, but keep hygiene context.
  5,776 ( 0.00%)      pub fn with_span_pos(self, span: Span) -> Ident {
      .                   Ident::new(self.name, span.with_ctxt(self.span.ctxt()))
  3,610 ( 0.00%)      }
      .           
      .               pub fn without_first_quote(self) -> Ident {
      .                   Ident::new(Symbol::intern(self.as_str().trim_start_matches('\'')), self.span)
      .               }
      .           
      .               /// "Normalize" ident for use in comparisons using "item hygiene".
      .               /// Identifiers with same string value become same if they came from the same macro 2.0 macro
      .               /// (e.g., `macro` item, but not `macro_rules` item) and stay different if they came from
      .               /// different macro 2.0 macros.
      .               /// Technically, this operation strips all non-opaque marks from ident's syntactic context.
 25,542 ( 0.01%)      pub fn normalize_to_macros_2_0(self) -> Ident {
      .                   Ident::new(self.name, self.span.normalize_to_macros_2_0())
 19,866 ( 0.01%)      }
      .           
      .               /// "Normalize" ident for use in comparisons using "local variable hygiene".
      .               /// Identifiers with same string value become same if they came from the same non-transparent
      .               /// macro (e.g., `macro` or `macro_rules!` items) and stay different if they came from different
      .               /// non-transparent macros.
      .               /// Technically, this operation strips all transparent marks from ident's syntactic context.
  2,556 ( 0.00%)      pub fn normalize_to_macro_rules(self) -> Ident {
      .                   Ident::new(self.name, self.span.normalize_to_macro_rules())
  1,988 ( 0.00%)      }
      .           
      .               /// Access the underlying string. This is a slowish operation because it
      .               /// requires locking the symbol interner.
      .               ///
      .               /// Note that the lifetime of the return value is a lie. See
      .               /// `Symbol::as_str()` for details.
      .               pub fn as_str(&self) -> &str {
     50 ( 0.00%)          self.name.as_str()
      .               }
      .           }
      .           
      .           impl PartialEq for Ident {
  4,698 ( 0.00%)      fn eq(&self, rhs: &Self) -> bool {
 11,028 ( 0.00%)          self.name == rhs.name && self.span.ctxt() == rhs.span.ctxt()
  6,264 ( 0.00%)      }
      .           }
      .           
      .           impl Hash for Ident {
      .               fn hash<H: Hasher>(&self, state: &mut H) {
      3 ( 0.00%)          self.name.hash(state);
  1,680 ( 0.00%)          self.span.ctxt().hash(state);
      .               }
      .           }
      .           
      .           impl fmt::Debug for Ident {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Display::fmt(self, f)?;
      .                   fmt::Debug::fmt(&self.span.ctxt(), f)
      .               }
      .           }
      .           
      .           /// This implementation is supposed to be used in error messages, so it's expected to be identical
      .           /// to printing the original identifier token written in source code (`token_to_string`),
      .           /// except that AST identifiers don't keep the rawness flag, so we have to guess it.
      .           impl fmt::Display for Ident {
     20 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
     25 ( 0.00%)          fmt::Display::fmt(&IdentPrinter::new(self.name, self.is_raw_guess(), None), f)
     20 ( 0.00%)      }
      .           }
      .           
      .           /// This is the most general way to print identifiers.
      .           /// AST pretty-printer is used as a fallback for turning AST structures into token streams for
      .           /// proc macros. Additionally, proc macros may stringify their input and expect it survive the
      .           /// stringification (especially true for proc macro derives written between Rust 1.15 and 1.30).
      .           /// So we need to somehow pretty-print `$crate` in a way preserving at least some of its
      .           /// hygiene data, most importantly name of the crate it refers to.
-- line 1613 ----------------------------------------
-- line 1622 ----------------------------------------
      .               is_raw: bool,
      .               /// Span used for retrieving the crate name to which `$crate` refers to,
      .               /// if this field is `None` then the `$crate` conversion doesn't happen.
      .               convert_dollar_crate: Option<Span>,
      .           }
      .           
      .           impl IdentPrinter {
      .               /// The most general `IdentPrinter` constructor. Do not use this.
      3 ( 0.00%)      pub fn new(symbol: Symbol, is_raw: bool, convert_dollar_crate: Option<Span>) -> IdentPrinter {
    229 ( 0.00%)          IdentPrinter { symbol, is_raw, convert_dollar_crate }
      3 ( 0.00%)      }
      .           
      .               /// This implementation is supposed to be used when printing identifiers
      .               /// as a part of pretty-printing for larger AST pieces.
      .               /// Do not use this either.
     96 ( 0.00%)      pub fn for_ast_ident(ident: Ident, is_raw: bool) -> IdentPrinter {
     96 ( 0.00%)          IdentPrinter::new(ident.name, is_raw, Some(ident.span))
     48 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Display for IdentPrinter {
    280 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    112 ( 0.00%)          if self.is_raw {
      .                       f.write_str("r#")?;
     56 ( 0.00%)          } else if self.symbol == kw::DollarCrate {
      .                       if let Some(span) = self.convert_dollar_crate {
      .                           let converted = span.ctxt().dollar_crate_name();
      .                           if !converted.is_path_segment_keyword() {
      .                               f.write_str("::")?;
      .                           }
      .                           return fmt::Display::fmt(&converted, f);
      .                       }
      .                   }
-- line 1654 ----------------------------------------
-- line 1656 ----------------------------------------
      .               }
      .           }
      .           
      .           /// An newtype around `Ident` that calls [Ident::normalize_to_macro_rules] on
      .           /// construction.
      .           // FIXME(matthewj, petrochenkov) Use this more often, add a similar
      .           // `ModernIdent` struct and use that as well.
      .           #[derive(Copy, Clone, Eq, PartialEq, Hash)]
    781 ( 0.00%)  pub struct MacroRulesNormalizedIdent(Ident);
      .           
      .           impl MacroRulesNormalizedIdent {
      .               pub fn new(ident: Ident) -> Self {
    223 ( 0.00%)          Self(ident.normalize_to_macro_rules())
      .               }
      .           }
      .           
      .           impl fmt::Debug for MacroRulesNormalizedIdent {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Debug::fmt(&self.0, f)
      .               }
      .           }
-- line 1676 ----------------------------------------
-- line 1686 ----------------------------------------
      .           /// Internally, a `Symbol` is implemented as an index, and all operations
      .           /// (including hashing, equality, and ordering) operate on that index. The use
      .           /// of `rustc_index::newtype_index!` means that `Option<Symbol>` only takes up 4 bytes,
      .           /// because `rustc_index::newtype_index!` reserves the last 256 values for tagging purposes.
      .           ///
      .           /// Note that `Symbol` cannot directly be a `rustc_index::newtype_index!` because it
      .           /// implements `fmt::Debug`, `Encodable`, and `Decodable` in special ways.
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
  8,443 ( 0.00%)  pub struct Symbol(SymbolIndex);
      .           
      .           rustc_index::newtype_index! {
      .               struct SymbolIndex { .. }
      .           }
      .           
      .           impl Symbol {
      .               const fn new(n: u32) -> Self {
      .                   Symbol(SymbolIndex::from_u32(n))
    144 ( 0.00%)      }
      .           
      .               /// Maps a string to its interned representation.
178,173 ( 0.08%)      pub fn intern(string: &str) -> Self {
      .                   with_session_globals(|session_globals| session_globals.symbol_interner.intern(string))
178,173 ( 0.08%)      }
      .           
      .               /// Access the underlying string. This is a slowish operation because it
      .               /// requires locking the symbol interner.
      .               ///
      .               /// Note that the lifetime of the return value is a lie. It's not the same
      .               /// as `&self`, but actually tied to the lifetime of the underlying
      .               /// interner. Interners are long-lived, and there are very few of them, and
      .               /// this function is typically used for short-lived things, so in practice
      .               /// it works out ok.
  9,174 ( 0.00%)      pub fn as_str(&self) -> &str {
  3,058 ( 0.00%)          with_session_globals(|session_globals| unsafe {
      .                       std::mem::transmute::<&str, &str>(session_globals.symbol_interner.get(*self))
      .                   })
 12,232 ( 0.01%)      }
      .           
      .               pub fn as_u32(self) -> u32 {
      .                   self.0.as_u32()
      .               }
      .           
      .               pub fn is_empty(self) -> bool {
      .                   self == kw::Empty
      .               }
-- line 1730 ----------------------------------------
-- line 1740 ----------------------------------------
      .           
      .           impl fmt::Debug for Symbol {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Debug::fmt(self.as_str(), f)
      .               }
      .           }
      .           
      .           impl fmt::Display for Symbol {
    314 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  1,446 ( 0.00%)          fmt::Display::fmt(self.as_str(), f)
      .               }
      .           }
      .           
      .           impl<S: Encoder> Encodable<S> for Symbol {
      .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
  1,638 ( 0.00%)          s.emit_str(self.as_str())
      .               }
      .           }
      .           
      .           impl<D: Decoder> Decodable<D> for Symbol {
      .               #[inline]
 11,946 ( 0.01%)      fn decode(d: &mut D) -> Symbol {
 50,496 ( 0.02%)          Symbol::intern(&d.read_str())
      .               }
      .           }
      .           
      .           impl<CTX> HashStable<CTX> for Symbol {
      .               #[inline]
    360 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
  2,256 ( 0.00%)          self.as_str().hash_stable(hcx, hasher);
    354 ( 0.00%)      }
      .           }
      .           
      .           impl<CTX> ToStableHashKey<CTX> for Symbol {
      .               type KeyType = String;
      .               #[inline]
      .               fn to_stable_hash_key(&self, _: &CTX) -> String {
      .                   self.as_str().to_string()
      .               }
-- line 1778 ----------------------------------------
-- line 1785 ----------------------------------------
      .           //
      .           // The `FxHashMap`+`Vec` pair could be replaced by `FxIndexSet`, but #75278
      .           // found that to regress performance up to 2% in some cases. This might be
      .           // revisited after further improvements to `indexmap`.
      .           //
      .           // This type is private to prevent accidentally constructing more than one
      .           // `Interner` on the same thread, which makes it easy to mixup `Symbol`s
      .           // between `Interner`s.
      2 ( 0.00%)  #[derive(Default)]
      .           struct InternerInner {
      .               arena: DroplessArena,
      .               names: FxHashMap<&'static str, Symbol>,
      .               strings: Vec<&'static str>,
      .           }
      .           
      .           impl Interner {
      .               fn prefill(init: &[&'static str]) -> Self {
     30 ( 0.00%)          Interner(Lock::new(InternerInner {
      .                       strings: init.into(),
      .                       names: init.iter().copied().zip((0..).map(Symbol::new)).collect(),
      .                       ..Default::default()
      .                   }))
      .               }
      .           
      .               #[inline]
      .               fn intern(&self, string: &str) -> Symbol {
      .                   let mut inner = self.0.lock();
 25,580 ( 0.01%)          if let Some(&name) = inner.names.get(string) {
      .                       return name;
      .                   }
      .           
  7,007 ( 0.00%)          let name = Symbol::new(inner.strings.len() as u32);
      .           
      .                   // SAFETY: we convert from `&str` to `&[u8]`, clone it into the arena,
      .                   // and immediately convert the clone back to `&[u8], all because there
      .                   // is no `inner.arena.alloc_str()` method. This is clearly safe.
      .                   let string: &str =
      .                       unsafe { str::from_utf8_unchecked(inner.arena.alloc_slice(string.as_bytes())) };
      .           
      .                   // SAFETY: we can extend the arena allocation to `'static` because we
-- line 1824 ----------------------------------------
-- line 1831 ----------------------------------------
      .                   // #91445 for details.
      .                   inner.names.insert(string, name);
      .                   name
      .               }
      .           
      .               // Get the symbol as a string. `Symbol::as_str()` should be used in
      .               // preference to this function.
      .               fn get(&self, symbol: Symbol) -> &str {
  9,174 ( 0.00%)          self.0.lock().strings[symbol.0.as_usize()]
      .               }
      .           }
      .           
      .           // This module has a very short name because it's used a lot.
      .           /// This module contains all the defined keyword `Symbol`s.
      .           ///
      .           /// Given that `kw` is imported, use them like `kw::keyword_name`.
      .           /// For example `kw::Loop` or `kw::Break`.
-- line 1847 ----------------------------------------
-- line 1863 ----------------------------------------
      .           
      .               // Used from a macro in `librustc_feature/accepted.rs`
      .               pub use super::kw::MacroRules as macro_rules;
      .           
      .               /// Get the symbol for an integer.
      .               ///
      .               /// The first few non-negative integers each have a static symbol and therefore
      .               /// are fast.
    254 ( 0.00%)      pub fn integer<N: TryInto<usize> + Copy + ToString>(n: N) -> Symbol {
    254 ( 0.00%)          if let Result::Ok(idx) = n.try_into() {
      .                       if idx < 10 {
    288 ( 0.00%)                  return Symbol::new(super::SYMBOL_DIGITS_BASE + idx as u32);
      .                       }
      .                   }
      2 ( 0.00%)          Symbol::intern(&n.to_string())
      8 ( 0.00%)      }
      .           }
      .           
      .           impl Symbol {
      .               fn is_special(self) -> bool {
      .                   self <= kw::Underscore
      .               }
      .           
      .               fn is_used_keyword_always(self) -> bool {
      9 ( 0.00%)          self >= kw::As && self <= kw::While
      .               }
      .           
      .               fn is_used_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {
  2,706 ( 0.00%)          (self >= kw::Async && self <= kw::Dyn) && edition() >= Edition::Edition2018
      .               }
      .           
      .               fn is_unused_keyword_always(self) -> bool {
      9 ( 0.00%)          self >= kw::Abstract && self <= kw::Yield
      .               }
      .           
      .               fn is_unused_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {
      3 ( 0.00%)          self == kw::Try && edition() >= Edition::Edition2018
      .               }
      .           
      .               pub fn is_reserved(self, edition: impl Copy + FnOnce() -> Edition) -> bool {
  4,791 ( 0.00%)          self.is_special()
      .                       || self.is_used_keyword_always()
      .                       || self.is_unused_keyword_always()
      .                       || self.is_used_keyword_conditional(edition)
      .                       || self.is_unused_keyword_conditional(edition)
      .               }
      .           
      .               /// A keyword or reserved identifier that can be used as a path segment.
      .               pub fn is_path_segment_keyword(self) -> bool {
 14,371 ( 0.01%)          self == kw::Super
      .                       || self == kw::SelfLower
      .                       || self == kw::SelfUpper
      .                       || self == kw::Crate
      .                       || self == kw::PathRoot
      .                       || self == kw::DollarCrate
      .               }
      .           
      .               /// Returns `true` if the symbol is `true` or `false`.
      .               pub fn is_bool_lit(self) -> bool {
    247 ( 0.00%)          self == kw::True || self == kw::False
    247 ( 0.00%)      }
      .           
      .               /// Returns `true` if this symbol can be a raw identifier.
      .               pub fn can_be_raw(self) -> bool {
    148 ( 0.00%)          self != kw::Empty && self != kw::Underscore && !self.is_path_segment_keyword()
      .               }
      .           }
      .           
      .           impl Ident {
      .               // Returns `true` for reserved identifiers used internally for elided lifetimes,
      .               // unnamed method parameters, crate root module, error recovery etc.
      .               pub fn is_special(self) -> bool {
      .                   self.name.is_special()
      3 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is a keyword used in the language.
      3 ( 0.00%)      pub fn is_used_keyword(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
      3 ( 0.00%)          self.name.is_used_keyword_always()
      .                       || self.name.is_used_keyword_conditional(|| self.span.edition())
      6 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is a keyword reserved for possible future use.
      3 ( 0.00%)      pub fn is_unused_keyword(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
      3 ( 0.00%)          self.name.is_unused_keyword_always()
      .                       || self.name.is_unused_keyword_conditional(|| self.span.edition())
      6 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is either a special identifier or a keyword.
    885 ( 0.00%)      pub fn is_reserved(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
      .                   self.name.is_reserved(|| self.span.edition())
  1,770 ( 0.00%)      }
      .           
      .               /// A keyword or reserved identifier that can be used as a path segment.
      .               pub fn is_path_segment_keyword(self) -> bool {
      .                   self.name.is_path_segment_keyword()
  2,053 ( 0.00%)      }
      .           
      .               /// We see this identifier in a normal identifier position, like variable name or a type.
      .               /// How was it written originally? Did it use the raw form? Let's try to guess.
     69 ( 0.00%)      pub fn is_raw_guess(self) -> bool {
      .                   self.name.can_be_raw() && self.is_reserved()
    138 ( 0.00%)      }
      .           }

 28,855 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs
--------------------------------------------------------------------------------
Ir              

-- line 97 ----------------------------------------
     .           
     .               /// If true, the capture is behind a reference.
     .               by_ref: bool,
     .           }
     .           
     .           const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];
     .           
     .           pub fn provide(providers: &mut Providers) {
     4 ( 0.00%)      *providers = Providers {
     .                   mir_borrowck: |tcx, did| {
    16 ( 0.00%)              if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {
     .                           tcx.mir_borrowck_const_arg(def)
     .                       } else {
    64 ( 0.00%)                  mir_borrowck(tcx, ty::WithOptConstParam::unknown(did))
     .                       }
     .                   },
     .                   mir_borrowck_const_arg: |tcx, (did, param_did)| {
     .                       mir_borrowck(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })
     .                   },
     .                   ..*providers
     .               };
     1 ( 0.00%)  }
     .           
   160 ( 0.00%)  fn mir_borrowck<'tcx>(
     .               tcx: TyCtxt<'tcx>,
     .               def: ty::WithOptConstParam<LocalDefId>,
     .           ) -> &'tcx BorrowCheckResult<'tcx> {
     .               let (input_body, promoted) = tcx.mir_promoted(def);
     .               debug!("run query mir_borrowck: {}", tcx.def_path_str(def.did.to_def_id()));
     .           
   208 ( 0.00%)      let opt_closure_req = tcx.infer_ctxt().with_opaque_type_inference(def.did).enter(|infcx| {
     .                   let input_body: &Body<'_> = &input_body.borrow();
     .                   let promoted: &IndexVec<_, _> = &promoted.borrow();
   224 ( 0.00%)          do_mir_borrowck(&infcx, input_body, promoted, false).0
    64 ( 0.00%)      });
     .               debug!("mir_borrowck done");
     .           
    16 ( 0.00%)      tcx.arena.alloc(opt_closure_req)
   128 ( 0.00%)  }
     .           
     .           /// Perform the actual borrow checking.
     .           ///
     .           /// If `return_body_with_facts` is true, then return the body with non-erased
     .           /// region ids on which the borrow checking was performed together with Polonius
     .           /// facts.
   352 ( 0.00%)  #[instrument(skip(infcx, input_body, input_promoted), level = "debug")]
     .           fn do_mir_borrowck<'a, 'tcx>(
     .               infcx: &InferCtxt<'a, 'tcx>,
     .               input_body: &Body<'tcx>,
     .               input_promoted: &IndexVec<Promoted, Body<'tcx>>,
     .               return_body_with_facts: bool,
     .           ) -> (BorrowCheckResult<'tcx>, Option<Box<BodyWithBorrowckFacts<'tcx>>>) {
   160 ( 0.00%)      let def = input_body.source.with_opt_param().as_local().unwrap();
     .           
     .               debug!(?def);
     .           
    32 ( 0.00%)      let tcx = infcx.tcx;
     .               let param_env = tcx.param_env(def.did);
    16 ( 0.00%)      let id = tcx.hir().local_def_id_to_hir_id(def.did);
     .           
    32 ( 0.00%)      let mut local_names = IndexVec::from_elem(None, &input_body.local_decls);
     .               for var_debug_info in &input_body.var_debug_info {
   378 ( 0.00%)          if let VarDebugInfoContents::Place(place) = var_debug_info.value {
   215 ( 0.00%)              if let Some(local) = place.as_local() {
   312 ( 0.00%)                  if let Some(prev_name) = local_names[local] {
     .                               if var_debug_info.name != prev_name {
     .                                   span_bug!(
     .                                       var_debug_info.source_info.span,
     .                                       "local {:?} has many names (`{}` vs `{}`)",
     .                                       local,
     .                                       prev_name,
     .                                       var_debug_info.name
     .                                   );
     .                               }
     .                           }
   312 ( 0.00%)                  local_names[local] = Some(var_debug_info.name);
     .                       }
     .                   }
     .               }
     .           
     .               // Gather the upvars of a closure, if any.
    64 ( 0.00%)      let tables = tcx.typeck_opt_const_arg(def);
    32 ( 0.00%)      if let Some(ErrorReported) = tables.tainted_by_errors {
     .                   infcx.set_tainted_by_errors();
     .               }
    64 ( 0.00%)      let upvars: Vec<_> = tables
     .                   .closure_min_captures_flattened(def.did.to_def_id())
     .                   .map(|captured_place| {
     .                       let capture = captured_place.info.capture_kind;
     7 ( 0.00%)              let by_ref = match capture {
     .                           ty::UpvarCapture::ByValue => false,
     .                           ty::UpvarCapture::ByRef(..) => true,
     .                       };
     .                       Upvar { place: captured_place.clone(), by_ref }
     .                   })
     .                   .collect();
     .           
     .               // Replace all regions with fresh inference variables. This
     .               // requires first making our own copy of the MIR. This copy will
     .               // be modified (in place) to contain non-lexical lifetimes. It
     .               // will have a lifetime tied to the inference context.
    32 ( 0.00%)      let mut body_owned = input_body.clone();
     .               let mut promoted = input_promoted.clone();
     .               let free_regions =
    48 ( 0.00%)          nll::replace_regions_in_mir(infcx, param_env, &mut body_owned, &mut promoted);
     .               let body = &body_owned; // no further changes
     .           
    16 ( 0.00%)      let location_table_owned = LocationTable::new(body);
     .               let location_table = &location_table_owned;
     .           
     .               let mut errors_buffer = Vec::new();
    48 ( 0.00%)      let (move_data, move_errors): (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>) =
   112 ( 0.00%)          match MoveData::gather_moves(&body, tcx, param_env) {
    96 ( 0.00%)              Ok(move_data) => (move_data, Vec::new()),
     .                       Err((move_data, move_errors)) => (move_data, move_errors),
     .                   };
     .               let promoted_errors = promoted
     .                   .iter_enumerated()
   180 ( 0.00%)          .map(|(idx, body)| (idx, MoveData::gather_moves(&body, tcx, param_env)));
     .           
    96 ( 0.00%)      let mdpe = MoveDataParamEnv { move_data, param_env };
     .           
   128 ( 0.00%)      let mut flow_inits = MaybeInitializedPlaces::new(tcx, &body, &mdpe)
    16 ( 0.00%)          .into_engine(tcx, &body)
     .                   .pass_name("borrowck")
     .                   .iterate_to_fixpoint()
     .                   .into_results_cursor(&body);
     .           
   192 ( 0.00%)      let locals_are_invalidated_at_exit = tcx.hir().body_owner_kind(id).is_fn_or_closure();
     .               let borrow_set =
   160 ( 0.00%)          Rc::new(BorrowSet::build(tcx, body, locals_are_invalidated_at_exit, &mdpe.move_data));
     .           
    80 ( 0.00%)      let use_polonius = return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius;
     .           
     .               // Compute non-lexical lifetimes.
     .               let nll::NllOutput {
    48 ( 0.00%)          regioncx,
    64 ( 0.00%)          opaque_type_values,
    32 ( 0.00%)          polonius_input,
    48 ( 0.00%)          polonius_output,
    64 ( 0.00%)          opt_closure_req,
   160 ( 0.00%)          nll_errors,
   288 ( 0.00%)      } = nll::compute_regions(
     .                   infcx,
   256 ( 0.00%)          free_regions,
     .                   body,
     .                   &promoted,
     .                   location_table,
     .                   param_env,
     .                   &mut flow_inits,
     .                   &mdpe.move_data,
     .                   &borrow_set,
     .                   &upvars,
     .                   use_polonius,
     .               );
     .           
     .               // Dump MIR results into a file, if that is enabled. This let us
     .               // write unit-tests, as well as helping with debugging.
    48 ( 0.00%)      nll::dump_mir_results(infcx, &body, &regioncx, &opt_closure_req);
     .           
     .               // We also have a `#[rustc_regions]` annotation that causes us to dump
     .               // information.
    32 ( 0.00%)      nll::dump_annotation(
     .                   infcx,
     .                   &body,
     .                   &regioncx,
     .                   &opt_closure_req,
     .                   &opaque_type_values,
     .                   &mut errors_buffer,
     .               );
     .           
     .               // The various `flow_*` structures can be large. We drop `flow_inits` here
     .               // so it doesn't overlap with the others below. This reduces peak memory
     .               // usage significantly on some benchmarks.
   256 ( 0.00%)      drop(flow_inits);
     .           
    16 ( 0.00%)      let regioncx = Rc::new(regioncx);
     .           
    96 ( 0.00%)      let flow_borrows = Borrows::new(tcx, body, &regioncx, &borrow_set)
    16 ( 0.00%)          .into_engine(tcx, body)
     .                   .pass_name("borrowck")
     .                   .iterate_to_fixpoint();
    96 ( 0.00%)      let flow_uninits = MaybeUninitializedPlaces::new(tcx, body, &mdpe)
    16 ( 0.00%)          .into_engine(tcx, body)
     .                   .pass_name("borrowck")
     .                   .iterate_to_fixpoint();
    96 ( 0.00%)      let flow_ever_inits = EverInitializedPlaces::new(tcx, body, &mdpe)
    16 ( 0.00%)          .into_engine(tcx, body)
     .                   .pass_name("borrowck")
     .                   .iterate_to_fixpoint();
     .           
    56 ( 0.00%)      let movable_generator = !matches!(
   120 ( 0.00%)          tcx.hir().get(id),
     .                   Node::Expr(&hir::Expr {
     .                       kind: hir::ExprKind::Closure(.., Some(hir::Movability::Static)),
     .                       ..
     .                   })
     .               );
     .           
   126 ( 0.00%)      for (idx, move_data_results) in promoted_errors {
     .                   let promoted_body = &promoted[idx];
     .           
    36 ( 0.00%)          if let Err((move_data, move_errors)) = move_data_results {
     .                       let mut promoted_mbcx = MirBorrowckCtxt {
     .                           infcx,
     .                           param_env,
     .                           body: promoted_body,
     .                           move_data: &move_data,
     .                           location_table, // no need to create a real one for the promoted, it is not used
     .                           movable_generator,
     .                           fn_self_span_reported: Default::default(),
-- line 307 ----------------------------------------
-- line 325 ----------------------------------------
     .                       };
     .                       promoted_mbcx.report_move_errors(move_errors);
     .                       errors_buffer = promoted_mbcx.errors_buffer;
     .                   };
     .               }
     .           
     .               let dominators = body.dominators();
     .           
   720 ( 0.00%)      let mut mbcx = MirBorrowckCtxt {
     .                   infcx,
     .                   param_env,
     .                   body,
     .                   move_data: &mdpe.move_data,
     .                   location_table,
     .                   movable_generator,
     .                   locals_are_invalidated_at_exit,
     .                   fn_self_span_reported: Default::default(),
     .                   access_place_error_reported: Default::default(),
     .                   reservation_error_reported: Default::default(),
     .                   reservation_warnings: Default::default(),
     .                   move_error_reported: BTreeMap::new(),
     .                   uninitialized_error_reported: Default::default(),
    64 ( 0.00%)          errors_buffer,
    16 ( 0.00%)          regioncx: Rc::clone(&regioncx),
     .                   used_mut: Default::default(),
     .                   used_mut_upvars: SmallVec::new(),
    16 ( 0.00%)          borrow_set: Rc::clone(&borrow_set),
    96 ( 0.00%)          dominators,
    64 ( 0.00%)          upvars,
    64 ( 0.00%)          local_names,
     .                   region_names: RefCell::default(),
     .                   next_region_name: RefCell::new(1),
     .                   polonius_output,
     .               };
     .           
     .               // Compute and report region errors, if any.
    48 ( 0.00%)      mbcx.report_region_errors(nll_errors);
     .           
     .               let results = BorrowckResults {
    96 ( 0.00%)          ever_inits: flow_ever_inits,
   128 ( 0.00%)          uninits: flow_uninits,
   176 ( 0.00%)          borrows: flow_borrows,
     .               };
     .           
    96 ( 0.00%)      mbcx.report_move_errors(move_errors);
     .           
    16 ( 0.00%)      rustc_mir_dataflow::visit_results(
     .                   body,
    16 ( 0.00%)          traversal::reverse_postorder(body).map(|(bb, _)| bb),
     .                   &results,
     .                   &mut mbcx,
     .               );
     .           
     .               // Convert any reservation warnings into lints.
     .               let reservation_warnings = mem::take(&mut mbcx.reservation_warnings);
     .               for (_, (place, span, location, bk, borrow)) in reservation_warnings {
     .                   let mut initial_diag = mbcx.report_conflicting_borrow(location, (place, span), bk, &borrow);
-- line 381 ----------------------------------------
-- line 406 ----------------------------------------
     .               // For each non-user used mutable variable, check if it's been assigned from
     .               // a user-declared local. If so, then put that local into the used_mut set.
     .               // Note that this set is expected to be small - only upvars from closures
     .               // would have a chance of erroneously adding non-user-defined mutable vars
     .               // to the set.
     .               let temporary_used_locals: FxHashSet<Local> = mbcx
     .                   .used_mut
     .                   .iter()
    16 ( 0.00%)          .filter(|&local| !mbcx.body.local_decls[*local].is_user_variable())
     .                   .cloned()
     .                   .collect();
     .               // For the remaining unused locals that are marked as mutable, we avoid linting any that
     .               // were never initialized. These locals may have been removed as unreachable code; or will be
     .               // linted as unused variables.
     .               let unused_mut_locals =
    16 ( 0.00%)          mbcx.body.mut_vars_iter().filter(|local| !mbcx.used_mut.contains(local)).collect();
    64 ( 0.00%)      mbcx.gather_used_muts(temporary_used_locals, unused_mut_locals);
     .           
     .               debug!("mbcx.used_mut: {:?}", mbcx.used_mut);
    64 ( 0.00%)      let used_mut = mbcx.used_mut;
    16 ( 0.00%)      for local in mbcx.body.mut_vars_and_args_iter().filter(|local| !used_mut.contains(local)) {
     7 ( 0.00%)          let local_decl = &mbcx.body.local_decls[local];
    42 ( 0.00%)          let lint_root = match &mbcx.body.source_scopes[local_decl.source_info.scope].local_data {
     .                       ClearCrossCrate::Set(data) => data.lint_root,
     .                       _ => continue,
     .                   };
     .           
     .                   // Skip over locals that begin with an underscore or have no name
    21 ( 0.00%)          match mbcx.local_names[local] {
     .                       Some(name) => {
     .                           if name.as_str().starts_with('_') {
     .                               continue;
     .                           }
     .                       }
     .                       None => continue,
     .                   }
     .           
-- line 442 ----------------------------------------
-- line 455 ----------------------------------------
     .                               String::new(),
     .                               Applicability::MachineApplicable,
     .                           )
     .                           .emit();
     .                   })
     .               }
     .           
     .               // Buffer any move errors that we collected and de-duplicated.
   144 ( 0.00%)      for (_, (_, diag)) in mbcx.move_error_reported {
     .                   diag.buffer(&mut mbcx.errors_buffer);
     .               }
     .           
    16 ( 0.00%)      if !mbcx.errors_buffer.is_empty() {
     .                   mbcx.errors_buffer.sort_by_key(|diag| diag.sort_span);
     .           
     .                   for diag in mbcx.errors_buffer.drain(..) {
     .                       mbcx.infcx.tcx.sess.diagnostic().emit_diagnostic(&diag);
     .                   }
     .               }
     .           
     .               let result = BorrowCheckResult {
    64 ( 0.00%)          concrete_opaque_types: opaque_type_values,
    80 ( 0.00%)          closure_requirements: opt_closure_req,
    96 ( 0.00%)          used_mut_upvars: mbcx.used_mut_upvars,
     .               };
     .           
    32 ( 0.00%)      let body_with_facts = if return_body_with_facts {
     .                   let output_facts = mbcx.polonius_output.expect("Polonius output was not computed");
     .                   Some(Box::new(BodyWithBorrowckFacts {
     .                       body: body_owned,
     .                       input_facts: *polonius_input.expect("Polonius input facts were not generated"),
     .                       output_facts,
     .                       location_table: location_table_owned,
     .                   }))
     .               } else {
     .                   None
     .               };
     .           
     .               debug!("do_mir_borrowck: result = {:#?}", result);
     .           
   224 ( 0.00%)      (result, body_with_facts)
   192 ( 0.00%)  }
     .           
     .           /// A `Body` with information computed by the borrow checker. This struct is
     .           /// intended to be consumed by compiler consumers.
     .           ///
     .           /// We need to include the MIR body here because the region identifiers must
     .           /// match the ones in the Polonius facts.
     .           pub struct BodyWithBorrowckFacts<'tcx> {
     .               /// A mir body that contains region identifiers.
-- line 504 ----------------------------------------
-- line 608 ----------------------------------------
     .           // Check that:
     .           // 1. assignments are always made to mutable locations (FIXME: does that still really go here?)
     .           // 2. loans made in overlapping scopes do not conflict
     .           // 3. assignments do not affect things loaned out as immutable
     .           // 4. moves do not affect things loaned out in any way
     .           impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx> {
     .               type FlowState = Flows<'cx, 'tcx>;
     .           
17,046 ( 0.01%)      fn visit_statement_before_primary_effect(
     .                   &mut self,
     .                   flow_state: &Flows<'cx, 'tcx>,
     .                   stmt: &'cx Statement<'tcx>,
     .                   location: Location,
     .               ) {
     .                   debug!("MirBorrowckCtxt::process_statement({:?}, {:?}): {:?}", location, stmt, flow_state);
     .                   let span = stmt.source_info.span;
     .           
     .                   self.check_activations(location, span, flow_state);
     .           
 9,470 ( 0.00%)          match &stmt.kind {
 1,030 ( 0.00%)              StatementKind::Assign(box (lhs, ref rhs)) => {
     .                           self.consume_rvalue(location, (rhs, span), flow_state);
     .           
 2,060 ( 0.00%)                  self.mutate_place(location, (*lhs, span), Shallow(None), flow_state);
     .                       }
    62 ( 0.00%)              StatementKind::FakeRead(box (_, ref place)) => {
     .                           // Read for match doesn't access any memory and is used to
     .                           // assert that a place is safe and live. So we don't have to
     .                           // do any checks here.
     .                           //
     .                           // FIXME: Remove check that the place is initialized. This is
     .                           // needed for now because matches don't have never patterns yet.
     .                           // So this is the only place we prevent
     .                           //      let x: !;
     .                           //      match x {};
     .                           // from compiling.
   248 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
     .                               location,
     .                               InitializationRequiringAction::Use,
   558 ( 0.00%)                      (place.as_ref(), span),
     .                               flow_state,
     .                           );
     .                       }
     .                       StatementKind::SetDiscriminant { place, variant_index: _ } => {
     .                           self.mutate_place(location, (**place, span), Shallow(None), flow_state);
     .                       }
     .                       StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {
     .                           ..
-- line 655 ----------------------------------------
-- line 663 ----------------------------------------
     .                       | StatementKind::Coverage(..)
     .                       | StatementKind::AscribeUserType(..)
     .                       | StatementKind::Retag { .. }
     .                       | StatementKind::StorageLive(..) => {
     .                           // `Nop`, `AscribeUserType`, `Retag`, and `StorageLive` are irrelevant
     .                           // to borrow check.
     .                       }
     .                       StatementKind::StorageDead(local) => {
 4,254 ( 0.00%)                  self.access_place(
     .                               location,
 7,799 ( 0.00%)                      (Place::from(*local), span),
     .                               (Shallow(None), Write(WriteKind::StorageDeadOrDrop)),
     .                               LocalMutationIsAllowed::Yes,
     .                               flow_state,
     .                           );
     .                       }
     .                   }
15,152 ( 0.01%)      }
     .           
 5,568 ( 0.00%)      fn visit_terminator_before_primary_effect(
     .                   &mut self,
     .                   flow_state: &Flows<'cx, 'tcx>,
     .                   term: &'cx Terminator<'tcx>,
     .                   loc: Location,
     .               ) {
     .                   debug!("MirBorrowckCtxt::process_terminator({:?}, {:?}): {:?}", loc, term, flow_state);
     .                   let span = term.source_info.span;
     .           
     .                   self.check_activations(loc, span, flow_state);
     .           
 3,480 ( 0.00%)          match term.kind {
   180 ( 0.00%)              TerminatorKind::SwitchInt { ref discr, switch_ty: _, targets: _ } => {
   180 ( 0.00%)                  self.consume_operand(loc, (discr, span), flow_state);
     .                       }
   548 ( 0.00%)              TerminatorKind::Drop { place, target: _, unwind: _ } => {
     .                           debug!(
     .                               "visit_terminator_drop \
     .                                loc: {:?} term: {:?} place: {:?} span: {:?}",
     .                               loc, term, place, span
     .                           );
     .           
 1,644 ( 0.00%)                  self.access_place(
     .                               loc,
 2,466 ( 0.00%)                      (place, span),
     .                               (AccessDepth::Drop, Write(WriteKind::StorageDeadOrDrop)),
     .                               LocalMutationIsAllowed::Yes,
     .                               flow_state,
     .                           );
     .                       }
     .                       TerminatorKind::DropAndReplace {
     8 ( 0.00%)                  place: drop_place,
     4 ( 0.00%)                  value: ref new_value,
     .                           target: _,
     .                           unwind: _,
     .                       } => {
    64 ( 0.00%)                  self.mutate_place(loc, (drop_place, span), Deep, flow_state);
     .                           self.consume_operand(loc, (new_value, span), flow_state);
     .                       }
     .                       TerminatorKind::Call {
   621 ( 0.00%)                  ref func,
     .                           ref args,
     .                           ref destination,
     .                           cleanup: _,
     .                           from_hir_call: _,
     .                           fn_span: _,
     .                       } => {
 1,656 ( 0.00%)                  self.consume_operand(loc, (func, span), flow_state);
     .                           for arg in args {
 1,704 ( 0.00%)                      self.consume_operand(loc, (arg, span), flow_state);
     .                           }
   828 ( 0.00%)                  if let Some((dest, _ /*bb*/)) = *destination {
 2,484 ( 0.00%)                      self.mutate_place(loc, (dest, span), Deep, flow_state);
     .                           }
     .                       }
     6 ( 0.00%)              TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {
     1 ( 0.00%)                  self.consume_operand(loc, (cond, span), flow_state);
     .                           use rustc_middle::mir::AssertKind;
     2 ( 0.00%)                  if let AssertKind::BoundsCheck { ref len, ref index } = *msg {
     .                               self.consume_operand(loc, (len, span), flow_state);
     .                               self.consume_operand(loc, (index, span), flow_state);
     .                           }
     .                       }
     .           
     .                       TerminatorKind::Yield { ref value, resume: _, resume_arg, drop: _ } => {
     .                           self.consume_operand(loc, (value, span), flow_state);
     .                           self.mutate_place(loc, (resume_arg, span), Deep, flow_state);
-- line 748 ----------------------------------------
-- line 790 ----------------------------------------
     .                       | TerminatorKind::Resume
     .                       | TerminatorKind::Return
     .                       | TerminatorKind::GeneratorDrop
     .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
     .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ } => {
     .                           // no data used, thus irrelevant to borrowck
     .                       }
     .                   }
 5,176 ( 0.00%)      }
     .           
 4,872 ( 0.00%)      fn visit_terminator_after_primary_effect(
     .                   &mut self,
     .                   flow_state: &Flows<'cx, 'tcx>,
     .                   term: &'cx Terminator<'tcx>,
     .                   loc: Location,
     .               ) {
   696 ( 0.00%)          let span = term.source_info.span;
     .           
 2,784 ( 0.00%)          match term.kind {
     .                       TerminatorKind::Yield { value: _, resume: _, resume_arg: _, drop: _ } => {
     .                           if self.movable_generator {
     .                               // Look for any active borrows to locals
     .                               let borrow_set = self.borrow_set.clone();
     .                               for i in flow_state.borrows.iter() {
     .                                   let borrow = &borrow_set[i];
     .                                   self.check_for_local_borrow(borrow, span);
     .                               }
-- line 816 ----------------------------------------
-- line 817 ----------------------------------------
     .                           }
     .                       }
     .           
     .                       TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {
     .                           // Returning from the function implicitly kills storage for all locals and statics.
     .                           // Often, the storage will already have been killed by an explicit
     .                           // StorageDead, but we don't always emit those (notably on unwind paths),
     .                           // so this "extra check" serves as a kind of backup.
    60 ( 0.00%)                  let borrow_set = self.borrow_set.clone();
     .                           for i in flow_state.borrows.iter() {
     .                               let borrow = &borrow_set[i];
     .                               self.check_for_invalidation_at_exit(loc, borrow, span);
     .                           }
     .                       }
     .           
     .                       TerminatorKind::Abort
     .                       | TerminatorKind::Assert { .. }
-- line 833 ----------------------------------------
-- line 836 ----------------------------------------
     .                       | TerminatorKind::DropAndReplace { .. }
     .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
     .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ }
     .                       | TerminatorKind::Goto { .. }
     .                       | TerminatorKind::SwitchInt { .. }
     .                       | TerminatorKind::Unreachable
     .                       | TerminatorKind::InlineAsm { .. } => {}
     .                   }
 5,568 ( 0.00%)      }
     .           }
     .           
     .           use self::AccessDepth::{Deep, Shallow};
     .           use self::ReadOrWrite::{Activation, Read, Reservation, Write};
     .           
     .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
     .           enum ArtificialField {
     .               ArrayLength,
-- line 852 ----------------------------------------
-- line 913 ----------------------------------------
     .           /// When checking permissions for a place access, this flag is used to indicate that an immutable
     .           /// local place can be mutated.
     .           //
     .           // FIXME: @nikomatsakis suggested that this flag could be removed with the following modifications:
     .           // - Merge `check_access_permissions()` and `check_if_reassignment_to_immutable_state()`.
     .           // - Split `is_mutable()` into `is_assignable()` (can be directly assigned) and
     .           //   `is_declared_mutable()`.
     .           // - Take flow state into consideration in `is_assignable()` for local variables.
   551 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
     .           enum LocalMutationIsAllowed {
     .               Yes,
     .               /// We want use of immutable upvars to cause a "write to immutable upvar"
     .               /// error, not an "reassignment" error.
     .               ExceptUpvars,
     .               No,
     .           }
     .           
-- line 929 ----------------------------------------
-- line 970 ----------------------------------------
     .               }
     .           
     .               /// Checks an access to the given place to see if it is allowed. Examines the set of borrows
     .               /// that are in scope, as well as which paths have been initialized, to ensure that (a) the
     .               /// place is initialized and (b) it is not borrowed in some way that would prevent this
     .               /// access.
     .               ///
     .               /// Returns `true` if an error is reported.
36,560 ( 0.02%)      fn access_place(
     .                   &mut self,
     .                   location: Location,
     .                   place_span: (Place<'tcx>, Span),
     .                   kind: (AccessDepth, ReadOrWrite),
     .                   is_local_mutation_allowed: LocalMutationIsAllowed,
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) {
     .                   let (sd, rw) = kind;
     .           
 9,140 ( 0.00%)          if let Activation(_, borrow_index) = rw {
    54 ( 0.00%)              if self.reservation_error_reported.contains(&place_span.0) {
     .                           debug!(
     .                               "skipping access_place for activation of invalid reservation \
     .                                place: {:?} borrow_index: {:?}",
     .                               place_span.0, borrow_index
     .                           );
     .                           return;
     .                       }
     .                   }
     .           
     .                   // Check is_empty() first because it's the common case, and doing that
     .                   // way we avoid the clone() call.
 2,285 ( 0.00%)          if !self.access_place_error_reported.is_empty()
     .                       && self.access_place_error_reported.contains(&(place_span.0, place_span.1))
     .                   {
     .                       debug!(
     .                           "access_place: suppressing error place_span=`{:?}` kind=`{:?}`",
     .                           place_span, kind
     .                       );
     .                       return;
     .                   }
     .           
13,710 ( 0.01%)          let mutability_error = self.check_access_permissions(
 9,140 ( 0.00%)              place_span,
     .                       rw,
     .                       is_local_mutation_allowed,
     .                       flow_state,
     .                       location,
     .                   );
     .                   let conflict_error =
25,135 ( 0.01%)              self.check_access_for_conflict(location, place_span, sd, rw, flow_state);
     .           
 6,855 ( 0.00%)          if let (Activation(_, borrow_idx), true) = (kind.1, conflict_error) {
     .                       // Suppress this warning when there's an error being emitted for the
     .                       // same borrow: fixing the error is likely to fix the warning.
     .                       self.reservation_warnings.remove(&borrow_idx);
     .                   }
     .           
 6,855 ( 0.00%)          if conflict_error || mutability_error {
     .                       debug!("access_place: logging error place_span=`{:?}` kind=`{:?}`", place_span, kind);
     .           
     .                       self.access_place_error_reported.insert((place_span.0, place_span.1));
     .                   }
18,280 ( 0.01%)      }
     .           
     .               fn check_access_for_conflict(
     .                   &mut self,
     .                   location: Location,
     .                   place_span: (Place<'tcx>, Span),
     .                   sd: AccessDepth,
     .                   rw: ReadOrWrite,
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) -> bool {
     .                   debug!(
     .                       "check_access_for_conflict(location={:?}, place_span={:?}, sd={:?}, rw={:?})",
     .                       location, place_span, sd, rw,
     .                   );
     .           
 2,285 ( 0.00%)          let mut error_reported = false;
 6,855 ( 0.00%)          let tcx = self.infcx.tcx;
     .                   let body = self.body;
 4,570 ( 0.00%)          let borrow_set = self.borrow_set.clone();
     .           
     .                   // Use polonius output if it has been enabled.
 4,570 ( 0.00%)          let polonius_output = self.polonius_output.clone();
     .                   let borrows_in_scope = if let Some(polonius) = &polonius_output {
     .                       let location = self.location_table.start_index(location);
     .                       Either::Left(polonius.errors_at(location).iter().copied())
     .                   } else {
     .                       Either::Right(flow_state.borrows.iter())
     .                   };
     .           
29,705 ( 0.01%)          each_borrow_involving_path(
     .                       self,
     .                       tcx,
     .                       body,
     .                       location,
13,710 ( 0.01%)              (sd, place_span.0),
     .                       &borrow_set,
13,710 ( 0.01%)              borrows_in_scope,
25,543 ( 0.01%)              |this, borrow_index, borrow| match (rw, borrow.kind) {
     .                           // Obviously an activation is compatible with its own
     .                           // reservation (or even prior activating uses of same
     .                           // borrow); so don't check if they interfere.
     .                           //
     .                           // NOTE: *reservations* do conflict with themselves;
     .                           // thus aren't injecting unsoundenss w/ this check.)
    27 ( 0.00%)                  (Activation(_, activating), _) if activating == borrow_index => {
     .                               debug!(
     .                                   "check_access_for_conflict place_span: {:?} sd: {:?} rw: {:?} \
     .                                    skipping {:?} b/c activation of same borrow_index",
     .                                   place_span,
     .                                   sd,
     .                                   rw,
     .                                   (borrow_index, borrow),
     .                               );
-- line 1084 ----------------------------------------
-- line 1179 ----------------------------------------
     .                                   }
     .                               }
     .                               Control::Break
     .                           }
     .                       },
     .                   );
     .           
     .                   error_reported
 6,855 ( 0.00%)      }
     .           
 7,260 ( 0.00%)      fn mutate_place(
     .                   &mut self,
     .                   location: Location,
     .                   place_span: (Place<'tcx>, Span),
     .                   kind: AccessDepth,
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) {
     .                   // Write of P[i] or *P requires P init'd.
 6,534 ( 0.00%)          self.check_if_assigned_path_is_moved(location, place_span, flow_state);
     .           
     .                   // Special case: you can assign an immutable local variable
     .                   // (e.g., `x = ...`) so long as it has never been initialized
     .                   // before (at this point in the flow).
   726 ( 0.00%)          if let Some(local) = place_span.0.as_local() {
 2,888 ( 0.00%)              if let Mutability::Not = self.body.local_decls[local].mutability {
     .                           // check for reassignments to immutable local variables
     .                           self.check_if_reassignment_to_immutable_state(
     .                               location, local, place_span, flow_state,
     .                           );
     .                           return;
     .                       }
     .                   }
     .           
     .                   // Otherwise, use the normal access permission rules.
 6,120 ( 0.00%)          self.access_place(
     .                       location,
 2,040 ( 0.00%)              place_span,
     .                       (kind, Write(WriteKind::Mutate)),
     .                       LocalMutationIsAllowed::No,
     .                       flow_state,
     .                   );
 5,808 ( 0.00%)      }
     .           
     .               fn consume_rvalue(
     .                   &mut self,
     .                   location: Location,
     .                   (rvalue, span): (&'cx Rvalue<'tcx>, Span),
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) {
 3,090 ( 0.00%)          match *rvalue {
   666 ( 0.00%)              Rvalue::Ref(_ /*rgn*/, bk, place) => {
 2,578 ( 0.00%)                  let access_kind = match bk {
     .                               BorrowKind::Shallow => {
     .                                   (Shallow(Some(ArtificialField::ShallowBorrow)), Read(ReadKind::Borrow(bk)))
     .                               }
     .                               BorrowKind::Shared => (Deep, Read(ReadKind::Borrow(bk))),
     .                               BorrowKind::Unique | BorrowKind::Mut { .. } => {
     .                                   let wk = WriteKind::MutableBorrow(bk);
    86 ( 0.00%)                          if allow_two_phase_borrow(bk) {
     .                                       (Deep, Reservation(wk))
     .                                   } else {
     .                                       (Deep, Write(wk))
     .                                   }
     .                               }
     .                           };
     .           
 4,662 ( 0.00%)                  self.access_place(
     .                               location,
   888 ( 0.00%)                      (place, span),
     .                               access_kind,
     .                               LocalMutationIsAllowed::No,
     .                               flow_state,
     .                           );
     .           
     .                           let action = if bk == BorrowKind::Shallow {
     .                               InitializationRequiringAction::MatchOn
     .                           } else {
     .                               InitializationRequiringAction::Borrow
     .                           };
     .           
 1,554 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
     .                               location,
     .                               action,
 1,554 ( 0.00%)                      (place.as_ref(), span),
     .                               flow_state,
     .                           );
     .                       }
     .           
     .                       Rvalue::AddressOf(mutability, place) => {
     .                           let access_kind = match mutability {
     .                               Mutability::Mut => (
     .                                   Deep,
-- line 1270 ----------------------------------------
-- line 1302 ----------------------------------------
     .                       }
     .           
     .                       Rvalue::Len(place) | Rvalue::Discriminant(place) => {
     .                           let af = match *rvalue {
     .                               Rvalue::Len(..) => Some(ArtificialField::ArrayLength),
     .                               Rvalue::Discriminant(..) => None,
     .                               _ => unreachable!(),
     .                           };
   448 ( 0.00%)                  self.access_place(
     .                               location,
   112 ( 0.00%)                      (place, span),
     .                               (Shallow(af), Read(ReadKind::Copy)),
     .                               LocalMutationIsAllowed::No,
     .                               flow_state,
     .                           );
   196 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
     .                               location,
     .                               InitializationRequiringAction::Use,
   196 ( 0.00%)                      (place.as_ref(), span),
     .                               flow_state,
     .                           );
     .                       }
     .           
     .                       Rvalue::BinaryOp(_bin_op, box (ref operand1, ref operand2))
     .                       | Rvalue::CheckedBinaryOp(_bin_op, box (ref operand1, ref operand2)) => {
    40 ( 0.00%)                  self.consume_operand(location, (operand1, span), flow_state);
    28 ( 0.00%)                  self.consume_operand(location, (operand2, span), flow_state);
     .                       }
     .           
     .                       Rvalue::NullaryOp(_op, _ty) => {
     .                           // nullary ops take no dynamic input; no borrowck effect.
     .                       }
     .           
     .                       Rvalue::Aggregate(ref aggregate_kind, ref operands) => {
     .                           // We need to report back the list of mutable upvars that were
     .                           // moved into the closure and subsequently used by the closure,
     .                           // in order to populate our used_mut set.
   147 ( 0.00%)                  match **aggregate_kind {
     .                               AggregateKind::Closure(def_id, _) | AggregateKind::Generator(def_id, _, _) => {
     .                                   let BorrowCheckResult { used_mut_upvars, .. } =
    24 ( 0.00%)                              self.infcx.tcx.mir_borrowck(def_id.expect_local());
     .                                   debug!("{:?} used_mut_upvars={:?}", def_id, used_mut_upvars);
     .                                   for field in used_mut_upvars {
     2 ( 0.00%)                              self.propagate_closure_used_mut_upvar(&operands[field.index()]);
     .                                   }
     .                               }
     .                               AggregateKind::Adt(..)
     .                               | AggregateKind::Array(..)
     .                               | AggregateKind::Tuple { .. } => (),
     .                           }
     .           
     .                           for operand in operands {
-- line 1353 ----------------------------------------
-- line 1391 ----------------------------------------
     .           
     .                       // Handle(b)
     .                       this.used_mut.insert(place.local);
     .                   };
     .           
     .                   // This relies on the current way that by-value
     .                   // captures of a closure are copied/moved directly
     .                   // when generating MIR.
     6 ( 0.00%)          match *operand {
     .                       Operand::Move(place) | Operand::Copy(place) => {
     2 ( 0.00%)                  match place.as_local() {
     2 ( 0.00%)                      Some(local) if !self.body.local_decls[local].is_user_variable() => {
     2 ( 0.00%)                          if self.body.local_decls[local].ty.is_mutable_ptr() {
     .                                       // The variable will be marked as mutable by the borrow.
     .                                       return;
     .                                   }
     .                                   // This is an edge case where we have a `move` closure
     .                                   // inside a non-move closure, and the inner closure
     .                                   // contains a mutation:
     .                                   //
     .                                   // let mut i = 0;
-- line 1411 ----------------------------------------
-- line 1448 ----------------------------------------
     .                               }
     .                               _ => propagate_closure_used_mut_place(self, place),
     .                           }
     .                       }
     .                       Operand::Constant(..) => {}
     .                   }
     .               }
     .           
 9,132 ( 0.00%)      fn consume_operand(
     .                   &mut self,
     .                   location: Location,
     .                   (operand, span): (&'cx Operand<'tcx>, Span),
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) {
 4,192 ( 0.00%)          match *operand {
   189 ( 0.00%)              Operand::Copy(place) => {
     .                           // copy of place: check if this is "copy of frozen path"
     .                           // (FIXME: see check_loans.rs)
   378 ( 0.00%)                  self.access_place(
     .                               location,
   315 ( 0.00%)                      (place, span),
     .                               (Deep, Read(ReadKind::Copy)),
     .                               LocalMutationIsAllowed::No,
     .                               flow_state,
     .                           );
     .           
     .                           // Finally, check if path was already moved.
     .                           self.check_if_path_or_subpath_is_moved(
     .                               location,
     .                               InitializationRequiringAction::Use,
     .                               (place.as_ref(), span),
     .                               flow_state,
     .                           );
     .                       }
 1,356 ( 0.00%)              Operand::Move(place) => {
     .                           // move of place: check if this is move of already borrowed path
 3,428 ( 0.00%)                  self.access_place(
     .                               location,
 2,260 ( 0.00%)                      (place, span),
     .                               (Deep, Write(WriteKind::Move)),
     .                               LocalMutationIsAllowed::Yes,
     .                               flow_state,
     .                           );
     .           
     .                           // Finally, check if path was already moved.
   352 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
     .                               location,
     .                               InitializationRequiringAction::Use,
   264 ( 0.00%)                      (place.as_ref(), span),
     .                               flow_state,
     .                           );
     .                       }
     .                       Operand::Constant(_) => {}
     .                   }
 6,088 ( 0.00%)      }
     .           
     .               /// Checks whether a borrow of this place is invalidated when the function
     .               /// exits
     .               fn check_for_invalidation_at_exit(
     .                   &mut self,
     .                   location: Location,
     .                   borrow: &BorrowData<'tcx>,
     .                   span: Span,
-- line 1510 ----------------------------------------
-- line 1573 ----------------------------------------
     .                       err.buffer(&mut self.errors_buffer);
     .                   }
     .               }
     .           
     .               fn check_activations(&mut self, location: Location, span: Span, flow_state: &Flows<'cx, 'tcx>) {
     .                   // Two-phase borrow support: For each activation that is newly
     .                   // generated at this statement, check if it interferes with
     .                   // another borrow.
 5,180 ( 0.00%)          let borrow_set = self.borrow_set.clone();
 9,691 ( 0.00%)          for &borrow_index in borrow_set.activations_at_location(location) {
     .                       let borrow = &borrow_set[borrow_index];
     .           
     .                       // only mutable borrows should be 2-phase
   135 ( 0.00%)              assert!(match borrow.kind {
     .                           BorrowKind::Shared | BorrowKind::Shallow => false,
     .                           BorrowKind::Unique | BorrowKind::Mut { .. } => true,
     .                       });
     .           
   324 ( 0.00%)              self.access_place(
     .                           location,
   162 ( 0.00%)                  (borrow.borrowed_place, span),
   243 ( 0.00%)                  (Deep, Activation(WriteKind::MutableBorrow(borrow.kind), borrow_index)),
     .                           LocalMutationIsAllowed::No,
     .                           flow_state,
     .                       );
     .                       // We do not need to call `check_if_path_or_subpath_is_moved`
     .                       // again, as we already called it when we made the
     .                       // initial reservation.
     .                   }
     .               }
-- line 1602 ----------------------------------------
-- line 1606 ----------------------------------------
     .                   location: Location,
     .                   local: Local,
     .                   place_span: (Place<'tcx>, Span),
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) {
     .                   debug!("check_if_reassignment_to_immutable_state({:?})", local);
     .           
     .                   // Check if any of the initializiations of `local` have happened yet:
 1,296 ( 0.00%)          if let Some(init_index) = self.is_local_ever_initialized(local, flow_state) {
     .                       // And, if so, report an error.
     .                       let init = &self.move_data.inits[init_index];
     .                       let span = init.span(&self.body);
     .                       self.report_illegal_reassignment(location, place_span, span, place_span.0);
     .                   }
     .               }
     .           
10,803 ( 0.00%)      fn check_if_full_path_is_moved(
     .                   &mut self,
     .                   location: Location,
     .                   desired_action: InitializationRequiringAction,
     .                   place_span: (PlaceRef<'tcx>, Span),
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) {
     .                   let maybe_uninits = &flow_state.uninits;
     .           
-- line 1630 ----------------------------------------
-- line 1660 ----------------------------------------
     .                   // Therefore, if we seek out the *closest* prefix for which we
     .                   // have a MovePath, that should capture the initialization
     .                   // state for the place scenario.
     .                   //
     .                   // This code covers scenarios 1, 2, and 3.
     .           
     .                   debug!("check_if_full_path_is_moved place: {:?}", place_span.0);
     .                   let (prefix, mpi) = self.move_path_closest_to(place_span.0);
   831 ( 0.00%)          if maybe_uninits.contains(mpi) {
     .                       self.report_use_of_moved_or_uninitialized(
     .                           location,
     .                           desired_action,
     .                           (prefix, place_span.0, place_span.1),
     .                           mpi,
     .                       );
     .                   } // Only query longest prefix with a MovePath, not further
     .                   // ancestors; dataflow recurs on children when parents
     .                   // move (to support partial (re)inits).
     .                   //
     .                   // (I.e., querying parents breaks scenario 7; but may want
     .                   // to do such a query based on partial-init feature-gate.)
 6,648 ( 0.00%)      }
     .           
     .               /// Subslices correspond to multiple move paths, so we iterate through the
     .               /// elements of the base array. For each element we check
     .               ///
     .               /// * Does this element overlap with our slice.
     .               /// * Is any part of it uninitialized.
     .               fn check_if_subslice_element_is_moved(
     .                   &mut self,
-- line 1689 ----------------------------------------
-- line 1719 ----------------------------------------
     .                                       return; // don't bother finding other problems.
     .                                   }
     .                               }
     .                           }
     .                       }
     .                   }
     .               }
     .           
 9,097 ( 0.00%)      fn check_if_path_or_subpath_is_moved(
     .                   &mut self,
     .                   location: Location,
     .                   desired_action: InitializationRequiringAction,
     .                   place_span: (PlaceRef<'tcx>, Span),
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) {
 1,654 ( 0.00%)          let maybe_uninits = &flow_state.uninits;
     .           
     .                   // Bad scenarios:
     .                   //
     .                   // 1. Move of `a.b.c`, use of `a` or `a.b`
     .                   //    partial initialization support, one might have `a.x`
     .                   //    initialized but not `a.b`.
     .                   // 2. All bad scenarios from `check_if_full_path_is_moved`
     .                   //
-- line 1742 ----------------------------------------
-- line 1743 ----------------------------------------
     .                   // OK scenarios:
     .                   //
     .                   // 3. Move of `a.b.c`, use of `a.b.d`
     .                   // 4. Uninitialized `a.x`, initialized `a.b`, use of `a.b`
     .                   // 5. Copied `(a.b: &_)`, use of `*(a.b).c`; note that `a.b`
     .                   //    must have been initialized for the use to be sound.
     .                   // 6. Move of `a.b.c` then reinit of `a.b.c.d`, use of `a.b.c.d`
     .           
 5,789 ( 0.00%)          self.check_if_full_path_is_moved(location, desired_action, place_span, flow_state);
     .           
   864 ( 0.00%)          if let Some((place_base, ProjectionElem::Subslice { from, to, from_end: false })) =
   827 ( 0.00%)              place_span.0.last_projection()
     .                   {
     .                       let place_ty = place_base.ty(self.body(), self.infcx.tcx);
     .                       if let ty::Array(..) = place_ty.ty.kind() {
     .                           self.check_if_subslice_element_is_moved(
     .                               location,
     .                               desired_action,
     .                               (place_base, place_span.1),
     .                               maybe_uninits,
-- line 1762 ----------------------------------------
-- line 1772 ----------------------------------------
     .                   //
     .                   // (Distinct from handling of scenarios 1+2+4 above because
     .                   // `place` does not interfere with suffixes of its prefixes,
     .                   // e.g., `a.b.c` does not interfere with `a.b.d`)
     .                   //
     .                   // This code covers scenario 1.
     .           
     .                   debug!("check_if_path_or_subpath_is_moved place: {:?}", place_span.0);
 3,308 ( 0.00%)          if let Some(mpi) = self.move_path_for_place(place_span.0) {
 2,548 ( 0.00%)              let uninit_mpi = self
     .                           .move_data
     .                           .find_in_move_path_or_its_descendants(mpi, |mpi| maybe_uninits.contains(mpi));
     .           
 1,274 ( 0.00%)              if let Some(uninit_mpi) = uninit_mpi {
     .                           self.report_use_of_moved_or_uninitialized(
     .                               location,
     .                               desired_action,
     .                               (place_span.0, place_span.0, place_span.1),
     .                               uninit_mpi,
     .                           );
     .                           return; // don't bother finding other problems.
     .                       }
     .                   }
 6,616 ( 0.00%)      }
     .           
     .               /// Currently MoveData does not store entries for all places in
     .               /// the input MIR. For example it will currently filter out
     .               /// places that are Copy; thus we do not track places of shared
     .               /// reference type. This routine will walk up a place along its
     .               /// prefixes, searching for a foundational place that *is*
     .               /// tracked in the MoveData.
     .               ///
     .               /// An Err result includes a tag indicated why the search failed.
     .               /// Currently this can only occur if the place is built off of a
     .               /// static variable, as we do not track those in the MoveData.
     .               fn move_path_closest_to(&mut self, place: PlaceRef<'tcx>) -> (PlaceRef<'tcx>, MovePathIndex) {
10,803 ( 0.00%)          match self.move_data.rev_lookup.find(place) {
     .                       LookupResult::Parent(Some(mpi)) | LookupResult::Exact(mpi) => {
     .                           (self.move_data.move_paths[mpi].place.as_ref(), mpi)
     .                       }
     .                       LookupResult::Parent(None) => panic!("should have move path for every Local"),
     .                   }
     .               }
     .           
     .               fn move_path_for_place(&mut self, place: PlaceRef<'tcx>) -> Option<MovePathIndex> {
     .                   // If returns None, then there is no move path corresponding
     .                   // to a direct owner of `place` (which means there is nothing
     .                   // that borrowck tracks for its analysis).
     .           
 7,451 ( 0.00%)          match self.move_data.rev_lookup.find(place) {
     .                       LookupResult::Parent(_) => None,
     .                       LookupResult::Exact(mpi) => Some(mpi),
     .                   }
     .               }
     .           
     .               fn check_if_assigned_path_is_moved(
     .                   &mut self,
     .                   location: Location,
     .                   (place, span): (Place<'tcx>, Span),
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) {
     .                   debug!("check_if_assigned_path_is_moved place: {:?}", place);
     .           
     .                   // None case => assigning to `x` does not require `x` be initialized.
     4 ( 0.00%)          for (place_base, elem) in place.iter_projections().rev() {
    20 ( 0.00%)              match elem {
     .                           ProjectionElem::Index(_/*operand*/) |
     .                           ProjectionElem::ConstantIndex { .. } |
     .                           // assigning to P[i] requires P to be valid.
     .                           ProjectionElem::Downcast(_/*adt_def*/, _/*variant_idx*/) =>
     .                           // assigning to (P->variant) is okay if assigning to `P` is okay
     .                           //
     .                           // FIXME: is this true even if P is an adt with a dtor?
     .                           { }
     .           
     .                           // assigning to (*P) requires P to be initialized
     .                           ProjectionElem::Deref => {
    28 ( 0.00%)                      self.check_if_full_path_is_moved(
     .                                   location, InitializationRequiringAction::Use,
    24 ( 0.00%)                          (place_base, span), flow_state);
     .                               // (base initialized; no need to
     .                               // recur further)
     .                               break;
     .                           }
     .           
     .                           ProjectionElem::Subslice { .. } => {
     .                               panic!("we don't allow assignments to subslices, location: {:?}",
     .                                      location);
     .                           }
     .           
     .                           ProjectionElem::Field(..) => {
     .                               // if type of `P` has a dtor, then
     .                               // assigning to `P.f` requires `P` itself
     .                               // be already initialized
     .                               let tcx = self.infcx.tcx;
     1 ( 0.00%)                      let base_ty = place_base.ty(self.body(), tcx).ty;
     3 ( 0.00%)                      match base_ty.kind() {
     6 ( 0.00%)                          ty::Adt(def, _) if def.has_dtor(tcx) => {
     .                                       self.check_if_path_or_subpath_is_moved(
     .                                           location, InitializationRequiringAction::Assignment,
     .                                           (place_base, span), flow_state);
     .           
     .                                       // (base initialized; no need to
     .                                       // recur further)
     .                                       break;
     .                                   }
-- line 1877 ----------------------------------------
-- line 1931 ----------------------------------------
     .           
     .                       // Shallow so that we'll stop at any dereference; we'll
     .                       // report errors about issues with such bases elsewhere.
     .                       let maybe_uninits = &flow_state.uninits;
     .           
     .                       // Find the shortest uninitialized prefix you can reach
     .                       // without going over a Deref.
     .                       let mut shortest_uninit_seen = None;
    22 ( 0.00%)              for prefix in this.prefixes(base, PrefixSet::Shallow) {
     1 ( 0.00%)                  let mpi = match this.move_path_for_place(prefix) {
     .                               Some(mpi) => mpi,
     .                               None => continue,
     .                           };
     .           
     .                           if maybe_uninits.contains(mpi) {
     .                               debug!(
     .                                   "check_parent_of_field updating shortest_uninit_seen from {:?} to {:?}",
     .                                   shortest_uninit_seen,
-- line 1948 ----------------------------------------
-- line 1949 ----------------------------------------
     .                                   Some((prefix, mpi))
     .                               );
     .                               shortest_uninit_seen = Some((prefix, mpi));
     .                           } else {
     .                               debug!("check_parent_of_field {:?} is definitely initialized", (prefix, mpi));
     .                           }
     .                       }
     .           
     3 ( 0.00%)              if let Some((prefix, mpi)) = shortest_uninit_seen {
     .                           // Check for a reassignment into an uninitialized field of a union (for example,
     .                           // after a move out). In this case, do not report an error here. There is an
     .                           // exception, if this is the first assignment into the union (that is, there is
     .                           // no move out from an earlier location) then this is an attempt at initialization
     .                           // of the union - we should error in that case.
     .                           let tcx = this.infcx.tcx;
     .                           if base.ty(this.body(), tcx).ty.is_union() {
     .                               if this.move_data.path_map[mpi].iter().any(|moi| {
-- line 1965 ----------------------------------------
-- line 1979 ----------------------------------------
     .                   }
     .               }
     .           
     .               /// Checks the permissions for the given place and read or write kind
     .               ///
     .               /// Returns `true` if an error is reported.
     .               fn check_access_permissions(
     .                   &mut self,
 4,570 ( 0.00%)          (place, span): (Place<'tcx>, Span),
     .                   kind: ReadOrWrite,
     .                   is_local_mutation_allowed: LocalMutationIsAllowed,
     .                   flow_state: &Flows<'cx, 'tcx>,
     .                   location: Location,
     .               ) -> bool {
     .                   debug!(
     .                       "check_access_permissions({:?}, {:?}, is_local_mutation_allowed: {:?})",
     .                       place, kind, is_local_mutation_allowed
     .                   );
     .           
     .                   let error_access;
     .                   let the_place_err;
     .           
36,047 ( 0.02%)          match kind {
     .                       Reservation(WriteKind::MutableBorrow(
     .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
     .                       ))
     .                       | Write(WriteKind::MutableBorrow(
     .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
     .                       )) => {
   430 ( 0.00%)                  let is_local_mutation_allowed = match borrow_kind {
     .                               BorrowKind::Unique => LocalMutationIsAllowed::Yes,
     .                               BorrowKind::Mut { .. } => is_local_mutation_allowed,
     .                               BorrowKind::Shared | BorrowKind::Shallow => unreachable!(),
     .                           };
   301 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
     .                               Ok(root_place) => {
     .                                   self.add_used_mut(root_place, flow_state);
     .                                   return false;
     .                               }
     .                               Err(place_err) => {
     .                                   error_access = AccessKind::MutableBorrow;
     .                                   the_place_err = place_err;
     .                               }
     .                           }
     .                       }
     .                       Reservation(WriteKind::Mutate) | Write(WriteKind::Mutate) => {
 3,570 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
     .                               Ok(root_place) => {
     .                                   self.add_used_mut(root_place, flow_state);
     .                                   return false;
     .                               }
     .                               Err(place_err) => {
     .                                   error_access = AccessKind::Mutate;
     .                                   the_place_err = place_err;
     .                               }
-- line 2033 ----------------------------------------
-- line 2041 ----------------------------------------
     .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
     .                       )
     .                       | Write(
     .                           WriteKind::Move
     .                           | WriteKind::StorageDeadOrDrop
     .                           | WriteKind::MutableBorrow(BorrowKind::Shared)
     .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
     .                       ) => {
 2,870 ( 0.00%)                  if let (Err(_), true) = (
10,045 ( 0.00%)                      self.is_mutable(place.as_ref(), is_local_mutation_allowed),
     .                               self.errors_buffer.is_empty(),
     .                           ) {
     .                               // rust-lang/rust#46908: In pure NLL mode this code path should be
     .                               // unreachable, but we use `delay_span_bug` because we can hit this when
     .                               // dereferencing a non-Copy raw pointer *and* have `-Ztreat-err-as-bug`
     .                               // enabled. We don't want to ICE for that case, as other errors will have
     .                               // been emitted (#52262).
     .                               self.infcx.tcx.sess.delay_span_bug(
-- line 2058 ----------------------------------------
-- line 2094 ----------------------------------------
     .                   if previously_initialized {
     .                       self.report_mutability_error(place, span, the_place_err, error_access, location);
     .                       true
     .                   } else {
     .                       false
     .                   }
     .               }
     .           
 3,735 ( 0.00%)      fn is_local_ever_initialized(
     .                   &self,
     .                   local: Local,
     .                   flow_state: &Flows<'cx, 'tcx>,
     .               ) -> Option<InitIndex> {
 2,241 ( 0.00%)          let mpi = self.move_data.rev_lookup.find_local(local);
   747 ( 0.00%)          let ii = &self.move_data.init_path_map[mpi];
 3,646 ( 0.00%)          for &index in ii {
 2,810 ( 0.00%)              if flow_state.ever_inits.contains(index) {
     .                           return Some(index);
     .                       }
     .                   }
     .                   None
 2,988 ( 0.00%)      }
     .           
     .               /// Adds the place into the used mutable variables set
 2,212 ( 0.00%)      fn add_used_mut(&mut self, root_place: RootPlace<'tcx>, flow_state: &Flows<'cx, 'tcx>) {
     4 ( 0.00%)          match root_place {
 1,659 ( 0.00%)              RootPlace { place_local: local, place_projection: [], is_local_mutation_allowed } => {
     .                           // If the local may have been initialized, and it is now currently being
     .                           // mutated, then it is justified to be annotated with the `mut`
     .                           // keyword, since the mutation may be a possible reassignment.
 1,082 ( 0.00%)                  if is_local_mutation_allowed != LocalMutationIsAllowed::Yes
 1,593 ( 0.00%)                      && self.is_local_ever_initialized(local, flow_state).is_some()
     .                           {
     .                               self.used_mut.insert(local);
     .                           }
     .                       }
     .                       RootPlace {
     .                           place_local: _,
     .                           place_projection: _,
     .                           is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
     .                       } => {}
     .                       RootPlace {
     2 ( 0.00%)                  place_local,
     2 ( 0.00%)                  place_projection: place_projection @ [.., _],
     .                           is_local_mutation_allowed: _,
     .                       } => {
     4 ( 0.00%)                  if let Some(field) = self.is_upvar_field_projection(PlaceRef {
     .                               local: place_local,
     .                               projection: place_projection,
     .                           }) {
     2 ( 0.00%)                      self.used_mut_upvars.push(field);
     .                           }
     .                       }
     .                   }
 2,112 ( 0.00%)      }
     .           
     .               /// Whether this value can be written or borrowed mutably.
     .               /// Returns the root place if the place passed in is a projection.
22,704 ( 0.01%)      fn is_mutable(
     .                   &self,
     .                   place: PlaceRef<'tcx>,
     .                   is_local_mutation_allowed: LocalMutationIsAllowed,
     .               ) -> Result<RootPlace<'tcx>, PlaceRef<'tcx>> {
     .                   debug!("is_mutable: place={:?}, is_local...={:?}", place, is_local_mutation_allowed);
 6,344 ( 0.00%)          match place.last_projection() {
     .                       None => {
 1,988 ( 0.00%)                  let local = &self.body.local_decls[place.local];
 5,964 ( 0.00%)                  match local.mutability {
   788 ( 0.00%)                      Mutability::Not => match is_local_mutation_allowed {
 2,364 ( 0.00%)                          LocalMutationIsAllowed::Yes => Ok(RootPlace {
     .                                       place_local: place.local,
     .                                       place_projection: place.projection,
     .                                       is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
     .                                   }),
     .                                   LocalMutationIsAllowed::ExceptUpvars => Ok(RootPlace {
     .                                       place_local: place.local,
     .                                       place_projection: place.projection,
     .                                       is_local_mutation_allowed: LocalMutationIsAllowed::ExceptUpvars,
     .                                   }),
     .                                   LocalMutationIsAllowed::No => Err(place),
     .                               },
 3,188 ( 0.00%)                      Mutability::Mut => Ok(RootPlace {
     .                                   place_local: place.local,
     .                                   place_projection: place.projection,
     .                                   is_local_mutation_allowed,
     .                               }),
     .                           }
     .                       }
     .                       Some((place_base, elem)) => {
   228 ( 0.00%)                  match elem {
     .                               ProjectionElem::Deref => {
    48 ( 0.00%)                          let base_ty = place_base.ty(self.body(), self.infcx.tcx).ty;
     .           
     .                                   // Check the kind of deref to decide
   144 ( 0.00%)                          match base_ty.kind() {
     .                                       ty::Ref(_, _, mutbl) => {
    48 ( 0.00%)                                  match mutbl {
     .                                               // Shared borrowed data is never mutable
     .                                               hir::Mutability::Not => Err(place),
     .                                               // Mutably borrowed data is mutable, but only if we have a
     .                                               // unique path to the `&mut`
     .                                               hir::Mutability::Mut => {
    48 ( 0.00%)                                          let mode = match self.is_upvar_field_projection(place) {
    10 ( 0.00%)                                              Some(field) if self.upvars[field.index()].by_ref => {
     .                                                           is_local_mutation_allowed
     .                                                       }
     .                                                       _ => LocalMutationIsAllowed::Yes,
     .                                                   };
     .           
   144 ( 0.00%)                                          self.is_mutable(place_base, mode)
     .                                               }
     .                                           }
     .                                       }
     .                                       ty::RawPtr(tnm) => {
     .                                           match tnm.mutbl {
     .                                               // `*const` raw pointers are not mutable
     .                                               hir::Mutability::Not => Err(place),
     .                                               // `*mut` raw pointers are always mutable, regardless of
-- line 2211 ----------------------------------------
-- line 2228 ----------------------------------------
     .                               // All other projections are owned by their base path, so mutable if
     .                               // base path is mutable
     .                               ProjectionElem::Field(..)
     .                               | ProjectionElem::Index(..)
     .                               | ProjectionElem::ConstantIndex { .. }
     .                               | ProjectionElem::Subslice { .. }
     .                               | ProjectionElem::Downcast(..) => {
     .                                   let upvar_field_projection = self.is_upvar_field_projection(place);
   104 ( 0.00%)                          if let Some(field) = upvar_field_projection {
     .                                       let upvar = &self.upvars[field.index()];
     .                                       debug!(
     .                                           "is_mutable: upvar.mutability={:?} local_mutation_is_allowed={:?} \
     .                                            place={:?}, place_base={:?}",
     .                                           upvar, is_local_mutation_allowed, place, place_base
     .                                       );
    20 ( 0.00%)                              match (upvar.place.mutability, is_local_mutation_allowed) {
     .                                           (
     .                                               Mutability::Not,
     .                                               LocalMutationIsAllowed::No
     .                                               | LocalMutationIsAllowed::ExceptUpvars,
     .                                           ) => Err(place),
     .                                           (Mutability::Not, LocalMutationIsAllowed::Yes)
     .                                           | (Mutability::Mut, _) => {
     .                                               // Subtle: this is an upvar
-- line 2251 ----------------------------------------
-- line 2270 ----------------------------------------
     .                                               // fn main() {
     .                                               //     let var = Vec::new();
     .                                               //     foo(move || {
     .                                               //         var.push(1);
     .                                               //     });
     .                                               // }
     .                                               // ```
     .                                               let _ =
    36 ( 0.00%)                                          self.is_mutable(place_base, is_local_mutation_allowed)?;
     .                                               Ok(RootPlace {
     .                                                   place_local: place.local,
     .                                                   place_projection: place.projection,
     .                                                   is_local_mutation_allowed,
     .                                               })
     .                                           }
     .                                       }
     .                                   } else {
     .                                       self.is_mutable(place_base, is_local_mutation_allowed)
     .                                   }
     .                               }
     .                           }
     .                       }
     .                   }
16,512 ( 0.01%)      }
     .           
     .               /// If `place` is a field projection, and the field is being projected from a closure type,
     .               /// then returns the index of the field being projected. Note that this closure will always
     .               /// be `self` in the current MIR, because that is the only time we directly access the fields
     .               /// of a closure type.
     .               fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {
   700 ( 0.00%)          path_utils::is_upvar_field_projection(self.infcx.tcx, &self.upvars, place_ref, self.body())
     .               }
     .           }
     .           
     .           /// The degree of overlap between 2 places for borrow-checking.
     .           enum Overlap {
     .               /// The places might partially overlap - in this case, we give
     .               /// up and say that they might conflict. This occurs when
     .               /// different fields of a union are borrowed. For example,
-- line 2308 ----------------------------------------

66,747 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/strcmp.S

--------------------------------------------------------------------------------
Ir                  
--------------------------------------------------------------------------------
83,980,529 (36.23%)  events annotated

