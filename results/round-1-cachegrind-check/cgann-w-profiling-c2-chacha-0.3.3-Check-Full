--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name c2_chacha --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg feature="cipher" --cfg feature="default" --cfg feature="rustcrypto_api" --cfg feature="std" -C metadata=8ceb0f38a2fa12c9 -C extra-filename=-8ceb0f38a2fa12c9 --out-dir /usr/home/liquid/tmp/.tmpf1jht8/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpf1jht8/target/debug/deps --extern cipher=/usr/home/liquid/tmp/.tmpf1jht8/target/debug/deps/libcipher-681ea603364f0552.rmeta --extern ppv_lite86=/usr/home/liquid/tmp/.tmpf1jht8/target/debug/deps/libppv_lite86-5f966e875d12d671.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-c2-chacha-0.3.3-Check-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
559,029,610 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
14,587,186 ( 2.61%)  ./malloc/malloc.c:_int_free
13,676,586 ( 2.45%)  ./malloc/malloc.c:_int_malloc
12,291,408 ( 2.20%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
10,305,124 ( 1.84%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 8,790,908 ( 1.57%)  ./malloc/malloc.c:malloc
 4,835,679 ( 0.87%)  ./elf/dl-lookup.c:do_lookup_x
 4,284,092 ( 0.77%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/imports.rs:<rustc_resolve::Resolver>::try_define
 4,201,990 ( 0.75%)  ./malloc/malloc.c:free
 4,141,271 ( 0.74%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 2,949,941 ( 0.53%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,814,887 ( 0.50%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 2,638,671 ( 0.47%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_data_structures::ptr_key::PtrKey<rustc_resolve::NameBinding>, &rustc_resolve::ModuleData)>>::insert::<hashbrown::map::make_hasher<rustc_data_structures::ptr_key::PtrKey<rustc_resolve::NameBinding>, rustc_data_structures::ptr_key::PtrKey<rustc_resolve::NameBinding>, &rustc_resolve::ModuleData, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
 2,623,091 ( 0.47%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,464,080 ( 0.44%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,331,160 ( 0.42%)  ./malloc/malloc.c:malloc_consolidate
 2,139,033 ( 0.38%)  ./elf/do-rel.h:_dl_relocate_object
 1,941,330 ( 0.35%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,924,968 ( 0.34%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/imports.rs:<rustc_resolve::Resolver>::import
 1,887,769 ( 0.34%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 1,833,813 ( 0.33%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/imports.rs:<rustc_resolve::imports::ImportResolver>::resolve_imports
 1,830,178 ( 0.33%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
 1,829,831 ( 0.33%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs:<indexmap::map::core::Entry<rustc_resolve::BindingKey, &core::cell::RefCell<rustc_resolve::imports::NameResolution>>>::or_insert_with::<<rustc_resolve::Resolver>::resolution::{closure#0}>
 1,697,428 ( 0.30%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::Visibility>::is_at_least::<&rustc_resolve::Resolver>
 1,675,939 ( 0.30%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs:<rustc_resolve::Resolver>::resolution
 1,618,148 ( 0.29%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core/raw.rs:<indexmap::map::core::IndexMapCore<rustc_resolve::BindingKey, &core::cell::RefCell<rustc_resolve::imports::NameResolution>>>::entry
 1,565,537 ( 0.28%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_data_structures::ptr_key::PtrKey<rustc_resolve::NameBinding>, &rustc_resolve::ModuleData)>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_data_structures::ptr_key::PtrKey<rustc_resolve::NameBinding>, rustc_data_structures::ptr_key::PtrKey<rustc_resolve::NameBinding>, &rustc_resolve::ModuleData, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
 1,558,642 ( 0.28%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 1,557,767 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
 1,539,993 ( 0.28%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
 1,537,884 ( 0.28%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs:<indexmap::map::core::Entry<rustc_resolve::BindingKey, &core::cell::RefCell<rustc_resolve::imports::NameResolution>>>::or_insert_with::<<rustc_resolve::Resolver>::resolution::{closure#0}>
 1,531,597 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
 1,529,086 ( 0.27%)  ./malloc/malloc.c:realloc
 1,494,428 ( 0.27%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 1,493,372 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/hygiene.rs:<rustc_span::hygiene::HygieneData>::adjust
 1,488,284 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 1,433,231 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs:<rustc_resolve::ModuleData>::for_each_child::<rustc_resolve::Resolver, <rustc_resolve::imports::ImportResolver>::finalize_resolutions_in::{closure#0}>
 1,432,648 ( 0.26%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs:<hashbrown::raw::inner::RawTable<usize>>::reserve_rehash::<indexmap::map::core::get_hash<rustc_resolve::BindingKey, &core::cell::RefCell<rustc_resolve::imports::NameResolution>>::{closure#0}>
 1,362,217 ( 0.24%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
 1,317,412 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs:<rustc_resolve::Resolver>::resolutions
 1,309,424 ( 0.23%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 1,301,276 ( 0.23%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 1,297,152 ( 0.23%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 1,288,043 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs:<rustc_resolve::Resolver>::try_define
 1,274,258 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
 1,264,307 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 1,250,622 ( 0.22%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_span::def_id::DefId, rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>>::{closure#0}>
 1,244,600 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/macros.rs:<rustc_resolve::Resolver>::check_reserved_macro_name
 1,221,157 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
 1,221,016 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 1,194,720 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs:<rustc_resolve::imports::ImportResolver>::resolve_imports
 1,165,938 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 1,164,852 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/hygiene.rs:<scoped_tls::ScopedKey<rustc_span::SessionGlobals>>::with::<<rustc_span::hygiene::HygieneData>::with<core::option::Option<core::option::Option<rustc_span::hygiene::ExpnId>>, <rustc_span::hygiene::SyntaxContext>::reverse_glob_adjust::{closure#0}>::{closure#0}, core::option::Option<core::option::Option<rustc_span::hygiene::ExpnId>>>
 1,141,503 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
 1,137,100 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,133,779 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,109,047 ( 0.20%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs:<indexmap::map::core::IndexMapCore<rustc_resolve::BindingKey, &core::cell::RefCell<rustc_resolve::imports::NameResolution>>>::entry
 1,087,038 ( 0.19%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 1,076,563 ( 0.19%)  ./malloc/malloc.c:_int_realloc
 1,075,248 ( 0.19%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/scoped-tls-1.0.0/src/lib.rs:<scoped_tls::ScopedKey<rustc_span::SessionGlobals>>::with::<<rustc_span::hygiene::HygieneData>::with<core::option::Option<core::option::Option<rustc_span::hygiene::ExpnId>>, <rustc_span::hygiene::SyntaxContext>::reverse_glob_adjust::{closure#0}>::{closure#0}, core::option::Option<core::option::Option<rustc_span::hygiene::ExpnId>>>
 1,073,420 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
 1,043,466 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
 1,013,977 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
   998,352 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
   957,810 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxtInner>::rollback_to
   956,808 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs:<rustc_infer::infer::type_variable::TypeVariableTable>::probe
   954,674 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<rustc_resolve::ModuleData>::for_each_child::<rustc_resolve::Resolver, <rustc_resolve::imports::ImportResolver>::finalize_resolutions_in::{closure#0}>
   946,485 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<indexmap::map::core::Entry<rustc_resolve::BindingKey, &core::cell::RefCell<rustc_resolve::imports::NameResolution>>>::or_insert_with::<<rustc_resolve::Resolver>::resolution::{closure#0}>
   945,824 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
   912,233 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
   908,283 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::SubstFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty
   896,895 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
   876,128 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs:<rustc_resolve::Resolver>::is_accessible_from
   866,865 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs:<rustc_resolve::Resolver>::resolution
   864,856 ( 0.15%)  ./elf/dl-lookup.c:check_match
   832,714 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   817,640 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::HashMap<rustc_data_structures::ptr_key::PtrKey<rustc_resolve::NameBinding>, &rustc_resolve::ModuleData, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
   814,808 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::HashMap<rustc_data_structures::ptr_key::PtrKey<rustc_resolve::NameBinding>, &rustc_resolve::ModuleData, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
   814,415 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(&str, rustc_span::symbol::Symbol)>>::insert::<hashbrown::map::make_hasher<&str, &str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   792,923 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(&str, rustc_span::symbol::Symbol)>>::reserve_rehash::<hashbrown::map::make_hasher<&str, &str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   788,854 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs:stacker::remaining_stack
   770,109 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
   756,782 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   755,856 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
   731,776 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs:<rustc_resolve::ModuleData>::nearest_parent_mod
   729,163 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs:<rustc_trait_selection::traits::select::SelectionContext>::match_impl
   720,285 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_predicate
   718,293 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<rustc_span::symbol::Symbol>::intern
   713,305 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::reuse_or_mk_predicate
   698,606 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/build_reduced_graph.rs:<rustc_resolve::build_reduced_graph::BuildReducedGraphVisitor>::build_reduced_graph_for_external_crate_res
   693,492 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map.rs:<rustc_resolve::Resolver>::resolution
   687,158 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs:<rustc_span::symbol::Symbol>::intern
   686,733 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   683,952 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs:<rustc_parse::lexer::StringReader>::next_token
   680,345 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::PredicateKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   679,967 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs:<rustc_borrowck::MirBorrowckCtxt>::access_place
   672,837 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
   671,440 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<rustc_resolve::Resolver>::import
   670,433 ( 0.12%)  ./malloc/malloc.c:calloc
   669,363 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/thread/local.rs:rustc_span::SESSION_GLOBALS::FOO::__getit
   669,156 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fast_reject.rs:rustc_middle::ty::fast_reject::simplify_type
   666,846 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::context::TyCtxt>::reuse_or_mk_predicate
   665,551 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs:<rustc_infer::infer::equate::Equate as rustc_middle::ty::relate::TypeRelation>::tys
   662,094 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs:<hashbrown::map::HashMap<rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
   661,528 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs:<rustc_ast::tokenstream::Cursor>::next_with_spacing
   655,040 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTableInner<alloc::alloc::Global>>::prepare_insert_slot
   637,304 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   633,825 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::TokenKind as core::clone::Clone>::clone
   628,518 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs:rustc_middle::ty::relate::super_relate_tys::<rustc_infer::infer::combine::Generalizer>
   620,428 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   610,528 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_middle::ty::subst::SubstFolder>
   608,830 ( 0.11%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
   607,864 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxtInner as ena::undo_log::Rollback<rustc_infer::infer::undo_log::UndoLog>>::reverse
   601,365 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
   597,360 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_resolve::imports::ImportResolver>::resolve_imports
   590,990 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs:<rustc_infer::infer::combine::Generalizer as rustc_middle::ty::relate::TypeRelation>::tys
   580,506 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   560,580 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<rustc_middle::ty::PredicateKind as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
   559,225 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
  606,818 ( 0.11%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       17 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,156 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    2,953 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
        6 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
       24 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 213 ----------------------------------------
        .               }
        .           }
        .           
        .           impl RealFileName {
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path(&self) -> Option<&Path> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => {
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    2,352 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
        4 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        3 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
        3 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    6,263 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    7,015 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        4 ( 0.00%)      QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
        .               MacroExpansion(u64),
        .               ProcMacroSourceCode(u64),
        .               /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.
        .               CfgSpec(u64),
-- line 285 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       21 ( 0.00%)      fn from(p: PathBuf) -> Self {
        6 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       18 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       21 ( 0.00%)      }
        .           }
        .           
        2 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
       12 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
       18 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
       18 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
       15 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
        .                   match self.inner {
        .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        .               }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,178 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
-- line 353 ----------------------------------------
-- line 357 ----------------------------------------
        .               }
        .           
        .               pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
        .               }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        3 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
        6 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 383 ----------------------------------------
        .               }
        .           
        .               pub fn proc_macro_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::ProcMacroSourceCode(hasher.finish())
        .               }
        .           
       20 ( 0.00%)      pub fn cfg_spec_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        8 ( 0.00%)          FileName::QuoteExpansion(hasher.finish())
       20 ( 0.00%)      }
        .           
        .               pub fn cli_crate_attr_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::CliCrateAttr(hasher.finish())
        .               }
        .           
        .               pub fn doc_test_source_code(path: PathBuf, line: isize) -> FileName {
-- line 403 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
        2 ( 0.00%)      pub lo: BytePos,
        2 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
        6 ( 0.00%)      pub ctxt: SyntaxContext,
        2 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
   50,971 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
      237 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
   18,200 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
   13,650 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
   18,200 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
   15,579 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
   10,386 ( 0.00%)      }
        .               #[inline]
      740 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
      740 ( 0.00%)      }
        .               #[inline]
    2,187 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
    1,458 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
    2,035 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
    1,221 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
       15 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
       10 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
      711 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
      474 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 671 ----------------------------------------
        .               pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
        .                   while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
        .               }
        .           
        .               /// Edition of the crate from which this span came.
    4,767 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
    3,178 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
      870 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
      674 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
      552 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        5 ( 0.00%)      pub fn source_callee(self) -> Option<ExpnData> {
        5 ( 0.00%)          fn source_callee(expn_data: ExpnData) -> ExpnData {
        3 ( 0.00%)              let next_expn_data = expn_data.call_site.ctxt().outer_expn_data();
       11 ( 0.00%)              if !next_expn_data.is_root() { source_callee(next_expn_data) } else { expn_data }
        5 ( 0.00%)          }
        .                   let expn_data = self.ctxt().outer_expn_data();
       24 ( 0.00%)          if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        4 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
      130 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
       26 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
      104 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
    2,835 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
    2,430 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
    2,025 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
      130 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
      156 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
      104 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
      120 ( 0.00%)      pub fn allows_unsafe(self) -> bool {
       30 ( 0.00%)          self.ctxt().outer_expn_data().allow_internal_unsafe
      120 ( 0.00%)      }
        .           
        .               pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
        .                   let mut prev_span = DUMMY_SP;
        .                   std::iter::from_fn(move || {
        .                       loop {
        .                           let expn_data = self.ctxt().outer_expn_data();
        .                           if expn_data.is_root() {
        .                               return None;
-- line 752 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
  111,694 ( 0.02%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
   20,019 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
      289 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
      272 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
   69,566 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
   91,386 ( 0.02%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
      143 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
       91 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
      104 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
    2,255 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
      329 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
       81 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
       81 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
      868 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
    1,845 ( 0.00%)      }
        .           
        .               pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
        .               }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
      140 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
        4 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
      864 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
      504 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
   36,666 ( 0.01%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.remove_mark();
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
   14,094 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
    9,396 ( 0.00%)          let mut span = self.data();
    7,786 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
   14,094 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
   15,616 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
   44,802 ( 0.01%)      pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
  109,516 ( 0.02%)          let mut span = self.data();
  184,186 ( 0.03%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
  363,394 ( 0.07%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
   49,780 ( 0.01%)      }
        .           
        .               #[inline]
   14,320 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
   12,530 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
    1,000 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
       30 ( 0.00%)      pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
       30 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
       30 ( 0.00%)      }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
      134 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        7 ( 0.00%)      }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
        .                   self.primary_spans.iter().any(|sp| !sp.is_dummy())
        .               }
        .           
        .               /// Returns `true` if this contains only a dummy primary span with any hygienic context.
        .               pub fn is_dummy(&self) -> bool {
-- line 1084 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
    1,000 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
    1,000 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
        .               fn from(spans: Vec<Span>) -> MultiSpan {
        .                   MultiSpan::from_spans(spans)
        .               }
        .           }
        .           
-- line 1157 ----------------------------------------
-- line 1160 ----------------------------------------
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      308 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      154 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      462 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
        9 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
      210 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,172 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       18 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,344 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        1 ( 0.00%)          let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
       24 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
        .                   hash
        .               }
        .           
        .               /// Check if the stored hash matches the hash of the string.
        .               pub fn matches(&self, src: &str) -> bool {
        1 ( 0.00%)          Self::new(self.kind, src) == *self
        .               }
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
       23 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      174 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        3 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        3 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        3 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
       12 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
        6 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
        6 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
        9 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       33 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    5,274 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      586 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  912,168 ( 0.16%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,172 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    6,446 ( 0.00%)              SourceFile {
    4,688 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,344 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,344 ( 0.00%)                  lines,
    2,344 ( 0.00%)                  multibyte_chars,
    2,344 ( 0.00%)                  non_narrow_chars,
    2,344 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    5,274 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
       77 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       21 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
       14 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
       14 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       21 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
       84 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
       14 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
      119 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
       77 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       28 ( 0.00%)              lines,
       28 ( 0.00%)              multibyte_chars,
       28 ( 0.00%)              non_narrow_chars,
       28 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
       63 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
      329 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
       61 ( 0.00%)          if matches!(
       94 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        1 ( 0.00%)              let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        3 ( 0.00%)              if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
        .                       {
        5 ( 0.00%)                  if let Some(mut src) = src {
        .                               // The src_hash needs to be computed on the pre-normalized src.
        1 ( 0.00%)                      if self.src_hash.matches(&src) {
        3 ( 0.00%)                          normalize_src(&mut src, BytePos::from_usize(0));
        8 ( 0.00%)                          *src_kind = ExternalSourceKind::Present(Lrc::new(src));
        .                                   return true;
        .                               }
        .                           } else {
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
       46 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
      423 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      589 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
    2,593 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
    2,921 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
    6,352 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
    4,297 ( 0.00%)          assert!(line_index < self.lines.len());
    6,087 ( 0.00%)          if line_index == (self.lines.len() - 1) {
       27 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
    4,034 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
        2 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
        6 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
        .                       if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
       12 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
       10 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
        4 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
        7 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
        2 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
        .                   match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
        1 ( 0.00%)                  let linebpos = self.lines[a];
        2 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
        1 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
        8 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
        3 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
        2 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
        1 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
        5 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
        7 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
       80 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
       72 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        8 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        8 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
   14,360 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
      789 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
   21,984 ( 0.00%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,722,948 ( 0.31%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
1,052,397 ( 0.19%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
  200,084 ( 0.04%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
   98,714 ( 0.02%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
   17,810 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
   80,904 ( 0.01%)          let span = self.data_untracked();
   31,182 ( 0.01%)          span.ctxt.hash_stable(ctx, hasher);
   42,306 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
   28,356 ( 0.01%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
   27,900 ( 0.00%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
   55,668 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
   27,636 ( 0.00%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
   13,818 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
   13,818 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
  112,816 ( 0.02%)      }
        .           }

1,529,168 ( 0.27%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 417 ----------------------------------------
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> Self {
1,057,880 ( 0.19%)          Vec { buf: RawVec::NEW, len: 0 }
       68 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
  258,104 ( 0.05%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
        .               }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
   13,155 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        .               }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn capacity(&self) -> usize {
   86,045 ( 0.02%)          self.buf.capacity()
        .               }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve(&mut self, additional: usize) {
   64,207 ( 0.01%)          self.buf.reserve(self.len, additional);
        .               }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
    3,377 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
    5,766 ( 0.00%)          if self.capacity() > self.len {
    2,121 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
        .               }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
        .                       self.shrink_to_fit();
    2,302 ( 0.00%)              let me = ManuallyDrop::new(self);
        .                       let buf = ptr::read(&me.buf);
        .                       let len = me.len();
        .                       buf.into_box(len).assume_init()
        .                   }
        .               }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
   84,982 ( 0.02%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
   62,480 ( 0.01%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   50,651 ( 0.01%)              self.len = len;
    1,506 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
  101,978 ( 0.02%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
1,021,334 ( 0.18%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
1,080,324 ( 0.19%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
  140,943 ( 0.03%)          self.len = new_len;
    1,134 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // We replace self[index] with the last element. Note that if the
        .                       // bounds check above succeeds there must be a last element (which
        .                       // can be self[index] itself).
        .                       let value = ptr::read(self.as_ptr().add(index));
        .                       let base_ptr = self.as_mut_ptr();
        5 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
        .                       self.set_len(len - 1);
        .                       value
        .                   }
        .               }
        .           
        .               /// Inserts an element at position `index` within the vector, shifting all
        .               /// elements after it to the right.
        .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    1,589 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
      241 ( 0.00%)          let len = self.len();
      482 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
      730 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
    1,053 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
      730 ( 0.00%)              self.set_len(len + 1);
        .                   }
    1,362 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
        .               pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
       94 ( 0.00%)          let len = self.len();
      341 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
      560 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
      250 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
       97 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
   44,569 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
    3,153 ( 0.00%)          self.retain_mut(|elem| f(elem));
   43,360 ( 0.01%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    5,427 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
    2,988 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
    1,706 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
   70,224 ( 0.01%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
   21,213 ( 0.00%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
       38 ( 0.00%)                      g.processed_len += 1;
        8 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
        4 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
      108 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
       72 ( 0.00%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
        7 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
        1 ( 0.00%)          let len = self.len();
      398 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
      258 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
      224 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
        .                           } else {
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
       86 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      180 ( 0.00%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
2,303,160 ( 0.41%)          if self.len == self.buf.capacity() {
  114,027 ( 0.02%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
   49,301 ( 0.01%)              let end = self.as_mut_ptr().add(self.len);
        .                       ptr::write(end, value);
2,760,443 ( 0.49%)              self.len += 1;
        .                   }
      144 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
  219,844 ( 0.04%)          if self.len == 0 {
        2 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
  197,616 ( 0.04%)                  self.len -= 1;
   21,193 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
      105 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
       90 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               unsafe fn append_elements(&mut self, other: *const [T]) {
        .                   let count = unsafe { (*other).len() };
        .                   self.reserve(count);
    3,939 ( 0.00%)          let len = self.len();
        .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
   58,921 ( 0.01%)          self.len += count;
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
    4,199 ( 0.00%)          let len = self.len();
        .                   let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
        .                       self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
       22 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
    2,053 ( 0.00%)              Drain {
        .                           tail_start: end,
       22 ( 0.00%)                  tail_len: len - end,
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
  150,347 ( 0.03%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
  105,353 ( 0.02%)          self.len() == 0
        .               }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
      340 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
      290 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    5,131 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
      695 ( 0.00%)          let len = self.len();
    1,390 ( 0.00%)          if new_len > len {
    5,890 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
    4,436 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
        .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
        .                       slice::from_raw_parts_mut(
        2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
       39 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
        .               }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
      460 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
       46 ( 0.00%)          let len = self.len();
        .           
      138 ( 0.00%)          if new_len > len {
    1,107 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
       46 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
   34,665 ( 0.01%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
    1,420 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
   59,365 ( 0.01%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
   27,339 ( 0.00%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
        2 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
    9,116 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   55,523 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
   11,001 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
        .               fn deref(&self) -> &[T] {
1,352,523 ( 0.24%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
       17 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
        .               fn deref_mut(&mut self) -> &mut [T] {
  265,721 ( 0.05%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
   55,754 ( 0.01%)      fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
        2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   70,949 ( 0.01%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
   44,226 ( 0.01%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
        .               #[inline]
        .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
      132 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
  394,386 ( 0.07%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
        .               fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
  164,069 ( 0.03%)              let mut me = ManuallyDrop::new(self);
        .                       let alloc = ptr::read(me.allocator());
        .                       let begin = me.as_mut_ptr();
        .                       let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
        .                           begin.add(me.len()) as *const T
        .                       };
        .                       let cap = me.buf.capacity();
   71,770 ( 0.01%)              IntoIter {
        .                           buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
        .                           end,
        .                       }
        .                   }
-- line 2589 ----------------------------------------
-- line 2601 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        .               fn into_iter(self) -> slice::IterMut<'a, T> {
    1,172 ( 0.00%)          self.iter_mut()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
    1,416 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  210,526 ( 0.04%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
    1,416 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2627 ----------------------------------------
-- line 2636 ----------------------------------------
        .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
   39,994 ( 0.01%)          while let Some(element) = iterator.next() {
    5,621 ( 0.00%)              let len = self.len();
  139,235 ( 0.02%)              if len == self.capacity() {
      352 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
  128,372 ( 0.02%)                  self.set_len(len + 1);
        .                       }
        .                   }
    1,290 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
      968 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
    2,488 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
  255,768 ( 0.05%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
  101,856 ( 0.02%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
  301,950 ( 0.05%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

  478,983 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 57 ----------------------------------------
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
      538 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
      269 ( 0.00%)              from_str_radix(src, radix)
      807 ( 0.00%)          }
        .           
        .                   /// Returns the number of ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[doc(alias = "popcount")]
        .                   #[doc(alias = "popcnt")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn count_ones(self) -> u32 {
   30,795 ( 0.01%)              intrinsics::ctpop(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of zeros in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
        .                   /// assert_eq!(n.leading_zeros(), 2);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn leading_zeros(self) -> u32 {
  166,916 ( 0.03%)              intrinsics::ctlz(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of trailing zeros in the binary representation
        .                   /// of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
        .                   /// assert_eq!(n.trailing_zeros(), 3);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn trailing_zeros(self) -> u32 {
  133,653 ( 0.02%)              intrinsics::cttz(self) as u32
        .                   }
        .           
        .                   /// Returns the number of leading ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn rotate_left(self, n: u32) -> Self {
2,703,725 ( 0.48%)              intrinsics::rotate_left(self, n as $SelfT)
        .                   }
        .           
        .                   /// Shifts the bits to the right by a specified amount, `n`,
        .                   /// wrapping the truncated bits to the beginning of the resulting
        .                   /// integer.
        .                   ///
        .                   /// Please note this isn't the same operation as the `>>` shifting operator!
        .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
        .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
       18 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
        .                       if unlikely!(b) {None} else {Some(a)}
        .                   }
        .           
        .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
        .                   /// cannot occur.
        .                   ///
        .                   /// # Safety
        .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_add`.
  392,014 ( 0.07%)              unsafe { intrinsics::unchecked_add(self, rhs) }
        .                   }
        .           
        .                   /// Checked addition with a signed integer. Computes `self + rhs`,
        .                   /// returning `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_sub`.
   12,947 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
        .                   }
        .           
        .                   /// Checked integer multiplication. Computes `self * rhs`, returning
        .                   /// `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 1035 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   31,700 ( 0.01%)              intrinsics::saturating_add(self, rhs)
        .                   }
        .           
        .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
    1,276 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
        .                   }
        .           
        .                   /// Saturating integer multiplication. Computes `self * rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
1,111,550 ( 0.20%)              intrinsics::wrapping_add(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) addition with a signed integer. Computes
        .                   /// `self + rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
  787,183 ( 0.14%)              intrinsics::wrapping_sub(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) multiplication. Computes `self *
        .                   /// rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
        .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
2,330,768 ( 0.42%)              intrinsics::wrapping_mul(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) division. Computes `self / rhs`.
        .                   /// Wrapped division on unsigned types is just normal division.
        .                   /// There's no way wrapping could ever happen.
        .                   /// This function exists, so that all operations
        .                   /// are accounted for in the wrapping operations.
        .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
        .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
        .                       // out of bounds
        .                       unsafe {
       18 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
        .                       }
        .                   }
        .           
        .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
        .                   /// where `mask` removes any high-order bits of `rhs` that
        .                   /// would cause the shift to exceed the bitwidth of the type.
        .                   ///
        .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1492 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
  230,569 ( 0.04%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self + rhs + carry` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
        .                   /// additional bit of overflow. This allows for chaining together multiple additions
        .                   /// to create "big integers" which represent larger values.
-- line 1508 ----------------------------------------
-- line 1588 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
  138,428 ( 0.02%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
        .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
        .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1673 ----------------------------------------
        .                   /// assert_eq!(5u32.overflowing_mul(2), (10, false));
        .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                     without modifying the original"]
        .                   #[inline(always)]
        2 ( 0.00%)          pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
  403,104 ( 0.07%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        1 ( 0.00%)          }
        .           
        .                   /// Calculates the divisor when `self` is divided by `rhs`.
        .                   ///
        .                   /// Returns a tuple of the divisor along with a boolean indicating
        .                   /// whether an arithmetic overflow would occur. Note that for unsigned
        .                   /// integers overflow never occurs, so the second value is always
        .                   /// `false`.
        .                   ///
-- line 1692 ----------------------------------------
-- line 1838 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(0x1", stringify!($SelfT), ".overflowing_shl(132), (0x10, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_shl(self, rhs: u32) -> (Self, bool) {
        6 ( 0.00%)              (self.wrapping_shl(rhs), (rhs > ($BITS - 1)))
        .                   }
        .           
        .                   /// Shifts self right by `rhs` bits.
        .                   ///
        .                   /// Returns a tuple of the shifted version of self along with a boolean
        .                   /// indicating whether the shift value was larger than or equal to the
        .                   /// number of bits. If the shift value is too large, then value is
        .                   /// masked (N-1) where N is the number of bits, and this value is then
-- line 1854 ----------------------------------------
-- line 2132 ----------------------------------------
        .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
        .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
        .                   /// ```
        .                   #[must_use]
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
        .                   #[inline(always)]
        .                   pub const fn is_power_of_two(self) -> bool {
      174 ( 0.00%)              self.count_ones() == 1
        .                   }
        .           
        .                   // Returns one less than next power of two.
        .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
        .                   //
        .                   // 8u8.one_less_than_next_power_of_two() == 7
        .                   // 6u8.one_less_than_next_power_of_two() == 7
        .                   //
        .                   // This method cannot overflow, as in the `next_power_of_two`
        .                   // overflow cases it instead ends up returning the maximum value
        .                   // of the type, and can return 0 for 0.
        .                   #[inline]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   const fn one_less_than_next_power_of_two(self) -> Self {
    1,388 ( 0.00%)              if self <= 1 { return 0; }
        .           
    5,364 ( 0.00%)              let p = self - 1;
        .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
        .                       // That means the shift is always in-bounds, and some processors
        .                       // (such as intel pre-haswell) have more efficient ctlz
        .                       // intrinsics when the argument is non-zero.
   16,052 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    5,364 ( 0.00%)              <$SelfT>::MAX >> z
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `self`.
        .                   ///
        .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
        .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
        .                   /// release mode (the only situation in which method can return 0).
        .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   #[rustc_inherit_overflow_checks]
        .                   pub const fn next_power_of_two(self) -> Self {
    9,320 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `n`. If
        .                   /// the next power of two is greater than the type's maximum value,
        .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 2195 ----------------------------------------

   27,696 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/hygiene.rs
--------------------------------------------------------------------------------
Ir               

-- line 40 ----------------------------------------
      .           use rustc_macros::HashStable_Generic;
      .           use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};
      .           use std::fmt;
      .           use std::hash::Hash;
      .           use tracing::*;
      .           
      .           /// A `SyntaxContext` represents a chain of pairs `(ExpnId, Transparency)` named "marks".
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
118,264 ( 0.02%)  pub struct SyntaxContext(u32);
      .           
 15,702 ( 0.00%)  #[derive(Debug, Encodable, Decodable, Clone)]
      .           pub struct SyntaxContextData {
     24 ( 0.00%)      outer_expn: ExpnId,
     72 ( 0.00%)      outer_transparency: Transparency,
      .               parent: SyntaxContext,
      .               /// This context, but with all transparent and semi-transparent expansions filtered away.
      .               opaque: SyntaxContext,
      .               /// This context, but with all transparent expansions filtered away.
      .               opaque_and_semitransparent: SyntaxContext,
      .               /// Name of the crate to which `$crate` with this context would resolve.
      .               dollar_crate_name: Symbol,
      .           }
-- line 61 ----------------------------------------
-- line 65 ----------------------------------------
      .               pub struct ExpnIndex {
      .                   ENCODABLE = custom
      .               }
      .           }
      .           
      .           /// A unique ID associated with a macro invocation and expansion.
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash)]
      .           pub struct ExpnId {
  2,858 ( 0.00%)      pub krate: CrateNum,
202,826 ( 0.04%)      pub local_id: ExpnIndex,
      .           }
      .           
      .           impl fmt::Debug for ExpnId {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   // Generate crate_::{{expn_}}.
      .                   write!(f, "{:?}::{{{{expn{}}}}}", self.krate, self.local_id.private)
      .               }
      .           }
-- line 82 ----------------------------------------
-- line 106 ----------------------------------------
      .                   // or ensure that this method is always invoked with the same
      .                   // `NodeIdHashingMode`
      .                   //
      .                   // Note that we require that `hash_spans` be set according to the global
      .                   // `-Z incremental-ignore-spans` option. Normally, this option is disabled,
      .                   // which will cause us to require that this method always be called with `Span` hashing
      .                   // enabled.
      .                   HashingControls { hash_spans, node_id_hashing_mode: _ }
  8,584 ( 0.00%)              if hash_spans == !ctx.debug_opts_incremental_ignore_spans() => {}
      .                   other => panic!("Attempted hashing of {msg} with non-default HashingControls: {:?}", other),
      .               }
      .           }
      .           
      .           /// A unique hash value associated to an expansion.
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, Encodable, Decodable, HashStable_Generic)]
    892 ( 0.00%)  pub struct ExpnHash(Fingerprint);
      .           
      .           impl ExpnHash {
      .               /// Returns the [StableCrateId] identifying the crate this [ExpnHash]
      .               /// originates from.
      .               #[inline]
      .               pub fn stable_crate_id(self) -> StableCrateId {
      .                   StableCrateId(self.0.as_value().0)
      .               }
-- line 129 ----------------------------------------
-- line 138 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_root(self) -> bool {
      .                   self.0 == Fingerprint::ZERO
      .               }
      .           
      .               /// Builds a new [ExpnHash] with the given [StableCrateId] and
      .               /// `local_hash`, where `local_hash` must be unique within its crate.
    272 ( 0.00%)      fn new(stable_crate_id: StableCrateId, local_hash: u64) -> ExpnHash {
      .                   ExpnHash(Fingerprint::new(stable_crate_id.0, local_hash))
    136 ( 0.00%)      }
      .           }
      .           
      .           /// A property of a macro expansion that determines how identifiers
      .           /// produced by that expansion are resolved.
 72,118 ( 0.01%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Hash, Debug, Encodable, Decodable)]
      .           #[derive(HashStable_Generic)]
      .           pub enum Transparency {
      .               /// Identifier produced by a transparent expansion is always resolved at call-site.
      .               /// Call-site spans in procedural macros, hygiene opt-out in `macro` should use this.
      .               Transparent,
      .               /// Identifier produced by a semi-transparent expansion may be resolved
      .               /// either at call-site or at definition-site.
      .               /// If it's a local variable, label or `$crate` then it's resolved at def-site.
-- line 161 ----------------------------------------
-- line 169 ----------------------------------------
      .           }
      .           
      .           impl LocalExpnId {
      .               /// The ID of the theoretical expansion that generates freshly parsed, unexpanded AST.
      .               pub const ROOT: LocalExpnId = LocalExpnId::from_u32(0);
      .           
      .               pub fn from_raw(idx: ExpnIndex) -> LocalExpnId {
      .                   LocalExpnId::from_u32(idx.as_u32())
  8,344 ( 0.00%)      }
      .           
      .               pub fn as_raw(self) -> ExpnIndex {
      .                   ExpnIndex::from_u32(self.as_u32())
  9,754 ( 0.00%)      }
      .           
      .               pub fn fresh_empty() -> LocalExpnId {
      .                   HygieneData::with(|data| {
      .                       let expn_id = data.local_expn_data.push(None);
      .                       let _eid = data.local_expn_hashes.push(ExpnHash(Fingerprint::ZERO));
      .                       debug_assert_eq!(expn_id, _eid);
      .                       expn_id
      .                   })
      .               }
      .           
      .               pub fn fresh(mut expn_data: ExpnData, ctx: impl HashStableContext) -> LocalExpnId {
      .                   debug_assert_eq!(expn_data.parent.krate, LOCAL_CRATE);
    379 ( 0.00%)          let expn_hash = update_disambiguator(&mut expn_data, ctx);
      .                   HygieneData::with(|data| {
    530 ( 0.00%)              let expn_id = data.local_expn_data.push(Some(expn_data));
      .                       let _eid = data.local_expn_hashes.push(expn_hash);
      .                       debug_assert_eq!(expn_id, _eid);
    106 ( 0.00%)              let _old_id = data.expn_hash_to_expn_id.insert(expn_hash, expn_id.to_expn_id());
      .                       debug_assert!(_old_id.is_none());
      .                       expn_id
      .                   })
      .               }
      .           
      .               #[inline]
      .               pub fn expn_hash(self) -> ExpnHash {
      .                   HygieneData::with(|data| data.local_expn_hash(self))
      .               }
      .           
      .               #[inline]
      .               pub fn expn_data(self) -> ExpnData {
    228 ( 0.00%)          HygieneData::with(|data| data.local_expn_data(self).clone())
      .               }
      .           
      .               #[inline]
      .               pub fn to_expn_id(self) -> ExpnId {
 10,259 ( 0.00%)          ExpnId { krate: LOCAL_CRATE, local_id: self.as_raw() }
      .               }
      .           
      .               #[inline]
      .               pub fn set_expn_data(self, mut expn_data: ExpnData, ctx: impl HashStableContext) {
      .                   debug_assert_eq!(expn_data.parent.krate, LOCAL_CRATE);
  1,328 ( 0.00%)          let expn_hash = update_disambiguator(&mut expn_data, ctx);
      .                   HygieneData::with(|data| {
    166 ( 0.00%)              let old_expn_data = &mut data.local_expn_data[self];
    166 ( 0.00%)              assert!(old_expn_data.is_none(), "expansion data is reset for an expansion ID");
    830 ( 0.00%)              *old_expn_data = Some(expn_data);
      .                       debug_assert_eq!(data.local_expn_hashes[self].0, Fingerprint::ZERO);
    332 ( 0.00%)              data.local_expn_hashes[self] = expn_hash;
    249 ( 0.00%)              let _old_id = data.expn_hash_to_expn_id.insert(expn_hash, self.to_expn_id());
      .                       debug_assert!(_old_id.is_none());
      .                   });
      .               }
      .           
      .               #[inline]
      .               pub fn is_descendant_of(self, ancestor: LocalExpnId) -> bool {
      .                   self.to_expn_id().is_descendant_of(ancestor.to_expn_id())
      .               }
-- line 238 ----------------------------------------
-- line 259 ----------------------------------------
      .               }
      .           }
      .           
      .           impl ExpnId {
      .               /// The ID of the theoretical expansion that generates freshly parsed, unexpanded AST.
      .               /// Invariant: we do not create any ExpnId with local_id == 0 and krate != 0.
      .               pub const fn root() -> ExpnId {
      .                   ExpnId { krate: LOCAL_CRATE, local_id: ExpnIndex::from_u32(0) }
 20,682 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn expn_hash(self) -> ExpnHash {
      .                   HygieneData::with(|data| data.expn_hash(self))
      .               }
      .           
      .               #[inline]
      .               pub fn from_hash(hash: ExpnHash) -> Option<ExpnId> {
      .                   HygieneData::with(|data| data.expn_hash_to_expn_id.get(&hash).copied())
      .               }
      .           
      .               #[inline]
      .               pub fn as_local(self) -> Option<LocalExpnId> {
 11,150 ( 0.00%)          if self.krate == LOCAL_CRATE { Some(LocalExpnId::from_raw(self.local_id)) } else { None }
      .               }
      .           
      .               #[inline]
      .               #[track_caller]
      .               pub fn expect_local(self) -> LocalExpnId {
      .                   self.as_local().unwrap()
      .               }
      .           
      .               #[inline]
      .               pub fn expn_data(self) -> ExpnData {
    400 ( 0.00%)          HygieneData::with(|data| data.expn_data(self).clone())
      .               }
      .           
      .               #[inline]
      .               pub fn is_descendant_of(self, ancestor: ExpnId) -> bool {
      .                   // a few "fast path" cases to avoid locking HygieneData
      .                   if ancestor == ExpnId::root() || ancestor == self {
      .                       return true;
      .                   }
-- line 300 ----------------------------------------
-- line 301 ----------------------------------------
      .                   if ancestor.krate != self.krate {
      .                       return false;
      .                   }
      .                   HygieneData::with(|data| data.is_descendant_of(self, ancestor))
      .               }
      .           
      .               /// `expn_id.outer_expn_is_descendant_of(ctxt)` is equivalent to but faster than
      .               /// `expn_id.is_descendant_of(ctxt.outer_expn())`.
  6,196 ( 0.00%)      pub fn outer_expn_is_descendant_of(self, ctxt: SyntaxContext) -> bool {
      .                   HygieneData::with(|data| data.is_descendant_of(self, data.outer_expn(ctxt)))
  3,098 ( 0.00%)      }
      .           
      .               /// Returns span for the macro which originally caused this expansion to happen.
      .               ///
      .               /// Stops backtracing at include! boundary.
      .               pub fn expansion_cause(mut self) -> Option<Span> {
      .                   let mut last_macro = None;
      .                   loop {
      .                       let expn_data = self.expn_data();
-- line 319 ----------------------------------------
-- line 348 ----------------------------------------
      .               /// This is used by `update_disambiguator` to keep track of which `ExpnData`s
      .               /// would have collisions without a disambiguator.
      .               /// The keys of this map are always computed with `ExpnData.disambiguator`
      .               /// set to 0.
      .               expn_data_disambiguators: FxHashMap<u64, u32>,
      .           }
      .           
      .           impl HygieneData {
     10 ( 0.00%)      crate fn new(edition: Edition) -> Self {
      .                   let root_data = ExpnData::default(
      .                       ExpnKind::Root,
      .                       DUMMY_SP,
      .                       edition,
      .                       Some(CRATE_DEF_ID.to_def_id()),
      .                       None,
      .                   );
      .           
     50 ( 0.00%)          HygieneData {
      .                       local_expn_data: IndexVec::from_elem_n(Some(root_data), 1),
      .                       local_expn_hashes: IndexVec::from_elem_n(ExpnHash(Fingerprint::ZERO), 1),
      .                       foreign_expn_data: FxHashMap::default(),
      .                       foreign_expn_hashes: FxHashMap::default(),
      .                       expn_hash_to_expn_id: std::iter::once((ExpnHash(Fingerprint::ZERO), ExpnId::root()))
      .                           .collect(),
      8 ( 0.00%)              syntax_context_data: vec![SyntaxContextData {
      .                           outer_expn: ExpnId::root(),
      .                           outer_transparency: Transparency::Opaque,
      .                           parent: SyntaxContext(0),
      .                           opaque: SyntaxContext(0),
      .                           opaque_and_semitransparent: SyntaxContext(0),
      .                           dollar_crate_name: kw::DollarCrate,
      .                       }],
      .                       syntax_context_map: FxHashMap::default(),
      .                       expn_data_disambiguators: FxHashMap::default(),
      .                   }
     10 ( 0.00%)      }
      .           
    101 ( 0.00%)      pub fn with<T, F: FnOnce(&mut HygieneData) -> T>(f: F) -> T {
 29,518 ( 0.01%)          with_session_globals(|session_globals| f(&mut *session_globals.hygiene_data.borrow_mut()))
    108 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn local_expn_hash(&self, expn_id: LocalExpnId) -> ExpnHash {
      .                   self.local_expn_hashes[expn_id]
      .               }
      .           
      .               #[inline]
      .               fn expn_hash(&self, expn_id: ExpnId) -> ExpnHash {
      .                   match expn_id.as_local() {
      .                       Some(expn_id) => self.local_expn_hashes[expn_id],
      .                       None => self.foreign_expn_hashes[&expn_id],
      .                   }
      .               }
      .           
    456 ( 0.00%)      fn local_expn_data(&self, expn_id: LocalExpnId) -> &ExpnData {
      .                   self.local_expn_data[expn_id].as_ref().expect("no expansion data for an expansion ID")
    456 ( 0.00%)      }
      .           
  9,765 ( 0.00%)      fn expn_data(&self, expn_id: ExpnId) -> &ExpnData {
 29,295 ( 0.01%)          if let Some(expn_id) = expn_id.as_local() {
      .                       self.local_expn_data[expn_id].as_ref().expect("no expansion data for an expansion ID")
      .                   } else {
      .                       &self.foreign_expn_data[&expn_id]
      .                   }
 19,530 ( 0.00%)      }
      .           
      .               fn is_descendant_of(&self, mut expn_id: ExpnId, ancestor: ExpnId) -> bool {
      .                   // a couple "fast path" cases to avoid traversing parents in the loop below
 94,527 ( 0.02%)          if ancestor == ExpnId::root() {
      .                       return true;
      .                   }
    176 ( 0.00%)          if expn_id.krate != ancestor.krate {
      .                       return false;
      .                   }
      .                   loop {
    176 ( 0.00%)              if expn_id == ancestor {
      .                           return true;
      .                       }
    176 ( 0.00%)              if expn_id == ExpnId::root() {
      .                           return false;
      .                       }
      .                       expn_id = self.expn_data(expn_id).parent;
      .                   }
     92 ( 0.00%)      }
      .           
  6,838 ( 0.00%)      fn normalize_to_macros_2_0(&self, ctxt: SyntaxContext) -> SyntaxContext {
326,647 ( 0.06%)          self.syntax_context_data[ctxt.0 as usize].opaque
  6,838 ( 0.00%)      }
      .           
  2,592 ( 0.00%)      fn normalize_to_macro_rules(&self, ctxt: SyntaxContext) -> SyntaxContext {
 12,866 ( 0.00%)          self.syntax_context_data[ctxt.0 as usize].opaque_and_semitransparent
  2,592 ( 0.00%)      }
      .           
  3,126 ( 0.00%)      fn outer_expn(&self, ctxt: SyntaxContext) -> ExpnId {
503,336 ( 0.09%)          self.syntax_context_data[ctxt.0 as usize].outer_expn
  3,126 ( 0.00%)      }
      .           
  8,040 ( 0.00%)      fn outer_mark(&self, ctxt: SyntaxContext) -> (ExpnId, Transparency) {
  4,290 ( 0.00%)          let data = &self.syntax_context_data[ctxt.0 as usize];
 17,872 ( 0.00%)          (data.outer_expn, data.outer_transparency)
 12,330 ( 0.00%)      }
      .           
      .               fn parent_ctxt(&self, ctxt: SyntaxContext) -> SyntaxContext {
    530 ( 0.00%)          self.syntax_context_data[ctxt.0 as usize].parent
      .               }
      .           
      .               fn remove_mark(&self, ctxt: &mut SyntaxContext) -> (ExpnId, Transparency) {
     92 ( 0.00%)          let outer_mark = self.outer_mark(*ctxt);
    344 ( 0.00%)          *ctxt = self.parent_ctxt(*ctxt);
      .                   outer_mark
      .               }
      .           
  2,016 ( 0.00%)      fn marks(&self, mut ctxt: SyntaxContext) -> Vec<(ExpnId, Transparency)> {
      .                   let mut marks = Vec::new();
    522 ( 0.00%)          while ctxt != SyntaxContext::root() {
      .                       debug!("marks: getting parent of {:?}", ctxt);
      .                       marks.push(self.outer_mark(ctxt));
      .                       ctxt = self.parent_ctxt(ctxt);
      .                   }
      .                   marks.reverse();
      .                   marks
  2,268 ( 0.00%)      }
      .           
      .               fn walk_chain(&self, mut span: Span, to: SyntaxContext) -> Span {
      .                   debug!("walk_chain({:?}, {:?})", span, to);
      .                   debug!("walk_chain: span ctxt = {:?}", span.ctxt());
      .                   while span.from_expansion() && span.ctxt() != to {
      .                       let outer_expn = self.outer_expn(span.ctxt());
      .                       debug!("walk_chain({:?}): outer_expn={:?}", span, outer_expn);
      .                       let expn_data = self.expn_data(outer_expn);
      .                       debug!("walk_chain({:?}): expn_data={:?}", span, expn_data);
      .                       span = expn_data.call_site;
      .                   }
      .                   span
      .               }
      .           
480,920 ( 0.09%)      fn adjust(&self, ctxt: &mut SyntaxContext, expn_id: ExpnId) -> Option<ExpnId> {
      .                   let mut scope = None;
144,276 ( 0.03%)          while !self.is_descendant_of(expn_id, self.outer_expn(*ctxt)) {
      .                       scope = Some(self.remove_mark(ctxt).0);
      .                   }
      .                   scope
480,920 ( 0.09%)      }
      .           
 37,782 ( 0.01%)      fn apply_mark(
      .                   &mut self,
      .                   ctxt: SyntaxContext,
      .                   expn_id: ExpnId,
      .                   transparency: Transparency,
      .               ) -> SyntaxContext {
  8,396 ( 0.00%)          assert_ne!(expn_id, ExpnId::root());
  4,198 ( 0.00%)          if transparency == Transparency::Opaque {
    420 ( 0.00%)              return self.apply_mark_internal(ctxt, expn_id, transparency);
      .                   }
      .           
 28,896 ( 0.01%)          let call_site_ctxt = self.expn_data(expn_id).call_site.ctxt();
  4,128 ( 0.00%)          let mut call_site_ctxt = if transparency == Transparency::SemiTransparent {
      .                       self.normalize_to_macros_2_0(call_site_ctxt)
      .                   } else {
      .                       self.normalize_to_macro_rules(call_site_ctxt)
      .                   };
      .           
  4,128 ( 0.00%)          if call_site_ctxt == SyntaxContext::root() {
 12,315 ( 0.00%)              return self.apply_mark_internal(ctxt, expn_id, transparency);
      .                   }
      .           
      .                   // Otherwise, `expn_id` is a macros 1.0 definition and the call site is in a
      .                   // macros 2.0 expansion, i.e., a macros 1.0 invocation is in a macros 2.0 definition.
      .                   //
      .                   // In this case, the tokens from the macros 1.0 definition inherit the hygiene
      .                   // at their invocation. That is, we pretend that the macros 1.0 definition
      .                   // was defined at its invocation (i.e., inside the macros 2.0 definition)
      .                   // so that the macros 2.0 definition remains hygienic.
      .                   //
      .                   // See the example at `test/ui/hygiene/legacy_interaction.rs`.
    207 ( 0.00%)          for (expn_id, transparency) in self.marks(ctxt) {
      .                       call_site_ctxt = self.apply_mark_internal(call_site_ctxt, expn_id, transparency);
      .                   }
     92 ( 0.00%)          self.apply_mark_internal(call_site_ctxt, expn_id, transparency)
      .               }
      .           
 33,584 ( 0.01%)      fn apply_mark_internal(
      .                   &mut self,
      .                   ctxt: SyntaxContext,
      .                   expn_id: ExpnId,
      .                   transparency: Transparency,
      .               ) -> SyntaxContext {
      .                   let syntax_context_data = &mut self.syntax_context_data;
 25,188 ( 0.00%)          let mut opaque = syntax_context_data[ctxt.0 as usize].opaque;
      .                   let mut opaque_and_semitransparent =
  4,198 ( 0.00%)              syntax_context_data[ctxt.0 as usize].opaque_and_semitransparent;
      .           
  4,198 ( 0.00%)          if transparency >= Transparency::Opaque {
      .                       let parent = opaque;
    700 ( 0.00%)              opaque = *self
      .                           .syntax_context_map
      .                           .entry((parent, expn_id, transparency))
      .                           .or_insert_with(|| {
     34 ( 0.00%)                      let new_opaque = SyntaxContext(syntax_context_data.len() as u32);
      .                               syntax_context_data.push(SyntaxContextData {
      .                                   outer_expn: expn_id,
      .                                   outer_transparency: transparency,
      .                                   parent,
      .                                   opaque: new_opaque,
      .                                   opaque_and_semitransparent: new_opaque,
      .                                   dollar_crate_name: kw::DollarCrate,
      .                               });
      .                               new_opaque
      .                           });
      .                   }
      .           
  4,182 ( 0.00%)          if transparency >= Transparency::SemiTransparent {
      .                       let parent = opaque_and_semitransparent;
 12,432 ( 0.00%)              opaque_and_semitransparent = *self
      .                           .syntax_context_map
      .                           .entry((parent, expn_id, transparency))
      .                           .or_insert_with(|| {
      .                               let new_opaque_and_semitransparent =
     66 ( 0.00%)                          SyntaxContext(syntax_context_data.len() as u32);
      .                               syntax_context_data.push(SyntaxContextData {
      .                                   outer_expn: expn_id,
      .                                   outer_transparency: transparency,
      .                                   parent,
      .                                   opaque,
      .                                   opaque_and_semitransparent: new_opaque_and_semitransparent,
      .                                   dollar_crate_name: kw::DollarCrate,
      .                               });
      .                               new_opaque_and_semitransparent
      .                           });
      .                   }
      .           
      .                   let parent = ctxt;
  8,396 ( 0.00%)          *self.syntax_context_map.entry((parent, expn_id, transparency)).or_insert_with(|| {
      .                       let new_opaque_and_semitransparent_and_transparent =
    108 ( 0.00%)                  SyntaxContext(syntax_context_data.len() as u32);
      .                       syntax_context_data.push(SyntaxContextData {
      .                           outer_expn: expn_id,
      .                           outer_transparency: transparency,
      .                           parent,
      .                           opaque,
      .                           opaque_and_semitransparent,
      .                           dollar_crate_name: kw::DollarCrate,
      .                       });
      .                       new_opaque_and_semitransparent_and_transparent
      .                   })
 33,584 ( 0.01%)      }
      .           }
      .           
      .           pub fn clear_syntax_context_map() {
      5 ( 0.00%)      HygieneData::with(|data| data.syntax_context_map = FxHashMap::default());
      .           }
      .           
      .           pub fn walk_chain(span: Span, to: SyntaxContext) -> Span {
      .               HygieneData::with(|data| data.walk_chain(span, to))
      .           }
      .           
    504 ( 0.00%)  pub fn update_dollar_crate_names(mut get_name: impl FnMut(SyntaxContext) -> Symbol) {
      .               // The new contexts that need updating are at the end of the list and have `$crate` as a name.
      .               let (len, to_update) = HygieneData::with(|data| {
      .                   (
     84 ( 0.00%)              data.syntax_context_data.len(),
      .                       data.syntax_context_data
      .                           .iter()
      .                           .rev()
      .                           .take_while(|scdata| scdata.dollar_crate_name == kw::DollarCrate)
      .                           .count(),
      .                   )
      .               });
      .               // The callback must be called from outside of the `HygieneData` lock,
      .               // since it will try to acquire it too.
    252 ( 0.00%)      let range_to_update = len - to_update..len;
      .               let names: Vec<_> =
      .                   range_to_update.clone().map(|idx| get_name(SyntaxContext::from_u32(idx as u32))).collect();
      .               HygieneData::with(|data| {
    168 ( 0.00%)          range_to_update.zip(names).for_each(|(idx, name)| {
    107 ( 0.00%)              data.syntax_context_data[idx].dollar_crate_name = name;
      .                   })
      .               })
    504 ( 0.00%)  }
      .           
      .           pub fn debug_hygiene_data(verbose: bool) -> String {
      .               HygieneData::with(|data| {
      .                   if verbose {
      .                       format!("{:#?}", data)
      .                   } else {
      .                       let mut s = String::from("");
      .                       s.push_str("Expansions:");
-- line 634 ----------------------------------------
-- line 674 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               crate fn from_u32(raw: u32) -> SyntaxContext {
      .                   SyntaxContext(raw)
      .               }
      .           
      .               /// Extend a syntax context with a given expansion and transparency.
 24,444 ( 0.00%)      crate fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> SyntaxContext {
  8,292 ( 0.00%)          HygieneData::with(|data| data.apply_mark(self, expn_id, transparency))
  8,148 ( 0.00%)      }
      .           
      .               /// Pulls a single mark off of the syntax context. This effectively moves the
      .               /// context up one macro definition level. That is, if we have a nested macro
      .               /// definition as follows:
      .               ///
      .               /// ```rust
      .               /// macro_rules! f {
      .               ///    macro_rules! g {
-- line 692 ----------------------------------------
-- line 694 ----------------------------------------
      .               ///    }
      .               /// }
      .               /// ```
      .               ///
      .               /// and we have a SyntaxContext that is referring to something declared by an invocation
      .               /// of g (call it g1), calling remove_mark will result in the SyntaxContext for the
      .               /// invocation of f that created g1.
      .               /// Returns the mark that was removed.
     92 ( 0.00%)      pub fn remove_mark(&mut self) -> ExpnId {
      .                   HygieneData::with(|data| data.remove_mark(self).0)
      .               }
      .           
    916 ( 0.00%)      pub fn marks(self) -> Vec<(ExpnId, Transparency)> {
    458 ( 0.00%)          HygieneData::with(|data| data.marks(self))
    916 ( 0.00%)      }
      .           
      .               /// Adjust this context for resolution in a scope created by the given expansion.
      .               /// For example, consider the following three resolutions of `f`:
      .               ///
      .               /// ```rust
      .               /// mod foo { pub fn f() {} } // `f`'s `SyntaxContext` is empty.
      .               /// m!(f);
      .               /// macro m($f:ident) {
-- line 716 ----------------------------------------
-- line 726 ----------------------------------------
      .               ///     //| and it resolves to `::bar::f`.
      .               ///     bar::$f(); // `f`'s `SyntaxContext` is empty.
      .               ///     //^ Since `mod bar` is not outside this expansion, `adjust` does not change `$f`,
      .               ///     //| and it resolves to `::bar::$f`.
      .               /// }
      .               /// ```
      .               /// This returns the expansion whose definition scope we use to privacy check the resolution,
      .               /// or `None` if we privacy check as usual (i.e., not w.r.t. a macro definition scope).
  4,840 ( 0.00%)      pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
  2,420 ( 0.00%)          HygieneData::with(|data| data.adjust(self, expn_id))
  2,420 ( 0.00%)      }
      .           
      .               /// Like `SyntaxContext::adjust`, but also normalizes `self` to macros 2.0.
  6,264 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
      .                   HygieneData::with(|data| {
  3,132 ( 0.00%)              *self = data.normalize_to_macros_2_0(*self);
  4,698 ( 0.00%)              data.adjust(self, expn_id)
      .                   })
  3,132 ( 0.00%)      }
      .           
      .               /// Adjust this context for resolution in a scope created by the given expansion
      .               /// via a glob import with the given `SyntaxContext`.
      .               /// For example:
      .               ///
      .               /// ```rust
      .               /// m!(f);
      .               /// macro m($i:ident) {
-- line 752 ----------------------------------------
-- line 787 ----------------------------------------
      .           
      .               /// Undo `glob_adjust` if possible:
      .               ///
      .               /// ```rust
      .               /// if let Some(privacy_checking_scope) = self.reverse_glob_adjust(expansion, glob_ctxt) {
      .               ///     assert!(self.glob_adjust(expansion, glob_ctxt) == Some(privacy_checking_scope));
      .               /// }
      .               /// ```
179,208 ( 0.03%)      pub fn reverse_glob_adjust(
      .                   &mut self,
      .                   expn_id: ExpnId,
      .                   glob_span: Span,
      .               ) -> Option<Option<ExpnId>> {
      .                   HygieneData::with(|data| {
313,614 ( 0.06%)              if data.adjust(self, expn_id).is_some() {
      .                           return None;
      .                       }
      .           
134,406 ( 0.02%)              let mut glob_ctxt = data.normalize_to_macros_2_0(glob_span.ctxt());
      .                       let mut marks = Vec::new();
      .                       while !data.is_descendant_of(expn_id, data.outer_expn(glob_ctxt)) {
      .                           marks.push(data.remove_mark(&mut glob_ctxt));
      .                       }
      .           
      .                       let scope = marks.last().map(|mark| mark.0);
      .                       while let Some((expn_id, transparency)) = marks.pop() {
      .                           *self = data.apply_mark(*self, expn_id, transparency);
      .                       }
      .                       Some(scope)
      .                   })
 89,604 ( 0.02%)      }
      .           
  3,084 ( 0.00%)      pub fn hygienic_eq(self, other: SyntaxContext, expn_id: ExpnId) -> bool {
      .                   HygieneData::with(|data| {
    514 ( 0.00%)              let mut self_normalized = data.normalize_to_macros_2_0(self);
  2,570 ( 0.00%)              data.adjust(&mut self_normalized, expn_id);
    514 ( 0.00%)              self_normalized == data.normalize_to_macros_2_0(other)
      .                   })
  1,028 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn normalize_to_macros_2_0(self) -> SyntaxContext {
  3,419 ( 0.00%)          HygieneData::with(|data| data.normalize_to_macros_2_0(self))
      .               }
      .           
      .               #[inline]
      .               pub fn normalize_to_macro_rules(self) -> SyntaxContext {
  1,296 ( 0.00%)          HygieneData::with(|data| data.normalize_to_macro_rules(self))
      .               }
      .           
      .               #[inline]
      .               pub fn outer_expn(self) -> ExpnId {
      .                   HygieneData::with(|data| data.outer_expn(self))
      .               }
      .           
      .               /// `ctxt.outer_expn_data()` is equivalent to but faster than
      .               /// `ctxt.outer_expn().expn_data()`.
      .               #[inline]
      .               pub fn outer_expn_data(self) -> ExpnData {
  8,807 ( 0.00%)          HygieneData::with(|data| data.expn_data(data.outer_expn(self)).clone())
      .               }
      .           
      .               #[inline]
      .               pub fn outer_mark(self) -> (ExpnId, Transparency) {
  6,706 ( 0.00%)          HygieneData::with(|data| data.outer_mark(self))
      .               }
      .           
      .               pub fn dollar_crate_name(self) -> Symbol {
      .                   HygieneData::with(|data| data.syntax_context_data[self.0 as usize].dollar_crate_name)
      .               }
      .           
  3,134 ( 0.00%)      pub fn edition(self) -> Edition {
  9,468 ( 0.00%)          HygieneData::with(|data| data.expn_data(data.outer_expn(self)).edition)
  3,134 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Debug for SyntaxContext {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   write!(f, "#{}", self.0)
      .               }
      .           }
      .           
-- line 868 ----------------------------------------
-- line 877 ----------------------------------------
      .               }
      .           
      .               pub fn fresh_expansion_with_transparency(
      .                   self,
      .                   expn_data: ExpnData,
      .                   transparency: Transparency,
      .                   ctx: impl HashStableContext,
      .               ) -> Span {
    832 ( 0.00%)          let expn_id = LocalExpnId::fresh(expn_data, ctx).to_expn_id();
      .                   HygieneData::with(|data| {
    312 ( 0.00%)              self.with_ctxt(data.apply_mark(SyntaxContext::root(), expn_id, transparency))
      .                   })
      .               }
      .           
      .               /// Reuses the span but adds information like the kind of the desugaring and features that are
      .               /// allowed inside this span.
    572 ( 0.00%)      pub fn mark_with_reason(
      .                   self,
      .                   allow_internal_unstable: Option<Lrc<[Symbol]>>,
      .                   reason: DesugaringKind,
      .                   edition: Edition,
      .                   ctx: impl HashStableContext,
      .               ) -> Span {
    832 ( 0.00%)          let expn_data = ExpnData {
    104 ( 0.00%)              allow_internal_unstable,
    468 ( 0.00%)              ..ExpnData::default(ExpnKind::Desugaring(reason), self, edition, None, None)
      .                   };
      .                   self.fresh_expansion(expn_data, ctx)
    416 ( 0.00%)      }
      .           }
      .           
      .           /// A subset of properties from both macro definition and macro call available through global data.
      .           /// Avoid using this if you have access to the original definition or call structures.
 60,812 ( 0.01%)  #[derive(Clone, Debug, Encodable, Decodable, HashStable_Generic)]
      .           pub struct ExpnData {
      .               // --- The part unique to each expansion.
      .               /// The kind of this expansion - macro or compiler desugaring.
      .               pub kind: ExpnKind,
      .               /// The expansion that produced this expansion.
  5,418 ( 0.00%)      pub parent: ExpnId,
      .               /// The location of the actual macro invocation or syntax sugar , e.g.
      .               /// `let x = foo!();` or `if let Some(y) = x {}`
      .               ///
      .               /// This may recursively refer to other macro invocations, e.g., if
      .               /// `foo!()` invoked `bar!()` internally, and there was an
      .               /// expression inside `bar!`; the call_site of the expression in
      .               /// the expansion would point to the `bar!` invocation; that
      .               /// call_site span would have its own ExpnData, with the call_site
-- line 924 ----------------------------------------
-- line 929 ----------------------------------------
      .               /// that have identical `ExpnData`s. This violates the contract of `HashStable`
      .               /// - the two `ExpnId`s are not equal, but their `Fingerprint`s are equal
      .               /// (since the numerical `ExpnId` value is not considered by the `HashStable`
      .               /// implementation).
      .               ///
      .               /// The `disambiguator` field is set by `update_disambiguator` when two distinct
      .               /// `ExpnId`s would end up with the same `Fingerprint`. Since `ExpnData` includes
      .               /// a `krate` field, this value only needs to be unique within a single crate.
  2,709 ( 0.00%)      disambiguator: u32,
      .           
      .               // --- The part specific to the macro/desugaring definition.
      .               // --- It may be reasonable to share this part between expansions with the same definition,
      .               // --- but such sharing is known to bring some minor inconveniences without also bringing
      .               // --- noticeable perf improvements (PR #62898).
      .               /// The span of the macro definition (possibly dummy).
      .               /// This span serves only informational purpose and is not used for resolution.
      .               pub def_site: Span,
      .               /// List of `#[unstable]`/feature-gated features that the macro is allowed to use
      .               /// internally without forcing the whole crate to opt-in
      .               /// to them.
  1,184 ( 0.00%)      pub allow_internal_unstable: Option<Lrc<[Symbol]>>,
      .               /// Whether the macro is allowed to use `unsafe` internally
      .               /// even if the user crate has `#![forbid(unsafe_code)]`.
      .               pub allow_internal_unsafe: bool,
      .               /// Enables the macro helper hack (`ident!(...)` -> `$crate::ident!(...)`)
      .               /// for a given macro.
      .               pub local_inner_macros: bool,
      .               /// Edition of the crate in which the macro is defined.
  2,709 ( 0.00%)      pub edition: Edition,
      .               /// The `DefId` of the macro being invoked,
      .               /// if this `ExpnData` corresponds to a macro invocation
  2,709 ( 0.00%)      pub macro_def_id: Option<DefId>,
      .               /// The normal module (`mod`) in which the expanded macro was defined.
      .               pub parent_module: Option<DefId>,
      .           }
      .           
      .           impl !PartialEq for ExpnData {}
      .           impl !Hash for ExpnData {}
      .           
      .           impl ExpnData {
  1,079 ( 0.00%)      pub fn new(
      .                   kind: ExpnKind,
      .                   parent: ExpnId,
      .                   call_site: Span,
      .                   def_site: Span,
      .                   allow_internal_unstable: Option<Lrc<[Symbol]>>,
      .                   allow_internal_unsafe: bool,
      .                   local_inner_macros: bool,
      .                   edition: Edition,
      .                   macro_def_id: Option<DefId>,
      .                   parent_module: Option<DefId>,
      .               ) -> ExpnData {
  1,162 ( 0.00%)          ExpnData {
      .                       kind,
      .                       parent,
      .                       call_site,
      .                       def_site,
      .                       allow_internal_unstable,
      .                       allow_internal_unsafe,
      .                       local_inner_macros,
      .                       edition,
      .                       macro_def_id,
      .                       parent_module,
      .                       disambiguator: 0,
      .                   }
    415 ( 0.00%)      }
      .           
      .               /// Constructs expansion data with default properties.
    156 ( 0.00%)      pub fn default(
      .                   kind: ExpnKind,
      .                   call_site: Span,
      .                   edition: Edition,
      .                   macro_def_id: Option<DefId>,
      .                   parent_module: Option<DefId>,
      .               ) -> ExpnData {
    624 ( 0.00%)          ExpnData {
      .                       kind,
      .                       parent: ExpnId::root(),
      .                       call_site,
      .                       def_site: DUMMY_SP,
      .                       allow_internal_unstable: None,
      .                       allow_internal_unsafe: false,
      .                       local_inner_macros: false,
      .                       edition,
      .                       macro_def_id,
      .                       parent_module,
      .                       disambiguator: 0,
      .                   }
     52 ( 0.00%)      }
      .           
      6 ( 0.00%)      pub fn allow_unstable(
      .                   kind: ExpnKind,
      .                   call_site: Span,
      .                   edition: Edition,
      .                   allow_internal_unstable: Lrc<[Symbol]>,
      .                   macro_def_id: Option<DefId>,
      .                   parent_module: Option<DefId>,
      .               ) -> ExpnData {
     13 ( 0.00%)          ExpnData {
      .                       allow_internal_unstable: Some(allow_internal_unstable),
      .                       ..ExpnData::default(kind, call_site, edition, macro_def_id, parent_module)
      .                   }
      2 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn is_root(&self) -> bool {
      2 ( 0.00%)          matches!(self.kind, ExpnKind::Root)
      .               }
      .           
      .               #[inline]
  1,224 ( 0.00%)      fn hash_expn(&self, ctx: &mut impl HashStableContext) -> u64 {
      .                   let mut hasher = StableHasher::new();
      .                   self.hash_stable(ctx, &mut hasher);
      .                   hasher.finish()
  1,088 ( 0.00%)      }
      .           }
      .           
      .           /// Expansion kind.
 40,454 ( 0.01%)  #[derive(Clone, Debug, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub enum ExpnKind {
      .               /// No expansion, aka root expansion. Only `ExpnId::root()` has this kind.
      .               Root,
      .               /// Expansion produced by a macro.
  2,004 ( 0.00%)      Macro(MacroKind, Symbol),
      .               /// Transform done by the compiler on the AST.
     47 ( 0.00%)      AstPass(AstPass),
      .               /// Desugaring done by the compiler during HIR lowering.
    502 ( 0.00%)      Desugaring(DesugaringKind),
      .               /// MIR inlining
      .               Inlined,
      .           }
      .           
      .           impl ExpnKind {
      .               pub fn descr(&self) -> String {
      .                   match *self {
      .                       ExpnKind::Root => kw::PathRoot.to_string(),
-- line 1064 ----------------------------------------
-- line 1070 ----------------------------------------
      .                       ExpnKind::AstPass(kind) => kind.descr().to_string(),
      .                       ExpnKind::Desugaring(kind) => format!("desugaring of {}", kind.descr()),
      .                       ExpnKind::Inlined => "inlined source".to_string(),
      .                   }
      .               }
      .           }
      .           
      .           /// The kind of macro invocation or definition.
  8,264 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Debug)]
      .           #[derive(HashStable_Generic)]
      .           pub enum MacroKind {
      .               /// A bang macro `foo!()`.
      .               Bang,
      .               /// An attribute macro `#[foo]`.
      .               Attr,
      .               /// A derive macro `#[derive(Foo)]`
      .               Derive,
-- line 1086 ----------------------------------------
-- line 1106 ----------------------------------------
      .                   match self {
      .                       MacroKind::Attr => "an",
      .                       _ => "a",
      .                   }
      .               }
      .           }
      .           
      .           /// The kind of AST transform.
      5 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub enum AstPass {
      .               StdImports,
      .               TestHarness,
      .               ProcMacroHarness,
      .           }
      .           
      .           impl AstPass {
      .               pub fn descr(self) -> &'static str {
-- line 1122 ----------------------------------------
-- line 1161 ----------------------------------------
      .                       DesugaringKind::OpaqueTy => "`impl Trait`",
      .                       DesugaringKind::ForLoop => "`for` loop",
      .                       DesugaringKind::LetElse => "`let...else`",
      .                       DesugaringKind::WhileLoop => "`while` loop",
      .                   }
      .               }
      .           }
      .           
      7 ( 0.00%)  #[derive(Default)]
      .           pub struct HygieneEncodeContext {
      .               /// All `SyntaxContexts` for which we have written `SyntaxContextData` into crate metadata.
      .               /// This is `None` after we finish encoding `SyntaxContexts`, to ensure
      .               /// that we don't accidentally try to encode any more `SyntaxContexts`
      .               serialized_ctxts: Lock<FxHashSet<SyntaxContext>>,
      .               /// The `SyntaxContexts` that we have serialized (e.g. as a result of encoding `Spans`)
      .               /// in the most recent 'round' of serializnig. Serializing `SyntaxContextData`
      .               /// may cause us to serialize more `SyntaxContext`s, so serialize in a loop
-- line 1177 ----------------------------------------
-- line 1180 ----------------------------------------
      .           
      .               serialized_expns: Lock<FxHashSet<ExpnId>>,
      .           
      .               latest_expns: Lock<FxHashSet<ExpnId>>,
      .           }
      .           
      .           impl HygieneEncodeContext {
      .               /// Record the fact that we need to serialize the corresponding `ExpnData`.
  1,800 ( 0.00%)      pub fn schedule_expn_data_for_encoding(&self, expn: ExpnId) {
    720 ( 0.00%)          if !self.serialized_expns.lock().contains(&expn) {
    680 ( 0.00%)              self.latest_expns.lock().insert(expn);
      .                   }
  1,440 ( 0.00%)      }
      .           
      8 ( 0.00%)      pub fn encode<T, R>(
      .                   &self,
      .                   encoder: &mut T,
      .                   mut encode_ctxt: impl FnMut(&mut T, u32, &SyntaxContextData) -> Result<(), R>,
      .                   mut encode_expn: impl FnMut(&mut T, ExpnId, &ExpnData, ExpnHash) -> Result<(), R>,
      .               ) -> Result<(), R> {
      .                   // When we serialize a `SyntaxContextData`, we may end up serializing
      .                   // a `SyntaxContext` that we haven't seen before
      4 ( 0.00%)          while !self.latest_ctxts.lock().is_empty() || !self.latest_expns.lock().is_empty() {
      .                       debug!(
      .                           "encode_hygiene: Serializing a round of {:?} SyntaxContextDatas: {:?}",
      .                           self.latest_ctxts.lock().len(),
      .                           self.latest_ctxts
      .                       );
      .           
      .                       // Consume the current round of SyntaxContexts.
      .                       // Drop the lock() temporary early
      .                       let latest_ctxts = { std::mem::take(&mut *self.latest_ctxts.lock()) };
      .           
      .                       // It's fine to iterate over a HashMap, because the serialization
      .                       // of the table that we insert data into doesn't depend on insertion
      .                       // order
      .                       for_all_ctxts_in(latest_ctxts.into_iter(), |index, ctxt, data| {
     48 ( 0.00%)                  if self.serialized_ctxts.lock().insert(ctxt) {
      .                               encode_ctxt(encoder, index, data)?;
      .                           }
      .                           Ok(())
      .                       })?;
      .           
      .                       let latest_expns = { std::mem::take(&mut *self.latest_expns.lock()) };
      .           
      .                       for_all_expns_in(latest_expns.into_iter(), |expn, data, hash| {
    136 ( 0.00%)                  if self.serialized_expns.lock().insert(expn) {
      .                               encode_expn(encoder, expn, data, hash)?;
      .                           }
      .                           Ok(())
      .                       })?;
      .                   }
      .                   debug!("encode_hygiene: Done serializing SyntaxContextData");
      .                   Ok(())
      8 ( 0.00%)      }
      .           }
      .           
      .           #[derive(Default)]
      .           /// Additional information used to assist in decoding hygiene data
      .           pub struct HygieneDecodeContext {
      .               // Maps serialized `SyntaxContext` ids to a `SyntaxContext` in the current
      .               // global `HygieneData`. When we deserialize a `SyntaxContext`, we need to create
      .               // a new id in the global `HygieneData`. This map tracks the ID we end up picking,
-- line 1242 ----------------------------------------
-- line 1257 ----------------------------------------
      .           
      .                   let _old_id = hygiene_data.expn_hash_to_expn_id.insert(hash, expn_id);
      .                   debug_assert!(_old_id.is_none());
      .                   expn_id
      .               })
      .           }
      .           
      .           /// Register an expansion which has been decoded from the metadata of a foreign crate.
  1,776 ( 0.00%)  pub fn register_expn_id(
      .               krate: CrateNum,
      .               local_id: ExpnIndex,
      .               data: ExpnData,
      .               hash: ExpnHash,
      .           ) -> ExpnId {
      .               debug_assert!(data.parent == ExpnId::root() || krate == data.parent.krate);
  1,776 ( 0.00%)      let expn_id = ExpnId { krate, local_id };
      .               HygieneData::with(|hygiene_data| {
  1,776 ( 0.00%)          let _old_data = hygiene_data.foreign_expn_data.insert(expn_id, data);
      .                   debug_assert!(_old_data.is_none());
  2,960 ( 0.00%)          let _old_hash = hygiene_data.foreign_expn_hashes.insert(expn_id, hash);
      .                   debug_assert!(_old_hash.is_none());
  2,368 ( 0.00%)          let _old_id = hygiene_data.expn_hash_to_expn_id.insert(hash, expn_id);
      .                   debug_assert!(_old_id.is_none());
      .               });
      .               expn_id
  2,368 ( 0.00%)  }
      .           
      .           /// Decode an expansion from the metadata of a foreign crate.
      .           pub fn decode_expn_id(
      .               krate: CrateNum,
      .               index: u32,
      .               decode_data: impl FnOnce(ExpnId) -> (ExpnData, ExpnHash),
      .           ) -> ExpnId {
  3,206 ( 0.00%)      if index == 0 {
      .                   debug!("decode_expn_id: deserialized root");
    788 ( 0.00%)          return ExpnId::root();
      .               }
      .           
      .               let index = ExpnIndex::from_u32(index);
      .           
      .               // This function is used to decode metadata, so it cannot decode information about LOCAL_CRATE.
      .               debug_assert_ne!(krate, LOCAL_CRATE);
  2,418 ( 0.00%)      let expn_id = ExpnId { krate, local_id: index };
      .           
      .               // Fast path if the expansion has already been decoded.
  2,418 ( 0.00%)      if HygieneData::with(|hygiene_data| hygiene_data.foreign_expn_data.contains_key(&expn_id)) {
  1,851 ( 0.00%)          return expn_id;
      .               }
      .           
      .               // Don't decode the data inside `HygieneData::with`, since we need to recursively decode
      .               // other ExpnIds
  4,144 ( 0.00%)      let (expn_data, hash) = decode_data(expn_id);
      .           
  5,328 ( 0.00%)      register_expn_id(krate, index, expn_data, hash)
      .           }
      .           
      .           // Decodes `SyntaxContext`, using the provided `HygieneDecodeContext`
      .           // to track which `SyntaxContext`s we have already decoded.
      .           // The provided closure will be invoked to deserialize a `SyntaxContextData`
      .           // if we haven't already seen the id of the `SyntaxContext` we are deserializing.
      .           pub fn decode_syntax_context<D: Decoder, F: FnOnce(&mut D, u32) -> SyntaxContextData>(
      .               d: &mut D,
      .               context: &HygieneDecodeContext,
      .               decode_data: F,
      .           ) -> SyntaxContext {
 33,578 ( 0.01%)      let raw_id: u32 = Decodable::decode(d);
 67,156 ( 0.01%)      if raw_id == 0 {
      .                   debug!("decode_syntax_context: deserialized root");
      .                   // The root is special
      .                   return SyntaxContext::root();
      .               }
      .           
      .               let outer_ctxts = &context.remapped_ctxts;
      .           
      .               // Ensure that the lock() temporary is dropped early
      .               {
 12,089 ( 0.00%)          if let Some(ctxt) = outer_ctxts.lock().get(raw_id as usize).copied().flatten() {
      .                       return ctxt;
      .                   }
      .               }
      .           
      .               // Allocate and store SyntaxContext id *before* calling the decoder function,
      .               // as the SyntaxContextData may reference itself.
    570 ( 0.00%)      let new_ctxt = HygieneData::with(|hygiene_data| {
    570 ( 0.00%)          let new_ctxt = SyntaxContext(hygiene_data.syntax_context_data.len() as u32);
      .                   // Push a dummy SyntaxContextData to ensure that nobody else can get the
      .                   // same ID as us. This will be overwritten after call `decode_Data`
      .                   hygiene_data.syntax_context_data.push(SyntaxContextData {
    570 ( 0.00%)              outer_expn: ExpnId::root(),
      .                       outer_transparency: Transparency::Transparent,
      .                       parent: SyntaxContext::root(),
      .                       opaque: SyntaxContext::root(),
      .                       opaque_and_semitransparent: SyntaxContext::root(),
      .                       dollar_crate_name: kw::Empty,
      .                   });
      .                   let mut ctxts = outer_ctxts.lock();
      .                   let new_len = raw_id as usize + 1;
  1,710 ( 0.00%)          if ctxts.len() < new_len {
      .                       ctxts.resize(new_len, None);
      .                   }
  1,140 ( 0.00%)          ctxts[raw_id as usize] = Some(new_ctxt);
      .                   drop(ctxts);
      .                   new_ctxt
      .               });
      .           
      .               // Don't try to decode data while holding the lock, since we need to
      .               // be able to recursively decode a SyntaxContext
  1,140 ( 0.00%)      let mut ctxt_data = decode_data(d, raw_id);
      .               // Reset `dollar_crate_name` so that it will be updated by `update_dollar_crate_names`
      .               // We don't care what the encoding crate set this to - we want to resolve it
      .               // from the perspective of the current compilation session
  1,140 ( 0.00%)      ctxt_data.dollar_crate_name = kw::DollarCrate;
      .           
      .               // Overwrite the dummy data with our decoded SyntaxContextData
      .               HygieneData::with(|hygiene_data| {
      .                   let dummy = std::mem::replace(
    570 ( 0.00%)              &mut hygiene_data.syntax_context_data[new_ctxt.as_u32() as usize],
      .                       ctxt_data,
      .                   );
      .                   // Make sure nothing weird happening while `decode_data` was running
    570 ( 0.00%)          assert_eq!(dummy.dollar_crate_name, kw::Empty);
      .               });
      .           
  1,140 ( 0.00%)      new_ctxt
      .           }
      .           
      .           fn for_all_ctxts_in<E, F: FnMut(u32, SyntaxContext, &SyntaxContextData) -> Result<(), E>>(
      .               ctxts: impl Iterator<Item = SyntaxContext>,
      .               mut f: F,
      .           ) -> Result<(), E> {
      .               let all_data: Vec<_> = HygieneData::with(|data| {
     50 ( 0.00%)          ctxts.map(|ctxt| (ctxt, data.syntax_context_data[ctxt.0 as usize].clone())).collect()
      .               });
    216 ( 0.00%)      for (ctxt, data) in all_data.into_iter() {
      .                   f(ctxt.0, ctxt, &data)?;
      .               }
      .               Ok(())
      .           }
      .           
      .           fn for_all_expns_in<E>(
      .               expns: impl Iterator<Item = ExpnId>,
      .               mut f: impl FnMut(ExpnId, &ExpnData, ExpnHash) -> Result<(), E>,
      .           ) -> Result<(), E> {
      .               let all_data: Vec<_> = HygieneData::with(|data| {
    612 ( 0.00%)          expns.map(|expn| (expn, data.expn_data(expn).clone(), data.expn_hash(expn))).collect()
      .               });
    520 ( 0.00%)      for (expn, data, hash) in all_data.into_iter() {
      .                   f(expn, &data, hash)?;
      .               }
      .               Ok(())
      .           }
      .           
      .           impl<E: Encoder> Encodable<E> for LocalExpnId {
      .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
      .                   self.to_expn_id().encode(e)
-- line 1411 ----------------------------------------
-- line 1430 ----------------------------------------
      .               }
      .           }
      .           
      .           pub fn raw_encode_syntax_context<E: Encoder>(
      .               ctxt: SyntaxContext,
      .               context: &HygieneEncodeContext,
      .               e: &mut E,
      .           ) -> Result<(), E::Error> {
  4,226 ( 0.00%)      if !context.serialized_ctxts.lock().contains(&ctxt) {
  1,985 ( 0.00%)          context.latest_ctxts.lock().insert(ctxt);
      .               }
      .               ctxt.0.encode(e)
      .           }
      .           
      .           impl<E: Encoder> Encodable<E> for SyntaxContext {
      .               default fn encode(&self, _: &mut E) -> Result<(), E::Error> {
      .                   panic!("cannot encode `SyntaxContext` with `{}`", std::any::type_name::<E>());
      .               }
-- line 1447 ----------------------------------------
-- line 1457 ----------------------------------------
      .           /// such that the `Fingerprint` of the `ExpnData` does not collide with
      .           /// any other `ExpnIds`.
      .           ///
      .           /// This method is called only when an `ExpnData` is first associated
      .           /// with an `ExpnId` (when the `ExpnId` is initially constructed, or via
      .           /// `set_expn_data`). It is *not* called for foreign `ExpnId`s deserialized
      .           /// from another crate's metadata - since `ExpnHash` includes the stable crate id,
      .           /// collisions are only possible between `ExpnId`s within the same crate.
    756 ( 0.00%)  fn update_disambiguator(expn_data: &mut ExpnData, mut ctx: impl HashStableContext) -> ExpnHash {
      .               // This disambiguator should not have been set yet.
    272 ( 0.00%)      assert_eq!(
      .                   expn_data.disambiguator, 0,
      .                   "Already set disambiguator for ExpnData: {:?}",
      .                   expn_data
      .               );
    272 ( 0.00%)      assert_default_hashing_controls(&ctx, "ExpnData (disambiguator)");
    628 ( 0.00%)      let mut expn_hash = expn_data.hash_expn(&mut ctx);
      .           
      .               let disambiguator = HygieneData::with(|data| {
      .                   // If this is the first ExpnData with a given hash, then keep our
      .                   // disambiguator at 0 (the default u32 value)
      .                   let disambig = data.expn_data_disambiguators.entry(expn_hash).or_default();
    136 ( 0.00%)          let disambiguator = *disambig;
    544 ( 0.00%)          *disambig += 1;
      .                   disambiguator
      .               });
      .           
    272 ( 0.00%)      if disambiguator != 0 {
      .                   debug!("Set disambiguator for expn_data={:?} expn_hash={:?}", expn_data, expn_hash);
      .           
      .                   expn_data.disambiguator = disambiguator;
      .                   expn_hash = expn_data.hash_expn(&mut ctx);
      .           
      .                   // Verify that the new disambiguator makes the hash unique
      .                   #[cfg(debug_assertions)]
      .                   HygieneData::with(|data| {
-- line 1492 ----------------------------------------
-- line 1493 ----------------------------------------
      .                       assert_eq!(
      .                           data.expn_data_disambiguators.get(&expn_hash),
      .                           None,
      .                           "Hash collision after disambiguator update!",
      .                       );
      .                   });
      .               }
      .           
    272 ( 0.00%)      ExpnHash::new(ctx.def_path_hash(LOCAL_CRATE.as_def_id()).stable_crate_id(), expn_hash)
    756 ( 0.00%)  }
      .           
      .           impl<CTX: HashStableContext> HashStable<CTX> for SyntaxContext {
 82,816 ( 0.01%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
      .                   const TAG_EXPANSION: u8 = 0;
      .                   const TAG_NO_EXPANSION: u8 = 1;
      .           
 24,496 ( 0.00%)          if *self == SyntaxContext::root() {
      .                       TAG_NO_EXPANSION.hash_stable(ctx, hasher);
      .                   } else {
      .                       TAG_EXPANSION.hash_stable(ctx, hasher);
  2,668 ( 0.00%)              let (expn_id, transparency) = self.outer_mark();
 13,376 ( 0.00%)              expn_id.hash_stable(ctx, hasher);
      .                       transparency.hash_stable(ctx, hasher);
      .                   }
 79,196 ( 0.01%)      }
      .           }
      .           
      .           impl<CTX: HashStableContext> HashStable<CTX> for ExpnId {
 10,290 ( 0.00%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
      .                   assert_default_hashing_controls(ctx, "ExpnId");
 16,624 ( 0.00%)          let hash = if *self == ExpnId::root() {
      .                       // Avoid fetching TLS storage for a trivial often-used value.
      .                       Fingerprint::ZERO
      .                   } else {
      .                       self.expn_hash().0
      .                   };
      .           
      .                   hash.hash_stable(ctx, hasher);
  7,350 ( 0.00%)      }
      .           }

343,374 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/hygiene.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 70 ----------------------------------------
        .           
        .                   impl<'a, T> $name<'a, T> {
        .                       // Helper function for creating a slice from the iterator.
        .                       #[inline(always)]
        .                       fn make_slice(&self) -> &'a [T] {
        .                           // SAFETY: the iterator was created from a slice with pointer
        .                           // `self.ptr` and length `len!(self)`. This guarantees that all
        .                           // the prerequisites for `from_raw_parts` are fulfilled.
   24,450 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
        .                       }
        .           
        .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
        .                       // returning the old start.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
        .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               let old = self.ptr.as_ptr();
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
   70,376 ( 0.01%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
        .                               old
        .                           }
        .                       }
        .           
        .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
        .                       // returning the new end.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
        .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
        .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
       23 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
        .                               self.end
        .                           }
        .                       }
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<T> ExactSizeIterator for $name<'_, T> {
        .                       #[inline(always)]
        .                       fn len(&self) -> usize {
   16,260 ( 0.00%)                  len!(self)
        .                       }
        .           
        .                       #[inline(always)]
        .                       fn is_empty(&self) -> bool {
        .                           is_empty!(self)
        .                       }
        .                   }
        .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
        .                       fn next(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer
        .                           // must be non-null, and slices over non-ZSTs must also have a
        .                           // non-null end pointer. The call to `next_unchecked!` is safe
        .                           // since we check if the iterator is empty first.
        .                           unsafe {
   43,499 ( 0.01%)                      assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
   15,091 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
9,207,559 ( 1.65%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
        .                       fn size_hint(&self) -> (usize, Option<usize>) {
  233,154 ( 0.04%)                  let exact = len!(self);
        .                           (exact, Some(exact))
        .                       }
        .           
        .                       #[inline]
        .                       fn count(self) -> usize {
        .                           len!(self)
        .                       }
        .           
        .                       #[inline]
        .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    4,137 ( 0.00%)                  if n >= len!(self) {
        .                               // This iterator is now empty.
        .                               if mem::size_of::<T>() == 0 {
        .                                   // We have to do it this way as `ptr` may never be 0, but `end`
        .                                   // could be (due to wrapping).
        .                                   self.end = self.ptr.as_ptr();
        .                               } else {
        .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
        .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
        .                       // faster to compile.
        .                       #[inline]
        .                       fn for_each<F>(mut self, mut f: F)
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item),
        .                       {
        .                           while let Some(x) = self.next() {
      846 ( 0.00%)                      f(x);
        .                           }
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn all<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
      252 ( 0.00%)                  while let Some(x) = self.next() {
    4,785 ( 0.00%)                      if !f(x) {
        .                                   return false;
        .                               }
        .                           }
        .                           true
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn any<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
   84,781 ( 0.02%)                  while let Some(x) = self.next() {
   74,537 ( 0.01%)                      if f(x) {
        .                                   return true;
        .                               }
        .                           }
        .                           false
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
        .                       where
        .                           Self: Sized,
        .                           P: FnMut(&Self::Item) -> bool,
        .                       {
    3,540 ( 0.00%)                  while let Some(x) = self.next() {
   13,611 ( 0.00%)                      if predicate(&x) {
        .                                   return Some(x);
        .                               }
        .                           }
        .                           None
    1,136 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> Option<B>,
        .                       {
   17,912 ( 0.00%)                  while let Some(x) = self.next() {
   38,074 ( 0.01%)                      if let Some(y) = f(x) {
    3,732 ( 0.00%)                          return Some(y);
        .                               }
        .                           }
        .                           None
      985 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       #[rustc_inherit_overflow_checks]
        .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           Self: Sized,
        .                           P: FnMut(Self::Item) -> bool,
        .                       {
        .                           let n = len!(self);
        .                           let mut i = 0;
        .                           while let Some(x) = self.next() {
   34,931 ( 0.01%)                      if predicate(x) {
        .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
        .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                               i += 1;
        .                           }
        .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           P: FnMut(Self::Item) -> bool,
        .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
        .                       {
        .                           let n = len!(self);
        .                           let mut i = n;
    3,532 ( 0.00%)                  while let Some(x) = self.next_back() {
   43,835 ( 0.01%)                      i -= 1;
   36,530 ( 0.01%)                      if predicate(x) {
        .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
        .                                   // and is only decreasing.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                           }
        .                           None
        .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
        .                           // the returned references is guaranteed to refer to an element
        .                           // of the slice and thus guaranteed to be valid.
        .                           //
        .                           // Also note that the caller also guarantees that we're never
        .                           // called with the same index again, and that no other methods
        .                           // that will access this subslice are called, so it is valid
        .                           // for the returned reference to be mutable in the case of
        .                           // `IterMut`
   31,826 ( 0.01%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
        .                       }
        .           
        .                       $($extra)*
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
        .                       #[inline]
-- line 348 ----------------------------------------
-- line 351 ----------------------------------------
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
        .                           // and slices over non-ZSTs must also have a non-null end pointer.
        .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
        .                           // empty first.
        .                           unsafe {
        .                               assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
       24 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
  154,677 ( 0.03%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_back_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
-- line 369 ----------------------------------------

1,345,910 ( 0.24%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 180 ----------------------------------------
         .           /// assert_eq!(v, &[0.into()]);
         .           ///
         .           /// // Ensure that the last item was dropped.
         .           /// assert!(weak.upgrade().is_none());
         .           /// ```
         .           #[stable(feature = "drop_in_place", since = "1.8.0")]
         .           #[lang = "drop_in_place"]
         .           #[allow(unconditional_recursion)]
 5,185,585 ( 0.93%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
         .               // Code here does not matter - this is replaced by the
         .               // real drop glue by the compiler.
         .           
         .               // SAFETY: see comment above
         .               unsafe { drop_in_place(to_drop) }
         .           }
         .           
         .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 366 ----------------------------------------
         .               let mut tmp = MaybeUninit::<T>::uninit();
         .           
         .               // Perform the swap
         .               // SAFETY: the caller must guarantee that `x` and `y` are
         .               // valid for writes and properly aligned. `tmp` cannot be
         .               // overlapping either `x` or `y` because `tmp` was just allocated
         .               // on the stack as a separate allocated object.
         .               unsafe {
       405 ( 0.00%)          copy_nonoverlapping(x, tmp.as_mut_ptr(), 1);
       405 ( 0.00%)          copy(y, x, 1); // `x` and `y` may overlap
         .                   copy_nonoverlapping(tmp.as_ptr(), y, 1);
         .               }
         .           }
         .           
         .           /// Swaps `count * size_of::<T>()` bytes between the two regions of memory
         .           /// beginning at `x` and `y`. The two regions must *not* overlap.
         .           ///
         .           /// # Safety
-- line 383 ----------------------------------------
-- line 448 ----------------------------------------
         .                       return;
         .                   }
         .               }
         .           
         .               // Direct swapping, for the cases not going through the block optimization.
         .               // SAFETY: the caller must guarantee that `x` and `y` are valid
         .               // for writes, properly aligned, and non-overlapping.
         .               unsafe {
        11 ( 0.00%)          let z = read(x);
         .                   copy_nonoverlapping(y, x, 1);
         .                   write(y, z);
         .               }
         .           }
         .           
         .           #[inline]
         .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
         .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
-- line 464 ----------------------------------------
-- line 693 ----------------------------------------
         .               let mut tmp = MaybeUninit::<T>::uninit();
         .               // SAFETY: the caller must guarantee that `src` is valid for reads.
         .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
         .               // the stack as a separate allocated object.
         .               //
         .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
         .               // to be properly initialized.
         .               unsafe {
   102,680 ( 0.02%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
   799,889 ( 0.14%)          tmp.assume_init()
         .               }
         .           }
         .           
         .           /// Reads the value from `src` without moving it. This leaves the
         .           /// memory in `src` unchanged.
         .           ///
         .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
         .           ///
-- line 710 ----------------------------------------
-- line 884 ----------------------------------------
         .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
         .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
         .               }
         .           
         .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
         .               // `dst` cannot overlap `src` because the caller has mutable access
         .               // to `dst` while `src` is owned by this function.
         .               unsafe {
10,656,809 ( 1.91%)          copy_nonoverlapping(&src as *const T, dst, 1);
         .                   intrinsics::forget(src);
         .               }
         .           }
         .           
         .           /// Overwrites a memory location with the given value without reading or
         .           /// dropping the old value.
         .           ///
         .           /// Unlike [`write()`], the pointer may be unaligned.
-- line 900 ----------------------------------------
-- line 1206 ----------------------------------------
         .               if stride == 1 {
         .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
         .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
         .                   //
         .                   //    round_up_to_next_alignment(p, a) - p
         .                   //
         .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
         .                   // for LLVM to be able to utilize the various optimizations it knows about.
     1,060 ( 0.00%)          return wrapping_sub(
     2,482 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
         .                       p as usize,
         .                   );
         .               }
         .           
         .               let pmoda = p as usize & a_minus_one;
         .               if pmoda == 0 {
         .                   // Already aligned. Yay!
         .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
         .           /// assert!(std::ptr::eq(
         .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
         .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
         .           /// ));
         .           /// ```
         .           #[stable(feature = "ptr_eq", since = "1.17.0")]
         .           #[inline]
         .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
   410,580 ( 0.07%)      a == b
         .           }
         .           
         .           /// Hash a raw pointer.
         .           ///
         .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
         .           /// by its address rather than the value it points to
         .           /// (which is what the `Hash for &T` implementation does).
         .           ///
-- line 1364 ----------------------------------------

   941,025 ( 0.17%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs
--------------------------------------------------------------------------------
Ir               

-- line 15 ----------------------------------------
      .           use std::str;
      .           
      .           use crate::{with_session_globals, Edition, Span, DUMMY_SP};
      .           
      .           #[cfg(test)]
      .           mod tests;
      .           
      .           // The proc macro code for this is in `compiler/rustc_macros/src/symbols.rs`.
      8 ( 0.00%)  symbols! {
      .               // After modifying this list adjust `is_special`, `is_used_keyword`/`is_unused_keyword`,
      .               // this should be rarely necessary though if the keywords are kept in alphabetic order.
      .               Keywords {
      .                   // Special reserved identifiers used internally for elided lifetimes,
      .                   // unnamed method parameters, crate root module, error recovery etc.
      .                   Empty:              "",
      .                   PathRoot:           "{{root}}",
      .                   DollarCrate:        "$crate",
-- line 31 ----------------------------------------
-- line 1498 ----------------------------------------
      .                   write_str,
      .                   writeln_macro,
      .                   x87_reg,
      .                   xer,
      .                   xmm_reg,
      .                   ymm_reg,
      .                   zmm_reg,
      .               }
     10 ( 0.00%)  }
      .           
 26,570 ( 0.00%)  #[derive(Copy, Clone, Eq, HashStable_Generic, Encodable, Decodable)]
      .           pub struct Ident {
      .               pub name: Symbol,
      .               pub span: Span,
      .           }
      .           
      .           impl Ident {
      .               #[inline]
      .               /// Constructs a new identifier from a symbol and a span.
      .               pub const fn new(name: Symbol, span: Span) -> Ident {
      .                   Ident { name, span }
141,105 ( 0.03%)      }
      .           
      .               /// Constructs a new identifier with a dummy span.
      .               #[inline]
      .               pub const fn with_dummy_span(name: Symbol) -> Ident {
      .                   Ident::new(name, DUMMY_SP)
      .               }
      .           
      .               #[inline]
      .               pub fn empty() -> Ident {
      .                   Ident::with_dummy_span(kw::Empty)
      .               }
      .           
      .               /// Maps a string to an identifier with a dummy span.
      4 ( 0.00%)      pub fn from_str(string: &str) -> Ident {
      4 ( 0.00%)          Ident::with_dummy_span(Symbol::intern(string))
     16 ( 0.00%)      }
      .           
      .               /// Maps a string and a span to an identifier.
     88 ( 0.00%)      pub fn from_str_and_span(string: &str, span: Span) -> Ident {
     44 ( 0.00%)          Ident::new(Symbol::intern(string), span)
     88 ( 0.00%)      }
      .           
      .               /// Replaces `lo` and `hi` with those from `span`, but keep hygiene context.
  3,000 ( 0.00%)      pub fn with_span_pos(self, span: Span) -> Ident {
      .                   Ident::new(self.name, span.with_ctxt(self.span.ctxt()))
  1,875 ( 0.00%)      }
      .           
      .               pub fn without_first_quote(self) -> Ident {
      .                   Ident::new(Symbol::intern(self.as_str().trim_start_matches('\'')), self.span)
      .               }
      .           
      .               /// "Normalize" ident for use in comparisons using "item hygiene".
      .               /// Identifiers with same string value become same if they came from the same macro 2.0 macro
      .               /// (e.g., `macro` item, but not `macro_rules` item) and stay different if they came from
      .               /// different macro 2.0 macros.
      .               /// Technically, this operation strips all non-opaque marks from ident's syntactic context.
127,917 ( 0.02%)      pub fn normalize_to_macros_2_0(self) -> Ident {
      .                   Ident::new(self.name, self.span.normalize_to_macros_2_0())
 99,491 ( 0.02%)      }
      .           
      .               /// "Normalize" ident for use in comparisons using "local variable hygiene".
      .               /// Identifiers with same string value become same if they came from the same non-transparent
      .               /// macro (e.g., `macro` or `macro_rules!` items) and stay different if they came from different
      .               /// non-transparent macros.
      .               /// Technically, this operation strips all transparent marks from ident's syntactic context.
 13,761 ( 0.00%)      pub fn normalize_to_macro_rules(self) -> Ident {
      .                   Ident::new(self.name, self.span.normalize_to_macro_rules())
 10,703 ( 0.00%)      }
      .           
      .               /// Access the underlying string. This is a slowish operation because it
      .               /// requires locking the symbol interner.
      .               ///
      .               /// Note that the lifetime of the return value is a lie. See
      .               /// `Symbol::as_str()` for details.
      .               pub fn as_str(&self) -> &str {
     45 ( 0.00%)          self.name.as_str()
      .               }
      .           }
      .           
      .           impl PartialEq for Ident {
 45,423 ( 0.01%)      fn eq(&self, rhs: &Self) -> bool {
 93,702 ( 0.02%)          self.name == rhs.name && self.span.ctxt() == rhs.span.ctxt()
 60,564 ( 0.01%)      }
      .           }
      .           
      .           impl Hash for Ident {
      .               fn hash<H: Hasher>(&self, state: &mut H) {
    203 ( 0.00%)          self.name.hash(state);
  8,554 ( 0.00%)          self.span.ctxt().hash(state);
      .               }
      .           }
      .           
      .           impl fmt::Debug for Ident {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Display::fmt(self, f)?;
      .                   fmt::Debug::fmt(&self.span.ctxt(), f)
      .               }
      .           }
      .           
      .           /// This implementation is supposed to be used in error messages, so it's expected to be identical
      .           /// to printing the original identifier token written in source code (`token_to_string`),
      .           /// except that AST identifiers don't keep the rawness flag, so we have to guess it.
      .           impl fmt::Display for Ident {
    248 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    311 ( 0.00%)          fmt::Display::fmt(&IdentPrinter::new(self.name, self.is_raw_guess(), None), f)
    248 ( 0.00%)      }
      .           }
      .           
      .           /// This is the most general way to print identifiers.
      .           /// AST pretty-printer is used as a fallback for turning AST structures into token streams for
      .           /// proc macros. Additionally, proc macros may stringify their input and expect it survive the
      .           /// stringification (especially true for proc macro derives written between Rust 1.15 and 1.30).
      .           /// So we need to somehow pretty-print `$crate` in a way preserving at least some of its
      .           /// hygiene data, most importantly name of the crate it refers to.
-- line 1613 ----------------------------------------
-- line 1622 ----------------------------------------
      .               is_raw: bool,
      .               /// Span used for retrieving the crate name to which `$crate` refers to,
      .               /// if this field is `None` then the `$crate` conversion doesn't happen.
      .               convert_dollar_crate: Option<Span>,
      .           }
      .           
      .           impl IdentPrinter {
      .               /// The most general `IdentPrinter` constructor. Do not use this.
    127 ( 0.00%)      pub fn new(symbol: Symbol, is_raw: bool, convert_dollar_crate: Option<Span>) -> IdentPrinter {
  1,052 ( 0.00%)          IdentPrinter { symbol, is_raw, convert_dollar_crate }
    127 ( 0.00%)      }
      .           
      .               /// This implementation is supposed to be used when printing identifiers
      .               /// as a part of pretty-printing for larger AST pieces.
      .               /// Do not use this either.
    114 ( 0.00%)      pub fn for_ast_ident(ident: Ident, is_raw: bool) -> IdentPrinter {
    114 ( 0.00%)          IdentPrinter::new(ident.name, is_raw, Some(ident.span))
     57 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Display for IdentPrinter {
  1,235 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    494 ( 0.00%)          if self.is_raw {
      .                       f.write_str("r#")?;
    247 ( 0.00%)          } else if self.symbol == kw::DollarCrate {
      .                       if let Some(span) = self.convert_dollar_crate {
      .                           let converted = span.ctxt().dollar_crate_name();
      .                           if !converted.is_path_segment_keyword() {
      .                               f.write_str("::")?;
      .                           }
      .                           return fmt::Display::fmt(&converted, f);
      .                       }
      .                   }
-- line 1654 ----------------------------------------
-- line 1656 ----------------------------------------
      .               }
      .           }
      .           
      .           /// An newtype around `Ident` that calls [Ident::normalize_to_macro_rules] on
      .           /// construction.
      .           // FIXME(matthewj, petrochenkov) Use this more often, add a similar
      .           // `ModernIdent` struct and use that as well.
      .           #[derive(Copy, Clone, Eq, PartialEq, Hash)]
  5,427 ( 0.00%)  pub struct MacroRulesNormalizedIdent(Ident);
      .           
      .           impl MacroRulesNormalizedIdent {
      .               pub fn new(ident: Ident) -> Self {
  1,218 ( 0.00%)          Self(ident.normalize_to_macro_rules())
      .               }
      .           }
      .           
      .           impl fmt::Debug for MacroRulesNormalizedIdent {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Debug::fmt(&self.0, f)
      .               }
      .           }
-- line 1676 ----------------------------------------
-- line 1686 ----------------------------------------
      .           /// Internally, a `Symbol` is implemented as an index, and all operations
      .           /// (including hashing, equality, and ordering) operate on that index. The use
      .           /// of `rustc_index::newtype_index!` means that `Option<Symbol>` only takes up 4 bytes,
      .           /// because `rustc_index::newtype_index!` reserves the last 256 values for tagging purposes.
      .           ///
      .           /// Note that `Symbol` cannot directly be a `rustc_index::newtype_index!` because it
      .           /// implements `fmt::Debug`, `Encodable`, and `Decodable` in special ways.
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
 22,761 ( 0.00%)  pub struct Symbol(SymbolIndex);
      .           
      .           rustc_index::newtype_index! {
      .               struct SymbolIndex { .. }
      .           }
      .           
      .           impl Symbol {
      .               const fn new(n: u32) -> Self {
      .                   Symbol(SymbolIndex::from_u32(n))
     34 ( 0.00%)      }
      .           
      .               /// Maps a string to its interned representation.
302,940 ( 0.05%)      pub fn intern(string: &str) -> Self {
      .                   with_session_globals(|session_globals| session_globals.symbol_interner.intern(string))
302,940 ( 0.05%)      }
      .           
      .               /// Access the underlying string. This is a slowish operation because it
      .               /// requires locking the symbol interner.
      .               ///
      .               /// Note that the lifetime of the return value is a lie. It's not the same
      .               /// as `&self`, but actually tied to the lifetime of the underlying
      .               /// interner. Interners are long-lived, and there are very few of them, and
      .               /// this function is typically used for short-lived things, so in practice
      .               /// it works out ok.
 24,519 ( 0.00%)      pub fn as_str(&self) -> &str {
  8,173 ( 0.00%)          with_session_globals(|session_globals| unsafe {
      .                       std::mem::transmute::<&str, &str>(session_globals.symbol_interner.get(*self))
      .                   })
 32,692 ( 0.01%)      }
      .           
      .               pub fn as_u32(self) -> u32 {
      .                   self.0.as_u32()
      .               }
      .           
      .               pub fn is_empty(self) -> bool {
      .                   self == kw::Empty
      .               }
      .           
      .               /// This method is supposed to be used in error messages, so it's expected to be
      .               /// identical to printing the original identifier token written in source code
      .               /// (`token_to_string`, `Ident::to_string`), except that symbols don't keep the rawness flag
      .               /// or edition, so we have to guess the rawness using the global edition.
      6 ( 0.00%)      pub fn to_ident_string(self) -> String {
      .                   Ident::with_dummy_span(self).to_string()
      6 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Debug for Symbol {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Debug::fmt(self.as_str(), f)
      .               }
      .           }
      .           
      .           impl fmt::Display for Symbol {
    274 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  3,045 ( 0.00%)          fmt::Display::fmt(self.as_str(), f)
      .               }
      .           }
      .           
      .           impl<S: Encoder> Encodable<S> for Symbol {
      .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
  6,480 ( 0.00%)          s.emit_str(self.as_str())
      .               }
      .           }
      .           
      .           impl<D: Decoder> Decodable<D> for Symbol {
      .               #[inline]
 28,034 ( 0.01%)      fn decode(d: &mut D) -> Symbol {
 76,132 ( 0.01%)          Symbol::intern(&d.read_str())
      .               }
      .           }
      .           
      .           impl<CTX> HashStable<CTX> for Symbol {
      .               #[inline]
    840 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
  7,513 ( 0.00%)          self.as_str().hash_stable(hcx, hasher);
    672 ( 0.00%)      }
      .           }
      .           
      .           impl<CTX> ToStableHashKey<CTX> for Symbol {
      .               type KeyType = String;
      .               #[inline]
      .               fn to_stable_hash_key(&self, _: &CTX) -> String {
      .                   self.as_str().to_string()
      .               }
-- line 1778 ----------------------------------------
-- line 1785 ----------------------------------------
      .           //
      .           // The `FxHashMap`+`Vec` pair could be replaced by `FxIndexSet`, but #75278
      .           // found that to regress performance up to 2% in some cases. This might be
      .           // revisited after further improvements to `indexmap`.
      .           //
      .           // This type is private to prevent accidentally constructing more than one
      .           // `Interner` on the same thread, which makes it easy to mixup `Symbol`s
      .           // between `Interner`s.
      2 ( 0.00%)  #[derive(Default)]
      .           struct InternerInner {
      .               arena: DroplessArena,
      .               names: FxHashMap<&'static str, Symbol>,
      .               strings: Vec<&'static str>,
      .           }
      .           
      .           impl Interner {
      .               fn prefill(init: &[&'static str]) -> Self {
     30 ( 0.00%)          Interner(Lock::new(InternerInner {
      .                       strings: init.into(),
      .                       names: init.iter().copied().zip((0..).map(Symbol::new)).collect(),
      .                       ..Default::default()
      .                   }))
      .               }
      .           
      .               #[inline]
      .               fn intern(&self, string: &str) -> Symbol {
      .                   let mut inner = self.0.lock();
 39,414 ( 0.01%)          if let Some(&name) = inner.names.get(string) {
      .                       return name;
      .                   }
      .           
 13,953 ( 0.00%)          let name = Symbol::new(inner.strings.len() as u32);
      .           
      .                   // SAFETY: we convert from `&str` to `&[u8]`, clone it into the arena,
      .                   // and immediately convert the clone back to `&[u8], all because there
      .                   // is no `inner.arena.alloc_str()` method. This is clearly safe.
      .                   let string: &str =
      .                       unsafe { str::from_utf8_unchecked(inner.arena.alloc_slice(string.as_bytes())) };
      .           
      .                   // SAFETY: we can extend the arena allocation to `'static` because we
-- line 1824 ----------------------------------------
-- line 1831 ----------------------------------------
      .                   // #91445 for details.
      .                   inner.names.insert(string, name);
      .                   name
      .               }
      .           
      .               // Get the symbol as a string. `Symbol::as_str()` should be used in
      .               // preference to this function.
      .               fn get(&self, symbol: Symbol) -> &str {
 24,519 ( 0.00%)          self.0.lock().strings[symbol.0.as_usize()]
      .               }
      .           }
      .           
      .           // This module has a very short name because it's used a lot.
      .           /// This module contains all the defined keyword `Symbol`s.
      .           ///
      .           /// Given that `kw` is imported, use them like `kw::keyword_name`.
      .           /// For example `kw::Loop` or `kw::Break`.
-- line 1847 ----------------------------------------
-- line 1863 ----------------------------------------
      .           
      .               // Used from a macro in `librustc_feature/accepted.rs`
      .               pub use super::kw::MacroRules as macro_rules;
      .           
      .               /// Get the symbol for an integer.
      .               ///
      .               /// The first few non-negative integers each have a static symbol and therefore
      .               /// are fast.
    105 ( 0.00%)      pub fn integer<N: TryInto<usize> + Copy + ToString>(n: N) -> Symbol {
    105 ( 0.00%)          if let Result::Ok(idx) = n.try_into() {
      .                       if idx < 10 {
     68 ( 0.00%)                  return Symbol::new(super::SYMBOL_DIGITS_BASE + idx as u32);
      .                       }
      .                   }
     11 ( 0.00%)          Symbol::intern(&n.to_string())
     44 ( 0.00%)      }
      .           }
      .           
      .           impl Symbol {
      .               fn is_special(self) -> bool {
      .                   self <= kw::Underscore
      .               }
      .           
      .               fn is_used_keyword_always(self) -> bool {
    381 ( 0.00%)          self >= kw::As && self <= kw::While
      .               }
      .           
      .               fn is_used_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {
 15,231 ( 0.00%)          (self >= kw::Async && self <= kw::Dyn) && edition() >= Edition::Edition2018
      .               }
      .           
      .               fn is_unused_keyword_always(self) -> bool {
    381 ( 0.00%)          self >= kw::Abstract && self <= kw::Yield
      .               }
      .           
      .               fn is_unused_keyword_conditional(self, edition: impl FnOnce() -> Edition) -> bool {
    127 ( 0.00%)          self == kw::Try && edition() >= Edition::Edition2018
      .               }
      .           
      .               pub fn is_reserved(self, edition: impl Copy + FnOnce() -> Edition) -> bool {
 25,525 ( 0.00%)          self.is_special()
      .                       || self.is_used_keyword_always()
      .                       || self.is_unused_keyword_always()
      .                       || self.is_used_keyword_conditional(edition)
      .                       || self.is_unused_keyword_conditional(edition)
      .               }
      .           
      .               /// A keyword or reserved identifier that can be used as a path segment.
      .               pub fn is_path_segment_keyword(self) -> bool {
 58,919 ( 0.01%)          self == kw::Super
      .                       || self == kw::SelfLower
      .                       || self == kw::SelfUpper
      .                       || self == kw::Crate
      .                       || self == kw::PathRoot
      .                       || self == kw::DollarCrate
      .               }
      .           
      .               /// Returns `true` if the symbol is `true` or `false`.
      .               pub fn is_bool_lit(self) -> bool {
    762 ( 0.00%)          self == kw::True || self == kw::False
    762 ( 0.00%)      }
      .           
      .               /// Returns `true` if this symbol can be a raw identifier.
      .               pub fn can_be_raw(self) -> bool {
    308 ( 0.00%)          self != kw::Empty && self != kw::Underscore && !self.is_path_segment_keyword()
      2 ( 0.00%)      }
      .           }
      .           
      .           impl Ident {
      .               // Returns `true` for reserved identifiers used internally for elided lifetimes,
      .               // unnamed method parameters, crate root module, error recovery etc.
      .               pub fn is_special(self) -> bool {
      .                   self.name.is_special()
    127 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is a keyword used in the language.
    127 ( 0.00%)      pub fn is_used_keyword(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
    127 ( 0.00%)          self.name.is_used_keyword_always()
      .                       || self.name.is_used_keyword_conditional(|| self.span.edition())
    254 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is a keyword reserved for possible future use.
    127 ( 0.00%)      pub fn is_unused_keyword(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
    127 ( 0.00%)          self.name.is_unused_keyword_always()
      .                       || self.name.is_unused_keyword_conditional(|| self.span.edition())
    254 ( 0.00%)      }
      .           
      .               /// Returns `true` if the token is either a special identifier or a keyword.
  4,957 ( 0.00%)      pub fn is_reserved(self) -> bool {
      .                   // Note: `span.edition()` is relatively expensive, don't call it unless necessary.
      .                   self.name.is_reserved(|| self.span.edition())
  9,914 ( 0.00%)      }
      .           
      .               /// A keyword or reserved identifier that can be used as a path segment.
      .               pub fn is_path_segment_keyword(self) -> bool {
      .                   self.name.is_path_segment_keyword()
  8,417 ( 0.00%)      }
      .           
      .               /// We see this identifier in a normal identifier position, like variable name or a type.
      .               /// How was it written originally? Did it use the raw form? Let's try to guess.
     85 ( 0.00%)      pub fn is_raw_guess(self) -> bool {
      .                   self.name.can_be_raw() && self.is_reserved()
    170 ( 0.00%)      }
      .           }

 67,417 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/symbol.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 114 ----------------------------------------
      .           const EMPTY: u8 = 0b1111_1111;
      .           
      .           /// Control byte value for a deleted bucket.
      .           const DELETED: u8 = 0b1000_0000;
      .           
      .           /// Checks whether a control byte represents a full bucket (top bit is clear).
      .           #[inline]
      .           fn is_full(ctrl: u8) -> bool {
197,274 ( 0.04%)      ctrl & 0x80 == 0
      .           }
      .           
      .           /// Checks whether a control byte represents a special value (top bit is set).
      .           #[inline]
      .           fn is_special(ctrl: u8) -> bool {
      .               ctrl & 0x80 != 0
      .           }
      .           
-- line 130 ----------------------------------------
-- line 146 ----------------------------------------
      .           /// Secondary hash function, saved in the low 7 bits of the control byte.
      .           #[inline]
      .           #[allow(clippy::cast_possible_truncation)]
      .           fn h2(hash: u64) -> u8 {
      .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
      .               // value, some hash functions (such as FxHash) produce a usize result
      .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
      .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
156,966 ( 0.03%)      let top7 = hash >> (hash_len * 8 - 7);
      .               (top7 & 0x7f) as u8 // truncation
      .           }
      .           
      .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
      .           /// table size is a power of two) to visit every group of elements exactly once.
      .           ///
      .           /// A triangular probe has us jump by 1 more group every time. So first we
      .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 162 ----------------------------------------
-- line 173 ----------------------------------------
      .               #[inline]
      .               fn move_next(&mut self, bucket_mask: usize) {
      .                   // We should have found an empty bucket by now and ended the probe.
      .                   debug_assert!(
      .                       self.stride <= bucket_mask,
      .                       "Went past end of probe sequence"
      .                   );
      .           
 20,644 ( 0.00%)          self.stride += Group::WIDTH;
 20,644 ( 0.00%)          self.pos += self.stride;
 10,322 ( 0.00%)          self.pos &= bucket_mask;
      .               }
      .           }
      .           
      .           /// Returns the number of buckets needed to hold the given number of items,
      .           /// taking the maximum load factor into account.
      .           ///
      .           /// Returns `None` if an overflow occurs.
      .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
      .           #[cfg_attr(target_os = "emscripten", inline(never))]
      .           #[cfg_attr(not(target_os = "emscripten"), inline)]
      .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
      .               debug_assert_ne!(cap, 0);
      .           
      .               // For small tables we require at least 1 empty bucket so that lookups are
      .               // guaranteed to terminate if an element doesn't exist in the table.
  2,814 ( 0.00%)      if cap < 8 {
      .                   // We don't bother with a table size of 2 buckets since that can only
      .                   // hold a single element. Instead we skip directly to a 4 bucket table
      .                   // which can hold 3 elements.
  5,150 ( 0.00%)          return Some(if cap < 4 { 4 } else { 8 });
      .               }
      .           
      .               // Otherwise require 1/8 buckets to be empty (87.5% load)
      .               //
      .               // Be careful when modifying this, calculate_layout relies on the
      .               // overflow check here.
  2,262 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
      .           
      .               // Any overflows will have been caught by the checked_mul. Also, any
      .               // rounding errors from the division above will be cleaned up by
      .               // next_power_of_two (which can't overflow because of the previous divison).
      .               Some(adjusted_cap.next_power_of_two())
      .           }
      .           
      .           /// Returns the maximum effective capacity for the given bucket mask, taking
      .           /// the maximum load factor into account.
      .           #[inline]
      .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
 10,611 ( 0.00%)      if bucket_mask < 8 {
      .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
      .                   // Keep in mind that the bucket mask is one less than the bucket count.
      .                   bucket_mask
      .               } else {
      .                   // For larger tables we reserve 12.5% of the slots as empty.
  1,698 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
      .               }
      .           }
      .           
      .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
      .           /// while keeping the rest of `calculate_layout_for` independent of `T`
      .           #[derive(Copy, Clone)]
      .           struct TableLayout {
      .               size: usize,
-- line 236 ----------------------------------------
-- line 249 ----------------------------------------
      .           
      .               #[inline]
      .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
      .                   debug_assert!(buckets.is_power_of_two());
      .           
      .                   let TableLayout { size, ctrl_align } = self;
      .                   // Manual layout calculation since Layout methods are not yet stable.
      .                   let ctrl_offset =
  6,525 ( 0.00%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
  7,932 ( 0.00%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
      .           
      .                   Some((
      .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
      .                       ctrl_offset,
      .                   ))
      .               }
      .           }
      .           
-- line 266 ----------------------------------------
-- line 460 ----------------------------------------
      .               /// Attempts to allocate a new hash table with at least enough capacity
      .               /// for inserting the given number of elements without reallocating.
      .               fn fallible_with_capacity(
      .                   alloc: A,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<Self, TryReserveError> {
      .                   Ok(Self {
      6 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
      .                           alloc,
      .                           TableLayout::new::<T>(),
      .                           capacity,
      .                           fallibility,
      .                       )?,
      .                       marker: PhantomData,
      .                   })
      .               }
-- line 476 ----------------------------------------
-- line 636 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           
      .               /// Ensures that at least `additional` items can be inserted into the table
      .               /// without reallocation.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
    175 ( 0.00%)          if additional > self.table.growth_left {
      .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
  7,306 ( 0.00%)              if self
      .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
      .                           .is_err()
      .                       {
      .                           unsafe { hint::unreachable_unchecked() }
      .                       }
      .                   }
      .               }
      .           
-- line 654 ----------------------------------------
-- line 665 ----------------------------------------
      .                   } else {
      .                       Ok(())
      .                   }
      .               }
      .           
      .               /// Out-of-line slow path for `reserve` and `try_reserve`.
      .               #[cold]
      .               #[inline(never)]
 11,503 ( 0.00%)      fn reserve_rehash(
      .                   &mut self,
      .                   additional: usize,
      .                   hasher: impl Fn(&T) -> u64,
      .                   fallibility: Fallibility,
      .               ) -> Result<(), TryReserveError> {
      .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
  2,812 ( 0.00%)          let new_items = match self.table.items.checked_add(additional) {
      .                       Some(new_items) => new_items,
      .                       None => return Err(fallibility.capacity_overflow()),
      .                   };
  2,812 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.table.bucket_mask);
  5,624 ( 0.00%)          if new_items <= full_capacity / 2 {
      .                       // Rehash in-place without re-allocating if we have plenty of spare
      .                       // capacity that is locked up due to DELETED entries.
      .                       self.rehash_in_place(hasher);
      .                       Ok(())
      .                   } else {
      .                       // Otherwise, conservatively resize to at least the next size up
      .                       // to avoid churning deletes into frequent rehashes.
      .                       self.resize(
  1,406 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
      .                           hasher,
      .                           fallibility,
      .                       )
      .                   }
 12,654 ( 0.00%)      }
      .           
      .               /// Rehashes the contents of the table in place (i.e. without changing the
      .               /// allocation).
      .               ///
      .               /// If `hasher` panics then some the table's contents may be lost.
      .               fn rehash_in_place(&mut self, hasher: impl Fn(&T) -> u64) {
      .                   unsafe {
      .                       // If the hash function panics then properly clean up any elements
-- line 707 ----------------------------------------
-- line 780 ----------------------------------------
      .               fn resize(
      .                   &mut self,
      .                   capacity: usize,
      .                   hasher: impl Fn(&T) -> u64,
      .                   fallibility: Fallibility,
      .               ) -> Result<(), TryReserveError> {
      .                   unsafe {
      .                       let mut new_table =
 11,114 ( 0.00%)                  self.table
      .                               .prepare_resize(TableLayout::new::<T>(), capacity, fallibility)?;
      .           
      .                       // Copy all elements to the new table.
      .                       for item in self.iter() {
      .                           // This may panic.
 84,784 ( 0.02%)                  let hash = hasher(item.as_ref());
      .           
      .                           // We can use a simpler version of insert() here since:
      .                           // - there are no DELETED entries.
      .                           // - we know there is enough space in the table.
      .                           // - all elements are unique.
      .                           let (index, _) = new_table.prepare_insert_slot(hash);
 84,784 ( 0.02%)                  new_table.bucket(index).copy_from_nonoverlapping(&item);
      .                       }
      .           
      .                       // We successfully copied all elements without panicking. Now replace
      .                       // self with the new table. The old table will have its memory freed but
      .                       // the items will not be dropped (since they have been moved into the
      .                       // new table).
      .                       mem::swap(&mut self.table, &mut new_table);
      .           
  1,406 ( 0.00%)              Ok(())
      .                   }
      .               }
      .           
      .               /// Inserts a new element into the table, and returns its raw bucket.
      .               ///
      .               /// This does not check if the given element already exists in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
      .                   unsafe {
      .                       let mut index = self.table.find_insert_slot(hash);
      .           
      .                       // We can avoid growing the table once we have reached our load
      .                       // factor if we are replacing a tombstone. This works since the
      .                       // number of EMPTY slots does not change in this case.
    106 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
245,186 ( 0.04%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
      .                           self.reserve(1, hasher);
      .                           index = self.table.find_insert_slot(hash);
      .                       }
      .           
      .                       self.table.record_item_insert_at(index, old_ctrl, hash);
      .           
 61,313 ( 0.01%)              let bucket = self.bucket(index);
      .                       bucket.write(value);
      .                       bucket
      .                   }
      .               }
      .           
      .               /// Attempts to insert a new element without growing the table and return its raw bucket.
      .               ///
      .               /// Returns an `Err` containing the given element if inserting it would require growing the
-- line 841 ----------------------------------------
-- line 911 ----------------------------------------
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
      .               /// Searches for an element in the table.
      .               #[inline]
 15,594 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
      .                   unsafe {
601,217 ( 0.11%)              for bucket in self.iter_hash(hash) {
      .                           let elm = bucket.as_ref();
 55,669 ( 0.01%)                  if likely(eq(elm)) {
      .                               return Some(bucket);
      .                           }
      .                       }
      .                       None
      .                   }
 20,792 ( 0.00%)      }
      .           
      .               /// Gets a reference to an element in the table.
      .               #[inline]
      .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
      .                   // Avoid `Option::map` because it bloats LLVM IR.
  3,956 ( 0.00%)          match self.find(hash, eq) {
      .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Gets a mutable reference to an element in the table.
      .               #[inline]
      .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
-- line 943 ----------------------------------------
-- line 1007 ----------------------------------------
      .               }
      .           
      .               /// Returns the number of elements the map can hold without reallocating.
      .               ///
      .               /// This number is a lower bound; the table might be able to hold
      .               /// more, but is guaranteed to be able to hold at least this many.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn capacity(&self) -> usize {
  2,840 ( 0.00%)          self.table.items + self.table.growth_left
      .               }
      .           
      .               /// Returns the number of elements in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn len(&self) -> usize {
      .                   self.table.items
      .               }
      .           
      .               /// Returns the number of buckets in the table.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn buckets(&self) -> usize {
     44 ( 0.00%)          self.table.bucket_mask + 1
      .               }
      .           
      .               /// Returns an iterator over every element in the table. It is up to
      .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
      .               /// Because we cannot make the `next` method unsafe on the `RawIter`
      .               /// struct, we have to make the `iter` method unsafe.
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub unsafe fn iter(&self) -> RawIter<T> {
  1,406 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
      .                   RawIter {
      .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
      .                       items: self.table.items,
      .                   }
      .               }
      .           
      .               /// Returns an iterator over occupied buckets that could match a given hash.
      .               ///
-- line 1044 ----------------------------------------
-- line 1122 ----------------------------------------
      .           }
      .           
      .           unsafe impl<T, A: Allocator + Clone> Send for RawTable<T, A> where T: Send {}
      .           unsafe impl<T, A: Allocator + Clone> Sync for RawTable<T, A> where T: Sync {}
      .           
      .           impl<A> RawTableInner<A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               const fn new_in(alloc: A) -> Self {
  6,189 ( 0.00%)          Self {
      .                       // Be careful to cast the entire slice to a raw pointer.
  3,370 ( 0.00%)              ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
      .                       bucket_mask: 0,
      .                       items: 0,
      .                       growth_left: 0,
      .                       alloc,
      .                   }
      .               }
      .           }
      .           
-- line 1140 ----------------------------------------
-- line 1149 ----------------------------------------
      .                   debug_assert!(buckets.is_power_of_two());
      .           
      .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
      .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(buckets) {
      .                       Some(lco) => lco,
      .                       None => return Err(fallibility.capacity_overflow()),
      .                   };
      .           
  2,814 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
      .                       Ok(block) => block.cast(),
      .                       Err(_) => return Err(fallibility.alloc_err(layout)),
      .                   };
      .           
      .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
      .                   Ok(Self {
      .                       ctrl,
  1,661 ( 0.00%)              bucket_mask: buckets - 1,
      .                       items: 0,
      .                       growth_left: bucket_mask_to_capacity(buckets - 1),
      .                       alloc,
      .                   })
      .               }
      .           
      .               #[inline]
  8,754 ( 0.00%)      fn fallible_with_capacity(
      .                   alloc: A,
      .                   table_layout: TableLayout,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<Self, TryReserveError> {
    226 ( 0.00%)          if capacity == 0 {
      .                       Ok(Self::new_in(alloc))
      .                   } else {
      .                       unsafe {
      .                           let buckets =
      .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
      .           
      .                           let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
      .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
      .           
  5,275 ( 0.00%)                  Ok(result)
      .                       }
      .                   }
  7,184 ( 0.00%)      }
      .           
      .               /// Searches for an empty or deleted bucket which is suitable for inserting
      .               /// a new element and sets the hash for that slot.
      .               ///
      .               /// There must be at least 1 empty bucket in the table.
      .               #[inline]
      .               unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
      .                   let index = self.find_insert_slot(hash);
-- line 1200 ----------------------------------------
-- line 1208 ----------------------------------------
      .               ///
      .               /// There must be at least 1 empty bucket in the table.
      .               #[inline]
      .               fn find_insert_slot(&self, hash: u64) -> usize {
      .                   let mut probe_seq = self.probe_seq(hash);
      .                   loop {
      .                       unsafe {
      .                           let group = Group::load(self.ctrl(probe_seq.pos));
152,552 ( 0.03%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
442,377 ( 0.08%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
      .           
      .                               // In tables smaller than the group width, trailing control
      .                               // bytes outside the range of the table are filled with
      .                               // EMPTY entries. These will unfortunately trigger a
      .                               // match, but once masked may point to a full bucket that
      .                               // is already occupied. We detect this situation here and
      .                               // perform a second scan starting at the begining of the
      .                               // table. This second scan is guaranteed to find an empty
      .                               // slot (due to the load factor) before hitting the trailing
      .                               // control bytes (containing EMPTY).
208,772 ( 0.04%)                      if unlikely(is_full(*self.ctrl(result))) {
      .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
      .                                   debug_assert_ne!(probe_seq.pos, 0);
      .                                   return Group::load_aligned(self.ctrl(0))
      .                                       .match_empty_or_deleted()
      .                                       .lowest_set_bit_nonzero();
      .                               }
      .           
      .                               return result;
-- line 1236 ----------------------------------------
-- line 1278 ----------------------------------------
      .               /// Returns an iterator-like object for a probe sequence on the table.
      .               ///
      .               /// This iterator never terminates, but is guaranteed to visit each bucket
      .               /// group exactly once. The loop using `probe_seq` must terminate upon
      .               /// reaching a group containing an empty bucket.
      .               #[inline]
      .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
      .                   ProbeSeq {
837,308 ( 0.15%)              pos: h1(hash) & self.bucket_mask,
      .                       stride: 0,
      .                   }
      .               }
      .           
      .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
      .               /// in the table, otherwise returns error
      .               #[cfg(feature = "raw")]
      .               #[inline]
-- line 1294 ----------------------------------------
-- line 1300 ----------------------------------------
      .                   } else {
      .                       self.record_item_insert_at(index, old_ctrl, hash);
      .                       Ok(index)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
306,565 ( 0.05%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
      .                   self.set_ctrl_h2(index, hash);
245,252 ( 0.04%)          self.items += 1;
      .               }
      .           
      .               #[inline]
      .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
      .                   let probe_seq_pos = self.probe_seq(hash).pos;
      .                   let probe_index =
      .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
      .                   probe_index(i) == probe_index(new_i)
-- line 1318 ----------------------------------------
-- line 1349 ----------------------------------------
      .                   // replicate the buckets at the end of the trailing group. For example
      .                   // with 2 buckets and a group size of 4, the control bytes will look
      .                   // like this:
      .                   //
      .                   //     Real    |             Replicated
      .                   // ---------------------------------------------
      .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
      .                   // ---------------------------------------------
438,291 ( 0.08%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
      .           
146,097 ( 0.03%)          *self.ctrl(index) = ctrl;
146,097 ( 0.03%)          *self.ctrl(index2) = ctrl;
      .               }
      .           
      .               /// Returns a pointer to a control byte.
      .               #[inline]
      .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
      .                   debug_assert!(index < self.num_ctrl_bytes());
      .                   self.ctrl.as_ptr().add(index)
      .               }
      .           
      .               #[inline]
      .               fn buckets(&self) -> usize {
  2,814 ( 0.00%)          self.bucket_mask + 1
      .               }
      .           
      .               #[inline]
      .               fn num_ctrl_bytes(&self) -> usize {
      .                   self.bucket_mask + 1 + Group::WIDTH
      .               }
      .           
      .               #[inline]
      .               fn is_empty_singleton(&self) -> bool {
  9,290 ( 0.00%)          self.bucket_mask == 0
      .               }
      .           
      .               #[allow(clippy::mut_mut)]
      .               #[inline]
  2,794 ( 0.00%)      unsafe fn prepare_resize(
      .                   &self,
      .                   table_layout: TableLayout,
      .                   capacity: usize,
      .                   fallibility: Fallibility,
      .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
      .                   debug_assert!(self.items <= capacity);
      .           
      .                   // Allocate and initialize the new table.
  4,485 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
      .                       self.alloc.clone(),
      .                       table_layout,
      .                       capacity,
      .                       fallibility,
      .                   )?;
  2,812 ( 0.00%)          new_table.growth_left -= self.items;
      .                   new_table.items = self.items;
      .           
      .                   // The hash function may panic, in which case we simply free the new
      .                   // table without dropping any elements that may have been copied into
      .                   // it.
      .                   //
      .                   // This guard is also used to free the old table on success, see
      .                   // the comment at the bottom of this function.
  2,032 ( 0.00%)          Ok(guard(new_table, move |self_| {
  1,406 ( 0.00%)              if !self_.is_empty_singleton() {
      .                           self_.free_buckets(table_layout);
      .                       }
      .                   }))
  2,032 ( 0.00%)      }
      .           
      .               #[inline]
      .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
      .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
      .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
      .                       Some(lco) => lco,
      .                       None => hint::unreachable_unchecked(),
      .                   };
      .                   self.alloc.deallocate(
    491 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
      .                       layout,
      .                   );
      .               }
      .           
      .               /// Marks all table buckets as empty without dropping their contents.
      .               #[inline]
      .               fn clear_no_drop(&mut self) {
      .                   if !self.is_empty_singleton() {
-- line 1434 ----------------------------------------
-- line 1667 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           }
      .           #[cfg(not(feature = "nightly"))]
      .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn drop(&mut self) {
  3,381 ( 0.00%)          if !self.table.is_empty_singleton() {
      .                       unsafe {
      .                           self.drop_elements();
      .                           self.free_buckets();
      .                       }
      .                   }
      .               }
      .           }
      .           
-- line 1683 ----------------------------------------
-- line 1798 ----------------------------------------
      .           
      .           impl<T> Iterator for RawIterRange<T> {
      .               type Item = Bucket<T>;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<Bucket<T>> {
      .                   unsafe {
      .                       loop {
  7,926 ( 0.00%)                  if let Some(index) = self.current_group.lowest_set_bit() {
      .                               self.current_group = self.current_group.remove_lowest_bit();
      .                               return Some(self.data.next_n(index));
      .                           }
      .           
 14,158 ( 0.00%)                  if self.next_ctrl >= self.end {
      .                               return None;
      .                           }
      .           
      .                           // We might read past self.end up to the next group boundary,
      .                           // but this is fine because it only occurs on tables smaller
      .                           // than the group size where the trailing control bytes are all
      .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
      .                           // to the group size (since tables are power-of-two sized).
-- line 1819 ----------------------------------------
-- line 1990 ----------------------------------------
      .           }
      .           
      .           impl<T> Iterator for RawIter<T> {
      .               type Item = Bucket<T>;
      .           
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn next(&mut self) -> Option<Bucket<T>> {
      .                   if let Some(b) = self.iter.next() {
169,568 ( 0.03%)              self.items -= 1;
      .                       Some(b)
      .                   } else {
      .                       // We don't check against items == 0 here to allow the
      .                       // compiler to optimize away the item count entirely if the
      .                       // iterator length is never queried.
      .                       debug_assert_eq!(self.items, 0);
      .                       None
      .                   }
-- line 2006 ----------------------------------------
-- line 2178 ----------------------------------------
      .               }
      .           }
      .           impl<'a, A: Allocator + Clone> RawIterHashInner<'a, A> {
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               fn new(table: &'a RawTableInner<A>, hash: u64) -> Self {
      .                   unsafe {
      .                       let h2_hash = h2(hash);
      .                       let probe_seq = table.probe_seq(hash);
 81,954 ( 0.01%)              let group = Group::load(table.ctrl(probe_seq.pos));
      .                       let bitmask = group.match_byte(h2_hash).into_iter();
      .           
      .                       RawIterHashInner {
      .                           table,
      .                           h2_hash,
      .                           probe_seq,
      .                           group,
      .                           bitmask,
-- line 2194 ----------------------------------------
-- line 2195 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, T, A: Allocator + Clone> Iterator for RawIterHash<'a, T, A> {
      .               type Item = Bucket<T>;
      .           
  2,648 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
      .                   unsafe {
      .                       match self.inner.next() {
  1,324 ( 0.00%)                  Some(index) => Some(self.inner.table.bucket(index)),
      .                           None => None,
      .                       }
      .                   }
  2,648 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, A: Allocator + Clone> Iterator for RawIterHashInner<'a, A> {
      .               type Item = usize;
      .           
      .               fn next(&mut self) -> Option<Self::Item> {
      .                   unsafe {
      .                       loop {
      .                           if let Some(bit) = self.bitmask.next() {
 76,460 ( 0.01%)                      let index = (self.probe_seq.pos + bit) & self.table.bucket_mask;
      .                               return Some(index);
      .                           }
 67,020 ( 0.01%)                  if likely(self.group.match_empty().any_bit_set()) {
      .                               return None;
      .                           }
      .                           self.probe_seq.move_next(self.table.bucket_mask);
      .                           self.group = Group::load(self.table.ctrl(self.probe_seq.pos));
 15,687 ( 0.00%)                  self.bitmask = self.group.match_byte(self.h2_hash).into_iter();
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           #[cfg(test)]
      .           mod test_map {
      .               use super::*;
-- line 2236 ----------------------------------------

613,446 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map.rs
--------------------------------------------------------------------------------
Ir               

-- line 160 ----------------------------------------
      .           
      .           impl<K, V, S> IndexMap<K, V, S> {
      .               /// Create a new map with capacity for `n` key-value pairs. (Does not
      .               /// allocate if `n` is zero.)
      .               ///
      .               /// Computes in **O(n)** time.
      .               #[inline]
      .               pub fn with_capacity_and_hasher(n: usize, hash_builder: S) -> Self {
      3 ( 0.00%)          if n == 0 {
      .                       Self::with_hasher(hash_builder)
      .                   } else {
      5 ( 0.00%)              IndexMap {
      .                           core: IndexMapCore::with_capacity(n),
      .                           hash_builder,
      .                       }
      .                   }
      .               }
      .           
      .               /// Create a new map with `hash_builder`.
      .               ///
      .               /// This function is `const`, so it
      .               /// can be called in `static` contexts.
      .               pub const fn with_hasher(hash_builder: S) -> Self {
  2,122 ( 0.00%)          IndexMap {
      .                       core: IndexMapCore::new(),
      .                       hash_builder,
      .                   }
      .               }
      .           
      .               /// Computes in **O(1)** time.
      .               pub fn capacity(&self) -> usize {
      .                   self.core.capacity()
-- line 191 ----------------------------------------
-- line 204 ----------------------------------------
      .                   self.core.len()
      .               }
      .           
      .               /// Returns true if the map contains no elements.
      .               ///
      .               /// Computes in **O(1)** time.
      .               #[inline]
      .               pub fn is_empty(&self) -> bool {
  4,556 ( 0.00%)          self.len() == 0
      .               }
      .           
      .               /// Return an iterator over the key-value pairs of the map, in their order
      .               pub fn iter(&self) -> Iter<'_, K, V> {
      .                   Iter {
      .                       iter: self.as_entries().iter(),
      .                   }
      .               }
-- line 220 ----------------------------------------
-- line 289 ----------------------------------------
      .               ///
      .               /// ***Panics*** if the starting point is greater than the end point or if
      .               /// the end point is greater than the length of the map.
      .               pub fn drain<R>(&mut self, range: R) -> Drain<'_, K, V>
      .               where
      .                   R: RangeBounds<usize>,
      .               {
      .                   Drain {
     11 ( 0.00%)              iter: self.core.drain(range),
      .                   }
      .               }
      .           
      .               /// Splits the collection into two at the given index.
      .               ///
      .               /// Returns a newly allocated map containing the elements in the range
      .               /// `[at, len)`. After the call, the original map will be left containing
      .               /// the elements `[0, at)` with its previous capacity unchanged.
-- line 305 ----------------------------------------
-- line 331 ----------------------------------------
      .               /// Shrink the capacity of the map as much as possible.
      .               ///
      .               /// Computes in **O(n)** time.
      .               pub fn shrink_to_fit(&mut self) {
      .                   self.core.shrink_to_fit();
      .               }
      .           
      .               fn hash<Q: ?Sized + Hash>(&self, key: &Q) -> HashValue {
 15,730 ( 0.00%)          let mut h = self.hash_builder.build_hasher();
  6,341 ( 0.00%)          key.hash(&mut h);
  5,256 ( 0.00%)          HashValue(h.finish() as usize)
      .               }
      .           
      .               /// Insert a key-value pair in the map.
      .               ///
      .               /// If an equivalent key already exists in the map: the key remains and
      .               /// retains in its place in the order, its corresponding value is updated
      .               /// with `value` and the older value is returned inside `Some(_)`.
      .               ///
-- line 349 ----------------------------------------
-- line 350 ----------------------------------------
      .               /// If no equivalent key existed in the map: the new key-value pair is
      .               /// inserted, last in order, and `None` is returned.
      .               ///
      .               /// Computes in **O(1)** time (amortized average).
      .               ///
      .               /// See also [`entry`](#method.entry) if you you want to insert *or* modify
      .               /// or if you need to get the index of the corresponding key-value pair.
      .               pub fn insert(&mut self, key: K, value: V) -> Option<V> {
    245 ( 0.00%)          self.insert_full(key, value).1
      .               }
      .           
      .               /// Insert a key-value pair in the map, and get their index.
      .               ///
      .               /// If an equivalent key already exists in the map: the key remains and
      .               /// retains in its place in the order, its corresponding value is updated
      .               /// with `value` and the older value is returned inside `(index, Some(_))`.
      .               ///
-- line 366 ----------------------------------------
-- line 368 ----------------------------------------
      .               /// inserted, last in order, and `(index, None)` is returned.
      .               ///
      .               /// Computes in **O(1)** time (amortized average).
      .               ///
      .               /// See also [`entry`](#method.entry) if you you want to insert *or* modify
      .               /// or if you need to get the index of the corresponding key-value pair.
      .               pub fn insert_full(&mut self, key: K, value: V) -> (usize, Option<V>) {
      .                   let hash = self.hash(&key);
  4,391 ( 0.00%)          self.core.insert_full(hash, key, value)
      .               }
      .           
      .               /// Get the given key’s corresponding entry in the map for insertion and/or
      .               /// in-place manipulation.
      .               ///
      .               /// Computes in **O(1)** time (amortized average).
      .               pub fn entry(&mut self, key: K) -> Entry<'_, K, V> {
      .                   let hash = self.hash(&key);
686,736 ( 0.12%)          self.core.entry(hash, key)
      .               }
      .           
      .               /// Return `true` if an equivalent to `key` exists in the map.
      .               ///
      .               /// Computes in **O(1)** time (average).
      .               pub fn contains_key<Q: ?Sized>(&self, key: &Q) -> bool
      .               where
      .                   Q: Hash + Equivalent<K>,
-- line 393 ----------------------------------------
-- line 398 ----------------------------------------
      .               /// Return a reference to the value stored for `key`, if it is present,
      .               /// else `None`.
      .               ///
      .               /// Computes in **O(1)** time (average).
      .               pub fn get<Q: ?Sized>(&self, key: &Q) -> Option<&V>
      .               where
      .                   Q: Hash + Equivalent<K>,
      .               {
    366 ( 0.00%)          if let Some(i) = self.get_index_of(key) {
  1,398 ( 0.00%)              let entry = &self.as_entries()[i];
  1,678 ( 0.00%)              Some(&entry.value)
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
      .               /// Return references to the key-value pair stored for `key`,
      .               /// if it is present, else `None`.
      .               ///
-- line 416 ----------------------------------------
-- line 438 ----------------------------------------
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
      .               /// Return item index, if it exists in the map
      .               ///
      .               /// Computes in **O(1)** time (average).
 10,122 ( 0.00%)      pub fn get_index_of<Q: ?Sized>(&self, key: &Q) -> Option<usize>
      .               where
      .                   Q: Hash + Equivalent<K>,
      .               {
  4,276 ( 0.00%)          if self.is_empty() {
      .                       None
      .                   } else {
  1,905 ( 0.00%)              let hash = self.hash(key);
    985 ( 0.00%)              self.core.get_index_of(hash, key)
      .                   }
 11,568 ( 0.00%)      }
      .           
      .               pub fn get_mut<Q: ?Sized>(&mut self, key: &Q) -> Option<&mut V>
      .               where
      .                   Q: Hash + Equivalent<K>,
      .               {
      2 ( 0.00%)          if let Some(i) = self.get_index_of(key) {
      2 ( 0.00%)              let entry = &mut self.as_entries_mut()[i];
      3 ( 0.00%)              Some(&mut entry.value)
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
      .               pub fn get_full_mut<Q: ?Sized>(&mut self, key: &Q) -> Option<(usize, &K, &mut V)>
      .               where
      .                   Q: Hash + Equivalent<K>,
-- line 472 ----------------------------------------
-- line 1377 ----------------------------------------
      .               K: Hash + Eq,
      .               S: BuildHasher + Default,
      .           {
      .               /// Create an `IndexMap` from the sequence of key-value pairs in the
      .               /// iterable.
      .               ///
      .               /// `from_iter` uses the same logic as `extend`. See
      .               /// [`extend`](#method.extend) for more details.
    990 ( 0.00%)      fn from_iter<I: IntoIterator<Item = (K, V)>>(iterable: I) -> Self {
    220 ( 0.00%)          let iter = iterable.into_iter();
      .                   let (low, _) = iter.size_hint();
      .                   let mut map = Self::with_capacity_and_hasher(low, <_>::default());
      .                   map.extend(iter);
      .                   map
    880 ( 0.00%)      }
      .           }
      .           
      .           #[cfg(all(has_std, rustc_1_51))]
      .           impl<K, V, const N: usize> From<[(K, V); N]> for IndexMap<K, V, RandomState>
      .           where
      .               K: Hash + Eq,
      .           {
      .               /// # Examples
-- line 1399 ----------------------------------------
-- line 1419 ----------------------------------------
      .               ///
      .               /// This is equivalent to calling [`insert`](#method.insert) for each of
      .               /// them in order, which means that for keys that already existed
      .               /// in the map, their value is updated but it keeps the existing order.
      .               ///
      .               /// New keys are inserted in the order they appear in the sequence. If
      .               /// equivalents of a key occur more than once, the last corresponding value
      .               /// prevails.
    522 ( 0.00%)      fn extend<I: IntoIterator<Item = (K, V)>>(&mut self, iterable: I) {
      .                   // (Note: this is a copy of `std`/`hashbrown`'s reservation logic.)
      .                   // Keys may be already present or show multiple times in the iterator.
      .                   // Reserve the entire hint lower bound if the map is empty.
      .                   // Otherwise reserve half the hint (rounded up), so the map
      .                   // will only resize twice in the worst case.
    734 ( 0.00%)          let iter = iterable.into_iter();
    119 ( 0.00%)          let reserve = if self.is_empty() {
      .                       iter.size_hint().0
      .                   } else {
     36 ( 0.00%)              (iter.size_hint().0 + 1) / 2
      .                   };
      .                   self.reserve(reserve);
      .                   iter.for_each(move |(k, v)| {
    126 ( 0.00%)              self.insert(k, v);
      .                   });
    463 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, K, V, S> Extend<(&'a K, &'a V)> for IndexMap<K, V, S>
      .           where
      .               K: Hash + Eq + Copy,
      .               V: Copy,
      .               S: BuildHasher,
      .           {
-- line 1451 ----------------------------------------

 60,763 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/macros.rs
--------------------------------------------------------------------------------
Ir               

-- line 84 ----------------------------------------
      .               }
      .               let sub_ns = |kind| match kind {
      .                   MacroKind::Bang => SubNS::Bang,
      .                   MacroKind::Attr | MacroKind::Derive => SubNS::AttrLike,
      .               };
      .               let candidate = candidate.map(sub_ns);
      .               let requirement = requirement.map(sub_ns);
      .               // "No specific sub-namespace" means "matches anything" for both requirements and candidates.
  1,617 ( 0.00%)      candidate.is_none() || requirement.is_none() || candidate == requirement
      .           }
      .           
      .           // We don't want to format a path using pretty-printing,
      .           // `format!("{}", path)`, because that tries to insert
      .           // line-breaks and is slow.
    664 ( 0.00%)  fn fast_print_path(path: &ast::Path) -> Symbol {
    249 ( 0.00%)      if path.segments.len() == 1 {
    166 ( 0.00%)          path.segments[0].ident.name
      .               } else {
      .                   let mut path_str = String::with_capacity(64);
      .                   for (i, segment) in path.segments.iter().enumerate() {
      .                       if i != 0 {
      .                           path_str.push_str("::");
      .                       }
      .                       if segment.ident.name != kw::PathRoot {
      .                           path_str.push_str(segment.ident.as_str())
      .                       }
      .                   }
      .                   Symbol::intern(&path_str)
      .               }
    747 ( 0.00%)  }
      .           
      .           /// The code common between processing `#![register_tool]` and `#![register_attr]`.
     22 ( 0.00%)  fn registered_idents(
      .               sess: &Session,
      .               attrs: &[ast::Attribute],
      .               attr_name: Symbol,
      .               descr: &str,
      .           ) -> FxHashSet<Ident> {
      .               let mut registered = FxHashSet::default();
      2 ( 0.00%)      for attr in sess.filter_by_name(attrs, attr_name) {
      .                   for nested_meta in attr.meta_item_list().unwrap_or_default() {
      .                       match nested_meta.ident() {
      .                           Some(ident) => {
      .                               if let Some(old_ident) = registered.replace(ident) {
      .                                   let msg = format!("{} `{}` was already registered", descr, ident);
      .                                   sess.struct_span_err(ident.span, &msg)
      .                                       .span_label(old_ident.span, "already registered here")
      .                                       .emit();
-- line 131 ----------------------------------------
-- line 135 ----------------------------------------
      .                               let msg = format!("`{}` only accepts identifiers", attr_name);
      .                               let span = nested_meta.span();
      .                               sess.struct_span_err(span, &msg).span_label(span, "not an identifier").emit();
      .                           }
      .                       }
      .                   }
      .               }
      .               registered
     16 ( 0.00%)  }
      .           
      9 ( 0.00%)  crate fn registered_attrs_and_tools(
      .               sess: &Session,
      .               attrs: &[ast::Attribute],
      .           ) -> (FxHashSet<Ident>, FxHashSet<Ident>) {
      5 ( 0.00%)      let registered_attrs = registered_idents(sess, attrs, sym::register_attr, "attribute");
      8 ( 0.00%)      let mut registered_tools = registered_idents(sess, attrs, sym::register_tool, "tool");
      .               // We implicitly add `rustfmt` and `clippy` to known tools,
      .               // but it's not an error to register them explicitly.
      .               let predefined_tools = [sym::clippy, sym::rustfmt];
      .               registered_tools.extend(predefined_tools.iter().cloned().map(Ident::with_dummy_span));
      8 ( 0.00%)      (registered_attrs, registered_tools)
      7 ( 0.00%)  }
      .           
      .           // Some feature gates for inner attributes are reported as lints for backward compatibility.
      .           fn soft_custom_inner_attributes_gate(path: &ast::Path, invoc: &Invocation) -> bool {
      .               match &path.segments[..] {
      .                   // `#![test]`
    415 ( 0.00%)          [seg] if seg.ident.name == sym::test => return true,
      .                   // `#![rustfmt::skip]` on out-of-line modules
      .                   [seg1, seg2] if seg1.ident.name == sym::rustfmt && seg2.ident.name == sym::skip => {
      .                       if let InvocationKind::Attr { item, .. } = &invoc.kind {
      .                           if let Annotatable::Item(item) = item {
      .                               if let ItemKind::Mod(_, ModKind::Loaded(_, Inline::No, _)) = item.kind {
      .                                   return true;
      .                               }
      .                           }
-- line 170 ----------------------------------------
-- line 171 ----------------------------------------
      .                       }
      .                   }
      .                   _ => {}
      .               }
      .               false
      .           }
      .           
      .           impl<'a> ResolverExpand for Resolver<'a> {
  7,217 ( 0.00%)      fn next_node_id(&mut self) -> NodeId {
      .                   self.next_node_id()
 14,434 ( 0.00%)      }
      .           
      .               fn invocation_parent(&self, id: LocalExpnId) -> LocalDefId {
      .                   self.invocation_parents[&id].0
      .               }
      .           
      .               fn resolve_dollar_crates(&mut self) {
     84 ( 0.00%)          hygiene::update_dollar_crate_names(|ctxt| {
      .                       let ident = Ident::new(kw::DollarCrate, DUMMY_SP.with_ctxt(ctxt));
    963 ( 0.00%)              match self.resolve_crate_root(ident).kind {
      .                           ModuleKind::Def(.., name) if name != kw::Empty => name,
      .                           _ => kw::Crate,
      .                       }
      .                   });
      .               }
      .           
    672 ( 0.00%)      fn visit_ast_fragment_with_placeholders(
      .                   &mut self,
      .                   expansion: LocalExpnId,
      .                   fragment: &AstFragment,
      .               ) {
      .                   // Integrate the new AST fragment into all the definition and module structures.
      .                   // We are inside the `expansion` now, but other parent scope components are still the same.
    336 ( 0.00%)          let parent_scope = ParentScope { expansion, ..self.invocation_parent_scopes[&expansion] };
      .                   let output_macro_rules_scope = self.build_reduced_graph(fragment, parent_scope);
      .                   self.output_macro_rules_scopes.insert(expansion, output_macro_rules_scope);
      .           
      .                   parent_scope.module.unexpanded_invocations.borrow_mut().remove(&expansion);
    672 ( 0.00%)      }
      .           
    308 ( 0.00%)      fn register_builtin_macro(&mut self, name: Symbol, ext: SyntaxExtensionKind) {
    264 ( 0.00%)          if self.builtin_macros.insert(name, BuiltinMacroState::NotYetSeen(ext)).is_some() {
      .                       self.session
      .                           .diagnostic()
      .                           .bug(&format!("built-in macro `{}` was already registered", name));
      .                   }
    220 ( 0.00%)      }
      .           
      .               // Create a new Expansion with a definition site of the provided module, or
      .               // a fake empty `#[no_implicit_prelude]` module if no module is provided.
      9 ( 0.00%)      fn expansion_for_ast_pass(
      .                   &mut self,
      .                   call_site: Span,
      .                   pass: AstPass,
      .                   features: &[Symbol],
      .                   parent_module_id: Option<NodeId>,
      .               ) -> LocalExpnId {
      .                   let parent_module =
      .                       parent_module_id.map(|module_id| self.local_def_id(module_id).to_def_id());
      .                   let expn_id = LocalExpnId::fresh(
     11 ( 0.00%)              ExpnData::allow_unstable(
      .                           ExpnKind::AstPass(pass),
      .                           call_site,
      7 ( 0.00%)                  self.session.edition(),
      .                           features.into(),
      .                           None,
      .                           parent_module,
      .                       ),
      .                       self.create_stable_hashing_context(),
      .                   );
      .           
      .                   let parent_scope =
      .                       parent_module.map_or(self.empty_module, |def_id| self.expect_module(def_id));
      .                   self.ast_transform_scopes.insert(expn_id, parent_scope);
      .           
      .                   expn_id
      9 ( 0.00%)      }
      .           
      2 ( 0.00%)      fn resolve_imports(&mut self) {
      6 ( 0.00%)          ImportResolver { r: self }.resolve_imports()
      4 ( 0.00%)      }
      .           
    581 ( 0.00%)      fn resolve_macro_invocation(
      .                   &mut self,
      .                   invoc: &Invocation,
      .                   eager_expansion_root: LocalExpnId,
      .                   force: bool,
      .               ) -> Result<Lrc<SyntaxExtension>, Indeterminate> {
      .                   let invoc_id = invoc.expansion_data.id;
      .                   let parent_scope = match self.invocation_parent_scopes.get(&invoc_id) {
    249 ( 0.00%)              Some(parent_scope) => *parent_scope,
      .                       None => {
      .                           // If there's no entry in the table, then we are resolving an eagerly expanded
      .                           // macro, which should inherit its parent scope from its eager expansion root -
      .                           // the macro that requested this eager expansion.
      .                           let parent_scope = *self
      .                               .invocation_parent_scopes
      .                               .get(&eager_expansion_root)
      .                               .expect("non-eager expansion without a parent scope");
      .                           self.invocation_parent_scopes.insert(invoc_id, parent_scope);
      .                           parent_scope
      .                       }
      .                   };
      .           
    447 ( 0.00%)          let (path, kind, inner_attr, derives) = match invoc.kind {
      6 ( 0.00%)              InvocationKind::Attr { ref attr, ref derives, .. } => (
     12 ( 0.00%)                  &attr.get_normal_item().path,
      .                           MacroKind::Attr,
      .                           attr.style == ast::AttrStyle::Inner,
      6 ( 0.00%)                  self.arenas.alloc_ast_paths(derives),
      .                       ),
    603 ( 0.00%)              InvocationKind::Bang { ref mac, .. } => (&mac.path, MacroKind::Bang, false, &[][..]),
     80 ( 0.00%)              InvocationKind::Derive { ref path, .. } => (path, MacroKind::Derive, false, &[][..]),
      .                   };
      .           
      .                   // Derives are not included when `invocations` are collected, so we have to add them here.
    415 ( 0.00%)          let parent_scope = &ParentScope { derives, ..parent_scope };
    249 ( 0.00%)          let supports_macro_expansion = invoc.fragment_kind.supports_macro_expansion();
      .                   let node_id = invoc.expansion_data.lint_node_id;
     83 ( 0.00%)          let (ext, res) = self.smart_resolve_macro_path(
      .                       path,
      .                       kind,
      .                       supports_macro_expansion,
      .                       inner_attr,
      .                       parent_scope,
      .                       node_id,
      .                       force,
      .                       soft_custom_inner_attributes_gate(path, invoc),
      .                   )?;
      .           
    166 ( 0.00%)          let span = invoc.span();
      .                   let def_id = res.opt_def_id();
      .                   invoc_id.set_expn_data(
    830 ( 0.00%)              ext.expn_data(
    166 ( 0.00%)                  parent_scope.expansion,
      .                           span,
     83 ( 0.00%)                  fast_print_path(path),
      .                           def_id,
    415 ( 0.00%)                  def_id.map(|def_id| self.macro_def_scope(def_id).nearest_parent_mod()),
      .                       ),
      .                       self.create_stable_hashing_context(),
      .                   );
      .           
      .                   Ok(ext)
    664 ( 0.00%)      }
      .           
      7 ( 0.00%)      fn check_unused_macros(&mut self) {
      .                   for (_, &(node_id, ident)) in self.unused_macros.iter() {
      .                       self.lint_buffer.buffer_lint(
      .                           UNUSED_MACROS,
      .                           node_id,
      .                           ident.span,
      .                           &format!("unused macro definition: `{}`", ident.as_str()),
      .                       );
      .                   }
      8 ( 0.00%)      }
      .           
     20 ( 0.00%)      fn has_derive_copy(&self, expn_id: LocalExpnId) -> bool {
      .                   self.containers_deriving_copy.contains(&expn_id)
     20 ( 0.00%)      }
      .           
     66 ( 0.00%)      fn resolve_derives(
      .                   &mut self,
      .                   expn_id: LocalExpnId,
      .                   force: bool,
      .                   derive_paths: &dyn Fn() -> DeriveResolutions,
      .               ) -> Result<(), Indeterminate> {
      .                   // Block expansion of the container until we resolve all derives in it.
      .                   // This is required for two reasons:
      .                   // - Derive helper attributes are in scope for the item to which the `#[derive]`
      .                   //   is applied, so they have to be produced by the container's expansion rather
      .                   //   than by individual derives.
      .                   // - Derives in the container need to know whether one of them is a built-in `Copy`.
      .                   // Temporarily take the data to avoid borrow checker conflicts.
      .                   let mut derive_data = mem::take(&mut self.derive_data);
      .                   let entry = derive_data.entry(expn_id).or_insert_with(|| DeriveData {
     12 ( 0.00%)              resolutions: derive_paths(),
      .                       helper_attrs: Vec::new(),
      .                       has_derive_copy: false,
      .                   });
     42 ( 0.00%)          let parent_scope = self.invocation_parent_scopes[&expn_id];
      .                   for (i, (path, _, opt_ext)) in entry.resolutions.iter_mut().enumerate() {
     10 ( 0.00%)              if opt_ext.is_none() {
     10 ( 0.00%)                  *opt_ext = Some(
    150 ( 0.00%)                      match self.resolve_macro_path(
      .                                   &path,
      .                                   Some(MacroKind::Derive),
      .                                   &parent_scope,
      .                                   true,
      .                                   force,
      .                               ) {
     20 ( 0.00%)                          Ok((Some(ext), _)) => {
     10 ( 0.00%)                              if !ext.helper_attrs.is_empty() {
      .                                           let last_seg = path.segments.last().unwrap();
      4 ( 0.00%)                                  let span = last_seg.ident.span.normalize_to_macros_2_0();
      .                                           entry.helper_attrs.extend(
      .                                               ext.helper_attrs
      .                                                   .iter()
      .                                                   .map(|name| (i, Ident::new(*name, span))),
      .                                           );
      .                                       }
     60 ( 0.00%)                              entry.has_derive_copy |= ext.builtin_name == Some(sym::Copy);
      .                                       ext
      .                                   }
      .                                   Ok(_) | Err(Determinacy::Determined) => self.dummy_ext(MacroKind::Derive),
      .                                   Err(Determinacy::Undetermined) => {
      .                                       assert!(self.derive_data.is_empty());
      .                                       self.derive_data = derive_data;
      .                                       return Err(Indeterminate);
      .                                   }
      .                               },
     70 ( 0.00%)                  );
      .                       }
      .                   }
      .                   // Sort helpers in a stable way independent from the derive resolution order.
      .                   entry.helper_attrs.sort_by_key(|(i, _)| *i);
      .                   self.helper_attrs
      4 ( 0.00%)              .insert(expn_id, entry.helper_attrs.iter().map(|(_, ident)| *ident).collect());
      .                   // Mark this derive as having `Copy` either if it has `Copy` itself or if its parent derive
      .                   // has `Copy`, to support cases like `#[derive(Clone, Copy)] #[derive(Debug)]`.
     42 ( 0.00%)          if entry.has_derive_copy || self.has_derive_copy(parent_scope.expansion) {
      .                       self.containers_deriving_copy.insert(expn_id);
      .                   }
      6 ( 0.00%)          assert!(self.derive_data.is_empty());
     54 ( 0.00%)          self.derive_data = derive_data;
      .                   Ok(())
     48 ( 0.00%)      }
      .           
    332 ( 0.00%)      fn take_derive_resolutions(&mut self, expn_id: LocalExpnId) -> Option<DeriveResolutions> {
      .                   self.derive_data.remove(&expn_id).map(|data| data.resolutions)
    332 ( 0.00%)      }
      .           
      .               // The function that implements the resolution logic of `#[cfg_accessible(path)]`.
      .               // Returns true if the path can certainly be resolved in one of three namespaces,
      .               // returns false if the path certainly cannot be resolved in any of the three namespaces.
      .               // Returns `Indeterminate` if we cannot give a certain answer yet.
      .               fn cfg_accessible(
      .                   &mut self,
      .                   expn_id: LocalExpnId,
-- line 409 ----------------------------------------
-- line 444 ----------------------------------------
      .                   self.crate_loader.cstore().get_proc_macro_quoted_span_untracked(krate, id, self.session)
      .               }
      .           
      .               fn declare_proc_macro(&mut self, id: NodeId) {
      .                   self.proc_macros.push(id)
      .               }
      .           
      .               fn registered_tools(&self) -> &RegisteredTools {
      4 ( 0.00%)          &self.registered_tools
      4 ( 0.00%)      }
      .           }
      .           
      .           impl<'a> Resolver<'a> {
      .               /// Resolve macro path with error reporting and recovery.
      .               /// Uses dummy syntax extensions for unresolved macros or macros with unexpected resolutions
      .               /// for better error recovery.
      .               fn smart_resolve_macro_path(
      .                   &mut self,
-- line 461 ----------------------------------------
-- line 463 ----------------------------------------
      .                   kind: MacroKind,
      .                   supports_macro_expansion: SupportsMacroExpansion,
      .                   inner_attr: bool,
      .                   parent_scope: &ParentScope<'a>,
      .                   node_id: NodeId,
      .                   force: bool,
      .                   soft_custom_inner_attributes_gate: bool,
      .               ) -> Result<(Lrc<SyntaxExtension>, Res), Indeterminate> {
  1,992 ( 0.00%)          let (ext, res) = match self.resolve_macro_path(path, Some(kind), parent_scope, true, force)
      .                   {
    498 ( 0.00%)              Ok((Some(ext), res)) => (ext, res),
      .                       Ok((None, res)) => (self.dummy_ext(kind), res),
      .                       Err(Determinacy::Determined) => (self.dummy_ext(kind), Res::Err),
      .                       Err(Determinacy::Undetermined) => return Err(Indeterminate),
      .                   };
      .           
      .                   // Report errors for the resolved macro.
      .                   for segment in &path.segments {
    634 ( 0.00%)              if let Some(args) = &segment.args {
      .                           self.session.span_err(args.span(), "generic arguments in macro path");
      .                       }
    190 ( 0.00%)              if kind == MacroKind::Attr && segment.ident.as_str().starts_with("rustc") {
      .                           self.session.span_err(
      .                               segment.ident.span,
      .                               "attributes starting with `rustc` are reserved for use by the `rustc` compiler",
      .                           );
      .                       }
      .                   }
      .           
    913 ( 0.00%)          match res {
      .                       Res::Def(DefKind::Macro(_), def_id) => {
     83 ( 0.00%)                  if let Some(def_id) = def_id.as_local() {
      .                               self.unused_macros.remove(&def_id);
      .                               if self.proc_macro_stubs.contains(&def_id) {
      .                                   self.session.span_err(
      .                                       path.span,
      .                                       "can't use a procedural macro from the same crate that defines it",
      .                                   );
      .                               }
      .                           }
      .                       }
      .                       Res::NonMacroAttr(..) | Res::Err => {}
      .                       _ => panic!("expected `DefKind::Macro` or `Res::NonMacroAttr`"),
      .                   };
      .           
      .                   self.check_stability_and_deprecation(&ext, path, node_id);
      .           
    249 ( 0.00%)          let unexpected_res = if ext.macro_kind() != kind {
      .                       Some((kind.article(), kind.descr_expected()))
    166 ( 0.00%)          } else if matches!(res, Res::Def(..)) {
    166 ( 0.00%)              match supports_macro_expansion {
      .                           SupportsMacroExpansion::No => Some(("a", "non-macro attribute")),
      .                           SupportsMacroExpansion::Yes { supports_inner_attrs } => {
    249 ( 0.00%)                      if inner_attr && !supports_inner_attrs {
      .                                   Some(("a", "non-macro inner attribute"))
      .                               } else {
      .                                   None
      .                               }
      .                           }
      .                       }
      .                   } else {
      .                       None
-- line 524 ----------------------------------------
-- line 529 ----------------------------------------
      .                       self.session
      .                           .struct_span_err(path.span, &msg)
      .                           .span_label(path.span, format!("not {} {}", article, expected))
      .                           .emit();
      .                       return Ok((self.dummy_ext(kind), Res::Err));
      .                   }
      .           
      .                   // We are trying to avoid reporting this error if other related errors were reported.
    498 ( 0.00%)          if res != Res::Err
      .                       && inner_attr
      .                       && !self.session.features_untracked().custom_inner_attributes
      .                   {
      .                       let msg = match res {
      .                           Res::Def(..) => "inner macro attributes are unstable",
      .                           Res::NonMacroAttr(..) => "custom inner attributes are unstable",
      .                           _ => unreachable!(),
      .                       };
-- line 545 ----------------------------------------
-- line 546 ----------------------------------------
      .                       if soft_custom_inner_attributes_gate {
      .                           self.session.parse_sess.buffer_lint(SOFT_UNSTABLE, path.span, node_id, msg);
      .                       } else {
      .                           feature_err(&self.session.parse_sess, sym::custom_inner_attributes, path.span, msg)
      .                               .emit();
      .                       }
      .                   }
      .           
    332 ( 0.00%)          Ok((ext, res))
      .               }
      .           
  1,116 ( 0.00%)      pub fn resolve_macro_path(
      .                   &mut self,
      .                   path: &ast::Path,
      .                   kind: Option<MacroKind>,
      .                   parent_scope: &ParentScope<'a>,
      .                   trace: bool,
      .                   force: bool,
      .               ) -> Result<(Option<Lrc<SyntaxExtension>>, Res), Determinacy> {
     93 ( 0.00%)          let path_span = path.span;
      .                   let mut path = Segment::from_path(path);
      .           
      .                   // Possibly apply the macro helper hack
    346 ( 0.00%)          if kind == Some(MacroKind::Bang)
      .                       && path.len() == 1
    335 ( 0.00%)              && path[0].ident.span.ctxt().outer_expn_data().local_inner_macros
      .                   {
      .                       let root = Ident::new(kw::DollarCrate, path[0].ident.span);
      .                       path.insert(0, Segment::from_ident(root));
      .                   }
      .           
     52 ( 0.00%)          let res = if path.len() > 1 {
      .                       let res = match self.resolve_path(
      .                           &path,
      .                           Some(MacroNS),
      .                           parent_scope,
      .                           false,
      .                           path_span,
      .                           CrateLint::No,
      .                       ) {
-- line 585 ----------------------------------------
-- line 603 ----------------------------------------
      .                               res.ok(),
      .                           ));
      .                       }
      .           
      .                       self.prohibit_imported_non_macro_attrs(None, res.ok(), path_span);
      .                       res
      .                   } else {
      .                       let scope_set = kind.map_or(ScopeSet::All(MacroNS, false), ScopeSet::Macro);
    837 ( 0.00%)              let binding = self.early_resolve_ident_in_lexical_scope(
    372 ( 0.00%)                  path[0].ident,
      .                           scope_set,
      .                           parent_scope,
      .                           false,
      .                           force,
      .                           path_span,
      .                       );
    279 ( 0.00%)              if let Err(Determinacy::Undetermined) = binding {
      .                           return Err(Determinacy::Undetermined);
      .                       }
      .           
    186 ( 0.00%)              if trace {
      .                           let kind = kind.expect("macro kind must be specified if tracing is enabled");
    930 ( 0.00%)                  self.single_segment_macro_resolutions.push((
      .                               path[0].ident,
      .                               kind,
      .                               *parent_scope,
      .                               binding.ok(),
      .                           ));
      .                       }
      .           
      .                       let res = binding.map(|binding| binding.res());
    372 ( 0.00%)              self.prohibit_imported_non_macro_attrs(binding.ok(), res.ok(), path_span);
    465 ( 0.00%)              res
      .                   };
      .           
    372 ( 0.00%)          res.map(|res| (self.get_macro(res), res))
  1,023 ( 0.00%)      }
      .           
      .               // Resolve an identifier in lexical scope.
      .               // This is a variation of `fn resolve_ident_in_lexical_scope` that can be run during
      .               // expansion and import resolution (perhaps they can be merged in the future).
      .               // The function is used for resolving initial segments of macro paths (e.g., `foo` in
      .               // `foo::bar!(); or `foo!();`) and also for import paths on 2018 edition.
 16,575 ( 0.00%)      crate fn early_resolve_ident_in_lexical_scope(
      .                   &mut self,
      .                   orig_ident: Ident,
      .                   scope_set: ScopeSet<'a>,
      .                   parent_scope: &ParentScope<'a>,
      .                   record_used: bool,
      .                   force: bool,
      .                   path_span: Span,
      .               ) -> Result<&'a NameBinding<'a>, Determinacy> {
-- line 654 ----------------------------------------
-- line 657 ----------------------------------------
      .                           const MACRO_RULES          = 1 << 0;
      .                           const MODULE               = 1 << 1;
      .                           const MISC_SUGGEST_CRATE   = 1 << 2;
      .                           const MISC_SUGGEST_SELF    = 1 << 3;
      .                           const MISC_FROM_PRELUDE    = 1 << 4;
      .                       }
      .                   }
      .           
  3,608 ( 0.00%)          assert!(force || !record_used); // `record_used` implies `force`
      .           
      .                   // Make sure `self`, `super` etc produce an error when passed to here.
  6,375 ( 0.00%)          if orig_ident.is_path_segment_keyword() {
      .                       return Err(Determinacy::Determined);
      .                   }
      .           
  8,729 ( 0.00%)          let (ns, macro_kind, is_import) = match scope_set {
      .                       ScopeSet::All(ns, is_import) => (ns, None, is_import),
      .                       ScopeSet::AbsolutePath(ns) => (ns, None, false),
      .                       ScopeSet::Macro(macro_kind) => (MacroNS, Some(macro_kind), false),
      .                       ScopeSet::Late(ns, ..) => (ns, None, false),
      .                   };
      .           
      .                   // This is *the* result, resolution from the scope closest to the resolved identifier.
      .                   // However, sometimes this result is "weak" because it comes from a glob import or
-- line 680 ----------------------------------------
-- line 691 ----------------------------------------
      .                   let mut determinacy = Determinacy::Determined;
      .           
      .                   // Go through all the scopes and try to resolve the name.
      .                   let break_result = self.visit_scopes(
      .                       scope_set,
      .                       parent_scope,
      .                       orig_ident.span.ctxt(),
      .                       |this, scope, use_prelude, ctxt| {
  9,438 ( 0.00%)                  let ident = Ident::new(orig_ident.name, orig_ident.span.with_ctxt(ctxt));
      .                           let ok = |res, span, arenas| {
      .                               Ok((
      .                                   (res, ty::Visibility::Public, span, LocalExpnId::ROOT)
      .                                       .to_name_binding(arenas),
      .                                   Flags::empty(),
      .                               ))
      .                           };
 23,595 ( 0.00%)                  let result = match scope {
      .                               Scope::DeriveHelpers(expn_id) => {
      .                                   if let Some(attr) = this
      .                                       .helper_attrs
      .                                       .get(&expn_id)
      .                                       .and_then(|attrs| attrs.iter().rfind(|i| ident == **i))
      .                                   {
      .                                       let binding = (
      .                                           Res::NonMacroAttr(NonMacroAttrKind::DeriveHelper),
-- line 715 ----------------------------------------
-- line 720 ----------------------------------------
      .                                           .to_name_binding(this.arenas);
      .                                       Ok((binding, Flags::empty()))
      .                                   } else {
      .                                       Err(Determinacy::Determined)
      .                                   }
      .                               }
      .                               Scope::DeriveHelpersCompat => {
      .                                   let mut result = Err(Determinacy::Determined);
    301 ( 0.00%)                          for derive in parent_scope.derives {
      .                                       let parent_scope = &ParentScope { derives: &[], ..*parent_scope };
      .                                       match this.resolve_macro_path(
      .                                           derive,
      .                                           Some(MacroKind::Derive),
      .                                           parent_scope,
      .                                           true,
      .                                           force,
      .                                       ) {
-- line 736 ----------------------------------------
-- line 747 ----------------------------------------
      .                                           Ok(_) | Err(Determinacy::Determined) => {}
      .                                           Err(Determinacy::Undetermined) => {
      .                                               result = Err(Determinacy::Undetermined)
      .                                           }
      .                                       }
      .                                   }
      .                                   result
      .                               }
  1,204 ( 0.00%)                      Scope::MacroRules(macro_rules_scope) => match macro_rules_scope.get() {
      .                                   MacroRulesScope::Binding(macro_rules_binding)
      .                                       if ident == macro_rules_binding.ident =>
      .                                   {
      .                                       Ok((macro_rules_binding.binding, Flags::MACRO_RULES))
      .                                   }
      .                                   MacroRulesScope::Invocation(_) => Err(Determinacy::Undetermined),
      .                                   _ => Err(Determinacy::Determined),
      .                               },
-- line 763 ----------------------------------------
-- line 779 ----------------------------------------
      .                                       }
      .                                       Err((Determinacy::Undetermined, Weak::Yes)) => {
      .                                           Err(Determinacy::Undetermined)
      .                                       }
      .                                       Err((Determinacy::Determined, _)) => Err(Determinacy::Determined),
      .                                   }
      .                               }
      .                               Scope::Module(module, derive_fallback_lint_id) => {
 12,008 ( 0.00%)                          let adjusted_parent_scope = &ParentScope { module, ..*parent_scope };
 19,513 ( 0.00%)                          let binding = this.resolve_ident_in_module_unadjusted_ext(
      .                                       ModuleOrUniformRoot::Module(module),
      .                                       ident,
      .                                       ns,
      .                                       adjusted_parent_scope,
      .                                       !matches!(scope_set, ScopeSet::Late(..)),
      .                                       record_used,
      .                                       path_span,
      .                                   );
  6,812 ( 0.00%)                          match binding {
      .                                       Ok(binding) => {
    776 ( 0.00%)                                  if let Some(lint_id) = derive_fallback_lint_id {
      .                                               this.lint_buffer.buffer_lint_with_diagnostic(
      .                                                   PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,
      .                                                   lint_id,
      .                                                   orig_ident.span,
      .                                                   &format!(
      .                                                       "cannot find {} `{}` in this scope",
      .                                                       ns.descr(),
      .                                                       ident
      .                                                   ),
      .                                                   BuiltinLintDiagnostics::ProcMacroDeriveResolutionFallback(
      .                                                       orig_ident.span,
      .                                                   ),
      .                                               );
      .                                           }
    388 ( 0.00%)                                  let misc_flags = if ptr::eq(module, this.graph_root) {
      .                                               Flags::MISC_SUGGEST_CRATE
    385 ( 0.00%)                                  } else if module.is_normal() {
      .                                               Flags::MISC_SUGGEST_SELF
      .                                           } else {
      .                                               Flags::empty()
      .                                           };
      .                                           Ok((binding, Flags::MODULE | misc_flags))
      .                                       }
      .                                       Err((Determinacy::Undetermined, Weak::No)) => {
      .                                           return Some(Err(Determinacy::determined(force)));
-- line 824 ----------------------------------------
-- line 833 ----------------------------------------
      .                                   Some(ident) => ok(
      .                                       Res::NonMacroAttr(NonMacroAttrKind::Registered),
      .                                       ident.span,
      .                                       this.arenas,
      .                                   ),
      .                                   None => Err(Determinacy::Determined),
      .                               },
      .                               Scope::MacroUsePrelude => {
    294 ( 0.00%)                          match this.macro_use_prelude.get(&ident.name).cloned() {
      .                                       Some(binding) => Ok((binding, Flags::MISC_FROM_PRELUDE)),
      .                                       None => Err(Determinacy::determined(
    152 ( 0.00%)                                  this.graph_root.unexpanded_invocations.borrow().is_empty(),
      .                                       )),
      .                                   }
      .                               }
      .                               Scope::BuiltinAttrs => {
    624 ( 0.00%)                          if is_builtin_attr_name(ident.name) {
      .                                       ok(
    274 ( 0.00%)                                  Res::NonMacroAttr(NonMacroAttrKind::Builtin(ident.name)),
      .                                           DUMMY_SP,
    137 ( 0.00%)                                  this.arenas,
      .                                       )
      .                                   } else {
      .                                       Err(Determinacy::Determined)
      .                                   }
      .                               }
  2,544 ( 0.00%)                      Scope::ExternPrelude => match this.extern_prelude_get(ident, !record_used) {
      .                                   Some(binding) => Ok((binding, Flags::empty())),
      .                                   None => Err(Determinacy::determined(
    224 ( 0.00%)                              this.graph_root.unexpanded_invocations.borrow().is_empty(),
      .                                   )),
      .                               },
      .                               Scope::ToolPrelude => match this.registered_tools.get(&ident).cloned() {
      .                                   Some(ident) => ok(Res::ToolMod, ident.span, this.arenas),
      .                                   None => Err(Determinacy::Determined),
      .                               },
      .                               Scope::StdLibPrelude => {
      .                                   let mut result = Err(Determinacy::Determined);
  2,172 ( 0.00%)                          if let Some(prelude) = this.prelude {
      .                                       if let Ok(binding) = this.resolve_ident_in_module_unadjusted(
      .                                           ModuleOrUniformRoot::Module(prelude),
      .                                           ident,
      .                                           ns,
      .                                           parent_scope,
      .                                           false,
      .                                           path_span,
      .                                       ) {
    214 ( 0.00%)                                  if use_prelude || this.is_builtin_macro(binding.res()) {
      .                                               result = Ok((binding, Flags::MISC_FROM_PRELUDE));
      .                                           }
      .                                       }
      .                                   }
      .                                   result
      .                               }
    708 ( 0.00%)                      Scope::BuiltinTypes => match PrimTy::from_name(ident.name) {
    185 ( 0.00%)                          Some(prim_ty) => ok(Res::PrimTy(prim_ty), DUMMY_SP, this.arenas),
      .                                   None => Err(Determinacy::Determined),
      .                               },
      .                           };
      .           
  3,135 ( 0.00%)                  match result {
      .                               Ok((binding, flags))
    744 ( 0.00%)                          if sub_namespace_match(binding.macro_kind(), macro_kind) =>
      .                               {
  2,020 ( 0.00%)                          if !record_used || matches!(scope_set, ScopeSet::Late(..)) {
      .                                       return Some(Ok(binding));
      .                                   }
      .           
    518 ( 0.00%)                          if let Some((innermost_binding, innermost_flags)) = innermost_result {
      .                                       // Found another solution, if the first one was "weak", report an error.
    759 ( 0.00%)                              let (res, innermost_res) = (binding.res(), innermost_binding.res());
     69 ( 0.00%)                              if res != innermost_res {
      .                                           let is_builtin = |res| {
      .                                               matches!(res, Res::NonMacroAttr(NonMacroAttrKind::Builtin(..)))
      .                                           };
      .                                           let derive_helper =
      .                                               Res::NonMacroAttr(NonMacroAttrKind::DeriveHelper);
      .                                           let derive_helper_compat =
      .                                               Res::NonMacroAttr(NonMacroAttrKind::DeriveHelperCompat);
      .           
-- line 912 ----------------------------------------
-- line 977 ----------------------------------------
      .                       },
      .                   );
      .           
      .                   if let Some(break_result) = break_result {
      .                       return break_result;
      .                   }
      .           
      .                   // The first found solution was the only one, return it.
    992 ( 0.00%)          if let Some((binding, _)) = innermost_result {
      .                       return Ok(binding);
      .                   }
      .           
    260 ( 0.00%)          Err(Determinacy::determined(determinacy == Determinacy::Determined || force))
 16,575 ( 0.00%)      }
      .           
      8 ( 0.00%)      crate fn finalize_macro_resolutions(&mut self) {
    744 ( 0.00%)          let check_consistency = |this: &mut Self,
      .                                            path: &[Segment],
      .                                            span,
      .                                            kind: MacroKind,
      .                                            initial_res: Option<Res>,
      .                                            res: Res| {
    651 ( 0.00%)              if let Some(initial_res) = initial_res {
    279 ( 0.00%)                  if res != initial_res {
      .                               // Make sure compilation does not succeed if preferred macro resolution
      .                               // has changed after the macro had been expanded. In theory all such
      .                               // situations should be reported as errors, so this is a bug.
      .                               this.session.delay_span_bug(span, "inconsistent resolution for a macro");
      .                           }
      .                       } else {
      .                           // It's possible that the macro was unresolved (indeterminate) and silently
      .                           // expanded into a dummy fragment for recovery during expansion.
-- line 1008 ----------------------------------------
-- line 1016 ----------------------------------------
      .                                   "cannot determine resolution for the {} `{}`",
      .                                   kind.descr(),
      .                                   Segment::names_to_string(path)
      .                               );
      .                               let msg_note = "import resolution is stuck, try simplifying macro imports";
      .                               this.session.struct_span_err(span, &msg).note(msg_note).emit();
      .                           }
      .                       }
    651 ( 0.00%)          };
      .           
      .                   let macro_resolutions = mem::take(&mut self.multi_segment_macro_resolutions);
      4 ( 0.00%)          for (mut path, path_span, kind, parent_scope, initial_res) in macro_resolutions {
      .                       // FIXME: Path resolution will ICE if segment IDs present.
      .                       for seg in &mut path {
      .                           seg.id = None;
      .                       }
      .                       match self.resolve_path(
      .                           &path,
      .                           Some(MacroNS),
      .                           &parent_scope,
-- line 1035 ----------------------------------------
-- line 1059 ----------------------------------------
      .                                   ResolutionError::FailedToResolve { label, suggestion: None },
      .                               );
      .                           }
      .                           PathResult::Module(..) | PathResult::Indeterminate => unreachable!(),
      .                       }
      .                   }
      .           
      .                   let macro_resolutions = mem::take(&mut self.single_segment_macro_resolutions);
  1,209 ( 0.00%)          for (ident, kind, parent_scope, initial_binding) in macro_resolutions {
  1,488 ( 0.00%)              match self.early_resolve_ident_in_lexical_scope(
     93 ( 0.00%)                  ident,
      .                           ScopeSet::Macro(kind),
      .                           &parent_scope,
      .                           true,
      .                           true,
    186 ( 0.00%)                  ident.span,
      .                       ) {
      .                           Ok(binding) => {
      .                               let initial_res = initial_binding.map(|initial_binding| {
    651 ( 0.00%)                          self.record_use(ident, initial_binding, false);
      .                                   initial_binding.res()
      .                               });
      .                               let res = binding.res();
    186 ( 0.00%)                      let seg = Segment::from_ident(ident);
  4,371 ( 0.00%)                      check_consistency(self, &[seg], ident.span, kind, initial_res, res);
    465 ( 0.00%)                      if res == Res::NonMacroAttr(NonMacroAttrKind::DeriveHelperCompat) {
      .                                   let node_id = self
      .                                       .invocation_parents
      .                                       .get(&parent_scope.expansion)
      .                                       .map_or(ast::CRATE_NODE_ID, |id| self.def_id_to_node_id[id.0]);
      .                                   self.lint_buffer.buffer_lint_with_diagnostic(
      .                                       LEGACY_DERIVE_HELPERS,
      .                                       node_id,
      .                                       ident.span,
-- line 1092 ----------------------------------------
-- line 1101 ----------------------------------------
      .                               let mut err = self.session.struct_span_err(ident.span, &msg);
      .                               self.unresolved_macro_suggestions(&mut err, kind, &parent_scope, ident);
      .                               err.emit();
      .                           }
      .                       }
      .                   }
      .           
      .                   let builtin_attrs = mem::take(&mut self.builtin_attrs);
    927 ( 0.00%)          for (ident, parent_scope) in builtin_attrs {
  1,150 ( 0.00%)              let _ = self.early_resolve_ident_in_lexical_scope(
      .                           ident,
      .                           ScopeSet::Macro(MacroKind::Attr),
      .                           &parent_scope,
      .                           true,
      .                           true,
    230 ( 0.00%)                  ident.span,
      .                       );
      .                   }
      8 ( 0.00%)      }
      .           
      .               fn check_stability_and_deprecation(
      .                   &mut self,
      .                   ext: &SyntaxExtension,
      .                   path: &ast::Path,
      .                   node_id: NodeId,
      .               ) {
     83 ( 0.00%)          let span = path.span;
    249 ( 0.00%)          if let Some(stability) = &ext.stability {
    142 ( 0.00%)              if let StabilityLevel::Unstable { reason, issue, is_soft } = stability.level {
      .                           let feature = stability.feature;
      .                           if !self.active_features.contains(&feature) && !span.allows_unstable(feature) {
      .                               let lint_buffer = &mut self.lint_buffer;
      .                               let soft_handler =
      .                                   |lint, span, msg: &_| lint_buffer.buffer_lint(lint, node_id, span, msg);
      .                               stability::report_unstable(
      .                                   self.session,
      .                                   feature,
-- line 1137 ----------------------------------------
-- line 1140 ----------------------------------------
      .                                   None,
      .                                   is_soft,
      .                                   span,
      .                                   soft_handler,
      .                               );
      .                           }
      .                       }
      .                   }
    166 ( 0.00%)          if let Some(depr) = &ext.deprecation {
      .                       let path = pprust::path_to_string(&path);
      .                       let (message, lint) = stability::deprecation_message_and_lint(depr, "macro", &path);
      .                       stability::early_report_deprecation(
      .                           &mut self.lint_buffer,
      .                           &message,
      .                           depr.suggestion,
      .                           lint,
      .                           span,
      .                           node_id,
      .                       );
      .                   }
      .               }
      .           
    651 ( 0.00%)      fn prohibit_imported_non_macro_attrs(
      .                   &self,
      .                   binding: Option<&'a NameBinding<'a>>,
      .                   res: Option<Res>,
      .                   span: Span,
      .               ) {
    186 ( 0.00%)          if let Some(Res::NonMacroAttr(kind)) = res {
      .                       if kind != NonMacroAttrKind::Tool && binding.map_or(true, |b| b.is_import()) {
      .                           let msg =
      .                               format!("cannot use {} {} through an import", kind.article(), kind.descr());
      .                           let mut err = self.session.struct_span_err(span, &msg);
      .                           if let Some(binding) = binding {
      .                               err.span_note(binding.span, &format!("the {} imported here", kind.descr()));
      .                           }
      .                           err.emit();
      .                       }
      .                   }
    744 ( 0.00%)      }
      .           
595,232 ( 0.11%)      crate fn check_reserved_macro_name(&mut self, ident: Ident, res: Res) {
      .                   // Reserve some names that are not quite covered by the general check
      .                   // performed on `Resolver::builtin_attrs`.
216,448 ( 0.04%)          if ident.name == sym::cfg || ident.name == sym::cfg_attr {
      9 ( 0.00%)              let macro_kind = self.get_macro(res).map(|ext| ext.macro_kind());
      3 ( 0.00%)              if macro_kind.is_some() && sub_namespace_match(macro_kind, Some(MacroKind::Attr)) {
      .                           self.session.span_err(
      .                               ident.span,
      .                               &format!("name `{}` is reserved in attribute namespace", ident),
      .                           );
      .                       }
      .                   }
432,896 ( 0.08%)      }
      .           
      .               /// Compile the macro into a `SyntaxExtension` and possibly replace
      .               /// its expander to a pre-defined one for built-in macros.
     96 ( 0.00%)      crate fn compile_macro(&mut self, item: &ast::Item, edition: Edition) -> SyntaxExtension {
     36 ( 0.00%)          let mut result = compile_declarative_macro(
     12 ( 0.00%)              &self.session,
      .                       self.session.features_untracked(),
      .                       item,
      .                       edition,
      .                   );
      .           
     43 ( 0.00%)          if let Some(builtin_name) = result.builtin_name {
      .                       // The macro was marked with `#[rustc_builtin_macro]`.
     14 ( 0.00%)              if let Some(builtin_macro) = self.builtin_macros.get_mut(&builtin_name) {
      .                           // The macro is a built-in, replace its expander function
      .                           // while still taking everything else from the source code.
      .                           // If we already loaded this builtin macro, give a better error message than 'no such builtin macro'.
     21 ( 0.00%)                  match mem::replace(builtin_macro, BuiltinMacroState::AlreadySeen(item.span)) {
     84 ( 0.00%)                      BuiltinMacroState::NotYetSeen(ext) => result.kind = ext,
      .                               BuiltinMacroState::AlreadySeen(span) => {
      .                                   struct_span_err!(
      .                                       self.session,
      .                                       item.span,
      .                                       E0773,
      .                                       "attempted to define built-in macro more than once"
      .                                   )
      .                                   .span_note(span, "previously defined here")
-- line 1220 ----------------------------------------
-- line 1223 ----------------------------------------
      .                           }
      .                       } else {
      .                           let msg = format!("cannot find a built-in macro with name `{}`", item.ident);
      .                           self.session.span_err(item.span, &msg);
      .                       }
      .                   }
      .           
      .                   result
    108 ( 0.00%)      }
      .           }

 65,429 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 97 ----------------------------------------
      .           
      .               /// If true, the capture is behind a reference.
      .               by_ref: bool,
      .           }
      .           
      .           const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];
      .           
      .           pub fn provide(providers: &mut Providers) {
      4 ( 0.00%)      *providers = Providers {
      .                   mir_borrowck: |tcx, did| {
    126 ( 0.00%)              if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {
      .                           tcx.mir_borrowck_const_arg(def)
      .                       } else {
    504 ( 0.00%)                  mir_borrowck(tcx, ty::WithOptConstParam::unknown(did))
      .                       }
      .                   },
      .                   mir_borrowck_const_arg: |tcx, (did, param_did)| {
      .                       mir_borrowck(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })
      .                   },
      .                   ..*providers
      .               };
      1 ( 0.00%)  }
      .           
  1,260 ( 0.00%)  fn mir_borrowck<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               def: ty::WithOptConstParam<LocalDefId>,
      .           ) -> &'tcx BorrowCheckResult<'tcx> {
      .               let (input_body, promoted) = tcx.mir_promoted(def);
      .               debug!("run query mir_borrowck: {}", tcx.def_path_str(def.did.to_def_id()));
      .           
  1,638 ( 0.00%)      let opt_closure_req = tcx.infer_ctxt().with_opaque_type_inference(def.did).enter(|infcx| {
      .                   let input_body: &Body<'_> = &input_body.borrow();
      .                   let promoted: &IndexVec<_, _> = &promoted.borrow();
  1,764 ( 0.00%)          do_mir_borrowck(&infcx, input_body, promoted, false).0
    504 ( 0.00%)      });
      .               debug!("mir_borrowck done");
      .           
    126 ( 0.00%)      tcx.arena.alloc(opt_closure_req)
  1,008 ( 0.00%)  }
      .           
      .           /// Perform the actual borrow checking.
      .           ///
      .           /// If `return_body_with_facts` is true, then return the body with non-erased
      .           /// region ids on which the borrow checking was performed together with Polonius
      .           /// facts.
  2,772 ( 0.00%)  #[instrument(skip(infcx, input_body, input_promoted), level = "debug")]
      .           fn do_mir_borrowck<'a, 'tcx>(
      .               infcx: &InferCtxt<'a, 'tcx>,
      .               input_body: &Body<'tcx>,
      .               input_promoted: &IndexVec<Promoted, Body<'tcx>>,
      .               return_body_with_facts: bool,
      .           ) -> (BorrowCheckResult<'tcx>, Option<Box<BodyWithBorrowckFacts<'tcx>>>) {
  1,260 ( 0.00%)      let def = input_body.source.with_opt_param().as_local().unwrap();
      .           
      .               debug!(?def);
      .           
    252 ( 0.00%)      let tcx = infcx.tcx;
      .               let param_env = tcx.param_env(def.did);
    126 ( 0.00%)      let id = tcx.hir().local_def_id_to_hir_id(def.did);
      .           
    252 ( 0.00%)      let mut local_names = IndexVec::from_elem(None, &input_body.local_decls);
      .               for var_debug_info in &input_body.var_debug_info {
  1,194 ( 0.00%)          if let VarDebugInfoContents::Place(place) = var_debug_info.value {
    637 ( 0.00%)              if let Some(local) = place.as_local() {
    954 ( 0.00%)                  if let Some(prev_name) = local_names[local] {
      .                               if var_debug_info.name != prev_name {
      .                                   span_bug!(
      .                                       var_debug_info.source_info.span,
      .                                       "local {:?} has many names (`{}` vs `{}`)",
      .                                       local,
      .                                       prev_name,
      .                                       var_debug_info.name
      .                                   );
      .                               }
      .                           }
    954 ( 0.00%)                  local_names[local] = Some(var_debug_info.name);
      .                       }
      .                   }
      .               }
      .           
      .               // Gather the upvars of a closure, if any.
    504 ( 0.00%)      let tables = tcx.typeck_opt_const_arg(def);
    252 ( 0.00%)      if let Some(ErrorReported) = tables.tainted_by_errors {
      .                   infcx.set_tainted_by_errors();
      .               }
    504 ( 0.00%)      let upvars: Vec<_> = tables
      .                   .closure_min_captures_flattened(def.did.to_def_id())
      .                   .map(|captured_place| {
      .                       let capture = captured_place.info.capture_kind;
      1 ( 0.00%)              let by_ref = match capture {
      .                           ty::UpvarCapture::ByValue => false,
      .                           ty::UpvarCapture::ByRef(..) => true,
      .                       };
      .                       Upvar { place: captured_place.clone(), by_ref }
      .                   })
      .                   .collect();
      .           
      .               // Replace all regions with fresh inference variables. This
      .               // requires first making our own copy of the MIR. This copy will
      .               // be modified (in place) to contain non-lexical lifetimes. It
      .               // will have a lifetime tied to the inference context.
    252 ( 0.00%)      let mut body_owned = input_body.clone();
      .               let mut promoted = input_promoted.clone();
      .               let free_regions =
    378 ( 0.00%)          nll::replace_regions_in_mir(infcx, param_env, &mut body_owned, &mut promoted);
      .               let body = &body_owned; // no further changes
      .           
    126 ( 0.00%)      let location_table_owned = LocationTable::new(body);
      .               let location_table = &location_table_owned;
      .           
      .               let mut errors_buffer = Vec::new();
    378 ( 0.00%)      let (move_data, move_errors): (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>) =
    882 ( 0.00%)          match MoveData::gather_moves(&body, tcx, param_env) {
    756 ( 0.00%)              Ok(move_data) => (move_data, Vec::new()),
      .                       Err((move_data, move_errors)) => (move_data, move_errors),
      .                   };
      .               let promoted_errors = promoted
      .                   .iter_enumerated()
     10 ( 0.00%)          .map(|(idx, body)| (idx, MoveData::gather_moves(&body, tcx, param_env)));
      .           
    756 ( 0.00%)      let mdpe = MoveDataParamEnv { move_data, param_env };
      .           
  1,008 ( 0.00%)      let mut flow_inits = MaybeInitializedPlaces::new(tcx, &body, &mdpe)
    126 ( 0.00%)          .into_engine(tcx, &body)
      .                   .pass_name("borrowck")
      .                   .iterate_to_fixpoint()
      .                   .into_results_cursor(&body);
      .           
  1,512 ( 0.00%)      let locals_are_invalidated_at_exit = tcx.hir().body_owner_kind(id).is_fn_or_closure();
      .               let borrow_set =
  1,260 ( 0.00%)          Rc::new(BorrowSet::build(tcx, body, locals_are_invalidated_at_exit, &mdpe.move_data));
      .           
    630 ( 0.00%)      let use_polonius = return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius;
      .           
      .               // Compute non-lexical lifetimes.
      .               let nll::NllOutput {
    378 ( 0.00%)          regioncx,
    504 ( 0.00%)          opaque_type_values,
    252 ( 0.00%)          polonius_input,
    378 ( 0.00%)          polonius_output,
    504 ( 0.00%)          opt_closure_req,
  1,260 ( 0.00%)          nll_errors,
  2,268 ( 0.00%)      } = nll::compute_regions(
      .                   infcx,
  2,016 ( 0.00%)          free_regions,
      .                   body,
      .                   &promoted,
      .                   location_table,
      .                   param_env,
      .                   &mut flow_inits,
      .                   &mdpe.move_data,
      .                   &borrow_set,
      .                   &upvars,
      .                   use_polonius,
      .               );
      .           
      .               // Dump MIR results into a file, if that is enabled. This let us
      .               // write unit-tests, as well as helping with debugging.
    378 ( 0.00%)      nll::dump_mir_results(infcx, &body, &regioncx, &opt_closure_req);
      .           
      .               // We also have a `#[rustc_regions]` annotation that causes us to dump
      .               // information.
    252 ( 0.00%)      nll::dump_annotation(
      .                   infcx,
      .                   &body,
      .                   &regioncx,
      .                   &opt_closure_req,
      .                   &opaque_type_values,
      .                   &mut errors_buffer,
      .               );
      .           
      .               // The various `flow_*` structures can be large. We drop `flow_inits` here
      .               // so it doesn't overlap with the others below. This reduces peak memory
      .               // usage significantly on some benchmarks.
  2,016 ( 0.00%)      drop(flow_inits);
      .           
    126 ( 0.00%)      let regioncx = Rc::new(regioncx);
      .           
    756 ( 0.00%)      let flow_borrows = Borrows::new(tcx, body, &regioncx, &borrow_set)
    126 ( 0.00%)          .into_engine(tcx, body)
      .                   .pass_name("borrowck")
      .                   .iterate_to_fixpoint();
    756 ( 0.00%)      let flow_uninits = MaybeUninitializedPlaces::new(tcx, body, &mdpe)
    126 ( 0.00%)          .into_engine(tcx, body)
      .                   .pass_name("borrowck")
      .                   .iterate_to_fixpoint();
    756 ( 0.00%)      let flow_ever_inits = EverInitializedPlaces::new(tcx, body, &mdpe)
    126 ( 0.00%)          .into_engine(tcx, body)
      .                   .pass_name("borrowck")
      .                   .iterate_to_fixpoint();
      .           
    264 ( 0.00%)      let movable_generator = !matches!(
    768 ( 0.00%)          tcx.hir().get(id),
      .                   Node::Expr(&hir::Expr {
      .                       kind: hir::ExprKind::Closure(.., Some(hir::Movability::Static)),
      .                       ..
      .                   })
      .               );
      .           
      7 ( 0.00%)      for (idx, move_data_results) in promoted_errors {
      .                   let promoted_body = &promoted[idx];
      .           
      2 ( 0.00%)          if let Err((move_data, move_errors)) = move_data_results {
      .                       let mut promoted_mbcx = MirBorrowckCtxt {
      .                           infcx,
      .                           param_env,
      .                           body: promoted_body,
      .                           move_data: &move_data,
      .                           location_table, // no need to create a real one for the promoted, it is not used
      .                           movable_generator,
      .                           fn_self_span_reported: Default::default(),
-- line 307 ----------------------------------------
-- line 325 ----------------------------------------
      .                       };
      .                       promoted_mbcx.report_move_errors(move_errors);
      .                       errors_buffer = promoted_mbcx.errors_buffer;
      .                   };
      .               }
      .           
      .               let dominators = body.dominators();
      .           
  5,670 ( 0.00%)      let mut mbcx = MirBorrowckCtxt {
      .                   infcx,
      .                   param_env,
      .                   body,
      .                   move_data: &mdpe.move_data,
      .                   location_table,
      .                   movable_generator,
      .                   locals_are_invalidated_at_exit,
      .                   fn_self_span_reported: Default::default(),
      .                   access_place_error_reported: Default::default(),
      .                   reservation_error_reported: Default::default(),
      .                   reservation_warnings: Default::default(),
      .                   move_error_reported: BTreeMap::new(),
      .                   uninitialized_error_reported: Default::default(),
    504 ( 0.00%)          errors_buffer,
    126 ( 0.00%)          regioncx: Rc::clone(&regioncx),
      .                   used_mut: Default::default(),
      .                   used_mut_upvars: SmallVec::new(),
    126 ( 0.00%)          borrow_set: Rc::clone(&borrow_set),
    756 ( 0.00%)          dominators,
    504 ( 0.00%)          upvars,
    504 ( 0.00%)          local_names,
      .                   region_names: RefCell::default(),
      .                   next_region_name: RefCell::new(1),
      .                   polonius_output,
      .               };
      .           
      .               // Compute and report region errors, if any.
    378 ( 0.00%)      mbcx.report_region_errors(nll_errors);
      .           
      .               let results = BorrowckResults {
    756 ( 0.00%)          ever_inits: flow_ever_inits,
  1,008 ( 0.00%)          uninits: flow_uninits,
  1,386 ( 0.00%)          borrows: flow_borrows,
      .               };
      .           
    756 ( 0.00%)      mbcx.report_move_errors(move_errors);
      .           
    126 ( 0.00%)      rustc_mir_dataflow::visit_results(
      .                   body,
    126 ( 0.00%)          traversal::reverse_postorder(body).map(|(bb, _)| bb),
      .                   &results,
      .                   &mut mbcx,
      .               );
      .           
      .               // Convert any reservation warnings into lints.
      .               let reservation_warnings = mem::take(&mut mbcx.reservation_warnings);
      .               for (_, (place, span, location, bk, borrow)) in reservation_warnings {
      .                   let mut initial_diag = mbcx.report_conflicting_borrow(location, (place, span), bk, &borrow);
-- line 381 ----------------------------------------
-- line 406 ----------------------------------------
      .               // For each non-user used mutable variable, check if it's been assigned from
      .               // a user-declared local. If so, then put that local into the used_mut set.
      .               // Note that this set is expected to be small - only upvars from closures
      .               // would have a chance of erroneously adding non-user-defined mutable vars
      .               // to the set.
      .               let temporary_used_locals: FxHashSet<Local> = mbcx
      .                   .used_mut
      .                   .iter()
    126 ( 0.00%)          .filter(|&local| !mbcx.body.local_decls[*local].is_user_variable())
      .                   .cloned()
      .                   .collect();
      .               // For the remaining unused locals that are marked as mutable, we avoid linting any that
      .               // were never initialized. These locals may have been removed as unreachable code; or will be
      .               // linted as unused variables.
      .               let unused_mut_locals =
    126 ( 0.00%)          mbcx.body.mut_vars_iter().filter(|local| !mbcx.used_mut.contains(local)).collect();
    504 ( 0.00%)      mbcx.gather_used_muts(temporary_used_locals, unused_mut_locals);
      .           
      .               debug!("mbcx.used_mut: {:?}", mbcx.used_mut);
    504 ( 0.00%)      let used_mut = mbcx.used_mut;
    126 ( 0.00%)      for local in mbcx.body.mut_vars_and_args_iter().filter(|local| !used_mut.contains(local)) {
      5 ( 0.00%)          let local_decl = &mbcx.body.local_decls[local];
     30 ( 0.00%)          let lint_root = match &mbcx.body.source_scopes[local_decl.source_info.scope].local_data {
      .                       ClearCrossCrate::Set(data) => data.lint_root,
      .                       _ => continue,
      .                   };
      .           
      .                   // Skip over locals that begin with an underscore or have no name
     15 ( 0.00%)          match mbcx.local_names[local] {
      .                       Some(name) => {
      .                           if name.as_str().starts_with('_') {
      .                               continue;
      .                           }
      .                       }
      .                       None => continue,
      .                   }
      .           
-- line 442 ----------------------------------------
-- line 455 ----------------------------------------
      .                               String::new(),
      .                               Applicability::MachineApplicable,
      .                           )
      .                           .emit();
      .                   })
      .               }
      .           
      .               // Buffer any move errors that we collected and de-duplicated.
  1,134 ( 0.00%)      for (_, (_, diag)) in mbcx.move_error_reported {
      .                   diag.buffer(&mut mbcx.errors_buffer);
      .               }
      .           
    126 ( 0.00%)      if !mbcx.errors_buffer.is_empty() {
      .                   mbcx.errors_buffer.sort_by_key(|diag| diag.sort_span);
      .           
      .                   for diag in mbcx.errors_buffer.drain(..) {
      .                       mbcx.infcx.tcx.sess.diagnostic().emit_diagnostic(&diag);
      .                   }
      .               }
      .           
      .               let result = BorrowCheckResult {
    504 ( 0.00%)          concrete_opaque_types: opaque_type_values,
    630 ( 0.00%)          closure_requirements: opt_closure_req,
    756 ( 0.00%)          used_mut_upvars: mbcx.used_mut_upvars,
      .               };
      .           
    252 ( 0.00%)      let body_with_facts = if return_body_with_facts {
      .                   let output_facts = mbcx.polonius_output.expect("Polonius output was not computed");
      .                   Some(Box::new(BodyWithBorrowckFacts {
      .                       body: body_owned,
      .                       input_facts: *polonius_input.expect("Polonius input facts were not generated"),
      .                       output_facts,
      .                       location_table: location_table_owned,
      .                   }))
      .               } else {
      .                   None
      .               };
      .           
      .               debug!("do_mir_borrowck: result = {:#?}", result);
      .           
  1,764 ( 0.00%)      (result, body_with_facts)
  1,512 ( 0.00%)  }
      .           
      .           /// A `Body` with information computed by the borrow checker. This struct is
      .           /// intended to be consumed by compiler consumers.
      .           ///
      .           /// We need to include the MIR body here because the region identifiers must
      .           /// match the ones in the Polonius facts.
      .           pub struct BodyWithBorrowckFacts<'tcx> {
      .               /// A mir body that contains region identifiers.
-- line 504 ----------------------------------------
-- line 608 ----------------------------------------
      .           // Check that:
      .           // 1. assignments are always made to mutable locations (FIXME: does that still really go here?)
      .           // 2. loans made in overlapping scopes do not conflict
      .           // 3. assignments do not affect things loaned out as immutable
      .           // 4. moves do not affect things loaned out in any way
      .           impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx> {
      .               type FlowState = Flows<'cx, 'tcx>;
      .           
 35,424 ( 0.01%)      fn visit_statement_before_primary_effect(
      .                   &mut self,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .                   stmt: &'cx Statement<'tcx>,
      .                   location: Location,
      .               ) {
      .                   debug!("MirBorrowckCtxt::process_statement({:?}, {:?}): {:?}", location, stmt, flow_state);
      .                   let span = stmt.source_info.span;
      .           
      .                   self.check_activations(location, span, flow_state);
      .           
 19,680 ( 0.00%)          match &stmt.kind {
  2,400 ( 0.00%)              StatementKind::Assign(box (lhs, ref rhs)) => {
      .                           self.consume_rvalue(location, (rhs, span), flow_state);
      .           
  4,800 ( 0.00%)                  self.mutate_place(location, (*lhs, span), Shallow(None), flow_state);
      .                       }
     94 ( 0.00%)              StatementKind::FakeRead(box (_, ref place)) => {
      .                           // Read for match doesn't access any memory and is used to
      .                           // assert that a place is safe and live. So we don't have to
      .                           // do any checks here.
      .                           //
      .                           // FIXME: Remove check that the place is initialized. This is
      .                           // needed for now because matches don't have never patterns yet.
      .                           // So this is the only place we prevent
      .                           //      let x: !;
      .                           //      match x {};
      .                           // from compiling.
    376 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               InitializationRequiringAction::Use,
    846 ( 0.00%)                      (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
      .                       StatementKind::SetDiscriminant { place, variant_index: _ } => {
      .                           self.mutate_place(location, (**place, span), Shallow(None), flow_state);
      .                       }
      .                       StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {
      .                           ..
-- line 655 ----------------------------------------
-- line 663 ----------------------------------------
      .                       | StatementKind::Coverage(..)
      .                       | StatementKind::AscribeUserType(..)
      .                       | StatementKind::Retag { .. }
      .                       | StatementKind::StorageLive(..) => {
      .                           // `Nop`, `AscribeUserType`, `Retag`, and `StorageLive` are irrelevant
      .                           // to borrow check.
      .                       }
      .                       StatementKind::StorageDead(local) => {
  7,896 ( 0.00%)                  self.access_place(
      .                               location,
 14,476 ( 0.00%)                      (Place::from(*local), span),
      .                               (Shallow(None), Write(WriteKind::StorageDeadOrDrop)),
      .                               LocalMutationIsAllowed::Yes,
      .                               flow_state,
      .                           );
      .                       }
      .                   }
 31,488 ( 0.01%)      }
      .           
  7,824 ( 0.00%)      fn visit_terminator_before_primary_effect(
      .                   &mut self,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .                   term: &'cx Terminator<'tcx>,
      .                   loc: Location,
      .               ) {
      .                   debug!("MirBorrowckCtxt::process_terminator({:?}, {:?}): {:?}", loc, term, flow_state);
      .                   let span = term.source_info.span;
      .           
      .                   self.check_activations(loc, span, flow_state);
      .           
  4,890 ( 0.00%)          match term.kind {
    320 ( 0.00%)              TerminatorKind::SwitchInt { ref discr, switch_ty: _, targets: _ } => {
    320 ( 0.00%)                  self.consume_operand(loc, (discr, span), flow_state);
      .                       }
     82 ( 0.00%)              TerminatorKind::Drop { place, target: _, unwind: _ } => {
      .                           debug!(
      .                               "visit_terminator_drop \
      .                                loc: {:?} term: {:?} place: {:?} span: {:?}",
      .                               loc, term, place, span
      .                           );
      .           
    246 ( 0.00%)                  self.access_place(
      .                               loc,
    369 ( 0.00%)                      (place, span),
      .                               (AccessDepth::Drop, Write(WriteKind::StorageDeadOrDrop)),
      .                               LocalMutationIsAllowed::Yes,
      .                               flow_state,
      .                           );
      .                       }
      .                       TerminatorKind::DropAndReplace {
     12 ( 0.00%)                  place: drop_place,
      6 ( 0.00%)                  value: ref new_value,
      .                           target: _,
      .                           unwind: _,
      .                       } => {
     96 ( 0.00%)                  self.mutate_place(loc, (drop_place, span), Deep, flow_state);
      .                           self.consume_operand(loc, (new_value, span), flow_state);
      .                       }
      .                       TerminatorKind::Call {
  1,275 ( 0.00%)                  ref func,
      .                           ref args,
      .                           ref destination,
      .                           cleanup: _,
      .                           from_hir_call: _,
      .                           fn_span: _,
      .                       } => {
  3,400 ( 0.00%)                  self.consume_operand(loc, (func, span), flow_state);
      .                           for arg in args {
  3,888 ( 0.00%)                      self.consume_operand(loc, (arg, span), flow_state);
      .                           }
  1,689 ( 0.00%)                  if let Some((dest, _ /*bb*/)) = *destination {
  4,968 ( 0.00%)                      self.mutate_place(loc, (dest, span), Deep, flow_state);
      .                           }
      .                       }
    354 ( 0.00%)              TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {
     59 ( 0.00%)                  self.consume_operand(loc, (cond, span), flow_state);
      .                           use rustc_middle::mir::AssertKind;
    175 ( 0.00%)                  if let AssertKind::BoundsCheck { ref len, ref index } = *msg {
    190 ( 0.00%)                      self.consume_operand(loc, (len, span), flow_state);
      .                               self.consume_operand(loc, (index, span), flow_state);
      .                           }
      .                       }
      .           
      .                       TerminatorKind::Yield { ref value, resume: _, resume_arg, drop: _ } => {
      .                           self.consume_operand(loc, (value, span), flow_state);
      .                           self.mutate_place(loc, (resume_arg, span), Deep, flow_state);
      .                       }
-- line 749 ----------------------------------------
-- line 790 ----------------------------------------
      .                       | TerminatorKind::Resume
      .                       | TerminatorKind::Return
      .                       | TerminatorKind::GeneratorDrop
      .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
      .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ } => {
      .                           // no data used, thus irrelevant to borrowck
      .                       }
      .                   }
  6,984 ( 0.00%)      }
      .           
  6,846 ( 0.00%)      fn visit_terminator_after_primary_effect(
      .                   &mut self,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .                   term: &'cx Terminator<'tcx>,
      .                   loc: Location,
      .               ) {
    978 ( 0.00%)          let span = term.source_info.span;
      .           
  3,912 ( 0.00%)          match term.kind {
      .                       TerminatorKind::Yield { value: _, resume: _, resume_arg: _, drop: _ } => {
      .                           if self.movable_generator {
      .                               // Look for any active borrows to locals
      .                               let borrow_set = self.borrow_set.clone();
      .                               for i in flow_state.borrows.iter() {
      .                                   let borrow = &borrow_set[i];
      .                                   self.check_for_local_borrow(borrow, span);
      .                               }
-- line 816 ----------------------------------------
-- line 817 ----------------------------------------
      .                           }
      .                       }
      .           
      .                       TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {
      .                           // Returning from the function implicitly kills storage for all locals and statics.
      .                           // Often, the storage will already have been killed by an explicit
      .                           // StorageDead, but we don't always emit those (notably on unwind paths),
      .                           // so this "extra check" serves as a kind of backup.
    412 ( 0.00%)                  let borrow_set = self.borrow_set.clone();
      .                           for i in flow_state.borrows.iter() {
      .                               let borrow = &borrow_set[i];
      .                               self.check_for_invalidation_at_exit(loc, borrow, span);
      .                           }
      .                       }
      .           
      .                       TerminatorKind::Abort
      .                       | TerminatorKind::Assert { .. }
-- line 833 ----------------------------------------
-- line 836 ----------------------------------------
      .                       | TerminatorKind::DropAndReplace { .. }
      .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
      .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ }
      .                       | TerminatorKind::Goto { .. }
      .                       | TerminatorKind::SwitchInt { .. }
      .                       | TerminatorKind::Unreachable
      .                       | TerminatorKind::InlineAsm { .. } => {}
      .                   }
  7,824 ( 0.00%)      }
      .           }
      .           
      .           use self::AccessDepth::{Deep, Shallow};
      .           use self::ReadOrWrite::{Activation, Read, Reservation, Write};
      .           
      .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
      .           enum ArtificialField {
      .               ArrayLength,
-- line 852 ----------------------------------------
-- line 913 ----------------------------------------
      .           /// When checking permissions for a place access, this flag is used to indicate that an immutable
      .           /// local place can be mutated.
      .           //
      .           // FIXME: @nikomatsakis suggested that this flag could be removed with the following modifications:
      .           // - Merge `check_access_permissions()` and `check_if_reassignment_to_immutable_state()`.
      .           // - Split `is_mutable()` into `is_assignable()` (can be directly assigned) and
      .           //   `is_declared_mutable()`.
      .           // - Take flow state into consideration in `is_assignable()` for local variables.
  1,491 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
      .           enum LocalMutationIsAllowed {
      .               Yes,
      .               /// We want use of immutable upvars to cause a "write to immutable upvar"
      .               /// error, not an "reassignment" error.
      .               ExceptUpvars,
      .               No,
      .           }
      .           
-- line 929 ----------------------------------------
-- line 970 ----------------------------------------
      .               }
      .           
      .               /// Checks an access to the given place to see if it is allowed. Examines the set of borrows
      .               /// that are in scope, as well as which paths have been initialized, to ensure that (a) the
      .               /// place is initialized and (b) it is not borrowed in some way that would prevent this
      .               /// access.
      .               ///
      .               /// Returns `true` if an error is reported.
 75,456 ( 0.01%)      fn access_place(
      .                   &mut self,
      .                   location: Location,
      .                   place_span: (Place<'tcx>, Span),
      .                   kind: (AccessDepth, ReadOrWrite),
      .                   is_local_mutation_allowed: LocalMutationIsAllowed,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   let (sd, rw) = kind;
      .           
 18,864 ( 0.00%)          if let Activation(_, borrow_index) = rw {
    200 ( 0.00%)              if self.reservation_error_reported.contains(&place_span.0) {
      .                           debug!(
      .                               "skipping access_place for activation of invalid reservation \
      .                                place: {:?} borrow_index: {:?}",
      .                               place_span.0, borrow_index
      .                           );
      .                           return;
      .                       }
      .                   }
      .           
      .                   // Check is_empty() first because it's the common case, and doing that
      .                   // way we avoid the clone() call.
  4,716 ( 0.00%)          if !self.access_place_error_reported.is_empty()
      .                       && self.access_place_error_reported.contains(&(place_span.0, place_span.1))
      .                   {
      .                       debug!(
      .                           "access_place: suppressing error place_span=`{:?}` kind=`{:?}`",
      .                           place_span, kind
      .                       );
      .                       return;
      .                   }
      .           
 28,296 ( 0.01%)          let mutability_error = self.check_access_permissions(
 18,864 ( 0.00%)              place_span,
      .                       rw,
      .                       is_local_mutation_allowed,
      .                       flow_state,
      .                       location,
      .                   );
      .                   let conflict_error =
 51,876 ( 0.01%)              self.check_access_for_conflict(location, place_span, sd, rw, flow_state);
      .           
 14,148 ( 0.00%)          if let (Activation(_, borrow_idx), true) = (kind.1, conflict_error) {
      .                       // Suppress this warning when there's an error being emitted for the
      .                       // same borrow: fixing the error is likely to fix the warning.
      .                       self.reservation_warnings.remove(&borrow_idx);
      .                   }
      .           
 14,148 ( 0.00%)          if conflict_error || mutability_error {
      .                       debug!("access_place: logging error place_span=`{:?}` kind=`{:?}`", place_span, kind);
      .           
      .                       self.access_place_error_reported.insert((place_span.0, place_span.1));
      .                   }
 37,728 ( 0.01%)      }
      .           
      .               fn check_access_for_conflict(
      .                   &mut self,
      .                   location: Location,
      .                   place_span: (Place<'tcx>, Span),
      .                   sd: AccessDepth,
      .                   rw: ReadOrWrite,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) -> bool {
      .                   debug!(
      .                       "check_access_for_conflict(location={:?}, place_span={:?}, sd={:?}, rw={:?})",
      .                       location, place_span, sd, rw,
      .                   );
      .           
  4,716 ( 0.00%)          let mut error_reported = false;
 14,148 ( 0.00%)          let tcx = self.infcx.tcx;
      .                   let body = self.body;
  9,432 ( 0.00%)          let borrow_set = self.borrow_set.clone();
      .           
      .                   // Use polonius output if it has been enabled.
  9,432 ( 0.00%)          let polonius_output = self.polonius_output.clone();
      .                   let borrows_in_scope = if let Some(polonius) = &polonius_output {
      .                       let location = self.location_table.start_index(location);
      .                       Either::Left(polonius.errors_at(location).iter().copied())
      .                   } else {
      .                       Either::Right(flow_state.borrows.iter())
      .                   };
      .           
 61,308 ( 0.01%)          each_borrow_involving_path(
      .                       self,
      .                       tcx,
      .                       body,
      .                       location,
 28,296 ( 0.01%)              (sd, place_span.0),
      .                       &borrow_set,
 28,296 ( 0.01%)              borrows_in_scope,
 53,199 ( 0.01%)              |this, borrow_index, borrow| match (rw, borrow.kind) {
      .                           // Obviously an activation is compatible with its own
      .                           // reservation (or even prior activating uses of same
      .                           // borrow); so don't check if they interfere.
      .                           //
      .                           // NOTE: *reservations* do conflict with themselves;
      .                           // thus aren't injecting unsoundenss w/ this check.)
    100 ( 0.00%)                  (Activation(_, activating), _) if activating == borrow_index => {
      .                               debug!(
      .                                   "check_access_for_conflict place_span: {:?} sd: {:?} rw: {:?} \
      .                                    skipping {:?} b/c activation of same borrow_index",
      .                                   place_span,
      .                                   sd,
      .                                   rw,
      .                                   (borrow_index, borrow),
      .                               );
-- line 1084 ----------------------------------------
-- line 1093 ----------------------------------------
      .           
      .                           (Write(WriteKind::Move), BorrowKind::Shallow) => {
      .                               // Handled by initialization checks.
      .                               Control::Continue
      .                           }
      .           
      .                           (Read(kind), BorrowKind::Unique | BorrowKind::Mut { .. }) => {
      .                               // Reading from mere reservations of mutable-borrows is OK.
      2 ( 0.00%)                      if !is_active(&this.dominators, borrow, location) {
      3 ( 0.00%)                          assert!(allow_two_phase_borrow(borrow.kind));
      .                                   return Control::Continue;
      .                               }
      .           
      .                               error_reported = true;
      .                               match kind {
      .                                   ReadKind::Copy => {
      .                                       this.report_use_while_mutably_borrowed(location, place_span, borrow)
      .                                           .buffer(&mut this.errors_buffer);
-- line 1110 ----------------------------------------
-- line 1179 ----------------------------------------
      .                                   }
      .                               }
      .                               Control::Break
      .                           }
      .                       },
      .                   );
      .           
      .                   error_reported
 14,148 ( 0.00%)      }
      .           
 16,200 ( 0.00%)      fn mutate_place(
      .                   &mut self,
      .                   location: Location,
      .                   place_span: (Place<'tcx>, Span),
      .                   kind: AccessDepth,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   // Write of P[i] or *P requires P init'd.
 14,580 ( 0.00%)          self.check_if_assigned_path_is_moved(location, place_span, flow_state);
      .           
      .                   // Special case: you can assign an immutable local variable
      .                   // (e.g., `x = ...`) so long as it has never been initialized
      .                   // before (at this point in the flow).
  1,620 ( 0.00%)          if let Some(local) = place_span.0.as_local() {
  6,336 ( 0.00%)              if let Mutability::Not = self.body.local_decls[local].mutability {
      .                           // check for reassignments to immutable local variables
      .                           self.check_if_reassignment_to_immutable_state(
      .                               location, local, place_span, flow_state,
      .                           );
      .                           return;
      .                       }
      .                   }
      .           
      .                   // Otherwise, use the normal access permission rules.
 16,320 ( 0.00%)          self.access_place(
      .                       location,
  5,440 ( 0.00%)              place_span,
      .                       (kind, Write(WriteKind::Mutate)),
      .                       LocalMutationIsAllowed::No,
      .                       flow_state,
      .                   );
 12,960 ( 0.00%)      }
      .           
      .               fn consume_rvalue(
      .                   &mut self,
      .                   location: Location,
      .                   (rvalue, span): (&'cx Rvalue<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
  7,200 ( 0.00%)          match *rvalue {
  1,149 ( 0.00%)              Rvalue::Ref(_ /*rgn*/, bk, place) => {
  4,332 ( 0.00%)                  let access_kind = match bk {
      .                               BorrowKind::Shallow => {
      .                                   (Shallow(Some(ArtificialField::ShallowBorrow)), Read(ReadKind::Borrow(bk)))
      .                               }
      .                               BorrowKind::Shared => (Deep, Read(ReadKind::Borrow(bk))),
      .                               BorrowKind::Unique | BorrowKind::Mut { .. } => {
      .                                   let wk = WriteKind::MutableBorrow(bk);
    264 ( 0.00%)                          if allow_two_phase_borrow(bk) {
      .                                       (Deep, Reservation(wk))
      .                                   } else {
      .                                       (Deep, Write(wk))
      .                                   }
      .                               }
      .                           };
      .           
  8,043 ( 0.00%)                  self.access_place(
      .                               location,
  1,532 ( 0.00%)                      (place, span),
      .                               access_kind,
      .                               LocalMutationIsAllowed::No,
      .                               flow_state,
      .                           );
      .           
      .                           let action = if bk == BorrowKind::Shallow {
      .                               InitializationRequiringAction::MatchOn
      .                           } else {
      .                               InitializationRequiringAction::Borrow
      .                           };
      .           
  2,681 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               action,
  2,681 ( 0.00%)                      (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
      .           
      .                       Rvalue::AddressOf(mutability, place) => {
      .                           let access_kind = match mutability {
      .                               Mutability::Mut => (
      .                                   Deep,
-- line 1270 ----------------------------------------
-- line 1302 ----------------------------------------
      .                       }
      .           
      .                       Rvalue::Len(place) | Rvalue::Discriminant(place) => {
      .                           let af = match *rvalue {
      .                               Rvalue::Len(..) => Some(ArtificialField::ArrayLength),
      .                               Rvalue::Discriminant(..) => None,
      .                               _ => unreachable!(),
      .                           };
    416 ( 0.00%)                  self.access_place(
      .                               location,
    104 ( 0.00%)                      (place, span),
      .                               (Shallow(af), Read(ReadKind::Copy)),
      .                               LocalMutationIsAllowed::No,
      .                               flow_state,
      .                           );
    182 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               InitializationRequiringAction::Use,
    182 ( 0.00%)                      (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
      .           
      .                       Rvalue::BinaryOp(_bin_op, box (ref operand1, ref operand2))
      .                       | Rvalue::CheckedBinaryOp(_bin_op, box (ref operand1, ref operand2)) => {
    960 ( 0.00%)                  self.consume_operand(location, (operand1, span), flow_state);
    672 ( 0.00%)                  self.consume_operand(location, (operand2, span), flow_state);
      .                       }
      .           
      .                       Rvalue::NullaryOp(_op, _ty) => {
      .                           // nullary ops take no dynamic input; no borrowck effect.
      .                       }
      .           
      .                       Rvalue::Aggregate(ref aggregate_kind, ref operands) => {
      .                           // We need to report back the list of mutable upvars that were
      .                           // moved into the closure and subsequently used by the closure,
      .                           // in order to populate our used_mut set.
    267 ( 0.00%)                  match **aggregate_kind {
      .                               AggregateKind::Closure(def_id, _) | AggregateKind::Generator(def_id, _, _) => {
      .                                   let BorrowCheckResult { used_mut_upvars, .. } =
     12 ( 0.00%)                              self.infcx.tcx.mir_borrowck(def_id.expect_local());
      .                                   debug!("{:?} used_mut_upvars={:?}", def_id, used_mut_upvars);
      .                                   for field in used_mut_upvars {
      .                                       self.propagate_closure_used_mut_upvar(&operands[field.index()]);
      .                                   }
      .                               }
      .                               AggregateKind::Adt(..)
      .                               | AggregateKind::Array(..)
      .                               | AggregateKind::Tuple { .. } => (),
-- line 1350 ----------------------------------------
-- line 1448 ----------------------------------------
      .                               }
      .                               _ => propagate_closure_used_mut_place(self, place),
      .                           }
      .                       }
      .                       Operand::Constant(..) => {}
      .                   }
      .               }
      .           
 24,648 ( 0.00%)      fn consume_operand(
      .                   &mut self,
      .                   location: Location,
      .                   (operand, span): (&'cx Operand<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
 11,000 ( 0.00%)          match *operand {
  1,176 ( 0.00%)              Operand::Copy(place) => {
      .                           // copy of place: check if this is "copy of frozen path"
      .                           // (FIXME: see check_loans.rs)
  2,352 ( 0.00%)                  self.access_place(
      .                               location,
  1,960 ( 0.00%)                      (place, span),
      .                               (Deep, Read(ReadKind::Copy)),
      .                               LocalMutationIsAllowed::No,
      .                               flow_state,
      .                           );
      .           
      .                           // Finally, check if path was already moved.
      .                           self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               InitializationRequiringAction::Use,
      .                               (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
  3,294 ( 0.00%)              Operand::Move(place) => {
      .                           // move of place: check if this is move of already borrowed path
  8,424 ( 0.00%)                  self.access_place(
      .                               location,
  5,490 ( 0.00%)                      (place, span),
      .                               (Deep, Write(WriteKind::Move)),
      .                               LocalMutationIsAllowed::Yes,
      .                               flow_state,
      .                           );
      .           
      .                           // Finally, check if path was already moved.
    984 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
      .                               location,
      .                               InitializationRequiringAction::Use,
    738 ( 0.00%)                      (place.as_ref(), span),
      .                               flow_state,
      .                           );
      .                       }
      .                       Operand::Constant(_) => {}
      .                   }
 16,432 ( 0.00%)      }
      .           
      .               /// Checks whether a borrow of this place is invalidated when the function
      .               /// exits
      .               fn check_for_invalidation_at_exit(
      .                   &mut self,
      .                   location: Location,
      .                   borrow: &BorrowData<'tcx>,
      .                   span: Span,
      .               ) {
      .                   debug!("check_for_invalidation_at_exit({:?})", borrow);
      3 ( 0.00%)          let place = borrow.borrowed_place;
      .                   let mut root_place = PlaceRef { local: place.local, projection: &[] };
      .           
      .                   // FIXME(nll-rfc#40): do more precise destructor tracking here. For now
      .                   // we just know that all locals are dropped at function exit (otherwise
      .                   // we'll have a memory leak) and assume that all statics have a destructor.
      .                   //
      .                   // FIXME: allow thread-locals to borrow other thread locals?
      .           
      .                   let (might_be_alive, will_be_dropped) =
     21 ( 0.00%)              if self.body.local_decls[root_place.local].is_ref_to_thread_local() {
      .                           // Thread-locals might be dropped after the function exits
      .                           // We have to dereference the outer reference because
      .                           // borrows don't conflict behind shared references.
      .                           root_place.projection = DEREF_PROJECTION;
      .                           (true, true)
      .                       } else {
      .                           (false, self.locals_are_invalidated_at_exit)
      .                       };
      .           
     15 ( 0.00%)          if !will_be_dropped {
      .                       debug!("place_is_invalidated_at_exit({:?}) - won't be dropped", place);
      .                       return;
      .                   }
      .           
      .                   let sd = if might_be_alive { Deep } else { Shallow(None) };
      .           
     36 ( 0.00%)          if places_conflict::borrow_conflicts_with_place(
      6 ( 0.00%)              self.infcx.tcx,
      .                       &self.body,
      .                       place,
      .                       borrow.kind,
     12 ( 0.00%)              root_place,
      .                       sd,
      .                       places_conflict::PlaceConflictBias::Overlap,
      .                   ) {
      .                       debug!("check_for_invalidation_at_exit({:?}): INVALID", place);
      .                       // FIXME: should be talking about the region lifetime instead
      .                       // of just a span here.
      .                       let span = self.infcx.tcx.sess.source_map().end_point(span);
      .                       self.report_borrowed_value_does_not_live_long_enough(
-- line 1553 ----------------------------------------
-- line 1573 ----------------------------------------
      .                       err.buffer(&mut self.errors_buffer);
      .                   }
      .               }
      .           
      .               fn check_activations(&mut self, location: Location, span: Span, flow_state: &Flows<'cx, 'tcx>) {
      .                   // Two-phase borrow support: For each activation that is newly
      .                   // generated at this statement, check if it interferes with
      .                   // another borrow.
  9,828 ( 0.00%)          let borrow_set = self.borrow_set.clone();
 18,778 ( 0.00%)          for &borrow_index in borrow_set.activations_at_location(location) {
      .                       let borrow = &borrow_set[borrow_index];
      .           
      .                       // only mutable borrows should be 2-phase
    500 ( 0.00%)              assert!(match borrow.kind {
      .                           BorrowKind::Shared | BorrowKind::Shallow => false,
      .                           BorrowKind::Unique | BorrowKind::Mut { .. } => true,
      .                       });
      .           
  1,200 ( 0.00%)              self.access_place(
      .                           location,
    600 ( 0.00%)                  (borrow.borrowed_place, span),
    900 ( 0.00%)                  (Deep, Activation(WriteKind::MutableBorrow(borrow.kind), borrow_index)),
      .                           LocalMutationIsAllowed::No,
      .                           flow_state,
      .                       );
      .                       // We do not need to call `check_if_path_or_subpath_is_moved`
      .                       // again, as we already called it when we made the
      .                       // initial reservation.
      .                   }
      .               }
-- line 1602 ----------------------------------------
-- line 1606 ----------------------------------------
      .                   location: Location,
      .                   local: Local,
      .                   place_span: (Place<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   debug!("check_if_reassignment_to_immutable_state({:?})", local);
      .           
      .                   // Check if any of the initializiations of `local` have happened yet:
  1,560 ( 0.00%)          if let Some(init_index) = self.is_local_ever_initialized(local, flow_state) {
      .                       // And, if so, report an error.
      .                       let init = &self.move_data.inits[init_index];
      .                       let span = init.span(&self.body);
      .                       self.report_illegal_reassignment(location, place_span, span, place_span.0);
      .                   }
      .               }
      .           
 26,143 ( 0.00%)      fn check_if_full_path_is_moved(
      .                   &mut self,
      .                   location: Location,
      .                   desired_action: InitializationRequiringAction,
      .                   place_span: (PlaceRef<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   let maybe_uninits = &flow_state.uninits;
      .           
-- line 1630 ----------------------------------------
-- line 1660 ----------------------------------------
      .                   // Therefore, if we seek out the *closest* prefix for which we
      .                   // have a MovePath, that should capture the initialization
      .                   // state for the place scenario.
      .                   //
      .                   // This code covers scenarios 1, 2, and 3.
      .           
      .                   debug!("check_if_full_path_is_moved place: {:?}", place_span.0);
      .                   let (prefix, mpi) = self.move_path_closest_to(place_span.0);
  2,011 ( 0.00%)          if maybe_uninits.contains(mpi) {
      .                       self.report_use_of_moved_or_uninitialized(
      .                           location,
      .                           desired_action,
      .                           (prefix, place_span.0, place_span.1),
      .                           mpi,
      .                       );
      .                   } // Only query longest prefix with a MovePath, not further
      .                   // ancestors; dataflow recurs on children when parents
      .                   // move (to support partial (re)inits).
      .                   //
      .                   // (I.e., querying parents breaks scenario 7; but may want
      .                   // to do such a query based on partial-init feature-gate.)
 16,088 ( 0.00%)      }
      .           
      .               /// Subslices correspond to multiple move paths, so we iterate through the
      .               /// elements of the base array. For each element we check
      .               ///
      .               /// * Does this element overlap with our slice.
      .               /// * Is any part of it uninitialized.
      .               fn check_if_subslice_element_is_moved(
      .                   &mut self,
-- line 1689 ----------------------------------------
-- line 1719 ----------------------------------------
      .                                       return; // don't bother finding other problems.
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   }
      .               }
      .           
 21,923 ( 0.00%)      fn check_if_path_or_subpath_is_moved(
      .                   &mut self,
      .                   location: Location,
      .                   desired_action: InitializationRequiringAction,
      .                   place_span: (PlaceRef<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
  3,986 ( 0.00%)          let maybe_uninits = &flow_state.uninits;
      .           
      .                   // Bad scenarios:
      .                   //
      .                   // 1. Move of `a.b.c`, use of `a` or `a.b`
      .                   //    partial initialization support, one might have `a.x`
      .                   //    initialized but not `a.b`.
      .                   // 2. All bad scenarios from `check_if_full_path_is_moved`
      .                   //
-- line 1742 ----------------------------------------
-- line 1743 ----------------------------------------
      .                   // OK scenarios:
      .                   //
      .                   // 3. Move of `a.b.c`, use of `a.b.d`
      .                   // 4. Uninitialized `a.x`, initialized `a.b`, use of `a.b`
      .                   // 5. Copied `(a.b: &_)`, use of `*(a.b).c`; note that `a.b`
      .                   //    must have been initialized for the use to be sound.
      .                   // 6. Move of `a.b.c` then reinit of `a.b.c.d`, use of `a.b.c.d`
      .           
 13,951 ( 0.00%)          self.check_if_full_path_is_moved(location, desired_action, place_span, flow_state);
      .           
  2,240 ( 0.00%)          if let Some((place_base, ProjectionElem::Subslice { from, to, from_end: false })) =
  1,993 ( 0.00%)              place_span.0.last_projection()
      .                   {
      .                       let place_ty = place_base.ty(self.body(), self.infcx.tcx);
      .                       if let ty::Array(..) = place_ty.ty.kind() {
      .                           self.check_if_subslice_element_is_moved(
      .                               location,
      .                               desired_action,
      .                               (place_base, place_span.1),
      .                               maybe_uninits,
-- line 1762 ----------------------------------------
-- line 1772 ----------------------------------------
      .                   //
      .                   // (Distinct from handling of scenarios 1+2+4 above because
      .                   // `place` does not interfere with suffixes of its prefixes,
      .                   // e.g., `a.b.c` does not interfere with `a.b.d`)
      .                   //
      .                   // This code covers scenario 1.
      .           
      .                   debug!("check_if_path_or_subpath_is_moved place: {:?}", place_span.0);
  7,972 ( 0.00%)          if let Some(mpi) = self.move_path_for_place(place_span.0) {
  6,072 ( 0.00%)              let uninit_mpi = self
      .                           .move_data
      .                           .find_in_move_path_or_its_descendants(mpi, |mpi| maybe_uninits.contains(mpi));
      .           
  3,036 ( 0.00%)              if let Some(uninit_mpi) = uninit_mpi {
      .                           self.report_use_of_moved_or_uninitialized(
      .                               location,
      .                               desired_action,
      .                               (place_span.0, place_span.0, place_span.1),
      .                               uninit_mpi,
      .                           );
      .                           return; // don't bother finding other problems.
      .                       }
      .                   }
 15,944 ( 0.00%)      }
      .           
      .               /// Currently MoveData does not store entries for all places in
      .               /// the input MIR. For example it will currently filter out
      .               /// places that are Copy; thus we do not track places of shared
      .               /// reference type. This routine will walk up a place along its
      .               /// prefixes, searching for a foundational place that *is*
      .               /// tracked in the MoveData.
      .               ///
      .               /// An Err result includes a tag indicated why the search failed.
      .               /// Currently this can only occur if the place is built off of a
      .               /// static variable, as we do not track those in the MoveData.
      .               fn move_path_closest_to(&mut self, place: PlaceRef<'tcx>) -> (PlaceRef<'tcx>, MovePathIndex) {
 26,143 ( 0.00%)          match self.move_data.rev_lookup.find(place) {
      .                       LookupResult::Parent(Some(mpi)) | LookupResult::Exact(mpi) => {
      .                           (self.move_data.move_paths[mpi].place.as_ref(), mpi)
      .                       }
      .                       LookupResult::Parent(None) => panic!("should have move path for every Local"),
      .                   }
      .               }
      .           
      .               fn move_path_for_place(&mut self, place: PlaceRef<'tcx>) -> Option<MovePathIndex> {
      .                   // If returns None, then there is no move path corresponding
      .                   // to a direct owner of `place` (which means there is nothing
      .                   // that borrowck tracks for its analysis).
      .           
 18,185 ( 0.00%)          match self.move_data.rev_lookup.find(place) {
      .                       LookupResult::Parent(_) => None,
      .                       LookupResult::Exact(mpi) => Some(mpi),
      .                   }
      .               }
      .           
      .               fn check_if_assigned_path_is_moved(
      .                   &mut self,
      .                   location: Location,
      .                   (place, span): (Place<'tcx>, Span),
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) {
      .                   debug!("check_if_assigned_path_is_moved place: {:?}", place);
      .           
      .                   // None case => assigning to `x` does not require `x` be initialized.
     36 ( 0.00%)          for (place_base, elem) in place.iter_projections().rev() {
    204 ( 0.00%)              match elem {
      .                           ProjectionElem::Index(_/*operand*/) |
      .                           ProjectionElem::ConstantIndex { .. } |
      .                           // assigning to P[i] requires P to be valid.
      .                           ProjectionElem::Downcast(_/*adt_def*/, _/*variant_idx*/) =>
      .                           // assigning to (P->variant) is okay if assigning to `P` is okay
      .                           //
      .                           // FIXME: is this true even if P is an adt with a dtor?
      .                           { }
      .           
      .                           // assigning to (*P) requires P to be initialized
      .                           ProjectionElem::Deref => {
    126 ( 0.00%)                      self.check_if_full_path_is_moved(
      .                                   location, InitializationRequiringAction::Use,
    108 ( 0.00%)                          (place_base, span), flow_state);
      .                               // (base initialized; no need to
      .                               // recur further)
      .                               break;
      .                           }
      .           
      .                           ProjectionElem::Subslice { .. } => {
      .                               panic!("we don't allow assignments to subslices, location: {:?}",
      .                                      location);
      .                           }
      .           
      .                           ProjectionElem::Field(..) => {
      .                               // if type of `P` has a dtor, then
      .                               // assigning to `P.f` requires `P` itself
      .                               // be already initialized
      .                               let tcx = self.infcx.tcx;
     31 ( 0.00%)                      let base_ty = place_base.ty(self.body(), tcx).ty;
     93 ( 0.00%)                      match base_ty.kind() {
    186 ( 0.00%)                          ty::Adt(def, _) if def.has_dtor(tcx) => {
      .                                       self.check_if_path_or_subpath_is_moved(
      .                                           location, InitializationRequiringAction::Assignment,
      .                                           (place_base, span), flow_state);
      .           
      .                                       // (base initialized; no need to
      .                                       // recur further)
      .                                       break;
      .                                   }
-- line 1877 ----------------------------------------
-- line 1931 ----------------------------------------
      .           
      .                       // Shallow so that we'll stop at any dereference; we'll
      .                       // report errors about issues with such bases elsewhere.
      .                       let maybe_uninits = &flow_state.uninits;
      .           
      .                       // Find the shortest uninitialized prefix you can reach
      .                       // without going over a Deref.
      .                       let mut shortest_uninit_seen = None;
    698 ( 0.00%)              for prefix in this.prefixes(base, PrefixSet::Shallow) {
     63 ( 0.00%)                  let mpi = match this.move_path_for_place(prefix) {
      .                               Some(mpi) => mpi,
      .                               None => continue,
      .                           };
      .           
     16 ( 0.00%)                  if maybe_uninits.contains(mpi) {
      .                               debug!(
      .                                   "check_parent_of_field updating shortest_uninit_seen from {:?} to {:?}",
      .                                   shortest_uninit_seen,
      .                                   Some((prefix, mpi))
      .                               );
      .                               shortest_uninit_seen = Some((prefix, mpi));
      .                           } else {
      .                               debug!("check_parent_of_field {:?} is definitely initialized", (prefix, mpi));
      .                           }
      .                       }
      .           
     93 ( 0.00%)              if let Some((prefix, mpi)) = shortest_uninit_seen {
      .                           // Check for a reassignment into an uninitialized field of a union (for example,
      .                           // after a move out). In this case, do not report an error here. There is an
      .                           // exception, if this is the first assignment into the union (that is, there is
      .                           // no move out from an earlier location) then this is an attempt at initialization
      .                           // of the union - we should error in that case.
      .                           let tcx = this.infcx.tcx;
      .                           if base.ty(this.body(), tcx).ty.is_union() {
      .                               if this.move_data.path_map[mpi].iter().any(|moi| {
-- line 1965 ----------------------------------------
-- line 1979 ----------------------------------------
      .                   }
      .               }
      .           
      .               /// Checks the permissions for the given place and read or write kind
      .               ///
      .               /// Returns `true` if an error is reported.
      .               fn check_access_permissions(
      .                   &mut self,
  9,432 ( 0.00%)          (place, span): (Place<'tcx>, Span),
      .                   kind: ReadOrWrite,
      .                   is_local_mutation_allowed: LocalMutationIsAllowed,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .                   location: Location,
      .               ) -> bool {
      .                   debug!(
      .                       "check_access_permissions({:?}, {:?}, is_local_mutation_allowed: {:?})",
      .                       place, kind, is_local_mutation_allowed
      .                   );
      .           
      .                   let error_access;
      .                   let the_place_err;
      .           
 73,010 ( 0.01%)          match kind {
      .                       Reservation(WriteKind::MutableBorrow(
      .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
      .                       ))
      .                       | Write(WriteKind::MutableBorrow(
      .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
      .                       )) => {
  1,318 ( 0.00%)                  let is_local_mutation_allowed = match borrow_kind {
      .                               BorrowKind::Unique => LocalMutationIsAllowed::Yes,
      .                               BorrowKind::Mut { .. } => is_local_mutation_allowed,
      .                               BorrowKind::Shared | BorrowKind::Shallow => unreachable!(),
      .                           };
    924 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
      .                               Ok(root_place) => {
      .                                   self.add_used_mut(root_place, flow_state);
      .                                   return false;
      .                               }
      .                               Err(place_err) => {
      .                                   error_access = AccessKind::MutableBorrow;
      .                                   the_place_err = place_err;
      .                               }
      .                           }
      .                       }
      .                       Reservation(WriteKind::Mutate) | Write(WriteKind::Mutate) => {
  9,520 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
      .                               Ok(root_place) => {
      .                                   self.add_used_mut(root_place, flow_state);
      .                                   return false;
      .                               }
      .                               Err(place_err) => {
      .                                   error_access = AccessKind::Mutate;
      .                                   the_place_err = place_err;
      .                               }
-- line 2033 ----------------------------------------
-- line 2041 ----------------------------------------
      .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
      .                       )
      .                       | Write(
      .                           WriteKind::Move
      .                           | WriteKind::StorageDeadOrDrop
      .                           | WriteKind::MutableBorrow(BorrowKind::Shared)
      .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
      .                       ) => {
  4,910 ( 0.00%)                  if let (Err(_), true) = (
 17,185 ( 0.00%)                      self.is_mutable(place.as_ref(), is_local_mutation_allowed),
      .                               self.errors_buffer.is_empty(),
      .                           ) {
      .                               // rust-lang/rust#46908: In pure NLL mode this code path should be
      .                               // unreachable, but we use `delay_span_bug` because we can hit this when
      .                               // dereferencing a non-Copy raw pointer *and* have `-Ztreat-err-as-bug`
      .                               // enabled. We don't want to ICE for that case, as other errors will have
      .                               // been emitted (#52262).
      .                               self.infcx.tcx.sess.delay_span_bug(
-- line 2058 ----------------------------------------
-- line 2094 ----------------------------------------
      .                   if previously_initialized {
      .                       self.report_mutability_error(place, span, the_place_err, error_access, location);
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
  8,080 ( 0.00%)      fn is_local_ever_initialized(
      .                   &self,
      .                   local: Local,
      .                   flow_state: &Flows<'cx, 'tcx>,
      .               ) -> Option<InitIndex> {
  4,848 ( 0.00%)          let mpi = self.move_data.rev_lookup.find_local(local);
  1,616 ( 0.00%)          let ii = &self.move_data.init_path_map[mpi];
  6,621 ( 0.00%)          for &index in ii {
  3,546 ( 0.00%)              if flow_state.ever_inits.contains(index) {
      .                           return Some(index);
      .                       }
      .                   }
      .                   None
  6,464 ( 0.00%)      }
      .           
      .               /// Adds the place into the used mutable variables set
  5,968 ( 0.00%)      fn add_used_mut(&mut self, root_place: RootPlace<'tcx>, flow_state: &Flows<'cx, 'tcx>) {
      2 ( 0.00%)          match root_place {
  4,476 ( 0.00%)              RootPlace { place_local: local, place_projection: [], is_local_mutation_allowed } => {
      .                           // If the local may have been initialized, and it is now currently being
      .                           // mutated, then it is justified to be annotated with the `mut`
      .                           // keyword, since the mutation may be a possible reassignment.
  2,847 ( 0.00%)                  if is_local_mutation_allowed != LocalMutationIsAllowed::Yes
  4,068 ( 0.00%)                      && self.is_local_ever_initialized(local, flow_state).is_some()
      .                           {
      .                               self.used_mut.insert(local);
      .                           }
      .                       }
      .                       RootPlace {
      .                           place_local: _,
      .                           place_projection: _,
      .                           is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
-- line 2133 ----------------------------------------
-- line 2140 ----------------------------------------
      .                           if let Some(field) = self.is_upvar_field_projection(PlaceRef {
      .                               local: place_local,
      .                               projection: place_projection,
      .                           }) {
      .                               self.used_mut_upvars.push(field);
      .                           }
      .                       }
      .                   }
  5,744 ( 0.00%)      }
      .           
      .               /// Whether this value can be written or borrowed mutably.
      .               /// Returns the root place if the place passed in is a projection.
 46,376 ( 0.01%)      fn is_mutable(
      .                   &self,
      .                   place: PlaceRef<'tcx>,
      .                   is_local_mutation_allowed: LocalMutationIsAllowed,
      .               ) -> Result<RootPlace<'tcx>, PlaceRef<'tcx>> {
      .                   debug!("is_mutable: place={:?}, is_local...={:?}", place, is_local_mutation_allowed);
 13,186 ( 0.00%)          match place.last_projection() {
      .                       None => {
  3,947 ( 0.00%)                  let local = &self.body.local_decls[place.local];
 11,841 ( 0.00%)                  match local.mutability {
    756 ( 0.00%)                      Mutability::Not => match is_local_mutation_allowed {
  2,268 ( 0.00%)                          LocalMutationIsAllowed::Yes => Ok(RootPlace {
      .                                       place_local: place.local,
      .                                       place_projection: place.projection,
      .                                       is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
      .                                   }),
      .                                   LocalMutationIsAllowed::ExceptUpvars => Ok(RootPlace {
      .                                       place_local: place.local,
      .                                       place_projection: place.projection,
      .                                       is_local_mutation_allowed: LocalMutationIsAllowed::ExceptUpvars,
      .                                   }),
      .                                   LocalMutationIsAllowed::No => Err(place),
      .                               },
  7,138 ( 0.00%)                      Mutability::Mut => Ok(RootPlace {
      .                                   place_local: place.local,
      .                                   place_projection: place.projection,
      .                                   is_local_mutation_allowed,
      .                               }),
      .                           }
      .                       }
      .                       Some((place_base, elem)) => {
    807 ( 0.00%)                  match elem {
      .                               ProjectionElem::Deref => {
    272 ( 0.00%)                          let base_ty = place_base.ty(self.body(), self.infcx.tcx).ty;
      .           
      .                                   // Check the kind of deref to decide
    816 ( 0.00%)                          match base_ty.kind() {
      .                                       ty::Ref(_, _, mutbl) => {
    272 ( 0.00%)                                  match mutbl {
      .                                               // Shared borrowed data is never mutable
      .                                               hir::Mutability::Not => Err(place),
      .                                               // Mutably borrowed data is mutable, but only if we have a
      .                                               // unique path to the `&mut`
      .                                               hir::Mutability::Mut => {
    272 ( 0.00%)                                          let mode = match self.is_upvar_field_projection(place) {
      5 ( 0.00%)                                              Some(field) if self.upvars[field.index()].by_ref => {
      .                                                           is_local_mutation_allowed
      .                                                       }
      .                                                       _ => LocalMutationIsAllowed::Yes,
      .                                                   };
      .           
    816 ( 0.00%)                                          self.is_mutable(place_base, mode)
      .                                               }
      .                                           }
      .                                       }
      .                                       ty::RawPtr(tnm) => {
      .                                           match tnm.mutbl {
      .                                               // `*const` raw pointers are not mutable
      .                                               hir::Mutability::Not => Err(place),
      .                                               // `*mut` raw pointers are always mutable, regardless of
-- line 2211 ----------------------------------------
-- line 2228 ----------------------------------------
      .                               // All other projections are owned by their base path, so mutable if
      .                               // base path is mutable
      .                               ProjectionElem::Field(..)
      .                               | ProjectionElem::Index(..)
      .                               | ProjectionElem::ConstantIndex { .. }
      .                               | ProjectionElem::Subslice { .. }
      .                               | ProjectionElem::Downcast(..) => {
      .                                   let upvar_field_projection = self.is_upvar_field_projection(place);
    266 ( 0.00%)                          if let Some(field) = upvar_field_projection {
      .                                       let upvar = &self.upvars[field.index()];
      .                                       debug!(
      .                                           "is_mutable: upvar.mutability={:?} local_mutation_is_allowed={:?} \
      .                                            place={:?}, place_base={:?}",
      .                                           upvar, is_local_mutation_allowed, place, place_base
      .                                       );
      5 ( 0.00%)                              match (upvar.place.mutability, is_local_mutation_allowed) {
      .                                           (
      .                                               Mutability::Not,
      .                                               LocalMutationIsAllowed::No
      .                                               | LocalMutationIsAllowed::ExceptUpvars,
      .                                           ) => Err(place),
      .                                           (Mutability::Not, LocalMutationIsAllowed::Yes)
      .                                           | (Mutability::Mut, _) => {
      .                                               // Subtle: this is an upvar
-- line 2251 ----------------------------------------
-- line 2270 ----------------------------------------
      .                                               // fn main() {
      .                                               //     let var = Vec::new();
      .                                               //     foo(move || {
      .                                               //         var.push(1);
      .                                               //     });
      .                                               // }
      .                                               // ```
      .                                               let _ =
      9 ( 0.00%)                                          self.is_mutable(place_base, is_local_mutation_allowed)?;
      .                                               Ok(RootPlace {
      .                                                   place_local: place.local,
      .                                                   place_projection: place.projection,
      .                                                   is_local_mutation_allowed,
      .                                               })
      .                                           }
      .                                       }
      .                                   } else {
      .                                       self.is_mutable(place_base, is_local_mutation_allowed)
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   }
 33,728 ( 0.01%)      }
      .           
      .               /// If `place` is a field projection, and the field is being projected from a closure type,
      .               /// then returns the index of the field being projected. Note that this closure will always
      .               /// be `self` in the current MIR, because that is the only time we directly access the fields
      .               /// of a closure type.
      .               fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {
  2,421 ( 0.00%)          path_utils::is_upvar_field_projection(self.infcx.tcx, &self.upvars, place_ref, self.body())
      .               }
      .           }
      .           
      .           /// The degree of overlap between 2 places for borrow-checking.
      .           enum Overlap {
      .               /// The places might partially overlap - in this case, we give
      .               /// up and say that they might conflict. This occurs when
      .               /// different fields of a union are borrowed. For example,
-- line 2308 ----------------------------------------

158,571 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs
--------------------------------------------------------------------------------
Ir                 

-- line 55 ----------------------------------------
        .           ///   `ctxt` values depend partly on the crate size and partly on the form of
        .           ///   the code. No crates in `rustc-perf` need more than 15 bits for `ctxt`,
        .           ///   but larger crates might need more than 16 bits.
        .           ///
        .           /// In order to reliably use parented spans in incremental compilation,
        .           /// the dependency to the parent definition's span. This is performed
        .           /// using the callback `SPAN_TRACK` to access the query engine.
        .           ///
   82,372 ( 0.01%)  #[derive(Clone, Copy, Eq, PartialEq, Hash)]
        .           // FIXME(@lcnr): Enable this attribute once the bootstrap
        .           // compiler knows of `rustc_pass_by_value`.
        .           //
        .           // Right now, this lint would only trigger when compiling the
        .           // stage 2 compiler, which is fairly annoying as there are
        .           // a lot of places using `&Span` right now. After the next bootstrap bump,
        .           // the lint will already trigger when using stage 1, which is a lot less annoying.
        .           //
        .           // #[cfg_attr(not(bootstrap), rustc_pass_by_value)]
        .           pub struct Span {
    5,578 ( 0.00%)      base_or_index: u32,
    3,050 ( 0.00%)      len_or_tag: u16,
    3,646 ( 0.00%)      ctxt_or_zero: u16,
        .           }
        .           
        .           const LEN_TAG: u16 = 0b1000_0000_0000_0000;
        .           const MAX_LEN: u32 = 0b0111_1111_1111_1111;
        .           const MAX_CTXT: u32 = 0b1111_1111_1111_1111;
        .           
        .           /// Dummy span, both position and length are zero, syntax context is zero as well.
        .           pub const DUMMY_SP: Span = Span { base_or_index: 0, len_or_tag: 0, ctxt_or_zero: 0 };
-- line 84 ----------------------------------------
-- line 86 ----------------------------------------
        .           impl Span {
        .               #[inline]
        .               pub fn new(
        .                   mut lo: BytePos,
        .                   mut hi: BytePos,
        .                   ctxt: SyntaxContext,
        .                   parent: Option<LocalDefId>,
        .               ) -> Self {
  130,205 ( 0.02%)          if lo > hi {
        .                       std::mem::swap(&mut lo, &mut hi);
        .                   }
        .           
  260,392 ( 0.05%)          let (base, len, ctxt2) = (lo.0, hi.0 - lo.0, ctxt.as_u32());
        .           
1,114,375 ( 0.20%)          if len <= MAX_LEN && ctxt2 <= MAX_CTXT && parent.is_none() {
        .                       // Inline format.
        .                       Span { base_or_index: base, len_or_tag: len as u16, ctxt_or_zero: ctxt2 as u16 }
        .                   } else {
        .                       // Interned format.
        .                       let index =
       70 ( 0.00%)                  with_span_interner(|interner| interner.intern(&SpanData { lo, hi, ctxt, parent }));
        .                       Span { base_or_index: index, len_or_tag: LEN_TAG, ctxt_or_zero: 0 }
        .                   }
  279,118 ( 0.05%)      }
        .           
        .               #[inline]
        .               pub fn data(self) -> SpanData {
        .                   let data = self.data_untracked();
        .                   if let Some(parent) = data.parent {
        .                       (*SPAN_TRACK)(parent);
        .                   }
        .                   data
        .               }
        .           
        .               /// Internal function to translate between an encoded span and the expanded representation.
        .               /// This function must not be used outside the incremental engine.
        .               #[inline]
        .               pub fn data_untracked(self) -> SpanData {
1,189,341 ( 0.21%)          if self.len_or_tag != LEN_TAG {
        .                       // Inline format.
        .                       debug_assert!(self.len_or_tag as u32 <= MAX_LEN);
        .                       SpanData {
        .                           lo: BytePos(self.base_or_index),
1,065,862 ( 0.19%)                  hi: BytePos(self.base_or_index + self.len_or_tag as u32),
        .                           ctxt: SyntaxContext::from_u32(self.ctxt_or_zero as u32),
        .                           parent: None,
        .                       }
        .                   } else {
        .                       // Interned format.
        .                       debug_assert!(self.ctxt_or_zero == 0);
        .                       let index = self.base_or_index;
        .                       with_span_interner(|interner| interner.spans[index as usize])
        .                   }
  377,123 ( 0.07%)      }
        .           }
        .           
        4 ( 0.00%)  #[derive(Default)]
        .           pub struct SpanInterner {
        .               spans: FxIndexSet<SpanData>,
        .           }
        .           
        .           impl SpanInterner {
       21 ( 0.00%)      fn intern(&mut self, span_data: &SpanData) -> u32 {
       28 ( 0.00%)          let (index, _) = self.spans.insert_full(*span_data);
        .                   index as u32
       28 ( 0.00%)      }
        .           }
        .           
        .           // If an interner exists, return it. Otherwise, prepare a fresh one.
        .           #[inline]
        .           fn with_span_interner<T, F: FnOnce(&mut SpanInterner) -> T>(f: F) -> T {
        .               crate::with_session_globals(|session_globals| f(&mut *session_globals.span_interner.lock()))
        .           }

1,347,583 ( 0.24%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs
--------------------------------------------------------------------------------
Ir               

-- line 24 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {
      .               fn tag(&self) -> &'static str {
      .                   "Equate"
      .               }
      .           
      .               fn tcx(&self) -> TyCtxt<'tcx> {
  6,421 ( 0.00%)          self.fields.tcx()
  5,525 ( 0.00%)      }
      .           
      .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
    352 ( 0.00%)          self.fields.param_env
      .               }
      .           
      .               fn a_is_expected(&self) -> bool {
 10,994 ( 0.00%)          self.a_is_expected
      .               }
      .           
  4,465 ( 0.00%)      fn relate_item_substs(
      .                   &mut self,
      .                   _item_def_id: DefId,
      .                   a_subst: SubstsRef<'tcx>,
      .                   b_subst: SubstsRef<'tcx>,
      .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
      .                   // N.B., once we are equating types, we don't care about
      .                   // variance, so don't try to lookup the variance here. This
      .                   // also avoids some cycles (e.g., #41849) since looking up
      .                   // variance requires computing types which can require
      .                   // performing trait matching (which then performs equality
      .                   // unification).
      .           
    893 ( 0.00%)          relate::relate_substs(self, None, a_subst, b_subst)
  5,358 ( 0.00%)      }
      .           
      .               fn relate_with_variance<T: Relate<'tcx>>(
      .                   &mut self,
      .                   _: ty::Variance,
      .                   _info: ty::VarianceDiagInfo<'tcx>,
      .                   a: T,
      .                   b: T,
      .               ) -> RelateResult<'tcx, T> {
      .                   self.relate(a, b)
      .               }
      .           
177,741 ( 0.03%)      fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {
      .                   debug!("{}.tys({:?}, {:?})", self.tag(), a, b);
 19,749 ( 0.00%)          if a == b {
      .                       return Ok(a);
      .                   }
      .           
 22,978 ( 0.00%)          let infcx = self.fields.infcx;
 22,978 ( 0.00%)          let a = infcx.inner.borrow_mut().type_variables().replace_if_possible(a);
 22,978 ( 0.00%)          let b = infcx.inner.borrow_mut().type_variables().replace_if_possible(b);
      .           
      .                   debug!("{}.tys: replacements ({:?}, {:?})", self.tag(), a, b);
      .           
 82,030 ( 0.01%)          match (a.kind(), b.kind()) {
      .                       (&ty::Infer(TyVar(a_id)), &ty::Infer(TyVar(b_id))) => {
      .                           infcx.inner.borrow_mut().type_variables().equate(a_id, b_id);
      .                       }
      .           
  1,002 ( 0.00%)              (&ty::Infer(TyVar(a_id)), _) => {
  4,008 ( 0.00%)                  self.fields.instantiate(b, RelationDir::EqTo, a_id, self.a_is_expected)?;
      .                       }
      .           
  3,349 ( 0.00%)              (_, &ty::Infer(TyVar(b_id))) => {
 16,745 ( 0.00%)                  self.fields.instantiate(a, RelationDir::EqTo, b_id, self.a_is_expected)?;
      .                       }
      .           
      .                       _ => {
 47,684 ( 0.01%)                  self.fields.infcx.super_combine_tys(self, a, b)?;
      .                       }
      .                   }
      .           
      .                   Ok(a)
177,741 ( 0.03%)      }
      .           
 10,746 ( 0.00%)      fn regions(
      .                   &mut self,
      .                   a: ty::Region<'tcx>,
      .                   b: ty::Region<'tcx>,
      .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
      .                   debug!("{}.regions({:?}, {:?})", self.tag(), a, b);
  3,582 ( 0.00%)          let origin = Subtype(Box::new(self.fields.trace.clone()));
  7,164 ( 0.00%)          self.fields
      .                       .infcx
      .                       .inner
      .                       .borrow_mut()
      .                       .unwrap_region_constraints()
  7,164 ( 0.00%)              .make_eqregion(origin, a, b);
  2,388 ( 0.00%)          Ok(a)
 10,746 ( 0.00%)      }
      .           
      .               fn consts(
      .                   &mut self,
      .                   a: &'tcx ty::Const<'tcx>,
      .                   b: &'tcx ty::Const<'tcx>,
      .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
  1,309 ( 0.00%)          self.fields.infcx.super_combine_consts(self, a, b)
      .               }
      .           
      .               fn binders<T>(
      .                   &mut self,
      .                   a: ty::Binder<'tcx, T>,
      .                   b: ty::Binder<'tcx, T>,
      .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>
      .               where
-- line 131 ----------------------------------------

 66,568 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 36 ----------------------------------------
      .           use rustc_session::parse::ParseSess;
      .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
      .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
      .           use tracing::debug;
      .           
      .           use std::ops::Range;
      .           use std::{cmp, mem, slice};
      .           
  5,247 ( 0.00%)  bitflags::bitflags! {
      .               struct Restrictions: u8 {
      .                   const STMT_EXPR         = 1 << 0;
      .                   const NO_STRUCT_LITERAL = 1 << 1;
      .                   const CONST_EXPR        = 1 << 2;
      .               }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
      .                               $self.bump();
      .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
      .                           }
      .                       }
      .                   }
      .               };
      .           }
      .           
  9,671 ( 0.00%)  #[derive(Clone)]
      .           pub struct Parser<'a> {
    293 ( 0.00%)      pub sess: &'a ParseSess,
      .               /// The current token.
    190 ( 0.00%)      pub token: Token,
      .               /// The spacing for the current token
    154 ( 0.00%)      pub token_spacing: Spacing,
      .               /// The previous token.
    285 ( 0.00%)      pub prev_token: Token,
    213 ( 0.00%)      pub capture_cfg: bool,
    485 ( 0.00%)      restrictions: Restrictions,
    308 ( 0.00%)      expected_tokens: Vec<TokenType>,
      .               // Important: This must only be advanced from `next_tok`
      .               // to ensure that `token_cursor.num_next_calls` is updated properly
      .               token_cursor: TokenCursor,
    308 ( 0.00%)      desugar_doc_comments: bool,
      .               /// This field is used to keep track of how many left angle brackets we have seen. This is
      .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
      .               /// appropriately.
      .               ///
      .               /// See the comments in the `parse_path_segment` function for more details.
    308 ( 0.00%)      unmatched_angle_bracket_count: u32,
    462 ( 0.00%)      max_angle_bracket_count: u32,
      .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
      .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
      .               /// error.
    154 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
      .               last_unexpected_token_span: Option<Span>,
      .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
      .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
      .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
      .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
      .               subparser_name: Option<&'static str>,
      .               capture_state: CaptureState,
      .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
      .           /// the first macro inner attribute to invoke a proc-macro).
      .           /// When create a `TokenStream`, the inner attributes get inserted
      .           /// into the proper place in the token stream.
      .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
      .           
      .           /// Controls how we capture tokens. Capturing can be expensive,
      .           /// so we try to avoid performing capturing in cases where
      .           /// we will never need an `AttrAnnotatedTokenStream`
    154 ( 0.00%)  #[derive(Copy, Clone)]
      .           pub enum Capturing {
      .               /// We aren't performing any capturing - this is the default mode.
      .               No,
      .               /// We are capturing tokens
      .               Yes,
      .           }
      .           
    660 ( 0.00%)  #[derive(Clone)]
      .           struct CaptureState {
    616 ( 0.00%)      capturing: Capturing,
    154 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
      .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
      .           }
      .           
      .           impl<'a> Drop for Parser<'a> {
      .               fn drop(&mut self) {
  1,356 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
      .               }
      .           }
      .           
 20,892 ( 0.00%)  #[derive(Clone)]
      .           struct TokenCursor {
      .               frame: TokenCursorFrame,
  4,976 ( 0.00%)      stack: Vec<TokenCursorFrame>,
      .               desugar_doc_comments: bool,
      .               // Counts the number of calls to `next` or `next_desugared`,
      .               // depending on whether `desugar_doc_comments` is set.
  1,525 ( 0.00%)      num_next_calls: usize,
      .               // During parsing, we may sometimes need to 'unglue' a
      .               // glued token into two component tokens
      .               // (e.g. '>>' into '>' and '>), so that the parser
      .               // can consume them one at a time. This process
      .               // bypasses the normal capturing mechanism
      .               // (e.g. `num_next_calls` will not be incremented),
      .               // since the 'unglued' tokens due not exist in
      .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
      .               // in `Option<Vec<u8>>` requires us to unglue
      .               // the trailing `>>` token. The `break_last_token`
      .               // field is used to track this token - it gets
      .               // appended to the captured stream when
      .               // we evaluate a `LazyTokenStream`
      .               break_last_token: bool,
      .           }
      .           
  9,414 ( 0.00%)  #[derive(Clone)]
      .           struct TokenCursorFrame {
  2,913 ( 0.00%)      delim: token::DelimToken,
      .               span: DelimSpan,
      .               open_delim: bool,
  5,826 ( 0.00%)      tree_cursor: tokenstream::Cursor,
      .               close_delim: bool,
      .           }
      .           
      .           impl TokenCursorFrame {
      .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
  1,205 ( 0.00%)          TokenCursorFrame {
      .                       delim,
      .                       span,
      .                       open_delim: false,
  2,811 ( 0.00%)              tree_cursor: tts.into_trees(),
      .                       close_delim: false,
      .                   }
      .               }
      .           }
      .           
      .           impl TokenCursor {
207,876 ( 0.04%)      fn next(&mut self) -> (Token, Spacing) {
      .                   loop {
102,752 ( 0.02%)              let (tree, spacing) = if !self.frame.open_delim {
  2,329 ( 0.00%)                  self.frame.open_delim = true;
 11,645 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
201,410 ( 0.04%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
      .                           tree
  9,548 ( 0.00%)              } else if !self.frame.close_delim {
  2,246 ( 0.00%)                  self.frame.close_delim = true;
 11,230 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
  4,492 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
 29,198 ( 0.01%)                  self.frame = frame;
      .                           continue;
      .                       } else {
  5,076 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
      .                       };
      .           
 39,304 ( 0.01%)              match tree {
      .                           TokenTree::Token(token) => {
138,584 ( 0.02%)                      return (token, spacing);
      .                           }
      .                           TokenTree::Delimited(sp, delim, tts) => {
      .                               let frame = TokenCursorFrame::new(sp, delim, tts);
      .                               self.stack.push(mem::replace(&mut self.frame, frame));
      .                           }
      .                       }
      .                   }
138,584 ( 0.02%)      }
      .           
 46,370 ( 0.01%)      fn next_desugared(&mut self) -> (Token, Spacing) {
 13,911 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
      .                       (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
      .                           (data, attr_style, span)
      .                       }
 23,185 ( 0.00%)              tok => return tok,
      .                   };
      .           
      .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
      .                   // required to wrap the text.
      .                   let mut num_of_hashes = 0;
      .                   let mut count = 0;
      .                   for ch in data.as_str().chars() {
      .                       count = match ch {
-- line 298 ----------------------------------------
-- line 332 ----------------------------------------
      .                                   .iter()
      .                                   .cloned()
      .                                   .collect::<TokenStream>()
      .                           },
      .                       ),
      .                   ));
      .           
      .                   self.next()
 41,733 ( 0.01%)      }
      .           }
      .           
  4,260 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
      .           enum TokenType {
  3,408 ( 0.00%)      Token(TokenKind),
      .               Keyword(Symbol),
      .               Operator,
      .               Lifetime,
      .               Ident,
      .               Path,
      .               Type,
      .               Const,
      .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
      .               /// The separator token.
      .               sep: Option<TokenKind>,
      .               /// `true` if a trailing separator is allowed.
      .               trailing_sep_allowed: bool,
      .           }
      .           
      .           impl SeqSep {
      .               fn trailing_allowed(t: TokenKind) -> SeqSep {
      9 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
      .               }
      .           
      .               fn none() -> SeqSep {
      .                   SeqSep { sep: None, trailing_sep_allowed: false }
      .               }
      .           }
      .           
      .           pub enum FollowedByType {
      .               Yes,
      .               No,
      .           }
      .           
      .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
    254 ( 0.00%)      Some(match token.kind {
    508 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
    508 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
    508 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
      .                   token::DocComment(..) => "doc comment",
      .                   _ => return None,
      .               })
      .           }
      .           
    889 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
    254 ( 0.00%)      let token_str = pprust::token_to_string(token);
      .               match token_descr_opt(token) {
      .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
    889 ( 0.00%)          _ => format!("`{}`", token_str),
      .               }
    635 ( 0.00%)  }
      .           
      .           impl<'a> Parser<'a> {
  3,374 ( 0.00%)      pub fn new(
      .                   sess: &'a ParseSess,
      .                   tokens: TokenStream,
      .                   desugar_doc_comments: bool,
      .                   subparser_name: Option<&'static str>,
      .               ) -> Self {
    241 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
    482 ( 0.00%)          start_frame.open_delim = true;
      .                   start_frame.close_delim = true;
      .           
  7,471 ( 0.00%)          let mut parser = Parser {
      .                       sess,
    241 ( 0.00%)              token: Token::dummy(),
      .                       token_spacing: Spacing::Alone,
    241 ( 0.00%)              prev_token: Token::dummy(),
      .                       capture_cfg: false,
      .                       restrictions: Restrictions::empty(),
      .                       expected_tokens: Vec::new(),
      .                       token_cursor: TokenCursor {
  1,446 ( 0.00%)                  frame: start_frame,
      .                           stack: Vec::new(),
      .                           num_next_calls: 0,
      .                           desugar_doc_comments,
      .                           break_last_token: false,
      .                       },
      .                       desugar_doc_comments,
      .                       unmatched_angle_bracket_count: 0,
      .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
      .                           capturing: Capturing::No,
      .                           replace_ranges: Vec::new(),
      .                           inner_attr_ranges: Default::default(),
      .                       },
      .                       current_closure: None,
      .                   };
      .           
      .                   // Make parser point to the first token.
    482 ( 0.00%)          parser.bump();
      .           
      .                   parser
  2,169 ( 0.00%)      }
      .           
      .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
      .                   loop {
100,440 ( 0.02%)              let (mut next, spacing) = if self.desugar_doc_comments {
 18,548 ( 0.00%)                  self.token_cursor.next_desugared()
      .                       } else {
 36,309 ( 0.01%)                  self.token_cursor.next()
      .                       };
 66,960 ( 0.01%)              self.token_cursor.num_next_calls += 1;
      .                       // We've retrieved an token from the underlying
      .                       // cursor, so we no longer need to worry about
      .                       // an unglued token. See `break_and_eat` for more details
 16,740 ( 0.00%)              self.token_cursor.break_last_token = false;
 66,960 ( 0.01%)              if next.span.is_dummy() {
      .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
  1,064 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
      .                       }
 56,966 ( 0.01%)              if matches!(
 33,480 ( 0.01%)                  next.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
 66,368 ( 0.01%)              return (next, spacing);
      .                   }
      .               }
      .           
      .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
      .                   match self.expect_one_of(&[], &[]) {
      .                       Err(e) => Err(e),
      .                       // We can get `Ok(true)` from `recover_closing_delimiter`
      .                       // which is called in `expected_one_of_not_found`.
      .                       Ok(_) => FatalError.raise(),
      .                   }
      .               }
      .           
      .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
 14,661 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
  1,629 ( 0.00%)          if self.expected_tokens.is_empty() {
  1,170 ( 0.00%)              if self.token == *t {
    975 ( 0.00%)                  self.bump();
      .                           Ok(false)
      .                       } else {
      .                           self.unexpected_try_recover(t)
      .                       }
      .                   } else {
 17,208 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
      .                   }
 24,435 ( 0.00%)      }
      .           
      .               /// Expect next token to be edible or inedible token.  If edible,
      .               /// then consume it; if inedible, then return without consuming
      .               /// anything.  Signal a fatal error if next token is unexpected.
 20,688 ( 0.00%)      pub fn expect_one_of(
      .                   &mut self,
      .                   edible: &[TokenKind],
      .                   inedible: &[TokenKind],
      .               ) -> PResult<'a, bool /* recovered */> {
  3,448 ( 0.00%)          if edible.contains(&self.token.kind) {
  4,440 ( 0.00%)              self.bump();
      .                       Ok(false)
      .                   } else if inedible.contains(&self.token.kind) {
      .                       // leave it in the input
      .                       Ok(false)
      .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
      .                       FatalError.raise();
      .                   } else {
      .                       self.expected_one_of_not_found(edible, inedible)
      .                   }
 25,860 ( 0.00%)      }
      .           
      .               // Public for rustfmt usage.
      .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
 12,681 ( 0.00%)          self.parse_ident_common(true)
      .               }
      .           
      .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
  9,543 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
      .                       TokenKind::DocComment(..) => {
      .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
      .                       }
      .                       _ => self.expected_ident_found(),
      .                   })
      .               }
      .           
 22,155 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
  3,165 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
 18,990 ( 0.00%)          if !is_raw && ident.is_reserved() {
      .                       let mut err = self.expected_ident_found();
      .                       if recover {
      .                           err.emit();
      .                       } else {
      .                           return Err(err);
      .                       }
      .                   }
 12,660 ( 0.00%)          self.bump();
      .                   Ok(ident)
 31,650 ( 0.01%)      }
      .           
      .               /// Checks if the next token is `tok`, and returns `true` if so.
      .               ///
      .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
      .               /// encountered.
269,052 ( 0.05%)      fn check(&mut self, tok: &TokenKind) -> bool {
117,327 ( 0.02%)          let is_present = self.token == *tok;
 79,716 ( 0.01%)          if !is_present {
169,549 ( 0.03%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
      .                   }
      .                   is_present
269,052 ( 0.05%)      }
      .           
      .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
    180 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
 56,242 ( 0.01%)          let is_present = self.check(tok);
 36,573 ( 0.01%)          if is_present {
  7,386 ( 0.00%)              self.bump()
      .                   }
      .                   is_present
    225 ( 0.00%)      }
      .           
      .               /// If the next token is the given keyword, returns `true` without eating it.
      .               /// An expectation is also added for diagnostics purposes.
  5,325 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
  1,644 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
 43,986 ( 0.01%)          self.token.is_keyword(kw)
      .               }
      .           
      .               /// If the next token is the given keyword, eats it and returns `true`.
      .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
      .               // Public for rustfmt usage.
 13,825 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
 10,650 ( 0.00%)          if self.check_keyword(kw) {
  1,419 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
 13,825 ( 0.00%)      }
      .           
      .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
  1,674 ( 0.00%)          if self.token.is_keyword(kw) {
    333 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
      .               /// If the given word is not a keyword, signals an error.
      .               /// If the next token is not the given word, signals an error.
      .               /// Otherwise, eats it.
     90 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
      .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
     72 ( 0.00%)      }
      .           
      .               /// Is the given keyword `kw` followed by a non-reserved identifier?
 11,448 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
  5,724 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
 12,879 ( 0.00%)      }
      .           
 14,052 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
  5,408 ( 0.00%)          if ok {
      .                       true
      .                   } else {
  1,776 ( 0.00%)              self.expected_tokens.push(typ);
      .                       false
      .                   }
 14,052 ( 0.00%)      }
      .           
      .               fn check_ident(&mut self) -> bool {
  3,630 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
      .               }
      .           
  5,620 ( 0.00%)      fn check_path(&mut self) -> bool {
 12,052 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
  7,025 ( 0.00%)      }
      .           
      .               fn check_type(&mut self) -> bool {
    796 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
      .               }
      .           
      .               fn check_const_arg(&mut self) -> bool {
    760 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
      .               }
      .           
  3,267 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
  1,815 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
      .                       && self.look_ahead(dist + 1, |t| match t.kind {
      .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
      .                           token::OpenDelim(DelimToken::Brace) => true,
      .                           _ => false,
      .                       })
  3,267 ( 0.00%)      }
      .           
      .               /// Checks to see if the next token is either `+` or `+=`.
      .               /// Otherwise returns `false`.
      .               fn check_plus(&mut self) -> bool {
  1,100 ( 0.00%)          self.check_or_expected(
    550 ( 0.00%)              self.token.is_like_plus(),
    550 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
      .                   )
      .               }
      .           
      .               /// Eats the expected token if it's present possibly breaking
      .               /// compound tokens like multi-character operators in process.
      .               /// Returns `true` if the token was eaten.
 21,240 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
 12,390 ( 0.00%)          if self.token.kind == expected {
    640 ( 0.00%)              self.bump();
      .                       return true;
      .                   }
  7,250 ( 0.00%)          match self.token.kind.break_two_token_op() {
      .                       Some((first, second)) if first == expected => {
      .                           let first_span = self.sess.source_map().start_point(self.token.span);
      .                           let second_span = self.token.span.with_lo(first_span.hi());
      .                           self.token = Token::new(first, first_span);
      .                           // Keep track of this token - if we end token capturing now,
      .                           // we'll want to append this token to the captured stream.
      .                           //
      .                           // If we consume any additional tokens, then this token
-- line 682 ----------------------------------------
-- line 684 ----------------------------------------
      .                           // and `next_tok` will set this field to `None`
      .                           self.token_cursor.break_last_token = true;
      .                           // Use the spacing of the glued token as the spacing
      .                           // of the unglued second token.
      .                           self.bump_with((Token::new(second, second_span), self.token_spacing));
      .                           true
      .                       }
      .                       _ => {
  4,350 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
      .                           false
      .                       }
      .                   }
 21,730 ( 0.00%)      }
      .           
      .               /// Eats `+` possibly breaking tokens like `+=` in process.
      .               fn eat_plus(&mut self) -> bool {
    200 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
      .               }
      .           
      .               /// Eats `&` possibly breaking tokens like `&&` in process.
      .               /// Signals an error if `&` is not eaten.
      .               fn expect_and(&mut self) -> PResult<'a, ()> {
    792 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `|` possibly breaking tokens like `||` in process.
      .               /// Signals an error if `|` was not eaten.
      .               fn expect_or(&mut self) -> PResult<'a, ()> {
     18 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
    666 ( 0.00%)      fn eat_lt(&mut self) -> bool {
  4,663 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
  3,038 ( 0.00%)          if ate {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
    356 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
    399 ( 0.00%)              self.max_angle_bracket_count += 1;
      .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
      .                   }
      .                   ate
    666 ( 0.00%)      }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
      .               /// Signals an error if `<` was not eaten.
      .               fn expect_lt(&mut self) -> PResult<'a, ()> {
      .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `>` possibly breaking tokens like `>>` in process.
      .               /// Signals an error if `>` was not eaten.
      .               fn expect_gt(&mut self) -> PResult<'a, ()> {
    534 ( 0.00%)          if self.break_and_eat(token::Gt) {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
    267 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
    178 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
      .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
      .                       }
      .                       Ok(())
      .                   } else {
      .                       self.unexpected()
      .                   }
      .               }
      .           
      .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
      .                   kets.iter().any(|k| match expect {
  4,839 ( 0.00%)              TokenExpectType::Expect => self.check(k),
     45 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
      .                   })
      .               }
      .           
      .               fn parse_seq_to_before_tokens<T>(
      .                   &mut self,
      .                   kets: &[&TokenKind],
      .                   sep: SeqSep,
      .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
      .                   let mut first = true;
      .                   let mut recovered = false;
      .                   let mut trailing = false;
      .                   let mut v = vec![];
      .                   let unclosed_delims = !self.unclosed_delims.is_empty();
      .           
      .                   while !self.expect_any_with_type(kets, expect) {
  5,727 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
      .                           break;
      .                       }
  3,766 ( 0.00%)              if let Some(ref t) = sep.sep {
  4,480 ( 0.00%)                  if first {
      .                               first = false;
      .                           } else {
  3,569 ( 0.00%)                      match self.expect(t) {
      .                                   Ok(false) => {
      .                                       self.current_closure.take();
      .                                   }
      .                                   Ok(true) => {
      .                                       self.current_closure.take();
      .                                       recovered = true;
      .                                       break;
      .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
      .                                               e.cancel();
      .                                               break;
      .                                           }
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
  2,016 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
      .                           trailing = true;
      .                           break;
      .                       }
      .           
  1,621 ( 0.00%)              let t = f(self)?;
  1,020 ( 0.00%)              v.push(t);
      .                   }
      .           
  2,820 ( 0.00%)          Ok((v, trailing, recovered))
      .               }
      .           
      .               fn recover_missing_braces_around_closure_body(
      .                   &mut self,
      .                   closure_spans: ClosureSpans,
      .                   mut expect_err: DiagnosticBuilder<'_>,
      .               ) -> PResult<'a, ()> {
      .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_seq_to_before_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
  3,003 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
      .               }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
  4,970 ( 0.00%)      fn parse_seq_to_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
  1,907 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
    901 ( 0.00%)          if !recovered {
      .                       self.eat(ket);
      .                   }
  5,134 ( 0.00%)          Ok((val, trailing))
  3,976 ( 0.00%)      }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_unspanned_seq<T>(
      .                   &mut self,
      .                   bra: &TokenKind,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
  1,661 ( 0.00%)          self.expect(bra)?;
  3,976 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
      .               }
      .           
      .               fn parse_delim_comma_seq<T>(
      .                   &mut self,
      .                   delim: DelimToken,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_unspanned_seq(
    632 ( 0.00%)              &token::OpenDelim(delim),
    767 ( 0.00%)              &token::CloseDelim(delim),
      .                       SeqSep::trailing_allowed(token::Comma),
      .                       f,
      .                   )
      .               }
      .           
      .               fn parse_paren_comma_seq<T>(
      .                   &mut self,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_delim_comma_seq(token::Paren, f)
      .               }
      .           
      .               /// Advance the parser by one token using provided token as the next one.
215,696 ( 0.04%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
      .                   // Bumping after EOF is a bad sign, usually an infinite loop.
 99,552 ( 0.02%)          if self.prev_token.kind == TokenKind::Eof {
      .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
      .                       self.span_bug(self.token.span, msg);
      .                   }
      .           
      .                   // Update the current and previous tokens.
 66,368 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
 16,592 ( 0.00%)          self.token_spacing = next_spacing;
      .           
      .                   // Diagnostics.
 16,592 ( 0.00%)          self.expected_tokens.clear();
      .               }
      .           
      .               /// Advance the parser by one token.
132,736 ( 0.02%)      pub fn bump(&mut self) {
 66,368 ( 0.01%)          let next_token = self.next_tok(self.token.span);
 99,552 ( 0.02%)          self.bump_with(next_token);
132,736 ( 0.02%)      }
      .           
      .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
      .               /// When `dist == 0` then the current token is looked at.
      .               pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
  1,454 ( 0.00%)          if dist == 0 {
    583 ( 0.00%)              return looker(&self.token);
      .                   }
      .           
  4,794 ( 0.00%)          let frame = &self.token_cursor.frame;
  5,313 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
      .                       let all_normal = (0..dist).all(|i| {
 14,524 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
 19,233 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
      .                       });
      .                       if all_normal {
 23,914 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
  8,421 ( 0.00%)                      Some(tree) => match tree {
  3,783 ( 0.00%)                          TokenTree::Token(token) => looker(token),
      .                                   TokenTree::Delimited(dspan, delim, _) => {
  3,176 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
      .                                   }
      .                               },
  4,331 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
      .                           };
      .                       }
      .                   }
      .           
      .                   let mut cursor = self.token_cursor.clone();
      .                   let mut i = 0;
    539 ( 0.00%)          let mut token = Token::dummy();
    342 ( 0.00%)          while i < dist {
  4,225 ( 0.00%)              token = cursor.next().0;
  1,935 ( 0.00%)              if matches!(
  1,188 ( 0.00%)                  token.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
    180 ( 0.00%)              i += 1;
      .                   }
     88 ( 0.00%)          return looker(&token);
      .               }
      .           
      .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
  6,300 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
  2,047 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
  6,300 ( 0.00%)      }
      .           
      .               /// Parses asyncness: `async` or nothing.
      .               fn parse_asyncness(&mut self) -> Async {
      .                   if self.eat_keyword(kw::Async) {
      .                       let span = self.prev_token.uninterpolated_span();
      .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
      .                   } else {
      .                       Async::No
      .                   }
      .               }
      .           
      .               /// Parses unsafety: `unsafe` or nothing.
    236 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
      .                   if self.eat_keyword(kw::Unsafe) {
    150 ( 0.00%)              Unsafe::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Unsafe::No
      .                   }
    944 ( 0.00%)      }
      .           
      .               /// Parses constness: `const` or nothing.
  2,008 ( 0.00%)      fn parse_constness(&mut self) -> Const {
      .                   // Avoid const blocks to be parsed as const items
    622 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
      .                       && self.eat_keyword(kw::Const)
      .                   {
     55 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Const::No
      .                   }
  3,514 ( 0.00%)      }
      .           
      .               /// Parses inline const expressions.
      .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
      .                   if pat {
      .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
      .                   } else {
      .                       self.sess.gated_spans.gate(sym::inline_const, span);
      .                   }
-- line 1104 ----------------------------------------
-- line 1110 ----------------------------------------
      .                   };
      .                   let blk_span = anon_const.value.span;
      .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
      .               }
      .           
      .               /// Parses mutability (`mut` or nothing).
      .               fn parse_mutability(&mut self) -> Mutability {
      .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
    258 ( 0.00%)      }
      .           
      .               /// Possibly parses mutability (`const` or `mut`).
      .               fn parse_const_or_mut(&mut self) -> Option<Mutability> {
      .                   if self.eat_keyword(kw::Mut) {
      .                       Some(Mutability::Mut)
      .                   } else if self.eat_keyword(kw::Const) {
      .                       Some(Mutability::Not)
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
      .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
     92 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
      .                   {
      .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
      .                       self.bump();
      .                       Ok(Ident::new(symbol, self.prev_token.span))
      .                   } else {
    138 ( 0.00%)              self.parse_ident_common(true)
      .                   }
      .               }
      .           
      .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    412 ( 0.00%)          self.parse_mac_args_common(true).map(P)
      .               }
      .           
      .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
    378 ( 0.00%)          self.parse_mac_args_common(false)
      .               }
      .           
  2,466 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
  2,192 ( 0.00%)          Ok(
  1,478 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
     81 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
     81 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
      .                       {
    988 ( 0.00%)                  match self.parse_token_tree() {
  1,235 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
      .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
      .                               {
    494 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
      .                               }
      .                               _ => unreachable!(),
      .                           }
     54 ( 0.00%)              } else if !delimited_only {
      .                           if self.eat(&token::Eq) {
      .                               let eq_span = self.prev_token.span;
      .           
      .                               // Collect tokens because they are used during lowering to HIR.
      .                               let expr = self.parse_expr_force_collect()?;
      .                               let span = expr.span;
      .           
      .                               let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
-- line 1172 ----------------------------------------
-- line 1173 ----------------------------------------
      .                               MacArgs::Eq(eq_span, Token::new(token_kind, span))
      .                           } else {
      .                               MacArgs::Empty
      .                           }
      .                       } else {
      .                           return self.unexpected();
      .                       },
      .                   )
  1,918 ( 0.00%)      }
      .           
      .               fn parse_or_use_outer_attributes(
      .                   &mut self,
      .                   already_parsed_attrs: Option<AttrWrapper>,
      .               ) -> PResult<'a, AttrWrapper> {
  4,788 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
      .                       Ok(attrs)
      .                   } else {
  2,940 ( 0.00%)              self.parse_outer_attributes()
      .                   }
      .               }
      .           
      .               /// Parses a single token tree from the input.
  3,064 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
  1,149 ( 0.00%)          match self.token.kind {
      .                       token::OpenDelim(..) => {
      .                           let depth = self.token_cursor.stack.len();
      .           
      .                           // We keep advancing the token cursor until we hit
      .                           // the matching `CloseDelim` token.
 13,992 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
      .                               && matches!(self.token.kind, token::CloseDelim(_)))
      .                           {
      .                               // Advance one token at a time, so `TokenCursor::next()`
      .                               // can capture these tokens if necessary.
 10,038 ( 0.00%)                      self.bump();
      .                           }
      .                           // We are still inside the frame corresponding
      .                           // to the delimited stream we captured, so grab
      .                           // the tokens from this frame.
      .                           let frame = &self.token_cursor.frame;
    766 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
    766 ( 0.00%)                  let span = frame.span;
    383 ( 0.00%)                  let delim = frame.delim;
      .                           // Consume close delimiter
    766 ( 0.00%)                  self.bump();
  1,915 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
      .                       }
      .                       token::CloseDelim(_) | token::Eof => unreachable!(),
      .                       _ => {
      .                           self.bump();
      .                           TokenTree::Token(self.prev_token.clone())
      .                       }
      .                   }
  2,681 ( 0.00%)      }
      .           
      .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
      .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
      .                   let mut tts = Vec::new();
      .                   while self.token != token::Eof {
      .                       tts.push(self.parse_token_tree());
      .                   }
      .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
      .                   }
      .                   TokenStream::new(result)
      .               }
      .           
      .               /// Evaluates the closure with restrictions in place.
      .               ///
      .               /// Afters the closure is evaluated, restrictions are reset.
      .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
  1,840 ( 0.00%)          let old = self.restrictions;
  2,299 ( 0.00%)          self.restrictions = res;
      .                   let res = f(self);
  2,026 ( 0.00%)          self.restrictions = old;
      .                   res
      .               }
      .           
  4,256 ( 0.00%)      fn is_crate_vis(&self) -> bool {
  2,660 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
  4,788 ( 0.00%)      }
      .           
      .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
      .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
      .               /// If the following element can't be a tuple (i.e., it's a function definition), then
      .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
      .               /// so emit a proper diagnostic.
      .               // Public for rustfmt usage.
  2,770 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
    554 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
      .           
    277 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
  1,108 ( 0.00%)          if self.is_crate_vis() {
      .                       self.bump(); // `crate`
      .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
      .                       return Ok(Visibility {
      .                           span: self.prev_token.span,
      .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
      .                           tokens: None,
      .                       });
      .                   }
      .           
      .                   if !self.eat_keyword(kw::Pub) {
      .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
      .                       // keyword to grab a span from for inherited visibility; an empty span at the
      .                       // beginning of the current token would seem to be the "Schelling span".
    225 ( 0.00%)              return Ok(Visibility {
    675 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
      .                           kind: VisibilityKind::Inherited,
      .                           tokens: None,
      .                       });
      .                   }
     52 ( 0.00%)          let lo = self.prev_token.span;
      .           
    260 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
      .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
      .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
      .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
      .                       // by the following tokens.
    153 ( 0.00%)              if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
      .                       // account for `pub(crate::foo)`
      .                       {
      .                           // Parse `pub(crate)`.
     51 ( 0.00%)                  self.bump(); // `(`
     34 ( 0.00%)                  self.bump(); // `crate`
     51 ( 0.00%)                  self.expect(&token::CloseDelim(token::Paren))?; // `)`
     17 ( 0.00%)                  let vis = VisibilityKind::Crate(CrateSugar::PubCrate);
      .                           return Ok(Visibility {
     51 ( 0.00%)                      span: lo.to(self.prev_token.span),
      .                               kind: vis,
      .                               tokens: None,
      .                           });
      .                       } else if self.is_keyword_ahead(1, &[kw::In]) {
      .                           // Parse `pub(in path)`.
      .                           self.bump(); // `(`
      .                           self.bump(); // `in`
      .                           let path = self.parse_path(PathStyle::Mod)?; // `path`
-- line 1317 ----------------------------------------
-- line 1338 ----------------------------------------
      .                       } else if let FollowedByType::No = fbt {
      .                           // Provide this diagnostic if a type cannot follow;
      .                           // in particular, if this is not a tuple struct.
      .                           self.recover_incorrect_vis_restriction()?;
      .                           // Emit diagnostic, but continue with public visibility.
      .                       }
      .                   }
      .           
    105 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
  2,493 ( 0.00%)      }
      .           
      .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
      .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
      .                   self.bump(); // `(`
      .                   let path = self.parse_path(PathStyle::Mod)?;
      .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
      .           
      .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
      .                       )
      .                       .emit();
      .           
      .                   Ok(())
      .               }
      .           
      .               /// Parses `extern string_literal?`.
      .               fn parse_extern(&mut self) -> Extern {
    100 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
      .               }
      .           
      .               /// Parses a string literal as an ABI spec.
      .               fn parse_abi(&mut self) -> Option<StrLit> {
      .                   match self.parse_str_lit() {
      .                       Ok(str_lit) => Some(str_lit),
      .                       Err(Some(lit)) => match lit.kind {
      .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1395 ----------------------------------------
      .                                   .emit();
      .                               None
      .                           }
      .                       },
      .                       Err(None) => None,
      .                   }
      .               }
      .           
     20 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
      .                   &mut self,
      .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
      .               ) -> PResult<'a, R> {
      .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
      .                   // `ForceCollect::Yes`
      .                   self.collect_tokens_trailing_token(
      .                       AttrWrapper::empty(),
      .                       ForceCollect::Yes,
     62 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
      .                   )
     20 ( 0.00%)      }
      .           
      .               /// `::{` or `::*`
 19,760 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
  9,880 ( 0.00%)          self.check(&token::ModSep)
      .                       && self.look_ahead(1, |t| {
  6,326 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
      .                       })
 19,152 ( 0.00%)      }
      .           
      .               pub fn clear_expected_tokens(&mut self) {
      .                   self.expected_tokens.clear();
      .               }
      .           }
      .           
      .           crate fn make_unclosed_delims_error(
      .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
      .                   err.span_label(sp, "closing delimiter possibly meant for this");
      .               }
      .               if let Some(sp) = unmatched.unclosed_span {
      .                   err.span_label(sp, "unclosed delimiter");
      .               }
      .               Some(err)
      .           }
      .           
  3,160 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
  1,580 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
      .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
  1,580 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
      .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
      .                       e.emit();
      .                   }
      .               }
  3,160 ( 0.00%)  }
      .           
      .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
      .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
      .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
      .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
      .           /// `AttrAnnotatedTokenTree::Delimited` tokens
      .           #[derive(Debug, Clone)]
      .           pub enum FlatToken {
-- line 1474 ----------------------------------------

 97,566 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs
--------------------------------------------------------------------------------
Ir               

-- line 56 ----------------------------------------
      .           #[derive(Copy, Clone, Debug)]
      .           pub enum RelationDir {
      .               SubtypeOf,
      .               SupertypeOf,
      .               EqTo,
      .           }
      .           
      .           impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {
 67,419 ( 0.01%)      pub fn super_combine_tys<R>(
      .                   &self,
      .                   relation: &mut R,
      .                   a: Ty<'tcx>,
      .                   b: Ty<'tcx>,
      .               ) -> RelateResult<'tcx, Ty<'tcx>>
      .               where
      .                   R: TypeRelation<'tcx>,
      .               {
      .                   let a_is_expected = relation.a_is_expected();
      .           
 64,853 ( 0.01%)          match (a.kind(), b.kind()) {
      .                       // Relate integral variables to other types
     74 ( 0.00%)              (&ty::Infer(ty::IntVar(a_id)), &ty::Infer(ty::IntVar(b_id))) => {
    407 ( 0.00%)                  self.inner
      .                               .borrow_mut()
      .                               .int_unification_table()
      .                               .unify_var_var(a_id, b_id)
      .                               .map_err(|e| int_unification_error(a_is_expected, e))?;
      .                           Ok(a)
      .                       }
    733 ( 0.00%)              (&ty::Infer(ty::IntVar(v_id)), &ty::Int(v)) => {
  1,466 ( 0.00%)                  self.unify_integral_variable(a_is_expected, v_id, IntType(v))
      .                       }
      .                       (&ty::Int(v), &ty::Infer(ty::IntVar(v_id))) => {
      .                           self.unify_integral_variable(!a_is_expected, v_id, IntType(v))
      .                       }
    798 ( 0.00%)              (&ty::Infer(ty::IntVar(v_id)), &ty::Uint(v)) => {
  1,596 ( 0.00%)                  self.unify_integral_variable(a_is_expected, v_id, UintType(v))
      .                       }
     18 ( 0.00%)              (&ty::Uint(v), &ty::Infer(ty::IntVar(v_id))) => {
     36 ( 0.00%)                  self.unify_integral_variable(!a_is_expected, v_id, UintType(v))
      .                       }
      .           
      .                       // Relate floating-point variables to other types
      .                       (&ty::Infer(ty::FloatVar(a_id)), &ty::Infer(ty::FloatVar(b_id))) => {
      .                           self.inner
      .                               .borrow_mut()
      .                               .float_unification_table()
      .                               .unify_var_var(a_id, b_id)
-- line 103 ----------------------------------------
-- line 108 ----------------------------------------
      .                           self.unify_float_variable(a_is_expected, v_id, v)
      .                       }
      .                       (&ty::Float(v), &ty::Infer(ty::FloatVar(v_id))) => {
      .                           self.unify_float_variable(!a_is_expected, v_id, v)
      .                       }
      .           
      .                       // All other cases of inference are errors
      .                       (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {
  5,610 ( 0.00%)                  Err(TypeError::Sorts(ty::relate::expected_found(relation, a, b)))
      .                       }
      .           
 34,776 ( 0.01%)              _ => ty::relate::super_relate_tys(relation, a, b),
      .                   }
 67,419 ( 0.01%)      }
      .           
  2,280 ( 0.00%)      pub fn super_combine_consts<R>(
      .                   &self,
      .                   relation: &mut R,
      .                   a: &'tcx ty::Const<'tcx>,
      .                   b: &'tcx ty::Const<'tcx>,
      .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>>
      .               where
      .                   R: ConstEquateRelation<'tcx>,
      .               {
      .                   debug!("{}.consts({:?}, {:?})", relation.tag(), a, b);
    950 ( 0.00%)          if a == b {
      .                       return Ok(a);
      .                   }
      .           
    537 ( 0.00%)          let a = replace_if_possible(&mut self.inner.borrow_mut().const_unification_table(), a);
    537 ( 0.00%)          let b = replace_if_possible(&mut self.inner.borrow_mut().const_unification_table(), b);
      .           
      .                   let a_is_expected = relation.a_is_expected();
      .           
  1,802 ( 0.00%)          match (a.val, b.val) {
      .                       (
      .                           ty::ConstKind::Infer(InferConst::Var(a_vid)),
      .                           ty::ConstKind::Infer(InferConst::Var(b_vid)),
      .                       ) => {
      .                           self.inner
      .                               .borrow_mut()
      .                               .const_unification_table()
      .                               .unify_var_var(a_vid, b_vid)
-- line 150 ----------------------------------------
-- line 158 ----------------------------------------
      .                           bug!("tried to combine ConstKind::Infer/ConstKind::Infer(InferConst::Var)")
      .                       }
      .           
      .                       (ty::ConstKind::Infer(InferConst::Var(vid)), _) => {
      .                           return self.unify_const_variable(relation.param_env(), vid, b, a_is_expected);
      .                       }
      .           
      .                       (_, ty::ConstKind::Infer(InferConst::Var(vid))) => {
    880 ( 0.00%)                  return self.unify_const_variable(relation.param_env(), vid, a, !a_is_expected);
      .                       }
      6 ( 0.00%)              (ty::ConstKind::Unevaluated(..), _) if self.tcx.lazy_normalization() => {
      .                           // FIXME(#59490): Need to remove the leak check to accommodate
      .                           // escaping bound variables here.
      .                           if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {
      .                               relation.const_equate_obligation(a, b);
      .                           }
      .                           return Ok(b);
      .                       }
      .                       (_, ty::ConstKind::Unevaluated(..)) if self.tcx.lazy_normalization() => {
-- line 176 ----------------------------------------
-- line 179 ----------------------------------------
      .                           if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {
      .                               relation.const_equate_obligation(a, b);
      .                           }
      .                           return Ok(a);
      .                       }
      .                       _ => {}
      .                   }
      .           
     15 ( 0.00%)          ty::relate::super_relate_consts(relation, a, b)
  1,710 ( 0.00%)      }
      .           
      .               /// Unifies the const variable `target_vid` with the given constant.
      .               ///
      .               /// This also tests if the given const `ct` contains an inference variable which was previously
      .               /// unioned with `target_vid`. If this is the case, inferring `target_vid` to `ct`
      .               /// would result in an infinite type as we continuously replace an inference variable
      .               /// in `ct` with `ct` itself.
      .               ///
-- line 196 ----------------------------------------
-- line 216 ----------------------------------------
      .               /// of `fn bind` (meaning that its substs contain `N`).
      .               ///
      .               /// `bind(arr)` now infers that the type of `arr` must be `[u8; N]`.
      .               /// The assignment `arr = bind(arr)` now tries to equate `N` with `3 + 4`.
      .               ///
      .               /// As `3 + 4` contains `N` in its substs, this must not succeed.
      .               ///
      .               /// See `src/test/ui/const-generics/occurs-check/` for more examples where this is relevant.
  3,344 ( 0.00%)      #[instrument(level = "debug", skip(self))]
      .               fn unify_const_variable(
      .                   &self,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   target_vid: ty::ConstVid<'tcx>,
      .                   ct: &'tcx ty::Const<'tcx>,
      .                   vid_is_expected: bool,
      .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
      .                   let (for_universe, span) = {
      .                       let mut inner = self.inner.borrow_mut();
    704 ( 0.00%)              let variable_table = &mut inner.const_unification_table();
    352 ( 0.00%)              let var_value = variable_table.probe_value(target_vid);
    352 ( 0.00%)              match var_value.val {
      .                           ConstVariableValue::Known { value } => {
      .                               bug!("instantiating {:?} which has a known value {:?}", target_vid, value)
      .                           }
      .                           ConstVariableValue::Unknown { universe } => (universe, var_value.origin.span),
      .                       }
      .                   };
  1,408 ( 0.00%)          let value = ConstInferUnifier { infcx: self, span, param_env, for_universe, target_vid }
      .                       .relate(ct, ct)?;
      .           
    704 ( 0.00%)          self.inner
      .                       .borrow_mut()
      .                       .const_unification_table()
      .                       .unify_var_value(
      .                           target_vid,
  1,056 ( 0.00%)                  ConstVarValue {
      .                               origin: ConstVariableOrigin {
      .                                   kind: ConstVariableOriginKind::ConstInference,
      .                                   span: DUMMY_SP,
      .                               },
      .                               val: ConstVariableValue::Known { value },
      .                           },
      .                       )
      .                       .map(|()| value)
      .                       .map_err(|e| const_unification_error(vid_is_expected, e))
      .               }
      .           
  9,294 ( 0.00%)      fn unify_integral_variable(
      .                   &self,
      .                   vid_is_expected: bool,
      .                   vid: ty::IntVid,
      .                   val: ty::IntVarValue,
      .               ) -> RelateResult<'tcx, Ty<'tcx>> {
 12,392 ( 0.00%)          self.inner
      .                       .borrow_mut()
      .                       .int_unification_table()
      .                       .unify_var_value(vid, Some(val))
      .                       .map_err(|e| int_unification_error(vid_is_expected, e))?;
  3,098 ( 0.00%)          match val {
    733 ( 0.00%)              IntType(v) => Ok(self.tcx.mk_mach_int(v)),
  3,181 ( 0.00%)              UintType(v) => Ok(self.tcx.mk_mach_uint(v)),
      .                   }
 12,392 ( 0.00%)      }
      .           
      .               fn unify_float_variable(
      .                   &self,
      .                   vid_is_expected: bool,
      .                   vid: ty::FloatVid,
      .                   val: ty::FloatTy,
      .               ) -> RelateResult<'tcx, Ty<'tcx>> {
      .                   self.inner
-- line 286 ----------------------------------------
-- line 289 ----------------------------------------
      .                       .unify_var_value(vid, Some(ty::FloatVarValue(val)))
      .                       .map_err(|e| float_unification_error(vid_is_expected, e))?;
      .                   Ok(self.tcx.mk_mach_float(val))
      .               }
      .           }
      .           
      .           impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {
      .               pub fn tcx(&self) -> TyCtxt<'tcx> {
 12,842 ( 0.00%)          self.infcx.tcx
      .               }
      .           
      .               pub fn equate<'a>(&'a mut self, a_is_expected: bool) -> Equate<'a, 'infcx, 'tcx> {
      .                   Equate::new(self, a_is_expected)
      .               }
      .           
 16,854 ( 0.00%)      pub fn sub<'a>(&'a mut self, a_is_expected: bool) -> Sub<'a, 'infcx, 'tcx> {
      .                   Sub::new(self, a_is_expected)
  8,427 ( 0.00%)      }
      .           
      .               pub fn lub<'a>(&'a mut self, a_is_expected: bool) -> Lub<'a, 'infcx, 'tcx> {
      .                   Lub::new(self, a_is_expected)
      .               }
      .           
 20,264 ( 0.00%)      pub fn glb<'a>(&'a mut self, a_is_expected: bool) -> Glb<'a, 'infcx, 'tcx> {
      .                   Glb::new(self, a_is_expected)
 10,132 ( 0.00%)      }
      .           
      .               /// Here, `dir` is either `EqTo`, `SubtypeOf`, or `SupertypeOf`.
      .               /// The idea is that we should ensure that the type `a_ty` is equal
      .               /// to, a subtype of, or a supertype of (respectively) the type
      .               /// to which `b_vid` is bound.
      .               ///
      .               /// Since `b_vid` has not yet been instantiated with a type, we
      .               /// will first instantiate `b_vid` with a *generalized* version
      .               /// of `a_ty`. Generalization introduces other inference
      .               /// variables wherever subtyping could occur.
 67,353 ( 0.01%)      pub fn instantiate(
      .                   &mut self,
      .                   a_ty: Ty<'tcx>,
      .                   dir: RelationDir,
      .                   b_vid: ty::TyVid,
      .                   a_is_expected: bool,
      .               ) -> RelateResult<'tcx, ()> {
      .                   use self::RelationDir::*;
      .           
-- line 333 ----------------------------------------
-- line 342 ----------------------------------------
      .                   // - `a_ty == &'x ?1`, where `'x` is some free region and `?1` is an
      .                   //   inference variable,
      .                   // - and `dir` == `SubtypeOf`.
      .                   //
      .                   // Then the generalized form `b_ty` would be `&'?2 ?3`, where
      .                   // `'?2` and `?3` are fresh region/type inference
      .                   // variables. (Down below, we will relate `a_ty <: b_ty`,
      .                   // adding constraints like `'x: '?2` and `?1 <: ?3`.)
  6,123 ( 0.00%)          let Generalization { ty: b_ty, needs_wf } = self.generalize(a_ty, b_vid, dir)?;
      .                   debug!(
      .                       "instantiate(a_ty={:?}, dir={:?}, b_vid={:?}, generalized b_ty={:?})",
      .                       a_ty, dir, b_vid, b_ty
      .                   );
 42,861 ( 0.01%)          self.infcx.inner.borrow_mut().type_variables().instantiate(b_vid, b_ty);
      .           
  6,123 ( 0.00%)          if needs_wf {
      .                       self.obligations.push(Obligation::new(
      .                           self.trace.cause.clone(),
      .                           self.param_env,
      .                           ty::Binder::dummy(ty::PredicateKind::WellFormed(b_ty.into()))
      .                               .to_predicate(self.infcx.tcx),
      .                       ));
      .                   }
      .           
      .                   // Finally, relate `b_ty` to `a_ty`, as described in previous comment.
      .                   //
      .                   // FIXME(#16847): This code is non-ideal because all these subtype
      .                   // relations wind up attributed to the same spans. We need
      .                   // to associate causes/spans with each of the relations in
      .                   // the stack to get this right.
 23,004 ( 0.00%)          match dir {
 21,755 ( 0.00%)              EqTo => self.equate(a_is_expected).relate(a_ty, b_ty),
  3,720 ( 0.00%)              SubtypeOf => self.sub(a_is_expected).relate(a_ty, b_ty),
  2,056 ( 0.00%)              SupertypeOf => self.sub(a_is_expected).relate_with_variance(
      .                           ty::Contravariant,
      .                           ty::VarianceDiagInfo::default(),
      .                           a_ty,
      .                           b_ty,
      .                       ),
      .                   }?;
      .           
  6,123 ( 0.00%)          Ok(())
 48,984 ( 0.01%)      }
      .           
      .               /// Attempts to generalize `ty` for the type variable `for_vid`.
      .               /// This checks for cycle -- that is, whether the type `ty`
      .               /// references `for_vid`. The `dir` is the "direction" for which we
      .               /// a performing the generalization (i.e., are we producing a type
      .               /// that can be used as a supertype etc).
      .               ///
      .               /// Preconditions:
-- line 392 ----------------------------------------
-- line 401 ----------------------------------------
      .                   debug!("generalize(ty={:?}, for_vid={:?}, dir={:?}", ty, for_vid, dir);
      .                   // Determine the ambient variance within which `ty` appears.
      .                   // The surrounding equation is:
      .                   //
      .                   //     ty [op] ty2
      .                   //
      .                   // where `op` is either `==`, `<:`, or `:>`. This maps quite
      .                   // naturally.
 24,492 ( 0.00%)          let ambient_variance = match dir {
      .                       RelationDir::EqTo => ty::Invariant,
      .                       RelationDir::SubtypeOf => ty::Covariant,
      .                       RelationDir::SupertypeOf => ty::Contravariant,
      .                   };
      .           
      .                   debug!("generalize: ambient_variance = {:?}", ambient_variance);
      .           
 61,230 ( 0.01%)          let for_universe = match self.infcx.inner.borrow_mut().type_variables().probe(for_vid) {
      .                       v @ TypeVariableValue::Known { .. } => {
      .                           bug!("instantiating {:?} which has a known value {:?}", for_vid, v,)
      .                       }
      .                       TypeVariableValue::Unknown { universe } => universe,
      .                   };
      .           
      .                   debug!("generalize: for_universe = {:?}", for_universe);
      .                   debug!("generalize: trace = {:?}", self.trace);
      .           
 61,230 ( 0.01%)          let mut generalize = Generalizer {
      .                       infcx: self.infcx,
      .                       cause: &self.trace.cause,
      .                       for_vid_sub_root: self.infcx.inner.borrow_mut().type_variables().sub_root_var(for_vid),
      .                       for_universe,
      .                       ambient_variance,
      .                       needs_wf: false,
      .                       root_ty: ty,
  6,123 ( 0.00%)              param_env: self.param_env,
      .                       cache: SsoHashMap::new(),
      .                   };
      .           
 12,246 ( 0.00%)          let ty = match generalize.relate(ty, ty) {
  6,123 ( 0.00%)              Ok(ty) => ty,
      .                       Err(e) => {
      .                           debug!("generalize: failure {:?}", e);
      .                           return Err(e);
      .                       }
      .                   };
  6,123 ( 0.00%)          let needs_wf = generalize.needs_wf;
      .                   debug!("generalize: success {{ {:?}, {:?} }}", ty, needs_wf);
      .                   Ok(Generalization { ty, needs_wf })
      .               }
      .           
      .               pub fn add_const_equate_obligation(
      .                   &mut self,
      .                   a_is_expected: bool,
      .                   a: &'tcx ty::Const<'tcx>,
-- line 454 ----------------------------------------
-- line 528 ----------------------------------------
      .               /// will force the calling code to check that `WF(Foo<?C, ?D>)`
      .               /// holds, which in turn implies that `?C::Item == ?D`. So once
      .               /// `?C` is constrained, that should suffice to restrict `?D`.
      .               needs_wf: bool,
      .           }
      .           
      .           impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {
      .               fn tcx(&self) -> TyCtxt<'tcx> {
 12,820 ( 0.00%)          self.infcx.tcx
      .               }
      .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
    266 ( 0.00%)          self.param_env
      .               }
      .           
      .               fn tag(&self) -> &'static str {
      .                   "Generalizer"
      .               }
      .           
      .               fn a_is_expected(&self) -> bool {
      .                   true
      .               }
      .           
     15 ( 0.00%)      fn binders<T>(
      .                   &mut self,
      .                   a: ty::Binder<'tcx, T>,
      .                   b: ty::Binder<'tcx, T>,
      .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>
      .               where
      .                   T: Relate<'tcx>,
      .               {
     27 ( 0.00%)          Ok(a.rebind(self.relate(a.skip_binder(), b.skip_binder())?))
     15 ( 0.00%)      }
      .           
 52,041 ( 0.01%)      fn relate_item_substs(
      .                   &mut self,
      .                   item_def_id: DefId,
      .                   a_subst: SubstsRef<'tcx>,
      .                   b_subst: SubstsRef<'tcx>,
      .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
  4,731 ( 0.00%)          if self.ambient_variance == ty::Variance::Invariant {
      .                       // Avoid fetching the variance if we are in an invariant
      .                       // context; no need, and it can induce dependency cycles
      .                       // (e.g., #41849).
  3,969 ( 0.00%)              relate::relate_substs(self, None, a_subst, b_subst)
      .                   } else {
      .                       let tcx = self.tcx();
      .                       let opt_variances = tcx.variances_of(item_def_id);
  3,810 ( 0.00%)              relate::relate_substs(self, Some((item_def_id, &opt_variances)), a_subst, b_subst)
      .                   }
 42,579 ( 0.01%)      }
      .           
  7,947 ( 0.00%)      fn relate_with_variance<T: Relate<'tcx>>(
      .                   &mut self,
      .                   variance: ty::Variance,
      .                   _info: ty::VarianceDiagInfo<'tcx>,
      .                   a: T,
      .                   b: T,
      .               ) -> RelateResult<'tcx, T> {
      .                   let old_ambient_variance = self.ambient_variance;
 33,396 ( 0.01%)          self.ambient_variance = self.ambient_variance.xform(variance);
      .           
      .                   let result = self.relate(a, b);
  6,369 ( 0.00%)          self.ambient_variance = old_ambient_variance;
      .                   result
  6,181 ( 0.00%)      }
      .           
108,576 ( 0.02%)      fn tys(&mut self, t: Ty<'tcx>, t2: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {
 12,064 ( 0.00%)          assert_eq!(t, t2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
      .           
 72,384 ( 0.01%)          if let Some(result) = self.cache.get(&t) {
  3,016 ( 0.00%)              return result.clone();
      .                   }
      .                   debug!("generalize: t={:?}", t);
      .           
      .                   // Check to see whether the type we are generalizing references
      .                   // any other type variable related to `vid` via
      .                   // subtyping. This is basically our "occurs check", preventing
      .                   // us from creating infinitely sized types.
 35,088 ( 0.01%)          let result = match *t.kind() {
     47 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
     47 ( 0.00%)                  let vid = self.infcx.inner.borrow_mut().type_variables().root_var(vid);
     47 ( 0.00%)                  let sub_vid = self.infcx.inner.borrow_mut().type_variables().sub_root_var(vid);
     47 ( 0.00%)                  if sub_vid == self.for_vid_sub_root {
      .                               // If sub-roots are equal, then `for_vid` and
      .                               // `vid` are related via subtyping.
      .                               Err(TypeError::CyclicTy(self.root_ty))
      .                           } else {
    282 ( 0.00%)                      let probe = self.infcx.inner.borrow_mut().type_variables().probe(vid);
     94 ( 0.00%)                      match probe {
      .                                   TypeVariableValue::Known { value: u } => {
      .                                       debug!("generalize: known value {:?}", u);
      .                                       self.relate(u, u)
      .                                   }
      .                                   TypeVariableValue::Unknown { universe } => {
    195 ( 0.00%)                              match self.ambient_variance {
      .                                           // Invariant: no need to make a fresh type variable.
      .                                           ty::Invariant => {
    105 ( 0.00%)                                      if self.for_universe.can_name(universe) {
     84 ( 0.00%)                                          return Ok(t);
      .                                               }
      .                                           }
      .           
      .                                           // Bivariant: make a fresh var, but we
      .                                           // may need a WF predicate. See
      .                                           // comment on `needs_wf` field for
      .                                           // more info.
      .                                           ty::Bivariant => self.needs_wf = true,
      .           
      .                                           // Co/contravariant: this will be
      .                                           // sufficiently constrained later on.
      .                                           ty::Covariant | ty::Contravariant => (),
      .                                       }
      .           
      .                                       let origin =
    162 ( 0.00%)                                  *self.infcx.inner.borrow_mut().type_variables().var_origin(vid);
    126 ( 0.00%)                              let new_var_id = self
      .                                           .infcx
      .                                           .inner
      .                                           .borrow_mut()
      .                                           .type_variables()
    126 ( 0.00%)                                  .new_var(self.for_universe, origin);
      .                                       let u = self.tcx().mk_ty_var(new_var_id);
      .           
      .                                       // Record that we replaced `vid` with `new_var_id` as part of a generalization
      .                                       // operation. This is needed to detect cyclic types. To see why, see the
      .                                       // docs in the `type_variables` module.
     90 ( 0.00%)                              self.infcx.inner.borrow_mut().type_variables().sub(vid, new_var_id);
      .                                       debug!("generalize: replacing original vid={:?} with new={:?}", vid, u);
     36 ( 0.00%)                              Ok(u)
      .                                   }
      .                               }
      .                           }
      .                       }
      .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => {
      .                           // No matter what mode we are in,
      .                           // integer/floating-point types must be equal to be
      .                           // relatable.
    219 ( 0.00%)                  Ok(t)
      .                       }
 33,132 ( 0.01%)              _ => relate::super_relate_tys(self, t, t),
      .                   };
      .           
112,890 ( 0.02%)          self.cache.insert(t, result.clone());
 67,734 ( 0.01%)          return result;
108,576 ( 0.02%)      }
      .           
  8,160 ( 0.00%)      fn regions(
      .                   &mut self,
      .                   r: ty::Region<'tcx>,
      .                   r2: ty::Region<'tcx>,
      .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
    993 ( 0.00%)          assert_eq!(r, r2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
      .           
      .                   debug!("generalize: regions r={:?}", r);
      .           
  1,986 ( 0.00%)          match *r {
      .                       // Never make variables for regions bound within the type itself,
      .                       // nor for erased regions.
      .                       ty::ReLateBound(..) | ty::ReErased => {
      .                           return Ok(r);
      .                       }
      .           
      .                       ty::RePlaceholder(..)
      .                       | ty::ReVar(..)
-- line 691 ----------------------------------------
-- line 697 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   // If we are in an invariant context, we can re-use the region
      .                   // as is, unless it happens to be in some universe that we
      .                   // can't name. (In the case of a region *variable*, we could
      .                   // use it if we promoted it into our universe, but we don't
      .                   // bother.)
  2,006 ( 0.00%)          if let ty::Invariant = self.ambient_variance {
  2,343 ( 0.00%)              let r_universe = self.infcx.universe_of_region(r);
  5,467 ( 0.00%)              if self.for_universe.can_name(r_universe) {
      .                           return Ok(r);
      .                       }
      .                   }
      .           
      .                   // FIXME: This is non-ideal because we don't give a
      .                   // very descriptive origin for this region variable.
  2,220 ( 0.00%)          Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.cause.span), self.for_universe))
  8,160 ( 0.00%)      }
      .           
  2,394 ( 0.00%)      fn consts(
      .                   &mut self,
      .                   c: &'tcx ty::Const<'tcx>,
      .                   c2: &'tcx ty::Const<'tcx>,
      .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
    797 ( 0.00%)          assert_eq!(c, c2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
      .           
      .                   match c.val {
      .                       ty::ConstKind::Infer(InferConst::Var(vid)) => {
      .                           let mut inner = self.infcx.inner.borrow_mut();
      .                           let variable_table = &mut inner.const_unification_table();
      .                           let var_value = variable_table.probe_value(vid);
      .                           match var_value.val {
      .                               ConstVariableValue::Known { value: u } => {
-- line 730 ----------------------------------------
-- line 740 ----------------------------------------
      .                                           val: ConstVariableValue::Unknown { universe: self.for_universe },
      .                                       });
      .                                       Ok(self.tcx().mk_const_var(new_var_id, c.ty))
      .                                   }
      .                               }
      .                           }
      .                       }
      .                       ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })
      1 ( 0.00%)                  if self.tcx().lazy_normalization() =>
      .                       {
      .                           assert_eq!(promoted, None);
      .                           let substs = self.relate_with_variance(
      .                               ty::Variance::Invariant,
      .                               ty::VarianceDiagInfo::default(),
      .                               substs,
      .                               substs,
      .                           )?;
      .                           Ok(self.tcx().mk_const(ty::Const {
      .                               ty: c.ty,
      .                               val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),
      .                           }))
      .                       }
  1,330 ( 0.00%)              _ => relate::super_relate_consts(self, c, c),
      .                   }
  2,394 ( 0.00%)      }
      .           }
      .           
      .           pub trait ConstEquateRelation<'tcx>: TypeRelation<'tcx> {
      .               /// Register an obligation that both constants must be equal to each other.
      .               ///
      .               /// If they aren't equal then the relation doesn't hold.
      .               fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>);
      .           }
-- line 772 ----------------------------------------
-- line 824 ----------------------------------------
      .               target_vid: ty::ConstVid<'tcx>,
      .           }
      .           
      .           // We use `TypeRelation` here to propagate `RelateResult` upwards.
      .           //
      .           // Both inputs are expected to be the same.
      .           impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {
      .               fn tcx(&self) -> TyCtxt<'tcx> {
    704 ( 0.00%)          self.infcx.tcx
      .               }
      .           
      .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
    176 ( 0.00%)          self.param_env
      .               }
      .           
      .               fn tag(&self) -> &'static str {
      .                   "ConstInferUnifier"
      .               }
      .           
      .               fn a_is_expected(&self) -> bool {
      .                   true
-- line 844 ----------------------------------------
-- line 937 ----------------------------------------
      .                       return Ok(r);
      .                   } else {
      .                       // FIXME: This is non-ideal because we don't give a
      .                       // very descriptive origin for this region variable.
      .                       Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.span), self.for_universe))
      .                   }
      .               }
      .           
  3,344 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self))]
      .               fn consts(
      .                   &mut self,
      .                   c: &'tcx ty::Const<'tcx>,
      .                   _c: &'tcx ty::Const<'tcx>,
      .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
      .                   debug_assert_eq!(c, _c);
      .                   debug!("ConstInferUnifier: c={:?}", c);
      .           
    880 ( 0.00%)          match c.val {
      .                       ty::ConstKind::Infer(InferConst::Var(vid)) => {
      .                           // Check if the current unification would end up
      .                           // unifying `target_vid` with a const which contains
      .                           // an inference variable which is unioned with `target_vid`.
      .                           //
      .                           // Not doing so can easily result in stack overflows.
      .                           if self
      .                               .infcx
-- line 962 ----------------------------------------
-- line 1000 ----------------------------------------
      .                               substs,
      .                               substs,
      .                           )?;
      .                           Ok(self.tcx().mk_const(ty::Const {
      .                               ty: c.ty,
      .                               val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),
      .                           }))
      .                       }
    880 ( 0.00%)              _ => relate::super_relate_consts(self, c, c),
      .                   }
      .               }
      .           }

101,478 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 108 ----------------------------------------
      .                   suppress_errors: bool,
      .               },
      .           }
      .           
      .           impl RegionckMode {
      .               /// Indicates that the MIR borrowck will repeat these region
      .               /// checks, so we should ignore errors if NLL is (unconditionally)
      .               /// enabled.
    123 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
      .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
      .                   // this always `true` and then proceed to eliminate the dead code.
    123 ( 0.00%)          match tcx.borrowck_mode() {
      .                       // If we're on Migrate mode, report AST region errors
      .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
      .           
      .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
      .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
      .                   }
    246 ( 0.00%)      }
      .           }
      .           
      .           /// This type contains all the things within `InferCtxt` that sit within a
      .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
      .           /// operations are hot enough that we want only one call to `borrow_mut` per
      .           /// call to `start_snapshot` and `rollback_to`.
      .           pub struct InferCtxtInner<'tcx> {
      .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
      .               /// type instantiations (`ty::Infer`) to the actual opaque
      .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
      .               /// opaque type inference variables to their corresponding
      .               /// opaque type.
      .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
      .           }
      .           
      .           impl<'tcx> InferCtxtInner<'tcx> {
 22,570 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
153,476 ( 0.03%)          InferCtxtInner {
      .                       projection_cache: Default::default(),
      .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
      .                       undo_log: InferCtxtUndoLogs::default(),
      .                       const_unification_storage: ut::UnificationTableStorage::new(),
      .                       int_unification_storage: ut::UnificationTableStorage::new(),
      .                       float_unification_storage: ut::UnificationTableStorage::new(),
 13,542 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
      .                       region_obligations: vec![],
      .                       opaque_types: Default::default(),
      .                       opaque_types_vars: Default::default(),
      .                   }
 27,084 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
      .                   &self.region_obligations
      .               }
      .           
      .               #[inline]
      .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
  2,357 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
 99,683 ( 0.02%)          self.type_variable_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn int_unification_table(
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::IntVid,
      .                       &mut ut::UnificationStorage<ty::IntVid>,
      .                       &mut InferCtxtUndoLogs<'tcx>,
      .                   >,
      .               > {
  9,817 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn float_unification_table(
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::ConstVid<'tcx>,
      .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
      .                       &mut InferCtxtUndoLogs<'tcx>,
      .                   >,
      .               > {
  1,887 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
 15,900 ( 0.00%)          self.region_constraint_storage
      .                       .as_mut()
      .                       .expect("region constraints already solved")
 17,197 ( 0.00%)              .with_log(&mut self.undo_log)
      .               }
      .           }
      .           
      .           pub struct InferCtxt<'a, 'tcx> {
      .               pub tcx: TyCtxt<'tcx>,
      .           
      .               /// The `DefId` of the item in whose context we are performing inference or typeck.
      .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
      .               /// item we are type-checking, and just consider those names as
      .               /// part of the root universe. So this would only get incremented
      .               /// when we enter into a higher-ranked (`for<..>`) type or trait
      .               /// bound.
      .               universe: Cell<ty::UniverseIndex>,
      .           }
      .           
      .           /// See the `error_reporting` module for more details.
 12,608 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
      .           pub enum ValuePairs<'tcx> {
      .               Types(ExpectedFound<Ty<'tcx>>),
      .               Regions(ExpectedFound<ty::Region<'tcx>>),
      .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
      .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
      .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
      .           }
      .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
      .           pub struct TypeTrace<'tcx> {
      .               cause: ObligationCause<'tcx>,
      .               values: ValuePairs<'tcx>,
      .           }
      .           
      .           /// The origin of a `r1 <= r2` constraint.
      .           ///
      .           /// See `error_reporting` module for more details
 10,172 ( 0.00%)  #[derive(Clone, Debug)]
      .           pub enum SubregionOrigin<'tcx> {
      .               /// Arose from a subtyping relation
    580 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
      .           
      .               /// When casting `&'a T` to an `&'b Trait` object,
      .               /// relating `'a` to `'b`
      .               RelateObjectBound(Span),
      .           
      .               /// Some type parameter was instantiated with the given type,
      .               /// and that type must outlive some region.
     78 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
      .           
      .               /// The given region parameter was instantiated with a region
      .               /// that must outlive some other region.
      .               RelateRegionParamBound(Span),
      .           
      .               /// Creating a pointer `b` to contents of another reference
      .               Reborrow(Span),
      .           
      .               /// Creating a pointer `b` to contents of an upvar
      .               ReborrowUpvar(Span, ty::UpvarId),
      .           
      .               /// Data with type `Ty<'tcx>` was borrowed
     83 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
      .           
      .               /// (&'a &'b T) where a >= b
     79 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
      .           
      .               /// Comparing the signature and requirements of an impl method against
      .               /// the containing trait.
      .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
      .           
      .               /// Comparing the signature and requirements of an impl associated type
      .               /// against the containing trait
      .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
      .               defining_use_anchor: Option<LocalDefId>,
      .           }
      .           
      .           pub trait TyCtxtInferExt<'tcx> {
      .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
      .           }
      .           
      .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
  4,514 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
 13,542 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
  4,514 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> InferCtxtBuilder<'tcx> {
      .               /// Used only by `rustc_typeck` during body type-checking/inference,
      .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
      .               /// Will also change the scope for opaque type defining use checks to the given owner.
  2,250 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
  2,750 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
  1,250 ( 0.00%)          self.with_opaque_type_inference(table_owner)
  1,750 ( 0.00%)      }
      .           
      .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
      .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
      .               ///
      .               /// It is only meant to be called in two places, for typeck
      .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
      .               /// in mir borrowck.
    252 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
    126 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
    752 ( 0.00%)          self
    378 ( 0.00%)      }
      .           
      .               /// Given a canonical value `C` as a starting point, create an
      .               /// inference context that contains each of the bound values
      .               /// within instantiated as a fresh variable. The `f` closure is
      .               /// invoked with the new infcx, along with the instantiated value
      .               /// `V` and a substitution `S`. This substitution `S` maps from
      .               /// the bound values in `C` to their instantiated values in `V`
      .               /// (in other words, `S(C) = V`).
  7,043 ( 0.00%)      pub fn enter_with_canonical<T, R>(
      .                   &mut self,
      .                   span: Span,
      .                   canonical: &Canonical<'tcx, T>,
      .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
      .               ) -> R
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   self.enter(|infcx| {
  9,988 ( 0.00%)              let (value, subst) =
    544 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
 14,745 ( 0.00%)              f(infcx, value, subst)
      .                   })
  7,682 ( 0.00%)      }
      .           
 24,818 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
 12,435 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
      .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
194,665 ( 0.03%)          f(InferCtxt {
      .                       tcx,
      .                       defining_use_anchor,
      .                       in_progress_typeck_results,
  4,514 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
      .                       lexical_region_resolutions: RefCell::new(None),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      .                       reported_trait_errors: Default::default(),
      .                       reported_closure_mismatch: Default::default(),
      .                       tainted_by_errors_flag: Cell::new(false),
  4,514 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
      .                       in_snapshot: Cell::new(false),
      .                       skip_leak_check: Cell::new(false),
      .                       universe: Cell::new(ty::UniverseIndex::ROOT),
      .                   })
 27,308 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, T> InferOk<'tcx, T> {
      .               pub fn unit(self) -> InferOk<'tcx, ()> {
      .                   InferOk { value: (), obligations: self.obligations }
      .               }
      .           
      .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
      .               pub fn into_value_registering_obligations(
      .                   self,
      .                   infcx: &InferCtxt<'_, 'tcx>,
      .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
      .               ) -> T {
    162 ( 0.00%)          let InferOk { value, obligations } = self;
    568 ( 0.00%)          for obligation in obligations {
      .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
      .                   }
      .                   value
      .               }
      .           }
      .           
      .           impl<'tcx> InferOk<'tcx, ()> {
  2,284 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
  9,136 ( 0.00%)          self.obligations
  2,284 ( 0.00%)      }
      .           }
      .           
      .           #[must_use = "once you start a snapshot, you should always consume it"]
      .           pub struct CombinedSnapshot<'a, 'tcx> {
      .               undo_snapshot: Snapshot<'tcx>,
      .               region_constraints_snapshot: RegionSnapshot,
      .               universe: ty::UniverseIndex,
      .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
      .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
      .                   debug!("canonical consts: {:?}", &canonical.value);
      .           
      .                   self.tcx.try_unify_abstract_consts(canonical.value)
      .               }
      .           
      .               pub fn is_in_snapshot(&self) -> bool {
      .                   self.in_snapshot.get()
  5,760 ( 0.00%)      }
      .           
 44,280 ( 0.01%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
 49,815 ( 0.01%)          t.fold_with(&mut self.freshener())
 49,815 ( 0.01%)      }
      .           
      .               /// Returns the origin of the type variable identified by `vid`, or `None`
      .               /// if this is not a type variable.
      .               ///
      .               /// No attempt is made to resolve `ty`.
    198 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
    396 ( 0.00%)          match *ty.kind() {
     86 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
    344 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
      .                       }
     13 ( 0.00%)              _ => None,
      .                   }
    396 ( 0.00%)      }
      .           
  5,535 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
      .                   freshen::TypeFreshener::new(self, false)
  5,535 ( 0.00%)      }
      .           
      .               /// Like `freshener`, but does not replace `'static` regions.
 21,040 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
      .                   freshen::TypeFreshener::new(self, true)
 21,040 ( 0.00%)      }
      .           
    584 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
    292 ( 0.00%)          let mut inner = self.inner.borrow_mut();
    292 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
      .                       .type_variables()
      .                       .unsolved_variables()
      .                       .into_iter()
    172 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
      .                       .collect();
      .                   vars.extend(
      .                       (0..inner.int_unification_table().len())
      .                           .map(|i| ty::IntVid { index: i as u32 })
    454 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
     13 ( 0.00%)                  .map(|v| self.tcx.mk_int_var(v)),
      .                   );
      .                   vars.extend(
      .                       (0..inner.float_unification_table().len())
      .                           .map(|i| ty::FloatVid { index: i as u32 })
      .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
      .                           .map(|v| self.tcx.mk_float_var(v)),
      .                   );
      .                   vars
  1,022 ( 0.00%)      }
      .           
 12,857 ( 0.00%)      fn combine_fields(
      .                   &'a self,
      .                   trace: TypeTrace<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .               ) -> CombineFields<'a, 'tcx> {
 51,548 ( 0.01%)          CombineFields {
      .                       infcx: self,
128,870 ( 0.02%)              trace,
      .                       cause: None,
      .                       param_env,
      .                       obligations: PredicateObligations::new(),
      .                   }
 12,857 ( 0.00%)      }
      .           
      .               /// Clear the "currently in a snapshot" flag, invoke the closure,
      .               /// then restore the flag to its original value. This flag is a
      .               /// debugging measure designed to detect cases where we start a
      .               /// snapshot, create type variables, and register obligations
      .               /// which may involve those type variables in the fulfillment cx,
      .               /// potentially leaving "dangling type variables" behind.
      .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 760 ----------------------------------------
      .               /// before we return, this is not a problem, as there won't be any
      .               /// escaping obligations in the main cx. In those cases, you can
      .               /// use this function.
      .               pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
      .               where
      .                   F: FnOnce(&Self) -> R,
      .               {
      .                   let flag = self.in_snapshot.replace(false);
  1,794 ( 0.00%)          let result = func(self);
      .                   self.in_snapshot.set(flag);
      .                   result
      .               }
      .           
 72,436 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
      .                   debug!("start_snapshot()");
      .           
      .                   let in_snapshot = self.in_snapshot.replace(true);
      .           
      .                   let mut inner = self.inner.borrow_mut();
      .           
217,308 ( 0.04%)          CombinedSnapshot {
      .                       undo_snapshot: inner.undo_log.start_snapshot(),
      .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
      .                       universe: self.universe(),
      .                       was_in_snapshot: in_snapshot,
      .                       // Borrow typeck results "in progress" (i.e., during typeck)
      .                       // to ban writes from within a snapshot to them.
 36,218 ( 0.01%)              _in_progress_typeck_results: self
      .                           .in_progress_typeck_results
      .                           .map(|typeck_results| typeck_results.borrow()),
      .                   }
144,872 ( 0.03%)      }
      .           
188,012 ( 0.03%)      #[instrument(skip(self, snapshot), level = "debug")]
      .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
      .                   let CombinedSnapshot {
 17,092 ( 0.00%)              undo_snapshot,
 17,092 ( 0.00%)              region_constraints_snapshot,
 17,092 ( 0.00%)              universe,
 17,092 ( 0.00%)              was_in_snapshot,
 34,184 ( 0.01%)              _in_progress_typeck_results,
      .                   } = snapshot;
      .           
      .                   self.in_snapshot.set(was_in_snapshot);
      .                   self.universe.set(universe);
      .           
      .                   let mut inner = self.inner.borrow_mut();
 17,092 ( 0.00%)          inner.rollback_to(undo_snapshot);
      .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
      .               }
      .           
286,890 ( 0.05%)      #[instrument(skip(self, snapshot), level = "debug")]
      .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
      .                   let CombinedSnapshot {
 19,126 ( 0.00%)              undo_snapshot,
      .                       region_constraints_snapshot: _,
      .                       universe: _,
 19,126 ( 0.00%)              was_in_snapshot,
 38,252 ( 0.01%)              _in_progress_typeck_results,
      .                   } = snapshot;
      .           
      .                   self.in_snapshot.set(was_in_snapshot);
      .           
      .                   self.inner.borrow_mut().commit(undo_snapshot);
      .               }
      .           
      .               /// Executes `f` and commit the bindings.
 20,584 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
 25,531 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
  2,321 ( 0.00%)          let snapshot = self.start_snapshot();
  7,624 ( 0.00%)          let r = f(&snapshot);
 16,247 ( 0.00%)          self.commit_from(snapshot);
 15,925 ( 0.00%)          r
      .               }
      .           
      .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
153,719 ( 0.03%)      #[instrument(skip(self, f), level = "debug")]
188,919 ( 0.03%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
      .               {
 25,305 ( 0.00%)          let snapshot = self.start_snapshot();
 86,832 ( 0.02%)          let r = f(&snapshot);
      .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
 22,699 ( 0.00%)          match r {
      .                       Ok(_) => {
122,550 ( 0.02%)                  self.commit_from(snapshot);
      .                       }
      .                       Err(_) => {
 61,536 ( 0.01%)                  self.rollback_to("commit_if_ok -- error", snapshot);
      .                       }
      .                   }
137,070 ( 0.02%)          r
      .               }
      .           
      .               /// Execute `f` then unroll any bindings it creates.
 74,266 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
 87,166 ( 0.02%)      pub fn probe<R, F>(&self, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
 21,806 ( 0.00%)          let snapshot = self.start_snapshot();
 38,670 ( 0.01%)          let r = f(&snapshot);
 99,394 ( 0.02%)          self.rollback_to("probe", snapshot);
  6,534 ( 0.00%)          r
      .               }
      .           
      .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
     36 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
     48 ( 0.00%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
      8 ( 0.00%)          let snapshot = self.start_snapshot();
      4 ( 0.00%)          let was_skip_leak_check = self.skip_leak_check.get();
      8 ( 0.00%)          if should_skip {
      .                       self.skip_leak_check.set(true);
      .                   }
     16 ( 0.00%)          let r = f(&snapshot);
     36 ( 0.00%)          self.rollback_to("probe", snapshot);
      .                   self.skip_leak_check.set(was_skip_leak_check);
     48 ( 0.00%)          r
      .               }
      .           
      .               /// Scan the constraints produced since `snapshot` began and returns:
      .               ///
      .               /// - `None` -- if none of them involve "region outlives" constraints
      .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
      .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
  6,916 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
      .                   &self,
      .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
      .               ) -> Option<bool> {
 13,832 ( 0.00%)          self.inner
      .                       .borrow_mut()
      .                       .unwrap_region_constraints()
      .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
 10,374 ( 0.00%)      }
      .           
      .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
      .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
      .               }
      .           
     96 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
      .               where
      .                   T: at::ToTrace<'tcx>,
      .               {
      .                   let origin = &ObligationCause::dummy();
      .                   self.probe(|_| {
      .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
      .                           // Ignore obligations, since we are unrolling
      .                           // everything anyway.
      .                       })
      .                   })
     72 ( 0.00%)      }
      .           
    672 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
      .               where
      .                   T: at::ToTrace<'tcx>,
      .               {
      .                   let origin = &ObligationCause::dummy();
      .                   self.probe(|_| {
      .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
      .                           // Ignore obligations, since we are unrolling
      .                           // everything anyway.
      .                       })
      .                   })
    504 ( 0.00%)      }
      .           
  4,300 ( 0.00%)      #[instrument(skip(self), level = "debug")]
      .               pub fn sub_regions(
      .                   &self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   a: ty::Region<'tcx>,
      .                   b: ty::Region<'tcx>,
      .               ) {
  3,870 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
      .               }
      .           
      .               /// Require that the region `r` be equal to one of the regions in
      .               /// the set `regions`.
      .               #[instrument(skip(self), level = "debug")]
      .               pub fn member_constraint(
      .                   &self,
      .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 969 ----------------------------------------
      .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
      .               /// actually requiring `a <: b`. This is of course a valid coercion,
      .               /// but it's not as flexible as `FnCtxt::coerce` would be.
      .               ///
      .               /// (We may refactor this in the future, but there are a number of
      .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
      .               /// records adjustments that are required on the HIR in order to perform
      .               /// the coercion, and we don't currently have a way to manage that.)
     69 ( 0.00%)      pub fn coerce_predicate(
      .                   &self,
      .                   cause: &ObligationCause<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   predicate: ty::PolyCoercePredicate<'tcx>,
      .               ) -> Option<InferResult<'tcx, ()>> {
     46 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
      .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
      .                       a: p.a,
      .                       b: p.b,
      .                   });
    115 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
     92 ( 0.00%)      }
      .           
  1,056 ( 0.00%)      pub fn subtype_predicate(
      .                   &self,
      .                   cause: &ObligationCause<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   predicate: ty::PolySubtypePredicate<'tcx>,
      .               ) -> Option<InferResult<'tcx, ()>> {
      .                   // Check for two unresolved inference variables, in which case we can
      .                   // make no progress. This is partly a micro-optimization, but it's
      .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
      .                   // earlier that they are sub-unified).
      .                   //
      .                   // Note that we can just skip the binders here because
      .                   // type variables can't (at present, at
      .                   // least) capture any of the things bound by this binder.
      .                   //
      .                   // Note that this sub here is not just for diagnostics - it has semantic
      .                   // effects as well.
     88 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
     88 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
    588 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
    124 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
      .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
    124 ( 0.00%)                  return None;
      .                       }
      .                       _ => {}
      .                   }
      .           
      .                   Some(self.commit_if_ok(|_snapshot| {
     26 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
      .                           self.replace_bound_vars_with_placeholders(predicate);
      .           
     52 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
      .           
      .                       Ok(ok.unit())
      .                   }))
    792 ( 0.00%)      }
      .           
    192 ( 0.00%)      pub fn region_outlives_predicate(
      .                   &self,
      .                   cause: &traits::ObligationCause<'tcx>,
      .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
      .               ) -> UnitResult<'tcx> {
      .                   self.commit_if_ok(|_snapshot| {
      .                       let ty::OutlivesPredicate(r_a, r_b) =
      .                           self.replace_bound_vars_with_placeholders(predicate);
      .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
      .                           RelateRegionParamBound(cause.span)
      .                       });
    160 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
      .                       Ok(())
      .                   })
    128 ( 0.00%)      }
      .           
      .               /// Number of type variables created so far.
     23 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
      .                   self.inner.borrow_mut().type_variables().num_vars()
     46 ( 0.00%)      }
      .           
  4,032 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
 20,160 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
  6,048 ( 0.00%)      }
      .           
  3,726 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
 13,959 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
  5,589 ( 0.00%)      }
      .           
    288 ( 0.00%)      pub fn next_ty_var_in_universe(
      .                   &self,
      .                   origin: TypeVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> Ty<'tcx> {
  1,584 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
    144 ( 0.00%)          self.tcx.mk_ty_var(vid)
    432 ( 0.00%)      }
      .           
      .               pub fn next_const_var(
      .                   &self,
      .                   ty: Ty<'tcx>,
      .                   origin: ConstVariableOrigin,
      .               ) -> &'tcx ty::Const<'tcx> {
      .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
      .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
      .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
      .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
      .                       origin,
      .                       val: ConstVariableValue::Unknown { universe: self.universe() },
      .                   })
      .               }
      .           
      .               fn next_int_var_id(&self) -> IntVid {
    630 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
      .               }
      .           
    378 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
      .                   self.tcx.mk_int_var(self.next_int_var_id())
    504 ( 0.00%)      }
      .           
      .               fn next_float_var_id(&self) -> FloatVid {
      .                   self.inner.borrow_mut().float_unification_table().new_key(None)
      .               }
      .           
      .               pub fn next_float_var(&self) -> Ty<'tcx> {
      .                   self.tcx.mk_float_var(self.next_float_var_id())
      .               }
      .           
      .               /// Creates a fresh region variable with the next available index.
      .               /// The variable will be created in the maximum universe created
      .               /// thus far, allowing it to name any region created thus far.
  1,067 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
 29,612 ( 0.01%)          self.next_region_var_in_universe(origin, self.universe())
  2,134 ( 0.00%)      }
      .           
      .               /// Creates a fresh region variable with the next available index
      .               /// in the given universe; typically, you can use
      .               /// `next_region_var` and just use the maximal universe.
 11,532 ( 0.00%)      pub fn next_region_var_in_universe(
      .                   &self,
      .                   origin: RegionVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> ty::Region<'tcx> {
      .                   let region_var =
 74,958 ( 0.01%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
 28,830 ( 0.01%)          self.tcx.mk_region(ty::ReVar(region_var))
 17,298 ( 0.00%)      }
      .           
      .               /// Return the universe that the region `r` was created in.  For
      .               /// most regions (e.g., `'static`, named regions from the user,
      .               /// etc) this is the root universe U0. For inference variables or
      .               /// placeholders, however, it will return the universe which which
      .               /// they are associated.
  1,562 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
      .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
  2,343 ( 0.00%)      }
      .           
      .               /// Number of region variables created so far.
  1,014 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
      .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
  1,521 ( 0.00%)      }
      .           
      .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
  1,578 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
      .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
  3,156 ( 0.00%)      }
      .           
      .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
      .               pub fn next_nll_region_var_in_universe(
      .                   &self,
      .                   origin: NllRegionVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> ty::Region<'tcx> {
      .                   self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
      .               }
      .           
 53,936 ( 0.01%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
 28,640 ( 0.01%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
      .                           // Create a region inference variable for the given
      .                           // region parameter definition.
  2,535 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
      .                       }
      .                       GenericParamDefKind::Type { .. } => {
      .                           // Create a type inference variable for the given
      .                           // type parameter definition. The substitutions are
      .                           // for actual parameters that may be referred to by
      .                           // the default of this type parameter, if it exists.
      .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
      .                           // used in a path such as `Foo::<T, U>::new()` will
      .                           // use an inference variable for `C` with `[T, U]`
      .                           // as the substitutions for the default, `(T, U)`.
 16,016 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
      .                               self.universe(),
 20,020 ( 0.00%)                      TypeVariableOrigin {
      .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
  4,004 ( 0.00%)                              param.name,
  4,004 ( 0.00%)                              Some(param.def_id),
      .                                   ),
      .                                   span,
      .                               },
      .                           );
      .           
  4,004 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
      .                       }
      .                       GenericParamDefKind::Const { .. } => {
      .                           let origin = ConstVariableOrigin {
      .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
      .                                   param.name,
      .                                   param.def_id,
      .                               ),
      .                               span,
      .                           };
      .                           let const_var_id =
  2,233 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
      .                                   origin,
      .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
      .                               });
    203 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
      .                       }
      .                   }
  1,624 ( 0.00%)      }
      .           
      .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
      .               /// type/region parameter to a fresh inference variable.
 17,004 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
 65,763 ( 0.01%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
 11,336 ( 0.00%)      }
      .           
      .               /// Returns `true` if errors have been reported since this infcx was
      .               /// created. This is sometimes used as a heuristic to skip
      .               /// reporting errors that often occur as a result of earlier
      .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
      .               /// inference variables, regionck errors).
    444 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
      .                   debug!(
      .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
      .                        tainted_by_errors_flag={})",
      .                       self.tcx.sess.err_count(),
      .                       self.err_count_on_creation,
      .                       self.tainted_by_errors_flag.get()
      .                   );
      .           
 11,070 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
      .                       return true; // errors reported since this infcx was made
      .                   }
      .                   self.tainted_by_errors_flag.get()
    666 ( 0.00%)      }
      .           
      .               /// Set the "tainted by errors" flag to true. We call this when we
      .               /// observe an error from a prior pass.
      .               pub fn set_tainted_by_errors(&self) {
      .                   debug!("set_tainted_by_errors()");
      .                   self.tainted_by_errors_flag.set(true)
      .               }
      .           
      .               /// Process the region constraints and return any any errors that
      .               /// result. After this, no more unification operations should be
      .               /// done -- or the compiler will panic -- but it is legal to use
      .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
 11,102 ( 0.00%)      pub fn resolve_regions(
      .                   &self,
      .                   region_context: DefId,
      .                   outlives_env: &OutlivesEnvironment<'tcx>,
      .                   mode: RegionckMode,
      .               ) -> Vec<RegionResolutionError<'tcx>> {
 30,134 ( 0.01%)          let (var_infos, data) = {
      .                       let mut inner = self.inner.borrow_mut();
      .                       let inner = &mut *inner;
  1,586 ( 0.00%)              assert!(
  4,758 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
      .                           "region_obligations not empty: {:#?}",
      .                           inner.region_obligations
      .                       );
      .                       inner
      .                           .region_constraint_storage
      .                           .take()
      .                           .expect("regions already resolved")
      .                           .with_log(&mut inner.undo_log)
      .                           .into_infos_and_data()
  1,586 ( 0.00%)          };
      .           
      .                   let region_rels =
  1,586 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
      .           
 14,274 ( 0.00%)          let (lexical_region_resolutions, errors) =
 38,064 ( 0.01%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
      .           
  6,344 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
  1,586 ( 0.00%)          assert!(old_value.is_none());
      .           
      .                   errors
 14,274 ( 0.00%)      }
      .           
      .               /// Process the region constraints and report any errors that
      .               /// result. After this, no more unification operations should be
      .               /// done -- or the compiler will panic -- but it is legal to use
      .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
 15,860 ( 0.00%)      pub fn resolve_regions_and_report_errors(
      .                   &self,
      .                   region_context: DefId,
      .                   outlives_env: &OutlivesEnvironment<'tcx>,
      .                   mode: RegionckMode,
      .               ) {
  3,172 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
      .           
  4,758 ( 0.00%)          if !self.is_tainted_by_errors() {
      .                       // As a heuristic, just skip reporting region errors
      .                       // altogether if other errors have been reported while
      .                       // this infcx was in use.  This is totally hokey but
      .                       // otherwise we have a hard time separating legit region
      .                       // errors from silly ones.
  3,172 ( 0.00%)              self.report_region_errors(&errors);
      .                   }
  7,930 ( 0.00%)      }
      .           
      .               /// Obtains (and clears) the current set of region
      .               /// constraints. The inference context is still usable: further
      .               /// unifications will simply add new constraints.
      .               ///
      .               /// This method is not meant to be used with normal lexical region
      .               /// resolution. Rather, it is used in the NLL mode as a kind of
      .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
      .               }
      .           
      .               /// Gives temporary access to the region constraint data.
      .               pub fn with_region_constraints<R>(
      .                   &self,
      .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
      .               ) -> R {
      .                   let mut inner = self.inner.borrow_mut();
  3,060 ( 0.00%)          op(inner.unwrap_region_constraints().data())
      .               }
      .           
      .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
      .                   let mut inner = self.inner.borrow_mut();
      .                   let inner = &mut *inner;
      .                   inner
      .                       .region_constraint_storage
      .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
      .                       .var_origin(vid)
      .               }
      .           
      .               /// Takes ownership of the list of variable regions. This implies
      .               /// that all the region constraints have already been taken, and
      .               /// hence that `resolve_regions_and_report_errors` can never be
      .               /// called. This is used only during NLL processing to "hand off" ownership
      .               /// of the set of region variables into the NLL region context.
    630 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
      .                   let mut inner = self.inner.borrow_mut();
  2,394 ( 0.00%)          let (var_infos, data) = inner
      .                       .region_constraint_storage
      .                       .take()
      .                       .expect("regions already resolved")
      .                       .with_log(&mut inner.undo_log)
    126 ( 0.00%)              .into_infos_and_data();
    126 ( 0.00%)          assert!(data.is_empty());
      .                   var_infos
  1,008 ( 0.00%)      }
      .           
      .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
      .                   self.resolve_vars_if_possible(t).to_string()
      .               }
      .           
      .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
      .               /// universe index of `TyVar(vid)`.
  1,702 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
      .                   use self::type_variable::TypeVariableValue;
      .           
  5,106 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
      .                       TypeVariableValue::Known { value } => Ok(value),
      .                       TypeVariableValue::Unknown { universe } => Err(universe),
      .                   }
  5,957 ( 0.00%)      }
      .           
      .               /// Resolve any type variables found in `value` -- but only one
      .               /// level.  So, if the variable `?X` is bound to some type
      .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
      .               /// itself be bound to a type).
      .               ///
      .               /// Useful when you only need to inspect the outermost level of
      .               /// the type and don't care about nested types (or perhaps you
      .               /// will be resolving them as well, e.g. in a loop).
      .               pub fn shallow_resolve<T>(&self, value: T) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 36,861 ( 0.01%)          value.fold_with(&mut ShallowResolver { infcx: self })
      .               }
      .           
  2,480 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
      .                   self.inner.borrow_mut().type_variables().root_var(var)
  3,720 ( 0.00%)      }
      .           
      .               /// Where possible, replaces type/const variables in
      .               /// `value` with their final value. Note that region variables
      .               /// are unaffected. If a type/const variable has not been unified, it
      .               /// is left as is. This is an idempotent operation that does
      .               /// not affect inference state in any way and so you can do it
      .               /// at will.
  3,652 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 40,094 ( 0.01%)          if !value.needs_infer() {
 45,466 ( 0.01%)              return value; // Avoid duplicated subst-folding.
      .                   }
 38,333 ( 0.01%)          let mut r = resolve::OpportunisticVarResolver::new(self);
 40,909 ( 0.01%)          value.fold_with(&mut r)
  4,537 ( 0.00%)      }
      .           
      .               /// Returns the first unresolved variable contained in `T`. In the
      .               /// process of visiting `T`, this will resolve (where possible)
      .               /// type variables in `T`, but it never constructs the final,
      .               /// resolved type, so it's more efficient than
      .               /// `resolve_vars_if_possible()`.
      .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
      .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
      .                   expected: &'tcx ty::Const<'tcx>,
      .                   actual: &'tcx ty::Const<'tcx>,
      .                   err: TypeError<'tcx>,
      .               ) -> DiagnosticBuilder<'tcx> {
      .                   let trace = TypeTrace::consts(cause, true, expected, actual);
      .                   self.report_and_explain_type_error(trace, &err)
      .               }
      .           
  3,438 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
      .                   &self,
      .                   span: Span,
      .                   lbrct: LateBoundRegionConversionTime,
      .                   value: ty::Binder<'tcx, T>,
      .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   let fld_r =
 12,869 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
      .                   let fld_t = |_| {
      .                       self.next_ty_var(TypeVariableOrigin {
      .                           kind: TypeVariableOriginKind::MiscVariable,
      .                           span,
      .                       })
      .                   };
      .                   let fld_c = |_, ty| {
      .                       self.next_const_var(
      .                           ty,
      .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
      .                       )
      .                   };
 58,331 ( 0.01%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
  2,292 ( 0.00%)      }
      .           
      .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
  1,264 ( 0.00%)      pub fn verify_generic_bound(
      .                   &self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   kind: GenericKind<'tcx>,
      .                   a: ty::Region<'tcx>,
      .                   bound: VerifyBound<'tcx>,
      .               ) {
      .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
      .           
    474 ( 0.00%)          self.inner
      .                       .borrow_mut()
      .                       .unwrap_region_constraints()
  2,686 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
  1,106 ( 0.00%)      }
      .           
      .               /// Obtains the latest type of the given closure; this may be a
      .               /// closure in the current function, in which case its
      .               /// `ClosureKind` may not yet be known.
     40 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
     80 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
      .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
     60 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
      .               }
      .           
      .               /// Clears the selection, evaluation, and projection caches. This is useful when
      .               /// repeatedly attempting to select an `Obligation` while changing only
      .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
      .               pub fn clear_caches(&self) {
      .                   self.selection_cache.clear();
      .                   self.evaluation_cache.clear();
      .                   self.inner.borrow_mut().projection_cache().clear();
      .               }
      .           
      .               pub fn universe(&self) -> ty::UniverseIndex {
 83,323 ( 0.01%)          self.universe.get()
 27,017 ( 0.00%)      }
      .           
      .               /// Creates and return a fresh universe that extends all previous
      .               /// universes. Updates `self.universe` to that new universe.
      .               pub fn create_next_universe(&self) -> ty::UniverseIndex {
      .                   let u = self.universe.get().next_universe();
      .                   self.universe.set(u);
      .                   u
      .               }
-- line 1568 ----------------------------------------
-- line 1574 ----------------------------------------
      .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
      .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
      .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
      .               /// too generic for the constant to be evaluated then `Err(ErrorHandled::TooGeneric)` is
      .               /// returned.
      .               ///
      .               /// This handles inferences variables within both `param_env` and `substs` by
      .               /// performing the operation on their respective canonical forms.
     39 ( 0.00%)      pub fn const_eval_resolve(
      .                   &self,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   unevaluated: ty::Unevaluated<'tcx>,
      .                   span: Option<Span>,
      .               ) -> EvalToConstValueResult<'tcx> {
      3 ( 0.00%)          let substs = self.resolve_vars_if_possible(unevaluated.substs);
      .           
      .                   // Postpone the evaluation of constants whose substs depend on inference
      .                   // variables
      .                   if substs.has_infer_types_or_consts() {
      .                       return Err(ErrorHandled::TooGeneric);
      .                   }
      .           
      3 ( 0.00%)          let param_env_erased = self.tcx.erase_regions(param_env);
      6 ( 0.00%)          let substs_erased = self.tcx.erase_regions(substs);
      .           
      .                   let unevaluated = ty::Unevaluated {
      .                       def: unevaluated.def,
      .                       substs: substs_erased,
      6 ( 0.00%)              promoted: unevaluated.promoted,
      .                   };
      .           
      .                   // The return value is the evaluated value which doesn't contain any reference to inference
      .                   // variables, thus we don't need to substitute back the original values.
     36 ( 0.00%)          self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
     27 ( 0.00%)      }
      .           
      .               /// If `typ` is a type variable of some kind, resolve it one level
      .               /// (but do not resolve types found in the result). If `typ` is
      .               /// not a type variable, just return it unmodified.
      .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
409,600 ( 0.07%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
235,521 ( 0.04%)          match *typ.kind() {
      .                       ty::Infer(ty::TyVar(v)) => {
      .                           // Not entirely obvious: if `typ` is a type variable,
      .                           // it can be resolved to an int/float variable, which
      .                           // can then be recursively resolved, hence the
      .                           // recursion. Note though that we prevent type
      .                           // variables from unifying to other type variables
      .                           // directly (though they may be embedded
      .                           // structurally), and we prevent cycles in any case,
      .                           // so this recursion should always be of very limited
      .                           // depth.
      .                           //
      .                           // Note: if these two lines are combined into one we get
      .                           // dynamic borrow errors on `self.inner`.
120,592 ( 0.02%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
      .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
      .                       }
      .           
  9,544 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
      .                           .inner
      .                           .borrow_mut()
      .                           .int_unification_table()
      .                           .probe_value(v)
  2,775 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
      .                           .unwrap_or(typ),
      .           
      .                       ty::Infer(ty::FloatVar(v)) => self
      .                           .inner
      .                           .borrow_mut()
      .                           .float_unification_table()
      .                           .probe_value(v)
      .                           .map(|v| v.to_type(self.tcx))
      .                           .unwrap_or(typ),
      .           
      .                       _ => typ,
      .                   }
460,800 ( 0.08%)      }
      .           
      .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
      .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
      .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
      .               ///
      .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
      .               /// inlined, despite being large, because it has only two call sites that
      .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
      .               #[inline(always)]
      .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
      .                   match infer_var {
      .                       TyOrConstInferVar::Ty(v) => {
      .                           use self::type_variable::TypeVariableValue;
      .           
      .                           // If `inlined_probe` returns a `Known` value, it never equals
      .                           // `ty::Infer(ty::TyVar(v))`.
 77,620 ( 0.01%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
      .                               TypeVariableValue::Unknown { .. } => false,
      .                               TypeVariableValue::Known { .. } => true,
      .                           }
      .                       }
      .           
      .                       TyOrConstInferVar::TyInt(v) => {
      .                           // If `inlined_probe_value` returns a value it's always a
      .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
      .                           // `ty::Infer(_)`.
  1,278 ( 0.00%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
      .                       }
      .           
      .                       TyOrConstInferVar::TyFloat(v) => {
      .                           // If `probe_value` returns a value it's always a
      .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
      .                           //
      .                           // Not `inlined_probe_value(v)` because this call site is colder.
      .                           self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
-- line 1688 ----------------------------------------
-- line 1716 ----------------------------------------
      .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
      .               Const(ConstVid<'tcx>),
      .           }
      .           
      .           impl<'tcx> TyOrConstInferVar<'tcx> {
      .               /// Tries to extract an inference variable from a type or a constant, returns `None`
      .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
      .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
  1,678 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
      .                   match arg.unpack() {
      .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
      .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
      .                       GenericArgKind::Lifetime(_) => None,
      .                   }
  1,678 ( 0.00%)      }
      .           
      .               /// Tries to extract an inference variable from a type, returns `None`
      .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
    120 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
 16,019 ( 0.00%)          match *ty.kind() {
  3,488 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
     86 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
      .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
      .                       _ => None,
      .                   }
    120 ( 0.00%)      }
      .           
      .               /// Tries to extract an inference variable from a constant, returns `None`
      .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
      .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
      .                   match ct.val {
      .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
      .                       _ => None,
      .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
      .           }
      .           
      .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
      .                   self.infcx.tcx
      .               }
      .           
      .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
 74,787 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
      .               }
      .           
    944 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    944 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
  1,180 ( 0.00%)              self.infcx
      .                           .inner
      .                           .borrow_mut()
      .                           .const_unification_table()
    708 ( 0.00%)                  .probe_value(*vid)
      .                           .val
      .                           .known()
      .                           .unwrap_or(ct)
      .                   } else {
      .                       ct
      .                   }
  1,180 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TypeTrace<'tcx> {
      .               pub fn span(&self) -> Span {
      .                   self.cause.span
      .               }
      .           
      .               pub fn types(
-- line 1787 ----------------------------------------
-- line 1818 ----------------------------------------
      .                       CompareImplTypeObligation { span, .. } => span,
      .                   }
      .               }
      .           
      .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
      .               where
      .                   F: FnOnce() -> Self,
      .               {
  2,428 ( 0.00%)          match *cause.code() {
    618 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
  3,090 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
      .                       }
      .           
      .                       traits::ObligationCauseCode::CompareImplMethodObligation {
      .                           impl_item_def_id,
      .                           trait_item_def_id,
      .                       } => SubregionOrigin::CompareImplMethodObligation {
      .                           span: cause.span,
      .                           impl_item_def_id,
-- line 1836 ----------------------------------------

409,255 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/scoped-tls-1.0.0/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 111 ----------------------------------------
      .               ///     });
      .               ///
      .               ///     // Recursive calls restore the previous value.
      .               ///     let val = FOO.with(|v| *v);
      .               ///     assert_eq!(val, 100);
      .               /// });
      .               /// # }
      .               /// ```
      8 ( 0.00%)      pub fn set<F, R>(&'static self, t: &T, f: F) -> R
      .                   where F: FnOnce() -> R
      .               {
      .                   struct Reset {
      .                       key: &'static LocalKey<Cell<usize>>,
      .                       val: usize,
      .                   }
      .                   impl Drop for Reset {
      6 ( 0.00%)              fn drop(&mut self) {
      4 ( 0.00%)                  self.key.with(|c| c.set(self.val));
      6 ( 0.00%)              }
      .                   }
      2 ( 0.00%)          let prev = self.inner.with(|c| {
      2 ( 0.00%)              let prev = c.get();
      .                       c.set(t as *const T as usize);
      .                       prev
      .                   });
      6 ( 0.00%)          let _reset = Reset { key: self.inner, val: prev };
      3 ( 0.00%)          f()
      6 ( 0.00%)      }
      .           
      .               /// Gets a value out of this scoped variable.
      .               ///
      .               /// This function takes a closure which receives the value of this
      .               /// variable.
      .               ///
      .               /// # Panics
      .               ///
-- line 146 ----------------------------------------
-- line 156 ----------------------------------------
      .               ///
      .               /// # fn main() {
      .               /// FOO.with(|slot| {
      .               ///     // work with `slot`
      .               /// # drop(slot);
      .               /// });
      .               /// # }
      .               /// ```
557,284 ( 0.10%)      pub fn with<F, R>(&'static self, f: F) -> R
      .                   where F: FnOnce(&T) -> R
      .               {
 94,733 ( 0.02%)          let val = self.inner.with(|c| c.get());
267,734 ( 0.05%)          assert!(val != 0, "cannot access a scoped thread local \
      .                                      variable without calling `set` first");
      .                   unsafe {
 39,795 ( 0.01%)              f(&*(val as *const T))
      .                   }
644,583 ( 0.12%)      }
      .           
      .               /// Test whether this TLS key has been `set` for the current thread.
      .               pub fn is_set(&'static self) -> bool {
      6 ( 0.00%)          self.inner.with(|c| c.get() != 0)
      .               }
      .           }
      .           
      .           #[cfg(test)]
      .           mod tests {
      .               use std::cell::Cell;
      .               use std::sync::mpsc::{channel, Sender};
      .               use std::thread;
-- line 185 ----------------------------------------

139,621 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/scoped-tls-1.0.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs
--------------------------------------------------------------------------------
Ir               

-- line 28 ----------------------------------------
      .               PushRegionObligation,
      .           }
      .           
      .           macro_rules! impl_from {
      .               ($($ctor: ident ($ty: ty),)*) => {
      .                   $(
      .                   impl<'tcx> From<$ty> for UndoLog<'tcx> {
      .                       fn from(x: $ty) -> Self {
    518 ( 0.00%)                  UndoLog::$ctor(x.into())
      .                       }
      .                   }
      .                   )*
      .               }
      .           }
      .           
      .           // Upcast from a single kind of "undoable action" to the general enum
      .           impl_from! {
-- line 44 ----------------------------------------
-- line 57 ----------------------------------------
      .               ConstUnificationTable(sv::UndoLog<ut::Delegate<ty::ConstVid<'tcx>>>),
      .           
      .               RegionUnificationTable(sv::UndoLog<ut::Delegate<RegionVidKey<'tcx>>>),
      .               ProjectionCache(traits::UndoLog<'tcx>),
      .           }
      .           
      .           /// The Rollback trait defines how to rollback a particular action.
      .           impl<'tcx> Rollback<UndoLog<'tcx>> for InferCtxtInner<'tcx> {
 88,332 ( 0.02%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
147,220 ( 0.03%)          match undo {
203,440 ( 0.04%)              UndoLog::TypeVariables(undo) => self.type_variable_storage.reverse(undo),
    290 ( 0.00%)              UndoLog::ConstUnificationTable(undo) => self.const_unification_storage.reverse(undo),
  2,926 ( 0.00%)              UndoLog::IntUnificationTable(undo) => self.int_unification_storage.reverse(undo),
      .                       UndoLog::FloatUnificationTable(undo) => self.float_unification_storage.reverse(undo),
      .                       UndoLog::RegionConstraintCollector(undo) => {
 26,327 ( 0.00%)                  self.region_constraint_storage.as_mut().unwrap().reverse(undo)
      .                       }
      .                       UndoLog::RegionUnificationTable(undo) => {
  6,974 ( 0.00%)                  self.region_constraint_storage.as_mut().unwrap().unification_table.reverse(undo)
      .                       }
      .                       UndoLog::ProjectionCache(undo) => self.projection_cache.reverse(undo),
      .                       UndoLog::PushRegionObligation => {
      .                           self.region_obligations.pop();
      .                       }
      .                   }
117,776 ( 0.02%)      }
      .           }
      .           
      .           /// The combined undo log for all the various unification tables. For each change to the storage
      .           /// for any kind of inference variable, we record an UndoLog entry in the vector here.
      .           pub(crate) struct InferCtxtUndoLogs<'tcx> {
      .               logs: Vec<UndoLog<'tcx>>,
      .               num_open_snapshots: usize,
      .           }
      .           
      .           impl Default for InferCtxtUndoLogs<'_> {
      .               fn default() -> Self {
  9,028 ( 0.00%)          Self { logs: Default::default(), num_open_snapshots: Default::default() }
      .               }
      .           }
      .           
      .           /// The UndoLogs trait defines how we undo a particular kind of action (of type T). We can undo any
      .           /// action that is convertable into an UndoLog (per the From impls above).
      .           impl<'tcx, T> UndoLogs<T> for InferCtxtUndoLogs<'tcx>
      .           where
      .               UndoLog<'tcx>: From<T>,
-- line 102 ----------------------------------------
-- line 103 ----------------------------------------
      .           {
      .               #[inline]
      .               fn num_open_snapshots(&self) -> usize {
      .                   self.num_open_snapshots
      .               }
      .           
      .               #[inline]
      .               fn push(&mut self, undo: T) {
 16,465 ( 0.00%)          if self.in_snapshot() {
  4,144 ( 0.00%)              self.logs.push(undo.into())
      .                   }
      .               }
      .           
      .               fn clear(&mut self) {
      .                   self.logs.clear();
      .                   self.num_open_snapshots = 0;
      .               }
      .           
-- line 120 ----------------------------------------
-- line 125 ----------------------------------------
      .               {
      .                   if self.in_snapshot() {
      .                       self.logs.extend(undos.into_iter().map(UndoLog::from))
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> InferCtxtInner<'tcx> {
102,552 ( 0.02%)      pub fn rollback_to(&mut self, snapshot: Snapshot<'tcx>) {
      .                   debug!("rollback_to({})", snapshot.undo_len);
      .                   self.undo_log.assert_open_snapshot(&snapshot);
      .           
122,516 ( 0.02%)          while self.undo_log.logs.len() > snapshot.undo_len {
      .                       let undo = self.undo_log.logs.pop().unwrap();
353,328 ( 0.06%)              self.reverse(undo);
      .                   }
      .           
 39,534 ( 0.01%)          if self.undo_log.num_open_snapshots == 1 {
      .                       // The root snapshot. It's safe to clear the undo log because
      .                       // there's no snapshot further out that we might need to roll back
      .                       // to.
  7,216 ( 0.00%)              assert!(snapshot.undo_len == 0);
      .                       self.undo_log.logs.clear();
      .                   }
      .           
 54,884 ( 0.01%)          self.undo_log.num_open_snapshots -= 1;
119,644 ( 0.02%)      }
      .           
      .               pub fn commit(&mut self, snapshot: Snapshot<'tcx>) {
      .                   debug!("commit({})", snapshot.undo_len);
      .           
 57,378 ( 0.01%)          if self.undo_log.num_open_snapshots == 1 {
      .                       // The root snapshot. It's safe to clear the undo log because
      .                       // there's no snapshot further out that we might need to roll back
      .                       // to.
 11,568 ( 0.00%)              assert!(snapshot.undo_len == 0);
      .                       self.undo_log.logs.clear();
      .                   }
      .           
 63,162 ( 0.01%)          self.undo_log.num_open_snapshots -= 1;
      .               }
      .           }
      .           
      .           impl<'tcx> InferCtxtUndoLogs<'tcx> {
      .               pub fn start_snapshot(&mut self) -> Snapshot<'tcx> {
144,872 ( 0.03%)          self.num_open_snapshots += 1;
      .                   Snapshot { undo_len: self.logs.len(), _marker: PhantomData }
      .               }
      .           
      .               pub(crate) fn region_constraints_in_snapshot(
      .                   &self,
      .                   s: &Snapshot<'tcx>,
      .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
 15,493 ( 0.00%)          self.logs[s.undo_len..].iter().filter_map(|log| match log {
      .                       UndoLog::RegionConstraintCollector(log) => Some(log),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               pub(crate) fn region_constraints(
      .                   &self,
      .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
-- line 186 ----------------------------------------
-- line 187 ----------------------------------------
      .                   self.logs.iter().filter_map(|log| match log {
      .                       UndoLog::RegionConstraintCollector(log) => Some(log),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn assert_open_snapshot(&self, snapshot: &Snapshot<'tcx>) {
      .                   // Failures here may indicate a failure to follow a stack discipline.
 51,276 ( 0.01%)          assert!(self.logs.len() >= snapshot.undo_len);
 51,276 ( 0.01%)          assert!(self.num_open_snapshots > 0);
      .               }
      .           }
      .           
      .           impl<'tcx> std::ops::Index<usize> for InferCtxtUndoLogs<'tcx> {
      .               type Output = UndoLog<'tcx>;
      .           
      .               fn index(&self, key: usize) -> &Self::Output {
      .                   &self.logs[key]
-- line 204 ----------------------------------------

 70,163 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
710,595 ( 0.13%)      pub fn rustc_entry(&mut self, key: K) -> RustcEntry<'_, K, V, A> {
      .                   let hash = make_insert_hash(&self.hash_builder, &key);
    847 ( 0.00%)          if let Some(elem) = self.table.find(hash, |q| q.0.eq(&key)) {
 49,448 ( 0.01%)              RustcEntry::Occupied(RustcOccupiedEntry {
 58,388 ( 0.01%)                  key: Some(key),
      .                           elem,
      .                           table: &mut self.table,
      .                       })
      .                   } else {
      .                       // Ideally we would put this in VacantEntry::insert, but Entry is not
      .                       // generic over the BuildHasher and adding a generic parameter would be
      .                       // a breaking change.
      .                       self.reserve(1);
      .           
178,514 ( 0.03%)              RustcEntry::Vacant(RustcVacantEntry {
      .                           hash,
 37,791 ( 0.01%)                  key,
      .                           table: &mut self.table,
      .                       })
      .                   }
531,236 ( 0.10%)      }
      .           }
      .           
      .           /// A view into a single entry in a map, which may either be vacant or occupied.
      .           ///
      .           /// This `enum` is constructed from the [`entry`] method on [`HashMap`].
      .           ///
      .           /// [`HashMap`]: struct.HashMap.html
      .           /// [`entry`]: struct.HashMap.html#method.rustc_entry
-- line 62 ----------------------------------------
-- line 405 ----------------------------------------
      .               /// if let RustcEntry::Occupied(o) = map.rustc_entry("poneyland") {
      .               ///     *o.into_mut() += 10;
      .               /// }
      .               ///
      .               /// assert_eq!(map["poneyland"], 22);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn into_mut(self) -> &'a mut V {
  2,373 ( 0.00%)          unsafe { &mut self.elem.as_mut().1 }
      .               }
      .           
      .               /// Sets the value of the entry, and returns the entry's old value.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 421 ----------------------------------------
-- line 568 ----------------------------------------
      .               /// let mut map: HashMap<&str, u32> = HashMap::new();
      .               ///
      .               /// if let RustcEntry::Vacant(o) = map.rustc_entry("poneyland") {
      .               ///     o.insert(37);
      .               /// }
      .               /// assert_eq!(map["poneyland"], 37);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  3,149 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
      .                   unsafe {
 23,606 ( 0.00%)              let bucket = self.table.insert_no_grow(self.hash, (self.key, value));
  1,367 ( 0.00%)              &mut bucket.as_mut().1
      .                   }
  4,228 ( 0.00%)      }
      .           
      .               /// Sets the value of the entry with the RustcVacantEntry's key,
      .               /// and returns a RustcOccupiedEntry.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 589 ----------------------------------------

140,462 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 141 ----------------------------------------
      .               /// ```
      .               /// let a = [1, 2, 3];
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
      .               #[inline]
      .               pub const fn is_empty(&self) -> bool {
141,140 ( 0.03%)          self.len() == 0
      .               }
      .           
      .               /// Returns the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.first());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn first(&self) -> Option<&T> {
    951 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
      .               ///     *first = 5;
      .               /// }
      .               /// assert_eq!(x, &[5, 1, 2]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
      .               #[inline]
      .               pub const fn first_mut(&mut self) -> Option<&mut T> {
     56 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
      .               }
      .           
      .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 237 ----------------------------------------
      .               ///     assert_eq!(last, &2);
      .               ///     assert_eq!(elements, &[0, 1]);
      .               /// }
      .               /// ```
      .               #[stable(feature = "slice_splits", since = "1.5.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
  3,743 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
      .               }
      .           
      .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.last());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn last(&self) -> Option<&T> {
105,903 ( 0.02%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the last item in the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
      .               ///     *last = 10;
      .               /// }
      .               /// assert_eq!(x, &[0, 1, 10]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
      .               #[inline]
      .               pub const fn last_mut(&mut self) -> Option<&mut T> {
 82,375 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a reference to an element or subslice depending on the type of
      .               /// index.
      .               ///
      .               /// - If given a position, returns a reference to the element at that
      .               ///   position or `None` if out of bounds.
      .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
      .               /// }
      .               /// ```
      .               ///
      .               /// [`as_mut_ptr`]: slice::as_mut_ptr
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
      .               #[inline]
      .               pub const fn as_ptr(&self) -> *const T {
161,514 ( 0.03%)          self as *const [T] as *const T
      .               }
      .           
      .               /// Returns an unsafe mutable pointer to the slice's buffer.
      .               ///
      .               /// The caller must ensure that the slice outlives the pointer this
      .               /// function returns, or else it will end up pointing to garbage.
      .               ///
      .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
      .               ///     }
      .               /// }
      .               /// assert_eq!(x, &[3, 4, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
      .               #[inline]
      .               pub const fn as_mut_ptr(&mut self) -> *mut T {
      4 ( 0.00%)          self as *mut [T] as *mut T
      .               }
      .           
      .               /// Returns the two raw pointers spanning the slice.
      .               ///
      .               /// The returned range is half-open, which means that the end pointer
      .               /// points *one past* the last element of the slice. This way, an empty
      .               /// slice is represented by two equal pointers, and the difference between
      .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 582 ----------------------------------------
      .               /// v.swap(2, 4);
      .               /// assert!(v == ["a", "b", "e", "d", "c"]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
      .               #[inline]
      .               #[track_caller]
      .               pub const fn swap(&mut self, a: usize, b: usize) {
  1,562 ( 0.00%)          let _ = &self[a];
  6,678 ( 0.00%)          let _ = &self[b];
      .           
      .                   // SAFETY: we just checked that both `a` and `b` are in bounds
      .                   unsafe { self.swap_unchecked(a, b) }
      .               }
      .           
      .               /// Swaps two elements in the slice, without doing bounds checking.
      .               ///
      .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
      .           
      .                       // Because this function is first compiled in isolation,
      .                       // this check tells LLVM that the indexing below is
      .                       // in-bounds.  Then after inlining -- once the actual
      .                       // lengths of the slices are known -- it's removed.
      .                       let (a, b) = (&mut a[..n], &mut b[..n]);
      .           
      .                       for i in 0..n {
    533 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
      .                       }
      .                   }
      .               }
      .           
      .               /// Returns an iterator over the slice.
      .               ///
      .               /// # Examples
      .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
      .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
      .               ///     assert_eq!(right, []);
      .               /// }
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
     66 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_unchecked(mid) }
      .               }
      .           
      .               /// Divides one mutable slice into two at an index.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
      .               /// left[1] = 2;
      .               /// right[1] = 4;
      .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
  8,246 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_mut_unchecked(mid) }
      .               }
      .           
      .               /// Divides one slice into two at an index, without doing bounds checking.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
      .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
      .                   let len = self.len();
      .                   let ptr = self.as_mut_ptr();
      .           
      .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
      .                   //
      .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
      .                   // is fine.
  1,145 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
      .               }
      .           
      .               /// Divides one slice into an array and a remainder slice at an index.
      .               ///
      .               /// The array will contain all indices from `[0, N)` (excluding
      .               /// the index `N` itself) and the slice will contain all
      .               /// indices from `[N, len)` (excluding the index `len` itself).
      .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
      .               /// assert!(!v.iter().any(|e| e == "hi"));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               pub fn contains(&self, x: &T) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      2 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
      .               }
      .           
      .               /// Returns `true` if `needle` is a prefix of the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
      .               /// assert!(v.starts_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn starts_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let n = needle.len();
  7,157 ( 0.00%)          self.len() >= n && needle == &self[..n]
      .               }
      .           
      .               /// Returns `true` if `needle` is a suffix of the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
      .               /// assert!(v.ends_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn ends_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let (m, n) = (self.len(), needle.len());
  3,344 ( 0.00%)          m >= n && needle == &self[m - n..]
      .               }
      .           
      .               /// Returns a subslice with the prefix removed.
      .               ///
      .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
      .               /// If `prefix` is empty, simply returns the original slice.
      .               ///
      .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
      .               /// s.insert(idx, num);
      .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
      .               where
      .                   T: Ord,
      .               {
      3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
      .               }
      .           
      .               /// Binary searches this sorted slice with a comparator function.
      .               ///
      .               /// The comparator function should implement an order consistent
      .               /// with the sort order of the underlying slice, returning an
      .               /// order code that indicates whether its argument is `Less`,
      .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
      .               #[inline]
      .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
      .               where
      .                   F: FnMut(&'a T) -> Ordering,
      .               {
      .                   let mut size = self.len();
      .                   let mut left = 0;
      .                   let mut right = size;
575,328 ( 0.10%)          while left < right {
779,407 ( 0.14%)              let mid = left + size / 2;
      .           
      .                       // SAFETY: the call is made safe by the following invariants:
      .                       // - `mid >= 0`
      .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
319,608 ( 0.06%)              let cmp = f(unsafe { self.get_unchecked(mid) });
      .           
      .                       // The reason why we use if/else control flow rather than match
      .                       // is because match reorders comparison operations, which is perf sensitive.
      .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
239,758 ( 0.04%)              if cmp == Less {
292,750 ( 0.05%)                  left = mid + 1;
119,417 ( 0.02%)              } else if cmp == Greater {
      .                           right = mid;
      .                       } else {
      .                           // SAFETY: same as the `get_unchecked` above
      .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
      .                           return Ok(mid);
      .                       }
      .           
712,692 ( 0.13%)              size = right - left;
      .                   }
      .                   Err(left)
      .               }
      .           
      .               /// Binary searches this sorted slice with a key extraction function.
      .               ///
      .               /// Assumes that the slice is sorted by the key, for instance with
      .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
      .                   #[track_caller]
      .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
      .                       panic!(
      .                           "source slice length ({}) does not match destination slice length ({})",
      .                           src_len, dst_len,
      .                       );
      .                   }
      .           
 16,350 ( 0.00%)          if self.len() != src.len() {
      .                       len_mismatch_fail(self.len(), src.len());
      .                   }
      .           
      .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
      .                   // checked to have the same length. The slices cannot overlap because
      .                   // mutable references are exclusive.
      .                   unsafe {
      .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3382 ----------------------------------------
      .                   }
      .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
      .                   let ts: usize = mem::size_of::<U>() / gcd;
      .                   let us: usize = mem::size_of::<T>() / gcd;
      .           
      .                   // Armed with this knowledge, we can find how many `U`s we can fit!
      .                   let us_len = self.len() / ts * us;
      .                   // And how many `T`s will be in the trailing slice!
  2,120 ( 0.00%)          let ts_len = self.len() % ts;
      .                   (us_len, ts_len)
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
      .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
      .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
      .                       return (self, &[], &[]);
      .                   }
      .           
      .                   // First, find at what point do we split between the first and 2nd slice. Easy with
      .                   // ptr.align_offset.
      .                   let ptr = self.as_ptr();
      .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
      .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
  2,120 ( 0.00%)          if offset > self.len() {
      .                       (self, &[], &[])
      .                   } else {
      .                       let (left, rest) = self.split_at(offset);
      .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
      .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
      .                       // since the caller guarantees that we can transmute `T` to `U` safely.
      .                       unsafe {
      .                           (
      .                               left,
      .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
  2,120 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
      .                           )
      .                       }
      .                   }
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
-- line 3456 ----------------------------------------
-- line 3731 ----------------------------------------
      .               /// let v = [1, 2, 3, 3, 5, 6, 7];
      .               /// let i = v.partition_point(|&x| x < 5);
      .               ///
      .               /// assert_eq!(i, 4);
      .               /// assert!(v[..i].iter().all(|&x| x < 5));
      .               /// assert!(v[i..].iter().all(|&x| !(x < 5)));
      .               /// ```
      .               #[stable(feature = "partition_point", since = "1.52.0")]
      3 ( 0.00%)      pub fn partition_point<P>(&self, mut pred: P) -> usize
      .               where
      .                   P: FnMut(&T) -> bool,
      .               {
      .                   self.binary_search_by(|x| if pred(x) { Less } else { Greater }).unwrap_or_else(|i| i)
      6 ( 0.00%)      }
      .           
      .               /// Removes the subslice corresponding to the given range
      .               /// and returns a reference to it.
      .               ///
      .               /// Returns `None` and does not modify the slice if the given
      .               /// range is out of bounds.
      .               ///
      .               /// Note that this method only accepts one-sided ranges such as
-- line 3752 ----------------------------------------

480,686 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs
--------------------------------------------------------------------------------
Ir               

-- line 176 ----------------------------------------
      .               }
      .               fn sess(self) -> Option<&'tcx Session> {
      .                   None
      .               }
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   None
      .               }
      .           
  7,086 ( 0.00%)      fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {
  2,362 ( 0.00%)          let tcx = self.tcx();
340,749 ( 0.06%)          DecodeContext {
 36,099 ( 0.01%)              opaque: opaque::Decoder::new(self.blob(), pos),
  2,362 ( 0.00%)              cdata: self.cdata(),
      .                       blob: self.blob(),
 15,006 ( 0.00%)              sess: self.sess().or(tcx.map(|tcx| tcx.sess)),
      .                       tcx,
      .                       last_source_file_index: 0,
      .                       lazy_state: LazyState::NoNode,
      .                       alloc_decoding_session: self
      .                           .cdata()
 31,792 ( 0.01%)                  .map(|cdata| cdata.cdata.alloc_decoding_state.new_decoding_session()),
      .                   }
  7,086 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob {
      .               #[inline]
      .               fn blob(self) -> &'a MetadataBlob {
      .                   self
      .               }
      .           }
-- line 206 ----------------------------------------
-- line 255 ----------------------------------------
      .               }
      .               #[inline]
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   Some(self.1)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<T> {
 54,792 ( 0.01%)      fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {
 32,022 ( 0.01%)          let mut dcx = metadata.decoder(self.position.get());
 98,624 ( 0.02%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 29,713 ( 0.01%)          T::decode(&mut dcx)
 69,879 ( 0.01%)      }
      .           }
      .           
      .           impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<[T]> {
      .               fn decode<M: Metadata<'a, 'tcx>>(
      .                   self,
      .                   metadata: M,
      .               ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {
     91 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
     26 ( 0.00%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 10,797 ( 0.00%)          (0..self.meta).map(move |_| T::decode(&mut dcx))
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> DecodeContext<'a, 'tcx> {
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   debug_assert!(self.tcx.is_some(), "missing TyCtxt in DecodeContext");
      .                   self.tcx.unwrap()
-- line 285 ----------------------------------------
-- line 292 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn cdata(&self) -> CrateMetadataRef<'a> {
      .                   debug_assert!(self.cdata.is_some(), "missing CrateMetadata in DecodeContext");
      .                   self.cdata.unwrap()
      .               }
      .           
      .               fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {
138,029 ( 0.02%)          if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }
      .               }
      .           
 40,126 ( 0.01%)      fn read_lazy_with_meta<T: ?Sized + LazyMeta>(&mut self, meta: T::Meta) -> Lazy<T> {
      .                   let distance = self.read_usize();
 38,248 ( 0.01%)          let position = match self.lazy_state {
      .                       LazyState::NoNode => bug!("read_lazy_with_meta: outside of a metadata node"),
  6,936 ( 0.00%)              LazyState::NodeStart(start) => {
      .                           let start = start.get();
 13,872 ( 0.00%)                  assert!(distance <= start);
      .                           start - distance
      .                       }
 10,464 ( 0.00%)              LazyState::Previous(last_pos) => last_pos.get() + distance,
      .                   };
 20,848 ( 0.00%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(position).unwrap());
      .                   Lazy::from_position_and_meta(NonZeroUsize::new(position).unwrap(), meta)
 40,126 ( 0.01%)      }
      .           
      .               #[inline]
      .               pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {
      .                   self.opaque.read_raw_bytes(len)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {
-- line 324 ----------------------------------------
-- line 326 ----------------------------------------
      .           
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   self.tcx.expect("missing TyCtxt in DecodeContext")
      .               }
      .           
      .               #[inline]
      .               fn peek_byte(&self) -> u8 {
 88,895 ( 0.02%)          self.opaque.data[self.opaque.position()]
      .               }
      .           
      .               #[inline]
      .               fn position(&self) -> usize {
      .                   self.opaque.position()
      .               }
      .           
 73,367 ( 0.01%)      fn cached_ty_for_shorthand<F>(&mut self, shorthand: usize, or_insert_with: F) -> Ty<'tcx>
      .               where
      .                   F: FnOnce(&mut Self) -> Ty<'tcx>,
      .               {
 10,481 ( 0.00%)          let tcx = self.tcx();
      .           
 10,481 ( 0.00%)          let key = ty::CReaderCacheKey { cnum: Some(self.cdata().cnum), pos: shorthand };
      .           
 29,556 ( 0.01%)          if let Some(&ty) = tcx.ty_rcache.borrow().get(&key) {
      .                       return ty;
      .                   }
      .           
  3,092 ( 0.00%)          let ty = or_insert_with(self);
      .                   tcx.ty_rcache.borrow_mut().insert(key, ty);
      .                   ty
 94,329 ( 0.02%)      }
      .           
      .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R,
      .               {
      .                   let new_opaque = opaque::Decoder::new(self.opaque.data, pos);
      .                   let old_opaque = mem::replace(&mut self.opaque, new_opaque);
      .                   let old_state = mem::replace(&mut self.lazy_state, LazyState::NoNode);
      .                   let r = f(self);
 17,335 ( 0.00%)          self.opaque = old_opaque;
  3,467 ( 0.00%)          self.lazy_state = old_state;
      .                   r
      .               }
      .           
      .               fn decode_alloc_id(&mut self) -> rustc_middle::mir::interpret::AllocId {
      .                   if let Some(alloc_decoding_session) = self.alloc_decoding_session {
      .                       alloc_decoding_session.decode_alloc_id(self)
      .                   } else {
      .                       bug!("Attempting to decode interpret::AllocId without CrateMetadata")
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for CrateNum {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> CrateNum {
 74,690 ( 0.01%)          let cnum = CrateNum::from_u32(d.read_u32());
      .                   d.map_encoded_cnum_to_current(cnum)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefIndex {
    323 ( 0.00%)      fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefIndex {
128,384 ( 0.02%)          DefIndex::from_u32(d.read_u32())
    646 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnIndex {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> ExpnIndex {
      .                   ExpnIndex::from_u32(d.read_u32())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {
134,312 ( 0.02%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {
 33,578 ( 0.01%)          let cdata = decoder.cdata();
 33,578 ( 0.01%)          let sess = decoder.sess.unwrap();
 67,156 ( 0.01%)          let cname = cdata.root.name;
      .                   rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {
      .                       debug!("SpecializedDecoder<SyntaxContext>: decoding {}", id);
  2,280 ( 0.00%)              cdata
      .                           .root
      .                           .syntax_contexts
      .                           .get(cdata, id)
      .                           .unwrap_or_else(|| panic!("Missing SyntaxContext {:?} for crate {:?}", id, cname))
      .                           .decode((cdata, sess))
      .                   })
167,890 ( 0.03%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {
 11,221 ( 0.00%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {
  1,603 ( 0.00%)          let local_cdata = decoder.cdata();
  1,603 ( 0.00%)          let sess = decoder.sess.unwrap();
      .           
      .                   let cnum = CrateNum::decode(decoder);
      .                   let index = u32::decode(decoder);
      .           
      .                   let expn_id = rustc_span::hygiene::decode_expn_id(cnum, index, |expn_id| {
      .                       let ExpnId { krate: cnum, local_id: index } = expn_id;
      .                       // Lookup local `ExpnData`s in our own crate data. Foreign `ExpnData`s
      .                       // are stored in the owning crate, to avoid duplication.
      .                       debug_assert_ne!(cnum, LOCAL_CRATE);
    592 ( 0.00%)              let crate_data = if cnum == local_cdata.cnum {
      .                           local_cdata
      .                       } else {
      .                           local_cdata.cstore.get_crate_data(cnum)
      .                       };
  2,960 ( 0.00%)              let expn_data = crate_data
      .                           .root
      .                           .expn_data
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
  2,960 ( 0.00%)              let expn_hash = crate_data
      .                           .root
      .                           .expn_hashes
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
  5,920 ( 0.00%)              (expn_data, expn_hash)
      .                   });
      .                   expn_id
 12,824 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {
254,944 ( 0.05%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Span {
 31,868 ( 0.01%)          let ctxt = SyntaxContext::decode(decoder);
      .                   let tag = u8::decode(decoder);
      .           
 63,736 ( 0.01%)          if tag == TAG_PARTIAL_SPAN {
      .                       return DUMMY_SP.with_ctxt(ctxt);
      .                   }
      .           
      .                   debug_assert!(tag == TAG_VALID_SPAN_LOCAL || tag == TAG_VALID_SPAN_FOREIGN);
      .           
      .                   let lo = BytePos::decode(decoder);
      .                   let len = BytePos::decode(decoder);
      .                   let hi = lo + len;
      .           
 95,583 ( 0.02%)          let Some(sess) = decoder.sess else {
      .                       bug!("Cannot decode Span without Session.")
      .                   };
      .           
      .                   // There are two possibilities here:
      .                   // 1. This is a 'local span', which is located inside a `SourceFile`
      .                   // that came from this crate. In this case, we use the source map data
      .                   // encoded in this crate. This branch should be taken nearly all of the time.
      .                   // 2. This is a 'foreign span', which is located inside a `SourceFile`
-- line 476 ----------------------------------------
-- line 492 ----------------------------------------
      .                   // a transitive dependency.
      .                   //
      .                   // When we encode a foreign span, we adjust its 'lo' and 'high' values
      .                   // to be based on the *foreign* crate (e.g. crate C), not the crate
      .                   // we are writing metadata for (e.g. crate B). This allows us to
      .                   // treat the 'local' and 'foreign' cases almost identically during deserialization:
      .                   // we can call `imported_source_files` for the proper crate, and binary search
      .                   // through the returned slice using our span.
 85,498 ( 0.02%)          let imported_source_files = if tag == TAG_VALID_SPAN_LOCAL {
      .                       decoder.cdata().imported_source_files(sess)
      .                   } else {
      .                       // When we encode a proc-macro crate, all `Span`s should be encoded
      .                       // with `TAG_VALID_SPAN_LOCAL`
     29 ( 0.00%)              if decoder.cdata().root.is_proc_macro_crate() {
      .                           // Decode `CrateNum` as u32 - using `CrateNum::decode` will ICE
      .                           // since we don't have `cnum_map` populated.
      .                           let cnum = u32::decode(decoder);
      .                           panic!(
      .                               "Decoding of crate {:?} tried to access proc-macro dep {:?}",
      .                               decoder.cdata().root.name,
      .                               cnum
      .                           );
-- line 513 ----------------------------------------
-- line 518 ----------------------------------------
      .                           "SpecializedDecoder<Span>::specialized_decode: loading source files from cnum {:?}",
      .                           cnum
      .                       );
      .           
      .                       // Decoding 'foreign' spans should be rare enough that it's
      .                       // not worth it to maintain a per-CrateNum cache for `last_source_file_index`.
      .                       // We just set it to 0, to ensure that we don't try to access something out
      .                       // of bounds for our initial 'guess'
     58 ( 0.00%)              decoder.last_source_file_index = 0;
      .           
     29 ( 0.00%)              let foreign_data = decoder.cdata().cstore.get_crate_data(cnum);
      .                       foreign_data.imported_source_files(sess)
      .                   };
      .           
      .                   let source_file = {
      .                       // Optimize for the case that most spans within a translated item
      .                       // originate from the same source_file.
 95,583 ( 0.02%)              let last_source_file = &imported_source_files[decoder.last_source_file_index];
      .           
118,415 ( 0.02%)              if lo >= last_source_file.original_start_pos && lo <= last_source_file.original_end_pos
      .                       {
      .                           last_source_file
      .                       } else {
      .                           let index = imported_source_files
      .                               .binary_search_by_key(&lo, |source_file| source_file.original_start_pos)
 43,548 ( 0.01%)                      .unwrap_or_else(|index| index - 1);
      .           
      .                           // Don't try to cache the index for foreign spans,
      .                           // as this would require a map from CrateNums to indices
 21,776 ( 0.00%)                  if tag == TAG_VALID_SPAN_LOCAL {
 21,760 ( 0.00%)                      decoder.last_source_file_index = index;
      .                           }
 43,552 ( 0.01%)                  &imported_source_files[index]
      .                       }
      .                   };
      .           
      .                   // Make sure our binary search above is correct.
      .                   debug_assert!(
      .                       lo >= source_file.original_start_pos && lo <= source_file.original_end_pos,
      .                       "Bad binary search: lo={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       lo,
-- line 558 ----------------------------------------
-- line 565 ----------------------------------------
      .                       hi >= source_file.original_start_pos && hi <= source_file.original_end_pos,
      .                       "Bad binary search: hi={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       hi,
      .                       source_file.original_start_pos,
      .                       source_file.original_end_pos
      .                   );
      .           
      .                   let lo =
127,444 ( 0.02%)              (lo + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .                   let hi =
      .                       (hi + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .           
      .                   // Do not try to decode parent for foreign spans.
      .                   Span::new(lo, hi, ctxt, None)
286,812 ( 0.05%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [thir::abstract_const::Node<'tcx>] {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
-- line 587 ----------------------------------------
-- line 590 ----------------------------------------
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<T>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
 12,202 ( 0.00%)          decoder.read_lazy_with_meta(())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<[T]>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 15,819 ( 0.00%)          if len == 0 { Lazy::empty() } else { decoder.read_lazy_with_meta(len) }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, I: Idx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<Table<I, T>>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 11,830 ( 0.00%)          decoder.read_lazy_with_meta(len)
      .               }
      .           }
      .           
      .           implement_ty_decoder!(DecodeContext<'a, 'tcx>);
      .           
      .           impl<'tcx> MetadataBlob {
      .               crate fn new(metadata_ref: MetadataRef) -> MetadataBlob {
      .                   MetadataBlob(Lrc::new(metadata_ref))
-- line 626 ----------------------------------------
-- line 630 ----------------------------------------
      .                   self.blob().starts_with(METADATA_HEADER)
      .               }
      .           
      .               crate fn get_rustc_version(&self) -> String {
      .                   Lazy::<String>::from_position(NonZeroUsize::new(METADATA_HEADER.len() + 4).unwrap())
      .                       .decode(self)
      .               }
      .           
    210 ( 0.00%)      crate fn get_root(&self) -> CrateRoot<'tcx> {
     70 ( 0.00%)          let slice = &self.blob()[..];
      .                   let offset = METADATA_HEADER.len();
    350 ( 0.00%)          let pos = (((slice[offset + 0] as u32) << 24)
    140 ( 0.00%)              | ((slice[offset + 1] as u32) << 16)
    280 ( 0.00%)              | ((slice[offset + 2] as u32) << 8)
    210 ( 0.00%)              | ((slice[offset + 3] as u32) << 0)) as usize;
      .                   Lazy::<CrateRoot<'tcx>>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)
    350 ( 0.00%)      }
      .           
      .               crate fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {
      .                   let root = self.get_root();
      .                   writeln!(out, "Crate info:")?;
      .                   writeln!(out, "name {}{}", root.name, root.extra_filename)?;
      .                   writeln!(out, "hash {} stable_crate_id {:?}", root.hash, root.stable_crate_id)?;
      .                   writeln!(out, "proc_macro {:?}", root.proc_macro_data.is_some())?;
      .                   writeln!(out, "=External Dependencies=")?;
-- line 654 ----------------------------------------
-- line 666 ----------------------------------------
      .                   }
      .                   write!(out, "\n")?;
      .                   Ok(())
      .               }
      .           }
      .           
      .           impl CrateRoot<'_> {
      .               crate fn is_proc_macro_crate(&self) -> bool {
     46 ( 0.00%)          self.proc_macro_data.is_some()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
      6 ( 0.00%)          self.name
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
     23 ( 0.00%)          self.hash
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
     46 ( 0.00%)          self.stable_crate_id
      .               }
      .           
      .               crate fn triple(&self) -> &TargetTriple {
      .                   &self.triple
      .               }
      .           
      .               crate fn decode_crate_deps<'a>(
      .                   &self,
      .                   metadata: &'a MetadataBlob,
      .               ) -> impl ExactSizeIterator<Item = CrateDep> + Captures<'a> {
     46 ( 0.00%)          self.crate_deps.decode(metadata)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> CrateMetadataRef<'a> {
      .               fn raw_proc_macro(self, id: DefIndex) -> &'a ProcMacro {
      .                   // DefIndex's in root.proc_macro_data have a one-to-one correspondence
      .                   // with items in 'raw_proc_macros'.
      .                   let pos = self
-- line 705 ----------------------------------------
-- line 709 ----------------------------------------
      .                       .unwrap()
      .                       .macros
      .                       .decode(self)
      .                       .position(|i| i == id)
      .                       .unwrap();
      .                   &self.raw_proc_macros.unwrap()[pos]
      .               }
      .           
 23,881 ( 0.00%)      fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {
 18,168 ( 0.00%)          let name = self.def_key(item_index).disambiguated_data.data.get_opt_name()?;
 12,138 ( 0.00%)          let span = match self.root.tables.ident_span.get(self, item_index) {
      .                       Some(lazy_span) => lazy_span.decode((self, sess)),
      .                       None => {
      .                           // FIXME: this weird case of a name with no span is specific to `extern crate`
      .                           // items, which are supposed to be treated like `use` items and only be encoded
      .                           // to metadata as `Export`s, return `None` because that's what all the callers
      .                           // expect in this case.
    153 ( 0.00%)                  assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);
      .                           return None;
      .                       }
      .                   };
      .                   Some(Ident::new(name, span))
 30,714 ( 0.01%)      }
      .           
    200 ( 0.00%)      fn item_ident(self, item_index: DefIndex, sess: &Session) -> Ident {
  5,124 ( 0.00%)          self.opt_item_ident(item_index, sess).expect("no encoded ident for item")
    400 ( 0.00%)      }
      .           
      .               fn maybe_kind(self, item_id: DefIndex) -> Option<EntryKind> {
 12,636 ( 0.00%)          self.root.tables.kind.get(self, item_id).map(|k| k.decode(self))
      .               }
      .           
 50,544 ( 0.01%)      fn kind(self, item_id: DefIndex) -> EntryKind {
      .                   self.maybe_kind(item_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
 37,908 ( 0.01%)      }
      .           
 10,136 ( 0.00%)      fn def_kind(self, item_id: DefIndex) -> DefKind {
  9,342 ( 0.00%)          self.root.tables.def_kind.get(self, item_id).map(|k| k.decode(self)).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
  5,792 ( 0.00%)      }
      .           
  1,800 ( 0.00%)      fn get_span(self, index: DefIndex, sess: &Session) -> Span {
  5,902 ( 0.00%)          self.root
      .                       .tables
      .                       .span
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing span for {:?}", index))
      .                       .decode((self, sess))
  1,000 ( 0.00%)      }
      .           
      .               fn load_proc_macro(self, id: DefIndex, sess: &Session) -> SyntaxExtension {
      .                   let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {
      .                       ProcMacro::CustomDerive { trait_name, attributes, client } => {
      .                           let helper_attrs =
      .                               attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();
      .                           (
      .                               trait_name,
-- line 778 ----------------------------------------
-- line 795 ----------------------------------------
      .                       self.get_span(id, sess),
      .                       helper_attrs,
      .                       self.root.edition,
      .                       Symbol::intern(name),
      .                       &attrs,
      .                   )
      .               }
      .           
    676 ( 0.00%)      fn get_trait_def(self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {
    208 ( 0.00%)          match self.kind(item_id) {
     52 ( 0.00%)              EntryKind::Trait(data) => {
    312 ( 0.00%)                  let data = data.decode((self, sess));
    832 ( 0.00%)                  ty::TraitDef::new(
      .                               self.local_def_id(item_id),
    104 ( 0.00%)                      data.unsafety,
    104 ( 0.00%)                      data.paren_sugar,
    104 ( 0.00%)                      data.has_auto_impl,
    104 ( 0.00%)                      data.is_marker,
     52 ( 0.00%)                      data.skip_array_during_method_dispatch,
     52 ( 0.00%)                      data.specialization_kind,
    208 ( 0.00%)                      self.def_path_hash(item_id),
     52 ( 0.00%)                      data.must_implement_one_of,
      .                           )
      .                       }
      .                       EntryKind::TraitAlias => ty::TraitDef::new(
      .                           self.local_def_id(item_id),
      .                           hir::Unsafety::Normal,
      .                           false,
      .                           false,
      .                           false,
      .                           false,
      .                           ty::trait_def::TraitSpecializationKind::None,
      .                           self.def_path_hash(item_id),
      .                           None,
      .                       ),
      .                       _ => bug!("def-index does not refer to trait or trait alias"),
      .                   }
    468 ( 0.00%)      }
      .           
    378 ( 0.00%)      fn get_variant(
      .                   self,
      .                   kind: &EntryKind,
      .                   index: DefIndex,
      .                   parent_did: DefId,
      .                   sess: &Session,
      .               ) -> ty::VariantDef {
    168 ( 0.00%)          let data = match kind {
      .                       EntryKind::Variant(data) | EntryKind::Struct(data, _) | EntryKind::Union(data, _) => {
    210 ( 0.00%)                  data.decode(self)
      .                       }
      .                       _ => bug!(),
      .                   };
      .           
    160 ( 0.00%)          let adt_kind = match kind {
      .                       EntryKind::Variant(_) => ty::AdtKind::Enum,
      .                       EntryKind::Struct(..) => ty::AdtKind::Struct,
      .                       EntryKind::Union(..) => ty::AdtKind::Union,
      .                       _ => bug!(),
      .                   };
      .           
      .                   let variant_did =
      .                       if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };
     84 ( 0.00%)          let ctor_did = data.ctor.map(|index| self.local_def_id(index));
      .           
    924 ( 0.00%)          ty::VariantDef::new(
      .                       self.item_ident(index, sess).name,
      .                       variant_did,
      .                       ctor_did,
    168 ( 0.00%)              data.discr,
    252 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, index)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
      .                           .map(|index| ty::FieldDef {
     59 ( 0.00%)                      did: self.local_def_id(index),
    118 ( 0.00%)                      name: self.item_ident(index, sess).name,
    118 ( 0.00%)                      vis: self.get_visibility(index),
      .                           })
      .                           .collect(),
      .                       data.ctor_kind,
      .                       adt_kind,
      .                       parent_did,
      .                       false,
     42 ( 0.00%)              data.is_non_exhaustive,
      .                   )
    378 ( 0.00%)      }
      .           
    570 ( 0.00%)      fn get_adt_def(self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {
    152 ( 0.00%)          let kind = self.kind(item_id);
     76 ( 0.00%)          let did = self.local_def_id(item_id);
      .           
    190 ( 0.00%)          let (adt_kind, repr) = match kind {
      .                       EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),
      .                       EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),
      .                       EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),
      .                       _ => bug!("get_adt_def called on a non-ADT {:?}", did),
      .                   };
      .           
      .                   let variants = if let ty::AdtKind::Enum = adt_kind {
     15 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, item_id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
    119 ( 0.00%)                  .map(|index| self.get_variant(&self.kind(index), index, did, tcx.sess))
      .                           .collect()
      .                   } else {
    280 ( 0.00%)              std::iter::once(self.get_variant(&kind, item_id, did, tcx.sess)).collect()
      .                   };
      .           
    547 ( 0.00%)          tcx.alloc_adt_def(did, adt_kind, variants, repr)
    266 ( 0.00%)      }
      .           
      .               fn get_explicit_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
  3,400 ( 0.00%)          self.root.tables.explicit_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_inferred_outlives(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
  3,400 ( 0.00%)          self.root
      .                       .tables
      .                       .inferred_outlives
      .                       .get(self, item_id)
     20 ( 0.00%)              .map(|predicates| tcx.arena.alloc_from_iter(predicates.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_super_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
    285 ( 0.00%)          self.root.tables.super_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_explicit_item_bounds(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
     40 ( 0.00%)          self.root
      .                       .tables
      .                       .explicit_item_bounds
      .                       .get(self, item_id)
     32 ( 0.00%)              .map(|bounds| tcx.arena.alloc_from_iter(bounds.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_generics(self, item_id: DefIndex, sess: &Session) -> ty::Generics {
  6,377 ( 0.00%)          self.root.tables.generics.get(self, item_id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_type(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
  7,660 ( 0.00%)          self.root
      .                       .tables
      .                       .ty
      .                       .get(self, id)
      .                       .unwrap_or_else(|| panic!("Not a type: {:?}", id))
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_stability(self, id: DefIndex) -> Option<attr::Stability> {
    285 ( 0.00%)          self.root.tables.stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_const_stability(self, id: DefIndex) -> Option<attr::ConstStability> {
      5 ( 0.00%)          self.root.tables.const_stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_deprecation(self, id: DefIndex) -> Option<attr::Deprecation> {
    535 ( 0.00%)          self.root.tables.deprecation.get(self, id).map(|depr| depr.decode(self))
      .               }
      .           
    738 ( 0.00%)      fn get_visibility(self, id: DefIndex) -> ty::Visibility {
  6,440 ( 0.00%)          self.root.tables.visibility.get(self, id).unwrap().decode(self)
    492 ( 0.00%)      }
      .           
      .               fn get_impl_data(self, id: DefIndex) -> ImplData {
 28,104 ( 0.01%)          match self.kind(id) {
 23,420 ( 0.00%)              EntryKind::Impl(data) => data.decode(self),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_parent_impl(self, id: DefIndex) -> Option<DefId> {
 12,531 ( 0.00%)          self.get_impl_data(id).parent_impl
      .               }
      .           
      .               fn get_impl_polarity(self, id: DefIndex) -> ty::ImplPolarity {
    489 ( 0.00%)          self.get_impl_data(id).polarity
      .               }
      .           
      .               fn get_impl_defaultness(self, id: DefIndex) -> hir::Defaultness {
     18 ( 0.00%)          self.get_impl_data(id).defaultness
      .               }
      .           
      .               fn get_impl_constness(self, id: DefIndex) -> hir::Constness {
      .                   self.get_impl_data(id).constness
      .               }
      .           
      .               fn get_trait_item_def_id(self, id: DefIndex) -> Option<DefId> {
  4,620 ( 0.00%)          self.root.tables.trait_item_def_id.get(self, id).map(|d| d.decode(self))
      .               }
      .           
      .               fn get_coerce_unsized_info(self, id: DefIndex) -> Option<ty::adjustment::CoerceUnsizedInfo> {
      .                   self.get_impl_data(id).coerce_unsized_info
      .               }
      .           
      .               fn get_impl_trait(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {
 61,707 ( 0.01%)          self.root.tables.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))
      .               }
      .           
      .               fn get_expn_that_defined(self, id: DefIndex, sess: &Session) -> ExpnId {
  2,205 ( 0.00%)          self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_const_param_default(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> rustc_middle::ty::Const<'tcx> {
      .                   self.root.tables.const_defaults.get(self, id).unwrap().decode((self, tcx))
-- line 1026 ----------------------------------------
-- line 1028 ----------------------------------------
      .           
      .               /// Iterates over all the stability attributes in the given crate.
      .               fn get_lib_features(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {
      .                   tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))
      .               }
      .           
      .               /// Iterates over the language items in the given crate.
      .               fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {
     69 ( 0.00%)          tcx.arena.alloc_from_iter(
     46 ( 0.00%)              self.root
      .                           .lang_items
      .                           .decode(self)
    564 ( 0.00%)                  .map(|(def_index, index)| (self.local_def_id(def_index), index)),
      .                   )
      .               }
      .           
      .               /// Iterates over the diagnostic items in the given crate.
      .               fn get_diagnostic_items(self) -> DiagnosticItems {
      .                   let mut id_to_name = FxHashMap::default();
     46 ( 0.00%)          let name_to_id = self
      .                       .root
      .                       .diagnostic_items
      .                       .decode(self)
      .                       .map(|(name, def_index)| {
    130 ( 0.00%)                  let id = self.local_def_id(def_index);
    130 ( 0.00%)                  id_to_name.insert(id, name);
      .                           (name, id)
      .                       })
      .                       .collect();
    207 ( 0.00%)          DiagnosticItems { id_to_name, name_to_id }
      .               }
      .           
      .               /// Iterates over all named children of the given module,
      .               /// including both proper items and reexports.
      .               /// Module here is understood in name resolution sense - it can be a `mod` item,
      .               /// or a crate root, or an enum, or a trait.
      .               fn for_each_module_child(
      .                   self,
      .                   id: DefIndex,
      .                   mut callback: impl FnMut(ModChild),
      .                   sess: &Session,
      .               ) {
    268 ( 0.00%)          if let Some(data) = &self.root.proc_macro_data {
      .                       // If we are loading as a proc macro, we want to return
      .                       // the view of this crate as a proc macro crate.
      .                       if id == CRATE_DEF_INDEX {
      .                           for def_index in data.macros.decode(self) {
      .                               let raw_macro = self.raw_proc_macro(def_index);
      .                               let res = Res::Def(
      .                                   DefKind::Macro(macro_kind(raw_macro)),
      .                                   self.local_def_id(def_index),
-- line 1078 ----------------------------------------
-- line 1085 ----------------------------------------
      .                                   span: ident.span,
      .                               });
      .                           }
      .                       }
      .                       return;
      .                   }
      .           
      .                   // Iterate over all children.
    536 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
  1,072 ( 0.00%)              for child_index in children.decode((self, sess)) {
  6,636 ( 0.00%)                  if let Some(ident) = self.opt_item_ident(child_index, sess) {
  1,716 ( 0.00%)                      let kind = self.def_kind(child_index);
  1,144 ( 0.00%)                      if matches!(kind, DefKind::Macro(..)) {
      .                                   // FIXME: Macros are currently encoded twice, once as items and once as
      .                                   // reexports. We ignore the items here and only use the reexports.
      .                                   continue;
      .                               }
      .                               let def_id = self.local_def_id(child_index);
      .                               let res = Res::Def(kind, def_id);
      .                               let vis = self.get_visibility(child_index);
      .                               let span = self.get_span(child_index, sess);
      .           
      .                               callback(ModChild { ident, res, vis, span });
      .           
      .                               // For non-re-export structs and variants add their constructors to children.
      .                               // Re-export lists automatically contain constructors when necessary.
  2,206 ( 0.00%)                      match kind {
      .                                   DefKind::Struct => {
     30 ( 0.00%)                              if let Some((ctor_def_id, ctor_kind)) =
      .                                           self.get_ctor_def_id_and_kind(child_index)
      .                                       {
      .                                           let ctor_res =
      .                                               Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
      .                                           let vis = self.get_visibility(ctor_def_id.index);
      .                                           callback(ModChild { ident, res: ctor_res, vis, span });
      .                                       }
      .                                   }
      .                                   DefKind::Variant => {
      .                                       // Braced variants, unlike structs, generate unusable names in
      .                                       // value namespace, they are reserved for possible future use.
      .                                       // It's ok to use the variant's id as a ctor id since an
      .                                       // error will be reported on any use of such resolution anyway.
     15 ( 0.00%)                              let (ctor_def_id, ctor_kind) = self
      .                                           .get_ctor_def_id_and_kind(child_index)
      .                                           .unwrap_or((def_id, CtorKind::Fictive));
      .                                       let ctor_res =
      .                                           Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id);
      .                                       let mut vis = self.get_visibility(ctor_def_id.index);
      5 ( 0.00%)                              if ctor_def_id == def_id && vis.is_public() {
      .                                           // For non-exhaustive variants lower the constructor visibility to
      .                                           // within the crate. We only need this for fictive constructors,
      .                                           // for other constructors correct visibilities
      .                                           // were already encoded in metadata.
      .                                           let mut attrs = self.get_item_attrs(def_id.index, sess);
      .                                           if attrs.any(|item| item.has_name(sym::non_exhaustive)) {
      .                                               let crate_def_id = self.local_def_id(CRATE_DEF_INDEX);
      .                                               vis = ty::Visibility::Restricted(crate_def_id);
-- line 1141 ----------------------------------------
-- line 1144 ----------------------------------------
      .                                       callback(ModChild { ident, res: ctor_res, vis, span });
      .                                   }
      .                                   _ => {}
      .                               }
      .                           }
      .                       }
      .                   }
      .           
    681 ( 0.00%)          match self.kind(id) {
     48 ( 0.00%)              EntryKind::Mod(exports) => {
 17,814 ( 0.00%)                  for exp in exports.decode((self, sess)) {
      .                               callback(exp);
      .                           }
      .                       }
      .                       EntryKind::Enum(..) | EntryKind::Trait(..) => {}
      .                       _ => bug!("`for_each_module_child` is called on a non-module: {:?}", self.def_kind(id)),
      .                   }
      .               }
      .           
      .               fn is_ctfe_mir_available(self, id: DefIndex) -> bool {
      8 ( 0.00%)          self.root.tables.mir_for_ctfe.get(self, id).is_some()
      .               }
      .           
      .               fn is_item_mir_available(self, id: DefIndex) -> bool {
      .                   self.root.tables.mir.get(self, id).is_some()
      .               }
      .           
      .               fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {
  2,772 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::Mod(_) | EntryKind::Enum(_) | EntryKind::Trait(_) => {
      .                           self.get_expn_that_defined(id, sess)
      .                       }
      .                       _ => panic!("Expected module, found {:?}", self.local_def_id(id)),
      .                   }
      .               }
      .           
      .               fn get_optimized_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
-- line 1180 ----------------------------------------
-- line 1184 ----------------------------------------
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_optimized_mir: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_mir_for_ctfe(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
     10 ( 0.00%)          self.root
      .                       .tables
      .                       .mir_for_ctfe
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_mir_for_ctfe: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_thir_abstract_const(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> Result<Option<&'tcx [thir::abstract_const::Node<'tcx>]>, ErrorReported> {
      5 ( 0.00%)          self.root
      .                       .tables
      .                       .thir_abstract_consts
      .                       .get(self, id)
      .                       .map_or(Ok(None), |v| Ok(Some(v.decode((self, tcx)))))
      .               }
      .           
      .               fn get_unused_generic_params(self, id: DefIndex) -> FiniteBitSet<u32> {
      .                   self.root
-- line 1215 ----------------------------------------
-- line 1242 ----------------------------------------
      .                           qualif,
      .                           _,
      .                       ) => qualif,
      .                       _ => bug!("mir_const_qualif: unexpected kind"),
      .                   }
      .               }
      .           
      .               fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {
    740 ( 0.00%)          match self.kind(id) {
    592 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).has_self,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn get_associated_item_def_ids(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [DefId] {
    812 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    348 ( 0.00%)              tcx.arena.alloc_from_iter(
    116 ( 0.00%)                  children.decode((self, tcx.sess)).map(|child_index| self.local_def_id(child_index)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
      .               }
      .           
  9,024 ( 0.00%)      fn get_associated_item(self, id: DefIndex, sess: &Session) -> ty::AssocItem {
  5,264 ( 0.00%)          let def_key = self.def_key(id);
      .                   let parent = self.local_def_id(def_key.parent.unwrap());
      .                   let ident = self.item_ident(id, sess);
      .           
  5,512 ( 0.00%)          let (kind, container, has_self) = match self.kind(id) {
     64 ( 0.00%)              EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),
    644 ( 0.00%)              EntryKind::AssocFn(data) => {
      .                           let data = data.decode(self);
  4,508 ( 0.00%)                  (ty::AssocKind::Fn, data.container, data.has_self)
      .                       }
    184 ( 0.00%)              EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),
      .                       _ => bug!("cannot get associated-item of `{:?}`", def_key),
      .                   };
      .           
 13,536 ( 0.00%)          ty::AssocItem {
      .                       name: ident.name,
      .                       kind,
      .                       vis: self.get_visibility(id),
      .                       defaultness: container.defaultness(),
      .                       def_id: self.local_def_id(id),
      .                       trait_item_def_id: self.get_trait_item_def_id(id),
      .                       container: container.with_def_id(parent),
      .                       fn_has_self_parameter: has_self,
      .                   }
  6,768 ( 0.00%)      }
      .           
      .               fn get_item_variances(self, id: DefIndex) -> impl Iterator<Item = ty::Variance> + 'a {
    145 ( 0.00%)          self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self)
      .               }
      .           
      .               fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {
    831 ( 0.00%)          match self.kind(node_id) {
      .                       EntryKind::Struct(data, _) | EntryKind::Variant(data) => {
    359 ( 0.00%)                  let vdata = data.decode(self);
    384 ( 0.00%)                  vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))
      .                       }
      .                       _ => None,
      .                   }
    395 ( 0.00%)      }
      .           
  1,056 ( 0.00%)      fn get_item_attrs(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = ast::Attribute> + 'a {
    912 ( 0.00%)          self.root
      .                       .tables
      .                       .attributes
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           // Structure and variant constructors don't have any attributes encoded for them,
      .                           // but we assume that someone passing a constructor ID actually wants to look at
      .                           // the attributes on the corresponding struct or variant.
      .                           let def_key = self.def_key(id);
-- line 1320 ----------------------------------------
-- line 1322 ----------------------------------------
      .                           let parent_id = def_key.parent.expect("no parent for a constructor");
      .                           self.root
      .                               .tables
      .                               .attributes
      .                               .get(self, parent_id)
      .                               .expect("no encoded attributes for a structure or variant")
      .                       })
      .                       .decode((self, sess))
    792 ( 0.00%)      }
      .           
      .               fn get_struct_field_names(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = Spanned<Symbol>> + 'a {
    400 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
  2,000 ( 0.00%)              .map(move |index| respan(self.get_span(index, sess), self.item_ident(index, sess).name))
      .               }
      .           
      .               fn get_struct_field_visibilities(self, id: DefIndex) -> impl Iterator<Item = Visibility> + 'a {
    230 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
    246 ( 0.00%)              .map(move |field_index| self.get_visibility(field_index))
      .               }
      .           
      .               fn get_inherent_implementations_for_type(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> &'tcx [DefId] {
     24 ( 0.00%)          tcx.arena.alloc_from_iter(
     30 ( 0.00%)              self.root
      .                           .tables
      .                           .inherent_impls
      .                           .get(self, id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
    757 ( 0.00%)                  .map(|index| self.local_def_id(index)),
      .                   )
      .               }
      .           
      .               fn get_traits(self) -> impl Iterator<Item = DefId> + 'a {
      .                   self.root.traits.decode(self).map(move |index| self.local_def_id(index))
      .               }
      .           
      .               fn get_trait_impls(self) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + 'a {
-- line 1376 ----------------------------------------
-- line 1380 ----------------------------------------
      .                           index: *trait_index,
      .                       };
      .                       impls.decode(self).map(move |(impl_index, simplified_self_ty)| {
      .                           (trait_def_id, self.local_def_id(impl_index), simplified_self_ty)
      .                       })
      .                   })
      .               }
      .           
 13,869 ( 0.00%)      fn get_implementations_of_trait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_def_id: DefId,
      .               ) -> &'tcx [(DefId, Option<SimplifiedType>)] {
  1,541 ( 0.00%)          if self.trait_impls.is_empty() {
      .                       return &[];
      .                   }
      .           
      .                   // Do a reverse lookup beforehand to avoid touching the crate_num
      .                   // hash map in the loop below.
  1,744 ( 0.00%)          let key = match self.reverse_translate_def_id(trait_def_id) {
      .                       Some(def_id) => (def_id.krate.as_u32(), def_id.index),
      .                       None => return &[],
      .                   };
      .           
      .                   if let Some(impls) = self.trait_impls.get(&key) {
  1,092 ( 0.00%)              tcx.arena.alloc_from_iter(
    546 ( 0.00%)                  impls
      .                               .decode(self)
 11,230 ( 0.00%)                      .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
 12,328 ( 0.00%)      }
      .           
      .               fn get_trait_of_item(self, id: DefIndex) -> Option<DefId> {
    200 ( 0.00%)          let def_key = self.def_key(id);
    250 ( 0.00%)          match def_key.disambiguated_data.data {
      .                       DefPathData::TypeNs(..) | DefPathData::ValueNs(..) => (),
      .                       // Not an associated item
      .                       _ => return None,
      .                   }
    441 ( 0.00%)          def_key.parent.and_then(|parent_index| match self.kind(parent_index) {
      .                       EntryKind::Trait(_) | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn get_native_libraries(self, sess: &'a Session) -> impl Iterator<Item = NativeLib> + 'a {
     46 ( 0.00%)          self.root.native_libraries.decode((self, sess))
      .               }
      .           
      .               fn get_proc_macro_quoted_span(self, index: usize, sess: &Session) -> Span {
      .                   self.root
      .                       .tables
      .                       .proc_macro_quoted_spans
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing proc macro quoted span: {:?}", index))
-- line 1437 ----------------------------------------
-- line 1450 ----------------------------------------
      .                       self.root.dylib_dependency_formats.decode(self).enumerate().flat_map(|(i, link)| {
      .                           let cnum = CrateNum::new(i + 1);
      .                           link.map(|link| (self.cnum_map[cnum], link))
      .                       }),
      .                   )
      .               }
      .           
      .               fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {
    115 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))
      .               }
      .           
      .               fn get_fn_param_names(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {
      .                   let param_names = match self.kind(id) {
      .                       EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,
      .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,
      .                       _ => Lazy::empty(),
      .                   };
-- line 1466 ----------------------------------------
-- line 1479 ----------------------------------------
      .                       EntryKind::AnonConst(_, data)
      .                       | EntryKind::Const(_, data)
      .                       | EntryKind::AssocConst(_, _, data) => data.decode(self).0,
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {
     72 ( 0.00%)          match self.kind(id) {
     12 ( 0.00%)              EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               // This replicates some of the logic of the crate-local `is_const_fn_raw` query, because we
      .               // don't serialize constness for tuple variant and tuple struct constructors.
      .               fn is_const_fn_raw(self, id: DefIndex) -> bool {
     36 ( 0.00%)          let constness = match self.kind(id) {
      6 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).fn_data.constness,
      6 ( 0.00%)              EntryKind::Fn(data) => data.decode(self).constness,
      .                       EntryKind::ForeignFn(data) => data.decode(self).constness,
      .                       EntryKind::Variant(..) | EntryKind::Struct(..) => hir::Constness::Const,
      .                       _ => hir::Constness::NotConst,
      .                   };
      .                   constness == hir::Constness::Const
      .               }
      .           
      .               fn asyncness(self, id: DefIndex) -> hir::IsAsync {
-- line 1506 ----------------------------------------
-- line 1517 ----------------------------------------
      .                       EntryKind::ForeignImmStatic | EntryKind::ForeignMutStatic | EntryKind::ForeignFn(_) => {
      .                           true
      .                       }
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn static_mutability(self, id: DefIndex) -> Option<hir::Mutability> {
     11 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::ImmStatic | EntryKind::ForeignImmStatic => Some(hir::Mutability::Not),
      .                       EntryKind::MutStatic | EntryKind::ForeignMutStatic => Some(hir::Mutability::Mut),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn generator_kind(self, id: DefIndex) -> Option<hir::GeneratorKind> {
      .                   match self.kind(id) {
      .                       EntryKind::Generator(data) => Some(data),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn fn_sig(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {
    390 ( 0.00%)          self.root.tables.fn_sig.get(self, id).unwrap().decode((self, tcx))
      .               }
      .           
      .               #[inline]
 27,734 ( 0.00%)      fn def_key(self, index: DefIndex) -> DefKey {
  7,924 ( 0.00%)          *self
      .                       .def_key_cache
      .                       .lock()
      .                       .entry(index)
 10,495 ( 0.00%)              .or_insert_with(|| self.root.tables.def_keys.get(self, index).unwrap().decode(self))
 31,696 ( 0.01%)      }
      .           
      .               // Returns the path leading to the thing with this `id`.
      .               fn def_path(self, id: DefIndex) -> DefPath {
      .                   debug!("def_path(cnum={:?}, id={:?})", self.cnum, id);
      .                   DefPath::make(self.cnum, id, |parent| self.def_key(parent))
      .               }
      .           
      .               fn def_path_hash_unlocked(
      .                   self,
      .                   index: DefIndex,
      .                   def_path_hashes: &mut FxHashMap<DefIndex, DefPathHash>,
      .               ) -> DefPathHash {
  2,714 ( 0.00%)          *def_path_hashes.entry(index).or_insert_with(|| {
    695 ( 0.00%)              self.root.tables.def_path_hashes.get(self, index).unwrap().decode(self)
      .                   })
      .               }
      .           
      .               #[inline]
  9,499 ( 0.00%)      fn def_path_hash(self, index: DefIndex) -> DefPathHash {
      .                   let mut def_path_hashes = self.def_path_hash_cache.lock();
      .                   self.def_path_hash_unlocked(index, &mut def_path_hashes)
 10,856 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn def_path_hash_to_def_index(self, hash: DefPathHash) -> DefIndex {
      .                   self.def_path_hash_map.def_path_hash_to_def_index(&hash)
      .               }
      .           
      .               fn expn_hash_to_expn_id(self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {
      .                   debug_assert_eq!(ExpnId::from_hash(hash), None);
-- line 1580 ----------------------------------------
-- line 1635 ----------------------------------------
      .               /// Proc macro crates don't currently export spans, so this function does not have
      .               /// to work for them.
      .               fn imported_source_files(self, sess: &Session) -> &'a [ImportedSourceFile] {
      .                   // Translate the virtual `/rustc/$hash` prefix back to a real directory
      .                   // that should hold actual sources, where possible.
      .                   //
      .                   // NOTE: if you update this, you might need to also update bootstrap's code for generating
      .                   // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.
 63,722 ( 0.01%)          let virtual_rust_source_base_dir = option_env!("CFG_VIRTUAL_RUST_SOURCE_BASE_DIR")
      .                       .map(Path::new)
      .                       .filter(|_| {
      .                           // Only spend time on further checks if we have what to translate *to*.
      .                           sess.opts.real_rust_source_base_dir.is_some()
      .                       })
      .                       .filter(|virtual_dir| {
      .                           // Don't translate away `/rustc/$hash` if we're still remapping to it,
      .                           // since that means we're still building `std`/`rustc` that need it,
      .                           // and we don't want the real path to leak into codegen/debuginfo.
      .                           !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)
      .                       });
 63,722 ( 0.01%)          let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {
      .                       debug!(
      .                           "try_to_translate_virtual_to_real(name={:?}): \
      .                            virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}",
      .                           name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,
      .                       );
      .           
  2,930 ( 0.00%)              if let Some(virtual_dir) = virtual_rust_source_base_dir {
      .                           if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                               if let rustc_span::FileName::Real(old_name) = name {
      .                                   if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } =
      .                                       old_name
      .                                   {
      .                                       if let Ok(rest) = virtual_name.strip_prefix(virtual_dir) {
      .                                           let virtual_name = virtual_name.clone();
      .           
-- line 1670 ----------------------------------------
-- line 1709 ----------------------------------------
      .                                           *old_name = new_name;
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   };
      .           
 63,693 ( 0.01%)          self.cdata.source_map_import_info.get_or_init(|| {
     36 ( 0.00%)              let external_source_map = self.root.source_map.decode(self);
      .           
      .                       external_source_map
      .                           .map(|source_file_to_import| {
      .                               // We can't reuse an existing SourceFile, so allocate a new one
      .                               // containing the information we need.
      .                               let rustc_span::SourceFile {
 12,306 ( 0.00%)                          mut name,
  3,516 ( 0.00%)                          src_hash,
    586 ( 0.00%)                          start_pos,
  1,172 ( 0.00%)                          end_pos,
  2,930 ( 0.00%)                          mut lines,
  2,930 ( 0.00%)                          mut multibyte_chars,
  3,516 ( 0.00%)                          mut non_narrow_chars,
  2,930 ( 0.00%)                          mut normalized_pos,
  3,516 ( 0.00%)                          name_hash,
      .                                   ..
      .                               } = source_file_to_import;
      .           
      .                               // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped
      .                               // during rust bootstrapping by `remap-debuginfo = true`, and the user
      .                               // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,
      .                               // then we change `name` to a similar state as if the rust was bootstrapped
      .                               // with `remap-debuginfo = true`.
      .                               // This is useful for testing so that tests about the effects of
      .                               // `try_to_translate_virtual_to_real` don't have to worry about how the
      .                               // compiler is bootstrapped.
  1,172 ( 0.00%)                      if let Some(virtual_dir) =
      .                                   &sess.opts.debugging_opts.simulate_remapped_rust_src_base
      .                               {
      .                                   if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                                       if let rustc_span::FileName::Real(ref mut old_name) = name {
      .                                           if let rustc_span::RealFileName::LocalPath(local) = old_name {
      .                                               if let Ok(rest) = local.strip_prefix(real_dir) {
      .                                                   *old_name = rustc_span::RealFileName::Remapped {
      .                                                       local_path: None,
-- line 1753 ----------------------------------------
-- line 1767 ----------------------------------------
      .                               let source_length = (end_pos - start_pos).to_usize();
      .           
      .                               // Translate line-start positions and multibyte character
      .                               // position into frame of reference local to file.
      .                               // `SourceMap::new_imported_source_file()` will then translate those
      .                               // coordinates to their new global frame of reference when the
      .                               // offset of the SourceFile is known.
      .                               for pos in &mut lines {
748,450 ( 0.13%)                          *pos = *pos - start_pos;
      .                               }
      .                               for mbc in &mut multibyte_chars {
  1,596 ( 0.00%)                          mbc.pos = mbc.pos - start_pos;
      .                               }
      .                               for swc in &mut non_narrow_chars {
    924 ( 0.00%)                          *swc = *swc - start_pos;
      .                               }
      .                               for np in &mut normalized_pos {
  3,806 ( 0.00%)                          np.pos = np.pos - start_pos;
      .                               }
      .           
 10,548 ( 0.00%)                      let local_version = sess.source_map().new_imported_source_file(
  7,618 ( 0.00%)                          name,
  4,102 ( 0.00%)                          src_hash,
      .                                   name_hash,
      .                                   source_length,
  1,172 ( 0.00%)                          self.cnum,
  2,930 ( 0.00%)                          lines,
  3,516 ( 0.00%)                          multibyte_chars,
  2,930 ( 0.00%)                          non_narrow_chars,
  2,344 ( 0.00%)                          normalized_pos,
      .                                   start_pos,
      .                                   end_pos,
      .                               );
      .                               debug!(
      .                                   "CrateMetaData::imported_source_files alloc \
      .                                    source_file {:?} original (start_pos {:?} end_pos {:?}) \
      .                                    translated (start_pos {:?} end_pos {:?})",
      .                                   local_version.name,
-- line 1804 ----------------------------------------
-- line 1808 ----------------------------------------
      .                                   local_version.end_pos
      .                               );
      .           
      .                               ImportedSourceFile {
      .                                   original_start_pos: start_pos,
      .                                   original_end_pos: end_pos,
      .                                   translated_source_file: local_version,
      .                               }
  1,758 ( 0.00%)                  })
      .                           .collect()
      .                   })
      .               }
      .           }
      .           
      .           impl CrateMetadata {
    276 ( 0.00%)      crate fn new(
      .                   sess: &Session,
      .                   blob: MetadataBlob,
      .                   root: CrateRoot<'static>,
      .                   raw_proc_macros: Option<&'static [ProcMacro]>,
      .                   cnum: CrateNum,
      .                   cnum_map: CrateNumMap,
      .                   dep_kind: CrateDepKind,
      .                   source: CrateSource,
      .                   private_dep: bool,
      .                   host_hash: Option<Svh>,
      .               ) -> CrateMetadata {
     69 ( 0.00%)          let trait_impls = root
      .                       .impls
      .                       .decode((&blob, sess))
      .                       .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))
      .                       .collect();
      .                   let alloc_decoding_state =
     69 ( 0.00%)              AllocDecodingState::new(root.interpret_alloc_index.decode(&blob).collect());
      .                   let dependencies = Lock::new(cnum_map.iter().cloned().collect());
      .           
      .                   // Pre-decode the DefPathHash->DefIndex table. This is a cheap operation
      .                   // that does not copy any data. It just does some data verification.
     23 ( 0.00%)          let def_path_hash_map = root.def_path_hash_map.decode(&blob);
      .           
    529 ( 0.00%)          CrateMetadata {
     23 ( 0.00%)              blob,
     69 ( 0.00%)              root,
     92 ( 0.00%)              trait_impls,
      .                       raw_proc_macros,
      .                       source_map_import_info: OnceCell::new(),
     92 ( 0.00%)              def_path_hash_map,
      .                       expn_hash_map: Default::default(),
    161 ( 0.00%)              alloc_decoding_state,
      .                       cnum,
     92 ( 0.00%)              cnum_map,
    115 ( 0.00%)              dependencies,
      .                       dep_kind: Lock::new(dep_kind),
    276 ( 0.00%)              source,
      .                       private_dep,
      .                       host_hash,
      .                       extern_crate: Lock::new(None),
      .                       hygiene_context: Default::default(),
      .                       def_key_cache: Default::default(),
      .                       def_path_hash_cache: Default::default(),
      .                   }
    207 ( 0.00%)      }
      .           
      .               crate fn dependencies(&self) -> LockGuard<'_, Vec<CrateNum>> {
      .                   self.dependencies.borrow()
      .               }
      .           
      .               crate fn add_dependency(&self, cnum: CrateNum) {
      .                   self.dependencies.borrow_mut().push(cnum);
      .               }
      .           
      .               crate fn update_extern_crate(&self, new_extern_crate: ExternCrate) -> bool {
      .                   let mut extern_crate = self.extern_crate.borrow_mut();
      .                   let update = Some(new_extern_crate.rank()) > extern_crate.as_ref().map(ExternCrate::rank);
      .                   if update {
    120 ( 0.00%)              *extern_crate = Some(new_extern_crate);
      .                   }
      .                   update
      .               }
      .           
      .               crate fn source(&self) -> &CrateSource {
    284 ( 0.00%)          &self.source
      .               }
      .           
      .               crate fn dep_kind(&self) -> CrateDepKind {
      .                   *self.dep_kind.lock()
      .               }
      .           
      .               crate fn update_dep_kind(&self, f: impl FnOnce(CrateDepKind) -> CrateDepKind) {
    152 ( 0.00%)          self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))
      .               }
      .           
      .               crate fn panic_strategy(&self) -> PanicStrategy {
      .                   self.root.panic_strategy
      .               }
      .           
      .               crate fn needs_panic_runtime(&self) -> bool {
      .                   self.root.needs_panic_runtime
-- line 1905 ----------------------------------------
-- line 1909 ----------------------------------------
      .                   self.root.panic_runtime
      .               }
      .           
      .               crate fn is_profiler_runtime(&self) -> bool {
      .                   self.root.profiler_runtime
      .               }
      .           
      .               crate fn needs_allocator(&self) -> bool {
      5 ( 0.00%)          self.root.needs_allocator
      .               }
      .           
      .               crate fn has_global_allocator(&self) -> bool {
      .                   self.root.has_global_allocator
      .               }
      .           
      .               crate fn has_default_lib_allocator(&self) -> bool {
      .                   self.root.has_default_lib_allocator
      .               }
      .           
      .               crate fn is_proc_macro_crate(&self) -> bool {
      .                   self.root.is_proc_macro_crate()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
    538 ( 0.00%)          self.root.name
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
      .                   self.root.stable_crate_id
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
      .                   self.root.hash
      .               }
      .           
      .               fn num_def_ids(&self) -> usize {
      .                   self.root.tables.def_keys.size()
      .               }
      .           
      .               fn local_def_id(&self, index: DefIndex) -> DefId {
 17,692 ( 0.00%)          DefId { krate: self.cnum, index }
      .               }
      .           
      .               // Translate a DefId from the current compilation environment to a DefId
      .               // for an external crate.
      .               fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> {
      .                   for (local, &global) in self.cnum_map.iter_enumerated() {
  7,216 ( 0.00%)              if global == did.krate {
      .                           return Some(DefId { krate: local, index: did.index });
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           }
      .           
-- line 1964 ----------------------------------------

709,398 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs
--------------------------------------------------------------------------------
Ir              

-- line 26 ----------------------------------------
     .           pub struct UnmatchedBrace {
     .               pub expected_delim: token::DelimToken,
     .               pub found_delim: Option<token::DelimToken>,
     .               pub found_span: Span,
     .               pub unclosed_span: Option<Span>,
     .               pub candidate_span: Option<Span>,
     .           }
     .           
    98 ( 0.00%)  crate fn parse_token_trees<'a>(
     .               sess: &'a ParseSess,
     .               src: &'a str,
     .               start_pos: BytePos,
     .               override_span: Option<Span>,
     .           ) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
     .               StringReader { sess, start_pos, pos: start_pos, end_src_index: src.len(), src, override_span }
     .                   .into_token_trees()
    63 ( 0.00%)  }
     .           
     .           struct StringReader<'a> {
     .               sess: &'a ParseSess,
     .               /// Initial position, read-only.
     .               start_pos: BytePos,
     .               /// The absolute offset within the source_map of the current character.
     .               pos: BytePos,
     .               /// Stop reading src at this index.
-- line 50 ----------------------------------------
-- line 51 ----------------------------------------
     .               end_src_index: usize,
     .               /// Source text to tokenize.
     .               src: &'a str,
     .               override_span: Option<Span>,
     .           }
     .           
     .           impl<'a> StringReader<'a> {
     .               fn mk_sp(&self, lo: BytePos, hi: BytePos) -> Span {
10,270 ( 0.00%)          self.override_span.unwrap_or_else(|| Span::with_root_ctxt(lo, hi))
     .               }
     .           
     .               /// Returns the next token, and info about preceding whitespace, if any.
52,738 ( 0.01%)      fn next_token(&mut self) -> (Spacing, Token) {
     .                   let mut spacing = Spacing::Joint;
     .           
     .                   // Skip `#!` at the start of the file
15,068 ( 0.00%)          let start_src_index = self.src_index(self.pos);
22,602 ( 0.00%)          let text: &str = &self.src[start_src_index..self.end_src_index];
     .                   let is_beginning_of_file = self.pos == self.start_pos;
 7,534 ( 0.00%)          if is_beginning_of_file {
    28 ( 0.00%)              if let Some(shebang_len) = rustc_lexer::strip_shebang(text) {
     .                           self.pos = self.pos + BytePos::from_usize(shebang_len);
     .                           spacing = Spacing::Alone;
     .                       }
     .                   }
     .           
     .                   // Skip trivial (whitespace & comments) tokens
     .                   loop {
13,050 ( 0.00%)              let start_src_index = self.src_index(self.pos);
30,876 ( 0.01%)              let text: &str = &self.src[start_src_index..self.end_src_index];
     .           
10,292 ( 0.00%)              if text.is_empty() {
     .                           let span = self.mk_sp(self.pos, self.pos);
    35 ( 0.00%)                  return (spacing, Token::new(token::Eof, span));
     .                       }
     .           
30,855 ( 0.01%)              let token = rustc_lexer::first_token(text);
     .           
20,570 ( 0.00%)              let start = self.pos;
10,285 ( 0.00%)              self.pos = self.pos + BytePos::from_usize(token.len);
     .           
     .                       debug!("next_token: {:?}({:?})", token.kind, self.str_from(start));
     .           
82,484 ( 0.01%)              match self.cook_lexer_token(token.kind, start) {
60,216 ( 0.01%)                  Some(kind) => {
     .                               let span = self.mk_sp(start, self.pos);
45,162 ( 0.01%)                      return (spacing, Token::new(kind, span));
     .                           }
     .                           None => spacing = Spacing::Alone,
     .                       }
     .                   }
67,806 ( 0.01%)      }
     .           
     .               /// Report a fatal lexical error with a given span.
     .               fn fatal_span(&self, sp: Span, m: &str) -> FatalError {
     .                   self.sess.span_diagnostic.span_fatal(sp, m)
     .               }
     .           
     .               /// Report a lexical error with a given span.
     .               fn err_span(&self, sp: Span, m: &str) {
-- line 110 ----------------------------------------
-- line 130 ----------------------------------------
     .               ) -> DiagnosticBuilder<'a> {
     .                   self.sess
     .                       .span_diagnostic
     .                       .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!("{}: {}", m, escaped_char(c)))
     .               }
     .           
     .               /// Detect usages of Unicode codepoints changing the direction of the text on screen and loudly
     .               /// complain about it.
   189 ( 0.00%)      fn lint_unicode_text_flow(&self, start: BytePos) {
     .                   // Opening delimiter of the length 2 is not included into the comment text.
     .                   let content_start = start + BytePos(2);
     .                   let content = self.str_from(content_start);
     .                   if contains_text_flow_control_chars(content) {
     .                       let span = self.mk_sp(start, self.pos);
     .                       self.sess.buffer_lint_with_diagnostic(
     .                           &TEXT_DIRECTION_CODEPOINT_IN_COMMENT,
     .                           span,
     .                           ast::CRATE_NODE_ID,
     .                           "unicode codepoint changing visible direction of text present in comment",
     .                           BuiltinLintDiagnostics::UnicodeTextFlow(span, content.to_string()),
     .                       );
     .                   }
   216 ( 0.00%)      }
     .           
     .               /// Turns simple `rustc_lexer::TokenKind` enum into a rich
     .               /// `rustc_ast::TokenKind`. This turns strings into interned
     .               /// symbols and runs additional validation.
     .               fn cook_lexer_token(&self, token: rustc_lexer::TokenKind, start: BytePos) -> Option<TokenKind> {
51,425 ( 0.01%)          Some(match token {
    78 ( 0.00%)              rustc_lexer::TokenKind::LineComment { doc_style } => {
     .                           // Skip non-doc comments
   309 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
     .                               doc_style
     .                           } else {
     .                               self.lint_unicode_text_flow(start);
     .                               return None;
     .                           };
     .           
     .                           // Opening delimiter of the length 3 is not included into the symbol.
     .                           let content_start = start + BytePos(3);
     .                           let content = self.str_from(content_start);
   255 ( 0.00%)                  self.cook_doc_comment(content_start, content, CommentKind::Line, doc_style)
     .                       }
     .                       rustc_lexer::TokenKind::BlockComment { doc_style, terminated } => {
     .                           if !terminated {
     .                               let msg = match doc_style {
     .                                   Some(_) => "unterminated block doc-comment",
     .                                   None => "unterminated block comment",
     .                               };
     .                               let last_bpos = self.pos;
-- line 179 ----------------------------------------
-- line 198 ----------------------------------------
     .                           let content_end = self.pos - BytePos(if terminated { 2 } else { 0 });
     .                           let content = self.str_from_to(content_start, content_end);
     .                           self.cook_doc_comment(content_start, content, CommentKind::Block, doc_style)
     .                       }
     .                       rustc_lexer::TokenKind::Whitespace => return None,
     .                       rustc_lexer::TokenKind::Ident
     .                       | rustc_lexer::TokenKind::RawIdent
     .                       | rustc_lexer::TokenKind::UnknownPrefix => {
10,916 ( 0.00%)                  let is_raw_ident = token == rustc_lexer::TokenKind::RawIdent;
13,645 ( 0.00%)                  let is_unknown_prefix = token == rustc_lexer::TokenKind::UnknownPrefix;
     .                           let mut ident_start = start;
 5,458 ( 0.00%)                  if is_raw_ident {
     .                               ident_start = ident_start + BytePos(2);
     .                           }
 8,187 ( 0.00%)                  if is_unknown_prefix {
     .                               self.report_unknown_prefix(start);
     .                           }
13,645 ( 0.00%)                  let sym = nfc_normalize(self.str_from(ident_start));
     .                           let span = self.mk_sp(start, self.pos);
10,916 ( 0.00%)                  self.sess.symbol_gallery.insert(sym, span);
 5,458 ( 0.00%)                  if is_raw_ident {
     .                               if !sym.can_be_raw() {
     .                                   self.err_span(span, &format!("`{}` cannot be a raw identifier", sym));
     .                               }
     .                               self.sess.raw_identifier_spans.borrow_mut().push(span);
     .                           }
19,103 ( 0.00%)                  token::Ident(sym, is_raw_ident)
     .                       }
     .                       rustc_lexer::TokenKind::InvalidIdent
     .                           // Do not recover an identifier with emoji if the codepoint is a confusable
     .                           // with a recoverable substitution token, like `➖`.
     .                           if UNICODE_ARRAY
     .                               .iter()
     .                               .find(|&&(c, _, _)| {
     .                                   let sym = self.str_from(start);
-- line 232 ----------------------------------------
-- line 234 ----------------------------------------
     .                               })
     .                               .is_none() =>
     .                       {
     .                           let sym = nfc_normalize(self.str_from(start));
     .                           let span = self.mk_sp(start, self.pos);
     .                           self.sess.bad_unicode_identifiers.borrow_mut().entry(sym).or_default().push(span);
     .                           token::Ident(sym, false)
     .                       }
 5,264 ( 0.00%)              rustc_lexer::TokenKind::Literal { kind, suffix_start } => {
     .                           let suffix_start = start + BytePos(suffix_start as u32);
     .                           let (kind, symbol) = self.cook_lexer_literal(start, suffix_start, kind);
   987 ( 0.00%)                  let suffix = if suffix_start < self.pos {
     .                               let string = self.str_from(suffix_start);
     .                               if string == "_" {
     .                                   self.sess
     .                                       .span_diagnostic
     .                                       .struct_span_warn(
     .                                           self.mk_sp(suffix_start, self.pos),
     .                                           "underscore literal suffix is not allowed",
     .                                       )
-- line 253 ----------------------------------------
-- line 259 ----------------------------------------
     .                                       .note(
     .                                           "see issue #42326 \
     .                                            <https://github.com/rust-lang/rust/issues/42326> \
     .                                            for more information",
     .                                       )
     .                                       .emit();
     .                                   None
     .                               } else {
    70 ( 0.00%)                          Some(Symbol::intern(string))
     .                               }
     .                           } else {
     .                               None
     .                           };
 2,632 ( 0.00%)                  token::Literal(token::Lit { kind, symbol, suffix })
     .                       }
     .                       rustc_lexer::TokenKind::Lifetime { starts_with_number } => {
     .                           // Include the leading `'` in the real identifier, for macro
     .                           // expansion purposes. See #12512 for the gory details of why
     .                           // this is necessary.
     .                           let lifetime_name = self.str_from(start);
     .                           if starts_with_number {
     .                               self.err_span_(start, self.pos, "lifetimes cannot start with a number");
-- line 280 ----------------------------------------
-- line 324 ----------------------------------------
     .                               err.help("source files must contain UTF-8 encoded text, unexpected null bytes might occur when a different encoding is used");
     .                           }
     .                           err.emit();
     .                           token?
     .                       }
     .                   })
     .               }
     .           
   612 ( 0.00%)      fn cook_doc_comment(
     .                   &self,
     .                   content_start: BytePos,
     .                   content: &str,
     .                   comment_kind: CommentKind,
     .                   doc_style: DocStyle,
     .               ) -> TokenKind {
    51 ( 0.00%)          if content.contains('\r') {
     .                       for (idx, _) in content.char_indices().filter(|&(_, c)| c == '\r') {
     .                           self.err_span_(
     .                               content_start + BytePos(idx as u32),
     .                               content_start + BytePos(idx as u32 + 1),
     .                               match comment_kind {
     .                                   CommentKind::Line => "bare CR not allowed in doc-comment",
     .                                   CommentKind::Block => "bare CR not allowed in block doc-comment",
     .                               },
-- line 347 ----------------------------------------
-- line 349 ----------------------------------------
     .                       }
     .                   }
     .           
     .                   let attr_style = match doc_style {
     .                       DocStyle::Outer => AttrStyle::Outer,
     .                       DocStyle::Inner => AttrStyle::Inner,
     .                   };
     .           
   153 ( 0.00%)          token::DocComment(comment_kind, attr_style, Symbol::intern(content))
   765 ( 0.00%)      }
     .           
     .               fn cook_lexer_literal(
     .                   &self,
     .                   start: BytePos,
     .                   suffix_start: BytePos,
     .                   kind: rustc_lexer::LiteralKind,
     .               ) -> (token::LitKind, Symbol) {
     .                   // prefix means `"` or `br"` or `r###"`, ...
-- line 366 ----------------------------------------
-- line 380 ----------------------------------------
     .                               self.sess.span_diagnostic.span_fatal_with_code(
     .                                   self.mk_sp(start + BytePos(1), suffix_start),
     .                                   "unterminated byte constant",
     .                                   error_code!(E0763),
     .                               )
     .                           }
     .                           (token::Byte, Mode::Byte, 2, 1) // b' '
     .                       }
    40 ( 0.00%)              rustc_lexer::LiteralKind::Str { terminated } => {
    40 ( 0.00%)                  if !terminated {
     .                               self.sess.span_diagnostic.span_fatal_with_code(
     .                                   self.mk_sp(start, suffix_start),
     .                                   "unterminated double quote string",
     .                                   error_code!(E0765),
     .                               )
     .                           }
     .                           (token::Str, Mode::Str, 1, 1) // " "
     .                       }
     2 ( 0.00%)              rustc_lexer::LiteralKind::ByteStr { terminated } => {
     2 ( 0.00%)                  if !terminated {
     .                               self.sess.span_diagnostic.span_fatal_with_code(
     .                                   self.mk_sp(start + BytePos(1), suffix_start),
     .                                   "unterminated double quote byte string",
     .                                   error_code!(E0766),
     .                               )
     .                           }
     .                           (token::ByteStr, Mode::ByteStr, 2, 1) // b" "
     .                       }
-- line 407 ----------------------------------------
-- line 410 ----------------------------------------
     .                           let n = u32::from(n_hashes);
     .                           (token::StrRaw(n_hashes), Mode::RawStr, 2 + n, 1 + n) // r##" "##
     .                       }
     .                       rustc_lexer::LiteralKind::RawByteStr { n_hashes, err } => {
     .                           self.report_raw_str_error(start, err);
     .                           let n = u32::from(n_hashes);
     .                           (token::ByteStrRaw(n_hashes), Mode::RawByteStr, 3 + n, 1 + n) // br##" "##
     .                       }
   574 ( 0.00%)              rustc_lexer::LiteralKind::Int { base, empty_int } => {
   287 ( 0.00%)                  return if empty_int {
     .                               self.sess
     .                                   .span_diagnostic
     .                                   .struct_span_err_with_code(
     .                                       self.mk_sp(start, suffix_start),
     .                                       "no valid digits found for number",
     .                                       error_code!(E0768),
     .                                   )
     .                                   .emit();
     .                               (token::Integer, sym::integer(0))
     .                           } else {
     .                               self.validate_int_literal(base, start, suffix_start);
   861 ( 0.00%)                      (token::Integer, self.symbol_from_to(start, suffix_start))
     .                           };
     .                       }
     .                       rustc_lexer::LiteralKind::Float { base, empty_exponent } => {
     .                           if empty_exponent {
     .                               self.err_span_(start, self.pos, "expected at least one digit in exponent");
     .                           }
     .           
     .                           match base {
-- line 439 ----------------------------------------
-- line 452 ----------------------------------------
     .                           }
     .           
     .                           let id = self.symbol_from_to(start, suffix_start);
     .                           return (token::Float, id);
     .                       }
     .                   };
     .                   let content_start = start + BytePos(prefix_len);
     .                   let content_end = suffix_start - BytePos(postfix_len);
   126 ( 0.00%)          let id = self.symbol_from_to(content_start, content_end);
     .                   self.validate_literal_escape(mode, content_start, content_end, prefix_len, postfix_len);
     .                   (lit_kind, id)
     .               }
     .           
     .               #[inline]
     .               fn src_index(&self, pos: BytePos) -> usize {
     .                   (pos - self.start_pos).to_usize()
     .               }
     .           
     .               /// Slice of the source text from `start` up to but excluding `self.pos`,
     .               /// meaning the slice does not include the character `self.ch`.
     .               fn str_from(&self, start: BytePos) -> &str {
17,125 ( 0.00%)          self.str_from_to(start, self.pos)
     .               }
     .           
     .               /// As symbol_from, with an explicit endpoint.
     .               fn symbol_from_to(&self, start: BytePos, end: BytePos) -> Symbol {
     .                   debug!("taking an ident from {:?} to {:?}", start, end);
 2,513 ( 0.00%)          Symbol::intern(self.str_from_to(start, end))
     .               }
     .           
     .               /// Slice of the source text spanning from `start` up to but excluding `end`.
 3,192 ( 0.00%)      fn str_from_to(&self, start: BytePos, end: BytePos) -> &str {
     .                   &self.src[self.src_index(start)..self.src_index(end)]
12,768 ( 0.00%)      }
     .           
     .               fn report_raw_str_error(&self, start: BytePos, opt_err: Option<RawStrError>) {
     .                   match opt_err {
     .                       Some(RawStrError::InvalidStarter { bad_char }) => {
     .                           self.report_non_started_raw_string(start, bad_char)
     .                       }
     .                       Some(RawStrError::NoTerminator { expected, found, possible_terminator_offset }) => self
     .                           .report_unterminated_raw_string(start, expected, possible_terminator_offset, found),
-- line 493 ----------------------------------------
-- line 609 ----------------------------------------
     .               fn validate_literal_escape(
     .                   &self,
     .                   mode: Mode,
     .                   content_start: BytePos,
     .                   content_end: BytePos,
     .                   prefix_len: u32,
     .                   postfix_len: u32,
     .               ) {
   252 ( 0.00%)          let lit_content = self.str_from_to(content_start, content_end);
27,228 ( 0.00%)          unescape::unescape_literal(lit_content, mode, &mut |range, result| {
     .                       // Here we only check for errors. The actual unescaping is done later.
 6,576 ( 0.00%)              if let Err(err) = result {
     .                           let span_with_quotes = self
     .                               .mk_sp(content_start - BytePos(prefix_len), content_end + BytePos(postfix_len));
     .                           let (start, end) = (range.start as u32, range.end as u32);
     .                           let lo = content_start + BytePos(start);
     .                           let hi = lo + BytePos(end - start);
     .                           let span = self.mk_sp(lo, hi);
     .                           emit_unescape_error(
     .                               &self.sess.span_diagnostic,
-- line 628 ----------------------------------------
-- line 629 ----------------------------------------
     .                               lit_content,
     .                               span_with_quotes,
     .                               span,
     .                               mode,
     .                               range,
     .                               err,
     .                           );
     .                       }
29,592 ( 0.01%)          });
     .               }
     .           
     .               fn validate_int_literal(&self, base: Base, content_start: BytePos, content_end: BytePos) {
 1,148 ( 0.00%)          let base = match base {
     .                       Base::Binary => 2,
     .                       Base::Octal => 8,
     .                       _ => return,
     .                   };
     .                   let s = self.str_from_to(content_start + BytePos(2), content_end);
     .                   for (idx, c) in s.char_indices() {
     .                       let idx = idx as u32;
     .                       if c != '_' && c.to_digit(base).is_none() {
-- line 649 ----------------------------------------
-- line 650 ----------------------------------------
     .                           let lo = content_start + BytePos(2 + idx);
     .                           let hi = content_start + BytePos(2 + idx + c.len_utf8() as u32);
     .                           self.err_span_(lo, hi, &format!("invalid digit for a base {} literal", base));
     .                       }
     .                   }
     .               }
     .           }
     .           
24,561 ( 0.00%)  pub fn nfc_normalize(string: &str) -> Symbol {
     .               use unicode_normalization::{is_nfc_quick, IsNormalized, UnicodeNormalization};
 5,458 ( 0.00%)      match is_nfc_quick(string.chars()) {
27,290 ( 0.00%)          IsNormalized::Yes => Symbol::intern(string),
     .                   _ => {
     .                       let normalized_str: String = string.chars().nfc().collect();
     .                       Symbol::intern(&normalized_str)
     .                   }
     .               }
     .           }

32,265 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .               /// indices mapping from the entry hash to its index.
      .               indices: RawTable<usize>,
      .               /// entries is a dense vec of entries in their order.
      .               entries: Vec<Bucket<K, V>>,
      .           }
      .           
      .           #[inline(always)]
      .           fn get_hash<K, V>(entries: &[Bucket<K, V>]) -> impl Fn(&usize) -> u64 + '_ {
353,347 ( 0.06%)      move |&i| entries[i].hash.get()
      .           }
      .           
      .           #[inline]
      .           fn equivalent<'a, K, V, Q: ?Sized + Equivalent<K>>(
      .               key: &'a Q,
      .               entries: &'a [Bucket<K, V>],
      .           ) -> impl Fn(&usize) -> bool + 'a {
 57,901 ( 0.01%)      move |&i| Q::equivalent(key, &entries[i].key)
      .           }
      .           
      .           #[inline]
      .           fn erase_index(table: &mut RawTable<usize>, hash: HashValue, index: usize) {
      .               table.erase_entry(hash.get(), move |&i| i == index);
      .           }
      .           
      .           #[inline]
-- line 50 ----------------------------------------
-- line 96 ----------------------------------------
      .           
      .               #[inline]
      .               fn into_entries(self) -> Vec<Self::Entry> {
      .                   self.entries
      .               }
      .           
      .               #[inline]
      .               fn as_entries(&self) -> &[Self::Entry] {
     21 ( 0.00%)          &self.entries
      .               }
      .           
      .               #[inline]
      .               fn as_entries_mut(&mut self) -> &mut [Self::Entry] {
      .                   &mut self.entries
      .               }
      .           
      .               fn with_entries<F>(&mut self, f: F)
-- line 112 ----------------------------------------
-- line 124 ----------------------------------------
      .                   IndexMapCore {
      .                       indices: RawTable::new(),
      .                       entries: Vec::new(),
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub(crate) fn with_capacity(n: usize) -> Self {
      6 ( 0.00%)          IndexMapCore {
      .                       indices: RawTable::with_capacity(n),
      .                       entries: Vec::with_capacity(n),
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub(crate) fn len(&self) -> usize {
  1,376 ( 0.00%)          self.indices.len()
      .               }
      .           
      .               #[inline]
      .               pub(crate) fn capacity(&self) -> usize {
      .                   cmp::min(self.indices.capacity(), self.entries.capacity())
      .               }
      .           
      .               pub(crate) fn clear(&mut self) {
-- line 148 ----------------------------------------
-- line 152 ----------------------------------------
      .           
      .               pub(crate) fn truncate(&mut self, len: usize) {
      .                   if len < self.len() {
      .                       self.erase_indices(len, self.entries.len());
      .                       self.entries.truncate(len);
      .                   }
      .               }
      .           
     99 ( 0.00%)      pub(crate) fn drain<R>(&mut self, range: R) -> Drain<'_, Bucket<K, V>>
      .               where
      .                   R: RangeBounds<usize>,
      .               {
     33 ( 0.00%)          let range = simplify_range(range, self.entries.len());
      .                   self.erase_indices(range.start, range.end);
      .                   self.entries.drain(range)
     88 ( 0.00%)      }
      .           
      .               #[cfg(feature = "rayon")]
      .               pub(crate) fn par_drain<R>(&mut self, range: R) -> rayon::vec::Drain<'_, Bucket<K, V>>
      .               where
      .                   K: Send,
      .                   V: Send,
      .                   R: RangeBounds<usize>,
      .               {
-- line 175 ----------------------------------------
-- line 194 ----------------------------------------
      .               /// Reserve capacity for `additional` more key-value pairs.
      .               pub(crate) fn reserve(&mut self, additional: usize) {
      .                   self.indices.reserve(additional, get_hash(&self.entries));
      .                   self.reserve_entries();
      .               }
      .           
      .               /// Reserve entries capacity to match the indices
      .               fn reserve_entries(&mut self) {
  5,710 ( 0.00%)          let additional = self.indices.capacity() - self.entries.len();
      .                   self.entries.reserve_exact(additional);
      .               }
      .           
      .               /// Shrink the capacity of the map as much as possible.
      .               pub(crate) fn shrink_to_fit(&mut self) {
      .                   self.indices.shrink_to(0, get_hash(&self.entries));
      .                   self.entries.shrink_to_fit();
      .               }
-- line 210 ----------------------------------------
-- line 218 ----------------------------------------
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
      .               /// Append a key-value pair, *without* checking whether it already exists,
      .               /// and return the pair's new index.
      .               fn push(&mut self, hash: HashValue, key: K, value: V) -> usize {
 60,815 ( 0.01%)          let i = self.entries.len();
      .                   self.indices.insert(hash.get(), i, get_hash(&self.entries));
122,767 ( 0.02%)          if i == self.entries.capacity() {
      .                       // Reserve our own capacity synced to the indices,
      .                       // rather than letting `Vec::push` just double it.
      .                       self.reserve_entries();
      .                   }
 72,974 ( 0.01%)          self.entries.push(Bucket { hash, key, value });
      .                   i
      .               }
      .           
      .               /// Return the index in `entries` where an equivalent key can be found
  2,922 ( 0.00%)      pub(crate) fn get_index_of<Q>(&self, hash: HashValue, key: &Q) -> Option<usize>
      .               where
      .                   Q: ?Sized + Equivalent<K>,
      .               {
  1,206 ( 0.00%)          let eq = equivalent(key, &self.entries);
      .                   self.indices.get(hash.get(), eq).copied()
  2,922 ( 0.00%)      }
      .           
  5,352 ( 0.00%)      pub(crate) fn insert_full(&mut self, hash: HashValue, key: K, value: V) -> (usize, Option<V>)
      .               where
      .                   K: Eq,
      .               {
      .                   match self.get_index_of(hash, &key) {
      .                       Some(i) => (i, Some(replace(&mut self.entries[i].value, value))),
    488 ( 0.00%)              None => (self.push(hash, key, value), None),
      .                   }
  5,299 ( 0.00%)      }
      .           
      .               /// Remove an entry by shifting all entries that follow it
      .               pub(crate) fn shift_remove_full<Q>(&mut self, hash: HashValue, key: &Q) -> Option<(usize, K, V)>
      .               where
      .                   Q: ?Sized + Equivalent<K>,
      .               {
      .                   let eq = equivalent(key, &self.entries);
      .                   match self.indices.remove_entry(hash.get(), eq) {
-- line 262 ----------------------------------------
-- line 361 ----------------------------------------
      .                   let (init, shifted_entries) = self.entries.split_at(end);
      .                   let (start_entries, erased_entries) = init.split_at(start);
      .           
      .                   let erased = erased_entries.len();
      .                   let shifted = shifted_entries.len();
      .                   let half_capacity = self.indices.buckets() / 2;
      .           
      .                   // Use a heuristic between different strategies
     22 ( 0.00%)          if erased == 0 {
      .                       // Degenerate case, nothing to do
      .                   } else if start + shifted < half_capacity && start < erased {
      .                       // Reinsert everything, as there are few kept indices
      .                       self.indices.clear();
      .           
      .                       // Reinsert stable indices
      .                       for (i, entry) in enumerate(start_entries) {
      .                           self.indices.insert_no_grow(entry.hash.get(), i);
-- line 377 ----------------------------------------
-- line 457 ----------------------------------------
      .               Vacant(VacantEntry<'a, K, V>),
      .           }
      .           
      .           impl<'a, K, V> Entry<'a, K, V> {
      .               /// Inserts the given default value in the entry if it is vacant and returns a mutable
      .               /// reference to it. Otherwise a mutable reference to an already existent value is returned.
      .               ///
      .               /// Computes in **O(1)** time (amortized average).
      7 ( 0.00%)      pub fn or_insert(self, default: V) -> &'a mut V {
      2 ( 0.00%)          match self {
      .                       Entry::Occupied(entry) => entry.into_mut(),
      5 ( 0.00%)              Entry::Vacant(entry) => entry.insert(default),
      .                   }
      8 ( 0.00%)      }
      .           
      .               /// Inserts the result of the `call` function in the entry if it is vacant and returns a mutable
      .               /// reference to it. Otherwise a mutable reference to an already existent value is returned.
      .               ///
      .               /// Computes in **O(1)** time (amortized average).
462,328 ( 0.08%)      pub fn or_insert_with<F>(self, call: F) -> &'a mut V
      .               where
      .                   F: FnOnce() -> V,
      .               {
115,582 ( 0.02%)          match self {
  7,976 ( 0.00%)              Entry::Occupied(entry) => entry.into_mut(),
 50,855 ( 0.01%)              Entry::Vacant(entry) => entry.insert(call()),
      .                   }
462,328 ( 0.08%)      }
      .           
      .               /// Inserts the result of the `call` function with a reference to the entry's key if it is
      .               /// vacant, and returns a mutable reference to the new value. Otherwise a mutable reference to
      .               /// an already existent value is returned.
      .               ///
      .               /// Computes in **O(1)** time (amortized average).
      .               pub fn or_insert_with_key<F>(self, call: F) -> &'a mut V
      .               where
-- line 492 ----------------------------------------
-- line 531 ----------------------------------------
      .                       x => x,
      .                   }
      .               }
      .           
      .               /// Inserts a default-constructed value in the entry if it is vacant and returns a mutable
      .               /// reference to it. Otherwise a mutable reference to an already existent value is returned.
      .               ///
      .               /// Computes in **O(1)** time (amortized average).
108,150 ( 0.02%)      pub fn or_default(self) -> &'a mut V
      .               where
      .                   V: Default,
      .               {
 30,900 ( 0.01%)          match self {
  5,452 ( 0.00%)              Entry::Occupied(entry) => entry.into_mut(),
 29,994 ( 0.01%)              Entry::Vacant(entry) => entry.insert(V::default()),
      .                   }
123,600 ( 0.02%)      }
      .           }
      .           
      .           impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for Entry<'_, K, V> {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   match *self {
      .                       Entry::Vacant(ref v) => f.debug_tuple(stringify!(Entry)).field(v).finish(),
      .                       Entry::Occupied(ref o) => f.debug_tuple(stringify!(Entry)).field(o).finish(),
      .                   }
-- line 555 ----------------------------------------
-- line 634 ----------------------------------------
      .           
      .               /// Return the index where the key-value pair will be inserted.
      .               pub fn index(&self) -> usize {
      .                   self.map.len()
      .               }
      .           
      .               /// Inserts the entry's key and the given value into the map, and returns a mutable reference
      .               /// to the value.
  8,047 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
 33,262 ( 0.01%)          let i = self.map.push(self.hash, self.key, value);
     15 ( 0.00%)          &mut self.map.entries[i].value
  8,744 ( 0.00%)      }
      .           }
      .           
      .           impl<K: fmt::Debug, V> fmt::Debug for VacantEntry<'_, K, V> {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   f.debug_tuple(stringify!(VacantEntry))
      .                       .field(self.key())
      .                       .finish()
      .               }
-- line 653 ----------------------------------------

382,859 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 71 ----------------------------------------
      .               fn default() -> FxHasher {
      .                   FxHasher { hash: 0 }
      .               }
      .           }
      .           
      .           impl FxHasher {
      .               #[inline]
      .               fn add_to_hash(&mut self, i: usize) {
350,515 ( 0.06%)          self.hash = self.hash.rotate_left(5).bitxor(i).wrapping_mul(K);
      .               }
      .           }
      .           
      .           impl Hasher for FxHasher {
      .               #[inline]
  2,803 ( 0.00%)      fn write(&mut self, mut bytes: &[u8]) {
      .                   #[cfg(target_pointer_width = "32")]
      .                   let read_usize = |bytes: &[u8]| u32::from_ne_bytes(bytes[..4].try_into().unwrap());
      .                   #[cfg(target_pointer_width = "64")]
      .                   let read_usize = |bytes: &[u8]| u64::from_ne_bytes(bytes[..8].try_into().unwrap());
      .           
 82,094 ( 0.01%)          let mut hash = FxHasher { hash: self.hash };
      .                   assert!(size_of::<usize>() <= 8);
956,713 ( 0.17%)          while bytes.len() >= size_of::<usize>() {
      .                       hash.add_to_hash(read_usize(bytes) as usize);
      .                       bytes = &bytes[size_of::<usize>()..];
      .                   }
163,058 ( 0.03%)          if (size_of::<usize>() > 4) && (bytes.len() >= 4) {
      .                       hash.add_to_hash(u32::from_ne_bytes(bytes[..4].try_into().unwrap()) as usize);
      .                       bytes = &bytes[4..];
      .                   }
163,058 ( 0.03%)          if (size_of::<usize>() > 2) && bytes.len() >= 2 {
      .                       hash.add_to_hash(u16::from_ne_bytes(bytes[..2].try_into().unwrap()) as usize);
      .                       bytes = &bytes[2..];
      .                   }
180,258 ( 0.03%)          if (size_of::<usize>() > 1) && bytes.len() >= 1 {
 35,175 ( 0.01%)              hash.add_to_hash(bytes[0] as usize);
      .                   }
  3,481 ( 0.00%)          self.hash = hash.hash;
  2,803 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
    233 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u16(&mut self, i: u16) {
    125 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u32(&mut self, i: u32) {
589,294 ( 0.11%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[cfg(target_pointer_width = "32")]
      .               #[inline]
      .               fn write_u64(&mut self, i: u64) {
      .                   self.add_to_hash(i as usize);
      .                   self.add_to_hash((i >> 32) as usize);
      .               }
-- line 131 ----------------------------------------

      1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/thread/local.rs
--------------------------------------------------------------------------------
Ir               

-- line 173 ----------------------------------------
      .           #[unstable(feature = "thread_local_internals", reason = "should not be necessary", issue = "none")]
      .           #[macro_export]
      .           #[allow_internal_unstable(thread_local_internals, cfg_target_thread_local, thread_local)]
      .           #[allow_internal_unsafe]
      .           macro_rules! __thread_local_inner {
      .               // used to generate the `LocalKey` value for const-initialized thread locals
      .               (@key $t:ty, const $init:expr) => {{
      .                   #[cfg_attr(not(windows), inline)] // see comments below
      4 ( 0.00%)          unsafe fn __getit() -> $crate::option::Option<&'static $t> {
      .                       const INIT_EXPR: $t = $init;
      .           
      .                       // wasm without atomics maps directly to `static mut`, and dtors
      .                       // aren't implemented because thread dtors aren't really a thing
      .                       // on wasm right now
      .                       //
      .                       // FIXME(#84224) this should come after the `target_thread_local`
      .                       // block.
-- line 189 ----------------------------------------
-- line 211 ----------------------------------------
      .                           }
      .           
      .                           // 0 == dtor not registered
      .                           // 1 == dtor registered, dtor not run
      .                           // 2 == dtor registered and is running or has run
      .                           #[thread_local]
      .                           static mut STATE: u8 = 0;
      .           
      8 ( 0.00%)                  unsafe extern "C" fn destroy(ptr: *mut u8) {
      .                               let ptr = ptr as *mut $t;
      .           
      .                               unsafe {
      .                                   debug_assert_eq!(STATE, 1);
     12 ( 0.00%)                          STATE = 2;
      .                                   $crate::ptr::drop_in_place(ptr);
      .                               }
      8 ( 0.00%)                  }
      .           
      .                           unsafe {
     48 ( 0.00%)                      match STATE {
      .                                   // 0 == we haven't registered a destructor, so do
      .                                   //   so now.
      .                                   0 => {
      .                                       $crate::thread::__FastLocalKeyInner::<$t>::register_dtor(
      .                                           $crate::ptr::addr_of_mut!(VAL) as *mut u8,
      .                                           destroy,
      .                                       );
      8 ( 0.00%)                              STATE = 1;
      .                                       Some(&VAL)
      .                                   }
      .                                   // 1 == the destructor is registered and the value
      .                                   //   is valid, so return the pointer.
      .                                   1 => Some(&VAL),
      .                                   // otherwise the destructor has already run, so we
      .                                   // can't give access.
      .                                   _ => None,
-- line 246 ----------------------------------------
-- line 257 ----------------------------------------
      .                       {
      .                           #[inline]
      .                           const fn __init() -> $t { INIT_EXPR }
      .                           static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
      .                               $crate::thread::__OsLocalKeyInner::new();
      .                           #[allow(unused_unsafe)]
      .                           unsafe { __KEY.get(__init) }
      .                       }
 98,267 ( 0.02%)          }
      .           
      .                   unsafe {
      .                       $crate::thread::LocalKey::new(__getit)
      .                   }
      .               }};
      .           
      .               // used to generate the `LocalKey` value for `thread_local!`
      .               (@key $t:ty, $init:expr) => {
-- line 273 ----------------------------------------
-- line 318 ----------------------------------------
      .                           static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
      .                               $crate::thread::__OsLocalKeyInner::new();
      .           
      .                           // FIXME: remove the #[allow(...)] marker when macros don't
      .                           // raise warning for missing/extraneous unsafe blocks anymore.
      .                           // See https://github.com/rust-lang/rust/issues/74838.
      .                           #[allow(unused_unsafe)]
      .                           unsafe { __KEY.get(__init) }
535,850 ( 0.10%)              }
      .           
      .                       unsafe {
      .                           $crate::thread::LocalKey::new(__getit)
      .                       }
      .                   }
      .               };
      .               ($(#[$attr:meta])* $vis:vis $name:ident, $t:ty, $($init:tt)*) => {
      .                   $(#[$attr])* $vis const $name: $crate::thread::LocalKey<$t> =
-- line 334 ----------------------------------------
-- line 377 ----------------------------------------
      .               /// this key yet.
      .               ///
      .               /// # Panics
      .               ///
      .               /// This function will `panic!()` if the key currently has its
      .               /// destructor running, and it **may** panic if the destructor has
      .               /// previously been run for this thread.
      .               #[stable(feature = "rust1", since = "1.0.0")]
     12 ( 0.00%)      pub fn with<F, R>(&'static self, f: F) -> R
      .               where
      .                   F: FnOnce(&T) -> R,
      .               {
     17 ( 0.00%)          self.try_with(f).expect(
      .                       "cannot access a Thread Local Storage value \
      .                        during or after destruction",
      .                   )
     16 ( 0.00%)      }
      .           
      .               /// Acquires a reference to the value in this TLS key.
      .               ///
      .               /// This will lazily initialize the value if this thread has not referenced
      .               /// this key yet. If the key has been destroyed (which may happen if this is called
      .               /// in a destructor), this function will return an [`AccessError`].
      .               ///
      .               /// # Panics
-- line 401 ----------------------------------------
-- line 404 ----------------------------------------
      .               /// key's initializer panics.
      .               #[stable(feature = "thread_local_try_with", since = "1.26.0")]
      .               #[inline]
      .               pub fn try_with<F, R>(&'static self, f: F) -> Result<R, AccessError>
      .               where
      .                   F: FnOnce(&T) -> R,
      .               {
      .                   unsafe {
434,760 ( 0.08%)              let thread_local = (self.inner)().ok_or(AccessError)?;
303,937 ( 0.05%)              Ok(f(thread_local))
      .                   }
      .               }
      .           }
      .           
      .           mod lazy {
      .               use crate::cell::UnsafeCell;
      .               use crate::hint;
      .               use crate::mem;
-- line 421 ----------------------------------------
-- line 434 ----------------------------------------
      .                       // the inner cell nor mutable reference to the Option<T> inside said
      .                       // cell. This make it safe to hand a reference, though the lifetime
      .                       // of 'static is itself unsafe, making the get method unsafe.
      .                       unsafe { (*self.inner.get()).as_ref() }
      .                   }
      .           
      .                   /// The caller must ensure that no reference is active: this method
      .                   /// needs unique access.
      9 ( 0.00%)          pub unsafe fn initialize<F: FnOnce() -> T>(&self, init: F) -> &'static T {
      .                       // Execute the initialization up front, *then* move it into our slot,
      .                       // just in case initialization fails.
      .                       let value = init();
      .                       let ptr = self.inner.get();
      .           
      .                       // SAFETY:
      .                       //
      .                       // note that this can in theory just be `*ptr = Some(value)`, but due to
-- line 450 ----------------------------------------
-- line 475 ----------------------------------------
      .                           // always work it empirically doesn't seem to always get optimized away,
      .                           // which means that using something like `try_with` can pull in
      .                           // panicking code and cause a large size bloat.
      .                           match *ptr {
      .                               Some(ref x) => x,
      .                               None => hint::unreachable_unchecked(),
      .                           }
      .                       }
     10 ( 0.00%)          }
      .           
      .                   /// The other methods hand out references while taking &self.
      .                   /// As such, callers of this method must ensure no `&` and `&mut` are
      .                   /// available and used at the same time.
      .                   #[allow(unused)]
      .                   pub unsafe fn take(&mut self) -> Option<T> {
      .                       // SAFETY: See doc comment for this method.
      .                       unsafe { (*self.inner.get()).take() }
-- line 491 ----------------------------------------
-- line 596 ----------------------------------------
      .                       // SAFETY: See the definitions of `LazyKeyInner::get` and
      .                       // `try_initialize` for more information.
      .                       //
      .                       // The caller must ensure no mutable references are ever active to
      .                       // the inner cell or the inner T when this is called.
      .                       // The `try_initialize` is dependant on the passed `init` function
      .                       // for this.
      .                       unsafe {
205,713 ( 0.04%)                  match self.inner.get() {
      .                               Some(val) => Some(val),
     18 ( 0.00%)                      None => self.try_initialize(init),
      .                           }
      .                       }
      .                   }
      .           
      .                   // `try_initialize` is only called once per fast thread local variable,
      .                   // except in corner cases where thread_local dtors reference other
      .                   // thread_local's, or it is being recursively initialized.
      .                   //
      .                   // Macos: Inlining this function can cause two `tlv_get_addr` calls to
      .                   // be performed for every call to `Key::get`.
      .                   // LLVM issue: https://bugs.llvm.org/show_bug.cgi?id=41722
      .                   #[inline(never)]
      8 ( 0.00%)          unsafe fn try_initialize<F: FnOnce() -> T>(&self, init: F) -> Option<&'static T> {
      .                       // SAFETY: See comment above (this function doc).
      .                       if !mem::needs_drop::<T>() || unsafe { self.try_register_dtor() } {
      .                           // SAFETY: See comment above (his function doc).
      6 ( 0.00%)                  Some(unsafe { self.inner.initialize(init) })
      .                       } else {
      .                           None
      .                       }
      8 ( 0.00%)          }
      .           
      .                   // `try_register_dtor` is only called once per fast thread local
      .                   // variable, except in corner cases where thread_local dtors reference
      .                   // other thread_local's, or it is being recursively initialized.
      .                   unsafe fn try_register_dtor(&self) -> bool {
      6 ( 0.00%)              match self.dtor_state.get() {
      .                           DtorState::Unregistered => {
      .                               // SAFETY: dtor registration happens before initialization.
      .                               // Passing `self` as a pointer while using `destroy_value<T>`
      .                               // is safe because the function will build a pointer to a
      .                               // Key<T>, which is the type of self and so find the correct
      .                               // size.
      6 ( 0.00%)                      unsafe { register_dtor(self as *const _ as *mut u8, destroy_value::<T>) };
      .                               self.dtor_state.set(DtorState::Registered);
      .                               true
      .                           }
      .                           DtorState::Registered => {
      .                               // recursively initialized
      .                               true
      .                           }
      .                           DtorState::RunningOrHasRun => false,
      .                       }
      .                   }
      .               }
      .           
      4 ( 0.00%)      unsafe extern "C" fn destroy_value<T>(ptr: *mut u8) {
      .                   let ptr = ptr as *mut Key<T>;
      .           
      .                   // SAFETY:
      .                   //
      .                   // The pointer `ptr` has been built just above and comes from
      .                   // `try_register_dtor` where it is originally a Key<T> coming from `self`,
      .                   // making it non-NUL and of the correct type.
      .                   //
-- line 661 ----------------------------------------

      4 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/thread/local.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs
--------------------------------------------------------------------------------
Ir               

-- line 44 ----------------------------------------
      .           /// Convert from a specific kind of undo to the more general UndoLog
      .           impl<'tcx> From<Instantiate> for UndoLog<'tcx> {
      .               fn from(l: Instantiate) -> Self {
      .                   UndoLog::Values(sv::UndoLog::Other(l))
      .               }
      .           }
      .           
      .           impl<'tcx> Rollback<UndoLog<'tcx>> for TypeVariableStorage<'tcx> {
 20,344 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
 85,282 ( 0.02%)          match undo {
 16,438 ( 0.00%)              UndoLog::EqRelation(undo) => self.eq_relations.reverse(undo),
  8,096 ( 0.00%)              UndoLog::SubRelation(undo) => self.sub_relations.reverse(undo),
 16,154 ( 0.00%)              UndoLog::Values(undo) => self.values.reverse(undo),
      .                   }
 40,688 ( 0.01%)      }
      .           }
      .           
      .           pub struct TypeVariableStorage<'tcx> {
      .               values: sv::SnapshotVecStorage<Delegate>,
      .           
      .               /// Two variables are unified in `eq_relations` when we have a
      .               /// constraint `?X == ?Y`. This table also stores, for each key,
      .               /// the known value.
-- line 66 ----------------------------------------
-- line 136 ----------------------------------------
      .               DynReturnFn,
      .               LatticeVariable,
      .           }
      .           
      .           pub(crate) struct TypeVariableData {
      .               origin: TypeVariableOrigin,
      .           }
      .           
119,862 ( 0.02%)  #[derive(Copy, Clone, Debug)]
      .           pub enum TypeVariableValue<'tcx> {
      .               Known { value: Ty<'tcx> },
      .               Unknown { universe: ty::UniverseIndex },
      .           }
      .           
      .           impl<'tcx> TypeVariableValue<'tcx> {
      .               /// If this value is known, returns the type it is known to be.
      .               /// Otherwise, `None`.
      .               pub fn known(&self) -> Option<Ty<'tcx>> {
 70,528 ( 0.01%)          match *self {
      .                       TypeVariableValue::Unknown { .. } => None,
      .                       TypeVariableValue::Known { value } => Some(value),
      .                   }
      .               }
      .           
      .               pub fn is_unknown(&self) -> bool {
      .                   match *self {
      .                       TypeVariableValue::Unknown { .. } => true,
-- line 162 ----------------------------------------
-- line 166 ----------------------------------------
      .           }
      .           
      .           pub(crate) struct Instantiate;
      .           
      .           pub(crate) struct Delegate;
      .           
      .           impl<'tcx> TypeVariableStorage<'tcx> {
      .               pub fn new() -> TypeVariableStorage<'tcx> {
 13,542 ( 0.00%)          TypeVariableStorage {
      .                       values: sv::SnapshotVecStorage::new(),
      .                       eq_relations: ut::UnificationTableStorage::new(),
      .                       sub_relations: ut::UnificationTableStorage::new(),
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub(crate) fn with_log<'a>(
-- line 182 ----------------------------------------
-- line 188 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> TypeVariableTable<'_, 'tcx> {
      .               /// Returns the origin that was given when `vid` was created.
      .               ///
      .               /// Note that this function does not return care whether
      .               /// `vid` has been unified with something else or not.
      .               pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin {
    104 ( 0.00%)          &self.storage.values.get(vid.as_usize()).origin
      .               }
      .           
      .               /// Records that `a == b`, depending on `dir`.
      .               ///
      .               /// Precondition: neither `a` nor `b` are known.
      .               pub fn equate(&mut self, a: ty::TyVid, b: ty::TyVid) {
      .                   debug_assert!(self.probe(a).is_unknown());
      .                   debug_assert!(self.probe(b).is_unknown());
  2,282 ( 0.00%)          self.eq_relations().union(a, b);
  1,956 ( 0.00%)          self.sub_relations().union(a, b);
      .               }
      .           
      .               /// Records that `a <: b`, depending on `dir`.
      .               ///
      .               /// Precondition: neither `a` nor `b` are known.
      .               pub fn sub(&mut self, a: ty::TyVid, b: ty::TyVid) {
      .                   debug_assert!(self.probe(a).is_unknown());
      .                   debug_assert!(self.probe(b).is_unknown());
    338 ( 0.00%)          self.sub_relations().union(a, b);
      .               }
      .           
      .               /// Instantiates `vid` with the type `ty`.
      .               ///
      .               /// Precondition: `vid` must not have been previously instantiated.
 30,760 ( 0.01%)      pub fn instantiate(&mut self, vid: ty::TyVid, ty: Ty<'tcx>) {
      .                   let vid = self.root_var(vid);
      .                   debug_assert!(self.probe(vid).is_unknown());
      .                   debug_assert!(
      .                       self.eq_relations().probe_value(vid).is_unknown(),
      .                       "instantiating type variable `{:?}` twice: new-value = {:?}, old-value={:?}",
      .                       vid,
      .                       ty,
      .                       self.eq_relations().probe_value(vid)
      .                   );
 43,064 ( 0.01%)          self.eq_relations().union_value(vid, TypeVariableValue::Known { value: ty });
      .           
      .                   // Hack: we only need this so that `types_escaping_snapshot`
      .                   // can see what has been unified; see the Delegate impl for
      .                   // more details.
      .                   self.undo_log.push(Instantiate);
 30,760 ( 0.01%)      }
      .           
      .               /// Creates a new type variable.
      .               ///
      .               /// - `diverging`: indicates if this is a "diverging" type
      .               ///   variable, e.g.,  one created as the type of a `return`
      .               ///   expression. The code in this module doesn't care if a
      .               ///   variable is diverging, but the main Rust type-checker will
      .               ///   sometimes "unify" such variables with the `!` or `()` types.
      .               /// - `origin`: indicates *why* the type variable was created.
      .               ///   The code in this module doesn't care, but it can be useful
      .               ///   for improving error messages.
 37,092 ( 0.01%)      pub fn new_var(
      .                   &mut self,
      .                   universe: ty::UniverseIndex,
      .                   origin: TypeVariableOrigin,
      .               ) -> ty::TyVid {
 55,638 ( 0.01%)          let eq_key = self.eq_relations().new_key(TypeVariableValue::Unknown { universe });
      .           
 30,910 ( 0.01%)          let sub_key = self.sub_relations().new_key(());
  6,182 ( 0.00%)          assert_eq!(eq_key.vid, sub_key);
      .           
 55,638 ( 0.01%)          let index = self.values().push(TypeVariableData { origin });
 24,728 ( 0.00%)          assert_eq!(eq_key.vid.as_u32(), index as u32);
      .           
      .                   debug!("new_var(index={:?}, universe={:?}, origin={:?}", eq_key.vid, universe, origin,);
      .           
      .                   eq_key.vid
 43,274 ( 0.01%)      }
      .           
      .               /// Returns the number of type variables created thus far.
      .               pub fn num_vars(&self) -> usize {
    299 ( 0.00%)          self.storage.values.len()
      .               }
      .           
      .               /// Returns the "root" variable of `vid` in the `eq_relations`
      .               /// equivalence table. All type variables that have been equated
      .               /// will yield the same root variable (per the union-find
      .               /// algorithm), so `root_var(a) == root_var(b)` implies that `a ==
      .               /// b` (transitively).
      .               pub fn root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
 22,317 ( 0.00%)          self.eq_relations().find(vid).vid
      .               }
      .           
      .               /// Returns the "root" variable of `vid` in the `sub_relations`
      .               /// equivalence table. All type variables that have been are
      .               /// related via equality or subtyping will yield the same root
      .               /// variable (per the union-find algorithm), so `sub_root_var(a)
      .               /// == sub_root_var(b)` implies that:
      .               ///
      .               ///     exists X. (a <: X || X <: a) && (b <: X || X <: b)
     29 ( 0.00%)      pub fn sub_root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
 18,597 ( 0.00%)          self.sub_relations().find(vid)
     58 ( 0.00%)      }
      .           
      .               /// Returns `true` if `a` and `b` have same "sub-root" (i.e., exists some
      .               /// type X such that `forall i in {a, b}. (i <: X || X <: i)`.
      .               pub fn sub_unified(&mut self, a: ty::TyVid, b: ty::TyVid) -> bool {
      .                   self.sub_root_var(a) == self.sub_root_var(b)
      .               }
      .           
      .               /// Retrieves the type to which `vid` has been instantiated, if
      .               /// any.
265,780 ( 0.05%)      pub fn probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
      .                   self.inlined_probe(vid)
265,780 ( 0.05%)      }
      .           
      .               /// An always-inlined variant of `probe`, for very hot call sites.
      .               #[inline(always)]
      .               pub fn inlined_probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
136,714 ( 0.02%)          self.eq_relations().inlined_probe_value(vid)
      .               }
      .           
      .               /// If `t` is a type-inference variable, and it has been
      .               /// instantiated, then return the with which it was
      .               /// instantiated. Otherwise, returns `t`.
      .               pub fn replace_if_possible(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
 76,744 ( 0.01%)          match *t.kind() {
 46,452 ( 0.01%)              ty::Infer(ty::TyVar(v)) => match self.probe(v) {
      .                           TypeVariableValue::Unknown { .. } => t,
      .                           TypeVariableValue::Known { value } => value,
      .                       },
      .                       _ => t,
      .                   }
      .               }
      .           
      .               #[inline]
-- line 323 ----------------------------------------
-- line 324 ----------------------------------------
      .               fn values(
      .                   &mut self,
      .               ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {
      .                   self.storage.values.with_log(self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn eq_relations(&mut self) -> super::UnificationTable<'_, 'tcx, TyVidEqKey<'tcx>> {
213,284 ( 0.04%)          self.storage.eq_relations.with_log(self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn sub_relations(&mut self) -> super::UnificationTable<'_, 'tcx, ty::TyVid> {
 12,881 ( 0.00%)          self.storage.sub_relations.with_log(self.undo_log)
      .               }
      .           
      .               /// Returns a range of the type variables created during the snapshot.
  1,495 ( 0.00%)      pub fn vars_since_snapshot(
      .                   &mut self,
      .                   value_count: usize,
      .               ) -> (Range<TyVid>, Vec<TypeVariableOrigin>) {
      .                   let range = TyVid::from_usize(value_count)..TyVid::from_usize(self.num_vars());
  1,794 ( 0.00%)          (
      .                       range.start..range.end,
      .                       (range.start.as_usize()..range.end.as_usize())
      .                           .map(|index| self.storage.values.get(index).origin)
      .                           .collect(),
      .                   )
  1,794 ( 0.00%)      }
      .           
      .               /// Returns indices of all variables that are not yet
      .               /// instantiated.
      .               pub fn unsolved_variables(&mut self) -> Vec<ty::TyVid> {
      .                   (0..self.storage.values.len())
      .                       .filter_map(|i| {
      .                           let vid = ty::TyVid::from_usize(i);
 13,812 ( 0.00%)                  match self.probe(vid) {
      .                               TypeVariableValue::Unknown { .. } => Some(vid),
      .                               TypeVariableValue::Known { .. } => None,
      .                           }
      .                       })
      .                       .collect()
      .               }
      .           }
      .           
-- line 368 ----------------------------------------
-- line 391 ----------------------------------------
      .           /// These structs (a newtyped TyVid) are used as the unification key
      .           /// for the `eq_relations`; they carry a `TypeVariableValue` along
      .           /// with them.
      .           #[derive(Copy, Clone, Debug, PartialEq, Eq)]
      .           pub(crate) struct TyVidEqKey<'tcx> {
      .               vid: ty::TyVid,
      .           
      .               // in the table, we map each ty-vid to one of these:
125,047 ( 0.02%)      phantom: PhantomData<TypeVariableValue<'tcx>>,
      .           }
      .           
      .           impl<'tcx> From<ty::TyVid> for TyVidEqKey<'tcx> {
      .               #[inline] // make this function eligible for inlining - it is quite hot.
      .               fn from(vid: ty::TyVid) -> Self {
      .                   TyVidEqKey { vid, phantom: PhantomData }
      .               }
      .           }
-- line 407 ----------------------------------------
-- line 419 ----------------------------------------
      .                   "TyVidEqKey"
      .               }
      .           }
      .           
      .           impl<'tcx> ut::UnifyValue for TypeVariableValue<'tcx> {
      .               type Error = ut::NoError;
      .           
      .               fn unify_values(value1: &Self, value2: &Self) -> Result<Self, ut::NoError> {
 26,238 ( 0.00%)          match (value1, value2) {
      .                       // We never equate two type variables, both of which
      .                       // have known types.  Instead, we recursively equate
      .                       // those types.
      .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Known { .. }) => {
      .                           bug!("equating two type variables, both of which have known types")
      .                       }
      .           
      .                       // If one side is known, prefer that one.
      .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Unknown { .. }) => Ok(*value1),
      .                       (&TypeVariableValue::Unknown { .. }, &TypeVariableValue::Known { .. }) => Ok(*value2),
      .           
      .                       // If both sides are *unknown*, it hardly matters, does it?
      .                       (
    326 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe1 },
    326 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe2 },
      .                       ) => {
      .                           // If we unify two unbound variables, ?T and ?U, then whatever
      .                           // value they wind up taking (which must be the same value) must
      .                           // be nameable by both universes. Therefore, the resulting
      .                           // universe is the minimum of the two universes, because that is
      .                           // the one which contains the fewest names in scope.
      .                           let universe = cmp::min(universe1, universe2);
  1,304 ( 0.00%)                  Ok(TypeVariableValue::Unknown { universe })
      .                       }
      .                   }
      .               }
      .           }

 15,175 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir               

-- line 118 ----------------------------------------
      .               stability: InternedSet<'tcx, attr::Stability>,
      .           
      .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
      .               const_stability: InternedSet<'tcx, attr::ConstStability>,
      .           }
      .           
      .           impl<'tcx> CtxtInterners<'tcx> {
      .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
     17 ( 0.00%)          CtxtInterners {
      .                       arena,
      .                       type_: Default::default(),
      .                       type_list: Default::default(),
      .                       substs: Default::default(),
      .                       region: Default::default(),
      .                       poly_existential_predicates: Default::default(),
      .                       canonical_var_infos: Default::default(),
      .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
      .                       stability: Default::default(),
      .                       const_stability: Default::default(),
      .                   }
      .               }
      .           
      .               /// Interns a type.
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline(never)]
440,656 ( 0.08%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
      .                   self.type_
275,410 ( 0.05%)              .intern(kind, |kind| {
 17,844 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
      .           
      .                           let ty_struct = TyS {
 35,688 ( 0.01%)                      kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(ty_struct))
      .                       })
      .                       .0
495,738 ( 0.09%)      }
      .           
      .               #[inline(never)]
226,256 ( 0.04%)      fn intern_predicate(
      .                   &self,
      .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> &'tcx PredicateInner<'tcx> {
      .                   self.predicate
197,974 ( 0.04%)              .intern(kind, |kind| {
 35,586 ( 0.01%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
      .           
      .                           let predicate_struct = PredicateInner {
      .                               kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(predicate_struct))
      .                       })
      .                       .0
254,538 ( 0.05%)      }
      .           }
      .           
      .           pub struct CommonTypes<'tcx> {
      .               pub unit: Ty<'tcx>,
      .               pub bool: Ty<'tcx>,
      .               pub char: Ty<'tcx>,
      .               pub isize: Ty<'tcx>,
      .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
      .           /// safely used as a key in the maps of a TypeckResults. For that to be
      .           /// the case, the HirId must have the same `owner` as all the other IDs in
      .           /// this table (signified by `hir_owner`). Otherwise the HirId
      .           /// would be in a different frame of reference and using its `local_id`
      .           /// would result in lookup errors, or worse, in silently wrong data being
      .           /// stored/returned.
      .           #[inline]
      .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
 57,696 ( 0.01%)      if hir_id.owner != hir_owner {
      .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
      .               }
      .           }
      .           
      .           #[cold]
      .           #[inline(never)]
      .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
      .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
      .           }
      .           
      .           impl<'a, V> LocalTableInContext<'a, V> {
      .               pub fn contains_key(&self, id: hir::HirId) -> bool {
      .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.data.contains_key(&id.local_id)
      .               }
      .           
 42,039 ( 0.01%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
  8,446 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
  8,446 ( 0.00%)          self.data.get(&id.local_id)
 33,676 ( 0.01%)      }
      .           
      .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
      .                   self.data.iter()
      .               }
      .           }
      .           
      .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
      .               type Output = V;
      .           
    498 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
      .                   self.get(key).expect("LocalTableInContext: key not found")
    332 ( 0.00%)      }
      .           }
      .           
      .           pub struct LocalTableInContextMut<'a, V> {
      .               hir_owner: LocalDefId,
      .               data: &'a mut ItemLocalMap<V>,
      .           }
      .           
      .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
      .               pub treat_byte_string_as_slice: ItemLocalSet,
      .           
      .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
      .               /// on closure size.
      .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
      .           }
      .           
      .           impl<'tcx> TypeckResults<'tcx> {
  2,238 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
 26,483 ( 0.00%)          TypeckResults {
      .                       hir_owner,
      .                       type_dependent_defs: Default::default(),
      .                       field_indices: Default::default(),
      .                       user_provided_types: Default::default(),
      .                       user_provided_sigs: Default::default(),
      .                       node_types: Default::default(),
      .                       node_substs: Default::default(),
      .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
      .                       tainted_by_errors: None,
      .                       concrete_opaque_types: Default::default(),
      .                       closure_min_captures: Default::default(),
      .                       closure_fake_reads: Default::default(),
      .                       generator_interior_types: ty::Binder::dummy(Default::default()),
      .                       treat_byte_string_as_slice: Default::default(),
      .                       closure_size_eval: Default::default(),
      .                   }
  2,238 ( 0.00%)      }
      .           
      .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
  9,213 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
  6,142 ( 0.00%)          match *qpath {
 16,164 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
      .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
      .                           .type_dependent_def(id)
  2,262 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
      .                   }
 15,355 ( 0.00%)      }
      .           
     49 ( 0.00%)      pub fn type_dependent_defs(
      .                   &self,
      .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    744 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
     49 ( 0.00%)      }
      .           
    759 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
  1,588 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
  1,518 ( 0.00%)      }
      .           
  1,808 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
      .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
  1,808 ( 0.00%)      }
      .           
  3,898 ( 0.00%)      pub fn type_dependent_defs_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
  3,898 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
  3,898 ( 0.00%)      }
      .           
      .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
  1,029 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
    178 ( 0.00%)      }
      .           
      .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
  1,794 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
    897 ( 0.00%)      }
      .           
      .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
  1,502 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    751 ( 0.00%)      }
      .           
      .               pub fn user_provided_types_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
    188 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
     94 ( 0.00%)      }
      .           
      .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
  8,372 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
  4,186 ( 0.00%)      }
      .           
      .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
 14,046 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
  7,023 ( 0.00%)      }
      .           
 59,646 ( 0.01%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
  9,941 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
      .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
      .                   })
 49,705 ( 0.01%)      }
      .           
 12,816 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
 12,816 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_types.get(&id.local_id).cloned()
 25,632 ( 0.00%)      }
      .           
      .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
  1,748 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    874 ( 0.00%)      }
      .           
  4,665 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
  4,665 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
  9,330 ( 0.00%)      }
      .           
  2,994 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
  2,994 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned()
  5,988 ( 0.00%)      }
      .           
      .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
      .               // doesn't provide type parameter substitutions.
      .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
  1,228 ( 0.00%)          self.node_type(pat.hir_id)
      .               }
      .           
      .               // Returns the type of an expression as a monotype.
      .               //
      .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
      .               // some cases, we insert `Adjustment` annotations such as auto-deref or
      .               // auto-ref.  The type returned by this function does not consider such
      .               // adjustments.  See `expr_ty_adjusted()` instead.
      .               //
      .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
      .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
      .               // instead of "fn(ty) -> T with T = isize".
      .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
 12,176 ( 0.00%)          self.node_type(expr.hir_id)
      .               }
      .           
      .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
 11,306 ( 0.00%)          self.node_type_opt(expr.hir_id)
      .               }
      .           
      .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  5,554 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
  2,777 ( 0.00%)      }
      .           
      .               pub fn adjustments_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  8,476 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
  4,238 ( 0.00%)      }
      .           
  5,248 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
 10,496 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
      .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
 10,496 ( 0.00%)      }
      .           
      .               /// Returns the type of `expr`, considering any `Adjustment`
      .               /// entry recorded for that expression.
    775 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
    155 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
    284 ( 0.00%)      }
      .           
    960 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
    192 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
    552 ( 0.00%)      }
      .           
    695 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
      .                   // Only paths and method calls/overloaded operators have
      .                   // entries in type_dependent_defs, ignore the former here.
  1,390 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
      .                       return false;
      .                   }
      .           
  2,082 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
  1,390 ( 0.00%)      }
      .           
  2,865 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
      .                   self.pat_binding_modes().get(id).copied().or_else(|| {
      .                       s.delay_span_bug(sp, "missing binding mode");
      .                       None
      .                   })
  3,820 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
  2,353 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    699 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
  1,272 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    636 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
  2,300 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
  1,150 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    724 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
    362 ( 0.00%)      }
      .           
      .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
      .               /// by the closure.
    560 ( 0.00%)      pub fn closure_min_captures_flattened(
      .                   &self,
      .                   closure_def_id: DefId,
      .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
      .                   self.closure_min_captures
      .                       .get(&closure_def_id)
      .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
      .                       .into_iter()
      .                       .flatten()
    700 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
    246 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
    123 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
      .               }
      .           
      .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    578 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
    289 ( 0.00%)      }
      .           
      .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
    332 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
    166 ( 0.00%)      }
      .           
      .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    246 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
    123 ( 0.00%)      }
      .           
      .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
      .               }
      .           
     69 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
     23 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
      .                   self.coercion_casts.contains(&hir_id.local_id)
     46 ( 0.00%)      }
      .           
      .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
      .                   self.coercion_casts.insert(id);
      .               }
      .           
      .               pub fn coercion_casts(&self) -> &ItemLocalSet {
    123 ( 0.00%)          &self.coercion_casts
    123 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
      .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
      .                   let ty::TypeckResults {
      .                       hir_owner,
      .                       ref type_dependent_defs,
      .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
      .                   const START_INDEX = 0,
      .               }
      .           }
      .           
      .           /// Mapping of type annotation indices to canonical user type annotations.
      .           pub type CanonicalUserTypeAnnotations<'tcx> =
      .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
      .           
     44 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
      .           pub struct CanonicalUserTypeAnnotation<'tcx> {
      .               pub user_ty: CanonicalUserType<'tcx>,
      .               pub span: Span,
     75 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
      .           }
      .           
      .           /// Canonicalized user type annotation.
      .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
      .           
      .           impl<'tcx> CanonicalUserType<'tcx> {
      .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
      .               /// i.e., each thing is mapped to a canonical variable with the same index.
    194 ( 0.00%)      pub fn is_identity(&self) -> bool {
    388 ( 0.00%)          match self.value {
      .                       UserType::Ty(_) => false,
      .                       UserType::TypeOf(_, user_substs) => {
    194 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
      .                               return false;
      .                           }
      .           
      .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
      .                               match kind.unpack() {
    562 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
      .                                       ty::Bound(debruijn, b) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
    266 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
      .                                           cvar == b.var
      .                                       }
      .                                       _ => false,
      .                                   },
      .           
      .                                   GenericArgKind::Lifetime(r) => match r {
      .                                       ty::ReLateBound(debruijn, br) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
-- line 861 ----------------------------------------
-- line 872 ----------------------------------------
      .                                           cvar == b
      .                                       }
      .                                       _ => false,
      .                                   },
      .                               }
      .                           })
      .                       }
      .                   }
    388 ( 0.00%)      }
      .           }
      .           
      .           /// A user-given type annotation attached to a constant. These arise
      .           /// from constants that are named via paths, like `Foo::<A>::new` and
      .           /// so forth.
    450 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
  2,134 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
      .           pub enum UserType<'tcx> {
      .               Ty(Ty<'tcx>),
      .           
      .               /// The canonical type is the result of `type_of(def_id)` with the
      .               /// given substitutions applied.
      .               TypeOf(DefId, UserSubsts<'tcx>),
      .           }
      .           
      .           impl<'tcx> CommonTypes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
    111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
      .           
      .                   CommonTypes {
      .                       unit: mk(Tuple(List::empty())),
      .                       bool: mk(Bool),
      .                       char: mk(Char),
      .                       never: mk(Never),
      .                       isize: mk(Int(ty::IntTy::Isize)),
      .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
      .           
      .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonLifetimes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
     67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
      .           
      .                   CommonLifetimes {
      5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
      5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
      5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonConsts<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
      6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
      .           
      .                   CommonConsts {
      .                       unit: mk_const(ty::Const {
      .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
      .                           ty: types.unit,
      .                       }),
      .                   }
      .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
      .           
      .               /// Stores memory for globals (statics/consts).
      .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
      .           
      .               output_filenames: Arc<OutputFilenames>,
      .           }
      .           
      .           impl<'tcx> TyCtxt<'tcx> {
  5,580 ( 0.00%)      pub fn typeck_opt_const_arg(
      .                   self,
      .                   def: ty::WithOptConstParam<LocalDefId>,
      .               ) -> &'tcx TypeckResults<'tcx> {
  2,232 ( 0.00%)          if let Some(param_did) = def.const_param_did {
      .                       self.typeck_const_arg((def.did, param_did))
      .                   } else {
      .                       self.typeck(def.did)
      .                   }
  4,464 ( 0.00%)      }
      .           
    378 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
    126 ( 0.00%)          self.arena.alloc(Steal::new(thir))
    504 ( 0.00%)      }
      .           
  2,105 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
    421 ( 0.00%)          self.arena.alloc(Steal::new(mir))
  2,947 ( 0.00%)      }
      .           
    504 ( 0.00%)      pub fn alloc_steal_promoted(
      .                   self,
      .                   promoted: IndexVec<Promoted, Body<'tcx>>,
      .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
    126 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    630 ( 0.00%)      }
      .           
    405 ( 0.00%)      pub fn alloc_adt_def(
      .                   self,
      .                   did: DefId,
      .                   kind: AdtKind,
      .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
      .                   repr: ReprOptions,
      .               ) -> &'tcx ty::AdtDef {
    720 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
    180 ( 0.00%)      }
      .           
      .               /// Allocates a read-only byte or string literal for `mir::interpret`.
      .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
      .                   // Create an allocation that just contains these bytes.
      .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
      .                   let alloc = self.intern_const_alloc(alloc);
      .                   self.create_memory_alloc(alloc)
      .               }
      .           
      .               /// Returns a range of the start/end indices specified with the
      .               /// `rustc_layout_scalar_valid_range` attribute.
      .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
  1,280 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    640 ( 0.00%)          let attrs = self.get_attrs(def_id);
  2,720 ( 0.00%)          let get = |name| {
    640 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
      .                           Some(attr) => attr,
      .                           None => return Bound::Unbounded,
      .                       };
      .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
      .                       if let Some(
      .                           &[
      .                               ast::NestedMetaItem::Literal(ast::Lit {
      .                                   kind: ast::LitKind::Int(a, _), ..
-- line 1111 ----------------------------------------
-- line 1114 ----------------------------------------
      .                       ) = attr.meta_item_list().as_deref()
      .                       {
      .                           Bound::Included(a)
      .                       } else {
      .                           self.sess
      .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
      .                           Bound::Unbounded
      .                       }
  3,200 ( 0.00%)          };
    960 ( 0.00%)          (
    960 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    480 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
      .                   )
  1,280 ( 0.00%)      }
      .           
      .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
      .                   value.lift_to_tcx(self)
      .               }
      .           
      .               /// Creates a type context and call the closure with a `TyCtxt` reference
      .               /// to the context. The closure enforces that the type context and any interned
      .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
      .               /// reference to the context, to allow formatting values that need it.
     23 ( 0.00%)      pub fn create_global_ctxt(
      .                   s: &'tcx Session,
      .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
      .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
      .                   resolutions: ty::ResolverOutputs,
      .                   krate: &'tcx hir::Crate<'tcx>,
      .                   dep_graph: DepGraph,
      .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
      .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
      .                   query_kinds: &'tcx [DepKindStruct],
      .                   crate_name: &str,
      .                   output_filenames: OutputFilenames,
      .               ) -> GlobalCtxt<'tcx> {
      1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
      .                       s.fatal(&err);
      .                   });
      .                   let interners = CtxtInterners::new(arena);
      .                   let common_types = CommonTypes::new(&interners);
      .                   let common_lifetimes = CommonLifetimes::new(&interners);
      .                   let common_consts = CommonConsts::new(&interners, &common_types);
      .           
    127 ( 0.00%)          GlobalCtxt {
      .                       sess: s,
      6 ( 0.00%)              lint_store,
      .                       arena,
      2 ( 0.00%)              interners,
      5 ( 0.00%)              dep_graph,
      4 ( 0.00%)              untracked_resolutions: resolutions,
      2 ( 0.00%)              prof: s.prof.clone(),
      .                       types: common_types,
      .                       lifetimes: common_lifetimes,
      .                       consts: common_consts,
      .                       untracked_crate: krate,
      .                       on_disk_cache,
      .                       queries,
      .                       query_caches: query::QueryCaches::default(),
      .                       query_kinds,
      .                       ty_rcache: Default::default(),
      .                       pred_rcache: Default::default(),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
      .                       data_layout,
      .                       alloc_map: Lock::new(interpret::AllocMap::new()),
      .                       output_filenames: Arc::new(output_filenames),
      .                   }
      9 ( 0.00%)      }
      .           
      .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
      .                   &self.query_kinds[k as usize]
      .               }
      .           
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
      .                   ty: Ty<'tcx>,
      .                   span: S,
      .                   msg: &str,
      .               ) -> &'tcx Const<'tcx> {
      .                   self.sess.delay_span_bug(span, msg);
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
      .               }
      .           
     56 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
      8 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
     63 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
     64 ( 0.00%)      }
      .           
      .               /// Obtain all lang items of this crate and all dependencies (recursively)
175,651 ( 0.03%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
      .                   self.get_lang_items(())
225,837 ( 0.04%)      }
      .           
      .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
      .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
     42 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
      .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
     48 ( 0.00%)      }
      .           
      .               /// Obtain the diagnostic item's name
  4,984 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
      .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
  5,696 ( 0.00%)      }
      .           
      .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
  9,296 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
      .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
 10,624 ( 0.00%)      }
      .           
  1,470 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
      .                   self.stability_index(())
  1,890 ( 0.00%)      }
      .           
 64,085 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
      .                   self.features_query(())
 73,240 ( 0.01%)      }
      .           
      .               pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
      .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
  2,759 ( 0.00%)          if let Some(id) = id.as_local() {
      .                       self.untracked_resolutions.definitions.def_key(id)
      .                   } else {
    250 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
      .                   }
      .               }
      .           
      .               /// Converts a `DefId` into its fully expanded `DefPath` (every
      .               /// `DefId` is really just an interned `DefPath`).
      .               ///
      .               /// Note that if `id` is not local to this crate, the result will
      .               ///  be a non-local `DefPath`.
-- line 1272 ----------------------------------------
-- line 1277 ----------------------------------------
      .                   } else {
      .                       self.untracked_resolutions.cstore.def_path(id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
      .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    770 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
      .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
      .                   } else {
    116 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
      .                   if crate_num == LOCAL_CRATE {
      .                       self.sess.local_stable_crate_id()
      .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
      .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
      .                       self.def_path(def_id).to_string_no_crate_verbose()
      .                   )
      .               }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
 37,252 ( 0.01%)          &*self.untracked_resolutions.cstore
 18,626 ( 0.00%)      }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
      .                   &self.untracked_resolutions.definitions
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
     19 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
     94 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      .                   let resolutions = &self.gcx.untracked_resolutions;
      .                   StableHashingContext::ignore_spans(
      .                       self.sess,
      .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
      .               /// If `true`, we should use the MIR-based borrowck, but also
      .               /// fall back on the AST borrowck if the MIR-based one errors.
      .               pub fn migrate_borrowck(self) -> bool {
      .                   self.borrowck_mode().migrate()
      .               }
      .           
      .               /// What mode(s) of borrowck should we run? AST? MIR? both?
      .               /// (Also considers the `#![feature(nll)]` setting.)
    246 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
      .                   // Here are the main constraints we need to deal with:
      .                   //
      .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
      .                   //    synonymous with no `-Z borrowck=...` flag at all.
      .                   //
      .                   // 2. We want to allow developers on the Nightly channel
      .                   //    to opt back into the "hard error" mode for NLL,
      .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
      .                   //   errors. (To simplify the code here, it now even overrides
      .                   //   a user's attempt to specify `-Z borrowck=compare`, which
      .                   //   we arguably do not need anymore and should remove.)
      .                   //
      .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
      .                   //
      .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
      .           
    369 ( 0.00%)          if self.features().nll {
      .                       return BorrowckMode::Mir;
      .                   }
      .           
    123 ( 0.00%)          self.sess.opts.borrowck_mode
    492 ( 0.00%)      }
      .           
      .               /// If `true`, we should use lazy normalization for constants, otherwise
      .               /// we still evaluate them eagerly.
      .               #[inline]
      .               pub fn lazy_normalization(self) -> bool {
    313 ( 0.00%)          let features = self.features();
      .                   // Note: We only use lazy normalization for generic const expressions.
    245 ( 0.00%)          features.generic_const_exprs
      .               }
      .           
      .               #[inline]
      .               pub fn local_crate_exports_generics(self) -> bool {
      .                   debug_assert!(self.sess.opts.share_generics());
      .           
      .                   self.sess.crate_types().iter().any(|crate_type| {
      .                       match crate_type {
-- line 1442 ----------------------------------------
-- line 1554 ----------------------------------------
      .                   self.mk_imm_ref(
      .                       self.lifetimes.re_static,
      .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
      .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
      .                   )
      .               }
      .           
      .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    957 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
    696 ( 0.00%)          match self.def_kind(def_id) {
      .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
      .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
      .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
      .                       },
  1,566 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
      .                   }
    783 ( 0.00%)      }
      .           
      .               pub fn type_length_limit(self) -> Limit {
      .                   self.limits(()).type_length_limit
      .               }
      .           
 64,484 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
      .                   self.limits(()).recursion_limit
 73,696 ( 0.01%)      }
      .           
      .               pub fn move_size_limit(self) -> Limit {
      .                   self.limits(()).move_size_limit
      .               }
      .           
    392 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
      .                   self.limits(()).const_eval_limit
    448 ( 0.00%)      }
      .           
      .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
      .                   iter::once(LOCAL_CRATE)
      .                       .chain(self.crates(()).iter().copied())
      .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
      .               }
      .           }
      .           
-- line 1594 ----------------------------------------
-- line 1684 ----------------------------------------
      .               /// This is the implicit state of rustc. It contains the current
      .               /// `TyCtxt` and query. It is updated when creating a local interner or
      .               /// executing a new query. Whenever there's a `TyCtxt` value available
      .               /// you should also have access to an `ImplicitCtxt` through the functions
      .               /// in this module.
      .               #[derive(Clone)]
      .               pub struct ImplicitCtxt<'a, 'tcx> {
      .                   /// The current `TyCtxt`.
      1 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
      .           
      .                   /// The current query job, if any. This is updated by `JobOwner::start` in
      .                   /// `ty::query::plumbing` when executing a query.
      .                   pub query: Option<query::QueryJobId<DepKind>>,
      .           
      .                   /// Where to store diagnostics for the current query job, if any.
      .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
      .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
      .                   pub layout_depth: usize,
      .           
      .                   /// The current dep graph task. This is used to add dependencies to queries
      .                   /// when executing them.
      .                   pub task_deps: TaskDepsRef<'a>,
      .               }
      .           
      .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
      5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
      .                       let tcx = TyCtxt { gcx };
     25 ( 0.00%)              ImplicitCtxt {
      .                           tcx,
      .                           query: None,
      .                           diagnostics: None,
      .                           layout_depth: 0,
      .                           task_deps: TaskDepsRef::Ignore,
      .                       }
      5 ( 0.00%)          }
      .               }
      .           
      .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
      .               /// to `value` during the call to `f`. It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(parallel_compiler)]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
      .           
      .               /// Sets TLV to `value` during the call to `f`.
      .               /// It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
      .                   let old = get_tlv();
 32,713 ( 0.01%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
      .                   TLV.with(|tlv| tlv.set(value));
      .                   f()
      .               }
      .           
      .               /// Gets the pointer to the current `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
      .               }
      .           
      .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
      .               #[inline]
      .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
      .               {
      1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
      .               }
      .           
      .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
      .               #[inline]
      .               pub fn with_context_opt<F, R>(f: F) -> R
      .               where
      .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
      .               {
      .                   let context = get_tlv();
132,439 ( 0.02%)          if context == 0 {
      .                       f(None)
      .                   } else {
      .                       // We could get an `ImplicitCtxt` pointer from another thread.
      .                       // Ensure that `ImplicitCtxt` is `Sync`.
      .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
      .           
      .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
      .                   }
-- line 1789 ----------------------------------------
-- line 1805 ----------------------------------------
      .               /// This will panic if you pass it a `TyCtxt` which is different from the current
      .               /// `ImplicitCtxt`'s `tcx` field.
      .               #[inline]
      .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
      .               {
      .                   with_context(|context| unsafe {
 65,522 ( 0.01%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
      .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
 65,504 ( 0.01%)              f(context)
      .                   })
      .               }
      .           
      .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
      .               /// Panics if there is no `ImplicitCtxt` available.
      .               #[inline]
      .               pub fn with<F, R>(f: F) -> R
      .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
      .               fn into_pointer(&self) -> *const () {
      .                   self.0 as *const _ as *const ()
      .               }
      .           }
      .           
      .           #[allow(rustc::usage_of_ty_tykind)]
      .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
 47,917 ( 0.01%)          &self.0.kind()
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
 42,996 ( 0.01%)          self.0.kind().hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
 23,049 ( 0.00%)          &self.0.kind
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  7,164 ( 0.00%)          self.0.kind.hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
      .               fn borrow<'a>(&'a self) -> &'a [T] {
 61,410 ( 0.01%)          &self.0[..]
      .               }
      .           }
      .           
      .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
      .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
      .           
      .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
 18,256 ( 0.00%)          self.0[..].hash(s)
      .               }
      .           }
      .           
      .           macro_rules! direct_interners {
      .               ($($name:ident: $method:ident($ty:ty),)+) => {
      .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
      .                       fn borrow<'a>(&'a self) -> &'a $ty {
 10,939 ( 0.00%)                  &self.0
      .                       }
      .                   }
      .           
      .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
      .                       fn eq(&self, other: &Self) -> bool {
      .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
      .                           // equals `x == y`.
      .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
      .                   }
      .           
      .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
      .           
      .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
      .                       fn hash<H: Hasher>(&self, s: &mut H) {
      .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
      .                           // x.hash(s)`.
 12,246 ( 0.00%)                  self.0.hash(s)
      .                       }
      .                   }
      .           
      .                   impl<'tcx> TyCtxt<'tcx> {
107,346 ( 0.02%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
 56,560 ( 0.01%)                  self.interners.$name.intern(v, |v| {
  2,723 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
      .                           }).0
120,555 ( 0.02%)              }
      .                   })+
      .               }
      .           }
      .           
      .           direct_interners! {
      .               region: mk_region(RegionKind),
      .               const_: mk_const(Const<'tcx>),
      .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
      .               adt_def: intern_adt_def(AdtDef),
      .               stability: intern_stability(attr::Stability),
      .               const_stability: intern_const_stability(attr::ConstStability),
      .           }
      .           
      .           macro_rules! slice_interners {
      .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
      .                   impl<'tcx> TyCtxt<'tcx> {
718,736 ( 0.13%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
      .                           self.interners.$field.intern_ref(v, || {
      .                               Interned(List::from_arena(&*self.arena, v))
      .                           }).0
644,337 ( 0.12%)              })+
      .                   }
      .               );
      .           }
      .           
      .           slice_interners!(
      .               type_list: _intern_type_list(Ty<'tcx>),
      .               substs: _intern_substs(GenericArg<'tcx>),
      .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2129 ----------------------------------------
      .               /// unsafe.
      .               pub fn safe_to_unsafe_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {
      .                   assert_eq!(sig.unsafety(), hir::Unsafety::Normal);
      .                   self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig { unsafety: hir::Unsafety::Unsafe, ..sig }))
      .               }
      .           
      .               /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`
      .               /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.
     36 ( 0.00%)      pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {
      .                   self.super_traits_of(trait_def_id).any(|trait_did| {
      .                       self.associated_items(trait_did)
      .                           .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, trait_did)
      .                           .is_some()
      .                   })
     27 ( 0.00%)      }
      .           
      .               /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)
      .               /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used
      .               /// to identify which traits may define a given associated type to help avoid cycle errors.
      .               /// Returns a `DefId` iterator.
      .               fn super_traits_of(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {
      .                   let mut set = FxHashSet::default();
      6 ( 0.00%)          let mut stack = vec![trait_def_id];
      .           
      .                   set.insert(trait_def_id);
      .           
     27 ( 0.00%)          iter::from_fn(move || -> Option<DefId> {
      6 ( 0.00%)              let trait_did = stack.pop()?;
      3 ( 0.00%)              let generic_predicates = self.super_predicates_of(trait_did);
      .           
      .                       for (predicate, _) in generic_predicates.predicates {
     18 ( 0.00%)                  if let ty::PredicateKind::Trait(data) = predicate.kind().skip_binder() {
     12 ( 0.00%)                      if set.insert(data.def_id()) {
      .                                   stack.push(data.def_id());
      .                               }
      .                           }
      .                       }
      .           
      .                       Some(trait_did)
      .                   })
      .               }
-- line 2169 ----------------------------------------
-- line 2188 ----------------------------------------
      .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
      .                   })
      .               }
      .           
      .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
      .               /// `*r == kind`.
      .               #[inline]
      .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
  7,400 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
      .               }
      .           
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline]
      .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
383,903 ( 0.07%)          self.interners.intern_ty(st)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
307,402 ( 0.05%)          let inner = self.interners.intern_predicate(binder);
      .                   Predicate { inner }
      .               }
      .           
      .               #[inline]
423,168 ( 0.08%)      pub fn reuse_or_mk_predicate(
      .                   self,
      .                   pred: Predicate<'tcx>,
      .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> Predicate<'tcx> {
 34,647 ( 0.01%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
423,168 ( 0.08%)      }
      .           
      .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
    739 ( 0.00%)          match tm {
      .                       IntTy::Isize => self.types.isize,
      .                       IntTy::I8 => self.types.i8,
      .                       IntTy::I16 => self.types.i16,
      .                       IntTy::I32 => self.types.i32,
      .                       IntTy::I64 => self.types.i64,
      .                       IntTy::I128 => self.types.i128,
      .                   }
    739 ( 0.00%)      }
      .           
      .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
  1,188 ( 0.00%)          match tm {
      .                       UintTy::Usize => self.types.usize,
      .                       UintTy::U8 => self.types.u8,
      .                       UintTy::U16 => self.types.u16,
      .                       UintTy::U32 => self.types.u32,
      .                       UintTy::U64 => self.types.u64,
      .                       UintTy::U128 => self.types.u128,
      .                   }
  1,188 ( 0.00%)      }
      .           
      .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
      .                   match tm {
      .                       FloatTy::F32 => self.types.f32,
      .                       FloatTy::F64 => self.types.f64,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn mk_static_str(self) -> Ty<'tcx> {
     20 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   // Take a copy of substs so that we own the vectors inside.
      .                   self.mk_ty(Adt(def, substs))
      .               }
      .           
-- line 2259 ----------------------------------------
-- line 2329 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
      .               }
      .           
      .               #[inline]
    506 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
      .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
    528 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Slice(ty))
      .               }
      .           
      .               #[inline]
      .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
    260 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
    427 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
      .               }
      .           
      .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
    440 ( 0.00%)          iter.intern_with(|ts| {
    223 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
  1,507 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
    396 ( 0.00%)          })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_unit(self) -> Ty<'tcx> {
     84 ( 0.00%)          self.types.unit
      .               }
      .           
      .               #[inline]
      .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
      .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(FnDef(def_id, substs))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
     48 ( 0.00%)          self.mk_ty(FnPtr(fty))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_dynamic(
      .                   self,
      .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   reg: ty::Region<'tcx>,
      .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
      .                   self.mk_ty_infer(TyVar(v))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
  1,218 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
      .                   self.mk_ty_infer(IntVar(v))
      .               }
      .           
      .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
      .                   self.mk_ty(Param(ParamTy { index, name }))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
      .               }
      .           
  2,338 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
  1,670 ( 0.00%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
      .                           self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
      .                       }
    668 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
      .                       GenericParamDefKind::Const { .. } => {
      .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
      .                       }
      .                   }
  2,338 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Opaque(def_id, substs))
      .               }
      .           
     62 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
     62 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
    124 ( 0.00%)      }
      .           
      .               pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Deref)
      .               }
      .           
      .               pub fn mk_place_downcast(
      .                   self,
      .                   place: Place<'tcx>,
-- line 2480 ----------------------------------------
-- line 2497 ----------------------------------------
      .           
      .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Index(index))
      .               }
      .           
      .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
      .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
      .               /// flight.
    558 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
      .                   let mut projection = place.projection.to_vec();
      .                   projection.push(elem);
      .           
      .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
    620 ( 0.00%)      }
      .           
     70 ( 0.00%)      pub fn intern_poly_existential_predicates(
      .                   self,
      .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
     10 ( 0.00%)          assert!(!eps.is_empty());
      .                   assert!(
      .                       eps.array_windows()
     55 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
      .                               != Ordering::Greater)
      .                   );
     40 ( 0.00%)          self._intern_poly_existential_predicates(eps)
     80 ( 0.00%)      }
      .           
      .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
      .                   // FIXME consider asking the input slice to be sorted to avoid
      .                   // re-interning permutations, in which case that would be asserted
      .                   // here.
  3,004 ( 0.00%)          if preds.is_empty() {
      .                       // The macro-generated method below asserts we don't intern an empty slice.
      .                       List::empty()
      .                   } else {
    855 ( 0.00%)              self._intern_predicates(preds)
      .                   }
  4,344 ( 0.00%)      }
      .           
      .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
  7,219 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
     98 ( 0.00%)      }
      .           
      .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
129,081 ( 0.02%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
 12,618 ( 0.00%)      }
      .           
      .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
      .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
      .               }
      .           
      .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
  1,814 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    636 ( 0.00%)      }
      .           
      .               pub fn intern_canonical_var_infos(
      .                   self,
      .                   ts: &[CanonicalVarInfo<'tcx>],
      .               ) -> CanonicalVarInfos<'tcx> {
  4,687 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
  1,182 ( 0.00%)      }
      .           
      .               pub fn intern_bound_variable_kinds(
      .                   self,
      .                   ts: &[ty::BoundVariableKind],
      .               ) -> &'tcx List<ty::BoundVariableKind> {
  4,298 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
  7,920 ( 0.00%)      }
      .           
      .               pub fn mk_fn_sig<I>(
      .                   self,
      .                   inputs: I,
      .                   output: I::Item,
      .                   c_variadic: bool,
      .                   unsafety: hir::Unsafety,
      .                   abi: abi::Abi,
      .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
      .               where
      .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
      .               {
      .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    436 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
    151 ( 0.00%)              c_variadic,
    165 ( 0.00%)              unsafety,
    274 ( 0.00%)              abi,
     30 ( 0.00%)          })
      .               }
      .           
      .               pub fn mk_poly_existential_predicates<
      .                   I: InternAs<
      .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   >,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
     26 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
      .               }
      .           
      .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
     12 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
      .               }
      .           
      .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    733 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
      .               }
      .           
      .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
134,364 ( 0.02%)          iter.intern_with(|xs| self.intern_substs(xs))
      .               }
      .           
      .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
     36 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
      .               }
      .           
  4,338 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
      .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
  8,676 ( 0.00%)      }
      .           
      .               pub fn mk_bound_variable_kinds<
      .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
 26,927 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
      .               }
      .           
      .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
      .               /// It stops at `bound` and just returns it if reached.
 35,686 ( 0.01%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
 35,686 ( 0.01%)          let hir = self.hir();
      .                   loop {
 67,005 ( 0.01%)              if id == bound {
      .                           return bound;
      .                       }
      .           
 86,185 ( 0.02%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
      .                           return id;
      .                       }
      .                       let next = hir.get_parent_node(id);
 51,711 ( 0.01%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
 50,980 ( 0.01%)      }
      .           
  1,976 ( 0.00%)      pub fn lint_level_at_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   mut id: hir::HirId,
      .               ) -> (Level, LintLevelSource) {
      .                   let sets = self.lint_levels(());
      .                   loop {
 11,306 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
      .                           return pair;
      .                       }
    872 ( 0.00%)              let next = self.hir().get_parent_node(id);
  2,616 ( 0.00%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
  1,976 ( 0.00%)      }
      .           
      .               pub fn struct_span_lint_hir(
      .                   self,
      .                   lint: &'static Lint,
      .                   hir_id: HirId,
      .                   span: impl Into<MultiSpan>,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
    447 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
    112 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
      .               }
      .           
      .               pub fn struct_lint_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   id: HirId,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
      .                   let (level, src) = self.lint_level_at_node(lint, id);
      .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
      .               }
      .           
  1,379 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
    394 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
      .                   let candidates = map.get(&id.local_id)?;
    394 ( 0.00%)          Some(&*candidates)
  1,576 ( 0.00%)      }
      .           
  2,107 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
      .                   debug!(?id, "named_region");
      .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
  2,709 ( 0.00%)      }
      .           
      .               pub fn is_late_bound(self, id: HirId) -> bool {
      .                   self.is_late_bound_map(id.owner)
      .                       .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
      .               }
      .           
  2,366 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
      .                   self.object_lifetime_defaults_map(id.owner)
  3,042 ( 0.00%)      }
      .           
  1,791 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
      .                   self.mk_bound_variable_kinds(
      .                       self.late_bound_vars_map(id.owner)
      .                           .and_then(|map| map.get(&id.local_id).cloned())
      .                           .unwrap_or_else(|| {
      .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
      .                           })
      .                           .iter(),
      .                   )
  1,791 ( 0.00%)      }
      .           
      .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
      .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
      .               }
      .           
      .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
      .               /// feature gates
     30 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
      3 ( 0.00%)          if self.is_const_fn_raw(def_id) {
      2 ( 0.00%)              match self.lookup_const_stability(def_id) {
      4 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
      .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
      .                               // corresponding feature gate.
      .                               self.features()
      .                                   .declared_lib_features
      .                                   .iter()
      .                                   .any(|&(sym, _)| sym == stability.feature)
      .                           }
      .                           // functions without const stability are either stable user written
      .                           // const fn or the user is using feature gates and we thus don't
      .                           // care what they do
      .                           _ => true,
      .                       }
      .                   } else {
      .                       false
      .                   }
     27 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TyCtxtAt<'tcx> {
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
      .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
      .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
      .           }
      .           
      .           impl<I, T, R, E> InternAs<[T], R> for I
      .           where
      .               E: InternIteratorElement<T, R>,
      .               I: Iterator<Item = E>,
      .           {
      .               type Output = E::Output;
 66,536 ( 0.01%)      fn intern_with<F>(self, f: F) -> Self::Output
      .               where
      .                   F: FnOnce(&[T]) -> R,
      .               {
367,185 ( 0.07%)          E::intern_with(self, f)
 66,897 ( 0.01%)      }
      .           }
      .           
      .           pub trait InternIteratorElement<T, R>: Sized {
      .               type Output;
      .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
      .           }
      .           
      .           impl<T, R> InternIteratorElement<T, R> for T {
      .               type Output = R;
 57,723 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`.
 79,989 ( 0.01%)          match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
      .                           let t0 = iter.next().unwrap();
      2 ( 0.00%)                  assert!(iter.next().is_none());
  8,500 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
      .                           let t0 = iter.next().unwrap();
      .                           let t1 = iter.next().unwrap();
     17 ( 0.00%)                  assert!(iter.next().is_none());
  9,415 ( 0.00%)                  f(&[t0, t1])
      .                       }
    536 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
      .                   }
 41,167 ( 0.01%)      }
      .           }
      .           
      .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
      .           where
      .               T: Clone + 'a,
      .           {
      .               type Output = R;
  1,034 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
      .                   // This code isn't hot.
     12 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    838 ( 0.00%)      }
      .           }
      .           
      .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
      .               type Output = Result<R, E>;
115,908 ( 0.02%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`, unless a failure happens first, in which case the result
      .                   // will be an error anyway.
 91,512 ( 0.02%)          Ok(match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
      .                           let t0 = iter.next().unwrap()?;
      .                           assert!(iter.next().is_none());
  2,629 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
     20 ( 0.00%)                  let t0 = iter.next().unwrap()?;
     20 ( 0.00%)                  let t1 = iter.next().unwrap()?;
     30 ( 0.00%)                  assert!(iter.next().is_none());
 10,558 ( 0.00%)                  f(&[t0, t1])
      .                       }
  2,186 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
      .                   })
130,617 ( 0.02%)      }
      .           }
      .           
      .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
      .           // won't work for us.
      .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
 65,522 ( 0.01%)      t as *const () == u as *const ()
      .           }
      .           
      .           pub fn provide(providers: &mut ty::query::Providers) {
      2 ( 0.00%)      providers.in_scope_traits_map =
      .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
      3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
      2 ( 0.00%)      providers.module_reexports =
      .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
      2 ( 0.00%)      providers.crate_name = |tcx, id| {
      1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
      1 ( 0.00%)          tcx.crate_name
      .               };
      2 ( 0.00%)      providers.maybe_unused_trait_import =
      .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
      2 ( 0.00%)      providers.maybe_unused_extern_crates =
      .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
      2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
      .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
      .               };
      .           
     11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_const_stability =
      .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_deprecation_entry =
  1,664 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
      2 ( 0.00%)      providers.extern_mod_stmt_cnum =
      .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
      3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
      3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
      2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
      .                   assert_eq!(cnum, LOCAL_CRATE);
      .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
      .               };
      2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
      .                   assert_eq!(cnum, LOCAL_CRATE);
      .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
      .               };
      2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
      1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
      .                   // We want to check if the panic handler was defined in this crate
      3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
      .               };
      .           }

322,920 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 157 ----------------------------------------
        .               pub fn opt_fn_def_id(self) -> Option<DefId> {
        .                   if let Res::Def(DefKind::Fn, def_id) = self.res { Some(def_id) } else { None }
        .               }
        .           }
        .           
        .           /// The "header" of an impl is everything outside the body: a Self type, a trait
        .           /// ref (in the case of a trait impl), and a set of predicates (from the
        .           /// bounds / where-clauses).
      156 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
        .           pub struct ImplHeader<'tcx> {
        .               pub impl_def_id: DefId,
        .               pub self_ty: Ty<'tcx>,
        .               pub trait_ref: Option<TraitRef<'tcx>>,
        .               pub predicates: Vec<Predicate<'tcx>>,
        .           }
        .           
        .           #[derive(
        .               Copy,
        .               Clone,
   32,148 ( 0.01%)      PartialEq,
        .               Eq,
        .               Hash,
        .               TyEncodable,
   10,284 ( 0.00%)      TyDecodable,
        .               HashStable,
        .               Debug,
        .               TypeFoldable
        .           )]
        .           pub enum ImplPolarity {
        .               /// `impl Trait for Type`
        .               Positive,
        .               /// `impl !Trait for Type`
-- line 188 ----------------------------------------
-- line 210 ----------------------------------------
        .                   match self {
        .                       Self::Positive => f.write_str("positive"),
        .                       Self::Negative => f.write_str("negative"),
        .                       Self::Reservation => f.write_str("reservation"),
        .                   }
        .               }
        .           }
        .           
  692,748 ( 0.12%)  #[derive(Clone, Debug, PartialEq, Eq, Copy, Hash, TyEncodable, TyDecodable, HashStable)]
        .           pub enum Visibility {
        .               /// Visible everywhere (including in other crates).
        .               Public,
        .               /// Visible only in the given crate-local module.
        .               Restricted(DefId),
        .               /// Not visible anywhere in the local crate. This is the visibility of private external items.
        .               Invisible,
        .           }
        .           
   54,534 ( 0.01%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]
        .           pub enum BoundConstness {
        .               /// `T: Trait`
        .               NotConst,
        .               /// `T: ~const Trait`
        .               ///
        .               /// Requires resolving to const only when we are in a const context.
        .               ConstIfConst,
        .           }
        .           
        .           impl BoundConstness {
        .               /// Reduce `self` and `constness` to two possible combined states instead of four.
    7,906 ( 0.00%)      pub fn and(&mut self, constness: hir::Constness) -> hir::Constness {
   11,859 ( 0.00%)          match (constness, self) {
        .                       (hir::Constness::Const, BoundConstness::ConstIfConst) => hir::Constness::Const,
        .                       (_, this) => {
   12,904 ( 0.00%)                  *this = BoundConstness::NotConst;
        .                           hir::Constness::NotConst
        .                       }
        .                   }
    3,953 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Display for BoundConstness {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   match self {
        .                       Self::NotConst => f.write_str("normal"),
        .                       Self::ConstIfConst => f.write_str("`~const`"),
        .                   }
-- line 256 ----------------------------------------
-- line 274 ----------------------------------------
        .               pub before_feature_tys: Ty<'tcx>,
        .               /// Tuple containing the types of closure captures after the feature `capture_disjoint_fields`
        .               pub after_feature_tys: Ty<'tcx>,
        .           }
        .           
        .           pub trait DefIdTree: Copy {
        .               fn parent(self, id: DefId) -> Option<DefId>;
        .           
       56 ( 0.00%)      fn is_descendant_of(self, mut descendant: DefId, ancestor: DefId) -> bool {
       20 ( 0.00%)          if descendant.krate != ancestor.krate {
        .                       return false;
        .                   }
        .           
    7,126 ( 0.00%)          while descendant != ancestor {
    2,071 ( 0.00%)              match self.parent(descendant) {
        .                           Some(parent) => descendant = parent,
        .                           None => return false,
        .                       }
        .                   }
        .                   true
       64 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> DefIdTree for TyCtxt<'tcx> {
    1,196 ( 0.00%)      fn parent(self, id: DefId) -> Option<DefId> {
        .                   self.def_key(id).parent.map(|index| DefId { index, ..id })
    1,794 ( 0.00%)      }
        .           }
        .           
        .           impl Visibility {
       78 ( 0.00%)      pub fn from_hir(visibility: &hir::Visibility<'_>, id: hir::HirId, tcx: TyCtxt<'_>) -> Self {
      234 ( 0.00%)          match visibility.node {
        .                       hir::VisibilityKind::Public => Visibility::Public,
        .                       hir::VisibilityKind::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),
        .                       hir::VisibilityKind::Restricted { ref path, .. } => match path.res {
        .                           // If there is no resolution, `resolve` will have already reported an error, so
        .                           // assume that the visibility is public to avoid reporting more privacy errors.
        .                           Res::Err => Visibility::Public,
        .                           def => Visibility::Restricted(def.def_id()),
        .                       },
        .                       hir::VisibilityKind::Inherited => {
      124 ( 0.00%)                  Visibility::Restricted(tcx.parent_module(id).to_def_id())
        .                       }
        .                   }
       78 ( 0.00%)      }
        .           
        .               /// Returns `true` if an item with this visibility is accessible from the given block.
    9,900 ( 0.00%)      pub fn is_accessible_from<T: DefIdTree>(self, module: DefId, tree: T) -> bool {
  626,177 ( 0.11%)          let restriction = match self {
        .                       // Public items are visible everywhere.
        .                       Visibility::Public => return true,
        .                       // Private items from other crates are visible nowhere.
        .                       Visibility::Invisible => return false,
        .                       // Restricted items are visible in an arbitrary local module.
    5,892 ( 0.00%)              Visibility::Restricted(other) if other.krate != module.krate => return false,
        .                       Visibility::Restricted(module) => module,
        .                   };
        .           
       16 ( 0.00%)          tree.is_descendant_of(module, restriction)
    9,900 ( 0.00%)      }
        .           
        .               /// Returns `true` if this visibility is at least as accessible as the given visibility
  448,056 ( 0.08%)      pub fn is_at_least<T: DefIdTree>(self, vis: Visibility, tree: T) -> bool {
  400,822 ( 0.07%)          let vis_restriction = match vis {
        .                       Visibility::Public => return self == Visibility::Public,
        .                       Visibility::Invisible => return true,
        .                       Visibility::Restricted(module) => module,
        .                   };
        .           
        .                   self.is_accessible_from(vis_restriction, tree)
  448,056 ( 0.08%)      }
        .           
        .               // Returns `true` if this item is visible anywhere in the local crate.
        .               pub fn is_visible_locally(self) -> bool {
        .                   match self {
        .                       Visibility::Public => true,
        .                       Visibility::Restricted(def_id) => def_id.is_local(),
        .                       Visibility::Invisible => false,
        .                   }
        .               }
        .           
        .               pub fn is_public(self) -> bool {
    1,544 ( 0.00%)          matches!(self, Visibility::Public)
      772 ( 0.00%)      }
        .           }
        .           
        .           /// The crate variances map is computed during typeck and contains the
        .           /// variance of every item in the local crate. You should not use it
        .           /// directly, because to do so will make your pass dependent on the
        .           /// HIR of every item in the local crate. Instead, use
        .           /// `tcx.variances_of()` to get the variance for a *particular*
        .           /// item.
-- line 365 ----------------------------------------
-- line 509 ----------------------------------------
        .           #[derive(Clone, Copy, Lift)]
        .           pub struct Predicate<'tcx> {
        .               inner: &'tcx PredicateInner<'tcx>,
        .           }
        .           
        .           impl<'tcx> PartialEq for Predicate<'tcx> {
        .               fn eq(&self, other: &Self) -> bool {
        .                   // `self.kind` is always interned.
   51,972 ( 0.01%)          ptr::eq(self.inner, other.inner)
   43,906 ( 0.01%)      }
        .           }
        .           
        .           impl Hash for Predicate<'_> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   (self.inner as *const PredicateInner<'_>).hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Predicate<'tcx> {}
        .           
        .           impl<'tcx> Predicate<'tcx> {
        .               /// Gets the inner `Binder<'tcx, PredicateKind<'tcx>>`.
        .               #[inline]
        .               pub fn kind(self) -> Binder<'tcx, PredicateKind<'tcx>> {
  261,313 ( 0.05%)          self.inner.kind
        .               }
        .           
        .               /// Flips the polarity of a Predicate.
        .               ///
        .               /// Given `T: Trait` predicate it returns `T: !Trait` and given `T: !Trait` returns `T: Trait`.
        .               pub fn flip_polarity(&self, tcx: TyCtxt<'tcx>) -> Option<Predicate<'tcx>> {
        .                   let kind = self
        .                       .inner
-- line 541 ----------------------------------------
-- line 567 ----------------------------------------
        .                       flags: _,
        .                       outer_exclusive_binder: _,
        .                   } = self.inner;
        .           
        .                   kind.hash_stable(hcx, hasher);
        .               }
        .           }
        .           
1,031,623 ( 0.18%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
1,030,992 ( 0.18%)  #[derive(HashStable, TypeFoldable)]
        .           pub enum PredicateKind<'tcx> {
        .               /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be
        .               /// the `Self` type of the trait reference and `A`, `B`, and `C`
        .               /// would be the type parameters.
        .               Trait(TraitPredicate<'tcx>),
        .           
        .               /// `where 'a: 'b`
        .               RegionOutlives(RegionOutlivesPredicate<'tcx>),
-- line 584 ----------------------------------------
-- line 594 ----------------------------------------
        .               WellFormed(GenericArg<'tcx>),
        .           
        .               /// Trait must be object-safe.
        .               ObjectSafe(DefId),
        .           
        .               /// No direct syntax. May be thought of as `where T: FnFoo<...>`
        .               /// for some substitutions `...` and `T` being a closure type.
        .               /// Satisfied (or refuted) once we know the closure's kind.
       45 ( 0.00%)      ClosureKind(DefId, SubstsRef<'tcx>, ClosureKind),
        .           
        .               /// `T1 <: T2`
        .               ///
        .               /// This obligation is created most often when we have two
        .               /// unresolved type variables and hence don't have enough
        .               /// information to process the subtyping obligation yet.
      122 ( 0.00%)      Subtype(SubtypePredicate<'tcx>),
        .           
        .               /// `T1` coerced to `T2`
        .               ///
        .               /// Like a subtyping obligation, this is created most often
        .               /// when we have two unresolved type variables and hence
        .               /// don't have enough information to process the coercion
        .               /// obligation yet. At the moment, we actually process coercions
        .               /// very much like subtyping and don't handle the full coercion
-- line 617 ----------------------------------------
-- line 645 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Predicate<'tcx> {
        .               /// Performs a substitution suitable for going from a
        .               /// poly-trait-ref to supertraits that must hold if that
        .               /// poly-trait-ref holds. This is slightly different from a normal
        .               /// substitution in terms of what happens with bound regions. See
        .               /// lengthy comment below for details.
   15,885 ( 0.00%)      pub fn subst_supertrait(
        .                   self,
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_ref: &ty::PolyTraitRef<'tcx>,
        .               ) -> Predicate<'tcx> {
        .                   // The interaction between HRTB and supertraits is not entirely
        .                   // obvious. Let me walk you (and myself) through an example.
        .                   //
        .                   // Let's start with an easy case. Consider two traits:
-- line 661 ----------------------------------------
-- line 731 ----------------------------------------
        .                   //    ['x, 'b]
        .                   let bound_pred = self.kind();
        .                   let pred_bound_vars = bound_pred.bound_vars();
        .                   let trait_bound_vars = trait_ref.bound_vars();
        .                   // 1) Self: Bar1<'a, '^0.0> -> Self: Bar1<'a, '^0.1>
        .                   let shifted_pred =
        .                       tcx.shift_bound_var_indices(trait_bound_vars.len(), bound_pred.skip_binder());
        .                   // 2) Self: Bar1<'a, '^0.1> -> T: Bar1<'^0.0, '^0.1>
    1,765 ( 0.00%)          let new = shifted_pred.subst(tcx, trait_ref.skip_binder().substs);
        .                   // 3) ['x] + ['b] -> ['x, 'b]
        .                   let bound_vars =
        .                       tcx.mk_bound_variable_kinds(trait_bound_vars.iter().chain(pred_bound_vars));
   15,885 ( 0.00%)          tcx.reuse_or_mk_predicate(self, ty::Binder::bind_with_vars(new, bound_vars))
   12,355 ( 0.00%)      }
        .           }
        .           
    4,427 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
   94,922 ( 0.02%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct TraitPredicate<'tcx> {
        .               pub trait_ref: TraitRef<'tcx>,
        .           
  123,525 ( 0.02%)      pub constness: BoundConstness,
        .           
  154,039 ( 0.03%)      pub polarity: ImplPolarity,
        .           }
        .           
        .           pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;
        .           
        .           impl<'tcx> TraitPredicate<'tcx> {
   71,608 ( 0.01%)      pub fn remap_constness(&mut self, tcx: TyCtxt<'tcx>, param_env: &mut ParamEnv<'tcx>) {
   62,657 ( 0.01%)          if unlikely!(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {
        .                       // remap without changing constness of this predicate.
        .                       // this is because `T: ~const Drop` has a different meaning to `T: Drop`
        .                       param_env.remap_constness_with(self.constness)
        .                   } else {
    8,951 ( 0.00%)              *param_env = param_env.with_constness(self.constness.and(param_env.constness()))
        .                   }
   53,706 ( 0.01%)      }
        .           
        .               /// Remap the constness of this predicate before emitting it for diagnostics.
        .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
        .                   // this is different to `remap_constness` that callees want to print this predicate
        .                   // in case of selection errors. `T: ~const Drop` bounds cannot end up here when the
        .                   // param_env is not const because we it is always satisfied in non-const contexts.
        .                   if let hir::Constness::NotConst = param_env.constness() {
        .                       self.constness = ty::BoundConstness::NotConst;
        .                   }
        .               }
        .           
        .               pub fn def_id(self) -> DefId {
   15,688 ( 0.00%)          self.trait_ref.def_id
    7,844 ( 0.00%)      }
        .           
   10,440 ( 0.00%)      pub fn self_ty(self) -> Ty<'tcx> {
   31,320 ( 0.01%)          self.trait_ref.self_ty()
   20,880 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> PolyTraitPredicate<'tcx> {
        .               pub fn def_id(self) -> DefId {
        .                   // Ok to skip binder since trait `DefId` does not care about regions.
        .                   self.skip_binder().def_id()
   27,473 ( 0.00%)      }
        .           
        .               pub fn self_ty(self) -> ty::Binder<'tcx, Ty<'tcx>> {
        .                   self.map_bound(|trait_ref| trait_ref.self_ty())
        .               }
        .           
        .               /// Remap the constness of this predicate before emitting it for diagnostics.
        .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
        .                   *self = self.map_bound(|mut p| {
        .                       p.remap_constness_diag(param_env);
        .                       p
        .                   });
        .               }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    3,151 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
    4,807 ( 0.00%)  pub struct OutlivesPredicate<A, B>(pub A, pub B); // `A: B`
        .           pub type RegionOutlivesPredicate<'tcx> = OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>;
        .           pub type TypeOutlivesPredicate<'tcx> = OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>;
        .           pub type PolyRegionOutlivesPredicate<'tcx> = ty::Binder<'tcx, RegionOutlivesPredicate<'tcx>>;
        .           pub type PolyTypeOutlivesPredicate<'tcx> = ty::Binder<'tcx, TypeOutlivesPredicate<'tcx>>;
        .           
        .           /// Encodes that `a` must be a subtype of `b`. The `a_is_expected` flag indicates
        .           /// whether the `a` type is the type that we should label as "expected" when
        .           /// presenting user diagnostics.
        .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
      509 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct SubtypePredicate<'tcx> {
      778 ( 0.00%)      pub a_is_expected: bool,
        .               pub a: Ty<'tcx>,
        .               pub b: Ty<'tcx>,
        .           }
        .           pub type PolySubtypePredicate<'tcx> = ty::Binder<'tcx, SubtypePredicate<'tcx>>;
        .           
        .           /// Encodes that we have to coerce *from* the `a` type to the `b` type.
        .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
       23 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct CoercePredicate<'tcx> {
        .               pub a: Ty<'tcx>,
        .               pub b: Ty<'tcx>,
        .           }
        .           pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;
        .           
    5,959 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]
    5,612 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub enum Term<'tcx> {
        .               Ty(Ty<'tcx>),
        .               Const(&'tcx Const<'tcx>),
        .           }
        .           
        .           impl<'tcx> From<Ty<'tcx>> for Term<'tcx> {
        .               fn from(ty: Ty<'tcx>) -> Self {
        .                   Term::Ty(ty)
      408 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> From<&'tcx Const<'tcx>> for Term<'tcx> {
        .               fn from(c: &'tcx Const<'tcx>) -> Self {
        .                   Term::Const(c)
        .               }
        .           }
        .           
        .           impl<'tcx> Term<'tcx> {
        .               pub fn ty(&self) -> Option<Ty<'tcx>> {
      560 ( 0.00%)          if let Term::Ty(ty) = self { Some(ty) } else { None }
      280 ( 0.00%)      }
        .           }
        .           
        .           /// This kind of predicate has no *direct* correspondent in the
        .           /// syntax, but it roughly corresponds to the syntactic forms:
        .           ///
        .           /// 1. `T: TraitRef<..., Item = Type>`
        .           /// 2. `<T as TraitRef<...>>::Item == Type` (NYI)
        .           ///
        .           /// In particular, form #1 is "desugared" to the combination of a
        .           /// normal trait predicate (`T: TraitRef<...>`) and one of these
        .           /// predicates. Form #2 is a broader form in that it also permits
        .           /// equality between arbitrary types. Processing an instance of
        .           /// Form #2 eventually yields one of these `ProjectionPredicate`
        .           /// instances to normalize the LHS.
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    1,228 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ProjectionPredicate<'tcx> {
        .               pub projection_ty: ProjectionTy<'tcx>,
    3,199 ( 0.00%)      pub term: Term<'tcx>,
        .           }
        .           
        .           pub type PolyProjectionPredicate<'tcx> = Binder<'tcx, ProjectionPredicate<'tcx>>;
        .           
        .           impl<'tcx> PolyProjectionPredicate<'tcx> {
        .               /// Returns the `DefId` of the trait of the associated item being projected.
        .               #[inline]
        .               pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
       12 ( 0.00%)          self.skip_binder().projection_ty.trait_def_id(tcx)
        .               }
        .           
        .               /// Get the [PolyTraitRef] required for this projection to be well formed.
        .               /// Note that for generic associated types the predicates of the associated
        .               /// type also need to be checked.
        .               #[inline]
        .               pub fn required_poly_trait_ref(&self, tcx: TyCtxt<'tcx>) -> PolyTraitRef<'tcx> {
        .                   // Note: unlike with `TraitRef::to_poly_trait_ref()`,
        .                   // `self.0.trait_ref` is permitted to have escaping regions.
        .                   // This is because here `self` has a `Binder` and so does our
        .                   // return value, so we are preserving the number of binding
        .                   // levels.
       10 ( 0.00%)          self.map_bound(|predicate| predicate.projection_ty.trait_ref(tcx))
        .               }
        .           
        .               pub fn term(&self) -> Binder<'tcx, Term<'tcx>> {
        .                   self.map_bound(|predicate| predicate.term)
        .               }
        .           
        .               /// The `DefId` of the `TraitItem` for the associated type.
        .               ///
        .               /// Note that this is not the `DefId` of the `TraitRef` containing this
        .               /// associated type, which is in `tcx.associated_item(projection_def_id()).container`.
        .               pub fn projection_def_id(&self) -> DefId {
        .                   // Ok to skip binder since trait `DefId` does not care about regions.
      224 ( 0.00%)          self.skip_binder().projection_ty.item_def_id
      112 ( 0.00%)      }
        .           }
        .           
        .           pub trait ToPolyTraitRef<'tcx> {
        .               fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;
        .           }
        .           
        .           impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {
    2,189 ( 0.00%)      fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> {
    2,189 ( 0.00%)          self.map_bound_ref(|trait_pred| trait_pred.trait_ref)
    2,189 ( 0.00%)      }
        .           }
        .           
        .           pub trait ToPredicate<'tcx> {
        .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;
        .           }
        .           
        .           impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {
        .               #[inline(always)]
        .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
        .                   tcx.mk_predicate(self)
        .               }
        .           }
        .           
        .           impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {
    3,237 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
   16,185 ( 0.00%)          self.map_bound(PredicateKind::Trait).to_predicate(tcx)
    6,474 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {
        .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
        .                   self.map_bound(PredicateKind::RegionOutlives).to_predicate(tcx)
        .               }
        .           }
        .           
        .           impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {
        .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
        .                   self.map_bound(PredicateKind::TypeOutlives).to_predicate(tcx)
        .               }
        .           }
        .           
        .           impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {
      130 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
      650 ( 0.00%)          self.map_bound(PredicateKind::Projection).to_predicate(tcx)
      260 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Predicate<'tcx> {
   23,628 ( 0.00%)      pub fn to_opt_poly_trait_pred(self) -> Option<PolyTraitPredicate<'tcx>> {
        .                   let predicate = self.kind();
   70,884 ( 0.01%)          match predicate.skip_binder() {
   55,685 ( 0.01%)              PredicateKind::Trait(t) => Some(predicate.rebind(t)),
        .                       PredicateKind::Projection(..)
        .                       | PredicateKind::Subtype(..)
        .                       | PredicateKind::Coerce(..)
        .                       | PredicateKind::RegionOutlives(..)
        .                       | PredicateKind::WellFormed(..)
        .                       | PredicateKind::ObjectSafe(..)
        .                       | PredicateKind::ClosureKind(..)
        .                       | PredicateKind::TypeOutlives(..)
        .                       | PredicateKind::ConstEvaluatable(..)
        .                       | PredicateKind::ConstEquate(..)
      677 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
        .                   }
   23,628 ( 0.00%)      }
        .           
    2,272 ( 0.00%)      pub fn to_opt_type_outlives(self) -> Option<PolyTypeOutlivesPredicate<'tcx>> {
        .                   let predicate = self.kind();
    4,544 ( 0.00%)          match predicate.skip_binder() {
      249 ( 0.00%)              PredicateKind::TypeOutlives(data) => Some(predicate.rebind(data)),
        .                       PredicateKind::Trait(..)
        .                       | PredicateKind::Projection(..)
        .                       | PredicateKind::Subtype(..)
        .                       | PredicateKind::Coerce(..)
        .                       | PredicateKind::RegionOutlives(..)
        .                       | PredicateKind::WellFormed(..)
        .                       | PredicateKind::ObjectSafe(..)
        .                       | PredicateKind::ClosureKind(..)
        .                       | PredicateKind::ConstEvaluatable(..)
        .                       | PredicateKind::ConstEquate(..)
    2,189 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
        .                   }
    2,272 ( 0.00%)      }
        .           }
        .           
        .           /// Represents the bounds declared on a particular set of type
        .           /// parameters. Should eventually be generalized into a flag list of
        .           /// where-clauses. You can obtain an `InstantiatedPredicates` list from a
        .           /// `GenericPredicates` by using the `instantiate` method. Note that this method
        .           /// reflects an important semantic invariant of `InstantiatedPredicates`: while
        .           /// the `GenericPredicates` are expressed in terms of the bound type
-- line 1005 ----------------------------------------
-- line 1011 ----------------------------------------
        .           /// Example:
        .           ///
        .           ///     struct Foo<T, U: Bar<T>> { ... }
        .           ///
        .           /// Here, the `GenericPredicates` for `Foo` would contain a list of bounds like
        .           /// `[[], [U:Bar<T>]]`. Now if there were some particular reference
        .           /// like `Foo<isize,usize>`, then the `InstantiatedPredicates` would be `[[],
        .           /// [usize:Bar<isize>]]`.
   15,336 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
        .           pub struct InstantiatedPredicates<'tcx> {
        .               pub predicates: Vec<Predicate<'tcx>>,
        .               pub spans: Vec<Span>,
        .           }
        .           
        .           impl<'tcx> InstantiatedPredicates<'tcx> {
       25 ( 0.00%)      pub fn empty() -> InstantiatedPredicates<'tcx> {
    9,626 ( 0.00%)          InstantiatedPredicates { predicates: vec![], spans: vec![] }
       25 ( 0.00%)      }
        .           
        .               pub fn is_empty(&self) -> bool {
        .                   self.predicates.is_empty()
        4 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, TyEncodable, TyDecodable, TypeFoldable)]
        .           pub struct OpaqueTypeKey<'tcx> {
        .               pub def_id: DefId,
        .               pub substs: SubstsRef<'tcx>,
        .           }
        .           
-- line 1040 ----------------------------------------
-- line 1091 ----------------------------------------
        .               /// ```
        .               /// for<'a> fn(&'a u32)
        .               /// ```
        .               ///
        .               /// Once we "enter" into this `for<'a>` quantifier, we are in a
        .               /// new universe that extends `U` -- in this new universe, we can
        .               /// name the region `'a`, but that region was not nameable from
        .               /// `U` because it was not in scope there.
    7,784 ( 0.00%)      pub fn next_universe(self) -> UniverseIndex {
        .                   UniverseIndex::from_u32(self.private.checked_add(1).unwrap())
   23,352 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` can name a name from `other` -- in other words,
        .               /// if the set of names in `self` is a superset of those in
        .               /// `other` (`self >= other`).
        .               pub fn can_name(self, other: UniverseIndex) -> bool {
    6,928 ( 0.00%)          self.private >= other.private
    3,464 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` cannot name some names from `other` -- in other
        .               /// words, if the set of names in `self` is a strict subset of
        .               /// those in `other` (`self < other`).
        .               pub fn cannot_name(self, other: UniverseIndex) -> bool {
        .                   self.private < other.private
        .               }
        .           }
-- line 1116 ----------------------------------------
-- line 1194 ----------------------------------------
        .           /// aren't allowed to call that query: it is equal to `type_of(const_param)` which is
        .           /// trivial to compute.
        .           ///
        .           /// If we now want to use that constant in a place which potentionally needs its type
        .           /// we also pass the type of its `const_param`. This is the point of `WithOptConstParam`,
        .           /// except that instead of a `Ty` we bundle the `DefId` of the const parameter.
        .           /// Meaning that we need to use `type_of(const_param_did)` if `const_param_did` is `Some`
        .           /// to get the type of `did`.
    1,612 ( 0.00%)  #[derive(Copy, Clone, Debug, TypeFoldable, Lift, TyEncodable, TyDecodable)]
        .           #[derive(PartialEq, Eq, PartialOrd, Ord)]
        .           #[derive(Hash, HashStable)]
        .           pub struct WithOptConstParam<T> {
    1,916 ( 0.00%)      pub did: T,
        .               /// The `DefId` of the corresponding generic parameter in case `did` is
        .               /// a const argument.
        .               ///
        .               /// Note that even if `did` is a const argument, this may still be `None`.
        .               /// All queries taking `WithOptConstParam` start by calling `tcx.opt_const_param_of(def.did)`
        .               /// to potentially update `param_did` in the case it is `None`.
    4,845 ( 0.00%)      pub const_param_did: Option<DefId>,
        .           }
        .           
        .           impl<T> WithOptConstParam<T> {
        .               /// Creates a new `WithOptConstParam` setting `const_param_did` to `None`.
        .               #[inline(always)]
        .               pub fn unknown(did: T) -> WithOptConstParam<T> {
        .                   WithOptConstParam { did, const_param_did: None }
    3,628 ( 0.00%)      }
        .           }
        .           
        .           impl WithOptConstParam<LocalDefId> {
        .               /// Returns `Some((did, param_did))` if `def_id` is a const argument,
        .               /// `None` otherwise.
        .               #[inline(always)]
        .               pub fn try_lookup(did: LocalDefId, tcx: TyCtxt<'_>) -> Option<(LocalDefId, DefId)> {
        .                   tcx.opt_const_param_of(did).map(|param_did| (did, param_did))
        .               }
        .           
        .               /// In case `self` is unknown but `self.did` is a const argument, this returns
        .               /// a `WithOptConstParam` with the correct `const_param_did`.
        .               #[inline(always)]
        .               pub fn try_upgrade(self, tcx: TyCtxt<'_>) -> Option<WithOptConstParam<LocalDefId>> {
      421 ( 0.00%)          if self.const_param_did.is_none() {
      673 ( 0.00%)              if let const_param_did @ Some(_) = tcx.opt_const_param_of(self.did) {
        .                           return Some(WithOptConstParam { did: self.did, const_param_did });
        .                       }
        .                   }
        .           
        .                   None
        .               }
        .           
        .               pub fn to_global(self) -> WithOptConstParam<DefId> {
        .                   WithOptConstParam { did: self.did.to_def_id(), const_param_did: self.const_param_did }
      100 ( 0.00%)      }
        .           
      172 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
      378 ( 0.00%)          if let Some(did) = self.const_param_did { did } else { self.did.to_def_id() }
       43 ( 0.00%)      }
        .           }
        .           
        .           impl WithOptConstParam<DefId> {
      309 ( 0.00%)      pub fn as_local(self) -> Option<WithOptConstParam<LocalDefId>> {
        .                   self.did
        .                       .as_local()
        .                       .map(|did| WithOptConstParam { did, const_param_did: self.const_param_did })
      309 ( 0.00%)      }
        .           
        .               pub fn as_const_arg(self) -> Option<(LocalDefId, DefId)> {
    1,174 ( 0.00%)          if let Some(param_did) = self.const_param_did {
      468 ( 0.00%)              if let Some(did) = self.did.as_local() {
        .                           return Some((did, param_did));
        .                       }
        .                   }
        .           
        .                   None
      714 ( 0.00%)      }
        .           
        .               pub fn is_local(self) -> bool {
        .                   self.did.is_local()
        .               }
        .           
      150 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
        .                   self.const_param_did.unwrap_or(self.did)
      150 ( 0.00%)      }
        .           }
        .           
        .           /// When type checking, we use the `ParamEnv` to track
        .           /// details about the set of where-clauses that are in scope at this
        .           /// particular point.
        .           #[derive(Copy, Clone, Hash, PartialEq, Eq)]
        .           pub struct ParamEnv<'tcx> {
        .               /// This packs both caller bounds and the reveal enum into one pointer.
-- line 1285 ----------------------------------------
-- line 1302 ----------------------------------------
        .               reveal: traits::Reveal,
        .               constness: hir::Constness,
        .           }
        .           
        .           unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {
        .               const BITS: usize = 2;
        .               #[inline]
        .               fn into_usize(self) -> usize {
   17,188 ( 0.00%)          match self {
        .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } => 0,
        .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst } => 1,
        .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const } => 2,
        .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::Const } => 3,
        .                   }
        .               }
        .               #[inline]
        .               unsafe fn from_usize(ptr: usize) -> Self {
  159,128 ( 0.03%)          match ptr {
        .                       0 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },
        .                       1 => Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst },
        .                       2 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const },
        .                       3 => Self { reveal: traits::Reveal::All, constness: hir::Constness::Const },
        .                       _ => std::hint::unreachable_unchecked(),
        .                   }
        .               }
        .           }
-- line 1327 ----------------------------------------
-- line 1405 ----------------------------------------
        .               pub fn new(
        .                   caller_bounds: &'tcx List<Predicate<'tcx>>,
        .                   reveal: Reveal,
        .                   constness: hir::Constness,
        .               ) -> Self {
        .                   ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, ParamTag { reveal, constness }) }
        .               }
        .           
       28 ( 0.00%)      pub fn with_user_facing(mut self) -> Self {
        .                   self.packed.set_tag(ParamTag { reveal: Reveal::UserFacing, ..self.packed.tag() });
        .                   self
       28 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn with_constness(mut self, constness: hir::Constness) -> Self {
        .                   self.packed.set_tag(ParamTag { constness, ..self.packed.tag() });
        .                   self
        .               }
        .           
        .               #[inline]
-- line 1424 ----------------------------------------
-- line 1430 ----------------------------------------
        .               #[inline]
        .               pub fn without_const(mut self) -> Self {
        .                   self.packed.set_tag(ParamTag { constness: hir::Constness::NotConst, ..self.packed.tag() });
        .                   self
        .               }
        .           
        .               #[inline]
        .               pub fn remap_constness_with(&mut self, mut constness: ty::BoundConstness) {
    4,484 ( 0.00%)          *self = self.with_constness(constness.and(self.constness()))
        .               }
        .           
        .               /// Returns a new parameter environment with the same clauses, but
        .               /// which "reveals" the true results of projections in all cases
        .               /// (even for associated types that are specializable). This is
        .               /// the desired behavior during codegen and certain other special
        .               /// contexts; normally though we want to use `Reveal::UserFacing`,
        .               /// which is the default.
        .               /// All opaque types in the caller_bounds of the `ParamEnv`
        .               /// will be normalized to their underlying types.
        .               /// See PR #65989 and issue #65918 for more details
    2,096 ( 0.00%)      pub fn with_reveal_all_normalized(self, tcx: TyCtxt<'tcx>) -> Self {
        .                   if self.packed.tag().reveal == traits::Reveal::All {
        .                       return self;
        .                   }
        .           
        .                   ParamEnv::new(
        .                       tcx.normalize_opaque_types(self.caller_bounds()),
        .                       Reveal::All,
        .                       self.constness(),
        .                   )
    2,358 ( 0.00%)      }
        .           
        .               /// Returns this same environment but with no caller bounds.
        .               #[inline]
        .               pub fn without_caller_bounds(self) -> Self {
        .                   Self::new(List::empty(), self.reveal(), self.constness())
        .               }
        .           
        .               /// Creates a suitable environment in which to perform trait
-- line 1468 ----------------------------------------
-- line 1472 ----------------------------------------
        .               /// pair it with the empty environment. This improves caching and is generally
        .               /// invisible.
        .               ///
        .               /// N.B., we preserve the environment when type-checking because it
        .               /// is possible for the user to have wacky where-clauses like
        .               /// `where Box<u32>: Copy`, which are clearly never
        .               /// satisfiable. We generally want to behave as if they were true,
        .               /// although the surrounding function is never reachable.
   19,839 ( 0.00%)      pub fn and<T: TypeFoldable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {
        .                   match self.reveal() {
        .                       Reveal::UserFacing => ParamEnvAnd { param_env: self, value },
        .           
        .                       Reveal::All => {
      510 ( 0.00%)                  if value.is_global() {
        .                               ParamEnvAnd { param_env: self.without_caller_bounds(), value }
        .                           } else {
        .                               ParamEnvAnd { param_env: self, value }
        .                           }
        .                       }
        .                   }
   18,747 ( 0.00%)      }
        .           }
        .           
        .           // FIXME(ecstaticmorse): Audit all occurrences of `without_const().to_predicate(tcx)` to ensure that
        .           // the constness of trait bounds is being propagated correctly.
        .           impl<'tcx> PolyTraitRef<'tcx> {
        .               #[inline]
        .               pub fn with_constness(self, constness: BoundConstness) -> PolyTraitPredicate<'tcx> {
    1,320 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
        .                       trait_ref,
        .                       constness,
        .                       polarity: ty::ImplPolarity::Positive,
        .                   })
        .               }
        .               #[inline]
        .               pub fn without_const(self) -> PolyTraitPredicate<'tcx> {
        .                   self.with_constness(BoundConstness::NotConst)
        .               }
        .           }
        .           
      569 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]
        .           pub struct ParamEnvAnd<'tcx, T> {
    4,688 ( 0.00%)      pub param_env: ParamEnv<'tcx>,
   94,525 ( 0.02%)      pub value: T,
        .           }
        .           
        .           impl<'tcx, T> ParamEnvAnd<'tcx, T> {
        .               pub fn into_parts(self) -> (ParamEnv<'tcx>, T) {
        .                   (self.param_env, self.value)
        .               }
        .           
        .               #[inline]
        .               pub fn without_const(mut self) -> Self {
        .                   self.param_env = self.param_env.without_const();
    1,822 ( 0.00%)          self
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, T> HashStable<StableHashingContext<'a>> for ParamEnvAnd<'tcx, T>
        .           where
        .               T: HashStable<StableHashingContext<'a>>,
        .           {
        .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
-- line 1534 ----------------------------------------
-- line 1542 ----------------------------------------
        .           #[derive(Copy, Clone, Debug, HashStable)]
        .           pub struct Destructor {
        .               /// The `DefId` of the destructor method
        .               pub did: DefId,
        .               /// The constness of the destructor method
        .               pub constness: hir::Constness,
        .           }
        .           
      139 ( 0.00%)  bitflags! {
      441 ( 0.00%)      #[derive(HashStable, TyEncodable, TyDecodable)]
        .               pub struct VariantFlags: u32 {
        .                   const NO_VARIANT_FLAGS        = 0;
        .                   /// Indicates whether the field list of this variant is `#[non_exhaustive]`.
        .                   const IS_FIELD_LIST_NON_EXHAUSTIVE = 1 << 0;
        .                   /// Indicates whether this variant was obtained as part of recovering from
        .                   /// a syntactic error. May be incomplete or bogus.
        .                   const IS_RECOVERED = 1 << 1;
        .               }
        .           }
        .           
        .           /// Definition of a variant -- a struct's fields or an enum variant.
  120,291 ( 0.02%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
        .           pub struct VariantDef {
        .               /// `DefId` that identifies the variant itself.
        .               /// If this variant belongs to a struct or union, then this is a copy of its `DefId`.
        .               pub def_id: DefId,
        .               /// `DefId` that identifies the variant's constructor.
        .               /// If this variant is a struct variant, then this is `None`.
        .               pub ctor_def_id: Option<DefId>,
        .               /// Variant or struct name.
-- line 1571 ----------------------------------------
-- line 1592 ----------------------------------------
        .               /// `parent_did` is the `DefId` of the `AdtDef` representing the enum or struct that
        .               /// owns this variant. It is used for checking if a struct has `#[non_exhaustive]` w/out having
        .               /// to go through the redirect of checking the ctor's attributes - but compiling a small crate
        .               /// requires loading the `AdtDef`s for all the structs in the universe (e.g., coherence for any
        .               /// built-in trait), and we do not want to load attributes twice.
        .               ///
        .               /// If someone speeds up attribute loading to not be a performance concern, they can
        .               /// remove this hack and use the constructor `DefId` everywhere.
      392 ( 0.00%)      pub fn new(
        .                   name: Symbol,
        .                   variant_did: Option<DefId>,
        .                   ctor_def_id: Option<DefId>,
        .                   discr: VariantDiscr,
        .                   fields: Vec<FieldDef>,
        .                   ctor_kind: CtorKind,
        .                   adt_kind: AdtKind,
        .                   parent_did: DefId,
-- line 1608 ----------------------------------------
-- line 1611 ----------------------------------------
        .               ) -> Self {
        .                   debug!(
        .                       "VariantDef::new(name = {:?}, variant_did = {:?}, ctor_def_id = {:?}, discr = {:?},
        .                        fields = {:?}, ctor_kind = {:?}, adt_kind = {:?}, parent_did = {:?})",
        .                       name, variant_did, ctor_def_id, discr, fields, ctor_kind, adt_kind, parent_did,
        .                   );
        .           
        .                   let mut flags = VariantFlags::NO_VARIANT_FLAGS;
       49 ( 0.00%)          if is_field_list_non_exhaustive {
        .                       flags |= VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE;
        .                   }
        .           
      147 ( 0.00%)          if recovered {
        .                       flags |= VariantFlags::IS_RECOVERED;
        .                   }
        .           
      441 ( 0.00%)          VariantDef {
        .                       def_id: variant_did.unwrap_or(parent_did),
        .                       ctor_def_id,
        .                       name,
        .                       discr,
      196 ( 0.00%)              fields,
        .                       ctor_kind,
        .                       flags,
        .                   }
      196 ( 0.00%)      }
        .           
        .               /// Is this field list non-exhaustive?
        .               #[inline]
        .               pub fn is_field_list_non_exhaustive(&self) -> bool {
        .                   self.flags.intersects(VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE)
        .               }
        .           
        .               /// Was this variant obtained as part of recovering from a syntactic error?
        .               #[inline]
        .               pub fn is_recovered(&self) -> bool {
        .                   self.flags.intersects(VariantFlags::IS_RECOVERED)
        .               }
        .           
        .               /// Computes the `Ident` of this variant by looking up the `Span`
       21 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
       12 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.def_id).unwrap())
       27 ( 0.00%)      }
        .           }
        .           
   62,800 ( 0.01%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]
        .           pub enum VariantDiscr {
        .               /// Explicit value for this variant, i.e., `X = 123`.
        .               /// The `DefId` corresponds to the embedded constant.
        .               Explicit(DefId),
        .           
        .               /// The previous variant's discriminant plus one.
        .               /// For efficiency reasons, the distance from the
        .               /// last `Explicit` discriminant is being stored,
        .               /// or `0` for the first variant, if it has none.
        .               Relative(u32),
        .           }
        .           
  164,661 ( 0.03%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
        .           pub struct FieldDef {
        .               pub did: DefId,
        .               pub name: Symbol,
        .               pub vis: Visibility,
        .           }
        .           
       25 ( 0.00%)  bitflags! {
        .               #[derive(TyEncodable, TyDecodable, Default, HashStable)]
        .               pub struct ReprFlags: u8 {
        .                   const IS_C               = 1 << 0;
        .                   const IS_SIMD            = 1 << 1;
        .                   const IS_TRANSPARENT     = 1 << 2;
        .                   // Internal only for now. If true, don't reorder fields.
        .                   const IS_LINEAR          = 1 << 3;
        .                   // If true, don't expose any niche to type's context.
-- line 1684 ----------------------------------------
-- line 1689 ----------------------------------------
        .                   // Any of these flags being set prevent field reordering optimisation.
        .                   const IS_UNOPTIMISABLE   = ReprFlags::IS_C.bits
        .                                            | ReprFlags::IS_SIMD.bits
        .                                            | ReprFlags::IS_LINEAR.bits;
        .               }
        .           }
        .           
        .           /// Represents the repr options provided by the user,
   91,496 ( 0.02%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, TyEncodable, TyDecodable, Default, HashStable)]
        .           pub struct ReprOptions {
        .               pub int: Option<attr::IntType>,
        .               pub align: Option<Align>,
        .               pub pack: Option<Align>,
        .               pub flags: ReprFlags,
        .               /// The seed to be used for randomizing a type's layout
        .               ///
        .               /// Note: This could technically be a `[u8; 16]` (a `u128`) which would
-- line 1705 ----------------------------------------
-- line 1706 ----------------------------------------
        .               /// be the "most accurate" hash as it'd encompass the item and crate
        .               /// hash without loss, but it does pay the price of being larger.
        .               /// Everything's a tradeoff, a `u64` seed should be sufficient for our
        .               /// purposes (primarily `-Z randomize-layout`)
        .               pub field_shuffle_seed: u64,
        .           }
        .           
        .           impl ReprOptions {
       91 ( 0.00%)      pub fn new(tcx: TyCtxt<'_>, did: DefId) -> ReprOptions {
        .                   let mut flags = ReprFlags::empty();
        .                   let mut size = None;
        .                   let mut max_align: Option<Align> = None;
        .                   let mut min_pack: Option<Align> = None;
        .           
        .                   // Generate a deterministically-derived seed from the item's path hash
        .                   // to allow for cross-crate compilation to actually work
        .                   let mut field_shuffle_seed = tcx.def_path_hash(did).0.to_smaller_hash();
        .           
        .                   // If the user defined a custom seed for layout randomization, xor the item's
        .                   // path hash with the user defined seed, this will allowing determinism while
        .                   // still allowing users to further randomize layout generation for e.g. fuzzing
       21 ( 0.00%)          if let Some(user_seed) = tcx.sess.opts.debugging_opts.layout_seed {
        .                       field_shuffle_seed ^= user_seed;
        .                   }
        .           
       28 ( 0.00%)          for attr in tcx.get_attrs(did).iter() {
       10 ( 0.00%)              for r in attr::find_repr_attrs(&tcx.sess, attr) {
        .                           flags.insert(match r {
        .                               attr::ReprC => ReprFlags::IS_C,
        .                               attr::ReprPacked(pack) => {
        .                                   let pack = Align::from_bytes(pack as u64).unwrap();
        .                                   min_pack = Some(if let Some(min_pack) = min_pack {
        .                                       min_pack.min(pack)
        .                                   } else {
        .                                       pack
-- line 1740 ----------------------------------------
-- line 1753 ----------------------------------------
        .                                   ReprFlags::empty()
        .                               }
        .                           });
        .                       }
        .                   }
        .           
        .                   // If `-Z randomize-layout` was enabled for the type definition then we can
        .                   // consider performing layout randomization
       56 ( 0.00%)          if tcx.sess.opts.debugging_opts.randomize_layout {
        .                       flags.insert(ReprFlags::RANDOMIZE_LAYOUT);
        .                   }
        .           
        .                   // This is here instead of layout because the choice must make it into metadata.
       42 ( 0.00%)          if !tcx.consider_optimizing(|| format!("Reorder fields of {:?}", tcx.def_path_str(did))) {
        .                       flags.insert(ReprFlags::IS_LINEAR);
        .                   }
        .           
       14 ( 0.00%)          Self { int: size, align: max_align, pack: min_pack, flags, field_shuffle_seed }
      196 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn simd(&self) -> bool {
        .                   self.flags.contains(ReprFlags::IS_SIMD)
        .               }
        .           
        .               #[inline]
        .               pub fn c(&self) -> bool {
-- line 1779 ----------------------------------------
-- line 1798 ----------------------------------------
        .               #[inline]
        .               pub fn hide_niche(&self) -> bool {
        .                   self.flags.contains(ReprFlags::HIDE_NICHE)
        .               }
        .           
        .               /// Returns the discriminant type, given these `repr` options.
        .               /// This must only be called on enums!
        .               pub fn discr_type(&self) -> attr::IntType {
       43 ( 0.00%)          self.int.unwrap_or(attr::SignedInt(ast::IntTy::Isize))
       29 ( 0.00%)      }
        .           
        .               /// Returns `true` if this `#[repr()]` should inhabit "smart enum
        .               /// layout" optimizations, such as representing `Foo<&T>` as a
        .               /// single pointer.
        .               pub fn inhibit_enum_layout_opt(&self) -> bool {
        .                   self.c() || self.int.is_some()
        .               }
        .           
        .               /// Returns `true` if this `#[repr()]` should inhibit struct field reordering
        .               /// optimizations, such as with `repr(C)`, `repr(packed(1))`, or `repr(<int>)`.
        .               pub fn inhibit_struct_field_reordering_opt(&self) -> bool {
        4 ( 0.00%)          if let Some(pack) = self.pack {
        .                       if pack.bytes() == 1 {
        .                           return true;
        .                       }
        .                   }
        .           
        8 ( 0.00%)          self.flags.intersects(ReprFlags::IS_UNOPTIMISABLE) || self.int.is_some()
        .               }
        .           
        .               /// Returns `true` if this type is valid for reordering and `-Z randomize-layout`
        .               /// was enabled for its declaration crate
        .               pub fn can_randomize_type_layout(&self) -> bool {
        2 ( 0.00%)          !self.inhibit_struct_field_reordering_opt()
        .                       && self.flags.contains(ReprFlags::RANDOMIZE_LAYOUT)
        .               }
        .           
        .               /// Returns `true` if this `#[repr()]` should inhibit union ABI optimisations.
        .               pub fn inhibit_union_abi_opt(&self) -> bool {
        .                   self.c()
        .               }
        .           }
        .           
        .           impl<'tcx> FieldDef {
        .               /// Returns the type of this field. The resulting type is not normalized. The `subst` is
        .               /// typically obtained via the second field of [`TyKind::Adt`].
    6,307 ( 0.00%)      pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {
    1,802 ( 0.00%)          tcx.type_of(self.did).subst(tcx, subst)
    7,208 ( 0.00%)      }
        .           
        .               /// Computes the `Ident` of this variant by looking up the `Span`
    3,773 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
    2,156 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.did).unwrap())
    4,851 ( 0.00%)      }
        .           }
        .           
        .           pub type Attributes<'tcx> = &'tcx [ast::Attribute];
        .           
        .           #[derive(Debug, PartialEq, Eq)]
        .           pub enum ImplOverlapKind {
        .               /// These impls are always allowed to overlap.
        .               Permitted {
-- line 1859 ----------------------------------------
-- line 1891 ----------------------------------------
        .               /// marker traits.
        .               /// 4. Neither of the impls can have any where-clauses.
        .               ///
        .               /// Once `traitobject` 0.1.0 is no longer an active concern, this hack can be removed.
        .               Issue33140,
        .           }
        .           
        .           impl<'tcx> TyCtxt<'tcx> {
    5,472 ( 0.00%)      pub fn typeck_body(self, body: hir::BodyId) -> &'tcx TypeckResults<'tcx> {
    1,368 ( 0.00%)          self.typeck(self.hir().body_owner_def_id(body))
    5,472 ( 0.00%)      }
        .           
        .               pub fn provided_trait_methods(self, id: DefId) -> impl 'tcx + Iterator<Item = &'tcx AssocItem> {
        .                   self.associated_items(id)
        .                       .in_definition_order()
        .                       .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())
        .               }
        .           
        .               fn item_name_from_hir(self, def_id: DefId) -> Option<Ident> {
-- line 1909 ----------------------------------------
-- line 1947 ----------------------------------------
        .               ///
        .               /// See [`item_name`][Self::item_name] for more information.
        .               pub fn opt_item_name(self, def_id: DefId) -> Option<Ident> {
        .                   // Look at the HIR first so the span will be correct if this is a local item.
        .                   self.item_name_from_hir(def_id)
        .                       .or_else(|| self.item_name_from_def_id(def_id).map(Ident::with_dummy_span))
        .               }
        .           
   78,020 ( 0.01%)      pub fn opt_associated_item(self, def_id: DefId) -> Option<&'tcx AssocItem> {
   31,208 ( 0.01%)          if let DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy = self.def_kind(def_id) {
        .                       Some(self.associated_item(def_id))
        .                   } else {
        .                       None
        .                   }
   70,218 ( 0.01%)      }
        .           
      673 ( 0.00%)      pub fn field_index(self, hir_id: hir::HirId, typeck_results: &TypeckResults<'_>) -> usize {
        .                   typeck_results.field_indices().get(hir_id).cloned().expect("no index for a field")
    1,346 ( 0.00%)      }
        .           
        .               pub fn find_field_index(self, ident: Ident, variant: &VariantDef) -> Option<usize> {
        .                   variant
        .                       .fields
        .                       .iter()
        .                       .position(|field| self.hygienic_eq(ident, field.ident(self), variant.def_id))
        .               }
        .           
        .               /// Returns `true` if the impls are the same polarity and the trait either
        .               /// has no items or is annotated `#[marker]` and prevents item overrides.
   13,000 ( 0.00%)      pub fn impls_are_allowed_to_overlap(
        .                   self,
        .                   def_id1: DefId,
        .                   def_id2: DefId,
        .               ) -> Option<ImplOverlapKind> {
        .                   // If either trait impl references an error, they're allowed to overlap,
        .                   // as one of them essentially doesn't exist.
        .                   if self.impl_trait_ref(def_id1).map_or(false, |tr| tr.references_error())
    2,600 ( 0.00%)              || self.impl_trait_ref(def_id2).map_or(false, |tr| tr.references_error())
        .                   {
        .                       return Some(ImplOverlapKind::Permitted { marker: false });
        .                   }
        .           
   13,000 ( 0.00%)          match (self.impl_polarity(def_id1), self.impl_polarity(def_id2)) {
        .                       (ImplPolarity::Reservation, _) | (_, ImplPolarity::Reservation) => {
        .                           // `#[rustc_reservation_impl]` impls don't overlap with anything
        .                           debug!(
        .                               "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (reservations)",
        .                               def_id1, def_id2
        .                           );
        .                           return Some(ImplOverlapKind::Permitted { marker: false });
        .                       }
-- line 1997 ----------------------------------------
-- line 2004 ----------------------------------------
        .                           );
        .                           return None;
        .                       }
        .                       (ImplPolarity::Positive, ImplPolarity::Positive)
        .                       | (ImplPolarity::Negative, ImplPolarity::Negative) => {}
        .                   };
        .           
        .                   let is_marker_overlap = {
   13,000 ( 0.00%)              let is_marker_impl = |def_id: DefId| -> bool {
    3,900 ( 0.00%)                  let trait_ref = self.impl_trait_ref(def_id);
    3,900 ( 0.00%)                  trait_ref.map_or(false, |tr| self.trait_def(tr.def_id).is_marker)
   10,400 ( 0.00%)              };
    5,200 ( 0.00%)              is_marker_impl(def_id1) && is_marker_impl(def_id2)
        .                   };
        .           
        .                   if is_marker_overlap {
        .                       debug!(
        .                           "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (marker overlap)",
        .                           def_id1, def_id2
        .                       );
        .                       Some(ImplOverlapKind::Permitted { marker: true })
        .                   } else {
    5,200 ( 0.00%)              if let Some(self_ty1) = self.issue33140_self_ty(def_id1) {
        .                           if let Some(self_ty2) = self.issue33140_self_ty(def_id2) {
        .                               if self_ty1 == self_ty2 {
        .                                   debug!(
        .                                       "impls_are_allowed_to_overlap({:?}, {:?}) - issue #33140 HACK",
        .                                       def_id1, def_id2
        .                                   );
        .                                   return Some(ImplOverlapKind::Issue33140);
        .                               } else {
-- line 2034 ----------------------------------------
-- line 2038 ----------------------------------------
        .                                   );
        .                               }
        .                           }
        .                       }
        .           
        .                       debug!("impls_are_allowed_to_overlap({:?}, {:?}) = None", def_id1, def_id2);
        .                       None
        .                   }
   10,400 ( 0.00%)      }
        .           
        .               /// Returns `ty::VariantDef` if `res` refers to a struct,
        .               /// or variant or their constructors, panics otherwise.
        .               pub fn expect_variant_res(self, res: Res) -> &'tcx VariantDef {
        .                   match res {
        .                       Res::Def(DefKind::Variant, did) => {
        .                           let enum_did = self.parent(did).unwrap();
        .                           self.adt_def(enum_did).variant_with_id(did)
-- line 2054 ----------------------------------------
-- line 2091 ----------------------------------------
        .                       | ty::InstanceDef::Virtual(..)
        .                       | ty::InstanceDef::ClosureOnceShim { .. }
        .                       | ty::InstanceDef::DropGlue(..)
        .                       | ty::InstanceDef::CloneShim(..) => self.mir_shims(instance),
        .                   }
        .               }
        .           
        .               /// Gets the attributes of a definition.
   30,860 ( 0.01%)      pub fn get_attrs(self, did: DefId) -> Attributes<'tcx> {
    9,258 ( 0.00%)          if let Some(did) = did.as_local() {
    8,370 ( 0.00%)              self.hir().attrs(self.hir().local_def_id_to_hir_id(did))
        .                   } else {
        .                       self.item_attrs(did)
        .                   }
   24,688 ( 0.00%)      }
        .           
        .               /// Determines whether an item is annotated with an attribute.
    3,828 ( 0.00%)      pub fn has_attr(self, did: DefId, attr: Symbol) -> bool {
   11,520 ( 0.00%)          self.sess.contains_name(&self.get_attrs(did), attr)
        .               }
        .           
        .               /// Determines whether an item is annotated with `doc(hidden)`.
      126 ( 0.00%)      pub fn is_doc_hidden(self, did: DefId) -> bool {
       18 ( 0.00%)          self.get_attrs(did)
        .                       .iter()
        .                       .filter_map(|attr| if attr.has_name(sym::doc) { attr.meta_item_list() } else { None })
        .                       .any(|items| items.iter().any(|item| item.has_name(sym::hidden)))
      144 ( 0.00%)      }
        .           
        .               /// Returns `true` if this is an `auto trait`.
    2,387 ( 0.00%)      pub fn trait_is_auto(self, trait_def_id: DefId) -> bool {
      341 ( 0.00%)          self.trait_def(trait_def_id).has_auto_impl
    2,728 ( 0.00%)      }
        .           
        .               /// Returns layout of a generator. Layout might be unavailable if the
        .               /// generator is tainted by errors.
        .               pub fn generator_layout(self, def_id: DefId) -> Option<&'tcx GeneratorLayout<'tcx>> {
        .                   self.optimized_mir(def_id).generator_layout()
        .               }
        .           
        .               /// Given the `DefId` of an impl, returns the `DefId` of the trait it implements.
        .               /// If it implements no trait, returns `None`.
    2,310 ( 0.00%)      pub fn trait_id_of_impl(self, def_id: DefId) -> Option<DefId> {
        .                   self.impl_trait_ref(def_id).map(|tr| tr.def_id)
    2,970 ( 0.00%)      }
        .           
        .               /// If the given defid describes a method belonging to an impl, returns the
        .               /// `DefId` of the impl that the method belongs to; otherwise, returns `None`.
       40 ( 0.00%)      pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {
      160 ( 0.00%)          self.opt_associated_item(def_id).and_then(|trait_item| match trait_item.container {
        .                       TraitContainer(_) => None,
        .                       ImplContainer(def_id) => Some(def_id),
        .                   })
       80 ( 0.00%)      }
        .           
        .               /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`
        .               /// with the name of the crate containing the impl.
        .               pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> {
        .                   if let Some(impl_did) = impl_did.as_local() {
        .                       Ok(self.def_span(impl_did))
        .                   } else {
        .                       Err(self.crate_name(impl_did.krate))
        .                   }
        .               }
        .           
        .               /// Hygienically compares a use-site name (`use_name`) for a field or an associated item with
        .               /// its supposed definition name (`def_name`). The method also needs `DefId` of the supposed
        .               /// definition's parent/scope to perform comparison.
    4,112 ( 0.00%)      pub fn hygienic_eq(self, use_name: Ident, def_name: Ident, def_parent_def_id: DefId) -> bool {
        .                   // We could use `Ident::eq` here, but we deliberately don't. The name
        .                   // comparison fails frequently, and we want to avoid the expensive
        .                   // `normalize_to_macros_2_0()` calls required for the span comparison whenever possible.
      514 ( 0.00%)          use_name.name == def_name.name
    1,542 ( 0.00%)              && use_name
        .                           .span
        .                           .ctxt()
        .                           .hygienic_eq(def_name.span.ctxt(), self.expn_that_defined(def_parent_def_id))
    4,112 ( 0.00%)      }
        .           
    1,584 ( 0.00%)      pub fn adjust_ident(self, mut ident: Ident, scope: DefId) -> Ident {
      352 ( 0.00%)          ident.span.normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope));
      352 ( 0.00%)          ident
    1,408 ( 0.00%)      }
        .           
    5,544 ( 0.00%)      pub fn adjust_ident_and_get_scope(
        .                   self,
        .                   mut ident: Ident,
        .                   scope: DefId,
        .                   block: hir::HirId,
        .               ) -> (Ident, DefId) {
      616 ( 0.00%)          let scope = ident
        .                       .span
        .                       .normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope))
        .                       .and_then(|actual_expansion| actual_expansion.expn_data().parent_module)
    2,464 ( 0.00%)              .unwrap_or_else(|| self.parent_module(block).to_def_id());
    3,696 ( 0.00%)          (ident, scope)
    5,544 ( 0.00%)      }
        .           
        .               pub fn is_object_safe(self, key: DefId) -> bool {
        .                   self.object_safety_violations(key).is_empty()
        .               }
        .           }
        .           
        .           /// Yields the parent function's `LocalDefId` if `def_id` is an `impl Trait` definition.
    1,920 ( 0.00%)  pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<LocalDefId> {
    1,920 ( 0.00%)      let def_id = def_id.as_local()?;
      936 ( 0.00%)      if let Node::Item(item) = tcx.hir().get_by_def_id(def_id) {
      312 ( 0.00%)          if let hir::ItemKind::OpaqueTy(ref opaque_ty) = item.kind {
        .                       return match opaque_ty.origin {
        .                           hir::OpaqueTyOrigin::FnReturn(parent) | hir::OpaqueTyOrigin::AsyncFn(parent) => {
        .                               Some(parent)
        .                           }
        .                           hir::OpaqueTyOrigin::TyAlias => None,
        .                       };
        .                   }
        .               }
        .               None
    2,560 ( 0.00%)  }
        .           
        .           pub fn int_ty(ity: ast::IntTy) -> IntTy {
        .               match ity {
        .                   ast::IntTy::Isize => IntTy::Isize,
        .                   ast::IntTy::I8 => IntTy::I8,
        .                   ast::IntTy::I16 => IntTy::I16,
        .                   ast::IntTy::I32 => IntTy::I32,
        .                   ast::IntTy::I64 => IntTy::I64,
-- line 2216 ----------------------------------------
-- line 2231 ----------------------------------------
        .           
        .           pub fn float_ty(fty: ast::FloatTy) -> FloatTy {
        .               match fty {
        .                   ast::FloatTy::F32 => FloatTy::F32,
        .                   ast::FloatTy::F64 => FloatTy::F64,
        .               }
        .           }
        .           
      378 ( 0.00%)  pub fn ast_int_ty(ity: IntTy) -> ast::IntTy {
        .               match ity {
        .                   IntTy::Isize => ast::IntTy::Isize,
        .                   IntTy::I8 => ast::IntTy::I8,
        .                   IntTy::I16 => ast::IntTy::I16,
        .                   IntTy::I32 => ast::IntTy::I32,
        .                   IntTy::I64 => ast::IntTy::I64,
        .                   IntTy::I128 => ast::IntTy::I128,
        .               }
      378 ( 0.00%)  }
        .           
        .           pub fn ast_uint_ty(uty: UintTy) -> ast::UintTy {
        .               match uty {
        .                   UintTy::Usize => ast::UintTy::Usize,
        .                   UintTy::U8 => ast::UintTy::U8,
        .                   UintTy::U16 => ast::UintTy::U16,
        .                   UintTy::U32 => ast::UintTy::U32,
        .                   UintTy::U64 => ast::UintTy::U64,
-- line 2256 ----------------------------------------
-- line 2262 ----------------------------------------
        .               closure::provide(providers);
        .               context::provide(providers);
        .               erase_regions::provide(providers);
        .               layout::provide(providers);
        .               util::provide(providers);
        .               print::provide(providers);
        .               super::util::bug::provide(providers);
        .               super::middle::provide(providers);
        8 ( 0.00%)      *providers = ty::query::Providers {
        .                   trait_impls_of: trait_def::trait_impls_of_provider,
        .                   type_uninhabited_from: inhabitedness::type_uninhabited_from,
        .                   const_param_default: consts::const_param_default,
        .                   vtable_allocation: vtable::vtable_allocation_provider,
        .                   ..*providers
        .               };
        1 ( 0.00%)  }
        .           
        .           /// A map for the local crate mapping each type to a vector of its
        .           /// inherent impls. This is not meant to be used outside of coherence;
        .           /// rather, you should request the vector for a specific type via
        .           /// `tcx.inherent_impls(def_id)` so as to minimize your dependencies
        .           /// (constructing this map requires touching the entire crate).
        .           #[derive(Clone, Debug, Default, HashStable)]
        .           pub struct CrateInherentImpls {
-- line 2285 ----------------------------------------
-- line 2288 ----------------------------------------
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, HashStable)]
        .           pub struct SymbolName<'tcx> {
        .               /// `&str` gives a consistent ordering, which ensures reproducible builds.
        .               pub name: &'tcx str,
        .           }
        .           
        .           impl<'tcx> SymbolName<'tcx> {
        6 ( 0.00%)      pub fn new(tcx: TyCtxt<'tcx>, name: &str) -> SymbolName<'tcx> {
        .                   SymbolName {
        .                       name: unsafe { str::from_utf8_unchecked(tcx.arena.alloc_slice(name.as_bytes())) },
        .                   }
        8 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> fmt::Display for SymbolName<'tcx> {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   fmt::Display::fmt(&self.name, fmt)
        .               }
        .           }
        .           
-- line 2308 ----------------------------------------

1,072,531 ( 0.19%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs
--------------------------------------------------------------------------------
Ir                 

-- line 12 ----------------------------------------
        .           use rustc_data_structures::sync::Lrc;
        .           use rustc_macros::HashStable_Generic;
        .           use rustc_span::symbol::{kw, sym};
        .           use rustc_span::symbol::{Ident, Symbol};
        .           use rustc_span::{self, edition::Edition, Span, DUMMY_SP};
        .           use std::borrow::Cow;
        .           use std::{fmt, mem};
        .           
    3,848 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum CommentKind {
        .               Line,
        .               Block,
        .           }
        .           
      224 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Hash, Debug, Copy)]
        .           #[derive(HashStable_Generic)]
        .           pub enum BinOpToken {
        .               Plus,
        .               Minus,
        .               Star,
        .               Slash,
        .               Percent,
        .               Caret,
        .               And,
        .               Or,
        .               Shl,
        .               Shr,
        .           }
        .           
        .           /// A delimiter token.
    8,832 ( 0.00%)  #[derive(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Debug, Copy)]
        .           #[derive(HashStable_Generic)]
        .           pub enum DelimToken {
        .               /// A round parenthesis (i.e., `(` or `)`).
        .               Paren,
        .               /// A square bracket (i.e., `[` or `]`).
        .               Bracket,
        .               /// A curly brace (i.e., `{` or `}`).
        .               Brace,
        .               /// An empty delimiter.
        .               NoDelim,
        .           }
        .           
    3,297 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum LitKind {
        .               Bool, // AST only, must never appear in a `Token`
        .               Byte,
        .               Char,
        .               Integer,
        .               Float,
        .               Str,
        .               StrRaw(u16), // raw string delimited by `n` hash symbols
        .               ByteStr,
        .               ByteStrRaw(u16), // raw byte string delimited by `n` hash symbols
        .               Err,
        .           }
        .           
        .           /// A literal token.
   12,064 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub struct Lit {
      258 ( 0.00%)      pub kind: LitKind,
      258 ( 0.00%)      pub symbol: Symbol,
      302 ( 0.00%)      pub suffix: Option<Symbol>,
        .           }
        .           
        .           impl fmt::Display for Lit {
      115 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      207 ( 0.00%)          let Lit { kind, symbol, suffix } = *self;
        .                   match kind {
        .                       Byte => write!(f, "b'{}'", symbol)?,
        .                       Char => write!(f, "'{}'", symbol)?,
        .                       Str => write!(f, "\"{}\"", symbol)?,
        .                       StrRaw(n) => write!(
        .                           f,
        .                           "r{delim}\"{string}\"{delim}",
        .                           delim = "#".repeat(n as usize),
-- line 87 ----------------------------------------
-- line 89 ----------------------------------------
        .                       )?,
        .                       ByteStr => write!(f, "b\"{}\"", symbol)?,
        .                       ByteStrRaw(n) => write!(
        .                           f,
        .                           "br{delim}\"{string}\"{delim}",
        .                           delim = "#".repeat(n as usize),
        .                           string = symbol
        .                       )?,
       69 ( 0.00%)              Integer | Float | Bool | Err => write!(f, "{}", symbol)?,
        .                   }
        .           
       46 ( 0.00%)          if let Some(suffix) = suffix {
        .                       write!(f, "{}", suffix)?;
        .                   }
        .           
        .                   Ok(())
      115 ( 0.00%)      }
        .           }
        .           
        .           impl LitKind {
        .               /// An English article for the literal token kind.
        .               pub fn article(self) -> &'static str {
        .                   match self {
        .                       Integer | Err => "an",
        .                       _ => "a",
-- line 113 ----------------------------------------
-- line 123 ----------------------------------------
        .                       Float => "float",
        .                       Str | StrRaw(..) => "string",
        .                       ByteStr | ByteStrRaw(..) => "byte string",
        .                       Err => "error",
        .                   }
        .               }
        .           
        .               crate fn may_have_suffix(self) -> bool {
       22 ( 0.00%)          matches!(self, Integer | Float | Err)
        .               }
        .           }
        .           
        .           impl Lit {
        .               pub fn new(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> Lit {
        .                   Lit { kind, symbol, suffix }
      324 ( 0.00%)      }
        .           }
        .           
       28 ( 0.00%)  pub fn ident_can_begin_expr(name: Symbol, span: Span, is_raw: bool) -> bool {
       49 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
        .           
       14 ( 0.00%)      !ident_token.is_reserved_ident()
        .                   || ident_token.is_path_segment_keyword()
        .                   || [
        .                       kw::Async,
        .                       kw::Do,
        .                       kw::Box,
        .                       kw::Break,
        .                       kw::Const,
        .                       kw::Continue,
-- line 152 ----------------------------------------
-- line 161 ----------------------------------------
        .                       kw::True,
        .                       kw::Try,
        .                       kw::Unsafe,
        .                       kw::While,
        .                       kw::Yield,
        .                       kw::Static,
        .                   ]
        .                   .contains(&name)
       35 ( 0.00%)  }
        .           
        .           fn ident_can_begin_type(name: Symbol, span: Span, is_raw: bool) -> bool {
      642 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
        .           
      224 ( 0.00%)      !ident_token.is_reserved_ident()
        .                   || ident_token.is_path_segment_keyword()
        .                   || [kw::Underscore, kw::For, kw::Impl, kw::Fn, kw::Unsafe, kw::Extern, kw::Typeof, kw::Dyn]
        .                       .contains(&name)
        .           }
        .           
1,383,909 ( 0.25%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum TokenKind {
        .               /* Expression-operator symbols. */
        .               Eq,
        .               Lt,
        .               Le,
        .               EqEq,
        .               Ne,
        .               Ge,
        .               Gt,
        .               AndAnd,
        .               OrOr,
        .               Not,
        .               Tilde,
   10,899 ( 0.00%)      BinOp(BinOpToken),
       36 ( 0.00%)      BinOpEq(BinOpToken),
        .           
        .               /* Structural symbols */
        .               At,
        .               Dot,
        .               DotDot,
        .               DotDotDot,
        .               DotDotEq,
        .               Comma,
-- line 203 ----------------------------------------
-- line 208 ----------------------------------------
        .               LArrow,
        .               FatArrow,
        .               Pound,
        .               Dollar,
        .               Question,
        .               /// Used by proc macros for representing lifetimes, not generated by lexer right now.
        .               SingleQuote,
        .               /// An opening delimiter (e.g., `{`).
   20,376 ( 0.00%)      OpenDelim(DelimToken),
        .               /// A closing delimiter (e.g., `}`).
    7,752 ( 0.00%)      CloseDelim(DelimToken),
        .           
        .               /* Literals */
    8,071 ( 0.00%)      Literal(Lit),
        .           
        .               /// Identifier token.
        .               /// Do not forget about `NtIdent` when you want to match on identifiers.
        .               /// It's recommended to use `Token::(ident,uninterpolate,uninterpolated_span)` to
        .               /// treat regular and interpolated identifiers in the same way.
    9,477 ( 0.00%)      Ident(Symbol, /* is_raw */ bool),
        .               /// Lifetime identifier token.
        .               /// Do not forget about `NtLifetime` when you want to match on lifetime identifiers.
        .               /// It's recommended to use `Token::(lifetime,uninterpolate,uninterpolated_span)` to
        .               /// treat regular and interpolated lifetime identifiers in the same way.
        .               Lifetime(Symbol),
        .           
      722 ( 0.00%)      Interpolated(Lrc<Nonterminal>),
        .           
        .               /// A doc comment token.
        .               /// `Symbol` is the doc comment's data excluding its "quotes" (`///`, `/**`, etc)
        .               /// similarly to symbols in string literal tokens.
      153 ( 0.00%)      DocComment(CommentKind, ast::AttrStyle, Symbol),
        .           
        .               Eof,
        .           }
        .           
        .           // `TokenKind` is used a lot. Make sure it doesn't unintentionally get bigger.
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           rustc_data_structures::static_assert_size!(TokenKind, 16);
        .           
  144,317 ( 0.03%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub struct Token {
    9,156 ( 0.00%)      pub kind: TokenKind,
       80 ( 0.00%)      pub span: Span,
        .           }
        .           
        .           impl TokenKind {
        .               pub fn lit(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> TokenKind {
        .                   Literal(Lit::new(kind, symbol, suffix))
        .               }
        .           
        .               // An approximation to proc-macro-style single-character operators used by rustc parser.
        .               // If the operator token can be broken into two tokens, the first of which is single-character,
        .               // then this function performs that operation, otherwise it returns `None`.
    1,450 ( 0.00%)      pub fn break_two_token_op(&self) -> Option<(TokenKind, TokenKind)> {
    5,800 ( 0.00%)          Some(match *self {
        .                       Le => (Lt, Eq),
        .                       EqEq => (Eq, Eq),
        .                       Ne => (Not, Eq),
        .                       Ge => (Gt, Eq),
        .                       AndAnd => (BinOp(And), BinOp(And)),
        .                       OrOr => (BinOp(Or), BinOp(Or)),
        .                       BinOp(Shl) => (Lt, Lt),
        .                       BinOp(Shr) => (Gt, Gt),
-- line 271 ----------------------------------------
-- line 280 ----------------------------------------
        .                       BinOpEq(Shl) => (Lt, Le),
        .                       BinOpEq(Shr) => (Gt, Ge),
        .                       DotDot => (Dot, Dot),
        .                       DotDotDot => (Dot, DotDot),
        .                       ModSep => (Colon, Colon),
        .                       RArrow => (BinOp(Minus), Gt),
        .                       LArrow => (Lt, BinOp(Minus)),
        .                       FatArrow => (Eq, Gt),
    1,450 ( 0.00%)              _ => return None,
        .                   })
    1,450 ( 0.00%)      }
        .           
        .               /// Returns tokens that are likely to be typed accidentally instead of the current token.
        .               /// Enables better error recovery when the wrong token is found.
        .               pub fn similar_tokens(&self) -> Option<Vec<TokenKind>> {
        .                   match *self {
        .                       Comma => Some(vec![Dot, Lt, Semi]),
        .                       Semi => Some(vec![Colon, Comma]),
        .                       FatArrow => Some(vec![Eq, RArrow]),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               pub fn should_end_const_arg(&self) -> bool {
      184 ( 0.00%)          matches!(self, Gt | Ge | BinOp(Shr) | BinOpEq(Shr))
       46 ( 0.00%)      }
        .           }
        .           
        .           impl Token {
    9,064 ( 0.00%)      pub fn new(kind: TokenKind, span: Span) -> Self {
   30,705 ( 0.01%)          Token { kind, span }
    9,064 ( 0.00%)      }
        .           
        .               /// Some token that will be thrown away later.
    1,019 ( 0.00%)      pub fn dummy() -> Self {
        .                   Token::new(TokenKind::Question, DUMMY_SP)
    1,019 ( 0.00%)      }
        .           
        .               /// Recovers a `Token` from an `Ident`. This creates a raw identifier if necessary.
        .               pub fn from_ast_ident(ident: Ident) -> Self {
      176 ( 0.00%)          Token::new(Ident(ident.name, ident.is_raw_guess()), ident.span)
        .               }
        .           
        .               /// Return this token by value and leave a dummy token in its place.
    5,729 ( 0.00%)      pub fn take(&mut self) -> Self {
        .                   mem::replace(self, Token::dummy())
    5,729 ( 0.00%)      }
        .           
        .               /// For interpolated tokens, returns a span of the fragment to which the interpolated
        .               /// token refers. For all other tokens this is just a regular span.
        .               /// It is particularly important to use this for identifiers and lifetimes
        .               /// for which spans affect name resolution and edition checks.
        .               /// Note that keywords are also identifiers, so they should use this
        .               /// if they keep spans or perform edition checks.
        .               pub fn uninterpolated_span(&self) -> Span {
      756 ( 0.00%)          match &self.kind {
        .                       Interpolated(nt) => nt.span(),
      378 ( 0.00%)              _ => self.span,
        .                   }
      378 ( 0.00%)      }
        .           
        .               pub fn is_op(&self) -> bool {
   17,187 ( 0.00%)          !matches!(
    5,729 ( 0.00%)              self.kind,
        .                       OpenDelim(..)
        .                           | CloseDelim(..)
        .                           | Literal(..)
        .                           | DocComment(..)
        .                           | Ident(..)
        .                           | Lifetime(..)
        .                           | Interpolated(..)
        .                           | Eof
        .                   )
    5,729 ( 0.00%)      }
        .           
        .               pub fn is_like_plus(&self) -> bool {
    3,050 ( 0.00%)          matches!(self.kind, BinOp(Plus) | BinOpEq(Plus))
      610 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of an expression.
       53 ( 0.00%)      pub fn can_begin_expr(&self) -> bool {
      265 ( 0.00%)          match self.uninterpolate().kind {
       63 ( 0.00%)              Ident(name, is_raw)              =>
       21 ( 0.00%)                  ident_can_begin_expr(name, self.span, is_raw), // value name or keyword
        .                       OpenDelim(..)                     | // tuple, array or block
        .                       Literal(..)                       | // literal
        .                       Not                               | // operator not
        .                       BinOp(Minus)                      | // unary minus
        .                       BinOp(Star)                       | // dereference
        .                       BinOp(Or) | OrOr                  | // closure
        .                       BinOp(And)                        | // reference
        .                       AndAnd                            | // double reference
-- line 371 ----------------------------------------
-- line 376 ----------------------------------------
        .                       Lifetime(..)                      | // labeled loop
        .                       Pound                             => true, // expression attributes
        .                       Interpolated(ref nt) => matches!(**nt, NtLiteral(..) |
        .                           NtExpr(..)    |
        .                           NtBlock(..)   |
        .                           NtPath(..)),
        .                       _ => false,
        .                   }
      106 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of a type.
      624 ( 0.00%)      pub fn can_begin_type(&self) -> bool {
    1,031 ( 0.00%)          match self.uninterpolate().kind {
      963 ( 0.00%)              Ident(name, is_raw)        =>
      107 ( 0.00%)                  ident_can_begin_type(name, self.span, is_raw), // type name or keyword
        .                       OpenDelim(Paren)            | // tuple
        .                       OpenDelim(Bracket)          | // array
        .                       Not                         | // never
        .                       BinOp(Star)                 | // raw pointer
        .                       BinOp(And)                  | // reference
        .                       AndAnd                      | // double reference
        .                       Question                    | // maybe bound in trait object
        .                       Lifetime(..)                | // lifetime bound in trait object
        .                       Lt | BinOp(Shl)             | // associated path
        .                       ModSep                      => true, // global path
      110 ( 0.00%)              Interpolated(ref nt) => matches!(**nt, NtTy(..) | NtPath(..)),
        .                       _ => false,
        .                   }
      936 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of a const param.
        .               pub fn can_begin_const_arg(&self) -> bool {
      475 ( 0.00%)          match self.kind {
        .                       OpenDelim(Brace) => true,
        .                       Interpolated(ref nt) => matches!(**nt, NtExpr(..) | NtBlock(..) | NtLiteral(..)),
       95 ( 0.00%)              _ => self.can_begin_literal_maybe_minus(),
        .                   }
        .               }
        .           
        .               /// Returns `true` if the token can appear at the start of a generic bound.
        .               pub fn can_begin_bound(&self) -> bool {
        .                   self.is_path_start()
        .                       || self.is_lifetime()
        .                       || self.is_keyword(kw::For)
-- line 419 ----------------------------------------
-- line 427 ----------------------------------------
        .               }
        .           
        .               /// Returns `true` if the token is any literal, a minus (which can prefix a literal,
        .               /// for example a '-42', or one of the boolean idents).
        .               ///
        .               /// In other words, would this token be a valid start of `parse_literal_maybe_minus`?
        .               ///
        .               /// Keep this in sync with and `Lit::from_token`, excluding unary negation.
       97 ( 0.00%)      pub fn can_begin_literal_maybe_minus(&self) -> bool {
      930 ( 0.00%)          match self.uninterpolate().kind {
        .                       Literal(..) | BinOp(Minus) => true,
      356 ( 0.00%)              Ident(name, false) if name.is_bool_lit() => true,
        .                       Interpolated(ref nt) => match &**nt {
        .                           NtLiteral(_) => true,
        .                           NtExpr(e) => match &e.kind {
        .                               ast::ExprKind::Lit(_) => true,
        .                               ast::ExprKind::Unary(ast::UnOp::Neg, e) => {
        .                                   matches!(&e.kind, ast::ExprKind::Lit(_))
        .                               }
        .                               _ => false,
        .                           },
        .                           _ => false,
        .                       },
        .                       _ => false,
        .                   }
      194 ( 0.00%)      }
        .           
        .               // A convenience function for matching on identifiers during parsing.
        .               // Turns interpolated identifier (`$i: ident`) or lifetime (`$l: lifetime`) token
        .               // into the regular identifier or lifetime token it refers to,
        .               // otherwise returns the original token.
    2,451 ( 0.00%)      pub fn uninterpolate(&self) -> Cow<'_, Token> {
  112,081 ( 0.02%)          match &self.kind {
   23,032 ( 0.00%)              Interpolated(nt) => match **nt {
    7,733 ( 0.00%)                  NtIdent(ident, is_raw) => {
   19,513 ( 0.00%)                      Cow::Owned(Token::new(Ident(ident.name, is_raw), ident.span))
        .                           }
        .                           NtLifetime(ident) => Cow::Owned(Token::new(Lifetime(ident.name), ident.span)),
        .                           _ => Cow::Borrowed(self),
        .                       },
        .                       _ => Cow::Borrowed(self),
        .                   }
    2,451 ( 0.00%)      }
        .           
        .               /// Returns an identifier if this token is an identifier.
   14,072 ( 0.00%)      pub fn ident(&self) -> Option<(Ident, /* is_raw */ bool)> {
        .                   let token = self.uninterpolate();
   77,712 ( 0.01%)          match token.kind {
  334,209 ( 0.06%)              Ident(name, is_raw) => Some((Ident::new(name, token.span), is_raw)),
        .                       _ => None,
        .                   }
  105,747 ( 0.02%)      }
        .           
        .               /// Returns a lifetime identifier if this token is a lifetime.
    1,763 ( 0.00%)      pub fn lifetime(&self) -> Option<Ident> {
        .                   let token = self.uninterpolate();
    4,300 ( 0.00%)          match token.kind {
        .                       Lifetime(name) => Some(Ident::new(name, token.span)),
        .                       _ => None,
        .                   }
   12,341 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is an identifier.
        .               pub fn is_ident(&self) -> bool {
        .                   self.ident().is_some()
    1,120 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is a lifetime.
      387 ( 0.00%)      pub fn is_lifetime(&self) -> bool {
        .                   self.lifetime().is_some()
      774 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is an identifier whose name is the given
        .               /// string slice.
    1,043 ( 0.00%)      pub fn is_ident_named(&self, name: Symbol) -> bool {
        .                   self.ident().map_or(false, |(ident, _)| ident.name == name)
    2,086 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is an interpolated path.
        .               fn is_path(&self) -> bool {
    7,268 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
      452 ( 0.00%)              if let NtPath(..) = **nt {
        .                           return true;
        .                       }
        .                   }
        .                   false
        .               }
        .           
        .               /// Would `maybe_whole_expr` in `parser.rs` return `Ok(..)`?
        .               /// That is, is this a pre-parsed expression dropped into the token stream
-- line 516 ----------------------------------------
-- line 522 ----------------------------------------
        .                       }
        .                   }
        .           
        .                   false
        .               }
        .           
        .               // Is the token an interpolated block (`$b:block`)?
        .               pub fn is_whole_block(&self) -> bool {
       68 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
       48 ( 0.00%)              if let NtBlock(..) = **nt {
        .                           return true;
        .                       }
        .                   }
        .                   false
       34 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is either the `mut` or `const` keyword.
        .               pub fn is_mutability(&self) -> bool {
        .                   self.is_keyword(kw::Mut) || self.is_keyword(kw::Const)
        .               }
        .           
      510 ( 0.00%)      pub fn is_qpath_start(&self) -> bool {
    4,144 ( 0.00%)          self == &Lt || self == &BinOp(Shl)
        .               }
        .           
    7,268 ( 0.00%)      pub fn is_path_start(&self) -> bool {
   11,070 ( 0.00%)          self == &ModSep
        .                       || self.is_qpath_start()
        .                       || self.is_path()
        .                       || self.is_path_segment_keyword()
    1,419 ( 0.00%)              || self.is_ident() && !self.is_reserved_ident()
    9,085 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is a given keyword, `kw`.
   17,360 ( 0.00%)      pub fn is_keyword(&self, kw: Symbol) -> bool {
        .                   self.is_non_raw_ident_where(|id| id.name == kw)
   34,720 ( 0.01%)      }
        .           
      359 ( 0.00%)      pub fn is_path_segment_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_path_segment_keyword)
        .               }
        .           
        .               // Returns true for reserved identifiers used internally for elided lifetimes,
        .               // unnamed method parameters, crate root module, error recovery etc.
      127 ( 0.00%)      pub fn is_special_ident(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_special)
        .               }
        .           
        .               /// Returns `true` if the token is a keyword used in the language.
      127 ( 0.00%)      pub fn is_used_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_used_keyword)
        .               }
        .           
        .               /// Returns `true` if the token is a keyword reserved for possible future use.
      127 ( 0.00%)      pub fn is_unused_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_unused_keyword)
        .               }
        .           
        .               /// Returns `true` if the token is either a special identifier or a keyword.
        .               pub fn is_reserved_ident(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_reserved)
        .               }
        .           
        .               /// Returns `true` if the token is the identifier `true` or `false`.
      359 ( 0.00%)      pub fn is_bool_lit(&self) -> bool {
      718 ( 0.00%)          self.is_non_raw_ident_where(|id| id.name.is_bool_lit())
        .               }
        .           
        .               pub fn is_numeric_lit(&self) -> bool {
        .                   matches!(
        .                       self.kind,
        .                       Literal(Lit { kind: LitKind::Integer, .. }) | Literal(Lit { kind: LitKind::Float, .. })
        .                   )
        .               }
        .           
        .               /// Returns `true` if the token is a non-raw identifier for which `pred` holds.
       76 ( 0.00%)      pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(Ident) -> bool) -> bool {
  134,419 ( 0.02%)          match self.ident() {
    1,625 ( 0.00%)              Some((id, false)) => pred(id),
        .                       _ => false,
        .                   }
       95 ( 0.00%)      }
        .           
   16,070 ( 0.00%)      pub fn glue(&self, joint: &Token) -> Option<Token> {
    8,035 ( 0.00%)          let kind = match self.kind {
       51 ( 0.00%)              Eq => match joint.kind {
        .                           Eq => EqEq,
        .                           Gt => FatArrow,
        .                           _ => return None,
        .                       },
       39 ( 0.00%)              Lt => match joint.kind {
        .                           Eq => Le,
        .                           Lt => BinOp(Shl),
        .                           Le => BinOpEq(Shl),
        .                           BinOp(Minus) => LArrow,
        .                           _ => return None,
        .                       },
      182 ( 0.00%)              Gt => match joint.kind {
        .                           Eq => Ge,
        .                           Gt => BinOp(Shr),
        .                           Ge => BinOpEq(Shr),
        .                           _ => return None,
        .                       },
       10 ( 0.00%)              Not => match joint.kind {
        .                           Eq => Ne,
        .                           _ => return None,
        .                       },
      360 ( 0.00%)              BinOp(op) => match joint.kind {
        .                           Eq => BinOpEq(op),
        9 ( 0.00%)                  BinOp(And) if op == And => AndAnd,
        1 ( 0.00%)                  BinOp(Or) if op == Or => OrOr,
       28 ( 0.00%)                  Gt if op == Minus => RArrow,
        .                           _ => return None,
        .                       },
      204 ( 0.00%)              Dot => match joint.kind {
        .                           Dot => DotDot,
        .                           DotDot => DotDotDot,
        .                           _ => return None,
        .                       },
        .                       DotDot => match joint.kind {
        .                           Dot => DotDotDot,
        .                           Eq => DotDotEq,
        .                           _ => return None,
        .                       },
      270 ( 0.00%)              Colon => match joint.kind {
        .                           Colon => ModSep,
        .                           _ => return None,
        .                       },
        .                       SingleQuote => match joint.kind {
        .                           Ident(name, false) => Lifetime(Symbol::intern(&format!("'{}", name))),
        .                           _ => return None,
        .                       },
        .           
        .                       Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot
        .                       | DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar
        .                       | Question | OpenDelim(..) | CloseDelim(..) | Literal(..) | Ident(..)
        .                       | Lifetime(..) | Interpolated(..) | DocComment(..) | Eof => return None,
        .                   };
        .           
    3,861 ( 0.00%)          Some(Token::new(kind, self.span.to(joint.span)))
   14,463 ( 0.00%)      }
        .           }
        .           
        .           impl PartialEq<TokenKind> for Token {
        .               fn eq(&self, rhs: &TokenKind) -> bool {
   70,034 ( 0.01%)          self.kind == *rhs
        .               }
        .           }
        .           
        .           #[derive(Clone, Encodable, Decodable)]
        .           /// For interpolation during macro expansion.
        .           pub enum Nonterminal {
        .               NtItem(P<ast::Item>),
        .               NtBlock(P<ast::Block>),
-- line 675 ----------------------------------------
-- line 711 ----------------------------------------
        .               Path,
        .               Vis,
        .               TT,
        .           }
        .           
        .           impl NonterminalKind {
        .               /// The `edition` closure is used to get the edition for the given symbol. Doing
        .               /// `span.edition()` is expensive, so we do it lazily.
      204 ( 0.00%)      pub fn from_symbol(
        .                   symbol: Symbol,
        .                   edition: impl FnOnce() -> Edition,
        .               ) -> Option<NonterminalKind> {
      460 ( 0.00%)          Some(match symbol {
        .                       sym::item => NonterminalKind::Item,
        .                       sym::block => NonterminalKind::Block,
        .                       sym::stmt => NonterminalKind::Stmt,
        .                       sym::pat => match edition() {
        .                           Edition::Edition2015 | Edition::Edition2018 => {
        .                               NonterminalKind::PatParam { inferred: true }
        .                           }
        .                           Edition::Edition2021 => NonterminalKind::PatWithOr,
-- line 731 ----------------------------------------
-- line 737 ----------------------------------------
        .                       sym::lifetime => NonterminalKind::Lifetime,
        .                       sym::literal => NonterminalKind::Literal,
        .                       sym::meta => NonterminalKind::Meta,
        .                       sym::path => NonterminalKind::Path,
        .                       sym::vis => NonterminalKind::Vis,
        .                       sym::tt => NonterminalKind::TT,
        .                       _ => return None,
        .                   })
      204 ( 0.00%)      }
        .               fn symbol(self) -> Symbol {
        .                   match self {
        .                       NonterminalKind::Item => sym::item,
        .                       NonterminalKind::Block => sym::block,
        .                       NonterminalKind::Stmt => sym::stmt,
        .                       NonterminalKind::PatParam { inferred: false } => sym::pat_param,
        .                       NonterminalKind::PatParam { inferred: true } | NonterminalKind::PatWithOr => sym::pat,
        .                       NonterminalKind::Expr => sym::expr,
-- line 753 ----------------------------------------

  478,359 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                 

-- line 23 ----------------------------------------
        .           use std::cmp::Ordering;
        .           use std::marker::PhantomData;
        .           use std::ops::Range;
        .           use ty::util::IntTypeExt;
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct TypeAndMut<'tcx> {
       61 ( 0.00%)      pub ty: Ty<'tcx>,
      305 ( 0.00%)      pub mutbl: hir::Mutability,
        .           }
        .           
        .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        .           #[derive(HashStable)]
        .           /// A "free" region `fr` can be interpreted as "some region
        .           /// at least as big as the scope `fr.scope`".
        .           pub struct FreeRegion {
    2,383 ( 0.00%)      pub scope: DefId,
    6,057 ( 0.00%)      pub bound_region: BoundRegionKind,
        .           }
        .           
   29,867 ( 0.01%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        .           #[derive(HashStable)]
        .           pub enum BoundRegionKind {
        .               /// An anonymous region parameter for a given fn (&T)
      746 ( 0.00%)      BrAnon(u32),
        .           
        .               /// Named region parameters for functions (a in &'a T)
        .               ///
        .               /// The `DefId` is needed to distinguish free regions in
        .               /// the event of shadowing.
        .               BrNamed(DefId, Symbol),
        .           
        .               /// Anonymous region for the implicit env pointer parameter
        .               /// to a closure
        .               BrEnv,
        .           }
        .           
      216 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           #[derive(HashStable)]
        .           pub struct BoundRegion {
    5,752 ( 0.00%)      pub var: BoundVar,
    4,866 ( 0.00%)      pub kind: BoundRegionKind,
        .           }
        .           
        .           impl BoundRegionKind {
        .               pub fn is_named(&self) -> bool {
        .                   match *self {
        .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
        .                       _ => false,
        .                   }
        .               }
        .           }
        .           
        .           /// Defines the kinds of types.
        .           ///
        .           /// N.B., if you change this, you'll probably want to change the corresponding
        .           /// AST structure in `rustc_ast/src/ast.rs` as well.
1,744,076 ( 0.31%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
        .           #[derive(HashStable)]
        .           #[rustc_diagnostic_item = "TyKind"]
        .           pub enum TyKind<'tcx> {
        .               /// The primitive boolean type. Written as `bool`.
        .               Bool,
        .           
        .               /// The primitive character type; holds a Unicode scalar value
        .               /// (a non-surrogate code point). Written as `char`.
-- line 89 ----------------------------------------
-- line 99 ----------------------------------------
        .               Float(ty::FloatTy),
        .           
        .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
        .               ///
        .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
        .               /// That is, even after substitution it is possible that there are type
        .               /// variables. This happens when the `Adt` corresponds to an ADT
        .               /// definition and not a concrete use of it.
  142,750 ( 0.03%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
        .           
        .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
        .               Foreign(DefId),
        .           
        .               /// The pointee of a string slice. Written as `str`.
        .               Str,
        .           
        .               /// An array with the given length. Written as `[T; n]`.
   13,682 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
        .           
        .               /// The pointee of an array slice. Written as `[T]`.
        .               Slice(Ty<'tcx>),
        .           
        .               /// A raw pointer. Written as `*mut T` or `*const T`
        .               RawPtr(TypeAndMut<'tcx>),
        .           
        .               /// A reference; a pointer with an associated lifetime. Written as
        .               /// `&'a mut T` or `&'a T`.
  138,277 ( 0.02%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
        .           
        .               /// The anonymous type of a function declaration/definition. Each
        .               /// function has a unique type, which is output (for a function
        .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
        .               ///
        .               /// For example the type of `bar` here:
        .               ///
        .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .               ///
        .               /// ```rust
        .               /// fn foo() -> i32 { 1 }
        .               /// let bar: fn() -> i32 = foo;
        .               /// ```
        .               FnPtr(PolyFnSig<'tcx>),
        .           
        .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
       10 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
        .           
        .               /// The anonymous type of a closure. Used to represent the type of
        .               /// `|a| a`.
        .               Closure(DefId, SubstsRef<'tcx>),
        .           
        .               /// The anonymous type of a generator. Used to represent the type of
        .               /// `|a| yield a`.
        .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
        .               /// The substitutions are for the generics of the function in question.
        .               /// After typeck, the concrete type can be found in the `types` map.
        .               Opaque(DefId, SubstsRef<'tcx>),
        .           
        .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
        .               Param(ParamTy),
        .           
        .               /// Bound type variable, used only when preparing a trait query.
      697 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
        .           
        .               /// A placeholder type - universally quantified higher-ranked type.
        .               Placeholder(ty::PlaceholderType),
        .           
        .               /// A type variable used during type checking.
        .               Infer(InferTy),
        .           
        .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
        .               pub closure_kind_ty: T,
        .               pub closure_sig_as_fn_ptr_ty: T,
        .               pub tupled_upvars_ty: T,
        .           }
        .           
        .           impl<'tcx> ClosureSubsts<'tcx> {
        .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
        .               /// for the closure parent, alongside additional closure-specific components.
        3 ( 0.00%)      pub fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
        .               ) -> ClosureSubsts<'tcx> {
        .                   ClosureSubsts {
        .                       substs: tcx.mk_substs(
        6 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
       12 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
        .                                   .iter()
        .                                   .map(|&ty| ty.into()),
        .                           ),
        .                       ),
        .                   }
        6 ( 0.00%)      }
        .           
        .               /// Divides the closure substs into their respective components.
        .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
       41 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
        .                   match self.substs[..] {
      316 ( 0.00%)              [
       85 ( 0.00%)                  ref parent_substs @ ..,
       90 ( 0.00%)                  closure_kind_ty,
       46 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
       63 ( 0.00%)                  tupled_upvars_ty,
      164 ( 0.00%)              ] => ClosureSubstsParts {
        .                           parent_substs,
        .                           closure_kind_ty,
        .                           closure_sig_as_fn_ptr_ty,
        .                           tupled_upvars_ty,
        .                       },
        .                       _ => bug!("closure substs missing synthetics"),
        .                   }
      123 ( 0.00%)      }
        .           
        .               /// Returns `true` only if enough of the synthetic types are known to
        .               /// allow using all of the methods on `ClosureSubsts` without panicking.
        .               ///
        .               /// Used primarily by `ty::print::pretty` to be able to handle closure
        .               /// types that haven't had their synthetic types substituted in.
        .               pub fn is_valid(self) -> bool {
        .                   self.substs.len() >= 3
-- line 378 ----------------------------------------
-- line 383 ----------------------------------------
        .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
        .                   self.split().parent_substs
        .               }
        .           
        .               /// Returns an iterator over the list of types of captured paths by the closure.
        .               /// In case there was a type error in figuring out the types of the captured path, an
        .               /// empty iterator is returned.
        .               #[inline]
        6 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       15 ( 0.00%)          match self.tupled_upvars_ty().kind() {
        .                       TyKind::Error(_) => None,
       10 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
        .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
        .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
        .                   }
        .                   .into_iter()
        .                   .flatten()
        4 ( 0.00%)      }
        .           
        .               /// Returns the tuple type representing the upvars for this closure.
        .               #[inline]
        .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
      183 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
        .               }
        .           
        .               /// Returns the closure kind for this closure; may return a type
        .               /// variable during inference. To get the closure kind during
        .               /// inference, use `infcx.closure_kind(substs)`.
       20 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
        .                   self.split().closure_kind_ty.expect_ty()
       40 ( 0.00%)      }
        .           
        .               /// Returns the `fn` pointer type representing the closure signature for this
        .               /// closure.
        .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
        .               // type is known at the time of the creation of `ClosureSubsts`,
        .               // see `rustc_typeck::check::closure`.
        .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
        .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
        .               }
        .           
        .               /// Returns the closure kind for this closure; only usable outside
        .               /// of an inference context, because in that context we know that
        .               /// there are no type variables.
        .               ///
        .               /// If you have an inference context, use `infcx.closure_kind()`.
        1 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
        1 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
        2 ( 0.00%)      }
        .           
        .               /// Extracts the signature from the closure.
       24 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
        .                   let ty = self.sig_as_fn_ptr_ty();
       48 ( 0.00%)          match ty.kind() {
       96 ( 0.00%)              ty::FnPtr(sig) => *sig,
        .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
        .                   }
       72 ( 0.00%)      }
        .           }
        .           
        .           /// Similar to `ClosureSubsts`; see the above documentation for more.
        .           #[derive(Copy, Clone, Debug, TypeFoldable)]
        .           pub struct GeneratorSubsts<'tcx> {
        .               pub substs: SubstsRef<'tcx>,
        .           }
        .           
-- line 448 ----------------------------------------
-- line 676 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> UpvarSubsts<'tcx> {
        .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
        .               /// In case there was a type error in figuring out the types of the captured path, an
        .               /// empty iterator is returned.
        .               #[inline]
        .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
        8 ( 0.00%)          let tupled_tys = match self {
       11 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
        .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
        .                   };
        .           
       18 ( 0.00%)          match tupled_tys.kind() {
        .                       TyKind::Error(_) => None,
       15 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
        .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
        .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
        .                   }
        .                   .into_iter()
        .                   .flatten()
        .               }
        .           
        .               #[inline]
        .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
       14 ( 0.00%)          match self {
       15 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
        .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
        .                   }
        .               }
        .           }
        .           
        .           /// An inline const is modeled like
        .           ///
        .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
-- line 710 ----------------------------------------
-- line 760 ----------------------------------------
        .               }
        .           
        .               /// Returns the type of this inline const.
        .               pub fn ty(self) -> Ty<'tcx> {
        .                   self.split().ty.expect_ty()
        .               }
        .           }
        .           
      321 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable)]
        .           pub enum ExistentialPredicate<'tcx> {
        .               /// E.g., `Iterator`.
        .               Trait(ExistentialTraitRef<'tcx>),
        .               /// E.g., `Iterator::Item = T`.
        .               Projection(ExistentialProjection<'tcx>),
        .               /// E.g., `Send`.
       12 ( 0.00%)      AutoTrait(DefId),
        .           }
        .           
        .           impl<'tcx> ExistentialPredicate<'tcx> {
        .               /// Compares via an ordering that will not change if modules are reordered or other changes are
        .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
       55 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
        .                   use self::ExistentialPredicate::*;
       64 ( 0.00%)          match (*self, *other) {
        .                       (Trait(_), Trait(_)) => Ordering::Equal,
        .                       (Projection(ref a), Projection(ref b)) => {
        .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
        .                       }
        .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
        .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
        .                       }
        .                       (Trait(_), _) => Ordering::Less,
        .                       (Projection(_), Trait(_)) => Ordering::Greater,
        .                       (Projection(_), _) => Ordering::Less,
        .                       (AutoTrait(_), _) => Ordering::Greater,
        .                   }
       66 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
        .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
        .                   use crate::ty::ToPredicate;
        .                   match self.skip_binder() {
        .                       ExistentialPredicate::Trait(tr) => {
        .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
-- line 805 ----------------------------------------
-- line 886 ----------------------------------------
        .           ///     T: Foo<U>
        .           ///
        .           /// This would be represented by a trait-reference where the `DefId` is the
        .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
        .           /// and `U` as parameter 1.
        .           ///
        .           /// Trait references also appear in object types like `Foo<U>`, but in
        .           /// that case the `Self` parameter is absent from the substitutions.
   15,663 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
  408,544 ( 0.07%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct TraitRef<'tcx> {
    1,506 ( 0.00%)      pub def_id: DefId,
  238,853 ( 0.04%)      pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> TraitRef<'tcx> {
      520 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
        .                   TraitRef { def_id, substs }
    2,080 ( 0.00%)      }
        .           
        .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
        .               /// are the parameters defined on trait.
      441 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
      196 ( 0.00%)          ty::Binder::dummy(TraitRef {
        .                       def_id,
      294 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
        .                   })
      392 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn self_ty(&self) -> Ty<'tcx> {
        .                   self.substs.type_at(0)
        .               }
        .           
      608 ( 0.00%)      pub fn from_method(
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_id: DefId,
        .                   substs: SubstsRef<'tcx>,
        .               ) -> ty::TraitRef<'tcx> {
        .                   let defs = tcx.generics_of(trait_id);
        .           
       76 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
      836 ( 0.00%)      }
        .           }
        .           
        .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
        .           
        .           impl<'tcx> PolyTraitRef<'tcx> {
        .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
        .                   self.map_bound_ref(|tr| tr.self_ty())
        .               }
        .           
        .               pub fn def_id(&self) -> DefId {
    6,354 ( 0.00%)          self.skip_binder().def_id
    2,118 ( 0.00%)      }
        .           
      717 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
    1,434 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
        .                       trait_ref,
        .                       constness: ty::BoundConstness::NotConst,
        .                       polarity: ty::ImplPolarity::Positive,
        .                   })
      717 ( 0.00%)      }
        .           }
        .           
        .           /// An existential reference to a trait, where `Self` is erased.
        .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
        .           ///
        .           ///     exists T. T: Trait<'a, 'b, X, Y>
        .           ///
        .           /// The substitutions don't include the erased `Self`, only trait
        .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
       40 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable)]
        .           pub struct ExistentialTraitRef<'tcx> {
       10 ( 0.00%)      pub def_id: DefId,
       20 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> ExistentialTraitRef<'tcx> {
        .               pub fn erase_self_ty(
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_ref: ty::TraitRef<'tcx>,
        .               ) -> ty::ExistentialTraitRef<'tcx> {
        .                   // Assert there is a Self.
-- line 970 ----------------------------------------
-- line 999 ----------------------------------------
        .               /// we convert the principal trait-ref into a normal trait-ref,
        .               /// you must give *some* self type. A common choice is `mk_err()`
        .               /// or some placeholder type.
        .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
        .                   self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
        .               }
        .           }
        .           
    4,960 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum BoundVariableKind {
        .               Ty(BoundTyKind),
        .               Region(BoundRegionKind),
        .               Const,
        .           }
        .           
        .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
-- line 1015 ----------------------------------------
-- line 1016 ----------------------------------------
        .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
        .           /// (which would be represented by the type `PolyTraitRef ==
        .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
        .           /// erase, or otherwise "discharge" these bound vars, we change the
        .           /// type from `Binder<'tcx, T>` to just `T` (see
        .           /// e.g., `liberate_late_bound_regions`).
        .           ///
        .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
      492 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
   84,559 ( 0.02%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
        .           
        .           impl<'tcx, T> Binder<'tcx, T>
        .           where
        .               T: TypeFoldable<'tcx>,
        .           {
        .               /// Wraps `value` in a binder, asserting that `value` does not
        .               /// contain any bound vars that would be bound by the
        .               /// binder. This is commonly used to 'inject' a value T into a
        .               /// different binding level.
    5,240 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
   21,725 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
   51,853 ( 0.01%)          Binder(value, ty::List::empty())
    5,240 ( 0.00%)      }
        .           
        .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(vars);
        .                       value.visit_with(&mut validator);
        .                   }
   11,831 ( 0.00%)          Binder(value, vars)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Binder<'tcx, T> {
        .               /// Skips the binder and returns the "bound" value. This is a
        .               /// risky thing to do because it's easy to get confused about
        .               /// De Bruijn indices and the like. It is usually better to
        .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
        .               /// accounting.
        .               ///
        .               /// Some examples where `skip_binder` is reasonable:
        .               ///
        .               /// - extracting the `DefId` from a PolyTraitRef;
        .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
        .               ///   a type parameter `X`, since the type `X` does not reference any regions
        .               pub fn skip_binder(self) -> T {
  277,065 ( 0.05%)          self.0
        .               }
        .           
        .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
    1,765 ( 0.00%)          self.1
        .               }
        .           
        .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
    2,272 ( 0.00%)          Binder(&self.0, self.1)
        .               }
        .           
        .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(&T) -> U,
        .               {
        .                   let value = f(&self.0);
        .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
        .           
        .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(&T) -> U,
        .               {
        .                   self.as_ref().map_bound(f)
        .               }
        .           
       24 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(T) -> U,
        .               {
   13,728 ( 0.00%)          let value = f(self.0);
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
   56,438 ( 0.01%)          Binder(value, self.1)
       24 ( 0.00%)      }
        .           
        .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
        .               where
        .                   F: FnOnce(T) -> Result<U, E>,
        .               {
        .                   let value = f(self.0)?;
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
    2,117 ( 0.00%)          Ok(Binder(value, self.1))
        .               }
        .           
        .               /// Wraps a `value` in a binder, using the same bound variables as the
        .               /// current `Binder`. This should not be used if the new value *changes*
        .               /// the bound variables. Note: the (old or new) value itself does not
        .               /// necessarily need to *name* all the bound variables.
        .               ///
        .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
        .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
        .               where
        .                   U: TypeFoldable<'tcx>,
        .               {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
        .                       value.visit_with(&mut validator);
        .                   }
    9,950 ( 0.00%)          Binder(value, self.1)
        .               }
        .           
        .               /// Unwraps and returns the value within, but only if it contains
        .               /// no bound vars at all. (In other words, if this binder --
        .               /// and indeed any enclosing binder -- doesn't bind anything at
        .               /// all.) Otherwise, returns `None`.
        .               ///
        .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
        .               /// binder, but permits late-bound vars bound by enclosing
        .               /// binders, but that would require adjusting the debruijn
        .               /// indices, and given the shallow binding structure we often use,
        .               /// would not be that useful.)
        .               pub fn no_bound_vars(self) -> Option<T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
   38,398 ( 0.01%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
        .               }
        .           
        .               /// Splits the contents into two things that share the same binder
        .               /// level as the original, returning two distinct binders.
        .               ///
        .               /// `f` should consider bound regions at depth 1 to be free, and
        .               /// anything it produces with bound regions at depth 1 will be
        .               /// bound in the resulting return values.
-- line 1159 ----------------------------------------
-- line 1170 ----------------------------------------
        .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
        .                   let bound_vars = self.1;
        .                   self.0.map(|v| Binder(v, bound_vars))
        .               }
        .           }
        .           
        .           /// Represents the projection of an associated type. In explicit UFCS
        .           /// form this would be written `<T as Trait<..>>::N`.
      297 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
   19,577 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ProjectionTy<'tcx> {
        .               /// The parameters of the associated item.
   13,630 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .           
        .               /// The `DefId` of the `TraitItem` for the associated type `N`.
        .               ///
        .               /// Note that this is not the `DefId` of the `TraitRef` containing this
        .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
   18,598 ( 0.00%)      pub item_def_id: DefId,
        .           }
        .           
        .           impl<'tcx> ProjectionTy<'tcx> {
    4,634 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
    1,324 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
    5,296 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference and own substs from this projection.
        .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
        .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
    3,787 ( 0.00%)      pub fn trait_ref_and_own_substs(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
    1,623 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
        .                   let trait_generics = tcx.generics_of(def_id);
    2,705 ( 0.00%)          (
        .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
        .                       &self.substs[trait_generics.count()..],
        .                   )
    4,869 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference from this projection.
        .               /// For example, if this is a projection of `<T as Iterator>::Item`,
        .               /// then this function would return a `T: Iterator` trait reference.
        .               ///
        .               /// WARNING: This will drop the substs for generic associated types
        .               /// consider calling [Self::trait_ref_and_own_substs] to get those
        .               /// as well.
    5,931 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
      659 ( 0.00%)          let def_id = self.trait_def_id(tcx);
      659 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
    7,249 ( 0.00%)      }
        .           
    1,292 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
    3,876 ( 0.00%)          self.substs.type_at(0)
    2,584 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Copy, Clone, Debug, TypeFoldable)]
        .           pub struct GenSig<'tcx> {
        .               pub resume_ty: Ty<'tcx>,
        .               pub yield_ty: Ty<'tcx>,
        .               pub return_ty: Ty<'tcx>,
        .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
        .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
        .           
        .           /// Signature of a function type, which we have arbitrarily
        .           /// decided to use to refer to the input/output types.
        .           ///
        .           /// - `inputs`: is the list of arguments and their modes.
        .           /// - `output`: is the return type.
        .           /// - `c_variadic`: indicates whether this is a C-variadic function.
    8,031 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    5,271 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct FnSig<'tcx> {
      698 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
    6,310 ( 0.00%)      pub c_variadic: bool,
    1,380 ( 0.00%)      pub unsafety: hir::Unsafety,
    6,117 ( 0.00%)      pub abi: abi::Abi,
        .           }
        .           
        .           impl<'tcx> FnSig<'tcx> {
    4,207 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
   18,631 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
    8,414 ( 0.00%)      }
        .           
    2,690 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
   20,180 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
    5,380 ( 0.00%)      }
        .           
        .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
        .               // method.
        .               fn fake() -> FnSig<'tcx> {
        .                   FnSig {
        .                       inputs_and_output: List::empty(),
        .                       c_variadic: false,
        .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
        .               }
        .           }
        .           
        .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
        .           
        .           impl<'tcx> PolyFnSig<'tcx> {
        .               #[inline]
        .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
      527 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
        .               }
        .               #[inline]
        .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    1,743 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
        .               }
        .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
        .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
       83 ( 0.00%)      }
        .               #[inline]
        .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
    1,088 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
        .               }
        .               pub fn c_variadic(&self) -> bool {
      166 ( 0.00%)          self.skip_binder().c_variadic
       83 ( 0.00%)      }
        .               pub fn unsafety(&self) -> hir::Unsafety {
      908 ( 0.00%)          self.skip_binder().unsafety
      454 ( 0.00%)      }
        .               pub fn abi(&self) -> abi::Abi {
    1,800 ( 0.00%)          self.skip_binder().abi
      450 ( 0.00%)      }
        .           }
        .           
        .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
        .           
       36 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct ParamTy {
      572 ( 0.00%)      pub index: u32,
        .               pub name: Symbol,
        .           }
        .           
        .           impl<'tcx> ParamTy {
      104 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
        .                   ParamTy { index, name }
       52 ( 0.00%)      }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
       52 ( 0.00%)          ParamTy::new(def.index, def.name)
       26 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
        .                   tcx.mk_ty_param(self.index, self.name)
        .               }
        .           }
        .           
        .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
        .           #[derive(HashStable)]
        .           pub struct ParamConst {
       94 ( 0.00%)      pub index: u32,
       94 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           impl ParamConst {
        .               pub fn new(index: u32, name: Symbol) -> ParamConst {
        .                   ParamConst { index, name }
        .               }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
        .           /// the inference variable is supposed to satisfy the relation
        .           /// *for every value of the placeholder region*. To ensure that doesn't
        .           /// happen, you can use `leak_check`. This is more clearly explained
        .           /// by the [rustc dev guide].
        .           ///
        .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
        .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
        .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
  427,060 ( 0.08%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
       16 ( 0.00%)  pub enum RegionKind {
        .               /// Region bound in a type or fn declaration which will be
        .               /// substituted 'early' -- that is, at the same time when type
        .               /// parameters are substituted.
        .               ReEarlyBound(EarlyBoundRegion),
        .           
        .               /// Region bound in a function scope, which will be substituted when the
        .               /// function is called.
    9,732 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
        .           
        .               /// When checking a function body, the types of all arguments and so forth
        .               /// that refer to bound region parameters are modified to refer to free
        .               /// region parameters.
        .               ReFree(FreeRegion),
        .           
        .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
        .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
        .               /// regions visible from `U`, but not less than regions not visible
        .               /// from `U`.
        .               ReEmpty(ty::UniverseIndex),
        .           
        .               /// Erased region, used by trait selection, in MIR and during codegen.
        .               ReErased,
        .           }
        .           
   12,324 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           pub struct EarlyBoundRegion {
      100 ( 0.00%)      pub def_id: DefId,
    8,053 ( 0.00%)      pub index: u32,
      784 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           /// A **`const`** **v**ariable **ID**.
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           pub struct ConstVid<'tcx> {
    1,042 ( 0.00%)      pub index: u32,
      764 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
        .           }
        .           
        .           rustc_index::newtype_index! {
        .               /// A **region** (lifetime) **v**ariable **ID**.
        .               pub struct RegionVid {
        .                   DEBUG_FORMAT = custom,
        .               }
        .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
        .           rustc_index::newtype_index! {
        .               pub struct BoundVar { .. }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct BoundTy {
        .               pub var: BoundVar,
      697 ( 0.00%)      pub kind: BoundTyKind,
        .           }
        .           
   11,900 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum BoundTyKind {
        .               Anon,
        .               Param(Symbol),
        .           }
        .           
        .           impl From<BoundVar> for BoundTy {
        .               fn from(var: BoundVar) -> Self {
-- line 1532 ----------------------------------------
-- line 1616 ----------------------------------------
        .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
        .                       RegionKind::ReEmpty(_) => false,
        .                       RegionKind::ReErased => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_late_bound(&self) -> bool {
       83 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_placeholder(&self) -> bool {
        .                   matches!(*self, ty::RePlaceholder(..))
        .               }
        .           
        .               #[inline]
        .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
    5,654 ( 0.00%)          match *self {
        .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               pub fn type_flags(&self) -> TypeFlags {
        .                   let mut flags = TypeFlags::empty();
        .           
   22,632 ( 0.00%)          match *self {
        .                       ty::ReVar(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
        .                           flags = flags | TypeFlags::HAS_RE_INFER;
        .                       }
        .                       ty::RePlaceholder(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
        .                       ty::ReErased => {
        .                           flags = flags | TypeFlags::HAS_RE_ERASED;
        .                       }
        .                   }
        .           
        .                   debug!("type_flags({:?}) = {:?}", self, flags);
        .           
        .                   flags
      333 ( 0.00%)      }
        .           
        .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
        .               /// For example, consider the regions in this snippet of code:
        .               ///
        .               /// ```
        .               /// impl<'a> Foo {
        .               ///      ^^ -- early bound, declared on an impl
        .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
        .           
        .               #[inline(always)]
        .               pub fn flags(&self) -> TypeFlags {
        .                   self.flags
        .               }
        .           
        .               #[inline]
        .               pub fn is_unit(&self) -> bool {
      514 ( 0.00%)          match self.kind() {
      179 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_never(&self) -> bool {
    7,941 ( 0.00%)          matches!(self.kind(), Never)
        .               }
        .           
        .               #[inline]
        .               pub fn is_primitive(&self) -> bool {
        .                   self.kind().is_primitive()
        .               }
        .           
        .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_ref(&self) -> bool {
        .                   matches!(self.kind(), Ref(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_var(&self) -> bool {
   10,891 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
    9,872 ( 0.00%)          match self.kind() {
    1,446 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_infer(&self) -> bool {
        9 ( 0.00%)          matches!(self.kind(), Infer(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_phantom_data(&self) -> bool {
        .                   if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
        .               }
        .           
        .               #[inline]
        .               pub fn is_bool(&self) -> bool {
       18 ( 0.00%)          *self.kind() == Bool
        .               }
        .           
        .               /// Returns `true` if this type is a `str`.
        .               #[inline]
        .               pub fn is_str(&self) -> bool {
        .                   *self.kind() == Str
        .               }
        .           
        .               #[inline]
        .               pub fn is_param(&self, index: u32) -> bool {
      111 ( 0.00%)          match self.kind() {
        .                       ty::Param(ref data) => data.index == index,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_slice(&self) -> bool {
        .                   match self.kind() {
        .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_array(&self) -> bool {
      104 ( 0.00%)          matches!(self.kind(), Array(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_simd(&self) -> bool {
        .                   match self.kind() {
        .                       Adt(def, _) => def.repr.simd(),
        .                       _ => false,
        .                   }
        .               }
        .           
       44 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
       88 ( 0.00%)          match self.kind() {
        .                       Array(ty, _) | Slice(ty) => ty,
        .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
        .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
        .                   }
       44 ( 0.00%)      }
        .           
        .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
        .                   match self.kind() {
        .                       Adt(def, substs) => {
        .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
        .                           let variant = def.non_enum_variant();
        .                           let f0_ty = variant.fields[0].ty(tcx, substs);
        .           
-- line 1824 ----------------------------------------
-- line 1838 ----------------------------------------
        .                           }
        .                       }
        .                       _ => bug!("`simd_size_and_type` called on invalid type"),
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_region_ptr(&self) -> bool {
       23 ( 0.00%)          matches!(self.kind(), Ref(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_mutable_ptr(&self) -> bool {
        .                   matches!(
        .                       self.kind(),
        .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
        .                           | Ref(_, _, hir::Mutability::Mut)
-- line 1854 ----------------------------------------
-- line 1861 ----------------------------------------
        .                   match self.kind() {
        .                       Ref(_, _, mutability) => Some(*mutability),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_unsafe_ptr(&self) -> bool {
      449 ( 0.00%)          matches!(self.kind(), RawPtr(_))
        .               }
        .           
        .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
        .               #[inline]
        .               pub fn is_any_ptr(&self) -> bool {
        4 ( 0.00%)          self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
        .               }
        .           
        .               #[inline]
        .               pub fn is_box(&self) -> bool {
    8,712 ( 0.00%)          match self.kind() {
    1,317 ( 0.00%)              Adt(def, _) => def.is_box(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               /// Panics if called on any type other than `Box<T>`.
        .               pub fn boxed_ty(&self) -> Ty<'tcx> {
        .                   match self.kind() {
        .                       Adt(def, substs) if def.is_box() => substs.type_at(0),
-- line 1889 ----------------------------------------
-- line 1891 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
        .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
        .               /// contents are abstract to rustc.)
        .               #[inline]
        .               pub fn is_scalar(&self) -> bool {
      316 ( 0.00%)          matches!(
      686 ( 0.00%)              self.kind(),
        .                       Bool | Char
        .                           | Int(_)
        .                           | Float(_)
        .                           | Uint(_)
        .                           | FnDef(..)
        .                           | FnPtr(_)
        .                           | RawPtr(_)
        .                           | Infer(IntVar(_) | FloatVar(_))
-- line 1908 ----------------------------------------
-- line 1917 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_trait(&self) -> bool {
        .                   matches!(self.kind(), Dynamic(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_enum(&self) -> bool {
        4 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
        .               }
        .           
        .               #[inline]
        .               pub fn is_union(&self) -> bool {
    1,836 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
        .               }
        .           
        .               #[inline]
        .               pub fn is_closure(&self) -> bool {
      390 ( 0.00%)          matches!(self.kind(), Closure(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_generator(&self) -> bool {
      580 ( 0.00%)          matches!(self.kind(), Generator(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_integral(&self) -> bool {
    1,547 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh_ty(&self) -> bool {
        .                   matches!(self.kind(), Infer(FreshTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh(&self) -> bool {
    1,338 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_char(&self) -> bool {
        .                   matches!(self.kind(), Char)
        .               }
        .           
        .               #[inline]
        .               pub fn is_numeric(&self) -> bool {
        .                   self.is_integral() || self.is_floating_point()
        .               }
        .           
        .               #[inline]
        .               pub fn is_signed(&self) -> bool {
       11 ( 0.00%)          matches!(self.kind(), Int(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ptr_sized_integral(&self) -> bool {
      384 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
        .               }
        .           
        .               #[inline]
        .               pub fn has_concrete_skeleton(&self) -> bool {
        .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
        .               }
        .           
        .               /// Returns the type and mutability of `*ty`.
        .               ///
        .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
        .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
    1,512 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
    8,715 ( 0.00%)          match self.kind() {
       42 ( 0.00%)              Adt(def, _) if def.is_box() => {
        .                           Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
        .                       }
    5,614 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
        .                       RawPtr(mt) if explicit => Some(*mt),
        .                       _ => None,
        .                   }
    3,024 ( 0.00%)      }
        .           
        .               /// Returns the type of `ty[i]`.
        .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
      451 ( 0.00%)          match self.kind() {
        .                       Array(ty, _) | Slice(ty) => Some(ty),
        .                       _ => None,
        .                   }
       73 ( 0.00%)      }
        .           
    8,816 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
    4,408 ( 0.00%)          match self.kind() {
    3,306 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
        .                       FnPtr(f) => *f,
        .                       Error(_) => {
        .                           // ignore errors (#54954)
        .                           ty::Binder::dummy(FnSig::fake())
        .                       }
        .                       Closure(..) => bug!(
        .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
        .                       ),
        .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
        .                   }
    9,918 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn is_fn(&self) -> bool {
        .                   matches!(self.kind(), FnDef(..) | FnPtr(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fn_ptr(&self) -> bool {
-- line 2027 ----------------------------------------
-- line 2030 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_impl_trait(&self) -> bool {
        .                   matches!(self.kind(), Opaque(..))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
    1,756 ( 0.00%)          match self.kind() {
        .                       Adt(adt, _) => Some(adt),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Iterates over tuple fields.
        .               /// Panics when called on anything but a tuple.
       10 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
      134 ( 0.00%)          match self.kind() {
       76 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
        .                       _ => bug!("tuple_fields called on non-tuple"),
        .                   }
       20 ( 0.00%)      }
        .           
        .               /// Get the `i`-th element of a tuple.
        .               /// Panics when called on anything but a tuple.
        3 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
        6 ( 0.00%)          match self.kind() {
        6 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
        .                       _ => bug!("tuple_fields called on non-tuple"),
        .                   }
        6 ( 0.00%)      }
        .           
        .               /// If the type contains variants, returns the valid range of variant indices.
        .               //
        .               // FIXME: This requires the optimized MIR in the case of generators.
        .               #[inline]
        .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
        .                   match self.kind() {
        .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2073 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// If the type contains variants, returns the variant for `variant_index`.
        .               /// Panics if `variant_index` is out of range.
        .               //
        .               // FIXME: This requires the optimized MIR in the case of generators.
        .               #[inline]
       20 ( 0.00%)      pub fn discriminant_for_variant(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   variant_index: VariantIdx,
        .               ) -> Option<Discr<'tcx>> {
       10 ( 0.00%)          match self.kind() {
        .                       TyKind::Adt(adt, _) if adt.variants.is_empty() => {
        .                           // This can actually happen during CTFE, see
        .                           // https://github.com/rust-lang/rust/issues/89765.
        .                           None
        .                       }
        .                       TyKind::Adt(adt, _) if adt.is_enum() => {
        .                           Some(adt.discriminant_for_variant(tcx, variant_index))
        .                       }
        .                       TyKind::Generator(def_id, substs, _) => {
        .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
        .                       }
        .                       _ => None,
        .                   }
       16 ( 0.00%)      }
        .           
        .               /// Returns the type of the discriminant of this type.
      140 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
       70 ( 0.00%)          match self.kind() {
      112 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
        .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
        .           
        .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
        .                           let assoc_items = tcx.associated_item_def_ids(
        .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
        .                           );
        .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
        .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
        .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
        .           
        .                       ty::Bound(..)
        .                       | ty::Placeholder(_)
        .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
        .                       }
        .                   }
      112 ( 0.00%)      }
        .           
        .               /// Returns the type of metadata for (potentially fat) pointers to this type.
        .               pub fn ptr_metadata_ty(
        .                   &'tcx self,
        .                   tcx: TyCtxt<'tcx>,
        .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
        .               ) -> Ty<'tcx> {
        .                   let tail = tcx.struct_tail_with_normalize(self, normalize);
-- line 2151 ----------------------------------------
-- line 2200 ----------------------------------------
        .               /// function converts such a special type into the closure
        .               /// kind. To go the other way, use
        .               /// `tcx.closure_kind_ty(closure_kind)`.
        .               ///
        .               /// Note that during type checking, we use an inference variable
        .               /// to represent the closure kind, because it has not yet been
        .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
        .               /// is complete, that type variable will be unified.
       54 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
      108 ( 0.00%)          match self.kind() {
      108 ( 0.00%)              Int(int_ty) => match int_ty {
        .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
        .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
        .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
        .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
        .                       },
        .           
        .                       // "Bound" types appear in canonical queries when the
        .                       // closure type is not yet known
        .                       Bound(..) | Infer(_) => None,
        .           
        .                       Error(_) => Some(ty::ClosureKind::Fn),
        .           
        .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
        .                   }
       54 ( 0.00%)      }
        .           
        .               /// Fast path helper for testing if a type is `Sized`.
        .               ///
        .               /// Returning true means the type is known to be sized. Returning
        .               /// `false` means nothing -- could be sized, might not be.
        .               ///
        .               /// Note that we could never rely on the fact that a type such as `[_]` is
        .               /// trivially `!Sized` because we could be in a type environment with a
        .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
        .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
        .               /// this method doesn't return `Option<bool>`.
   28,368 ( 0.01%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
   18,912 ( 0.00%)          match self.kind() {
        .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
        .                       | ty::Uint(_)
        .                       | ty::Int(_)
        .                       | ty::Bool
        .                       | ty::Float(_)
        .                       | ty::FnDef(..)
        .                       | ty::FnPtr(_)
        .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
        .                       | ty::GeneratorWitness(..)
        .                       | ty::Array(..)
        .                       | ty::Closure(..)
        .                       | ty::Never
        .                       | ty::Error(_) => true,
        .           
        .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
        .           
      441 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
        .           
    1,332 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
        .           
        .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
        .           
        .                       ty::Infer(ty::TyVar(_)) => false,
        .           
        .                       ty::Bound(..)
        .                       | ty::Placeholder(..)
        .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
        .                       }
        .                   }
   28,368 ( 0.01%)      }
        .           }
        .           
        .           /// Extra information about why we ended up with a particular variance.
        .           /// This is only used to add more information to error messages, and
        .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
        .           /// may lead to confusing notes in error messages, it will never cause
        .           /// a miscompilation or unsoundness.
        .           ///
-- line 2280 ----------------------------------------
-- line 2295 ----------------------------------------
        .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
        .                   param_index: u32,
        .               },
        .           }
        .           
        .           impl<'tcx> VarianceDiagInfo<'tcx> {
        .               /// Mirrors `Variance::xform` - used to 'combine' the existing
        .               /// and new `VarianceDiagInfo`s when our variance changes.
    4,004 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
        .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
    6,006 ( 0.00%)          match self {
        .                       VarianceDiagInfo::None => other,
        .                       VarianceDiagInfo::Invariant { .. } => self,
        .                   }
    2,002 ( 0.00%)      }
        .           }

1,897,450 ( 0.34%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fast_reject.rs
--------------------------------------------------------------------------------
Ir               

-- line 12 ----------------------------------------
      .           pub type SimplifiedType = SimplifiedTypeGen<DefId>;
      .           
      .           /// See `simplify_type`
      .           ///
      .           /// Note that we keep this type generic over the type of identifier it uses
      .           /// because we sometimes need to use SimplifiedTypeGen values as stable sorting
      .           /// keys (in which case we use a DefPathHash as id-type) but in the general case
      .           /// the non-stable but fast to construct DefId-version is the better choice.
315,028 ( 0.06%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]
      .           pub enum SimplifiedTypeGen<D>
      .           where
      .               D: Copy + Debug + Eq,
      .           {
      .               BoolSimplifiedType,
      .               CharSimplifiedType,
      .               IntSimplifiedType(ty::IntTy),
      .               UintSimplifiedType(ty::UintTy),
-- line 28 ----------------------------------------
-- line 78 ----------------------------------------
      .           ///
      .           /// ¹ meaning that if two outermost layers are different, then the whole types are also different.
      .           /// ² FIXME(@lcnr): this seems like it can actually end up being unsound with the way it's used during
      .           ///   candidate selection. We do not consider non blanket impls for `<_ as Trait>::Assoc` even
      .           ///   though `_` can be inferred to a concrete type later at which point a concrete impl
      .           ///   could actually apply. After experimenting for about an hour I wasn't able to cause any issues
      .           ///   this way so I am not going to change this until we actually find an issue as I am really
      .           ///   interesting in getting an actual test for this.
110,576 ( 0.02%)  pub fn simplify_type(
      .               tcx: TyCtxt<'_>,
      .               ty: Ty<'_>,
      .               can_simplify_params: SimplifyParams,
      .               strip_references: StripReferences,
      .           ) -> Option<SimplifiedType> {
165,864 ( 0.03%)      match *ty.kind() {
      .                   ty::Bool => Some(BoolSimplifiedType),
      .                   ty::Char => Some(CharSimplifiedType),
  8,016 ( 0.00%)          ty::Int(int_type) => Some(IntSimplifiedType(int_type)),
 20,464 ( 0.00%)          ty::Uint(uint_type) => Some(UintSimplifiedType(uint_type)),
     68 ( 0.00%)          ty::Float(float_type) => Some(FloatSimplifiedType(float_type)),
 69,430 ( 0.01%)          ty::Adt(def, _) => Some(AdtSimplifiedType(def.did)),
      .                   ty::Str => Some(StrSimplifiedType),
      .                   ty::Array(..) => Some(ArraySimplifiedType),
      .                   ty::Slice(..) => Some(SliceSimplifiedType),
    476 ( 0.00%)          ty::RawPtr(ptr) => Some(PtrSimplifiedType(ptr.mutbl)),
      .                   ty::Dynamic(ref trait_info, ..) => match trait_info.principal_def_id() {
      .                       Some(principal_def_id) if !tcx.trait_is_auto(principal_def_id) => {
      .                           Some(TraitSimplifiedType(principal_def_id))
      .                       }
      .                       _ => Some(MarkerTraitObjectSimplifiedType),
      .                   },
 15,868 ( 0.00%)          ty::Ref(_, ty, mutbl) => {
  7,934 ( 0.00%)              if strip_references == StripReferences::Yes {
      .                           // For diagnostics, when recommending similar impls we want to
      .                           // recommend impls even when there is a reference mismatch,
      .                           // so we treat &T and T equivalently in that case.
      .                           simplify_type(tcx, ty, can_simplify_params, strip_references)
      .                       } else {
      .                           Some(RefSimplifiedType(mutbl))
      .                       }
      .                   }
     70 ( 0.00%)          ty::FnDef(def_id, _) | ty::Closure(def_id, _) => Some(ClosureSimplifiedType(def_id)),
      .                   ty::Generator(def_id, _, _) => Some(GeneratorSimplifiedType(def_id)),
      .                   ty::GeneratorWitness(ref tys) => {
      .                       Some(GeneratorWitnessSimplifiedType(tys.skip_binder().len()))
      .                   }
      .                   ty::Never => Some(NeverSimplifiedType),
    720 ( 0.00%)          ty::Tuple(ref tys) => Some(TupleSimplifiedType(tys.len())),
    912 ( 0.00%)          ty::FnPtr(ref f) => Some(FunctionSimplifiedType(f.skip_binder().inputs().len())),
      .                   ty::Projection(_) | ty::Param(_) => {
  5,439 ( 0.00%)              if can_simplify_params == SimplifyParams::Yes {
      .                           // In normalized types, projections don't unify with
      .                           // anything. when lazy normalization happens, this
      .                           // will change. It would still be nice to have a way
      .                           // to deal with known-not-to-unify-with-anything
      .                           // projections (e.g., the likes of <__S as Encoder>::Error).
      .                           Some(ParameterSimplifiedType)
      .                       } else {
      .                           None
      .                       }
      .                   }
      .                   ty::Opaque(def_id, _) => Some(OpaqueSimplifiedType(def_id)),
      .                   ty::Foreign(def_id) => Some(ForeignSimplifiedType(def_id)),
      .                   ty::Placeholder(..) | ty::Bound(..) | ty::Infer(_) | ty::Error(_) => None,
      .               }
248,796 ( 0.04%)  }
      .           
      .           impl<D: Copy + Debug + Ord + Eq> SimplifiedTypeGen<D> {
      .               pub fn def(self) -> Option<D> {
      .                   match self {
      .                       AdtSimplifiedType(d)
      .                       | ForeignSimplifiedType(d)
      .                       | TraitSimplifiedType(d)
      .                       | ClosureSimplifiedType(d)
-- line 151 ----------------------------------------

372,371 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fast_reject.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir               

-- line 27 ----------------------------------------
      .           impl CacheEntry {
      .               #[inline]
      .               fn update(
      .                   &mut self,
      .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
      .                   pos: BytePos,
      .                   time_stamp: usize,
      .               ) {
  2,242 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
  1,522 ( 0.00%)              self.file = file;
  2,249 ( 0.00%)              self.file_index = file_idx;
      .                   }
      .           
    772 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
      .                   let line_bounds = self.file.line_bounds(line_index);
  4,058 ( 0.00%)          self.line_number = line_index + 1;
  6,113 ( 0.00%)          self.line = line_bounds;
      .                   self.touch(time_stamp);
      .               }
      .           
      .               #[inline]
      .               fn touch(&mut self, time_stamp: usize) {
 25,872 ( 0.00%)          self.time_stamp = time_stamp;
      .               }
      .           }
      .           
      .           #[derive(Clone)]
      .           pub struct CachingSourceMapView<'sm> {
      .               source_map: &'sm SourceMap,
      .               line_cache: [CacheEntry; 3],
      .               time_stamp: usize,
      .           }
      .           
      .           impl<'sm> CachingSourceMapView<'sm> {
    820 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
      .                   let files = source_map.files();
    410 ( 0.00%)          let first_file = files[0].clone();
      .                   let entry = CacheEntry {
      .                       time_stamp: 0,
      .                       line_number: 0,
      .                       line: BytePos(0)..BytePos(0),
      .                       file: first_file,
      .                       file_index: 0,
      .                   };
      .           
  2,050 ( 0.00%)          CachingSourceMapView {
      .                       source_map,
  2,870 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
      .                       time_stamp: 0,
      .                   }
  1,640 ( 0.00%)      }
      .           
      .               pub fn byte_pos_to_line_and_col(
      .                   &mut self,
      .                   pos: BytePos,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
      .                   self.time_stamp += 1;
      .           
      .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
      .                   };
      .           
      .                   let cache_entry = &mut self.line_cache[oldest];
      .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
      .           
      .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
      .               }
      .           
 97,650 ( 0.02%)      pub fn span_data_to_lines_and_cols(
      .                   &mut self,
      .                   span_data: &SpanData,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
 55,800 ( 0.01%)          self.time_stamp += 1;
      .           
      .                   // Check if lo and hi are in the cached lines.
 13,950 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
 13,950 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
      .           
 24,158 ( 0.00%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
      .                       // Cache hit for span lo and hi. Check if they belong to the same file.
      .                       let result = {
 24,108 ( 0.00%)                  let lo = &self.line_cache[lo_cache_idx as usize];
      .                           let hi = &self.line_cache[hi_cache_idx as usize];
      .           
 72,324 ( 0.01%)                  if lo.file_index != hi.file_index {
      .                               return None;
      .                           }
      .           
      .                           (
 24,108 ( 0.00%)                      lo.file.clone(),
      .                               lo.line_number,
      .                               span_data.lo - lo.line.start,
 12,054 ( 0.00%)                      hi.line_number,
      .                               span_data.hi - hi.line.start,
      .                           )
      .                       };
      .           
 12,054 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
 12,054 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
      .           
 48,216 ( 0.01%)              return Some(result);
      .                   }
      .           
      .                   // No cache hit or cache hit for only one of span lo and hi.
  3,742 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
      .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
      .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
      .                   } else {
      .                       self.oldest_cache_entry_index()
      .                   };
      .           
      .                   // If the entry doesn't point to the correct file, get the new file and index.
      .                   // Return early if the file containing beginning of span doesn't contain end of span.
 14,100 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
  5,620 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
  6,744 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
    132 ( 0.00%)                  return None;
      .                       }
      .           
  3,968 ( 0.00%)              Some(new_file_and_idx)
      .                   } else {
      .                       let file = &self.line_cache[oldest].file;
  2,316 ( 0.00%)              if !file_contains(&file, span_data.hi) {
      .                           return None;
      .                       }
      .           
  2,316 ( 0.00%)              None
      .                   };
      .           
      .                   // Update the cache entries.
  8,820 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, -1) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      .           
  4,500 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
      .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
      .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
      .                               let hi = &mut self.line_cache[next_oldest];
      .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
      .                               (oldest, next_oldest)
      .                           } else {
      .                               (oldest, oldest)
      .                           }
      .                       }
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, _) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
     50 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
     75 ( 0.00%)                  hi.touch(self.time_stamp);
      .                           (oldest, hi_cache_idx as usize)
      .                       }
      .                       // Oldest cache entry is for span_data.hi line.
      .                       (_, -1) => {
      .                           let hi = &mut self.line_cache[oldest];
    239 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
    478 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
    956 ( 0.00%)                  lo.touch(self.time_stamp);
      .                           (lo_cache_idx as usize, oldest)
      .                       }
      .                       _ => {
      .                           panic!();
      .                       }
      .                   };
      .           
      .                   let lo = &self.line_cache[lo_idx];
      .                   let hi = &self.line_cache[hi_idx];
      .           
      .                   // Span lo and hi may equal line end when last line doesn't
      .                   // end in newline, hence the inclusive upper bounds below.
  3,528 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
  1,764 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
  3,528 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
  1,764 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
  8,820 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
  5,292 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
  5,292 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
      .           
  5,292 ( 0.00%)          Some((
  1,764 ( 0.00%)              lo.file.clone(),
      .                       lo.line_number,
      .                       span_data.lo - lo.line.start,
  1,764 ( 0.00%)              hi.line_number,
      .                       span_data.hi - hi.line.start,
      .                   ))
125,550 ( 0.02%)      }
      .           
      .               fn cache_entry_index(&self, pos: BytePos) -> isize {
      .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
146,570 ( 0.03%)              if cache_entry.line.contains(&pos) {
      .                           return idx as isize;
      .                       }
      .                   }
      .           
      .                   -1
      .               }
      .           
      .               fn oldest_cache_entry_index(&self) -> usize {
      .                   let mut oldest = 0;
      .           
      .                   for idx in 1..self.line_cache.len() {
  9,792 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
      .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
      .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
      .           
      .                   for idx in 0..self.line_cache.len() {
  3,153 ( 0.00%)              if idx != avoid_idx
  1,635 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
      .                       {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
  5,620 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
  1,124 ( 0.00%)          if !self.source_map.files().is_empty() {
  2,248 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
      .                       let file = &self.source_map.files()[file_idx];
      .           
  8,992 ( 0.00%)              if file_contains(file, pos) {
      .                           return Some((file.clone(), file_idx));
      .                       }
      .                   }
      .           
      .                   None
  5,620 ( 0.00%)      }
      .           }
      .           
      .           #[inline]
      .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
      .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
      .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
      .               // purposes of converting a byte position to a line and column number, we can't come up with a
      .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

183,407 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .                   #[inline]
        .                   pub fn $fn_name(
        .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
        .                       mut value: $int_ty,
        .                   ) -> &[u8] {
        .                       let mut i = 0;
        .           
        .                       loop {
   51,954 ( 0.01%)                  if value < 0x80 {
        .                               unsafe {
   24,969 ( 0.00%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
        .                               }
        .           
   34,510 ( 0.01%)                      i += 1;
        .                               break;
        .                           } else {
        .                               unsafe {
   23,108 ( 0.00%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
        .                               }
        .           
    9,948 ( 0.00%)                      value >>= 7;
        .                               i += 1;
        .                           }
        .                       }
        .           
        .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
        .                   }
        .               };
        .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
        .           macro_rules! impl_read_unsigned_leb128 {
        .               ($fn_name:ident, $int_ty:ty) => {
        .                   #[inline]
        .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
        .                       // The first iteration of this loop is unpeeled. This is a
        .                       // performance win because this code is hot and integer values less
        .                       // than 128 are very common, typically occurring 50-80% or more of
        .                       // the time, even for u64 and u128.
2,013,556 ( 0.36%)              let byte = slice[*position];
1,006,778 ( 0.18%)              *position += 1;
1,006,778 ( 0.18%)              if (byte & 0x80) == 0 {
      382 ( 0.00%)                  return byte as $int_ty;
        .                       }
    1,172 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
        .                       let mut shift = 7;
        .                       loop {
  711,525 ( 0.13%)                  let byte = slice[*position];
  467,064 ( 0.08%)                  *position += 1;
  474,350 ( 0.08%)                  if (byte & 0x80) == 0 {
  371,119 ( 0.07%)                      result |= (byte as $int_ty) << shift;
        .                               return result;
        .                           } else {
        .                               result |= ((byte & 0x7F) as $int_ty) << shift;
        .                           }
        .                           shift += 7;
        .                       }
        .                   }
        .               };
-- line 80 ----------------------------------------

  773,306 ( 0.14%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 208 ----------------------------------------
      .               /// There is no built-in impl. There may be some other
      .               /// candidate (a where-clause or user-defined impl).
      .               None,
      .               /// It is unknown whether there is an impl.
      .               Ambiguous,
      .           }
      .           
      .           impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {
 30,882 ( 0.01%)      pub fn new(infcx: &'cx InferCtxt<'cx, 'tcx>) -> SelectionContext<'cx, 'tcx> {
249,407 ( 0.04%)          SelectionContext {
      .                       infcx,
 37,654 ( 0.01%)              freshener: infcx.freshener_keep_static(),
      .                       intercrate: false,
      .                       intercrate_ambiguity_causes: None,
      .                       allow_negative_impls: false,
      .                       query_mode: TraitQueryMode::Standard,
      .                   }
 25,735 ( 0.00%)      }
      .           
      6 ( 0.00%)      pub fn intercrate(infcx: &'cx InferCtxt<'cx, 'tcx>) -> SelectionContext<'cx, 'tcx> {
     64 ( 0.00%)          SelectionContext {
      .                       infcx,
      7 ( 0.00%)              freshener: infcx.freshener_keep_static(),
      .                       intercrate: true,
      .                       intercrate_ambiguity_causes: None,
      .                       allow_negative_impls: false,
      .                       query_mode: TraitQueryMode::Standard,
      .                   }
      5 ( 0.00%)      }
      .           
      .               pub fn with_negative(
      .                   infcx: &'cx InferCtxt<'cx, 'tcx>,
      .                   allow_negative_impls: bool,
      .               ) -> SelectionContext<'cx, 'tcx> {
      .                   debug!(?allow_negative_impls, "with_negative");
      .                   SelectionContext {
      .                       infcx,
-- line 244 ----------------------------------------
-- line 245 ----------------------------------------
      .                       freshener: infcx.freshener_keep_static(),
      .                       intercrate: false,
      .                       intercrate_ambiguity_causes: None,
      .                       allow_negative_impls,
      .                       query_mode: TraitQueryMode::Standard,
      .                   }
      .               }
      .           
  5,368 ( 0.00%)      pub fn with_query_mode(
      .                   infcx: &'cx InferCtxt<'cx, 'tcx>,
      .                   query_mode: TraitQueryMode,
      .               ) -> SelectionContext<'cx, 'tcx> {
      .                   debug!(?query_mode, "with_query_mode");
 10,736 ( 0.00%)          SelectionContext {
      .                       infcx,
    671 ( 0.00%)              freshener: infcx.freshener_keep_static(),
      .                       intercrate: false,
      .                       intercrate_ambiguity_causes: None,
      .                       allow_negative_impls: false,
      .                       query_mode,
      .                   }
  4,026 ( 0.00%)      }
      .           
      .               /// Enables tracking of intercrate ambiguity causes. These are
      .               /// used in coherence to give improved diagnostics. We don't do
      .               /// this until we detect a coherence error because it can lead to
      .               /// false overflow results (#47139) and because it costs
      .               /// computation time.
      .               pub fn enable_tracking_intercrate_ambiguity_causes(&mut self) {
      .                   assert!(self.intercrate);
-- line 274 ----------------------------------------
-- line 281 ----------------------------------------
      .               /// was enabled and disables tracking at the same time. If
      .               /// tracking is not enabled, just returns an empty vector.
      .               pub fn take_intercrate_ambiguity_causes(&mut self) -> Vec<IntercrateAmbiguityCause> {
      .                   assert!(self.intercrate);
      .                   self.intercrate_ambiguity_causes.take().unwrap_or_default()
      .               }
      .           
      .               pub fn infcx(&self) -> &'cx InferCtxt<'cx, 'tcx> {
154,442 ( 0.03%)          self.infcx
  4,178 ( 0.00%)      }
      .           
      .               pub fn tcx(&self) -> TyCtxt<'tcx> {
150,682 ( 0.03%)          self.infcx.tcx
      .               }
      .           
      .               pub fn is_intercrate(&self) -> bool {
  8,888 ( 0.00%)          self.intercrate
      .               }
      .           
      .               ///////////////////////////////////////////////////////////////////////////
      .               // Selection
      .               //
      .               // The selection phase tries to identify *how* an obligation will
      .               // be resolved. For example, it will identify which impl or
      .               // parameter bound is to be used. The process can be inconclusive
-- line 305 ----------------------------------------
-- line 309 ----------------------------------------
      .               // 1. If no applicable impl or parameter bound can be found.
      .               // 2. If the output type parameters in the obligation do not match
      .               //    those specified by the impl/bound. For example, if the obligation
      .               //    is `Vec<Foo>: Iterable<Bar>`, but the impl specifies
      .               //    `impl<T> Iterable<T> for Vec<T>`, than an error would result.
      .           
      .               /// Attempts to satisfy the obligation. If successful, this will affect the surrounding
      .               /// type environment by performing unification.
 31,724 ( 0.01%)      #[instrument(level = "debug", skip(self))]
 40,788 ( 0.01%)      pub fn select(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .               ) -> SelectionResult<'tcx, Selection<'tcx>> {
 33,522 ( 0.01%)          let candidate = match self.select_from_obligation(obligation) {
      .                       Err(SelectionError::Overflow) => {
      .                           // In standard mode, overflow must have been caught and reported
      .                           // earlier.
      .                           assert!(self.query_mode == TraitQueryMode::Canonical);
      .                           return Err(SelectionError::Overflow);
      .                       }
      .                       Err(SelectionError::Ambiguous(_)) => {
      .                           return Ok(None);
      .                       }
      .                       Err(e) => {
 10,780 ( 0.00%)                  return Err(e);
      .                       }
      .                       Ok(None) => {
  3,270 ( 0.00%)                  return Ok(None);
      .                       }
 15,258 ( 0.00%)              Ok(Some(candidate)) => candidate,
      .                   };
      .           
 25,514 ( 0.00%)          match self.confirm_candidate(obligation, candidate) {
      .                       Err(SelectionError::Overflow) => {
      .                           assert!(self.query_mode == TraitQueryMode::Canonical);
      .                           Err(SelectionError::Overflow)
      .                       }
    546 ( 0.00%)              Err(e) => Err(e),
      .                       Ok(candidate) => {
      .                           debug!(?candidate, "confirmed");
 30,012 ( 0.01%)                  Ok(Some(candidate))
      .                       }
      .                   }
      .               }
      .           
 45,320 ( 0.01%)      crate fn select_from_obligation(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
      .                   debug_assert!(!obligation.predicate.has_escaping_bound_vars());
      .           
      .                   let pec = &ProvisionalEvaluationCache::default();
      .                   let stack = self.push_stack(TraitObligationStackList::empty(pec), obligation);
      .           
  9,064 ( 0.00%)          self.candidate_from_obligation(&stack)
 40,788 ( 0.01%)      }
      .           
      .               ///////////////////////////////////////////////////////////////////////////
      .               // EVALUATION
      .               //
      .               // Tests whether an obligation can be selected or whether an impl
      .               // can be applied to particular types. It skips the "confirmation"
      .               // step and hence completely ignores output type parameters.
      .               //
-- line 372 ----------------------------------------
-- line 374 ----------------------------------------
      .               // we can be sure it does not.
      .           
      .               /// Evaluates whether the obligation `obligation` can be satisfied (by any means).
      .               pub fn predicate_may_hold_fatal(&mut self, obligation: &PredicateObligation<'tcx>) -> bool {
      .                   debug!(?obligation, "predicate_may_hold_fatal");
      .           
      .                   // This fatal query is a stopgap that should only be used in standard mode,
      .                   // where we do not expect overflow to be propagated.
      4 ( 0.00%)          assert!(self.query_mode == TraitQueryMode::Standard);
      .           
     20 ( 0.00%)          self.evaluate_root_obligation(obligation)
      .                       .expect("Overflow should be caught earlier in standard query mode")
      .                       .may_apply()
      .               }
      .           
      .               /// Evaluates whether the obligation `obligation` can be satisfied
      .               /// and returns an `EvaluationResult`. This is meant for the
      .               /// *initial* call.
  1,342 ( 0.00%)      pub fn evaluate_root_obligation(
      .                   &mut self,
      .                   obligation: &PredicateObligation<'tcx>,
      .               ) -> Result<EvaluationResult, OverflowError> {
      .                   self.evaluation_probe(|this| {
  2,025 ( 0.00%)              this.evaluate_predicate_recursively(
      .                           TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),
      .                           obligation.clone(),
      .                       )
      .                   })
  1,342 ( 0.00%)      }
      .           
      .               fn evaluation_probe(
      .                   &mut self,
      .                   op: impl FnOnce(&mut Self) -> Result<EvaluationResult, OverflowError>,
      .               ) -> Result<EvaluationResult, OverflowError> {
 27,432 ( 0.00%)          self.infcx.probe(|snapshot| -> Result<EvaluationResult, OverflowError> {
  1,350 ( 0.00%)              let result = op(self)?;
      .           
 24,206 ( 0.00%)              match self.infcx.leak_check(true, snapshot) {
      .                           Ok(()) => {}
      .                           Err(_) => return Ok(EvaluatedToErr),
      .                       }
      .           
 17,290 ( 0.00%)              match self.infcx.region_constraints_added_in_snapshot(snapshot) {
      .                           None => Ok(result),
      .                           Some(_) => Ok(result.max(EvaluatedToOkModuloRegions)),
      .                       }
      .                   })
      .               }
      .           
      .               /// Evaluates the predicates in `predicates` recursively. Note that
      .               /// this applies projections in the predicates, and therefore
      .               /// is run within an inference probe.
 34,660 ( 0.01%)      #[instrument(skip(self, stack), level = "debug")]
      .               fn evaluate_predicates_recursively<'o, I>(
      .                   &mut self,
      .                   stack: TraitObligationStackList<'o, 'tcx>,
      .                   predicates: I,
      .               ) -> Result<EvaluationResult, OverflowError>
      .               where
      .                   I: IntoIterator<Item = PredicateObligation<'tcx>> + std::fmt::Debug,
      .               {
      .                   let mut result = EvaluatedToOk;
 19,996 ( 0.00%)          for obligation in predicates {
  5,120 ( 0.00%)              let eval = self.evaluate_predicate_recursively(stack, obligation.clone())?;
  2,560 ( 0.00%)              if let EvaluatedToErr = eval {
      .                           // fast-path - EvaluatedToErr is the top of the lattice,
      .                           // so we don't need to look on the other predicates.
      .                           return Ok(EvaluatedToErr);
      .                       } else {
      .                           result = cmp::max(result, eval);
      .                       }
      .                   }
      .                   Ok(result)
      .               }
      .           
 19,550 ( 0.00%)      #[instrument(
      .                   level = "debug",
      .                   skip(self, previous_stack),
      .                   fields(previous_stack = ?previous_stack.head())
 17,595 ( 0.00%)      )]
      .               fn evaluate_predicate_recursively<'o>(
      .                   &mut self,
      .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
      .                   obligation: PredicateObligation<'tcx>,
      .               ) -> Result<EvaluationResult, OverflowError> {
      .                   // `previous_stack` stores a `TraitObligation`, while `obligation` is
      .                   // a `PredicateObligation`. These are distinct types, so we can't
      .                   // use any `Option` combinator method that would force them to be
      .                   // the same.
  3,910 ( 0.00%)          match previous_stack.head() {
  2,560 ( 0.00%)              Some(h) => self.check_recursion_limit(&obligation, h.obligation)?,
    675 ( 0.00%)              None => self.check_recursion_limit(&obligation, &obligation)?,
      .                   }
      .           
 11,730 ( 0.00%)          let result = ensure_sufficient_stack(|| {
  1,955 ( 0.00%)              let bound_predicate = obligation.predicate.kind();
 19,550 ( 0.00%)              match bound_predicate.skip_binder() {
      .                           ty::PredicateKind::Trait(t) => {
      .                               let t = bound_predicate.rebind(t);
      .                               debug_assert!(!t.has_escaping_bound_vars());
      .                               let obligation = obligation.with(t);
 29,025 ( 0.01%)                      self.evaluate_trait_predicate_recursively(previous_stack, obligation)
      .                           }
      .           
      .                           ty::PredicateKind::Subtype(p) => {
      .                               let p = bound_predicate.rebind(p);
      .                               // Does this code ever run?
     30 ( 0.00%)                      match self.infcx.subtype_predicate(&obligation.cause, obligation.param_env, p) {
      .                                   Some(Ok(InferOk { mut obligations, .. })) => {
      .                                       self.add_depth(obligations.iter_mut(), obligation.recursion_depth);
      .                                       self.evaluate_predicates_recursively(
      .                                           previous_stack,
      .                                           obligations.into_iter(),
      .                                       )
      .                                   }
      .                                   Some(Err(_)) => Ok(EvaluatedToErr),
-- line 489 ----------------------------------------
-- line 545 ----------------------------------------
      .                               } else {
      .                                   Ok(EvaluatedToErr)
      .                               }
      .                           }
      .           
      .                           ty::PredicateKind::Projection(data) => {
      .                               let data = bound_predicate.rebind(data);
      .                               let project_obligation = obligation.with(data);
    108 ( 0.00%)                      match project::poly_project_and_unify_type(self, &project_obligation) {
     90 ( 0.00%)                          Ok(Ok(Some(mut subobligations))) => {
      .                                       'compute_res: {
      .                                           // If we've previously marked this projection as 'complete', thne
      .                                           // use the final cached result (either `EvaluatedToOk` or
      .                                           // `EvaluatedToOkModuloRegions`), and skip re-evaluating the
      .                                           // sub-obligations.
     72 ( 0.00%)                                  if let Some(key) =
    162 ( 0.00%)                                      ProjectionCacheKey::from_poly_projection_predicate(self, data)
      .                                           {
    144 ( 0.00%)                                      if let Some(cached_res) = self
      .                                                   .infcx
      .                                                   .inner
      .                                                   .borrow_mut()
      .                                                   .projection_cache()
      .                                                   .is_complete(key)
      .                                               {
      .                                                   break 'compute_res Ok(cached_res);
      .                                               }
      .                                           }
      .           
     36 ( 0.00%)                                  self.add_depth(
      .                                               subobligations.iter_mut(),
     36 ( 0.00%)                                      obligation.recursion_depth,
      .                                           );
     36 ( 0.00%)                                  let res = self.evaluate_predicates_recursively(
     54 ( 0.00%)                                      previous_stack,
     90 ( 0.00%)                                      subobligations,
      .                                           );
     72 ( 0.00%)                                  if let Ok(res) = res {
     36 ( 0.00%)                                      if res == EvaluatedToOk || res == EvaluatedToOkModuloRegions {
     72 ( 0.00%)                                          if let Some(key) =
     18 ( 0.00%)                                              ProjectionCacheKey::from_poly_projection_predicate(
    126 ( 0.00%)                                                  self, data,
      .                                                       )
      .                                                   {
      .                                                       // If the result is something that we can cache, then mark this
      .                                                       // entry as 'complete'. This will allow us to skip evaluating the
      .                                                       // suboligations at all the next time we evaluate the projection
      .                                                       // predicate.
    126 ( 0.00%)                                              self.infcx
      .                                                           .inner
      .                                                           .borrow_mut()
      .                                                           .projection_cache()
      .                                                           .complete(key, res);
      .                                                   }
      .                                               }
      .                                           }
      .                                           res
-- line 601 ----------------------------------------
-- line 693 ----------------------------------------
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
      .                               bug!("TypeWellFormedFromEnv is only used for chalk")
      .                           }
      .                       }
  1,955 ( 0.00%)          });
      .           
      .                   debug!("finished: {:?} from {:?}", result, obligation);
      .           
      .                   result
      .               }
      .           
 40,635 ( 0.01%)      #[instrument(skip(self, previous_stack), level = "debug")]
      .               fn evaluate_trait_predicate_recursively<'o>(
      .                   &mut self,
      .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
      .                   mut obligation: TraitObligation<'tcx>,
      .               ) -> Result<EvaluationResult, OverflowError> {
  3,870 ( 0.00%)          if !self.intercrate
      .                       && obligation.is_global()
      .                       && obligation.param_env.caller_bounds().iter().all(|bound| bound.needs_subst())
      .                   {
      .                       // If a param env has no global bounds, global obligations do not
      .                       // depend on its particular value in order to work, so we can clear
      .                       // out the param env and get better caching.
      .                       debug!("in global");
  1,234 ( 0.00%)              obligation.param_env = obligation.param_env.without_caller_bounds();
      .                   }
      .           
      .                   let stack = self.push_stack(previous_stack, &obligation);
      .                   let mut fresh_trait_pred = stack.fresh_trait_pred;
  3,870 ( 0.00%)          let mut param_env = obligation.param_env;
      .           
      .                   fresh_trait_pred = fresh_trait_pred.map_bound(|mut pred| {
  1,935 ( 0.00%)              pred.remap_constness(self.tcx(), &mut param_env);
 23,220 ( 0.00%)              pred
      .                   });
      .           
      .                   debug!(?fresh_trait_pred);
      .           
  1,998 ( 0.00%)          if let Some(result) = self.check_evaluation_cache(param_env, fresh_trait_pred) {
      .                       debug!(?result, "CACHE HIT");
      .                       return Ok(result);
      .                   }
      .           
      .                   if let Some(result) = stack.cache().get_provisional(fresh_trait_pred) {
      .                       debug!(?result, "PROVISIONAL CACHE HIT");
      .                       stack.update_reached_depth(result.reached_depth);
      .                       return Ok(result.result);
-- line 744 ----------------------------------------
-- line 748 ----------------------------------------
      .                   // stack. If so, we don't want to insert the result into the
      .                   // main cache (it is cycle dependent) nor the provisional
      .                   // cache (which is meant for things that have completed but
      .                   // for a "backedge" -- this result *is* the backedge).
      .                   if let Some(cycle_result) = self.check_evaluation_cycle(&stack) {
      .                       return Ok(cycle_result);
      .                   }
      .           
  9,027 ( 0.00%)          let (result, dep_node) = self.in_task(|this| this.evaluate_stack(&stack));
  1,003 ( 0.00%)          let result = result?;
      .           
  5,015 ( 0.00%)          if !result.must_apply_modulo_regions() {
      .                       stack.cache().on_failure(stack.dfn);
      .                   }
      .           
  1,003 ( 0.00%)          let reached_depth = stack.reached_depth.get();
  2,006 ( 0.00%)          if reached_depth >= stack.depth {
      .                       debug!(?result, "CACHE MISS");
 19,057 ( 0.00%)              self.insert_evaluation_cache(param_env, fresh_trait_pred, dep_node, result);
      .           
      .                       stack.cache().on_completion(
  2,006 ( 0.00%)                  stack.dfn,
      .                           |fresh_trait_pred, provisional_result, provisional_dep_node| {
      .                               // Create a new `DepNode` that has dependencies on:
      .                               // * The `DepNode` for the original evaluation that resulted in a provisional cache
      .                               // entry being crated
      .                               // * The `DepNode` for the *current* evaluation, which resulted in us completing
      .                               // provisional caches entries and inserting them into the evaluation cache
      .                               //
      .                               // This ensures that when a query reads this entry from the evaluation cache,
-- line 777 ----------------------------------------
-- line 839 ----------------------------------------
      .               fn check_evaluation_cycle(
      .                   &mut self,
      .                   stack: &TraitObligationStack<'_, 'tcx>,
      .               ) -> Option<EvaluationResult> {
      .                   if let Some(cycle_depth) = stack
      .                       .iter()
      .                       .skip(1) // Skip top-most frame.
      .                       .find(|prev| {
  1,894 ( 0.00%)                  stack.obligation.param_env == prev.obligation.param_env
      .                               && stack.fresh_trait_pred == prev.fresh_trait_pred
      .                       })
      .                       .map(|stack| stack.depth)
      .                   {
      .                       debug!("evaluate_stack --> recursive at depth {}", cycle_depth);
      .           
      .                       // If we have a stack like `A B C D E A`, where the top of
      .                       // the stack is the final `A`, then this will iterate over
-- line 855 ----------------------------------------
-- line 874 ----------------------------------------
      .                           debug!("evaluate_stack --> recursive, inductive");
      .                           Some(EvaluatedToRecur)
      .                       }
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
  9,027 ( 0.00%)      fn evaluate_stack<'o>(
      .                   &mut self,
      .                   stack: &TraitObligationStack<'o, 'tcx>,
      .               ) -> Result<EvaluationResult, OverflowError> {
      .                   // In intercrate mode, whenever any of the generics are unbound,
      .                   // there can always be an impl. Even if there are no impls in
      .                   // this crate, perhaps the type would be unified with
      .                   // something from another crate that does provide an impl.
      .                   //
-- line 890 ----------------------------------------
-- line 903 ----------------------------------------
      .                   // imagine, this is just where we started. To avoid that, we
      .                   // check for unbound variables and return an ambiguous (hence possible)
      .                   // match if we've seen this trait before.
      .                   //
      .                   // This suffices to allow chains like `FnMut` implemented in
      .                   // terms of `Fn` etc, but we could probably make this more
      .                   // precise still.
      .                   let unbound_input_types =
  1,003 ( 0.00%)              stack.fresh_trait_pred.skip_binder().trait_ref.substs.types().any(|ty| ty.is_fresh());
      .           
  3,009 ( 0.00%)          if stack.obligation.polarity() != ty::ImplPolarity::Negative {
      .                       // This check was an imperfect workaround for a bug in the old
      .                       // intercrate mode; it should be removed when that goes away.
  5,015 ( 0.00%)              if unbound_input_types && self.intercrate {
      .                           debug!("evaluate_stack --> unbound argument, intercrate -->  ambiguous",);
      .                           // Heuristics: show the diagnostics when there are no candidates in crate.
      .                           if self.intercrate_ambiguity_causes.is_some() {
      .                               debug!("evaluate_stack: intercrate_ambiguity_causes is some");
      .                               if let Ok(candidate_set) = self.assemble_candidates(stack) {
      .                                   if !candidate_set.ambiguous && candidate_set.vec.is_empty() {
      .                                       let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;
      .                                       let self_ty = trait_ref.self_ty();
-- line 924 ----------------------------------------
-- line 937 ----------------------------------------
      .                                       self.intercrate_ambiguity_causes.as_mut().unwrap().push(cause);
      .                                   }
      .                               }
      .                           }
      .                           return Ok(EvaluatedToAmbig);
      .                       }
      .                   }
      .           
  2,006 ( 0.00%)          if unbound_input_types
      .                       && stack.iter().skip(1).any(|prev| {
    126 ( 0.00%)                  stack.obligation.param_env == prev.obligation.param_env
      .                               && self.match_fresh_trait_refs(
    168 ( 0.00%)                          stack.fresh_trait_pred,
    168 ( 0.00%)                          prev.fresh_trait_pred,
      .                                   prev.obligation.param_env,
      .                               )
      .                       })
      .                   {
      .                       debug!("evaluate_stack --> unbound argument, recursive --> giving up",);
      .                       return Ok(EvaluatedToUnknown);
      .                   }
      .           
  9,520 ( 0.00%)          match self.candidate_from_obligation(stack) {
  4,722 ( 0.00%)              Ok(Some(c)) => self.evaluate_candidate(stack, &c),
      .                       Err(SelectionError::Ambiguous(_)) => Ok(EvaluatedToAmbig),
      .                       Ok(None) => Ok(EvaluatedToAmbig),
      .                       Err(Overflow) => Err(OverflowError::Canonical),
      .                       Err(ErrorReporting) => Err(OverflowError::ErrorReporting),
      .                       Err(..) => Ok(EvaluatedToErr),
      .                   }
 10,030 ( 0.00%)      }
      .           
      .               /// For defaulted traits, we use a co-inductive strategy to solve, so
      .               /// that recursion is ok. This routine returns `true` if the top of the
      .               /// stack (`cycle[0]`):
      .               ///
      .               /// - is a defaulted trait,
      .               /// - it also appears in the backtrace at some position `X`,
      .               /// - all the predicates at positions `X..` between `X` and the top are
-- line 975 ----------------------------------------
-- line 998 ----------------------------------------
      .                   skip(self, stack),
      .                   fields(depth = stack.obligation.recursion_depth)
      .               )]
      .               fn evaluate_candidate<'o>(
      .                   &mut self,
      .                   stack: &TraitObligationStack<'o, 'tcx>,
      .                   candidate: &SelectionCandidate<'tcx>,
      .               ) -> Result<EvaluationResult, OverflowError> {
  3,138 ( 0.00%)          let mut result = self.evaluation_probe(|this| {
      .                       let candidate = (*candidate).clone();
 25,297 ( 0.00%)              match this.confirm_candidate(stack.obligation, candidate) {
      .                           Ok(selection) => {
      .                               debug!(?selection);
  6,276 ( 0.00%)                      this.evaluate_predicates_recursively(
      .                                   stack.list(),
 20,397 ( 0.00%)                          selection.nested_obligations().into_iter(),
      .                               )
      .                           }
      .                           Err(..) => Ok(EvaluatedToErr),
      .                       }
      .                   })?;
      .           
      .                   // If we erased any lifetimes, then we want to use
      .                   // `EvaluatedToOkModuloRegions` instead of `EvaluatedToOk`
-- line 1021 ----------------------------------------
-- line 1037 ----------------------------------------
      .                   &self,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   trait_pred: ty::PolyTraitPredicate<'tcx>,
      .               ) -> Option<EvaluationResult> {
      .                   // Neither the global nor local cache is aware of intercrate
      .                   // mode, so don't do any caching. In particular, we might
      .                   // re-use the same `InferCtxt` with both an intercrate
      .                   // and non-intercrate `SelectionContext`
  3,870 ( 0.00%)          if self.intercrate {
      .                       return None;
      .                   }
      .           
      .                   let tcx = self.tcx();
      .                   if self.can_use_global_caches(param_env) {
 13,335 ( 0.00%)              if let Some(res) = tcx.evaluation_cache.get(&param_env.and(trait_pred), tcx) {
      .                           return Some(res);
      .                       }
      .                   }
  3,996 ( 0.00%)          self.infcx.evaluation_cache.get(&param_env.and(trait_pred), tcx)
      .               }
      .           
 12,036 ( 0.00%)      fn insert_evaluation_cache(
      .                   &mut self,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   trait_pred: ty::PolyTraitPredicate<'tcx>,
      .                   dep_node: DepNodeIndex,
      .                   result: EvaluationResult,
      .               ) {
      .                   // Avoid caching results that depend on more than just the trait-ref
      .                   // - the stack can create recursion.
  4,012 ( 0.00%)          if result.is_stack_dependent() {
      .                       return;
      .                   }
      .           
      .                   // Neither the global nor local cache is aware of intercrate
      .                   // mode, so don't do any caching. In particular, we might
      .                   // re-use the same `InferCtxt` with both an intercrate
      .                   // and non-intercrate `SelectionContext`
  2,006 ( 0.00%)          if self.intercrate {
      .                       return;
      .                   }
      .           
      .                   if self.can_use_global_caches(param_env) {
      .                       if !trait_pred.needs_infer() {
      .                           debug!(?trait_pred, ?result, "insert_evaluation_cache global");
      .                           // This may overwrite the cache with the same value
      .                           // FIXME: Due to #50507 this overwrites the different values
      .                           // This should be changed to use HashMapExt::insert_same
      .                           // when that is fixed
    977 ( 0.00%)                  self.tcx().evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);
      .                           return;
      .                       }
      .                   }
      .           
      .                   debug!(?trait_pred, ?result, "insert_evaluation_cache");
     72 ( 0.00%)          self.infcx.evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);
  8,024 ( 0.00%)      }
      .           
      .               /// For various reasons, it's possible for a subobligation
      .               /// to have a *lower* recursion_depth than the obligation used to create it.
      .               /// Projection sub-obligations may be returned from the projection cache,
      .               /// which results in obligations with an 'old' `recursion_depth`.
      .               /// Additionally, methods like `InferCtxt.subtype_predicate` produce
      .               /// subobligations without taking in a 'parent' depth, causing the
      .               /// generated subobligations to have a `recursion_depth` of `0`.
      .               ///
      .               /// To ensure that obligation_depth never decreases, we force all subobligations
      .               /// to have at least the depth of the original obligation.
     18 ( 0.00%)      fn add_depth<T: 'cx, I: Iterator<Item = &'cx mut Obligation<'tcx, T>>>(
      .                   &self,
      .                   it: I,
      .                   min_depth: usize,
      .               ) {
      .                   it.for_each(|o| o.recursion_depth = cmp::max(min_depth, o.recursion_depth) + 1);
     36 ( 0.00%)      }
      .           
      .               fn check_recursion_depth<T: Display + TypeFoldable<'tcx>>(
      .                   &self,
      .                   depth: usize,
      .                   error_obligation: &Obligation<'tcx, T>,
      .               ) -> Result<(), OverflowError> {
 29,960 ( 0.01%)          if !self.infcx.tcx.recursion_limit().value_within_limit(depth) {
      .                       match self.query_mode {
      .                           TraitQueryMode::Standard => {
      .                               if self.infcx.is_tainted_by_errors() {
      .                                   return Err(OverflowError::ErrorReporting);
      .                               }
      .                               self.infcx.report_overflow_error(error_obligation, true);
      .                           }
      .                           TraitQueryMode::Canonical => {
-- line 1126 ----------------------------------------
-- line 1143 ----------------------------------------
      .               ) -> Result<(), OverflowError> {
      .                   self.check_recursion_depth(obligation.recursion_depth, error_obligation)
      .               }
      .           
      .               fn in_task<OP, R>(&mut self, op: OP) -> (R, DepNodeIndex)
      .               where
      .                   OP: FnOnce(&mut Self) -> R,
      .               {
 19,383 ( 0.00%)          let (result, dep_node) =
 16,970 ( 0.00%)              self.tcx().dep_graph.with_anon_task(self.tcx(), DepKind::TraitSelect, || op(self));
      .                   self.tcx().dep_graph.read_index(dep_node);
 17,892 ( 0.00%)          (result, dep_node)
      .               }
      .           
      .               /// filter_impls filters constant trait obligations and candidates that have a positive impl
      .               /// for a negative goal and a negative impl for a positive goal
      .               #[instrument(level = "debug", skip(self))]
      .               fn filter_impls(
      .                   &mut self,
      .                   candidates: Vec<SelectionCandidate<'tcx>>,
      .                   obligation: &TraitObligation<'tcx>,
      .               ) -> Vec<SelectionCandidate<'tcx>> {
      .                   let tcx = self.tcx();
      .                   let mut result = Vec::with_capacity(candidates.len());
      .           
 27,261 ( 0.00%)          for candidate in candidates {
      .                       // Respect const trait obligations
  5,493 ( 0.00%)              if obligation.is_const() {
      .                           match candidate {
      .                               // const impl
      .                               ImplCandidate(def_id)
      .                                   if tcx.impl_constness(def_id) == hir::Constness::Const => {}
      .                               // const param
      .                               ParamCandidate(trait_pred)
      .                                   if trait_pred.skip_binder().constness
      .                                       == ty::BoundConstness::ConstIfConst => {}
-- line 1178 ----------------------------------------
-- line 1186 ----------------------------------------
      .                               ConstDropCandidate(_) => {}
      .                               _ => {
      .                                   // reject all other types of candidates
      .                                   continue;
      .                               }
      .                           }
      .                       }
      .           
  3,662 ( 0.00%)              if let ImplCandidate(def_id) = candidate {
  2,606 ( 0.00%)                  if ty::ImplPolarity::Reservation == tcx.impl_polarity(def_id)
  1,303 ( 0.00%)                      || obligation.polarity() == tcx.impl_polarity(def_id)
      .                               || self.allow_negative_impls
      .                           {
      .                               result.push(candidate);
      .                           }
      .                       } else {
      .                           result.push(candidate);
      .                       }
      .                   }
      .           
  5,696 ( 0.00%)          result
      .               }
      .           
      .               /// filter_reservation_impls filter reservation impl for any goal as ambiguous
 18,547 ( 0.00%)      #[instrument(level = "debug", skip(self))]
      .               fn filter_reservation_impls(
      .                   &mut self,
      .                   candidate: SelectionCandidate<'tcx>,
      .                   obligation: &TraitObligation<'tcx>,
      .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
      .                   let tcx = self.tcx();
      .                   // Treat reservation impls as ambiguity.
  3,332 ( 0.00%)          if let ImplCandidate(def_id) = candidate {
  1,150 ( 0.00%)              if let ty::ImplPolarity::Reservation = tcx.impl_polarity(def_id) {
      .                           if let Some(intercrate_ambiguity_clauses) = &mut self.intercrate_ambiguity_causes {
      .                               let attrs = tcx.get_attrs(def_id);
      .                               let attr = tcx.sess.find_by_name(&attrs, sym::rustc_reservation_impl);
      .                               let value = attr.and_then(|a| a.value_str());
      .                               if let Some(value) = value {
      .                                   debug!(
      .                                       "filter_reservation_impls: \
      .                                            reservation impl ambiguity on {:?}",
-- line 1227 ----------------------------------------
-- line 1232 ----------------------------------------
      .                                           message: value.to_string(),
      .                                       },
      .                                   );
      .                               }
      .                           }
      .                           return Ok(None);
      .                       }
      .                   }
  6,546 ( 0.00%)          Ok(Some(candidate))
      .               }
      .           
      .               fn is_knowable<'o>(&mut self, stack: &TraitObligationStack<'o, 'tcx>) -> Option<Conflict> {
      .                   debug!("is_knowable(intercrate={:?})", self.intercrate);
      .           
  4,503 ( 0.00%)          if !self.intercrate || stack.obligation.polarity() == ty::ImplPolarity::Negative {
      .                       return None;
      .                   }
      .           
      .                   let obligation = &stack.obligation;
     30 ( 0.00%)          let predicate = self.infcx().resolve_vars_if_possible(obligation.predicate);
      .           
      .                   // Okay to skip binder because of the nature of the
      .                   // trait-ref-is-knowable check, which does not care about
      .                   // bound regions.
      .                   let trait_ref = predicate.skip_binder().trait_ref;
      .           
     30 ( 0.00%)          coherence::trait_ref_is_knowable(self.tcx(), trait_ref)
      .               }
      .           
      .               /// Returns `true` if the global caches can be used.
      .               fn can_use_global_caches(&self, param_env: ty::ParamEnv<'tcx>) -> bool {
      .                   // If there are any inference variables in the `ParamEnv`, then we
      .                   // always use a cache local to this particular scope. Otherwise, we
      .                   // switch to a global cache.
      .                   if param_env.needs_infer() {
-- line 1266 ----------------------------------------
-- line 1286 ----------------------------------------
      .                   &mut self,
      .                   mut param_env: ty::ParamEnv<'tcx>,
      .                   cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,
      .               ) -> Option<SelectionResult<'tcx, SelectionCandidate<'tcx>>> {
      .                   // Neither the global nor local cache is aware of intercrate
      .                   // mode, so don't do any caching. In particular, we might
      .                   // re-use the same `InferCtxt` with both an intercrate
      .                   // and non-intercrate `SelectionContext`
 11,070 ( 0.00%)          if self.intercrate {
     10 ( 0.00%)              return None;
      .                   }
      .                   let tcx = self.tcx();
      .                   let mut pred = cache_fresh_trait_pred.skip_binder();
 11,050 ( 0.00%)          pred.remap_constness(tcx, &mut param_env);
      .           
  5,525 ( 0.00%)          if self.can_use_global_caches(param_env) {
 55,030 ( 0.01%)              if let Some(res) = tcx.selection_cache.get(&param_env.and(pred), tcx) {
 52,572 ( 0.01%)                  return Some(res);
      .                       }
      .                   }
 16,269 ( 0.00%)          self.infcx.selection_cache.get(&param_env.and(pred), tcx)
      .               }
      .           
      .               /// Determines whether can we safely cache the result
      .               /// of selecting an obligation. This is almost always `true`,
      .               /// except when dealing with certain `ParamCandidate`s.
      .               ///
      .               /// Ordinarily, a `ParamCandidate` will contain no inference variables,
      .               /// since it was usually produced directly from a `DefId`. However,
-- line 1314 ----------------------------------------
-- line 1325 ----------------------------------------
      .               fn can_cache_candidate(
      .                   &self,
      .                   result: &SelectionResult<'tcx, SelectionCandidate<'tcx>>,
      .               ) -> bool {
      .                   // Neither the global nor local cache is aware of intercrate
      .                   // mode, so don't do any caching. In particular, we might
      .                   // re-use the same `InferCtxt` with both an intercrate
      .                   // and non-intercrate `SelectionContext`
  2,982 ( 0.00%)          if self.intercrate {
      .                       return false;
      .                   }
  4,443 ( 0.00%)          match result {
      .                       Ok(Some(SelectionCandidate::ParamCandidate(trait_ref))) => !trait_ref.needs_infer(),
      .                       _ => true,
      .                   }
      .               }
      .           
      .               fn insert_candidate_cache(
      .                   &mut self,
      .                   mut param_env: ty::ParamEnv<'tcx>,
      .                   cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,
      .                   dep_node: DepNodeIndex,
      .                   candidate: SelectionResult<'tcx, SelectionCandidate<'tcx>>,
      .               ) {
      .                   let tcx = self.tcx();
      .                   let mut pred = cache_fresh_trait_pred.skip_binder();
      .           
  2,982 ( 0.00%)          pred.remap_constness(tcx, &mut param_env);
      .           
      .                   if !self.can_cache_candidate(&candidate) {
      .                       debug!(?pred, ?candidate, "insert_candidate_cache - candidate is not cacheable");
      .                       return;
      .                   }
      .           
  1,481 ( 0.00%)          if self.can_use_global_caches(param_env) {
  3,562 ( 0.00%)              if let Err(Overflow) = candidate {
      .                           // Don't cache overflow globally; we only produce this in certain modes.
      .                       } else if !pred.needs_infer() {
  5,836 ( 0.00%)                  if !candidate.needs_infer() {
      .                               debug!(?pred, ?candidate, "insert_candidate_cache global");
      .                               // This may overwrite the cache with the same value.
 39,393 ( 0.01%)                      tcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);
      .                               return;
      .                           }
      .                       }
      .                   }
      .           
      .                   debug!(?pred, ?candidate, "insert_candidate_cache local");
    506 ( 0.00%)          self.infcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);
      .               }
      .           
      .               /// Matches a predicate against the bounds of its self type.
      .               ///
      .               /// Given an obligation like `<T as Foo>::Bar: Baz` where the self type is
      .               /// a projection, look at the bounds of `T::Bar`, see if we can find a
      .               /// `Baz` bound. We return indexes into the list returned by
      .               /// `tcx.item_bounds` for any applicable bounds.
    630 ( 0.00%)      fn match_projection_obligation_against_definition_bounds(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .               ) -> smallvec::SmallVec<[usize; 2]> {
    910 ( 0.00%)          let poly_trait_predicate = self.infcx().resolve_vars_if_possible(obligation.predicate);
      .                   let placeholder_trait_predicate =
  1,190 ( 0.00%)              self.infcx().replace_bound_vars_with_placeholders(poly_trait_predicate);
      .                   debug!(
      .                       ?placeholder_trait_predicate,
      .                       "match_projection_obligation_against_definition_bounds"
      .                   );
      .           
     70 ( 0.00%)          let tcx = self.infcx.tcx;
    420 ( 0.00%)          let (def_id, substs) = match *placeholder_trait_predicate.trait_ref.self_ty().kind() {
    210 ( 0.00%)              ty::Projection(ref data) => (data.item_def_id, data.substs),
      .                       ty::Opaque(def_id, substs) => (def_id, substs),
      .                       _ => {
      .                           span_bug!(
      .                               obligation.cause.span,
      .                               "match_projection_obligation_against_definition_bounds() called \
      .                                but self-ty is not a projection: {:?}",
      .                               placeholder_trait_predicate.trait_ref.self_ty()
      .                           );
-- line 1404 ----------------------------------------
-- line 1411 ----------------------------------------
      .                   // unnecessary ambiguity.
      .                   let mut distinct_normalized_bounds = FxHashSet::default();
      .           
      .                   let matching_bounds = bounds
      .                       .iter()
      .                       .enumerate()
      .                       .filter_map(|(idx, bound)| {
      .                           let bound_predicate = bound.kind();
  5,214 ( 0.00%)                  if let ty::PredicateKind::Trait(pred) = bound_predicate.skip_binder() {
      .                               let bound = bound_predicate.rebind(pred.trait_ref);
 22,350 ( 0.00%)                      if self.infcx.probe(|_| {
  8,940 ( 0.00%)                          match self.match_normalize_trait_ref(
      .                                       obligation,
  5,960 ( 0.00%)                              bound,
  5,960 ( 0.00%)                              placeholder_trait_predicate.trait_ref,
      .                                   ) {
      .                                       Ok(None) => true,
      .                                       Ok(Some(normalized_trait))
      .                                           if distinct_normalized_bounds.insert(normalized_trait) =>
      .                                       {
      .                                           true
      .                                       }
      .                                       _ => false,
-- line 1433 ----------------------------------------
-- line 1437 ----------------------------------------
      .                               }
      .                           }
      .                           None
      .                       })
      .                       .collect();
      .           
      .                   debug!(?matching_bounds, "match_projection_obligation_against_definition_bounds");
      .                   matching_bounds
    630 ( 0.00%)      }
      .           
      .               /// Equates the trait in `obligation` with trait bound. If the two traits
      .               /// can be equated and the normalized trait bound doesn't contain inference
      .               /// variables or placeholders, the normalized bound is returned.
 19,370 ( 0.00%)      fn match_normalize_trait_ref(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .                   trait_bound: ty::PolyTraitRef<'tcx>,
      .                   placeholder_trait_ref: ty::TraitRef<'tcx>,
      .               ) -> Result<Option<ty::PolyTraitRef<'tcx>>, ()> {
      .                   debug_assert!(!placeholder_trait_ref.has_escaping_bound_vars());
  4,578 ( 0.00%)          if placeholder_trait_ref.def_id != trait_bound.def_id() {
      .                       // Avoid unnecessary normalization
  2,872 ( 0.00%)              return Err(());
      .                   }
      .           
    648 ( 0.00%)          let Normalized { value: trait_bound, obligations: _ } = ensure_sufficient_stack(|| {
      .                       project::normalize_with_depth(
      .                           self,
     54 ( 0.00%)                  obligation.param_env,
      .                           obligation.cause.clone(),
    162 ( 0.00%)                  obligation.recursion_depth + 1,
    216 ( 0.00%)                  trait_bound,
      .                       )
      .                   });
    162 ( 0.00%)          self.infcx
    108 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
      .                       .sup(ty::Binder::dummy(placeholder_trait_ref), trait_bound)
      .                       .map(|InferOk { obligations: _, value: () }| {
      .                           // This method is called within a probe, so we can't have
      .                           // inference variables and placeholders escape.
      .                           if !trait_bound.needs_infer() && !trait_bound.has_placeholders() {
    270 ( 0.00%)                      Some(trait_bound)
      .                           } else {
      .                               None
      .                           }
      .                       })
      .                       .map_err(|_| ())
 13,410 ( 0.00%)      }
      .           
      .               fn evaluate_where_clause<'o>(
      .                   &mut self,
      .                   stack: &TraitObligationStack<'o, 'tcx>,
      .                   where_clause_trait_ref: ty::PolyTraitRef<'tcx>,
      .               ) -> Result<EvaluationResult, OverflowError> {
      .                   self.evaluation_probe(|this| {
 13,354 ( 0.00%)              match this.match_where_clause_trait_ref(stack.obligation, where_clause_trait_ref) {
  1,168 ( 0.00%)                  Ok(obligations) => this.evaluate_predicates_recursively(stack.list(), obligations),
      .                           Err(()) => Ok(EvaluatedToErr),
      .                       }
      .                   })
      .               }
      .           
    216 ( 0.00%)      pub(super) fn match_projection_projections(
      .                   &mut self,
      .                   obligation: &ProjectionTyObligation<'tcx>,
      .                   env_predicate: PolyProjectionPredicate<'tcx>,
      .                   potentially_unnormalized_candidates: bool,
      .               ) -> bool {
      .                   let mut nested_obligations = Vec::new();
    120 ( 0.00%)          let (infer_predicate, _) = self.infcx.replace_bound_vars_with_fresh_vars(
     72 ( 0.00%)              obligation.cause.span,
      .                       LateBoundRegionConversionTime::HigherRankedType,
      .                       env_predicate,
      .                   );
     48 ( 0.00%)          let infer_projection = if potentially_unnormalized_candidates {
    112 ( 0.00%)              ensure_sufficient_stack(|| {
     56 ( 0.00%)                  project::normalize_with_depth_to(
      .                               self,
     14 ( 0.00%)                      obligation.param_env,
      .                               obligation.cause.clone(),
     42 ( 0.00%)                      obligation.recursion_depth + 1,
     28 ( 0.00%)                      infer_predicate.projection_ty,
      .                               &mut nested_obligations,
      .                           )
      .                       })
      .                   } else {
     20 ( 0.00%)              infer_predicate.projection_ty
      .                   };
      .           
     24 ( 0.00%)          self.infcx
     48 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
     48 ( 0.00%)              .sup(obligation.predicate, infer_projection)
    192 ( 0.00%)              .map_or(false, |InferOk { obligations, value: () }| {
      .                           self.evaluate_predicates_recursively(
      .                               TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),
      .                               nested_obligations.into_iter().chain(obligations),
      .                           )
     48 ( 0.00%)                  .map_or(false, |res| res.may_apply())
      .                       })
    216 ( 0.00%)      }
      .           
      .               ///////////////////////////////////////////////////////////////////////////
      .               // WINNOW
      .               //
      .               // Winnowing is the process of attempting to resolve ambiguity by
      .               // probing further. During the winnowing process, we unify all
      .               // type variables and then we also attempt to evaluate recursive
      .               // bounds to see if they are satisfied.
-- line 1544 ----------------------------------------
-- line 1550 ----------------------------------------
      .               /// See the comment for "SelectionCandidate" for more details.
      .               fn candidate_should_be_dropped_in_favor_of(
      .                   &mut self,
      .                   sized_predicate: bool,
      .                   victim: &EvaluatedCandidate<'tcx>,
      .                   other: &EvaluatedCandidate<'tcx>,
      .                   needs_infer: bool,
      .               ) -> bool {
  1,300 ( 0.00%)          if victim.candidate == other.candidate {
      .                       return true;
      .                   }
      .           
      .                   // Check if a bound would previously have been removed when normalizing
      .                   // the param_env so that it can be given the lowest priority. See
      .                   // #50825 for the motivation for this.
      .                   let is_global = |cand: &ty::PolyTraitPredicate<'tcx>| {
      .                       cand.is_global() && !cand.has_late_bound_regions()
      .                   };
      .           
      .                   // (*) Prefer `BuiltinCandidate { has_nested: false }`, `PointeeCandidate`,
      .                   // `DiscriminantKindCandidate`, and `ConstDropCandidate` to anything else.
      .                   //
      .                   // This is a fix for #53123 and prevents winnowing from accidentally extending the
      .                   // lifetime of a variable.
 23,642 ( 0.00%)          match (&other.candidate, &victim.candidate) {
      .                       (_, AutoImplCandidate(..)) | (AutoImplCandidate(..), _) => {
      .                           bug!(
      .                               "default implementations shouldn't be recorded \
      .                               when there are other valid candidates"
      .                           );
      .                       }
      .           
      .                       // (*)
-- line 1582 ----------------------------------------
-- line 1591 ----------------------------------------
      .                           _,
      .                           BuiltinCandidate { has_nested: false }
      .                           | DiscriminantKindCandidate
      .                           | PointeeCandidate
      .                           | ConstDropCandidate(_),
      .                       ) => false,
      .           
      .                       (ParamCandidate(other), ParamCandidate(victim)) => {
     88 ( 0.00%)                  let same_except_bound_vars = other.skip_binder().trait_ref
    110 ( 0.00%)                      == victim.skip_binder().trait_ref
      .                               && other.skip_binder().constness == victim.skip_binder().constness
      .                               && other.skip_binder().polarity == victim.skip_binder().polarity
      .                               && !other.skip_binder().trait_ref.has_escaping_bound_vars();
      .                           if same_except_bound_vars {
      .                               // See issue #84398. In short, we can generate multiple ParamCandidates which are
      .                               // the same except for unused bound vars. Just pick the one with the fewest bound vars
      .                               // or the current one if tied (they should both evaluate to the same answer). This is
      .                               // probably best characterized as a "hack", since we might prefer to just do our
-- line 1608 ----------------------------------------
-- line 1633 ----------------------------------------
      .                       }
      .           
      .                       // Global bounds from the where clause should be ignored
      .                       // here (see issue #50825). Otherwise, we have a where
      .                       // clause so don't go around looking for impls.
      .                       // Arbitrarily give param candidates priority
      .                       // over projection and object candidates.
      .                       (
      3 ( 0.00%)                  ParamCandidate(ref cand),
      .                           ImplCandidate(..)
      .                           | ClosureCandidate
      .                           | GeneratorCandidate
      .                           | FnPointerCandidate { .. }
      .                           | BuiltinObjectCandidate
      .                           | BuiltinUnsizeCandidate
      .                           | TraitUpcastingUnsizeCandidate(_)
      .                           | BuiltinCandidate { .. }
-- line 1649 ----------------------------------------
-- line 1674 ----------------------------------------
      .                       }
      .                       (ObjectCandidate(_), ProjectionCandidate(_))
      .                       | (ProjectionCandidate(_), ObjectCandidate(_)) => {
      .                           bug!("Have both object and projection candidate")
      .                       }
      .           
      .                       // Arbitrarily give projection and object candidates priority.
      .                       (
  2,608 ( 0.00%)                  ObjectCandidate(_) | ProjectionCandidate(_),
      8 ( 0.00%)                  ImplCandidate(..)
      .                           | ClosureCandidate
      .                           | GeneratorCandidate
      .                           | FnPointerCandidate { .. }
      .                           | BuiltinObjectCandidate
      .                           | BuiltinUnsizeCandidate
      .                           | TraitUpcastingUnsizeCandidate(_)
      .                           | BuiltinCandidate { .. }
      .                           | TraitAliasCandidate(..),
-- line 1691 ----------------------------------------
-- line 1696 ----------------------------------------
      .                           | ClosureCandidate
      .                           | GeneratorCandidate
      .                           | FnPointerCandidate { .. }
      .                           | BuiltinObjectCandidate
      .                           | BuiltinUnsizeCandidate
      .                           | TraitUpcastingUnsizeCandidate(_)
      .                           | BuiltinCandidate { .. }
      .                           | TraitAliasCandidate(..),
  5,200 ( 0.00%)                  ObjectCandidate(_) | ProjectionCandidate(_),
      .                       ) => false,
      .           
 13,000 ( 0.00%)              (&ImplCandidate(other_def), &ImplCandidate(victim_def)) => {
      .                           // See if we can toss out `victim` based on specialization.
      .                           // This requires us to know *for sure* that the `other` impl applies
      .                           // i.e., `EvaluatedToOk`.
      .                           //
      .                           // FIXME(@lcnr): Using `modulo_regions` here seems kind of scary
      .                           // to me but is required for `std` to compile, so I didn't change it
      .                           // for now.
      .                           let tcx = self.tcx();
  5,200 ( 0.00%)                  if other.evaluation.must_apply_modulo_regions() {
 10,400 ( 0.00%)                      if tcx.specializes((other_def, victim_def)) {
      .                                   return true;
      .                               }
      .                           }
      .           
  6,500 ( 0.00%)                  if other.evaluation.must_apply_considering_regions() {
  5,200 ( 0.00%)                      match tcx.impls_are_allowed_to_overlap(other_def, victim_def) {
      .                                   Some(ty::ImplOverlapKind::Permitted { marker: true }) => {
      .                                       // Subtle: If the predicate we are evaluating has inference
      .                                       // variables, do *not* allow discarding candidates due to
      .                                       // marker trait impls.
      .                                       //
      .                                       // Without this restriction, we could end up accidentally
      .                                       // constrainting inference variables based on an arbitrarily
      .                                       // chosen trait impl.
-- line 1731 ----------------------------------------
-- line 1790 ----------------------------------------
      .                           | BuiltinUnsizeCandidate
      .                           | TraitUpcastingUnsizeCandidate(_)
      .                           | BuiltinCandidate { has_nested: true }
      .                           | TraitAliasCandidate(..),
      .                       ) => false,
      .                   }
      .               }
      .           
  3,560 ( 0.00%)      fn sized_conditions(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .               ) -> BuiltinImplConditions<'tcx> {
      .                   use self::BuiltinImplConditions::{Ambiguous, None, Where};
      .           
      .                   // NOTE: binder moved to (*)
  1,068 ( 0.00%)          let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());
      .           
  1,796 ( 0.00%)          match self_ty.kind() {
      .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
      .                       | ty::Uint(_)
      .                       | ty::Int(_)
      .                       | ty::Bool
      .                       | ty::Float(_)
      .                       | ty::FnDef(..)
      .                       | ty::FnPtr(_)
      .                       | ty::RawPtr(..)
-- line 1815 ----------------------------------------
-- line 1817 ----------------------------------------
      .                       | ty::Ref(..)
      .                       | ty::Generator(..)
      .                       | ty::GeneratorWitness(..)
      .                       | ty::Array(..)
      .                       | ty::Closure(..)
      .                       | ty::Never
      .                       | ty::Error(_) => {
      .                           // safe for everything
    127 ( 0.00%)                  Where(ty::Binder::dummy(Vec::new()))
      .                       }
      .           
      .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => None,
      .           
      .                       ty::Tuple(tys) => Where(
      .                           obligation
      .                               .predicate
     42 ( 0.00%)                      .rebind(tys.last().into_iter().map(|k| k.expect_ty()).collect()),
      .                       ),
      .           
      .                       ty::Adt(def, substs) => {
    316 ( 0.00%)                  let sized_crit = def.sized_constraint(self.tcx());
      .                           // (*) binder moved here
    790 ( 0.00%)                  Where(
      .                               obligation.predicate.rebind({
    158 ( 0.00%)                          sized_crit.iter().map(|ty| ty.subst(self.tcx(), substs)).collect()
      .                               }),
      .                           )
      .                       }
      .           
      .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => None,
      .                       ty::Infer(ty::TyVar(_)) => Ambiguous,
      .           
      .                       ty::Placeholder(..)
      .                       | ty::Bound(..)
      .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
      .                           bug!("asked to assemble builtin bounds of unexpected type: {:?}", self_ty);
      .                       }
      .                   }
  2,848 ( 0.00%)      }
      .           
  1,544 ( 0.00%)      fn copy_clone_conditions(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .               ) -> BuiltinImplConditions<'tcx> {
      .                   // NOTE: binder moved to (*)
    386 ( 0.00%)          let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());
      .           
      .                   use self::BuiltinImplConditions::{Ambiguous, None, Where};
      .           
    977 ( 0.00%)          match *self_ty.kind() {
      .                       ty::Infer(ty::IntVar(_))
      .                       | ty::Infer(ty::FloatVar(_))
      .                       | ty::FnDef(..)
      .                       | ty::FnPtr(_)
      2 ( 0.00%)              | ty::Error(_) => Where(ty::Binder::dummy(Vec::new())),
      .           
      .                       ty::Uint(_)
      .                       | ty::Int(_)
      .                       | ty::Bool
      .                       | ty::Float(_)
      .                       | ty::Char
      .                       | ty::RawPtr(..)
      .                       | ty::Never
-- line 1879 ----------------------------------------
-- line 1886 ----------------------------------------
      .                       ty::Dynamic(..)
      .                       | ty::Str
      .                       | ty::Slice(..)
      .                       | ty::Generator(..)
      .                       | ty::GeneratorWitness(..)
      .                       | ty::Foreign(..)
      .                       | ty::Ref(_, _, hir::Mutability::Mut) => None,
      .           
      8 ( 0.00%)              ty::Tuple(tys) => {
      .                           // (*) binder moved here
     36 ( 0.00%)                  Where(obligation.predicate.rebind(tys.iter().map(|k| k.expect_ty()).collect()))
      .                       }
      .           
      4 ( 0.00%)              ty::Closure(_, substs) => {
      .                           // (*) binder moved here
     12 ( 0.00%)                  let ty = self.infcx.shallow_resolve(substs.as_closure().tupled_upvars_ty());
      8 ( 0.00%)                  if let ty::Infer(ty::TyVar(_)) = ty.kind() {
      .                               // Not yet resolved.
      .                               Ambiguous
      .                           } else {
     28 ( 0.00%)                      Where(obligation.predicate.rebind(substs.as_closure().upvar_tys().collect()))
      .                           }
      .                       }
      .           
      .                       ty::Adt(..) | ty::Projection(..) | ty::Param(..) | ty::Opaque(..) => {
      .                           // Fallback to whatever user-defined impls exist in this case.
      .                           None
      .                       }
      .           
-- line 1914 ----------------------------------------
-- line 1920 ----------------------------------------
      .                       }
      .           
      .                       ty::Placeholder(..)
      .                       | ty::Bound(..)
      .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
      .                           bug!("asked to assemble builtin bounds of unexpected type: {:?}", self_ty);
      .                       }
      .                   }
  1,158 ( 0.00%)      }
      .           
      .               /// For default impls, we need to break apart a type into its
      .               /// "constituent types" -- meaning, the types that it contains.
      .               ///
      .               /// Here are some (simple) examples:
      .               ///
      .               /// ```
      .               /// (i32, u32) -> [i32, u32]
-- line 1936 ----------------------------------------
-- line 2003 ----------------------------------------
      .                           // We can resolve the `impl Trait` to its concrete type,
      .                           // which enforces a DAG between the functions requiring
      .                           // the auto trait bounds in question.
      .                           t.rebind(vec![self.tcx().type_of(def_id).subst(self.tcx(), substs)])
      .                       }
      .                   }
      .               }
      .           
    192 ( 0.00%)      fn collect_predicates_for_types(
      .                   &mut self,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   cause: ObligationCause<'tcx>,
      .                   recursion_depth: usize,
      .                   trait_def_id: DefId,
      .                   types: ty::Binder<'tcx, Vec<Ty<'tcx>>>,
      .               ) -> Vec<PredicateObligation<'tcx>> {
      .                   // Because the types were potentially derived from
-- line 2019 ----------------------------------------
-- line 2030 ----------------------------------------
      .                   // 2. Produce something like `&'0 i32 : Copy`
      .                   // 3. Re-bind the regions back to `for<'a> &'a i32 : Copy`
      .           
      .                   types
      .                       .as_ref()
      .                       .skip_binder() // binder moved -\
      .                       .iter()
      .                       .flat_map(|ty| {
     51 ( 0.00%)                  let ty: ty::Binder<'tcx, Ty<'tcx>> = types.rebind(ty); // <----/
      .           
    204 ( 0.00%)                  self.infcx.commit_unconditionally(|_| {
     51 ( 0.00%)                      let placeholder_ty = self.infcx.replace_bound_vars_with_placeholders(ty);
     85 ( 0.00%)                      let Normalized { value: normalized_ty, mut obligations } =
    170 ( 0.00%)                          ensure_sufficient_stack(|| {
      .                                       project::normalize_with_depth(
      .                                           self,
     17 ( 0.00%)                                  param_env,
      .                                           cause.clone(),
     17 ( 0.00%)                                  recursion_depth,
     17 ( 0.00%)                                  placeholder_ty,
      .                                       )
      .                                   });
    187 ( 0.00%)                      let placeholder_obligation = predicate_for_trait_def(
      .                                   self.tcx(),
     17 ( 0.00%)                          param_env,
      .                                   cause.clone(),
     34 ( 0.00%)                          trait_def_id,
      .                                   recursion_depth,
      .                                   normalized_ty,
      .                                   &[],
      .                               );
    102 ( 0.00%)                      obligations.push(placeholder_obligation);
      .                               obligations
      .                           })
      .                       })
      .                       .collect()
     96 ( 0.00%)      }
      .           
      .               ///////////////////////////////////////////////////////////////////////////
      .               // Matching
      .               //
      .               // Matching is a common path used for both evaluation and
      .               // confirmation.  It basically unifies types that appear in impls
      .               // and traits. This does affect the surrounding environment;
      .               // therefore, when used during evaluation, match routines must be
-- line 2074 ----------------------------------------
-- line 2075 ----------------------------------------
      .               // run inside of a `probe()` so that their side-effects are
      .               // contained.
      .           
      .               fn rematch_impl(
      .                   &mut self,
      .                   impl_def_id: DefId,
      .                   obligation: &TraitObligation<'tcx>,
      .               ) -> Normalized<'tcx, SubstsRef<'tcx>> {
 10,080 ( 0.00%)          match self.match_impl(impl_def_id, obligation) {
  8,064 ( 0.00%)              Ok(substs) => substs,
      .                       Err(()) => {
      .                           bug!(
      .                               "Impl {:?} was matchable against {:?} but now is not",
      .                               impl_def_id,
      .                               obligation
      .                           );
      .                       }
      .                   }
      .               }
      .           
113,240 ( 0.02%)      #[tracing::instrument(level = "debug", skip(self))]
      .               fn match_impl(
      .                   &mut self,
      .                   impl_def_id: DefId,
      .                   obligation: &TraitObligation<'tcx>,
      .               ) -> Result<Normalized<'tcx, SubstsRef<'tcx>>, ()> {
      .                   let impl_trait_ref = self.tcx().impl_trait_ref(impl_def_id).unwrap();
      .           
      .                   // Before we create the substitutions and everything, first
      .                   // consider a "quick reject". This avoids creating more types
      .                   // and so forth that we need to.
      .                   if self.fast_reject_trait_refs(obligation, &impl_trait_ref) {
  2,716 ( 0.00%)              return Err(());
      .                   }
      .           
      .                   let placeholder_obligation =
 32,214 ( 0.01%)              self.infcx().replace_bound_vars_with_placeholders(obligation.predicate);
 13,806 ( 0.00%)          let placeholder_obligation_trait_ref = placeholder_obligation.trait_ref;
      .           
 23,010 ( 0.00%)          let impl_substs = self.infcx.fresh_substs_for_item(obligation.cause.span, impl_def_id);
      .           
  9,204 ( 0.00%)          let impl_trait_ref = impl_trait_ref.subst(self.tcx(), impl_substs);
      .           
      .                   debug!(?impl_trait_ref);
      .           
 27,612 ( 0.00%)          let Normalized { value: impl_trait_ref, obligations: mut nested_obligations } =
 32,214 ( 0.01%)              ensure_sufficient_stack(|| {
      .                           project::normalize_with_depth(
      .                               self,
  4,602 ( 0.00%)                      obligation.param_env,
      .                               obligation.cause.clone(),
 13,806 ( 0.00%)                      obligation.recursion_depth + 1,
  9,204 ( 0.00%)                      impl_trait_ref,
      .                           )
      .                       });
      .           
      .                   debug!(?impl_trait_ref, ?placeholder_obligation_trait_ref);
      .           
      .                   let cause = ObligationCause::new(
  4,602 ( 0.00%)              obligation.cause.span,
  9,204 ( 0.00%)              obligation.cause.body_id,
 41,418 ( 0.01%)              ObligationCauseCode::MatchImpl(obligation.cause.clone(), impl_def_id),
      .                   );
      .           
  9,204 ( 0.00%)          let InferOk { obligations, .. } = self
      .                       .infcx
  4,602 ( 0.00%)              .at(&cause, obligation.param_env)
      .                       .eq(placeholder_obligation_trait_ref, impl_trait_ref)
      .                       .map_err(|e| debug!("match_impl: failed eq_trait_refs due to `{}`", e))?;
      .                   nested_obligations.extend(obligations);
      .           
  9,959 ( 0.00%)          if !self.intercrate
      .                       && self.tcx().impl_polarity(impl_def_id) == ty::ImplPolarity::Reservation
      .                   {
      .                       debug!("match_impl: reservation impls only apply in intercrate mode");
      .                       return Err(());
      .                   }
      .           
      .                   debug!(?impl_substs, ?nested_obligations, "match_impl: success");
 19,914 ( 0.00%)          Ok(Normalized { value: impl_substs, obligations: nested_obligations })
      .               }
      .           
      .               fn fast_reject_trait_refs(
      .                   &mut self,
      .                   obligation: &TraitObligation<'_>,
      .                   impl_trait_ref: &ty::TraitRef<'_>,
      .               ) -> bool {
      .                   // We can avoid creating type variables and doing the full
      .                   // substitution if we find that any of the input types, when
      .                   // simplified, do not match.
      .           
 17,880 ( 0.00%)          iter::zip(obligation.predicate.skip_binder().trait_ref.substs, impl_trait_ref.substs).any(
      .                       |(obligation_arg, impl_arg)| {
 66,936 ( 0.01%)                  match (obligation_arg.unpack(), impl_arg.unpack()) {
      .                               (GenericArgKind::Type(obligation_ty), GenericArgKind::Type(impl_ty)) => {
      .                                   // Note, we simplify parameters for the obligation but not the
      .                                   // impl so that we do not reject a blanket impl but do reject
      .                                   // more concrete impls if we're searching for `T: Trait`.
 89,248 ( 0.02%)                          let simplified_obligation_ty = fast_reject::simplify_type(
      .                                       self.tcx(),
      .                                       obligation_ty,
      .                                       SimplifyParams::Yes,
      .                                       StripReferences::No,
      .                                   );
 66,936 ( 0.01%)                          let simplified_impl_ty = fast_reject::simplify_type(
      .                                       self.tcx(),
      .                                       impl_ty,
      .                                       SimplifyParams::No,
      .                                       StripReferences::No,
      .                                   );
      .           
 33,468 ( 0.01%)                          simplified_obligation_ty.is_some()
      .                                       && simplified_impl_ty.is_some()
      .                                       && simplified_obligation_ty != simplified_impl_ty
      .                               }
      .                               (GenericArgKind::Lifetime(_), GenericArgKind::Lifetime(_)) => {
      .                                   // Lifetimes can never cause a rejection.
      .                                   false
      .                               }
      .                               (GenericArgKind::Const(_), GenericArgKind::Const(_)) => {
-- line 2194 ----------------------------------------
-- line 2201 ----------------------------------------
      .                           }
      .                       },
      .                   )
      .               }
      .           
      .               /// Normalize `where_clause_trait_ref` and try to match it against
      .               /// `obligation`. If successful, return any predicates that
      .               /// result from the normalization.
 10,926 ( 0.00%)      fn match_where_clause_trait_ref(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .                   where_clause_trait_ref: ty::PolyTraitRef<'tcx>,
      .               ) -> Result<Vec<PredicateObligation<'tcx>>, ()> {
      .                   self.match_poly_trait_ref(obligation, where_clause_trait_ref)
  9,712 ( 0.00%)      }
      .           
      .               /// Returns `Ok` if `poly_trait_ref` being true implies that the
      .               /// obligation is satisfied.
      .               #[instrument(skip(self), level = "debug")]
      .               fn match_poly_trait_ref(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .                   poly_trait_ref: ty::PolyTraitRef<'tcx>,
      .               ) -> Result<Vec<PredicateObligation<'tcx>>, ()> {
  2,137 ( 0.00%)          self.infcx
  1,214 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
  6,411 ( 0.00%)              .sup(obligation.predicate.to_poly_trait_ref(), poly_trait_ref)
      .                       .map(|InferOk { obligations, .. }| obligations)
      .                       .map_err(|_| ())
      .               }
      .           
      .               ///////////////////////////////////////////////////////////////////////////
      .               // Miscellany
      .           
      .               fn match_fresh_trait_refs(
      .                   &self,
      .                   previous: ty::PolyTraitPredicate<'tcx>,
      .                   current: ty::PolyTraitPredicate<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .               ) -> bool {
    126 ( 0.00%)          let mut matcher = ty::_match::Match::new(self.tcx(), param_env);
      .                   matcher.relate(previous, current).is_ok()
      .               }
      .           
      .               fn push_stack<'o>(
      .                   &mut self,
      .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
      .                   obligation: &'o TraitObligation<'tcx>,
      .               ) -> TraitObligationStack<'o, 'tcx> {
 42,672 ( 0.01%)          let fresh_trait_pred = obligation.predicate.fold_with(&mut self.freshener);
      .           
      .                   let dfn = previous_stack.cache.next_dfn();
  3,870 ( 0.00%)          let depth = previous_stack.depth() + 1;
 52,398 ( 0.01%)          TraitObligationStack {
      .                       obligation,
 34,270 ( 0.01%)              fresh_trait_pred,
      .                       reached_depth: Cell::new(depth),
      .                       previous: previous_stack,
      .                       dfn,
      .                       depth,
      .                   }
      .               }
      .           
      .               #[instrument(skip(self), level = "debug")]
      .               fn closure_trait_ref_unnormalized(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .                   substs: SubstsRef<'tcx>,
      .               ) -> ty::PolyTraitRef<'tcx> {
     36 ( 0.00%)          let closure_sig = substs.as_closure().sig();
      .           
      .                   debug!(?closure_sig);
      .           
      .                   // (1) Feels icky to skip the binder here, but OTOH we know
      .                   // that the self-type is an unboxed closure type and hence is
      .                   // in fact unparameterized (or at least does not reference any
      .                   // regions bound in the obligation). Still probably some
      .                   // refactoring could make this nicer.
    120 ( 0.00%)          closure_trait_ref_and_return_type(
      .                       self.tcx(),
     72 ( 0.00%)              obligation.predicate.def_id(),
     12 ( 0.00%)              obligation.predicate.skip_binder().self_ty(), // (1)
     48 ( 0.00%)              closure_sig,
      .                       util::TupleArgumentsFlag::No,
      .                   )
      .                   .map_bound(|(trait_ref, _)| trait_ref)
      .               }
      .           
      .               fn generator_trait_ref_unnormalized(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
-- line 2291 ----------------------------------------
-- line 2307 ----------------------------------------
      .                   )
      .                   .map_bound(|(trait_ref, ..)| trait_ref)
      .               }
      .           
      .               /// Returns the obligations that are implied by instantiating an
      .               /// impl or trait. The obligations are substituted and fully
      .               /// normalized. This is used when confirming an impl or default
      .               /// impl.
 46,368 ( 0.01%)      #[tracing::instrument(level = "debug", skip(self, cause, param_env))]
      .               fn impl_or_trait_obligations(
      .                   &mut self,
      .                   cause: ObligationCause<'tcx>,
      .                   recursion_depth: usize,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   def_id: DefId,           // of impl or trait
      .                   substs: SubstsRef<'tcx>, // for impl or trait
      .               ) -> Vec<PredicateObligation<'tcx>> {
-- line 2323 ----------------------------------------
-- line 2334 ----------------------------------------
      .                   //    V: Iterator, V: Sized,
      .                   //    <U as Iterator>::Item: Copy
      .                   // When we substitute, say, `V => IntoIter<u32>, U => $0`, the last
      .                   // obligation will normalize to `<$0 as Iterator>::Item = $1` and
      .                   // `$1: Copy`, so we must ensure the obligations are emitted in
      .                   // that order.
      .                   let predicates = tcx.predicates_of(def_id);
      .                   debug!(?predicates);
  2,016 ( 0.00%)          assert_eq!(predicates.parent, None);
  6,048 ( 0.00%)          let mut obligations = Vec::with_capacity(predicates.predicates.len());
      .                   for (predicate, _) in predicates.predicates {
      .                       debug!(?predicate);
 15,000 ( 0.00%)              let predicate = normalize_with_depth_to(
      .                           self,
      .                           param_env,
      .                           cause.clone(),
      .                           recursion_depth,
  3,000 ( 0.00%)                  predicate.subst(tcx, substs),
      .                           &mut obligations,
      .                       );
 30,000 ( 0.01%)              obligations.push(Obligation {
      .                           cause: cause.clone(),
      .                           recursion_depth,
      .                           param_env,
      .                           predicate,
      .                       });
      .                   }
      .           
      .                   // We are performing deduplication here to avoid exponential blowups
-- line 2362 ----------------------------------------
-- line 2363 ----------------------------------------
      .                   // (#38528) from happening, but the real cause of the duplication is
      .                   // unknown. What we know is that the deduplication avoids exponential
      .                   // amount of predicates being propagated when processing deeply nested
      .                   // types.
      .                   //
      .                   // This code is hot enough that it's worth avoiding the allocation
      .                   // required for the FxHashSet when possible. Special-casing lengths 0,
      .                   // 1 and 2 covers roughly 75-80% of the cases.
  3,309 ( 0.00%)          if obligations.len() <= 1 {
      .                       // No possibility of duplicates.
    861 ( 0.00%)          } else if obligations.len() == 2 {
      .                       // Only two elements. Drop the second if they are equal.
      .                       if obligations[0] == obligations[1] {
      .                           obligations.truncate(1);
      .                       }
      .                   } else {
      .                       // Three or more elements. Use a general deduplication process.
      .                       let mut seen = FxHashSet::default();
    668 ( 0.00%)              obligations.retain(|i| seen.insert(i.clone()));
      .                   }
      .           
  8,064 ( 0.00%)          obligations
      .               }
      .           }
      .           
      .           trait TraitObligationExt<'tcx> {
      .               fn derived_cause(
      .                   &self,
      .                   variant: fn(DerivedObligationCause<'tcx>) -> ObligationCauseCode<'tcx>,
      .               ) -> ObligationCause<'tcx>;
-- line 2392 ----------------------------------------
-- line 2408 ----------------------------------------
      .                    */
      .           
      .                   let obligation = self;
      .           
      .                   // NOTE(flaper87): As of now, it keeps track of the whole error
      .                   // chain. Ideally, we should have a way to configure this either
      .                   // by using -Z verbose or just a CLI argument.
      .                   let derived_cause = DerivedObligationCause {
  8,128 ( 0.00%)              parent_trait_pred: obligation.predicate,
  4,048 ( 0.00%)              parent_code: obligation.cause.clone_code(),
      .                   };
      .                   let derived_code = variant(derived_cause);
 24,368 ( 0.00%)          ObligationCause::new(obligation.cause.span, obligation.cause.body_id, derived_code)
      .               }
      .           }
      .           
      .           impl<'o, 'tcx> TraitObligationStack<'o, 'tcx> {
      .               fn list(&'o self) -> TraitObligationStackList<'o, 'tcx> {
      .                   TraitObligationStackList::with(self)
      .               }
      .           
      .               fn cache(&self) -> &'o ProvisionalEvaluationCache<'tcx> {
  4,017 ( 0.00%)          self.previous.cache
      .               }
      .           
      .               fn iter(&'o self) -> TraitObligationStackList<'o, 'tcx> {
      .                   self.list()
      .               }
      .           
      .               /// Indicates that attempting to evaluate this stack entry
      .               /// required accessing something from the stack at depth `reached_depth`.
-- line 2438 ----------------------------------------
-- line 2540 ----------------------------------------
      .               /// evaluation. When we create an entry in the evaluation cache using this provisional
      .               /// cache entry (see `on_completion`), we use this `dep_node` to ensure that future reads from
      .               /// the cache will have all of the necessary incr comp dependencies tracked.
      .               dep_node: DepNodeIndex,
      .           }
      .           
      .           impl<'tcx> Default for ProvisionalEvaluationCache<'tcx> {
      .               fn default() -> Self {
  7,328 ( 0.00%)          Self { dfn: Cell::new(0), map: Default::default() }
      .               }
      .           }
      .           
      .           impl<'tcx> ProvisionalEvaluationCache<'tcx> {
      .               /// Get the next DFN in sequence (basically a counter).
      .               fn next_dfn(&self) -> usize {
  1,935 ( 0.00%)          let result = self.dfn.get();
  7,740 ( 0.00%)          self.dfn.set(result + 1);
      .                   result
      .               }
      .           
      .               /// Check the provisional cache for any result for
      .               /// `fresh_trait_ref`. If there is a hit, then you must consider
      .               /// it an access to the stack slots at depth
      .               /// `reached_depth` (from the returned value).
      .               fn get_provisional(
-- line 2564 ----------------------------------------
-- line 2663 ----------------------------------------
      .               fn on_completion(
      .                   &self,
      .                   dfn: usize,
      .                   mut op: impl FnMut(ty::PolyTraitPredicate<'tcx>, EvaluationResult, DepNodeIndex),
      .               ) {
      .                   debug!(?dfn, "on_completion");
      .           
      .                   for (fresh_trait_pred, eval) in
  7,021 ( 0.00%)              self.map.borrow_mut().drain_filter(|_k, eval| eval.from_dfn >= dfn)
      .                   {
      .                       debug!(?fresh_trait_pred, ?eval, "on_completion");
      .           
      .                       op(fresh_trait_pred, eval.result, eval.dep_node);
      .                   }
      .               }
      .           }
      .           
-- line 2679 ----------------------------------------
-- line 2692 ----------------------------------------
      .                   TraitObligationStackList { cache: r.cache(), head: Some(r) }
      .               }
      .           
      .               fn head(&self) -> Option<&'o TraitObligationStack<'o, 'tcx>> {
      .                   self.head
      .               }
      .           
      .               fn depth(&self) -> usize {
  5,150 ( 0.00%)          if let Some(head) = self.head { head.depth } else { 0 }
      .               }
      .           }
      .           
      .           impl<'o, 'tcx> Iterator for TraitObligationStackList<'o, 'tcx> {
      .               type Item = &'o TraitObligationStack<'o, 'tcx>;
      .           
      .               fn next(&mut self) -> Option<&'o TraitObligationStack<'o, 'tcx>> {
  5,223 ( 0.00%)          let o = self.head?;
  1,107 ( 0.00%)          *self = o.previous;
      .                   Some(o)
      .               }
      .           }
      .           
      .           impl<'o, 'tcx> fmt::Debug for TraitObligationStack<'o, 'tcx> {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   write!(f, "TraitObligationStack({:?})", self.obligation)
      .               }
-- line 2717 ----------------------------------------

160,151 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 91 ----------------------------------------
      .           mod late;
      .           mod macros;
      .           
      .           enum Weak {
      .               Yes,
      .               No,
      .           }
      .           
    780 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Debug)]
      .           pub enum Determinacy {
      .               Determined,
      .               Undetermined,
      .           }
      .           
      .           impl Determinacy {
      .               fn determined(determined: bool) -> Determinacy {
      .                   if determined { Determinacy::Determined } else { Determinacy::Undetermined }
    520 ( 0.00%)      }
      .           }
      .           
      .           /// A specific scope in which a name can be looked up.
      .           /// This enum is currently used only for early resolution (imports and macros),
      .           /// but not for late resolution yet.
      .           #[derive(Clone, Copy)]
      .           enum Scope<'a> {
      .               DeriveHelpers(LocalExpnId),
-- line 116 ----------------------------------------
-- line 157 ----------------------------------------
      .               macro_rules: MacroRulesScopeRef<'a>,
      .               derives: &'a [ast::Path],
      .           }
      .           
      .           impl<'a> ParentScope<'a> {
      .               /// Creates a parent scope with the passed argument used as the module scope component,
      .               /// and other scope components set to default empty values.
      .               pub fn module(module: Module<'a>, resolver: &Resolver<'a>) -> ParentScope<'a> {
      8 ( 0.00%)          ParentScope {
      .                       module,
      .                       expansion: LocalExpnId::ROOT,
  9,319 ( 0.00%)              macro_rules: resolver.arenas.alloc_macro_rules_scope(MacroRulesScope::Empty),
      .                       derives: &[],
      .                   }
      .               }
      .           }
      .           
      .           #[derive(Copy, Debug, Clone)]
      .           enum ImplTraitContext {
      .               Existential,
-- line 176 ----------------------------------------
-- line 278 ----------------------------------------
      .               FailedToResolve(Span, String, Option<Suggestion>),
      .               ExpectedFound(Span, String, Res),
      .               Indeterminate(Span),
      .               ModuleOnly(Span),
      .           }
      .           
      .           /// A minimal representation of a path segment. We use this in resolve because we synthesize 'path
      .           /// segments' which don't have the rest of an AST or HIR `PathSegment`.
    185 ( 0.00%)  #[derive(Clone, Copy, Debug)]
      .           pub struct Segment {
      .               ident: Ident,
      .               id: Option<NodeId>,
      .               /// Signals whether this `PathSegment` has generic arguments. Used to avoid providing
      .               /// nonsensical suggestions.
      .               has_generic_args: bool,
      .           }
      .           
-- line 294 ----------------------------------------
-- line 303 ----------------------------------------
      .           
      .               fn names_to_string(segments: &[Segment]) -> String {
      .                   names_to_string(&segments.iter().map(|seg| seg.ident.name).collect::<Vec<_>>())
      .               }
      .           }
      .           
      .           impl<'a> From<&'a ast::PathSegment> for Segment {
      .               fn from(seg: &'a ast::PathSegment) -> Segment {
    100 ( 0.00%)          Segment { ident: seg.ident, id: Some(seg.id), has_generic_args: seg.args.is_some() }
      .               }
      .           }
      .           
      .           struct UsePlacementFinder {
      .               target_module: NodeId,
      .               span: Option<Span>,
      .               found_use: bool,
      .           }
-- line 319 ----------------------------------------
-- line 391 ----------------------------------------
      .           #[derive(Debug)]
      .           enum LexicalScopeBinding<'a> {
      .               Item(&'a NameBinding<'a>),
      .               Res(Res),
      .           }
      .           
      .           impl<'a> LexicalScopeBinding<'a> {
      .               fn res(self) -> Res {
    112 ( 0.00%)          match self {
      .                       LexicalScopeBinding::Item(binding) => binding.res(),
    168 ( 0.00%)              LexicalScopeBinding::Res(res) => res,
      .                   }
      .               }
      .           }
      .           
      .           #[derive(Copy, Clone, Debug)]
      .           enum ModuleOrUniformRoot<'a> {
      .               /// Regular module.
      .               Module(Module<'a>),
-- line 409 ----------------------------------------
-- line 418 ----------------------------------------
      .               /// Virtual module that denotes resolution in current scope.
      .               /// Used only for resolving single-segment imports. The reason it exists is that import paths
      .               /// are always split into two parts, the first of which should be some kind of module.
      .               CurrentScope,
      .           }
      .           
      .           impl ModuleOrUniformRoot<'_> {
      .               fn same_def(lhs: Self, rhs: Self) -> bool {
    204 ( 0.00%)          match (lhs, rhs) {
      .                       (ModuleOrUniformRoot::Module(lhs), ModuleOrUniformRoot::Module(rhs)) => {
      .                           ptr::eq(lhs, rhs)
      .                       }
      .                       (
      .                           ModuleOrUniformRoot::CrateRootAndExternPrelude,
      .                           ModuleOrUniformRoot::CrateRootAndExternPrelude,
      .                       )
      .                       | (ModuleOrUniformRoot::ExternPrelude, ModuleOrUniformRoot::ExternPrelude)
-- line 434 ----------------------------------------
-- line 491 ----------------------------------------
      .           /// A key that identifies a binding in a given `Module`.
      .           ///
      .           /// Multiple bindings in the same module can have the same key (in a valid
      .           /// program) if all but one of them come from glob imports.
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
      .           struct BindingKey {
      .               /// The identifier for the binding, aways the `normalize_to_macros_2_0` version of the
      .               /// identifier.
147,060 ( 0.03%)      ident: Ident,
 40,462 ( 0.01%)      ns: Namespace,
      .               /// 0 if ident is not `_`, otherwise a value that's unique to the specific
      .               /// `_` in the expanded AST that introduced this binding.
 23,928 ( 0.00%)      disambiguator: u32,
      .           }
      .           
      .           type Resolutions<'a> = RefCell<FxIndexMap<BindingKey, &'a RefCell<NameResolution<'a>>>>;
      .           
      .           /// One node in the tree of modules.
      .           ///
      .           /// Note that a "module" in resolve is broader than a `mod` that you declare in Rust code. It may be one of these:
      .           ///
-- line 511 ----------------------------------------
-- line 551 ----------------------------------------
      .           impl<'a> ModuleData<'a> {
      .               fn new(
      .                   parent: Option<Module<'a>>,
      .                   kind: ModuleKind,
      .                   expansion: ExpnId,
      .                   span: Span,
      .                   no_implicit_prelude: bool,
      .               ) -> Self {
  2,877 ( 0.00%)          let is_foreign = match kind {
      .                       ModuleKind::Def(_, def_id, _) => !def_id.is_local(),
      .                       ModuleKind::Block(_) => false,
      .                   };
  9,453 ( 0.00%)          ModuleData {
      .                       parent,
      .                       kind,
      .                       lazy_resolutions: Default::default(),
      .                       populate_on_access: Cell::new(is_foreign),
      .                       unexpanded_invocations: Default::default(),
      .                       no_implicit_prelude,
      .                       glob_importers: RefCell::new(Vec::new()),
      .                       globs: RefCell::new(Vec::new()),
      .                       traits: RefCell::new(None),
      .                       span,
      .                       expansion,
      .                   }
      .               }
      .           
    172 ( 0.00%)      fn for_each_child<R, F>(&'a self, resolver: &mut R, mut f: F)
      .               where
      .                   R: AsMut<Resolver<'a>>,
      .                   F: FnMut(&mut R, Ident, Namespace, &'a NameBinding<'a>),
      .               {
     86 ( 0.00%)          for (key, name_resolution) in resolver.as_mut().resolutions(self).borrow().iter() {
321,920 ( 0.06%)              if let Some(binding) = name_resolution.borrow().binding {
119,496 ( 0.02%)                  f(resolver, key.ident, key.ns, binding);
      .                       }
      .                   }
    136 ( 0.00%)      }
      .           
      .               /// This modifies `self` in place. The traits will be stored in `self.traits`.
      .               fn ensure_traits<R>(&'a self, resolver: &mut R)
      .               where
      .                   R: AsMut<Resolver<'a>>,
      .               {
      .                   let mut traits = self.traits.borrow_mut();
    755 ( 0.00%)          if traits.is_none() {
      .                       let mut collected_traits = Vec::new();
      .                       self.for_each_child(resolver, |_, name, ns, binding| {
 39,897 ( 0.01%)                  if ns != TypeNS {
      .                               return;
      .                           }
  1,398 ( 0.00%)                  if let Res::Def(DefKind::Trait | DefKind::TraitAlias, _) = binding.res() {
      .                               collected_traits.push((name, binding))
      .                           }
      .                       });
     78 ( 0.00%)              *traits = Some(collected_traits.into_boxed_slice());
      .                   }
      .               }
      .           
      .               fn res(&self) -> Option<Res> {
  3,094 ( 0.00%)          match self.kind {
  4,972 ( 0.00%)              ModuleKind::Def(kind, def_id, _) => Some(Res::Def(kind, def_id)),
     20 ( 0.00%)              _ => None,
      .                   }
      .               }
      .           
      .               // Public for rustdoc.
      .               pub fn def_id(&self) -> DefId {
      .                   self.opt_def_id().expect("`ModuleData::def_id` is called on a block module")
      .               }
      .           
      .               fn opt_def_id(&self) -> Option<DefId> {
  1,612 ( 0.00%)          match self.kind {
      .                       ModuleKind::Def(_, def_id, _) => Some(def_id),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               // `self` resolves to the first module ancestor that `is_normal`.
      .               fn is_normal(&self) -> bool {
  2,083 ( 0.00%)          matches!(self.kind, ModuleKind::Def(DefKind::Mod, _, _))
      .               }
      .           
      .               fn is_trait(&self) -> bool {
      9 ( 0.00%)          matches!(self.kind, ModuleKind::Def(DefKind::Trait, _, _))
      .               }
      .           
      .               fn nearest_item_scope(&'a self) -> Module<'a> {
  5,613 ( 0.00%)          match self.kind {
      .                       ModuleKind::Def(DefKind::Enum | DefKind::Trait, ..) => {
      .                           self.parent.expect("enum or trait module without a parent")
      .                       }
      .                       _ => self,
      .                   }
      .               }
      .           
      .               /// The [`DefId`] of the nearest `mod` item ancestor (which may be this module).
      .               /// This may be the crate root.
 91,344 ( 0.02%)      fn nearest_parent_mod(&self) -> DefId {
275,056 ( 0.05%)          match self.kind {
 92,368 ( 0.02%)              ModuleKind::Def(DefKind::Mod, def_id, _) => def_id,
 90,320 ( 0.02%)              _ => self.parent.expect("non-root module without parent").nearest_parent_mod(),
      .                   }
182,688 ( 0.03%)      }
      .           
      .               fn is_ancestor_of(&self, mut other: &Self) -> bool {
      .                   while !ptr::eq(self, other) {
      .                       if let Some(parent) = other.parent {
      .                           other = parent;
      .                       } else {
      .                           return false;
      .                       }
-- line 662 ----------------------------------------
-- line 773 ----------------------------------------
      .               b1: &'a NameBinding<'a>,
      .               b2: &'a NameBinding<'a>,
      .               misc1: AmbiguityErrorMisc,
      .               misc2: AmbiguityErrorMisc,
      .           }
      .           
      .           impl<'a> NameBinding<'a> {
      .               fn module(&self) -> Option<Module<'a>> {
 74,033 ( 0.01%)          match self.kind {
 11,446 ( 0.00%)              NameBindingKind::Module(module) => Some(module),
  2,848 ( 0.00%)              NameBindingKind::Import { binding, .. } => binding.module(),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn res(&self) -> Res {
911,290 ( 0.16%)          match self.kind {
579,209 ( 0.10%)              NameBindingKind::Res(res, _) => res,
  1,445 ( 0.00%)              NameBindingKind::Module(module) => module.res().unwrap(),
 90,526 ( 0.02%)              NameBindingKind::Import { binding, .. } => binding.res(),
      .                   }
      .               }
      .           
      .               fn is_ambiguity(&self) -> bool {
 79,518 ( 0.01%)          self.ambiguity.is_some()
 79,520 ( 0.01%)              || match self.kind {
 39,760 ( 0.01%)                  NameBindingKind::Import { binding, .. } => binding.is_ambiguity(),
      .                           _ => false,
      .                       }
      .               }
      .           
      .               fn is_possibly_imported_variant(&self) -> bool {
      .                   match self.kind {
      .                       NameBindingKind::Import { binding, .. } => binding.is_possibly_imported_variant(),
      .                       NameBindingKind::Res(
-- line 807 ----------------------------------------
-- line 822 ----------------------------------------
      .                           kind: ModuleKind::Def(DefKind::Mod, def_id, _),
      .                           ..
      .                       }) => def_id.index == CRATE_DEF_INDEX,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn is_import(&self) -> bool {
 79,664 ( 0.01%)          matches!(self.kind, NameBindingKind::Import { .. })
      .               }
      .           
      .               fn is_glob_import(&self) -> bool {
232,608 ( 0.04%)          match self.kind {
 59,686 ( 0.01%)              NameBindingKind::Import { import, .. } => import.is_glob(),
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn is_importable(&self) -> bool {
    136 ( 0.00%)          !matches!(
      .                       self.res(),
      .                       Res::Def(DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy, _)
      .                   )
      .               }
      .           
      .               fn is_macro_def(&self) -> bool {
     75 ( 0.00%)          matches!(self.kind, NameBindingKind::Res(Res::Def(DefKind::Macro(..), _), _))
      .               }
      .           
      .               fn macro_kind(&self) -> Option<MacroKind> {
      .                   self.res().macro_kind()
      .               }
      .           
      .               // Suppose that we resolved macro invocation with `invoc_parent_expansion` to binding `binding`
      .               // at some expansion round `max(invoc, binding)` when they both emerged from macros.
-- line 856 ----------------------------------------
-- line 1065 ----------------------------------------
      .               /// they are declared in the static array generated by proc_macro_harness.
      .               proc_macros: Vec<NodeId>,
      .               confused_type_with_std_module: FxHashMap<Span, Span>,
      .           
      .               access_levels: AccessLevels,
      .           }
      .           
      .           /// Nothing really interesting here; it just provides memory for the rest of the crate.
      7 ( 0.00%)  #[derive(Default)]
      .           pub struct ResolverArenas<'a> {
      .               modules: TypedArena<ModuleData<'a>>,
      .               local_modules: RefCell<Vec<Module<'a>>>,
      .               imports: TypedArena<Import<'a>>,
      .               name_resolutions: TypedArena<RefCell<NameResolution<'a>>>,
      .               ast_paths: TypedArena<ast::Path>,
      .               dropless: DroplessArena,
      .           }
      .           
      .           impl<'a> ResolverArenas<'a> {
  5,343 ( 0.00%)      fn new_module(
      .                   &'a self,
      .                   parent: Option<Module<'a>>,
      .                   kind: ModuleKind,
      .                   expn_id: ExpnId,
      .                   span: Span,
      .                   no_implicit_prelude: bool,
      .                   module_map: &mut FxHashMap<DefId, Module<'a>>,
      .               ) -> Module<'a> {
      .                   let module =
      .                       self.modules.alloc(ModuleData::new(parent, kind, expn_id, span, no_implicit_prelude));
      .                   let def_id = module.opt_def_id();
  1,233 ( 0.00%)          if def_id.map_or(true, |def_id| def_id.is_local()) {
      .                       self.local_modules.borrow_mut().push(module);
      .                   }
    411 ( 0.00%)          if let Some(def_id) = def_id {
      .                       module_map.insert(def_id, module);
      .                   }
      .                   module
  3,699 ( 0.00%)      }
      .               fn local_modules(&'a self) -> std::cell::Ref<'a, Vec<Module<'a>>> {
      .                   self.local_modules.borrow()
      .               }
      .               fn alloc_name_binding(&'a self, name_binding: NameBinding<'a>) -> &'a NameBinding<'a> {
      .                   self.dropless.alloc(name_binding)
      .               }
     28 ( 0.00%)      fn alloc_import(&'a self, import: Import<'a>) -> &'a Import<'_> {
  1,342 ( 0.00%)          self.imports.alloc(import)
     28 ( 0.00%)      }
      .               fn alloc_name_resolution(&'a self) -> &'a RefCell<NameResolution<'a>> {
 49,815 ( 0.01%)          self.name_resolutions.alloc(Default::default())
      .               }
      .               fn alloc_macro_rules_scope(&'a self, scope: MacroRulesScope<'a>) -> MacroRulesScopeRef<'a> {
      .                   PtrKey(self.dropless.alloc(Cell::new(scope)))
      .               }
      .               fn alloc_macro_rules_binding(
      .                   &'a self,
      .                   binding: MacroRulesBinding<'a>,
      .               ) -> &'a MacroRulesBinding<'a> {
-- line 1122 ----------------------------------------
-- line 1133 ----------------------------------------
      .           impl<'a> AsMut<Resolver<'a>> for Resolver<'a> {
      .               fn as_mut(&mut self) -> &mut Resolver<'a> {
      .                   self
      .               }
      .           }
      .           
      .           impl<'a, 'b> DefIdTree for &'a Resolver<'b> {
      .               fn parent(self, id: DefId) -> Option<DefId> {
  5,338 ( 0.00%)          match id.as_local() {
      .                       Some(id) => self.definitions.def_key(id).parent,
      .                       None => self.cstore().def_key(id).parent,
      .                   }
      .                   .map(|index| DefId { index, ..id })
      .               }
      .           }
      .           
      .           /// This interface is used through the AST→HIR step, to embed full paths into the HIR. After that
      .           /// the resolver is no longer needed as all the relevant information is inline.
      .           impl ResolverAstLowering for Resolver<'_> {
      .               fn def_key(&mut self, id: DefId) -> DefKey {
      .                   if let Some(id) = id.as_local() {
      .                       self.definitions().def_key(id)
      .                   } else {
  2,315 ( 0.00%)              self.cstore().def_key(id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               fn def_span(&self, id: LocalDefId) -> Span {
      .                   self.definitions.def_span(id)
      .               }
      .           
  1,860 ( 0.00%)      fn item_generics_num_lifetimes(&self, def_id: DefId) -> usize {
    594 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
    142 ( 0.00%)              self.item_generics_num_lifetimes[&def_id]
      .                   } else {
  1,344 ( 0.00%)              self.cstore().item_generics_num_lifetimes(def_id, self.session)
      .                   }
    568 ( 0.00%)      }
      .           
    370 ( 0.00%)      fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>> {
    185 ( 0.00%)          self.legacy_const_generic_args(expr)
    555 ( 0.00%)      }
      .           
  3,925 ( 0.00%)      fn get_partial_res(&self, id: NodeId) -> Option<PartialRes> {
      .                   self.partial_res_map.get(&id).cloned()
 11,775 ( 0.00%)      }
      .           
    360 ( 0.00%)      fn get_import_res(&mut self, id: NodeId) -> PerNS<Option<Res>> {
     90 ( 0.00%)          self.import_res_map.get(&id).cloned().unwrap_or_default()
    450 ( 0.00%)      }
      .           
      .               fn get_label_res(&mut self, id: NodeId) -> Option<NodeId> {
      .                   self.label_res_map.get(&id).cloned()
      .               }
      .           
      .               fn definitions(&mut self) -> &mut Definitions {
    201 ( 0.00%)          &mut self.definitions
    201 ( 0.00%)      }
      .           
  1,796 ( 0.00%)      fn create_stable_hashing_context(&self) -> StableHashingContext<'_> {
  3,197 ( 0.00%)          StableHashingContext::new(self.session, &self.definitions, self.crate_loader.cstore())
  2,245 ( 0.00%)      }
      .           
      .               fn lint_buffer(&mut self) -> &mut LintBuffer {
      .                   &mut self.lint_buffer
      .               }
      .           
      .               fn next_node_id(&mut self) -> NodeId {
      .                   self.next_node_id()
      .               }
      .           
 26,816 ( 0.00%)      fn take_trait_map(&mut self, node: NodeId) -> Option<Vec<TraitCandidate>> {
      .                   self.trait_map.remove(&node)
 26,816 ( 0.00%)      }
      .           
 27,446 ( 0.00%)      fn opt_local_def_id(&self, node: NodeId) -> Option<LocalDefId> {
  2,079 ( 0.00%)          self.node_id_to_def_id.get(&node).copied()
 27,446 ( 0.00%)      }
      .           
  1,208 ( 0.00%)      fn local_def_id(&self, node: NodeId) -> LocalDefId {
      .                   self.opt_local_def_id(node).unwrap_or_else(|| panic!("no entry for node id: `{:?}`", node))
  1,208 ( 0.00%)      }
      .           
      .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash {
      .                   match def_id.as_local() {
      .                       Some(def_id) => self.definitions.def_path_hash(def_id),
      .                       None => self.cstore().def_path_hash(def_id),
      .                   }
      .               }
      .           
      .               /// Adds a definition with a parent definition.
  5,805 ( 0.00%)      fn create_def(
      .                   &mut self,
      .                   parent: LocalDefId,
      .                   node_id: ast::NodeId,
      .                   data: DefPathData,
      .                   expn_id: ExpnId,
      .                   span: Span,
      .               ) -> LocalDefId {
    774 ( 0.00%)          assert!(
    774 ( 0.00%)              !self.node_id_to_def_id.contains_key(&node_id),
      .                       "adding a def'n for node-id {:?} and data {:?} but a previous def'n exists: {:?}",
      .                       node_id,
      .                       data,
      .                       self.definitions.def_key(self.node_id_to_def_id[&node_id]),
      .                   );
      .           
      .                   // Find the next free disambiguator for this key.
    387 ( 0.00%)          let next_disambiguator = &mut self.next_disambiguator;
      .                   let next_disambiguator = |parent, data| {
  1,935 ( 0.00%)              let next_disamb = next_disambiguator.entry((parent, data)).or_insert(0);
    387 ( 0.00%)              let disambiguator = *next_disamb;
    387 ( 0.00%)              *next_disamb = next_disamb.checked_add(1).expect("disambiguator overflow");
      .                       disambiguator
      .                   };
      .           
  3,870 ( 0.00%)          let def_id = self.definitions.create_def(parent, data, expn_id, next_disambiguator, span);
      .           
      .                   // Some things for which we allocate `LocalDefId`s don't correspond to
      .                   // anything in the AST, so they don't have a `NodeId`. For these cases
      .                   // we don't need a mapping from `NodeId` to `LocalDefId`.
  1,161 ( 0.00%)          if node_id != ast::DUMMY_NODE_ID {
      .                       debug!("create_def: def_id_to_node_id[{:?}] <-> {:?}", def_id, node_id);
      .                       self.node_id_to_def_id.insert(node_id, def_id);
      .                   }
  1,161 ( 0.00%)          assert_eq!(self.def_id_to_node_id.push(node_id), def_id);
      .           
      .                   def_id
  3,483 ( 0.00%)      }
      .           }
      .           
      .           impl<'a> Resolver<'a> {
     16 ( 0.00%)      pub fn new(
      .                   session: &'a Session,
      .                   krate: &Crate,
      .                   crate_name: &str,
      .                   metadata_loader: Box<MetadataLoaderDyn>,
      .                   arenas: &'a ResolverArenas<'a>,
      .               ) -> Resolver<'a> {
      .                   let root_def_id = CRATE_DEF_ID.to_def_id();
      .                   let mut module_map = FxHashMap::default();
     14 ( 0.00%)          let graph_root = arenas.new_module(
      .                       None,
      .                       ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty),
      1 ( 0.00%)              ExpnId::root(),
      1 ( 0.00%)              krate.span,
      2 ( 0.00%)              session.contains_name(&krate.attrs, sym::no_implicit_prelude),
      .                       &mut module_map,
      .                   );
     12 ( 0.00%)          let empty_module = arenas.new_module(
      .                       None,
      .                       ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty),
      1 ( 0.00%)              ExpnId::root(),
      .                       DUMMY_SP,
      .                       true,
      .                       &mut FxHashMap::default(),
      .                   );
      .           
      4 ( 0.00%)          let definitions = Definitions::new(session.local_stable_crate_id(), krate.span);
      2 ( 0.00%)          let root = definitions.get_root_def();
      .           
      .                   let mut visibilities = FxHashMap::default();
      .                   visibilities.insert(CRATE_DEF_ID, ty::Visibility::Public);
      .           
      .                   let mut def_id_to_node_id = IndexVec::default();
      2 ( 0.00%)          assert_eq!(def_id_to_node_id.push(CRATE_NODE_ID), root);
      .                   let mut node_id_to_def_id = FxHashMap::default();
      .                   node_id_to_def_id.insert(CRATE_NODE_ID, root);
      .           
      .                   let mut invocation_parents = FxHashMap::default();
      .                   invocation_parents.insert(LocalExpnId::ROOT, (root, ImplTraitContext::Existential));
      .           
      3 ( 0.00%)          let mut extern_prelude: FxHashMap<Ident, ExternPreludeEntry<'_>> = session
      .                       .opts
      .                       .externs
      .                       .iter()
      2 ( 0.00%)              .filter(|(_, entry)| entry.add_prelude)
      2 ( 0.00%)              .map(|(name, _)| (Ident::from_str(name), Default::default()))
      .                       .collect();
      .           
      9 ( 0.00%)          if !session.contains_name(&krate.attrs, sym::no_core) {
      .                       extern_prelude.insert(Ident::with_dummy_span(sym::core), Default::default());
      7 ( 0.00%)              if !session.contains_name(&krate.attrs, sym::no_std) {
      .                           extern_prelude.insert(Ident::with_dummy_span(sym::std), Default::default());
      .                       }
      .                   }
      .           
      8 ( 0.00%)          let (registered_attrs, registered_tools) =
      4 ( 0.00%)              macros::registered_attrs_and_tools(session, &krate.attrs);
      .           
      .                   let features = session.features_untracked();
      .           
    237 ( 0.00%)          let mut resolver = Resolver {
      .                       session,
      .           
      2 ( 0.00%)              definitions,
      .           
      .                       // The outermost module has def ID 0; this is not reflected in the
      .                       // AST.
      .                       graph_root,
      .                       prelude: None,
      4 ( 0.00%)              extern_prelude,
      .           
      .                       has_self: FxHashSet::default(),
      .                       field_names: FxHashMap::default(),
      .           
      .                       determined_imports: Vec::new(),
      .                       indeterminate_imports: Vec::new(),
      .           
      .                       last_import_segment: false,
-- line 1343 ----------------------------------------
-- line 1347 ----------------------------------------
      .                       partial_res_map: Default::default(),
      .                       import_res_map: Default::default(),
      .                       label_res_map: Default::default(),
      .                       extern_crate_map: Default::default(),
      .                       reexport_map: FxHashMap::default(),
      .                       trait_map: NodeMap::default(),
      .                       underscore_disambiguator: 0,
      .                       empty_module,
      4 ( 0.00%)              module_map,
      .                       block_map: Default::default(),
      .                       binding_parent_modules: FxHashMap::default(),
      .                       ast_transform_scopes: FxHashMap::default(),
      .           
      .                       glob_map: Default::default(),
      4 ( 0.00%)              visibilities,
      .                       used_imports: FxHashSet::default(),
      .                       maybe_unused_trait_imports: Default::default(),
      .                       maybe_unused_extern_crates: Vec::new(),
      .           
      .                       privacy_errors: Vec::new(),
      .                       ambiguity_errors: Vec::new(),
      .                       use_injections: Vec::new(),
      .                       macro_expanded_macro_export_errors: BTreeSet::new(),
-- line 1369 ----------------------------------------
-- line 1372 ----------------------------------------
      .                       dummy_binding: arenas.alloc_name_binding(NameBinding {
      .                           kind: NameBindingKind::Res(Res::Err, false),
      .                           ambiguity: None,
      .                           expansion: LocalExpnId::ROOT,
      .                           span: DUMMY_SP,
      .                           vis: ty::Visibility::Public,
      .                       }),
      .           
      6 ( 0.00%)              crate_loader: CrateLoader::new(session, metadata_loader, crate_name),
      .                       macro_names: FxHashSet::default(),
      .                       builtin_macros: Default::default(),
      4 ( 0.00%)              registered_attrs,
      4 ( 0.00%)              registered_tools,
      .                       macro_use_prelude: FxHashMap::default(),
      .                       all_macros: FxHashMap::default(),
      .                       macro_map: FxHashMap::default(),
      7 ( 0.00%)              dummy_ext_bang: Lrc::new(SyntaxExtension::dummy_bang(session.edition())),
      6 ( 0.00%)              dummy_ext_derive: Lrc::new(SyntaxExtension::dummy_derive(session.edition())),
      5 ( 0.00%)              non_macro_attr: Lrc::new(SyntaxExtension::non_macro_attr(session.edition())),
      .                       invocation_parent_scopes: Default::default(),
      .                       output_macro_rules_scopes: Default::default(),
      .                       helper_attrs: Default::default(),
      .                       derive_data: Default::default(),
      .                       local_macro_def_scopes: FxHashMap::default(),
      .                       name_already_seen: FxHashMap::default(),
      .                       potentially_unused_imports: Vec::new(),
      .                       struct_constructors: Default::default(),
-- line 1398 ----------------------------------------
-- line 1405 ----------------------------------------
      .                       active_features: features
      .                           .declared_lib_features
      .                           .iter()
      .                           .map(|(feat, ..)| *feat)
      .                           .chain(features.declared_lang_features.iter().map(|(feat, ..)| *feat))
      .                           .collect(),
      .                       lint_buffer: LintBuffer::default(),
      .                       next_node_id: CRATE_NODE_ID,
      4 ( 0.00%)              node_id_to_def_id,
      4 ( 0.00%)              def_id_to_node_id,
      .                       placeholder_field_indices: Default::default(),
      4 ( 0.00%)              invocation_parents,
      .                       next_disambiguator: Default::default(),
      .                       trait_impl_items: Default::default(),
      .                       legacy_const_generic_args: Default::default(),
      .                       item_generics_num_lifetimes: Default::default(),
      .                       main_def: Default::default(),
      .                       trait_impls: Default::default(),
      .                       proc_macros: Default::default(),
      .                       confused_type_with_std_module: Default::default(),
      .                       access_levels: Default::default(),
      .                   };
      .           
      .                   let root_parent_scope = ParentScope::module(graph_root, &resolver);
      .                   resolver.invocation_parent_scopes.insert(LocalExpnId::ROOT, root_parent_scope);
      .           
      .                   resolver
      9 ( 0.00%)      }
      .           
      .               fn new_module(
      .                   &mut self,
      .                   parent: Option<Module<'a>>,
      .                   kind: ModuleKind,
      .                   expn_id: ExpnId,
      .                   span: Span,
      .                   no_implicit_prelude: bool,
      .               ) -> Module<'a> {
     12 ( 0.00%)          let module_map = &mut self.module_map;
  4,102 ( 0.00%)          self.arenas.new_module(parent, kind, expn_id, span, no_implicit_prelude, module_map)
      .               }
      .           
      .               pub fn next_node_id(&mut self) -> NodeId {
      .                   let next =
  7,217 ( 0.00%)              self.next_node_id.as_u32().checked_add(1).expect("input too large; ran out of NodeIds");
      .                   mem::replace(&mut self.next_node_id, ast::NodeId::from_u32(next))
      .               }
      .           
      .               pub fn lint_buffer(&mut self) -> &mut LintBuffer {
      3 ( 0.00%)          &mut self.lint_buffer
      3 ( 0.00%)      }
      .           
      1 ( 0.00%)      pub fn arenas() -> ResolverArenas<'a> {
      .                   Default::default()
      1 ( 0.00%)      }
      .           
      9 ( 0.00%)      pub fn into_outputs(self) -> ResolverOutputs {
      .                   let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();
      1 ( 0.00%)          let definitions = self.definitions;
      4 ( 0.00%)          let visibilities = self.visibilities;
      4 ( 0.00%)          let extern_crate_map = self.extern_crate_map;
      4 ( 0.00%)          let reexport_map = self.reexport_map;
      4 ( 0.00%)          let maybe_unused_trait_imports = self.maybe_unused_trait_imports;
      4 ( 0.00%)          let maybe_unused_extern_crates = self.maybe_unused_extern_crates;
      4 ( 0.00%)          let glob_map = self.glob_map;
      6 ( 0.00%)          let main_def = self.main_def;
      4 ( 0.00%)          let confused_type_with_std_module = self.confused_type_with_std_module;
      6 ( 0.00%)          let access_levels = self.access_levels;
     37 ( 0.00%)          ResolverOutputs {
      2 ( 0.00%)              definitions,
     11 ( 0.00%)              cstore: Box::new(self.crate_loader.into_cstore()),
      4 ( 0.00%)              visibilities,
      4 ( 0.00%)              access_levels,
      4 ( 0.00%)              extern_crate_map,
      4 ( 0.00%)              reexport_map,
      4 ( 0.00%)              glob_map,
      4 ( 0.00%)              maybe_unused_trait_imports,
      4 ( 0.00%)              maybe_unused_extern_crates,
      .                       extern_prelude: self
      .                           .extern_prelude
      .                           .iter()
      5 ( 0.00%)                  .map(|(ident, entry)| (ident.name, entry.introduced_by_item))
      .                           .collect(),
      6 ( 0.00%)              main_def,
      4 ( 0.00%)              trait_impls: self.trait_impls,
      4 ( 0.00%)              proc_macros,
      4 ( 0.00%)              confused_type_with_std_module,
      5 ( 0.00%)              registered_tools: self.registered_tools,
      .                   }
     19 ( 0.00%)      }
      .           
      .               pub fn clone_outputs(&self) -> ResolverOutputs {
      .                   let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();
      .                   ResolverOutputs {
      .                       definitions: self.definitions.clone(),
      .                       access_levels: self.access_levels.clone(),
      .                       cstore: Box::new(self.cstore().clone()),
      .                       visibilities: self.visibilities.clone(),
-- line 1501 ----------------------------------------
-- line 1513 ----------------------------------------
      .                       trait_impls: self.trait_impls.clone(),
      .                       proc_macros,
      .                       confused_type_with_std_module: self.confused_type_with_std_module.clone(),
      .                       registered_tools: self.registered_tools.clone(),
      .                   }
      .               }
      .           
      .               pub fn cstore(&self) -> &CStore {
 25,577 ( 0.00%)          self.crate_loader.cstore()
      .               }
      .           
      .               fn dummy_ext(&self, macro_kind: MacroKind) -> Lrc<SyntaxExtension> {
      .                   match macro_kind {
      .                       MacroKind::Bang => self.dummy_ext_bang.clone(),
      .                       MacroKind::Derive => self.dummy_ext_derive.clone(),
      .                       MacroKind::Attr => self.non_macro_attr.clone(),
      .                   }
      .               }
      .           
      .               /// Runs the function on each namespace.
    366 ( 0.00%)      fn per_ns<F: FnMut(&mut Self, Namespace)>(&mut self, mut f: F) {
    728 ( 0.00%)          f(self, TypeNS);
    692 ( 0.00%)          f(self, ValueNS);
    692 ( 0.00%)          f(self, MacroNS);
    324 ( 0.00%)      }
      .           
      .               fn is_builtin_macro(&mut self, res: Res) -> bool {
      .                   self.get_macro(res).map_or(false, |ext| ext.builtin_name.is_some())
      .               }
      .           
      .               fn macro_def(&self, mut ctxt: SyntaxContext) -> DefId {
      .                   loop {
      .                       match ctxt.outer_expn_data().macro_def_id {
      .                           Some(def_id) => return def_id,
      .                           None => ctxt.remove_mark(),
      .                       };
      .                   }
      .               }
      .           
      .               /// Entry point to crate resolution.
      2 ( 0.00%)      pub fn resolve_crate(&mut self, krate: &Crate) {
      4 ( 0.00%)          self.session.time("resolve_crate", || {
      3 ( 0.00%)              self.session.time("finalize_imports", || ImportResolver { r: self }.finalize_imports());
      .                       self.session.time("resolve_access_levels", || {
      3 ( 0.00%)                  AccessLevelsVisitor::compute_access_levels(self, krate)
      .                       });
      2 ( 0.00%)              self.session.time("finalize_macro_resolutions", || self.finalize_macro_resolutions());
      3 ( 0.00%)              self.session.time("late_resolve_crate", || self.late_resolve_crate(krate));
      2 ( 0.00%)              self.session.time("resolve_main", || self.resolve_main());
      3 ( 0.00%)              self.session.time("resolve_check_unused", || self.check_unused(krate));
      3 ( 0.00%)              self.session.time("resolve_report_errors", || self.report_errors(krate));
      4 ( 0.00%)              self.session.time("resolve_postprocess", || self.crate_loader.postprocess(krate));
      .                   });
      .               }
      .           
  3,840 ( 0.00%)      pub fn traits_in_scope(
      .                   &mut self,
      .                   current_trait: Option<Module<'a>>,
      .                   parent_scope: &ParentScope<'a>,
      .                   ctxt: SyntaxContext,
      .                   assoc_item: Option<(Symbol, Namespace)>,
      .               ) -> Vec<TraitCandidate> {
      .                   let mut found_traits = Vec::new();
      .           
    640 ( 0.00%)          if let Some(module) = current_trait {
      .                       if self.trait_may_have_item(Some(module), assoc_item) {
      .                           let def_id = module.def_id();
     12 ( 0.00%)                  found_traits.push(TraitCandidate { def_id, import_ids: smallvec![] });
      .                       }
      .                   }
      .           
      .                   self.visit_scopes(ScopeSet::All(TypeNS, false), parent_scope, ctxt, |this, scope, _, _| {
      .                       match scope {
      .                           Scope::Module(module, _) => {
      .                               this.traits_in_module(module, assoc_item, &mut found_traits);
      .                           }
      .                           Scope::StdLibPrelude => {
    960 ( 0.00%)                      if let Some(module) = this.prelude {
      .                                   this.traits_in_module(module, assoc_item, &mut found_traits);
      .                               }
      .                           }
      .                           Scope::ExternPrelude | Scope::ToolPrelude | Scope::BuiltinTypes => {}
      .                           _ => unreachable!(),
      .                       }
      .                       None::<()>
      .                   });
      .           
      .                   found_traits
  2,560 ( 0.00%)      }
      .           
      .               fn traits_in_module(
      .                   &mut self,
      .                   module: Module<'a>,
      .                   assoc_item: Option<(Symbol, Namespace)>,
      .                   found_traits: &mut Vec<TraitCandidate>,
      .               ) {
      .                   module.ensure_traits(self);
      .                   let traits = module.traits.borrow();
 22,733 ( 0.00%)          for (trait_name, trait_binding) in traits.as_ref().unwrap().iter() {
      .                       if self.trait_may_have_item(trait_binding.module(), assoc_item) {
      .                           let def_id = trait_binding.res().def_id();
    498 ( 0.00%)                  let import_ids = self.find_transitive_imports(&trait_binding.kind, *trait_name);
  1,494 ( 0.00%)                  found_traits.push(TraitCandidate { def_id, import_ids });
      .                       }
      .                   }
      .               }
      .           
      .               // List of traits in scope is pruned on best effort basis. We reject traits not having an
      .               // associated item with the given name and namespace (if specified). This is a conservative
      .               // optimization, proper hygienic type-based resolution of associated items is done in typeck.
      .               // We don't reject trait aliases (`trait_module == None`) because we don't have access to their
      .               // associated items.
      .               fn trait_may_have_item(
      .                   &mut self,
      .                   trait_module: Option<Module<'a>>,
      .                   assoc_item: Option<(Symbol, Namespace)>,
      .               ) -> bool {
 11,005 ( 0.00%)          match (trait_module, assoc_item) {
      .                       (Some(trait_module), Some((name, ns))) => {
 22,002 ( 0.00%)                  self.resolutions(trait_module).borrow().iter().any(|resolution| {
      .                               let (&BindingKey { ident: assoc_ident, ns: assoc_ns, .. }, _) = resolution;
 83,516 ( 0.01%)                      assoc_ns == ns && assoc_ident.name == name
      .                           })
      .                       }
      .                       _ => true,
      .                   }
      .               }
      .           
      .               fn find_transitive_imports(
      .                   &mut self,
      .                   mut kind: &NameBindingKind<'_>,
      .                   trait_name: Ident,
      .               ) -> SmallVec<[LocalDefId; 1]> {
      .                   let mut import_ids = smallvec![];
    896 ( 0.00%)          while let NameBindingKind::Import { import, binding, .. } = kind {
    354 ( 0.00%)              let id = self.local_def_id(import.id);
      .                       self.maybe_unused_trait_imports.insert(id);
    118 ( 0.00%)              self.add_to_glob_map(&import, trait_name);
      .                       import_ids.push(id);
    118 ( 0.00%)              kind = &binding.kind;
      .                   }
      .                   import_ids
      .               }
      .           
      .               fn new_key(&mut self, ident: Ident, ns: Namespace) -> BindingKey {
 67,657 ( 0.01%)          let ident = ident.normalize_to_macros_2_0();
 13,103 ( 0.00%)          let disambiguator = if ident.name == kw::Underscore {
      .                       self.underscore_disambiguator += 1;
      .                       self.underscore_disambiguator
      .                   } else {
      .                       0
      .                   };
      .                   BindingKey { ident, ns, disambiguator }
      .               }
      .           
550,608 ( 0.10%)      fn resolutions(&mut self, module: Module<'a>) -> &'a Resolutions<'a> {
 68,826 ( 0.01%)          if module.populate_on_access.get() {
      .                       module.populate_on_access.set(false);
      .                       self.build_reduced_graph_external(module);
      .                   }
 68,826 ( 0.01%)          &module.lazy_resolutions
619,434 ( 0.11%)      }
      .           
520,119 ( 0.09%)      fn resolution(
      .                   &mut self,
      .                   module: Module<'a>,
      .                   key: BindingKey,
      .               ) -> &'a RefCell<NameResolution<'a>> {
173,373 ( 0.03%)          *self
      .                       .resolutions(module)
      .                       .borrow_mut()
346,746 ( 0.06%)              .entry(key)
115,582 ( 0.02%)              .or_insert_with(|| self.arenas.alloc_name_resolution())
462,328 ( 0.08%)      }
      .           
 11,902 ( 0.00%)      fn record_use(
      .                   &mut self,
      .                   ident: Ident,
      .                   used_binding: &'a NameBinding<'a>,
      .                   is_lexical_scope: bool,
      .               ) {
  3,246 ( 0.00%)          if let Some((b2, kind)) = used_binding.ambiguity {
      .                       self.ambiguity_errors.push(AmbiguityError {
      .                           kind,
      .                           ident,
      .                           b1: used_binding,
      .                           b2,
      .                           misc1: AmbiguityErrorMisc::None,
      .                           misc2: AmbiguityErrorMisc::None,
      .                       });
      .                   }
  2,602 ( 0.00%)          if let NameBindingKind::Import { import, binding, ref used } = used_binding.kind {
      .                       // Avoid marking `extern crate` items that refer to a name from extern prelude,
      .                       // but not introduce it, as used if they are accessed from lexical scope.
    438 ( 0.00%)              if is_lexical_scope {
     11 ( 0.00%)                  if let Some(entry) = self.extern_prelude.get(&ident.normalize_to_macros_2_0()) {
      5 ( 0.00%)                      if let Some(crate_item) = entry.extern_crate_item {
      2 ( 0.00%)                          if ptr::eq(used_binding, crate_item) && !entry.introduced_by_item {
      .                                       return;
      .                                   }
      .                               }
      .                           }
      .                       }
      .                       used.set(true);
      .                       import.used.set(true);
    219 ( 0.00%)              self.used_imports.insert(import.id);
  1,095 ( 0.00%)              self.add_to_glob_map(&import, ident);
  1,314 ( 0.00%)              self.record_use(ident, binding, false);
      .                   }
  8,656 ( 0.00%)      }
      .           
      .               #[inline]
    657 ( 0.00%)      fn add_to_glob_map(&mut self, import: &Import<'_>, ident: Ident) {
    337 ( 0.00%)          if import.is_glob() {
      8 ( 0.00%)              let def_id = self.local_def_id(import.id);
      .                       self.glob_map.entry(def_id).or_default().insert(ident.name);
      .                   }
    860 ( 0.00%)      }
      .           
      .               /// A generic scope visitor.
      .               /// Visits scopes in order to resolve some identifier in them or perform other actions.
      .               /// If the callback returns `Some` result, we stop visiting scopes and return it.
      .               fn visit_scopes<T>(
      .                   &mut self,
      .                   scope_set: ScopeSet<'a>,
      .                   parent_scope: &ParentScope<'a>,
-- line 1738 ----------------------------------------
-- line 1780 ----------------------------------------
      .                   //    ambiguities with `macro_rules`.
      .                   // 4. `macro_use` prelude (open, the open part is from macro expansions, not controlled).
      .                   // 4a. User-defined prelude from macro-use
      .                   //    (open, the open part is from macro expansions, not controlled).
      .                   // 4b. "Standard library prelude" part implemented through `macro-use` (closed, controlled).
      .                   // 4c. Standard library prelude (de-facto closed, controlled).
      .                   // 6. Language prelude: builtin attributes (closed, controlled).
      .           
 12,183 ( 0.00%)          let rust_2015 = ctxt.edition() == Edition::Edition2015;
      .                   let (ns, macro_kind, is_absolute_path) = match scope_set {
      .                       ScopeSet::All(ns, _) => (ns, None, false),
      .                       ScopeSet::AbsolutePath(ns) => (ns, None, true),
      .                       ScopeSet::Macro(macro_kind) => (MacroNS, Some(macro_kind), false),
      .                       ScopeSet::Late(ns, ..) => (ns, None, false),
      .                   };
 34,916 ( 0.01%)          let module = match scope_set {
      .                       // Start with the specified module.
      .                       ScopeSet::Late(_, module, _) => module,
      .                       // Jump out of trait or enum modules, they do not act as scopes.
    677 ( 0.00%)              _ => parent_scope.module.nearest_item_scope(),
      .                   };
  2,494 ( 0.00%)          let mut scope = match ns {
  6,235 ( 0.00%)              _ if is_absolute_path => Scope::CrateRoot,
      .                       TypeNS | ValueNS => Scope::Module(module, None),
    903 ( 0.00%)              MacroNS => Scope::DeriveHelpers(parent_scope.expansion),
      .                   };
  3,134 ( 0.00%)          let mut ctxt = ctxt.normalize_to_macros_2_0();
  8,828 ( 0.00%)          let mut use_prelude = !module.no_implicit_prelude;
      .           
      .                   loop {
 49,084 ( 0.01%)              let visit = match scope {
      .                           // Derive helpers are not in scope when resolving derives in the same container.
      .                           Scope::DeriveHelpers(expn_id) => {
    923 ( 0.00%)                      !(expn_id == parent_scope.expansion && macro_kind == Some(MacroKind::Derive))
      .                           }
      .                           Scope::DeriveHelpersCompat => true,
      .                           Scope::MacroRules(macro_rules_scope) => {
      .                               // Use "path compression" on `macro_rules` scope chains. This is an optimization
      .                               // used to avoid long scope chains, see the comments on `MacroRulesScopeRef`.
      .                               // As another consequence of this optimization visitors never observe invocation
      .                               // scopes for macros that were already expanded.
    656 ( 0.00%)                      while let MacroRulesScope::Invocation(invoc_id) = macro_rules_scope.get() {
      .                                   if let Some(next_scope) = self.output_macro_rules_scopes.get(&invoc_id) {
      .                                       macro_rules_scope.set(next_scope.get());
      .                                   } else {
      .                                       break;
      .                                   }
      .                               }
      .                               true
      .                           }
      .                           Scope::CrateRoot => true,
      .                           Scope::Module(..) => true,
    301 ( 0.00%)                  Scope::RegisteredAttrs => use_prelude,
      .                           Scope::MacroUsePrelude => use_prelude || rust_2015,
      .                           Scope::BuiltinAttrs => true,
    960 ( 0.00%)                  Scope::ExternPrelude => use_prelude || is_absolute_path,
    253 ( 0.00%)                  Scope::ToolPrelude => use_prelude,
  4,996 ( 0.00%)                  Scope::StdLibPrelude => use_prelude || ns == MacroNS,
      .                           Scope::BuiltinTypes => true,
      .                       };
      .           
  1,480 ( 0.00%)              if visit {
  4,719 ( 0.00%)                  if let break_result @ Some(..) = visitor(self, scope, use_prelude, ctxt) {
      .                               return break_result;
      .                           }
      .                       }
      .           
 17,177 ( 0.00%)              scope = match scope {
      .                           Scope::DeriveHelpers(LocalExpnId::ROOT) => Scope::DeriveHelpersCompat,
      .                           Scope::DeriveHelpers(expn_id) => {
      .                               // Derive helpers are not visible to code generated by bang or derive macros.
      .                               let expn_data = expn_id.expn_data();
  1,926 ( 0.00%)                      match expn_data.kind {
      .                                   ExpnKind::Root
      .                                   | ExpnKind::Macro(MacroKind::Bang | MacroKind::Derive, _) => {
      .                                       Scope::DeriveHelpersCompat
      .                                   }
     20 ( 0.00%)                          _ => Scope::DeriveHelpers(expn_data.parent.expect_local()),
      .                               }
      .                           }
    903 ( 0.00%)                  Scope::DeriveHelpersCompat => Scope::MacroRules(parent_scope.macro_rules),
    602 ( 0.00%)                  Scope::MacroRules(macro_rules_scope) => match macro_rules_scope.get() {
      .                               MacroRulesScope::Binding(binding) => {
      .                                   Scope::MacroRules(binding.parent_macro_rules_scope)
      .                               }
      .                               MacroRulesScope::Invocation(invoc_id) => {
      .                                   Scope::MacroRules(self.invocation_parent_scopes[&invoc_id].macro_rules)
      .                               }
      .                               MacroRulesScope::Empty => Scope::Module(module, None),
      .                           },
-- line 1869 ----------------------------------------
-- line 1870 ----------------------------------------
      .                           Scope::CrateRoot => match ns {
      .                               TypeNS => {
      .                                   ctxt.adjust(ExpnId::root());
      .                                   Scope::ExternPrelude
      .                               }
      .                               ValueNS | MacroNS => break,
      .                           },
      .                           Scope::Module(module, prev_lint_id) => {
  5,326 ( 0.00%)                      use_prelude = !module.no_implicit_prelude;
      .                               let derive_fallback_lint_id = match scope_set {
      .                                   ScopeSet::Late(.., lint_id) => lint_id,
      .                                   _ => None,
      .                               };
  9,729 ( 0.00%)                      match self.hygienic_lexical_parent(module, &mut ctxt, derive_fallback_lint_id) {
      .                                   Some((parent_module, lint_id)) => {
      .                                       Scope::Module(parent_module, lint_id.or(prev_lint_id))
      .                                   }
      .                                   None => {
  6,220 ( 0.00%)                              ctxt.adjust(ExpnId::root());
  2,800 ( 0.00%)                              match ns {
      .                                           TypeNS => Scope::ExternPrelude,
      .                                           ValueNS => Scope::StdLibPrelude,
      .                                           MacroNS => Scope::RegisteredAttrs,
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                           Scope::RegisteredAttrs => Scope::MacroUsePrelude,
      .                           Scope::MacroUsePrelude => Scope::StdLibPrelude,
      .                           Scope::BuiltinAttrs => break, // nowhere else to search
    506 ( 0.00%)                  Scope::ExternPrelude if is_absolute_path => break,
      .                           Scope::ExternPrelude => Scope::ToolPrelude,
      .                           Scope::ToolPrelude => Scope::StdLibPrelude,
  2,252 ( 0.00%)                  Scope::StdLibPrelude => match ns {
      .                               TypeNS => Scope::BuiltinTypes,
      .                               ValueNS => break, // nowhere else to search
      .                               MacroNS => Scope::BuiltinAttrs,
      .                           },
      .                           Scope::BuiltinTypes => break, // nowhere else to search
      .                       };
      .                   }
      .           
-- line 1911 ----------------------------------------
-- line 1924 ----------------------------------------
      .               ///    let g = || {};
      .               ///    fn g() {}
      .               ///    g(); // This resolves to the local variable `g` since it shadows the item.
      .               /// }
      .               /// ```
      .               ///
      .               /// Invariant: This must only be called during main resolution, not during
      .               /// import resolution.
 18,310 ( 0.00%)      fn resolve_ident_in_lexical_scope(
      .                   &mut self,
      .                   mut ident: Ident,
      .                   ns: Namespace,
      .                   parent_scope: &ParentScope<'a>,
      .                   record_used_id: Option<NodeId>,
      .                   path_span: Span,
      .                   ribs: &[Rib<'a>],
      .               ) -> Option<LexicalScopeBinding<'a>> {
  3,662 ( 0.00%)          assert!(ns == TypeNS || ns == ValueNS);
      .                   let orig_ident = ident;
 12,817 ( 0.00%)          if ident.name == kw::Empty {
      .                       return Some(LexicalScopeBinding::Res(Res::Err));
      .                   }
      .                   let (general_span, normalized_span) = if ident.name == kw::SelfUpper {
      .                       // FIXME(jseyfried) improve `Self` hygiene
      .                       let empty_span = ident.span.with_ctxt(SyntaxContext::root());
      .                       (empty_span, empty_span)
  1,788 ( 0.00%)          } else if ns == TypeNS {
  3,605 ( 0.00%)              let normalized_span = ident.span.normalize_to_macros_2_0();
      .                       (normalized_span, normalized_span)
      .                   } else {
  5,335 ( 0.00%)              (ident.span.normalize_to_macro_rules(), ident.span.normalize_to_macros_2_0())
      .                   };
      .                   ident.span = general_span;
      .                   let normalized_ident = Ident { span: normalized_span, ..ident };
      .           
      .                   // Walk backwards up the ribs in scope.
      .                   let record_used = record_used_id.is_some();
  5,493 ( 0.00%)          let mut module = self.graph_root;
      .                   for i in (0..ribs.len()).rev() {
      .                       debug!("walk rib\n{:?}", ribs[i].bindings);
      .                       // Use the rib kind to determine whether we are resolving parameters
      .                       // (macro 2.0 hygiene) or local variables (`macro_rules` hygiene).
  6,319 ( 0.00%)              let rib_ident = if ribs[i].kind.contains_params() { normalized_ident } else { ident };
      .                       if let Some((original_rib_ident_def, res)) = ribs[i].bindings.get_key_value(&rib_ident)
      .                       {
      .                           // The ident resolves to a type parameter or local variable.
 10,380 ( 0.00%)                  return Some(LexicalScopeBinding::Res(self.validate_res_from_ribs(
      .                               i,
  1,730 ( 0.00%)                      rib_ident,
  4,325 ( 0.00%)                      *res,
      .                               record_used,
      .                               path_span,
      .                               *original_rib_ident_def,
      .                               ribs,
      .                           )));
      .                       }
      .           
 32,666 ( 0.01%)              module = match ribs[i].kind {
  1,378 ( 0.00%)                  ModuleRibKind(module) => module,
      .                           MacroDefinition(def) if def == self.macro_def(ident.span.ctxt()) => {
      .                               // If an invocation of this macro created `ident`, give up on `ident`
      .                               // and switch to `ident`'s source from the macro definition.
      .                               ident.span.remove_mark();
      .                               continue;
      .                           }
      .                           _ => continue,
      .                       };
      .           
  4,134 ( 0.00%)              match module.kind {
      .                           ModuleKind::Block(..) => {} // We can see through blocks
      .                           _ => break,
      .                       }
      .           
      .                       let item = self.resolve_ident_in_module_unadjusted(
      .                           ModuleOrUniformRoot::Module(module),
      .                           ident,
      .                           ns,
      .                           parent_scope,
      .                           record_used,
      .                           path_span,
      .                       );
      .                       if let Ok(binding) = item {
      .                           // The ident resolves to an item.
    144 ( 0.00%)                  return Some(LexicalScopeBinding::Item(binding));
      .                       }
      .                   }
 15,606 ( 0.00%)          self.early_resolve_ident_in_lexical_scope(
      .                       orig_ident,
      .                       ScopeSet::Late(ns, module, record_used_id),
      .                       parent_scope,
      .                       record_used,
      .                       record_used,
      .                       path_span,
      .                   )
      .                   .ok()
      .                   .map(LexicalScopeBinding::Item)
 16,479 ( 0.00%)      }
      .           
 17,039 ( 0.00%)      fn hygienic_lexical_parent(
      .                   &mut self,
      .                   module: Module<'a>,
      .                   ctxt: &mut SyntaxContext,
      .                   derive_fallback_lint_id: Option<NodeId>,
      .               ) -> Option<(Module<'a>, Option<NodeId>)> {
 10,843 ( 0.00%)          if !module.expansion.outer_expn_is_descendant_of(*ctxt) {
    552 ( 0.00%)              return Some((self.expn_def_scope(ctxt.remove_mark()), None));
      .                   }
      .           
  2,914 ( 0.00%)          if let ModuleKind::Block(..) = module.kind {
    277 ( 0.00%)              return Some((module.parent.unwrap().nearest_item_scope(), None));
      .                   }
      .           
      .                   // We need to support the next case under a deprecation warning
      .                   // ```
      .                   // struct MyStruct;
      .                   // ---- begin: this comes from a proc macro derive
      .                   // mod implementation_details {
      .                   //     // Note that `MyStruct` is not in scope here.
      .                   //     impl SomeTrait for MyStruct { ... }
      .                   // }
      .                   // ---- end
      .                   // ```
      .                   // So we have to fall back to the module's parent during lexical resolution in this case.
  1,180 ( 0.00%)          if derive_fallback_lint_id.is_some() {
    546 ( 0.00%)              if let Some(parent) = module.parent {
      .                           // Inner module is inside the macro, parent module is outside of the macro.
    910 ( 0.00%)                  if module.expansion != parent.expansion
      .                               && module.expansion.is_descendant_of(parent.expansion)
      .                           {
      .                               // The macro is a proc macro derive
      .                               if let Some(def_id) = module.expansion.expn_data().macro_def_id {
      .                                   let ext = self.get_macro_by_def_id(def_id);
      .                                   if ext.builtin_name.is_none()
      .                                       && ext.macro_kind() == MacroKind::Derive
      .                                       && parent.expansion.outer_expn_is_descendant_of(*ctxt)
-- line 2058 ----------------------------------------
-- line 2060 ----------------------------------------
      .                                       return Some((parent, derive_fallback_lint_id));
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   }
      .           
      .                   None
 15,490 ( 0.00%)      }
      .           
      .               fn resolve_ident_in_module(
      .                   &mut self,
      .                   module: ModuleOrUniformRoot<'a>,
      .                   ident: Ident,
      .                   ns: Namespace,
      .                   parent_scope: &ParentScope<'a>,
      .                   record_used: bool,
      .                   path_span: Span,
      .               ) -> Result<&'a NameBinding<'a>, Determinacy> {
  6,633 ( 0.00%)          self.resolve_ident_in_module_ext(module, ident, ns, parent_scope, record_used, path_span)
      .                       .map_err(|(determinacy, _)| determinacy)
      .               }
      .           
 15,020 ( 0.00%)      fn resolve_ident_in_module_ext(
      .                   &mut self,
      .                   module: ModuleOrUniformRoot<'a>,
      .                   mut ident: Ident,
      .                   ns: Namespace,
      .                   parent_scope: &ParentScope<'a>,
      .                   record_used: bool,
      .                   path_span: Span,
      .               ) -> Result<&'a NameBinding<'a>, (Determinacy, Weak)> {
      .                   let tmp_parent_scope;
      .                   let mut adjusted_parent_scope = parent_scope;
      .                   match module {
      .                       ModuleOrUniformRoot::Module(m) => {
  4,512 ( 0.00%)                  if let Some(def) = ident.span.normalize_to_macros_2_0_and_adjust(m.expansion) {
    360 ( 0.00%)                      tmp_parent_scope =
    432 ( 0.00%)                          ParentScope { module: self.expn_def_scope(def), ..*parent_scope };
      .                               adjusted_parent_scope = &tmp_parent_scope;
      .                           }
      .                       }
      .                       ModuleOrUniformRoot::ExternPrelude => {
      .                           ident.span.normalize_to_macros_2_0_and_adjust(ExpnId::root());
      .                       }
      .                       ModuleOrUniformRoot::CrateRootAndExternPrelude | ModuleOrUniformRoot::CurrentScope => {
      .                           // No adjustments
      .                       }
      .                   }
  8,271 ( 0.00%)          self.resolve_ident_in_module_unadjusted_ext(
      .                       module,
  1,504 ( 0.00%)              ident,
      .                       ns,
      .                       adjusted_parent_scope,
      .                       false,
      .                       record_used,
      .                       path_span,
      .                   )
  5,257 ( 0.00%)      }
      .           
  2,590 ( 0.00%)      fn resolve_crate_root(&mut self, ident: Ident) -> Module<'a> {
      .                   debug!("resolve_crate_root({:?})", ident);
    259 ( 0.00%)          let mut ctxt = ident.span.ctxt();
    259 ( 0.00%)          let mark = if ident.name == kw::DollarCrate {
      .                       // When resolving `$crate` from a `macro_rules!` invoked in a `macro`,
      .                       // we don't want to pretend that the `macro_rules!` definition is in the `macro`
      .                       // as described in `SyntaxContext::apply_mark`, so we ignore prepended opaque marks.
      .                       // FIXME: This is only a guess and it doesn't work correctly for `macro_rules!`
      .                       // definitions actually produced by `macro` and `macro` definitions produced by
      .                       // `macro_rules!`, but at least such configurations are not stable yet.
    458 ( 0.00%)              ctxt = ctxt.normalize_to_macro_rules();
      .                       debug!(
      .                           "resolve_crate_root: marks={:?}",
      .                           ctxt.marks().into_iter().map(|(i, t)| (i.expn_data(), t)).collect::<Vec<_>>()
      .                       );
    458 ( 0.00%)              let mut iter = ctxt.marks().into_iter().rev().peekable();
      .                       let mut result = None;
      .                       // Find the last opaque mark from the end if it exists.
    966 ( 0.00%)              while let Some(&(mark, transparency)) = iter.peek() {
      .                           if transparency == Transparency::Opaque {
      .                               result = Some(mark);
      .                               iter.next();
      .                           } else {
      .                               break;
      .                           }
      .                       }
      .                       debug!(
      .                           "resolve_crate_root: found opaque mark {:?} {:?}",
      .                           result,
      .                           result.map(|r| r.expn_data())
      .                       );
      .                       // Then find the last semi-transparent mark from the end if it exists.
    951 ( 0.00%)              for (mark, transparency) in iter {
      .                           if transparency == Transparency::SemiTransparent {
      .                               result = Some(mark);
      .                           } else {
      .                               break;
      .                           }
      .                       }
      .                       debug!(
      .                           "resolve_crate_root: found semi-transparent mark {:?} {:?}",
      .                           result,
      .                           result.map(|r| r.expn_data())
      .                       );
      .                       result
      .                   } else {
      .                       debug!("resolve_crate_root: not DollarCrate");
     30 ( 0.00%)              ctxt = ctxt.normalize_to_macros_2_0();
    210 ( 0.00%)              ctxt.adjust(ExpnId::root())
      .                   };
    518 ( 0.00%)          let module = match mark {
  1,130 ( 0.00%)              Some(def) => self.expn_def_scope(def),
      .                       None => {
      .                           debug!(
      .                               "resolve_crate_root({:?}): found no mark (ident.span = {:?})",
      .                               ident, ident.span
      .                           );
     66 ( 0.00%)                  return self.graph_root;
      .                       }
      .                   };
      .                   let module = self.expect_module(
      .                       module.opt_def_id().map_or(LOCAL_CRATE, |def_id| def_id.krate).as_def_id(),
      .                   );
      .                   debug!(
      .                       "resolve_crate_root({:?}): got module {:?} ({:?}) (ident.span = {:?})",
      .                       ident,
      .                       module,
      .                       module.kind.name(),
      .                       ident.span
      .                   );
      .                   module
  1,813 ( 0.00%)      }
      .           
    144 ( 0.00%)      fn resolve_self(&mut self, ctxt: &mut SyntaxContext, module: Module<'a>) -> Module<'a> {
     32 ( 0.00%)          let mut module = self.expect_module(module.nearest_parent_mod());
     64 ( 0.00%)          while module.span.ctxt().normalize_to_macros_2_0() != *ctxt {
      .                       let parent = module.parent.unwrap_or_else(|| self.expn_def_scope(ctxt.remove_mark()));
      .                       module = self.expect_module(parent.nearest_parent_mod());
      .                   }
      .                   module
    144 ( 0.00%)      }
      .           
      .               fn resolve_path(
      .                   &mut self,
      .                   path: &[Segment],
      .                   opt_ns: Option<Namespace>, // `None` indicates a module path in import
      .                   parent_scope: &ParentScope<'a>,
      .                   record_used: bool,
      .                   path_span: Span,
      .                   crate_lint: CrateLint,
      .               ) -> PathResult<'a> {
  1,071 ( 0.00%)          self.resolve_path_with_ribs(
      .                       path,
      .                       opt_ns,
      .                       parent_scope,
      .                       record_used,
      .                       path_span,
      .                       crate_lint,
      .                       None,
      .                   )
      .               }
      .           
 23,415 ( 0.00%)      fn resolve_path_with_ribs(
      .                   &mut self,
      .                   path: &[Segment],
      .                   opt_ns: Option<Namespace>, // `None` indicates a module path in import
      .                   parent_scope: &ParentScope<'a>,
      .                   record_used: bool,
      .                   path_span: Span,
      .                   crate_lint: CrateLint,
      .                   ribs: Option<&PerNS<Vec<Rib<'a>>>>,
      .               ) -> PathResult<'a> {
  1,561 ( 0.00%)          let mut module = None;
      .                   let mut allow_super = true;
      .                   let mut second_binding = None;
      .           
      .                   debug!(
      .                       "resolve_path(path={:?}, opt_ns={:?}, record_used={:?}, \
      .                        path_span={:?}, crate_lint={:?})",
      .                       path, opt_ns, record_used, path_span, crate_lint,
      .                   );
      .           
 11,976 ( 0.00%)          for (i, &Segment { ident, id, has_generic_args: _ }) in path.iter().enumerate() {
      .                       debug!("resolve_path ident {} {:?} {:?}", i, ident, id);
 13,490 ( 0.00%)              let record_segment_res = |this: &mut Self, res| {
  3,510 ( 0.00%)                  if record_used {
  5,275 ( 0.00%)                      if let Some(id) = id {
  2,110 ( 0.00%)                          if !this.partial_res_map.contains_key(&id) {
  1,942 ( 0.00%)                              assert!(id != ast::DUMMY_NODE_ID, "Trying to resolve dummy id");
  3,884 ( 0.00%)                              this.record_partial_res(id, PartialRes::new(res));
      .                                   }
      .                               }
      .                           }
  4,680 ( 0.00%)              };
      .           
  5,186 ( 0.00%)              let is_last = i == path.len() - 1;
  9,980 ( 0.00%)              let ns = if is_last { opt_ns.unwrap_or(TypeNS) } else { TypeNS };
  1,996 ( 0.00%)              let name = ident.name;
      .           
  3,168 ( 0.00%)              allow_super &= ns == TypeNS && (name == kw::SelfLower || name == kw::Super);
      .           
      .                       if ns == TypeNS {
  2,312 ( 0.00%)                  if allow_super && name == kw::Super {
      .                               let mut ctxt = ident.span.ctxt().normalize_to_macros_2_0();
      .                               let self_module = match i {
      .                                   0 => Some(self.resolve_self(&mut ctxt, parent_scope.module)),
      .                                   _ => match module {
      .                                       Some(ModuleOrUniformRoot::Module(module)) => Some(module),
      .                                       _ => None,
      .                                   },
      .                               };
-- line 2270 ----------------------------------------
-- line 2279 ----------------------------------------
      .                               let msg = "there are too many leading `super` keywords".to_string();
      .                               return PathResult::Failed {
      .                                   span: ident.span,
      .                                   label: msg,
      .                                   suggestion: None,
      .                                   is_error_from_last_segment: false,
      .                               };
      .                           }
  2,344 ( 0.00%)                  if i == 0 {
  2,415 ( 0.00%)                      if name == kw::SelfLower {
     80 ( 0.00%)                          let mut ctxt = ident.span.ctxt().normalize_to_macros_2_0();
      .                                   module = Some(ModuleOrUniformRoot::Module(
     80 ( 0.00%)                              self.resolve_self(&mut ctxt, parent_scope.module),
      .                                   ));
      .                                   continue;
      .                               }
      .                               if name == kw::PathRoot && ident.span.rust_2018() {
      .                                   module = Some(ModuleOrUniformRoot::ExternPrelude);
      .                                   continue;
      .                               }
      .                               if name == kw::PathRoot && ident.span.rust_2015() && self.session.rust_2018() {
      .                                   // `::a::b` from 2015 macro on 2018 global edition
      .                                   module = Some(ModuleOrUniformRoot::CrateRootAndExternPrelude);
      .                                   continue;
      .                               }
      .                               if name == kw::PathRoot || name == kw::Crate || name == kw::DollarCrate {
      .                                   // `::a::b`, `crate::a::b` or `$crate::a::b`
    608 ( 0.00%)                          module = Some(ModuleOrUniformRoot::Module(self.resolve_crate_root(ident)));
      .                                   continue;
      .                               }
      .                           }
      .                       }
      .           
      .                       // Report special messages for path segment keywords in wrong positions.
  9,274 ( 0.00%)              if ident.is_path_segment_keyword() && i != 0 {
      .                           let name_str = if name == kw::PathRoot {
      .                               "crate root".to_string()
      .                           } else {
      .                               format!("`{}`", name)
      .                           };
      .                           let label = if i == 1 && path[0].ident.name == kw::PathRoot {
      .                               format!("global paths cannot start with {}", name_str)
      .                           } else {
-- line 2321 ----------------------------------------
-- line 2328 ----------------------------------------
      .                               is_error_from_last_segment: false,
      .                           };
      .                       }
      .           
      .                       enum FindBindingResult<'a> {
      .                           Binding(Result<&'a NameBinding<'a>, Determinacy>),
      .                           PathResult(PathResult<'a>),
      .                       }
 58,596 ( 0.01%)              let find_binding_in_ns = |this: &mut Self, ns| {
  7,797 ( 0.00%)                  let binding = if let Some(module) = module {
      .                               this.resolve_ident_in_module(
      .                                   module,
  1,335 ( 0.00%)                          ident,
      .                                   ns,
      .                                   parent_scope,
    890 ( 0.00%)                          record_used,
    445 ( 0.00%)                          path_span,
      .                               )
  8,134 ( 0.00%)                  } else if ribs.is_none() || opt_ns.is_none() || opt_ns == Some(MacroNS) {
      .                               let scopes = ScopeSet::All(ns, opt_ns.is_none());
    952 ( 0.00%)                      this.early_resolve_ident_in_lexical_scope(
    168 ( 0.00%)                          ident,
      .                                   scopes,
     56 ( 0.00%)                          parent_scope,
    112 ( 0.00%)                          record_used,
      .                                   record_used,
     56 ( 0.00%)                          path_span,
      .                               )
      .                           } else {
  5,348 ( 0.00%)                      let record_used_id = if record_used {
  1,270 ( 0.00%)                          crate_lint.node_id().or(Some(CRATE_NODE_ID))
      .                               } else {
      .                                   None
      .                               };
 18,629 ( 0.00%)                      match this.resolve_ident_in_lexical_scope(
  4,011 ( 0.00%)                          ident,
      .                                   ns,
  1,337 ( 0.00%)                          parent_scope,
      .                                   record_used_id,
  2,674 ( 0.00%)                          path_span,
      .                                   &ribs.unwrap()[ns],
      .                               ) {
      .                                   // we found a locally-imported or available item/module
  1,704 ( 0.00%)                          Some(LexicalScopeBinding::Item(binding)) => Ok(binding),
      .                                   // we found a local variable or type param
      .                                   Some(LexicalScopeBinding::Res(res))
  1,426 ( 0.00%)                              if opt_ns == Some(TypeNS) || opt_ns == Some(ValueNS) =>
      .                                   {
  6,417 ( 0.00%)                              record_segment_res(this, res);
  5,704 ( 0.00%)                              return FindBindingResult::PathResult(PathResult::NonModule(
  4,991 ( 0.00%)                                  PartialRes::with_unresolved_segments(res, path.len() - 1),
      .                                       ));
      .                                   }
    168 ( 0.00%)                          _ => Err(Determinacy::determined(record_used)),
      .                               }
      .                           };
  7,875 ( 0.00%)                  FindBindingResult::Binding(binding)
 14,704 ( 0.00%)              };
 12,796 ( 0.00%)              let binding = match find_binding_in_ns(self, ns) {
  9,982 ( 0.00%)                  FindBindingResult::PathResult(x) => return x,
      .                           FindBindingResult::Binding(binding) => binding,
      .                       };
  2,428 ( 0.00%)              match binding {
      .                           Ok(binding) => {
  5,245 ( 0.00%)                      if i == 1 {
      .                                   second_binding = Some(binding);
      .                               }
      .                               let res = binding.res();
 10,490 ( 0.00%)                      let maybe_assoc = opt_ns != Some(MacroNS) && PathSource::Type.is_expected(res);
      .                               if let Some(next_module) = binding.module() {
    914 ( 0.00%)                          module = Some(ModuleOrUniformRoot::Module(next_module));
  4,113 ( 0.00%)                          record_segment_res(self, res);
  4,144 ( 0.00%)                      } else if res == Res::ToolMod && i + 1 != path.len() {
      .                                   if binding.is_import() {
      .                                       self.session
      .                                           .struct_span_err(
      .                                               ident.span,
      .                                               "cannot use a tool module through an import",
      .                                           )
      .                                           .span_note(binding.span, "the tool module imported here")
      .                                           .emit();
      .                                   }
      .                                   let res = Res::NonMacroAttr(NonMacroAttrKind::Tool);
      .                                   return PathResult::NonModule(PartialRes::new(res));
  2,960 ( 0.00%)                      } else if res == Res::Err {
      .                                   return PathResult::NonModule(PartialRes::new(Res::Err));
  1,776 ( 0.00%)                      } else if opt_ns.is_some() && (is_last || maybe_assoc) {
  4,144 ( 0.00%)                          self.lint_if_path_starts_with_module(
  1,184 ( 0.00%)                              crate_lint,
      .                                       path,
    592 ( 0.00%)                              path_span,
      .                                       second_binding,
      .                                   );
  1,776 ( 0.00%)                          return PathResult::NonModule(PartialRes::with_unresolved_segments(
  2,368 ( 0.00%)                              res,
  2,368 ( 0.00%)                              path.len() - i - 1,
      .                                   ));
      .                               } else {
      .                                   let label = format!(
      .                                       "`{}` is {} {}, not a module",
      .                                       ident,
      .                                       res.article(),
      .                                       res.descr(),
      .                                   );
-- line 2431 ----------------------------------------
-- line 2433 ----------------------------------------
      .                                   return PathResult::Failed {
      .                                       span: ident.span,
      .                                       label,
      .                                       suggestion: None,
      .                                       is_error_from_last_segment: is_last,
      .                                   };
      .                               }
      .                           }
    112 ( 0.00%)                  Err(Undetermined) => return PathResult::Indeterminate,
      .                           Err(Determined) => {
     40 ( 0.00%)                      if let Some(ModuleOrUniformRoot::Module(module)) = module {
     40 ( 0.00%)                          if opt_ns.is_some() && !module.is_normal() {
      .                                       return PathResult::NonModule(PartialRes::with_unresolved_segments(
      .                                           module.res().unwrap(),
      .                                           path.len() - i,
      .                                       ));
      .                                   }
      .                               }
      .                               let module_res = match module {
      .                                   Some(ModuleOrUniformRoot::Module(module)) => module.res(),
      .                                   _ => None,
      .                               };
    160 ( 0.00%)                      let (label, suggestion) = if module_res == self.graph_root.res() {
      .                                   let is_mod = |res| matches!(res, Res::Def(DefKind::Mod, _));
      .                                   // Don't look up import candidates if this is a speculative resolve
      .                                   let mut candidates = if record_used {
      .                                       self.lookup_import_candidates(ident, TypeNS, parent_scope, is_mod)
      .                                   } else {
      .                                       Vec::new()
      .                                   };
      .                                   candidates.sort_by_cached_key(|c| {
-- line 2463 ----------------------------------------
-- line 2472 ----------------------------------------
      .                                               Applicability::MaybeIncorrect,
      .                                           )),
      .                                       )
      .                                   } else if self.session.edition() == Edition::Edition2015 {
      .                                       (format!("maybe a missing crate `{}`?", ident), None)
      .                                   } else {
      .                                       (format!("could not find `{}` in the crate root", ident), None)
      .                                   }
     20 ( 0.00%)                      } else if i == 0 {
      .                                   if ident
      .                                       .name
      .                                       .as_str()
      .                                       .chars()
      .                                       .next()
      .                                       .map_or(false, |c| c.is_ascii_uppercase())
      .                                   {
      .                                       // Check whether the name refers to an item in the value namespace.
-- line 2488 ----------------------------------------
-- line 2562 ----------------------------------------
      .                                                       ),
      .                                                       Applicability::MaybeIncorrect,
      .                                                   )
      .                                               })
      .                                           },
      .                                       )
      .                                   }
      .                               } else {
     80 ( 0.00%)                          let parent = path[i - 1].ident.name;
     40 ( 0.00%)                          let parent = match parent {
      .                                       // ::foo is mounted at the crate root for 2015, and is the extern
      .                                       // prelude for 2018+
      .                                       kw::PathRoot if self.session.edition() > Edition::Edition2015 => {
      .                                           "the list of imported crates".to_owned()
      .                                       }
      .                                       kw::PathRoot | kw::Crate => "the crate root".to_owned(),
      .                                       _ => {
     90 ( 0.00%)                                  format!("`{}`", parent)
      .                                       }
      .                                   };
      .           
    130 ( 0.00%)                          let mut msg = format!("could not find `{}` in {}", ident, parent);
     20 ( 0.00%)                          if ns == TypeNS || ns == ValueNS {
      .                                       let ns_to_try = if ns == TypeNS { ValueNS } else { TypeNS };
     40 ( 0.00%)                              if let FindBindingResult::Binding(Ok(binding)) =
     60 ( 0.00%)                                  find_binding_in_ns(self, ns_to_try)
      .                                       {
      .                                           let mut found = |what| {
      .                                               msg = format!(
      .                                                   "expected {}, found {} `{}` in {}",
      .                                                   ns.descr(),
      .                                                   what,
      .                                                   ident,
      .                                                   parent
-- line 2595 ----------------------------------------
-- line 2598 ----------------------------------------
      .                                           if binding.module().is_some() {
      .                                               found("module")
      .                                           } else {
      .                                               match binding.res() {
      .                                                   def::Res::<NodeId>::Def(kind, id) => found(kind.descr(id)),
      .                                                   _ => found(ns_to_try.descr()),
      .                                               }
      .                                           }
     10 ( 0.00%)                              };
      .                                   }
     30 ( 0.00%)                          (msg, None)
      .                               };
     50 ( 0.00%)                      return PathResult::Failed {
     10 ( 0.00%)                          span: ident.span,
      .                                   label,
      .                                   suggestion,
      .                                   is_error_from_last_segment: is_last,
      .                               };
      .                           }
      .                       }
      .                   }
      .           
  2,090 ( 0.00%)          self.lint_if_path_starts_with_module(crate_lint, path, path_span, second_binding);
      .           
  1,140 ( 0.00%)          PathResult::Module(match module {
    380 ( 0.00%)              Some(module) => module,
      .                       None if path.is_empty() => ModuleOrUniformRoot::CurrentScope,
      .                       _ => span_bug!(path_span, "resolve_path: non-empty path `{:?}` has no module", path),
      .                   })
 14,049 ( 0.00%)      }
      .           
  9,528 ( 0.00%)      fn lint_if_path_starts_with_module(
      .                   &mut self,
      .                   crate_lint: CrateLint,
      .                   path: &[Segment],
      .                   path_span: Span,
      .                   second_binding: Option<&NameBinding<'_>>,
      .               ) {
  3,970 ( 0.00%)          let (diag_id, diag_span) = match crate_lint {
      .                       CrateLint::No => return,
      .                       CrateLint::SimplePath(id) => (id, path_span),
      .                       CrateLint::UsePath { root_id, root_span } => (root_id, root_span),
      .                       CrateLint::QPathTrait { qpath_id, qpath_span } => (qpath_id, qpath_span),
      .                   };
      .           
    794 ( 0.00%)          let first_name = match path.get(0) {
      .                       // In the 2018 edition this lint is a hard error, so nothing to do
  1,588 ( 0.00%)              Some(seg) if seg.ident.span.rust_2015() && self.session.rust_2015() => seg.ident.name,
      .                       _ => return,
      .                   };
      .           
      .                   // We're only interested in `use` paths which should start with
      .                   // `{{root}}` currently.
      .                   if first_name != kw::PathRoot {
      .                       return;
      .                   }
-- line 2653 ----------------------------------------
-- line 2679 ----------------------------------------
      .                   self.lint_buffer.buffer_lint_with_diagnostic(
      .                       lint::builtin::ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,
      .                       diag_id,
      .                       diag_span,
      .                       "absolute paths must start with `self`, `super`, \
      .                        `crate`, or an external crate name in the 2018 edition",
      .                       diag,
      .                   );
  6,352 ( 0.00%)      }
      .           
      .               // Validate a local resolution (from ribs).
      .               fn validate_res_from_ribs(
      .                   &mut self,
      .                   rib_index: usize,
      .                   rib_ident: Ident,
      .                   mut res: Res,
      .                   record_used: bool,
      .                   span: Span,
      .                   original_rib_ident_def: Ident,
      .                   all_ribs: &[Rib<'a>],
      .               ) -> Res {
      .                   const CG_BUG_STR: &str = "min_const_generics resolve check didn't stop compilation";
      .                   debug!("validate_res_from_ribs({:?})", res);
  1,730 ( 0.00%)          let ribs = &all_ribs[rib_index + 1..];
      .           
      .                   // An invalid forward use of a generic parameter from a previous default.
  3,460 ( 0.00%)          if let ForwardGenericParamBanRibKind = all_ribs[rib_index].kind {
      .                       if record_used {
      .                           let res_error = if rib_ident.name == kw::SelfUpper {
      .                               ResolutionError::SelfInGenericParamDefault
      .                           } else {
      .                               ResolutionError::ForwardDeclaredGenericParam
      .                           };
      .                           self.report_error(span, res_error);
      .                       }
      .                       assert_eq!(res, Res::Err);
      .                       return Res::Err;
      .                   }
      .           
  6,119 ( 0.00%)          match res {
      .                       Res::Local(_) => {
      .                           use ResolutionError::*;
    672 ( 0.00%)                  let mut res_err = None;
      .           
      .                           for rib in ribs {
  5,141 ( 0.00%)                      match rib.kind {
      .                                   NormalRibKind
      .                                   | ClosureOrAsyncRibKind
      .                                   | ModuleRibKind(..)
      .                                   | MacroDefinition(..)
      .                                   | ForwardGenericParamBanRibKind => {
      .                                       // Nothing to do. Continue.
      .                                   }
      .                                   ItemRibKind(_) | FnItemRibKind | AssocItemRibKind => {
      .                                       // This was an attempt to access an upvar inside a
      .                                       // named function item. This is not allowed, so we
      .                                       // report an error.
    498 ( 0.00%)                              if record_used {
      .                                           // We don't immediately trigger a resolve error, because
      .                                           // we want certain other resolution errors (namely those
      .                                           // emitted for `ConstantItemRibKind` below) to take
      .                                           // precedence.
      .                                           res_err = Some(CannotCaptureDynamicEnvironmentInFnItem);
      .                                       }
      .                                   }
      .                                   ConstantItemRibKind(_, item) => {
-- line 2744 ----------------------------------------
-- line 2773 ----------------------------------------
      .                                   ConstParamTyRibKind => {
      .                                       if record_used {
      .                                           self.report_error(span, ParamInTyOfConstParam(rib_ident.name));
      .                                       }
      .                                       return Res::Err;
      .                                   }
      .                               }
      .                           }
    842 ( 0.00%)                  if let Some(res_err) = res_err {
      .                               self.report_error(span, res_err);
      .                               return Res::Err;
      .                           }
      .                       }
      .                       Res::Def(DefKind::TyParam, _) | Res::SelfTy(..) => {
      .                           for rib in ribs {
  1,371 ( 0.00%)                      let has_generic_params: HasGenericParams = match rib.kind {
      .                                   NormalRibKind
      .                                   | ClosureOrAsyncRibKind
      .                                   | AssocItemRibKind
      .                                   | ModuleRibKind(..)
      .                                   | MacroDefinition(..)
      .                                   | ForwardGenericParamBanRibKind => {
      .                                       // Nothing to do. Continue.
      .                                       continue;
-- line 2796 ----------------------------------------
-- line 2799 ----------------------------------------
      .                                   ConstantItemRibKind(trivial, _) => {
      .                                       let features = self.session.features_untracked();
      .                                       // HACK(min_const_generics): We currently only allow `N` or `{ N }`.
      .                                       if !(trivial || features.generic_const_exprs) {
      .                                           // HACK(min_const_generics): If we encounter `Self` in an anonymous constant
      .                                           // we can't easily tell if it's generic at this stage, so we instead remember
      .                                           // this and then enforce the self type to be concrete later on.
      .                                           if let Res::SelfTy(trait_def, Some((impl_def, _))) = res {
    133 ( 0.00%)                                      res = Res::SelfTy(trait_def, Some((impl_def, true)));
      .                                           } else {
      .                                               if record_used {
      .                                                   self.report_error(
      .                                                       span,
      .                                                       ResolutionError::ParamInNonTrivialAnonConst {
      .                                                           name: rib_ident.name,
      .                                                           is_type: true,
      .                                                       },
-- line 2815 ----------------------------------------
-- line 2912 ----------------------------------------
      .                                       ),
      .                                   );
      .                               }
      .                               return Res::Err;
      .                           }
      .                       }
      .                       _ => {}
      .                   }
  3,460 ( 0.00%)          res
      .               }
      .           
      .               fn record_partial_res(&mut self, node_id: NodeId, resolution: PartialRes) {
      .                   debug!("(recording res) recording {:?} for {}", resolution, node_id);
  6,152 ( 0.00%)          if let Some(prev_res) = self.partial_res_map.insert(node_id, resolution) {
      .                       panic!("path resolved multiple times ({:?} before, {:?} now)", prev_res, resolution);
      .                   }
      .               }
      .           
      .               fn record_pat_span(&mut self, node: NodeId, span: Span) {
      .                   debug!("(recording pat) recording {:?} for {:?}", node, span);
      .                   self.pat_span_map.insert(node, span);
      .               }
      .           
398,240 ( 0.07%)      fn is_accessible_from(&self, vis: ty::Visibility, module: Module<'a>) -> bool {
136,089 ( 0.02%)          vis.is_accessible_from(module.nearest_parent_mod(), self)
358,416 ( 0.06%)      }
      .           
      .               fn set_binding_parent_module(&mut self, binding: &'a NameBinding<'a>, module: Module<'a>) {
216,448 ( 0.04%)          if let Some(old_module) = self.binding_parent_modules.insert(PtrKey(binding), module) {
      .                       if !ptr::eq(module, old_module) {
      .                           span_bug!(binding.span, "parent module is reset for binding");
      .                       }
      .                   }
      .               }
      .           
      .               fn disambiguate_macro_rules_vs_modularized(
      .                   &self,
-- line 2948 ----------------------------------------
-- line 2959 ----------------------------------------
      .                       (Some(macro_rules), Some(modularized)) => {
      .                           macro_rules.nearest_parent_mod() == modularized.nearest_parent_mod()
      .                               && modularized.is_ancestor_of(macro_rules)
      .                       }
      .                       _ => false,
      .                   }
      .               }
      .           
      7 ( 0.00%)      fn report_errors(&mut self, krate: &Crate) {
      .                   self.report_with_use_injections(krate);
      .           
      6 ( 0.00%)          for &(span_use, span_def) in &self.macro_expanded_macro_export_errors {
      .                       let msg = "macro-expanded `macro_export` macros from the current crate \
      .                                  cannot be referred to by absolute paths";
      .                       self.lint_buffer.buffer_lint_with_diagnostic(
      .                           lint::builtin::MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS,
      .                           CRATE_NODE_ID,
      .                           span_use,
      .                           msg,
      .                           BuiltinLintDiagnostics::MacroExpandedMacroExportsAccessedByAbsolutePaths(span_def),
-- line 2978 ----------------------------------------
-- line 2984 ----------------------------------------
      .                   }
      .           
      .                   let mut reported_spans = FxHashSet::default();
      .                   for error in &self.privacy_errors {
      .                       if reported_spans.insert(error.dedup_span) {
      .                           self.report_privacy_error(error);
      .                       }
      .                   }
      8 ( 0.00%)      }
      .           
      .               fn report_with_use_injections(&mut self, krate: &Crate) {
      .                   for UseError { mut err, candidates, def_id, instead, suggestion } in
     10 ( 0.00%)              self.use_injections.drain(..)
      .                   {
      .                       let (span, found_use) = if let Some(def_id) = def_id.as_local() {
      .                           UsePlacementFinder::check(krate, self.def_id_to_node_id[def_id])
      .                       } else {
      .                           (None, false)
      .                       };
      .                       if !candidates.is_empty() {
      .                           diagnostics::show_candidates(
-- line 3004 ----------------------------------------
-- line 3284 ----------------------------------------
      .                       }
      .           
      .                       return;
      .                   }
      .           
      .                   err.span_suggestion(span, message, String::new(), Applicability::MachineApplicable);
      .               }
      .           
  3,180 ( 0.00%)      fn extern_prelude_get(
      .                   &mut self,
      .                   ident: Ident,
      .                   speculative: bool,
      .               ) -> Option<&'a NameBinding<'a>> {
  1,590 ( 0.00%)          if ident.is_path_segment_keyword() {
      .                       // Make sure `self`, `super` etc produce an error when passed to here.
      .                       return None;
      .                   }
  2,862 ( 0.00%)          self.extern_prelude.get(&ident.normalize_to_macros_2_0()).cloned().and_then(|entry| {
    188 ( 0.00%)              if let Some(binding) = entry.extern_crate_item {
     62 ( 0.00%)                  if !speculative && entry.introduced_by_item {
      .                               self.record_use(ident, binding, false);
      .                           }
      .                           Some(binding)
      .                       } else {
    144 ( 0.00%)                  let crate_id = if !speculative {
     36 ( 0.00%)                      let Some(crate_id) =
     54 ( 0.00%)                          self.crate_loader.process_path_extern(ident.name, ident.span) else { return Some(self.dummy_binding); };
      .                               crate_id
      .                           } else {
    216 ( 0.00%)                      self.crate_loader.maybe_process_path_extern(ident.name)?
      .                           };
      .                           let crate_root = self.expect_module(crate_id.as_def_id());
      .                           Some(
      .                               (crate_root, ty::Visibility::Public, DUMMY_SP, LocalExpnId::ROOT)
     72 ( 0.00%)                          .to_name_binding(self.arenas),
      .                           )
      .                       }
      .                   })
  2,544 ( 0.00%)      }
      .           
      .               /// Rustdoc uses this to resolve things in a recoverable way. `ResolutionError<'a>`
      .               /// isn't something that can be returned because it can't be made to live that long,
      .               /// and also it's a private type. Fortunately rustdoc doesn't need to know the error,
      .               /// just that an error occurred.
      .               // FIXME(Manishearth): intra-doc links won't get warned of epoch changes.
      .               pub fn resolve_str_path_error(
      .                   &mut self,
-- line 3330 ----------------------------------------
-- line 3422 ----------------------------------------
      .               #[inline]
      .               pub fn opt_span(&self, def_id: DefId) -> Option<Span> {
      .                   def_id.as_local().map(|def_id| self.definitions.def_span(def_id))
      .               }
      .           
      .               /// Checks if an expression refers to a function marked with
      .               /// `#[rustc_legacy_const_generics]` and returns the argument index list
      .               /// from the attribute.
  2,960 ( 0.00%)      pub fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>> {
  1,480 ( 0.00%)          if let ExprKind::Path(None, path) = &expr.kind {
      .                       // Don't perform legacy const generics rewriting if the path already
      .                       // has generic arguments.
    370 ( 0.00%)              if path.segments.last().unwrap().args.is_some() {
      .                           return None;
      .                       }
      .           
      .                       let partial_res = self.partial_res_map.get(&expr.id)?;
    740 ( 0.00%)              if partial_res.unresolved_segments() != 0 {
      .                           return None;
      .                       }
      .           
  1,120 ( 0.00%)              if let Res::Def(def::DefKind::Fn, def_id) = partial_res.base_res() {
      .                           // We only support cross-crate argument rewriting. Uses
      .                           // within the same crate should be updated to use the new
      .                           // const generics style.
    232 ( 0.00%)                  if def_id.is_local() {
      .                               return None;
      .                           }
      .           
      .                           if let Some(v) = self.legacy_const_generic_args.get(&def_id) {
      .                               return v.clone();
      .                           }
      .           
    456 ( 0.00%)                  let attr = self
      .                               .cstore()
    152 ( 0.00%)                      .item_attrs_untracked(def_id, self.session)
      .                               .find(|a| a.has_name(sym::rustc_legacy_const_generics))?;
      .                           let mut ret = Vec::new();
      .                           for meta in attr.meta_item_list()? {
      .                               match meta.literal()?.kind {
      .                                   LitKind::Int(a, _) => ret.push(a as usize),
      .                                   _ => panic!("invalid arg index"),
      .                               }
      .                           }
      .                           // Cache the lookup to avoid parsing attributes for an iterm multiple times.
      .                           self.legacy_const_generic_args.insert(def_id, Some(ret.clone()));
      .                           return Some(ret);
      .                       }
      .                   }
      .                   None
  3,330 ( 0.00%)      }
      .           
      7 ( 0.00%)      fn resolve_main(&mut self) {
      2 ( 0.00%)          let module = self.graph_root;
      .                   let ident = Ident::with_dummy_span(sym::main);
      .                   let parent_scope = &ParentScope::module(module, self);
      .           
      .                   let name_binding = match self.resolve_ident_in_module(
      .                       ModuleOrUniformRoot::Module(module),
      .                       ident,
      .                       ValueNS,
      .                       parent_scope,
-- line 3483 ----------------------------------------
-- line 3490 ----------------------------------------
      .           
      .                   let res = name_binding.res();
      .                   let is_import = name_binding.is_import();
      .                   let span = name_binding.span;
      .                   if let Res::Def(DefKind::Fn, _) = res {
      .                       self.record_use(ident, name_binding, false);
      .                   }
      .                   self.main_def = Some(MainDefinition { res, is_import, span });
      8 ( 0.00%)      }
      .           }
      .           
     48 ( 0.00%)  fn names_to_string(names: &[Symbol]) -> String {
      .               let mut result = String::new();
      .               for (i, name) in names.iter().filter(|name| **name != kw::PathRoot).enumerate() {
     12 ( 0.00%)          if i > 0 {
      .                       result.push_str("::");
      .                   }
     30 ( 0.00%)          if Ident::with_dummy_span(*name).is_raw_guess() {
      .                       result.push_str("r#");
      .                   }
     12 ( 0.00%)          result.push_str(name.as_str());
      .               }
      .               result
     48 ( 0.00%)  }
      .           
      .           fn path_names_to_string(path: &Path) -> String {
      .               names_to_string(&path.segments.iter().map(|seg| seg.ident.name).collect::<Vec<_>>())
      .           }
      .           
      .           /// A somewhat inefficient routine to obtain the name of a module.
     54 ( 0.00%)  fn module_to_string(module: Module<'_>) -> Option<String> {
      .               let mut names = Vec::new();
      .           
      .               fn collect_mod(names: &mut Vec<Symbol>, module: Module<'_>) {
     30 ( 0.00%)          if let ModuleKind::Def(.., name) = module.kind {
     36 ( 0.00%)              if let Some(parent) = module.parent {
      .                           names.push(name);
      .                           collect_mod(names, parent);
      .                       }
      .                   } else {
      .                       names.push(Symbol::intern("<opaque>"));
      .                       collect_mod(names, module.parent.unwrap());
      .                   }
      .               }
      .               collect_mod(&mut names, module);
      .           
      6 ( 0.00%)      if names.is_empty() {
      .                   return None;
      .               }
      .               names.reverse();
     36 ( 0.00%)      Some(names_to_string(&names))
     54 ( 0.00%)  }
      .           
      .           #[derive(Copy, Clone, Debug)]
      .           enum CrateLint {
      .               /// Do not issue the lint.
      .               No,
      .           
      .               /// This lint applies to some arbitrary path; e.g., `impl ::foo::Bar`.
      .               /// In this case, we can take the span of that path.
-- line 3549 ----------------------------------------
-- line 3558 ----------------------------------------
      .               /// This is the "trait item" from a fully qualified path. For example,
      .               /// we might be resolving  `X::Y::Z` from a path like `<T as X::Y>::Z`.
      .               /// The `path_span` is the span of the to the trait itself (`X::Y`).
      .               QPathTrait { qpath_id: NodeId, qpath_span: Span },
      .           }
      .           
      .           impl CrateLint {
      .               fn node_id(&self) -> Option<NodeId> {
  3,810 ( 0.00%)          match *self {
      .                       CrateLint::No => None,
      .                       CrateLint::SimplePath(id)
      .                       | CrateLint::UsePath { root_id: id, .. }
      .                       | CrateLint::QPathTrait { qpath_id: id, .. } => Some(id),
      .                   }
      .               }
      .           }
      .           
      .           pub fn provide(providers: &mut Providers) {
      .               late::lifetimes::provide(providers);
      1 ( 0.00%)  }

415,791 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                 

-- line 186 ----------------------------------------
        .           /// // use the values stored in map
        .           /// ```
        .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
        .               pub(crate) hash_builder: S,
        .               pub(crate) table: RawTable<(K, V), A>,
        .           }
        .           
        .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
      184 ( 0.00%)      fn clone(&self) -> Self {
      799 ( 0.00%)          HashMap {
        .                       hash_builder: self.hash_builder.clone(),
      155 ( 0.00%)              table: self.table.clone(),
        .                   }
      207 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   self.table.clone_from(&source.table);
        .           
        .                   // Update hash_builder only if we successfully cloned all elements.
        .                   self.hash_builder.clone_from(&source.hash_builder);
        .               }
        .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash,
        .               S: BuildHasher,
        .           {
  134,441 ( 0.02%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
   90,319 ( 0.02%)      move |x| k.eq(x.0.borrow())
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
   59,139 ( 0.01%)      move |x| k.eq(x.borrow())
        .           }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
        .               use core::hash::Hasher;
        .               let mut state = hash_builder.build_hasher();
        .               val.hash(&mut state);
        .               state.finish()
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           #[cfg_attr(feature = "inline-more", inline)]
        4 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
        .               S: BuildHasher,
        .           {
        .               hash_builder.hash_one(val)
        8 ( 0.00%)  }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
        .           where
        .               K: Hash,
        .               S: BuildHasher,
        .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               ///
        .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub const fn with_hasher(hash_builder: S) -> Self {
   51,772 ( 0.01%)          Self {
        .                       hash_builder,
        .                       table: RawTable::new(),
        .                   }
        .               }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys.
        .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
        .               /// use hashbrown::hash_map::DefaultHashBuilder;
        .               ///
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
       67 ( 0.00%)          Self {
        .                       hash_builder,
        .                       table: RawTable::new_in(alloc),
        .                   }
        .               }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys. It will be allocated with the given allocator.
        .               ///
-- line 453 ----------------------------------------
-- line 663 ----------------------------------------
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert_eq!(a.len(), 0);
        .               /// a.insert(1, "a");
        .               /// assert_eq!(a.len(), 1);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn len(&self) -> usize {
    4,173 ( 0.00%)          self.table.len()
        .               }
        .           
        .               /// Returns `true` if the map contains no elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert!(a.is_empty());
        .               /// a.insert(1, "a");
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn is_empty(&self) -> bool {
   69,919 ( 0.01%)          self.len() == 0
        .               }
        .           
        .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
        .               /// allocated memory for reuse.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// a.insert(1, "a");
        .               /// a.clear();
        .               /// assert!(a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        6 ( 0.00%)      pub fn clear(&mut self) {
        .                   self.table.clear();
        6 ( 0.00%)      }
        .           
        .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
        .               /// The map cannot be used after calling this.
        .               /// The iterator element type is `K`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
        .               /// }
        .               ///
        .               /// assert_eq!(letters[&'s'], 2);
        .               /// assert_eq!(letters[&'t'], 3);
        .               /// assert_eq!(letters[&'u'], 1);
        .               /// assert_eq!(letters.get(&'y'), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
       92 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
        .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
       20 ( 0.00%)              Entry::Occupied(OccupiedEntry {
        .                           hash,
        .                           key: Some(key),
        .                           elem,
        .                           table: self,
        .                       })
        .                   } else {
       95 ( 0.00%)              Entry::Vacant(VacantEntry {
        .                           hash,
        .                           key,
        .                           table: self,
        .                       })
        .                   }
      115 ( 0.00%)      }
        .           
        .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
        .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  155,925 ( 0.03%)          match self.get_inner(k) {
        .                       Some(&(_, ref v)) => Some(v),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
  223,338 ( 0.04%)          if self.table.is_empty() {
        .                       None
        .                   } else {
        2 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
        .                       self.table.get(hash, equivalent_key(k))
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.contains_key(&1), true);
        .               /// assert_eq!(map.contains_key(&2), false);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
   84,619 ( 0.02%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   self.get_inner(k).is_some()
  105,200 ( 0.02%)      }
        .           
        .               /// Returns a mutable reference to the value corresponding to the key.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
        .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// if let Some(x) = map.get_mut(&1) {
        .               ///     *x = "b";
        .               /// }
        .               /// assert_eq!(map[&1], "b");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      111 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      333 ( 0.00%)          match self.get_inner_mut(k) {
        .                       Some(&mut (_, ref mut v)) => Some(v),
        .                       None => None,
        .                   }
      222 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
      111 ( 0.00%)          if self.table.is_empty() {
        .                       None
        .                   } else {
        .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
        .                       self.table.get_mut(hash, equivalent_key(k))
        .                   }
        .               }
        .           
        .               /// Attempts to get mutable references to `N` values in the map at once.
-- line 1219 ----------------------------------------
-- line 1495 ----------------------------------------
        .               /// assert_eq!(map.insert(37, "a"), None);
        .               /// assert_eq!(map.is_empty(), false);
        .               ///
        .               /// map.insert(37, "b");
        .               /// assert_eq!(map.insert(37, "c"), Some("b"));
        .               /// assert_eq!(map[&37], "c");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
1,266,470 ( 0.23%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
      114 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
       20 ( 0.00%)              Some(mem::replace(item, v))
        .                   } else {
  762,109 ( 0.14%)              self.table
  482,189 ( 0.09%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
   46,031 ( 0.01%)              None
        .                   }
1,085,365 ( 0.19%)      }
        .           
        .               /// Insert a key-value pair into the map without checking
        .               /// if the key already exists in the map.
        .               ///
        .               /// Returns a reference to the key and value just inserted.
        .               ///
        .               /// This operation is safe if a key does not exist in the map.
        .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.remove(&1), Some("a"));
        .               /// assert_eq!(map.remove(&1), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
   16,429 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  233,753 ( 0.04%)          match self.remove_entry(k) {
    6,092 ( 0.00%)              Some((_, v)) => Some(v),
   12,448 ( 0.00%)              None => None,
        .                   }
   36,959 ( 0.01%)      }
        .           
        .               /// Removes a key from the map, returning the stored key and value if the
        .               /// key was previously in the map.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
   68,292 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
        .               }
        .           }
        .           
        .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
        .               /// Creates a raw entry builder for the HashMap.
        .               ///
        .               /// Raw entries provide the lowest level of control for searching and
        .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
        .               /// Creates a `RawEntryMut` from the given key and its hash.
        .               #[inline]
        .               #[allow(clippy::wrong_self_convention)]
        .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
  479,898 ( 0.09%)          self.from_hash(hash, equivalent(k))
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
        .               /// Creates a `RawEntryMut` from the given hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
1,168,296 ( 0.21%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
        .                   self.search(hash, is_match)
1,286,866 ( 0.23%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
  139,110 ( 0.02%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
  715,902 ( 0.13%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
        .                           elem,
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
  100,767 ( 0.02%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
        .                   self.from_key_hashed_nocheck(hash, k)
        .               }
        .           
        .               /// Access an entry by a key and its hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
  293,476 ( 0.05%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
  349,663 ( 0.06%)          self.from_hash(hash, equivalent(k))
  520,297 ( 0.09%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
        .               where
        .                   F: FnMut(&K) -> bool,
        .               {
  473,754 ( 0.08%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
        .                       Some(&(ref key, ref value)) => Some((key, value)),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Access an entry by hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
        .               /// and returns a mutable reference to it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::shadow_unrelated)]
        .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
        .               where
        .                   K: Hash,
        .                   S: BuildHasher,
        .               {
  165,796 ( 0.03%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
        .                       hash,
        .                       (key, value),
        .                       make_hasher::<K, _, V, S>(self.hash_builder),
        .                   );
        .                   (k, v)
        .               }
        .           
        .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
        .               /// map.insert("a", 1);
        .               /// map.insert("b", 2);
        .               /// map.insert("c", 3);
        .               ///
        .               /// // Not possible with .iter()
        .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      312 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
    8,367 ( 0.00%)          IntoIter {
    4,984 ( 0.00%)              inner: self.table.into_iter(),
        .                   }
      936 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
        .               type Item = (&'a K, &'a V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
   29,860 ( 0.01%)          match self.inner.next() {
        .                       Some(x) => unsafe {
        .                           let r = x.as_ref();
      185 ( 0.00%)                  Some((&r.0, &r.1))
        .                       },
        .                       None => None,
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
-- line 3006 ----------------------------------------
-- line 3051 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
        .               type Item = (K, V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(K, V)> {
      290 ( 0.00%)          self.inner.next()
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
        .                   f.debug_list().entries(self.iter()).finish()
        .               }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
        .               type Item = &'a K;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
       32 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match self.inner.next() {
        .                       Some((k, _)) => Some(k),
        .                       None => None,
        .                   }
       64 ( 0.00%)      }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 4557 ----------------------------------------
        .           /// keys with new values returned from the iterator.
        .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
        .           where
        .               K: Eq + Hash,
        .               S: BuildHasher,
        .               A: Allocator + Clone,
        .           {
        .               #[cfg_attr(feature = "inline-more", inline)]
    8,774 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
        .                   // Keys may be already present or show multiple times in the iterator.
        .                   // Reserve the entire hint lower bound if the map is empty.
        .                   // Otherwise reserve half the hint (rounded up), so the map
        .                   // will only resize twice in the worst case.
    7,123 ( 0.00%)          let iter = iter.into_iter();
    4,718 ( 0.00%)          let reserve = if self.is_empty() {
        .                       iter.size_hint().0
        .                   } else {
      463 ( 0.00%)              (iter.size_hint().0 + 1) / 2
        .                   };
        .                   self.reserve(reserve);
        .                   iter.for_each(move |(k, v)| {
   38,690 ( 0.01%)              self.insert(k, v);
        .                   });
    5,926 ( 0.00%)      }
        .           
        .               #[inline]
        .               #[cfg(feature = "nightly")]
        .               fn extend_one(&mut self, (k, v): (K, V)) {
        .                   self.insert(k, v);
        .               }
        .           
        .               #[inline]
-- line 4588 ----------------------------------------

  515,440 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs
--------------------------------------------------------------------------------
Ir               

-- line 36 ----------------------------------------
      .               fn with_cause<F, R>(&mut self, _cause: Cause, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R,
      .               {
      .                   f(self)
      .               }
      .           
      .               /// Generic relation routine suitable for most anything.
 48,194 ( 0.01%)      fn relate<T: Relate<'tcx>>(&mut self, a: T, b: T) -> RelateResult<'tcx, T> {
 97,305 ( 0.02%)          Relate::relate(self, a, b)
 39,525 ( 0.01%)      }
      .           
      .               /// Relate the two substitutions for the given item. The default
      .               /// is to look up the variance for the item and proceed
      .               /// accordingly.
  2,130 ( 0.00%)      fn relate_item_substs(
      .                   &mut self,
      .                   item_def_id: DefId,
      .                   a_subst: SubstsRef<'tcx>,
      .                   b_subst: SubstsRef<'tcx>,
      .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
      .                   debug!(
      .                       "relate_item_substs(item_def_id={:?}, a_subst={:?}, b_subst={:?})",
      .                       item_def_id, a_subst, b_subst
      .                   );
      .           
      .                   let tcx = self.tcx();
      .                   let opt_variances = tcx.variances_of(item_def_id);
    852 ( 0.00%)          relate_substs(self, Some((item_def_id, opt_variances)), a_subst, b_subst)
  1,917 ( 0.00%)      }
      .           
      .               /// Switch variance for the purpose of relating `a` and `b`.
      .               fn relate_with_variance<T: Relate<'tcx>>(
      .                   &mut self,
      .                   variance: ty::Variance,
      .                   info: ty::VarianceDiagInfo<'tcx>,
      .                   a: T,
      .                   b: T,
-- line 73 ----------------------------------------
-- line 108 ----------------------------------------
      .                   a: Self,
      .                   b: Self,
      .               ) -> RelateResult<'tcx, Self>;
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // Relate impls
      .           
 15,652 ( 0.00%)  pub fn relate_type_and_mut<'tcx, R: TypeRelation<'tcx>>(
      .               relation: &mut R,
      .               a: ty::TypeAndMut<'tcx>,
      .               b: ty::TypeAndMut<'tcx>,
      .               base_ty: Ty<'tcx>,
      .           ) -> RelateResult<'tcx, ty::TypeAndMut<'tcx>> {
      .               debug!("{}.mts({:?}, {:?})", relation.tag(), a, b);
  2,655 ( 0.00%)      if a.mutbl != b.mutbl {
     64 ( 0.00%)          Err(TypeError::Mutability)
      .               } else {
      .                   let mutbl = a.mutbl;
      .                   let (variance, info) = match mutbl {
      .                       ast::Mutability::Not => (ty::Covariant, ty::VarianceDiagInfo::None),
      .                       ast::Mutability::Mut => {
      .                           (ty::Invariant, ty::VarianceDiagInfo::Invariant { ty: base_ty, param_index: 0 })
      .                       }
      .                   };
    899 ( 0.00%)          let ty = relation.relate_with_variance(variance, info, a.ty, b.ty)?;
  6,570 ( 0.00%)          Ok(ty::TypeAndMut { ty, mutbl })
      .               }
 15,681 ( 0.00%)  }
      .           
      .           pub fn relate_substs<'tcx, R: TypeRelation<'tcx>>(
      .               relation: &mut R,
      .               variances: Option<(DefId, &[ty::Variance])>,
      .               a_subst: SubstsRef<'tcx>,
      .               b_subst: SubstsRef<'tcx>,
      .           ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
 46,451 ( 0.01%)      let tcx = relation.tcx();
 14,267 ( 0.00%)      let mut cached_ty = None;
      .           
      .               let params = iter::zip(a_subst, b_subst).enumerate().map(|(i, (a, b))| {
 98,320 ( 0.02%)          let (variance, variance_info) = match variances {
  1,880 ( 0.00%)              Some((ty_def_id, variances)) => {
  2,820 ( 0.00%)                  let variance = variances[i];
    940 ( 0.00%)                  let variance_info = if variance == ty::Invariant {
      .                               let ty =
    337 ( 0.00%)                          cached_ty.get_or_insert_with(|| tcx.type_of(ty_def_id).subst(tcx, a_subst));
      .                               ty::VarianceDiagInfo::Invariant { ty, param_index: i.try_into().unwrap() }
      .                           } else {
      .                               ty::VarianceDiagInfo::default()
      .                           };
      .                           (variance, variance_info)
      .                       }
      .                       None => (ty::Invariant, ty::VarianceDiagInfo::default()),
      .                   };
 19,746 ( 0.00%)          relation.relate_with_variance(variance, variance_info, a, b)
      .               });
      .           
      .               tcx.mk_substs(params)
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {
    234 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: ty::FnSig<'tcx>,
      .                   b: ty::FnSig<'tcx>,
      .               ) -> RelateResult<'tcx, ty::FnSig<'tcx>> {
      .                   let tcx = relation.tcx();
      .           
    108 ( 0.00%)          if a.c_variadic != b.c_variadic {
      .                       return Err(TypeError::VariadicMismatch(expected_found(
      .                           relation,
      .                           a.c_variadic,
      .                           b.c_variadic,
      .                       )));
      .                   }
    102 ( 0.00%)          let unsafety = relation.relate(a.unsafety, b.unsafety)?;
      .                   let abi = relation.relate(a.abi, b.abi)?;
      .           
    147 ( 0.00%)          if a.inputs().len() != b.inputs().len() {
      .                       return Err(TypeError::ArgCount);
      .                   }
      .           
    162 ( 0.00%)          let inputs_and_output = iter::zip(a.inputs(), b.inputs())
     72 ( 0.00%)              .map(|(&a, &b)| ((a, b), false))
    144 ( 0.00%)              .chain(iter::once(((a.output(), b.output()), true)))
     28 ( 0.00%)              .map(|((a, b), is_output)| {
     28 ( 0.00%)                  if is_output {
      .                               relation.relate(a, b)
      .                           } else {
      .                               relation.relate_with_variance(
      .                                   ty::Contravariant,
      .                                   ty::VarianceDiagInfo::default(),
      .                                   a,
      .                                   b,
      .                               )
      .                           }
      .                       })
      .                       .enumerate()
    104 ( 0.00%)              .map(|(i, r)| match r {
      .                           Err(TypeError::Sorts(exp_found) | TypeError::ArgumentSorts(exp_found, _)) => {
      .                               Err(TypeError::ArgumentSorts(exp_found, i))
      .                           }
      .                           Err(TypeError::Mutability | TypeError::ArgumentMutability(_)) => {
      .                               Err(TypeError::ArgumentMutability(i))
      .                           }
    172 ( 0.00%)                  r => r,
      .                       });
    141 ( 0.00%)          Ok(ty::FnSig {
      .                       inputs_and_output: tcx.mk_type_list(inputs_and_output)?,
     18 ( 0.00%)              c_variadic: a.c_variadic,
      .                       unsafety,
      .                       abi,
      .                   })
    162 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for ty::BoundConstness {
      .               fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: ty::BoundConstness,
      .                   b: ty::BoundConstness,
      .               ) -> RelateResult<'tcx, ty::BoundConstness> {
-- line 229 ----------------------------------------
-- line 236 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for ast::Unsafety {
      .               fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: ast::Unsafety,
      .                   b: ast::Unsafety,
      .               ) -> RelateResult<'tcx, ast::Unsafety> {
     18 ( 0.00%)          if a != b {
      .                       Err(TypeError::UnsafetyMismatch(expected_found(relation, a, b)))
      .                   } else {
      .                       Ok(a)
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for abi::Abi {
-- line 252 ----------------------------------------
-- line 255 ----------------------------------------
      .                   a: abi::Abi,
      .                   b: abi::Abi,
      .               ) -> RelateResult<'tcx, abi::Abi> {
      .                   if a == b { Ok(a) } else { Err(TypeError::AbiMismatch(expected_found(relation, a, b))) }
      .               }
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for ty::ProjectionTy<'tcx> {
  4,135 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: ty::ProjectionTy<'tcx>,
      .                   b: ty::ProjectionTy<'tcx>,
      .               ) -> RelateResult<'tcx, ty::ProjectionTy<'tcx>> {
  1,287 ( 0.00%)          if a.item_def_id != b.item_def_id {
      .                       Err(TypeError::ProjectionMismatched(expected_found(
      .                           relation,
      .                           a.item_def_id,
      .                           b.item_def_id,
      .                       )))
      .                   } else {
      .                       let substs = relation.relate(a.substs, b.substs)?;
  1,716 ( 0.00%)              Ok(ty::ProjectionTy { item_def_id: a.item_def_id, substs: &substs })
      .                   }
  3,111 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for ty::ExistentialProjection<'tcx> {
      .               fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: ty::ExistentialProjection<'tcx>,
      .                   b: ty::ExistentialProjection<'tcx>,
      .               ) -> RelateResult<'tcx, ty::ExistentialProjection<'tcx>> {
-- line 286 ----------------------------------------
-- line 304 ----------------------------------------
      .                           b.substs,
      .                       )?;
      .                       Ok(ty::ExistentialProjection { item_def_id: a.item_def_id, substs, term })
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for ty::TraitRef<'tcx> {
112,425 ( 0.02%)      fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: ty::TraitRef<'tcx>,
      .                   b: ty::TraitRef<'tcx>,
      .               ) -> RelateResult<'tcx, ty::TraitRef<'tcx>> {
      .                   // Different traits cannot be related.
 24,021 ( 0.00%)          if a.def_id != b.def_id {
    108 ( 0.00%)              Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))
      .                   } else {
  7,995 ( 0.00%)              let substs = relate_substs(relation, None, a.substs, b.substs)?;
 18,984 ( 0.00%)              Ok(ty::TraitRef { def_id: a.def_id, substs })
      .                   }
 72,273 ( 0.01%)      }
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for ty::ExistentialTraitRef<'tcx> {
      .               fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: ty::ExistentialTraitRef<'tcx>,
      .                   b: ty::ExistentialTraitRef<'tcx>,
      .               ) -> RelateResult<'tcx, ty::ExistentialTraitRef<'tcx>> {
-- line 332 ----------------------------------------
-- line 358 ----------------------------------------
      .           
      .           impl<'tcx> Relate<'tcx> for Ty<'tcx> {
      .               #[inline]
      .               fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: Ty<'tcx>,
      .                   b: Ty<'tcx>,
      .               ) -> RelateResult<'tcx, Ty<'tcx>> {
 74,085 ( 0.01%)          relation.tys(a, b)
      .               }
      .           }
      .           
      .           /// The main "type relation" routine. Note that this does not handle
      .           /// inference artifacts, so you should filter those out before calling
      .           /// it.
135,152 ( 0.02%)  pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(
      .               relation: &mut R,
      .               a: Ty<'tcx>,
      .               b: Ty<'tcx>,
      .           ) -> RelateResult<'tcx, Ty<'tcx>> {
      .               let tcx = relation.tcx();
      .               debug!("super_relate_tys: a={:?} b={:?}", a, b);
295,068 ( 0.05%)      match (a.kind(), b.kind()) {
      .                   (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {
      .                       // The caller should handle these cases!
      .                       bug!("var types encountered in super_relate_tys")
      .                   }
      .           
      .                   (ty::Bound(..), _) | (_, ty::Bound(..)) => {
      .                       bug!("bound types encountered in super_relate_tys")
      .                   }
-- line 388 ----------------------------------------
-- line 391 ----------------------------------------
      .           
      .                   (&ty::Never, _)
      .                   | (&ty::Char, _)
      .                   | (&ty::Bool, _)
      .                   | (&ty::Int(_), _)
      .                   | (&ty::Uint(_), _)
      .                   | (&ty::Float(_), _)
      .                   | (&ty::Str, _)
  4,512 ( 0.00%)              if a == b =>
      .                   {
      .                       Ok(a)
      .                   }
      .           
  4,405 ( 0.00%)          (&ty::Param(ref a_p), &ty::Param(ref b_p)) if a_p.index == b_p.index => Ok(a),
      .           
      .                   (ty::Placeholder(p1), ty::Placeholder(p2)) if p1 == p2 => Ok(a),
      .           
 58,704 ( 0.01%)          (&ty::Adt(a_def, a_substs), &ty::Adt(b_def, b_substs)) if a_def == b_def => {
 18,368 ( 0.00%)              let substs = relation.relate_item_substs(a_def.did, a_substs, b_substs)?;
      .                       Ok(tcx.mk_adt(a_def, substs))
      .                   }
      .           
      .                   (&ty::Foreign(a_id), &ty::Foreign(b_id)) if a_id == b_id => Ok(tcx.mk_foreign(a_id)),
      .           
      .                   (&ty::Dynamic(a_obj, a_region), &ty::Dynamic(b_obj, b_region)) => {
      .                       let region_bound = relation.with_cause(Cause::ExistentialRegionBound, |relation| {
      .                           relation.relate_with_variance(
-- line 417 ----------------------------------------
-- line 439 ----------------------------------------
      .                       // inside the binder so we can related them
      .                       let a_types = a_types.map_bound(GeneratorWitness);
      .                       let b_types = b_types.map_bound(GeneratorWitness);
      .                       // Then remove the GeneratorWitness for the result
      .                       let types = relation.relate(a_types, b_types)?.map_bound(|witness| witness.0);
      .                       Ok(tcx.mk_generator_witness(types))
      .                   }
      .           
     48 ( 0.00%)          (&ty::Closure(a_id, a_substs), &ty::Closure(b_id, b_substs)) if a_id == b_id => {
      .                       // All Closure types with the same id represent
      .                       // the (anonymous) type of the same closure expression. So
      .                       // all of their regions should be equated.
     12 ( 0.00%)              let substs = relation.relate(a_substs, b_substs)?;
      .                       Ok(tcx.mk_closure(a_id, &substs))
      .                   }
      .           
      .                   (&ty::RawPtr(a_mt), &ty::RawPtr(b_mt)) => {
      .                       let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;
      .                       Ok(tcx.mk_ptr(mt))
      .                   }
      .           
 25,642 ( 0.00%)          (&ty::Ref(a_r, a_ty, a_mutbl), &ty::Ref(b_r, b_ty, b_mutbl)) => {
 12,474 ( 0.00%)              let r = relation.relate_with_variance(
      .                           ty::Contravariant,
      .                           ty::VarianceDiagInfo::default(),
      .                           a_r,
      .                           b_r,
      .                       )?;
      .                       let a_mt = ty::TypeAndMut { ty: a_ty, mutbl: a_mutbl };
      .                       let b_mt = ty::TypeAndMut { ty: b_ty, mutbl: b_mutbl };
 17,048 ( 0.00%)              let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;
      .                       Ok(tcx.mk_ref(r, mt))
      .                   }
      .           
  2,322 ( 0.00%)          (&ty::Array(a_t, sz_a), &ty::Array(b_t, sz_b)) => {
      .                       let t = relation.relate(a_t, b_t)?;
    928 ( 0.00%)              match relation.relate(sz_a, sz_b) {
  1,392 ( 0.00%)                  Ok(sz) => Ok(tcx.mk_ty(ty::Array(t, sz))),
      .                           Err(err) => {
      .                               // Check whether the lengths are both concrete/known values,
      .                               // but are unequal, for better diagnostics.
      .                               //
      .                               // It might seem dubious to eagerly evaluate these constants here,
      .                               // we however cannot end up with errors in `Relate` during both
      .                               // `type_of` and `predicates_of`. This means that evaluating the
      .                               // constants should not cause cycle errors here.
-- line 484 ----------------------------------------
-- line 489 ----------------------------------------
      .                                       TypeError::FixedArraySize(expected_found(relation, sz_a_val, sz_b_val)),
      .                                   ),
      .                                   _ => Err(err),
      .                               }
      .                           }
      .                       }
      .                   }
      .           
  1,962 ( 0.00%)          (&ty::Slice(a_t), &ty::Slice(b_t)) => {
      .                       let t = relation.relate(a_t, b_t)?;
      .                       Ok(tcx.mk_slice(t))
      .                   }
      .           
    460 ( 0.00%)          (&ty::Tuple(as_), &ty::Tuple(bs)) => {
    460 ( 0.00%)              if as_.len() == bs.len() {
      .                           Ok(tcx.mk_tup(
    904 ( 0.00%)                      iter::zip(as_, bs).map(|(a, b)| relation.relate(a.expect_ty(), b.expect_ty())),
      .                           )?)
      .                       } else if !(as_.is_empty() || bs.is_empty()) {
      .                           Err(TypeError::TupleSize(expected_found(relation, as_.len(), bs.len())))
      .                       } else {
      .                           Err(TypeError::Sorts(expected_found(relation, a, b)))
      .                       }
      .                   }
      .           
     27 ( 0.00%)          (&ty::FnDef(a_def_id, a_substs), &ty::FnDef(b_def_id, b_substs))
     45 ( 0.00%)              if a_def_id == b_def_id =>
      .                   {
     36 ( 0.00%)              let substs = relation.relate_item_substs(a_def_id, a_substs, b_substs)?;
      .                       Ok(tcx.mk_fn_def(a_def_id, substs))
      .                   }
      .           
      .                   (&ty::FnPtr(a_fty), &ty::FnPtr(b_fty)) => {
    246 ( 0.00%)              let fty = relation.relate(a_fty, b_fty)?;
      .                       Ok(tcx.mk_fn_ptr(fty))
      .                   }
      .           
      .                   // these two are already handled downstream in case of lazy normalization
  1,875 ( 0.00%)          (&ty::Projection(a_data), &ty::Projection(b_data)) => {
      .                       let projection_ty = relation.relate(a_data, b_data)?;
      .                       Ok(tcx.mk_projection(projection_ty.item_def_id, projection_ty.substs))
      .                   }
      .           
      .                   (&ty::Opaque(a_def_id, a_substs), &ty::Opaque(b_def_id, b_substs))
      .                       if a_def_id == b_def_id =>
      .                   {
      .                       let substs = relate_substs(relation, None, a_substs, b_substs)?;
      .                       Ok(tcx.mk_opaque(a_def_id, substs))
      .                   }
      .           
      .                   _ => Err(TypeError::Sorts(expected_found(relation, a, b))),
      .               }
152,046 ( 0.03%)  }
      .           
      .           /// The main "const relation" routine. Note that this does not handle
      .           /// inference artifacts, so you should filter those out before calling
      .           /// it.
  4,530 ( 0.00%)  pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(
      .               relation: &mut R,
      .               a: &'tcx ty::Const<'tcx>,
      .               b: &'tcx ty::Const<'tcx>,
      .           ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
      .               debug!("{}.super_relate_consts(a = {:?}, b = {:?})", relation.tag(), a, b);
      .               let tcx = relation.tcx();
      .           
      .               // FIXME(oli-obk): once const generics can have generic types, this assertion
      .               // will likely get triggered. Move to `normalize_erasing_regions` at that point.
    906 ( 0.00%)      let a_ty = tcx.erase_regions(a.ty);
    906 ( 0.00%)      let b_ty = tcx.erase_regions(b.ty);
    453 ( 0.00%)      if a_ty != b_ty {
      .                   relation.tcx().sess.delay_span_bug(
      .                       DUMMY_SP,
      .                       &format!("cannot relate constants of different types: {} != {}", a_ty, b_ty),
      .                   );
      .               }
      .           
      .               let eagerly_eval = |x: &'tcx ty::Const<'tcx>| x.eval(tcx, relation.param_env());
    453 ( 0.00%)      let a = eagerly_eval(a);
    906 ( 0.00%)      let b = eagerly_eval(b);
      .           
      .               // Currently, the values that can be unified are primitive types,
      .               // and those that derive both `PartialEq` and `Eq`, corresponding
      .               // to structural-match types.
  4,983 ( 0.00%)      let is_match = match (a.val, b.val) {
      .                   (ty::ConstKind::Infer(_), _) | (_, ty::ConstKind::Infer(_)) => {
      .                       // The caller should handle these cases!
      .                       bug!("var types encountered in super_relate_consts: {:?} {:?}", a, b)
      .                   }
      .           
      .                   (ty::ConstKind::Error(_), _) => return Ok(a),
      .                   (_, ty::ConstKind::Error(_)) => return Ok(b),
      .           
-- line 580 ----------------------------------------
-- line 608 ----------------------------------------
      .                               substs,
      .                               promoted: au.promoted,
      .                           }),
      .                           ty: a.ty,
      .                       }));
      .                   }
      .                   _ => false,
      .               };
  2,718 ( 0.00%)      if is_match { Ok(a) } else { Err(TypeError::ConstMismatch(expected_found(relation, a, b))) }
  4,077 ( 0.00%)  }
      .           
      .           fn check_const_value_eq<'tcx, R: TypeRelation<'tcx>>(
      .               relation: &mut R,
      .               a_val: ConstValue<'tcx>,
      .               b_val: ConstValue<'tcx>,
      .               // FIXME(oli-obk): these arguments should go away with valtrees
      .               a: &'tcx ty::Const<'tcx>,
      .               b: &'tcx ty::Const<'tcx>,
      .               // FIXME(oli-obk): this should just be `bool` with valtrees
      .           ) -> RelateResult<'tcx, bool> {
    453 ( 0.00%)      let tcx = relation.tcx();
  4,983 ( 0.00%)      Ok(match (a_val, b_val) {
  9,966 ( 0.00%)          (ConstValue::Scalar(Scalar::Int(a_val)), ConstValue::Scalar(Scalar::Int(b_val))) => {
    453 ( 0.00%)              a_val == b_val
      .                   }
      .                   (
      .                       ConstValue::Scalar(Scalar::Ptr(a_val, _a_size)),
      .                       ConstValue::Scalar(Scalar::Ptr(b_val, _b_size)),
      .                   ) => {
      .                       a_val == b_val
      .                           || match (tcx.global_alloc(a_val.provenance), tcx.global_alloc(b_val.provenance)) {
      .                               (GlobalAlloc::Function(a_instance), GlobalAlloc::Function(b_instance)) => {
-- line 639 ----------------------------------------
-- line 737 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for SubstsRef<'tcx> {
      .               fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: SubstsRef<'tcx>,
      .                   b: SubstsRef<'tcx>,
      .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
    435 ( 0.00%)          relate_substs(relation, None, a, b)
      .               }
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for ty::Region<'tcx> {
      .               fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: ty::Region<'tcx>,
      .                   b: ty::Region<'tcx>,
      .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
 12,332 ( 0.00%)          relation.regions(a, b)
      .               }
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for &'tcx ty::Const<'tcx> {
      .               fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: &'tcx ty::Const<'tcx>,
      .                   b: &'tcx ty::Const<'tcx>,
      .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
  1,624 ( 0.00%)          relation.consts(a, b)
      .               }
      .           }
      .           
      .           impl<'tcx, T: Relate<'tcx>> Relate<'tcx> for ty::Binder<'tcx, T> {
      .               fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: ty::Binder<'tcx, T>,
      .                   b: ty::Binder<'tcx, T>,
      .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>> {
    588 ( 0.00%)          relation.binders(a, b)
      .               }
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for GenericArg<'tcx> {
 77,566 ( 0.01%)      fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: GenericArg<'tcx>,
      .                   b: GenericArg<'tcx>,
      .               ) -> RelateResult<'tcx, GenericArg<'tcx>> {
110,290 ( 0.02%)          match (a.unpack(), b.unpack()) {
      .                       (GenericArgKind::Lifetime(a_lt), GenericArgKind::Lifetime(b_lt)) => {
      .                           Ok(relation.relate(a_lt, b_lt)?.into())
      .                       }
      .                       (GenericArgKind::Type(a_ty), GenericArgKind::Type(b_ty)) => {
    136 ( 0.00%)                  Ok(relation.relate(a_ty, b_ty)?.into())
      .                       }
      .                       (GenericArgKind::Const(a_ct), GenericArgKind::Const(b_ct)) => {
      .                           Ok(relation.relate(a_ct, b_ct)?.into())
      .                       }
      .                       (GenericArgKind::Lifetime(unpacked), x) => {
      .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
      .                       }
      .                       (GenericArgKind::Type(unpacked), x) => {
      .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
      .                       }
      .                       (GenericArgKind::Const(unpacked), x) => {
      .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
      .                       }
      .                   }
 90,577 ( 0.02%)      }
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for ty::ImplPolarity {
      .               fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: ty::ImplPolarity,
      .                   b: ty::ImplPolarity,
      .               ) -> RelateResult<'tcx, ty::ImplPolarity> {
-- line 813 ----------------------------------------
-- line 815 ----------------------------------------
      .                       Err(TypeError::PolarityMismatch(expected_found(relation, a, b)))
      .                   } else {
      .                       Ok(a)
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for ty::TraitPredicate<'tcx> {
    462 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: ty::TraitPredicate<'tcx>,
      .                   b: ty::TraitPredicate<'tcx>,
      .               ) -> RelateResult<'tcx, ty::TraitPredicate<'tcx>> {
      .                   Ok(ty::TraitPredicate {
    210 ( 0.00%)              trait_ref: relation.relate(a.trait_ref, b.trait_ref)?,
      .                       constness: relation.relate(a.constness, b.constness)?,
      .                       polarity: relation.relate(a.polarity, b.polarity)?,
      .                   })
    378 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for ty::Term<'tcx> {
      .               fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: Self,
      .                   b: Self,
      .               ) -> RelateResult<'tcx, Self> {
-- line 841 ----------------------------------------
-- line 862 ----------------------------------------
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // Error handling
      .           
      .           pub fn expected_found<'tcx, R, T>(relation: &mut R, a: T, b: T) -> ExpectedFound<T>
      .           where
      .               R: TypeRelation<'tcx>,
      .           {
     72 ( 0.00%)      ExpectedFound::new(relation.a_is_expected(), a, b)
      .           }

386,209 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs
--------------------------------------------------------------------------------
Ir                 

-- line 22 ----------------------------------------
        .           
        .           /// An entity in the Rust type system, which can be one of
        .           /// several kinds (types, lifetimes, and consts).
        .           /// To reduce memory usage, a `GenericArg` is an interned pointer,
        .           /// with the lowest 2 bits being reserved for a tag to
        .           /// indicate the type (`Ty`, `Region`, or `Const`) it points to.
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
        .           pub struct GenericArg<'tcx> {
   83,728 ( 0.01%)      ptr: NonZeroUsize,
  245,080 ( 0.04%)      marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, &'tcx ty::Const<'tcx>)>,
        .           }
        .           
        .           const TAG_MASK: usize = 0b11;
        .           const TYPE_TAG: usize = 0b00;
        .           const REGION_TAG: usize = 0b01;
        .           const CONST_TAG: usize = 0b10;
        .           
   44,026 ( 0.01%)  #[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]
        .           pub enum GenericArgKind<'tcx> {
        .               Lifetime(ty::Region<'tcx>),
        .               Type(Ty<'tcx>),
        .               Const(&'tcx ty::Const<'tcx>),
        .           }
        .           
        .           impl<'tcx> GenericArgKind<'tcx> {
   11,488 ( 0.00%)      fn pack(self) -> GenericArg<'tcx> {
   11,488 ( 0.00%)          let (tag, ptr) = match self {
        .                       GenericArgKind::Lifetime(lt) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(lt) & TAG_MASK, 0);
        .                           (REGION_TAG, lt as *const _ as usize)
        .                       }
        .                       GenericArgKind::Type(ty) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(ty) & TAG_MASK, 0);
-- line 56 ----------------------------------------
-- line 58 ----------------------------------------
        .                       }
        .                       GenericArgKind::Const(ct) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(ct) & TAG_MASK, 0);
        .                           (CONST_TAG, ct as *const _ as usize)
        .                       }
        .                   };
        .           
   22,648 ( 0.00%)          GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }
   11,488 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> fmt::Debug for GenericArg<'tcx> {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   match self.unpack() {
        .                       GenericArgKind::Lifetime(lt) => lt.fmt(f),
        .                       GenericArgKind::Type(ty) => ty.fmt(f),
        .                       GenericArgKind::Const(ct) => ct.fmt(f),
-- line 75 ----------------------------------------
-- line 85 ----------------------------------------
        .           
        .           impl<'tcx> PartialOrd for GenericArg<'tcx> {
        .               fn partial_cmp(&self, other: &GenericArg<'_>) -> Option<Ordering> {
        .                   Some(self.cmp(&other))
        .               }
        .           }
        .           
        .           impl<'tcx> From<ty::Region<'tcx>> for GenericArg<'tcx> {
    8,763 ( 0.00%)      fn from(r: ty::Region<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Lifetime(r).pack()
    8,763 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {
  142,418 ( 0.03%)      fn from(ty: Ty<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Type(ty).pack()
  142,418 ( 0.03%)      }
        .           }
        .           
        .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for GenericArg<'tcx> {
      268 ( 0.00%)      fn from(c: &'tcx ty::Const<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Const(c).pack()
      268 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> GenericArg<'tcx> {
        .               #[inline]
        .               pub fn unpack(self) -> GenericArgKind<'tcx> {
        .                   let ptr = self.ptr.get();
        .                   unsafe {
1,657,615 ( 0.30%)              match ptr & TAG_MASK {
    6,372 ( 0.00%)                  REGION_TAG => GenericArgKind::Lifetime(&*((ptr & !TAG_MASK) as *const _)),
  428,813 ( 0.08%)                  TYPE_TAG => GenericArgKind::Type(&*((ptr & !TAG_MASK) as *const _)),
      850 ( 0.00%)                  CONST_TAG => GenericArgKind::Const(&*((ptr & !TAG_MASK) as *const _)),
        .                           _ => intrinsics::unreachable(),
        .                       }
        .                   }
        .               }
        .           
        .               /// Unpack the `GenericArg` as a type when it is known certainly to be a type.
        .               /// This is true in cases where `Substs` is used in places where the kinds are known
        .               /// to be limited (e.g. in tuples, where the only parameters are type parameters).
        .               pub fn expect_ty(self) -> Ty<'tcx> {
        .                   match self.unpack() {
        .                       GenericArgKind::Type(ty) => ty,
        .                       _ => bug!("expected a type, but found another kind"),
        .                   }
    1,354 ( 0.00%)      }
        .           
        .               /// Unpack the `GenericArg` as a const when it is known certainly to be a const.
        .               pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {
        .                   match self.unpack() {
        .                       GenericArgKind::Const(c) => c,
        .                       _ => bug!("expected a const, but found another kind"),
        .                   }
        .               }
-- line 140 ----------------------------------------
-- line 170 ----------------------------------------
        .                       GenericArgKind::Type(ty) => ty.visit_with(visitor),
        .                       GenericArgKind::Const(ct) => ct.visit_with(visitor),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for GenericArg<'tcx> {
        .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
      642 ( 0.00%)          self.unpack().encode(e)
        .               }
        .           }
        .           
        .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for GenericArg<'tcx> {
   57,440 ( 0.01%)      fn decode(d: &mut D) -> GenericArg<'tcx> {
   57,440 ( 0.01%)          GenericArgKind::decode(d).pack()
        .               }
        .           }
        .           
        .           /// A substitution mapping generic parameters to new values.
        .           pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;
        .           
        .           pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;
        .           
        .           impl<'a, 'tcx> InternalSubsts<'tcx> {
        .               /// Interpret these substitutions as the substitutions of a closure type.
        .               /// Closure substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the signature and closure kind;
        .               /// see `ty::ClosureSubsts` struct for more comments.
       81 ( 0.00%)      pub fn as_closure(&'a self) -> ClosureSubsts<'a> {
        .                   ClosureSubsts { substs: self }
       81 ( 0.00%)      }
        .           
        .               /// Interpret these substitutions as the substitutions of a generator type.
        .               /// Generator substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the signature and generator kind;
        .               /// see `ty::GeneratorSubsts` struct for more comments.
        .               pub fn as_generator(&'tcx self) -> GeneratorSubsts<'tcx> {
        .                   GeneratorSubsts { substs: self }
        .               }
-- line 208 ----------------------------------------
-- line 211 ----------------------------------------
        .               /// Inline const substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the inferred type;
        .               /// see `ty::InlineConstSubsts` struct for more comments.
        .               pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {
        .                   InlineConstSubsts { substs: self }
        .               }
        .           
        .               /// Creates an `InternalSubsts` that maps each generic parameter to itself.
    3,940 ( 0.00%)      pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {
      988 ( 0.00%)          Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))
    3,546 ( 0.00%)      }
        .           
        .               /// Creates an `InternalSubsts` for generic parameter definitions,
        .               /// by calling closures to obtain each kind.
        .               /// The closures get to observe the `InternalSubsts` as they're
        .               /// being built, which can be used to correctly
        .               /// substitute defaults of generic parameters.
   56,719 ( 0.01%)      pub fn for_item<F>(tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
        .               where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   let defs = tcx.generics_of(def_id);
        .                   let count = defs.count();
        .                   let mut substs = SmallVec::with_capacity(count);
   20,552 ( 0.00%)          Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);
   12,728 ( 0.00%)          tcx.intern_substs(&substs)
   57,276 ( 0.01%)      }
        .           
        .               pub fn extend_to<F>(&self, tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
        .               where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   Self::for_item(tcx, def_id, |param, substs| {
        .                       self.get(param.index as usize).cloned().unwrap_or_else(|| mk_kind(param, substs))
        .                   })
        .               }
        .           
   71,008 ( 0.01%)      pub fn fill_item<F>(
        .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
        .                   tcx: TyCtxt<'tcx>,
        .                   defs: &ty::Generics,
        .                   mk_kind: &mut F,
        .               ) where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
   28,909 ( 0.01%)          if let Some(def_id) = defs.parent {
        .                       let parent_defs = tcx.generics_of(def_id);
    1,620 ( 0.00%)              Self::fill_item(substs, tcx, parent_defs, mk_kind);
        .                   }
        .                   Self::fill_single(substs, defs, mk_kind)
   56,688 ( 0.01%)      }
        .           
       32 ( 0.00%)      pub fn fill_single<F>(
        .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
        .                   defs: &ty::Generics,
        .                   mk_kind: &mut F,
        .               ) where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   substs.reserve(defs.params.len());
        .                   for param in &defs.params {
        .                       let kind = mk_kind(param, substs);
   38,833 ( 0.01%)              assert_eq!(param.index as usize, substs.len());
        .                       substs.push(kind);
        .                   }
       32 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {
        .                   self.iter()
        .                       .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })
        .               }
        .           
        .               #[inline]
-- line 284 ----------------------------------------
-- line 302 ----------------------------------------
        .                   self.iter().filter_map(|k| match k.unpack() {
        .                       GenericArgKind::Lifetime(_) => None,
        .                       generic => Some(generic),
        .                   })
        .               }
        .           
        .               #[inline]
        .               pub fn type_at(&self, i: usize) -> Ty<'tcx> {
   58,566 ( 0.01%)          if let GenericArgKind::Type(ty) = self[i].unpack() {
        .                       ty
        .                   } else {
        .                       bug!("expected type for param #{} in {:?}", i, self);
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {
-- line 318 ----------------------------------------
-- line 350 ----------------------------------------
        .               /// impl<U> X<U> for U { fn f<V>() {} }
        .               /// ```
        .               ///
        .               /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.
        .               /// * If `source_ancestor` is the def_id of the trait.
        .               /// * If `target_substs` is `[U]`, the substs for the impl.
        .               /// * Then we will return `[U, T]`, the subst for `f` in the impl that
        .               ///   are needed for it to match the trait.
    2,436 ( 0.00%)      pub fn rebase_onto(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   source_ancestor: DefId,
        .                   target_substs: SubstsRef<'tcx>,
        .               ) -> SubstsRef<'tcx> {
        .                   let defs = tcx.generics_of(source_ancestor);
      696 ( 0.00%)          tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))
    2,784 ( 0.00%)      }
        .           
        .               pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {
        .                   tcx.mk_substs(self.iter().take(generics.count()))
        .               }
        .           }
        .           
        .           impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {
   15,932 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // The match arms are in order of frequency. The 1, 2, and 0 cases are
        .                   // typically hit in 90--99.99% of cases. When folding doesn't change
        .                   // the substs, it's faster to reuse the existing substs rather than
        .                   // calling `intern_substs`.
  438,756 ( 0.08%)          match self.len() {
        .                       1 => {
   64,203 ( 0.01%)                  let param0 = self[0].try_fold_with(folder)?;
  200,040 ( 0.04%)                  if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }
        .                       }
        .                       2 => {
   39,932 ( 0.01%)                  let param0 = self[0].try_fold_with(folder)?;
  107,128 ( 0.02%)                  let param1 = self[1].try_fold_with(folder)?;
  118,930 ( 0.02%)                  if param0 == self[0] && param1 == self[1] {
        .                               Ok(self)
        .                           } else {
   79,899 ( 0.01%)                      Ok(folder.tcx().intern_substs(&[param0, param1]))
        .                           }
        .                       }
        .                       0 => Ok(self),
        .                       _ => {
        .                           let params: SmallVec<[_; 8]> =
    2,369 ( 0.00%)                      self.iter().map(|k| k.try_fold_with(folder)).collect::<Result<_, _>>()?;
      248 ( 0.00%)                  if params[..] == self[..] {
        .                               Ok(self)
        .                           } else {
      682 ( 0.00%)                      Ok(folder.tcx().intern_substs(&params))
        .                           }
        .                       }
        .                   }
   22,729 ( 0.00%)      }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
   68,766 ( 0.01%)          self.iter().try_for_each(|t| t.visit_with(visitor))
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Public trait `Subst`
        .           //
        .           // Just call `foo.subst(tcx, substs)` to perform a substitution across
        .           // `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when
-- line 420 ----------------------------------------
-- line 435 ----------------------------------------
        .           
        .           impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {
        .               fn subst_spanned(
        .                   self,
        .                   tcx: TyCtxt<'tcx>,
        .                   substs: &[GenericArg<'tcx>],
        .                   span: Option<Span>,
        .               ) -> T {
  129,494 ( 0.02%)          let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };
        .                   self.fold_with(&mut folder)
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // The actual substitution engine itself is a type folder.
        .           
        .           struct SubstFolder<'a, 'tcx> {
-- line 451 ----------------------------------------
-- line 456 ----------------------------------------
        .               span: Option<Span>,
        .           
        .               /// Number of region binders we have passed through while doing the substitution
        .               binders_passed: u32,
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   28,501 ( 0.01%)          self.tcx
        .               }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
   43,824 ( 0.01%)          self.binders_passed += 1;
   10,305 ( 0.00%)          let t = t.super_fold_with(self);
   43,824 ( 0.01%)          self.binders_passed -= 1;
        .                   t
        .               }
        .           
   23,280 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
        .                   // Note: This routine only handles regions that are bound on
        .                   // type declarations and other outer declarations, not those
        .                   // bound in *fn types*. Region substitution of the bound
        .                   // regions that appear in a function signature is done using
        .                   // the specialized routine `ty::replace_late_regions()`.
    7,760 ( 0.00%)          match *r {
    6,080 ( 0.00%)              ty::ReEarlyBound(data) => {
    6,080 ( 0.00%)                  let rk = self.substs.get(data.index as usize).map(|k| k.unpack());
        .                           match rk {
    3,040 ( 0.00%)                      Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),
        .                               _ => {
        .                                   let span = self.span.unwrap_or(DUMMY_SP);
        .                                   let msg = format!(
        .                                       "Region parameter out of range \
        .                                        when substituting in region {} (index={})",
        .                                       data.name, data.index
        .                                   );
        .                                   span_bug!(span, "{}", msg);
        .                               }
        .                           }
        .                       }
        .                       _ => r,
        .                   }
   27,160 ( 0.00%)      }
        .           
  142,884 ( 0.03%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
   47,628 ( 0.01%)          if !t.needs_subst() {
        .                       return t;
        .                   }
        .           
   72,140 ( 0.01%)          match *t.kind() {
  123,170 ( 0.02%)              ty::Param(p) => self.ty_for_param(p, t),
   68,616 ( 0.01%)              _ => t.super_fold_with(self),
        .                   }
  180,960 ( 0.03%)      }
        .           
    2,835 ( 0.00%)      fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    2,290 ( 0.00%)          if let ty::ConstKind::Param(p) = c.val {
        .                       self.const_for_param(p, c)
        .                   } else {
      981 ( 0.00%)              c.super_fold_with(self)
        .                   }
    2,368 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {
        .                   c.super_fold_with(self)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> SubstFolder<'a, 'tcx> {
        .               fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   // Look up the type in the substitutions. It really should be in there.
   49,268 ( 0.01%)          let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());
        .                   let ty = match opt_ty {
        .                       Some(GenericArgKind::Type(ty)) => ty,
        .                       Some(kind) => {
        .                           let span = self.span.unwrap_or(DUMMY_SP);
        .                           span_bug!(
        .                               span,
        .                               "expected type for `{:?}` ({:?}/{}) but found {:?} \
        .                                when substituting, substs={:?}",
-- line 539 ----------------------------------------
-- line 562 ----------------------------------------
        .               }
        .           
        .               fn const_for_param(
        .                   &self,
        .                   p: ParamConst,
        .                   source_ct: &'tcx ty::Const<'tcx>,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   // Look up the const in the substitutions. It really should be in there.
      592 ( 0.00%)          let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());
        .                   let ct = match opt_ct {
        .                       Some(GenericArgKind::Const(ct)) => ct,
        .                       Some(kind) => {
        .                           let span = self.span.unwrap_or(DUMMY_SP);
        .                           span_bug!(
        .                               span,
        .                               "expected const for `{:?}` ({:?}/{}) but found {:?} \
        .                                when substituting substs={:?}",
-- line 578 ----------------------------------------
-- line 645 ----------------------------------------
        .               fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {
        .                   debug!(
        .                       "shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})",
        .                       val,
        .                       self.binders_passed,
        .                       val.has_escaping_bound_vars()
        .                   );
        .           
   89,899 ( 0.02%)          if self.binders_passed == 0 || !val.has_escaping_bound_vars() {
        .                       return val;
        .                   }
        .           
        .                   let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);
        .                   debug!("shift_vars: shifted result = {:?}", result);
        .           
        .                   result
        .               }
        .           
        .               fn shift_region_through_binders(&self, region: ty::Region<'tcx>) -> ty::Region<'tcx> {
    6,340 ( 0.00%)          if self.binders_passed == 0 || !region.has_escaping_bound_vars() {
        .                       return region;
        .                   }
        .                   ty::fold::shift_region(self.tcx, region, self.binders_passed)
        .               }
        .           }
        .           
        .           /// Stores the user-given substs to reach some fully qualified path
        .           /// (e.g., `<T>::Item` or `<T as Trait>::Item`).
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
      756 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct UserSubsts<'tcx> {
        .               /// The substitutions for the item as given by the user.
        .               pub substs: SubstsRef<'tcx>,
        .           
        .               /// The self type, in the case of a `<T>::Item` path (when applied
        .               /// to an inherent impl). See `UserSelfTy` below.
      506 ( 0.00%)      pub user_self_ty: Option<UserSelfTy<'tcx>>,
        .           }
        .           
        .           /// Specifies the user-given self type. In the case of a path that
        .           /// refers to a member in an inherent impl, this self type is
        .           /// sometimes needed to constrain the type parameters on the impl. For
        .           /// example, in this code:
        .           ///
        .           /// ```
-- line 689 ----------------------------------------
-- line 696 ----------------------------------------
        .           /// self type `Foo<u32>`. Then we can instantiate the parameters of
        .           /// the impl (with the substs from `UserSubsts`) and apply those to
        .           /// the self type, giving `Foo<?A>`. Finally, we unify that with
        .           /// the self type here, which contains `?A` to be `&'static u32`
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct UserSelfTy<'tcx> {
        .               pub impl_def_id: DefId,
       12 ( 0.00%)      pub self_ty: Ty<'tcx>,
        .           }

  707,544 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 111 ----------------------------------------
        .           const EMPTY: u8 = 0b1111_1111;
        .           
        .           /// Control byte value for a deleted bucket.
        .           const DELETED: u8 = 0b1000_0000;
        .           
        .           /// Checks whether a control byte represents a full bucket (top bit is clear).
        .           #[inline]
        .           fn is_full(ctrl: u8) -> bool {
  809,726 ( 0.14%)      ctrl & 0x80 == 0
        .           }
        .           
        .           /// Checks whether a control byte represents a special value (top bit is set).
        .           #[inline]
        .           fn is_special(ctrl: u8) -> bool {
        .               ctrl & 0x80 != 0
        .           }
        .           
        .           /// Checks whether a special control value is EMPTY (just check 1 bit).
        .           #[inline]
        .           fn special_is_empty(ctrl: u8) -> bool {
        .               debug_assert!(is_special(ctrl));
   47,455 ( 0.01%)      ctrl & 0x01 != 0
        .           }
        .           
        .           /// Primary hash function, used to select the initial bucket to probe from.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h1(hash: u64) -> usize {
        .               // On 32-bit platforms we simply ignore the higher hash bits.
        .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
        .           /// Secondary hash function, saved in the low 7 bits of the control byte.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h2(hash: u64) -> u8 {
        .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
        .               // value, some hash functions (such as FxHash) produce a usize result
        .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
        .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
8,504,308 ( 1.52%)      let top7 = hash >> (hash_len * 8 - 7);
        .               (top7 & 0x7f) as u8 // truncation
        .           }
        .           
        .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
        .           /// table size is a power of two) to visit every group of elements exactly once.
        .           ///
        .           /// A triangular probe has us jump by 1 more group every time. So first we
        .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
        .               #[inline]
        .               fn move_next(&mut self, bucket_mask: usize) {
        .                   // We should have found an empty bucket by now and ended the probe.
        .                   debug_assert!(
        .                       self.stride <= bucket_mask,
        .                       "Went past end of probe sequence"
        .                   );
        .           
  135,904 ( 0.02%)          self.stride += Group::WIDTH;
  135,904 ( 0.02%)          self.pos += self.stride;
  112,195 ( 0.02%)          self.pos &= bucket_mask;
        .               }
        .           }
        .           
        .           /// Returns the number of buckets needed to hold the given number of items,
        .           /// taking the maximum load factor into account.
        .           ///
        .           /// Returns `None` if an overflow occurs.
        .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
        .           #[cfg_attr(target_os = "emscripten", inline(never))]
        .           #[cfg_attr(not(target_os = "emscripten"), inline)]
        .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
        .               debug_assert_ne!(cap, 0);
        .           
        .               // For small tables we require at least 1 empty bucket so that lookups are
        .               // guaranteed to terminate if an element doesn't exist in the table.
   38,598 ( 0.01%)      if cap < 8 {
        .                   // We don't bother with a table size of 2 buckets since that can only
        .                   // hold a single element. Instead we skip directly to a 4 bucket table
        .                   // which can hold 3 elements.
   79,240 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
        .               }
        .           
        .               // Otherwise require 1/8 buckets to be empty (87.5% load)
        .               //
        .               // Be careful when modifying this, calculate_layout relies on the
        .               // overflow check here.
   20,706 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
        .           
        .               // Any overflows will have been caught by the checked_mul. Also, any
        .               // rounding errors from the division above will be cleaned up by
        .               // next_power_of_two (which can't overflow because of the previous division).
        .               Some(adjusted_cap.next_power_of_two())
        .           }
        .           
        .           /// Returns the maximum effective capacity for the given bucket mask, taking
        .           /// the maximum load factor into account.
        .           #[inline]
        .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   99,048 ( 0.02%)      if bucket_mask < 8 {
        .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
        .                   // Keep in mind that the bucket mask is one less than the bucket count.
        .                   bucket_mask
        .               } else {
        .                   // For larger tables we reserve 12.5% of the slots as empty.
   25,816 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
        .               }
        .           }
        .           
        .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
        .           /// while keeping the rest of `calculate_layout_for` independent of `T`
        .           #[derive(Copy, Clone)]
        .           struct TableLayout {
        .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
        .           
        .               #[inline]
        .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   let TableLayout { size, ctrl_align } = self;
        .                   // Manual layout calculation since Layout methods are not yet stable.
        .                   let ctrl_offset =
   78,647 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
  105,354 ( 0.02%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
        .           
        .                   Some((
        .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
        .                       ctrl_offset,
        .                   ))
        .               }
        .           }
        .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub unsafe fn drop(&self) {
        .                   self.as_ptr().drop_in_place();
        .               }
        .               #[inline]
        .               pub unsafe fn read(&self) -> T {
      598 ( 0.00%)          self.as_ptr().read()
        .               }
        .               #[inline]
        .               pub unsafe fn write(&self, val: T) {
        .                   self.as_ptr().write(val);
        .               }
        .               #[inline]
        .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
        .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
        .               /// Creates a new empty hash table without allocating any memory, using the
        .               /// given allocator.
        .               ///
        .               /// In effect this returns a table with exactly 1 bucket. However we can
        .               /// leave the data pointer dangling since that bucket is never written to
        .               /// due to our load factor forcing us to always have at least 1 free bucket.
        .               #[inline]
        .               pub fn new_in(alloc: A) -> Self {
      462 ( 0.00%)          Self {
        .                       table: RawTableInner::new_in(alloc),
        .                       marker: PhantomData,
        .                   }
        .               }
        .           
        .               /// Allocates a new hash table with the given number of buckets.
        .               ///
        .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
        .               unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   Ok(Self {
      105 ( 0.00%)              table: RawTableInner::new_uninitialized(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           buckets,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
        .               /// Attempts to allocate a new hash table with at least enough capacity
        .               /// for inserting the given number of elements without reallocating.
        .               fn fallible_with_capacity(
        .                   alloc: A,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   Ok(Self {
    5,605 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           capacity,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
        .                   debug_assert_ne!(self.table.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               /// Erases an element from the table without dropping it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    6,385 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    6,385 ( 0.00%)          let index = self.bucket_index(item);
        .                   self.table.erase(index);
   12,770 ( 0.00%)      }
        .           
        .               /// Erases an element from the table, dropping it in place.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
        .                   // Erase the element from the table first since drop might panic.
    3,950 ( 0.00%)          self.erase_no_drop(&item);
        .                   item.drop();
        .               }
        .           
        .               /// Finds and erases an element from the table, dropping it in place.
        .               /// Returns true if an element was found.
        .               #[cfg(feature = "raw")]
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    8,820 ( 0.00%)          self.erase_no_drop(&item);
       35 ( 0.00%)          item.read()
        .               }
        .           
        .               /// Finds and removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
  214,541 ( 0.04%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      440 ( 0.00%)          match self.find(hash, eq) {
    2,297 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
   37,070 ( 0.01%)              None => None,
        .                   }
  305,779 ( 0.05%)      }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear_no_drop(&mut self) {
        .                   self.table.clear_no_drop();
        .               }
        .           
        .               /// Removes all elements from the table without freeing the backing memory.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear(&mut self) {
        .                   // Ensure that the table is reset even if one of the drops panic
        .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
        .                   unsafe {
        1 ( 0.00%)              self_.drop_elements();
        .                   }
        .               }
        .           
        7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    4,172 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
        .                       for item in self.iter() {
        .                           item.drop();
        .                       }
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
        .                   // Calculate the minimal number of elements that we need to reserve
        .                   // space for.
        .                   let min_size = usize::max(self.table.items, min_size);
        .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Ensures that at least `additional` items can be inserted into the table
        .               /// without reallocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
  120,076 ( 0.02%)          if additional > self.table.growth_left {
        .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   66,084 ( 0.01%)              if self
        .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
        .                           .is_err()
        .                       {
        .                           unsafe { hint::unreachable_unchecked() }
        .                       }
        .                   }
        .               }
        .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
        .                   } else {
        .                       Ok(())
        .                   }
        .               }
        .           
        .               /// Out-of-line slow path for `reserve` and `try_reserve`.
        .               #[cold]
        .               #[inline(never)]
  150,382 ( 0.03%)      fn reserve_rehash(
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
        .               ) -> Result<(), TryReserveError> {
        .                   unsafe {
        .                       self.table.reserve_rehash_inner(
        .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
        .                           TableLayout::new::<T>(),
        .                           if mem::needs_drop::<T>() {
        .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
        .                           } else {
        .                               None
        .                           },
        .                       )
        .                   }
  103,192 ( 0.02%)      }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
        .               /// current table into it.
        .               fn resize(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
        .                       )
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns its raw bucket.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
1,439,762 ( 0.26%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
        .                   unsafe {
        .                       let mut index = self.table.find_insert_slot(hash);
        .           
        .                       // We can avoid growing the table once we have reached our load
        .                       // factor if we are replacing a tombstone. This works since the
        .                       // number of EMPTY slots does not change in this case.
    1,518 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  812,681 ( 0.15%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
        .                           self.reserve(1, hasher);
        .                           index = self.table.find_insert_slot(hash);
        .                       }
        .           
        .                       self.table.record_item_insert_at(index, old_ctrl, hash);
        .           
        .                       let bucket = self.bucket(index);
        2 ( 0.00%)              bucket.write(value);
        .                       bucket
        .                   }
1,042,770 ( 0.19%)      }
        .           
        .               /// Attempts to insert a new element without growing the table and return its raw bucket.
        .               ///
        .               /// Returns an `Err` containing the given element if inserting it would require growing the
        .               /// table.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns a mutable reference to it.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  237,448 ( 0.04%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
       38 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
  178,086 ( 0.03%)      }
        .           
        .               /// Inserts a new element into the table, without growing the table.
        .               ///
        .               /// There must be enough space in the table to insert the new element.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
      348 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
  137,867 ( 0.02%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    4,089 ( 0.00%)          let bucket = self.table.bucket(index);
        .           
        .                   // If we are replacing a DELETED entry then we don't need to update
        .                   // the load counter.
  281,100 ( 0.05%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
        .           
        .                   bucket.write(value);
  226,256 ( 0.04%)          self.table.items += 1;
        .                   bucket
      663 ( 0.00%)      }
        .           
        .               /// Temporary removes a bucket, applying the given function to the removed
        .               /// element and optionally put back the returned value in the same bucket.
        .               ///
        .               /// Returns `true` if the bucket still contains an element
        .               ///
        .               /// This does not check if the given bucket is actually occupied.
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// Searches for an element in the table.
        .               #[inline]
      912 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
    2,472 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    4,648 ( 0.00%)              eq(self.bucket(index).as_ref())
      915 ( 0.00%)          });
        .           
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match result {
      358 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
        .                       None => None,
        .                   }
      912 ( 0.00%)      }
        .           
        .               /// Gets a reference to an element in the table.
        .               #[inline]
        .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    5,944 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Gets a mutable reference to an element in the table.
        .               #[inline]
        .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    1,555 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Attempts to get mutable references to `N` entries in the table at once.
        .               ///
        .               /// Returns an array of length `N` with the results of each query.
-- line 855 ----------------------------------------
-- line 920 ----------------------------------------
        .               #[inline]
        .               pub fn len(&self) -> usize {
        .                   self.table.items
        .               }
        .           
        .               /// Returns `true` if the table contains no elements.
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
  227,135 ( 0.04%)          self.len() == 0
        .               }
        .           
        .               /// Returns the number of buckets in the table.
        .               #[inline]
        .               pub fn buckets(&self) -> usize {
        .                   self.table.bucket_mask + 1
        .               }
        .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
        .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
        .               /// Because we cannot make the `next` method unsafe on the `RawIter`
        .               /// struct, we have to make the `iter` method unsafe.
        .               #[inline]
        .               pub unsafe fn iter(&self) -> RawIter<T> {
        .                   let data = Bucket::from_base_index(self.data_end(), 0);
        .                   RawIter {
        .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
   30,646 ( 0.01%)              items: self.table.items,
        .                   }
        .               }
        .           
        .               /// Returns an iterator over occupied buckets that could match a given hash.
        .               ///
        .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
        .               /// return items that have a hash value different than the one provided. You
        .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
        .               /// Iteration starts at the provided iterator's current location.
        .               ///
        .               /// It is up to the caller to ensure that the iterator is valid for this
        .               /// `RawTable` and covers all items that remain in the table.
        .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
        .                   debug_assert_eq!(iter.len(), self.len());
        .           
        .                   let alloc = self.table.alloc.clone();
    2,356 ( 0.00%)          let allocation = self.into_allocation();
    1,767 ( 0.00%)          RawIntoIter {
    2,945 ( 0.00%)              iter,
        .                       allocation,
        .                       marker: PhantomData,
        .                       alloc,
        .                   }
        .               }
        .           
        .               /// Converts the table into a raw allocation. The contents of the table
        .               /// should be dropped using a `RawIter` before freeing the allocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
      901 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
        .                       None
        .                   } else {
        .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
        .                           Some(lco) => lco,
        .                           None => unsafe { hint::unreachable_unchecked() },
        .                       };
        .                       Some((
      203 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
        .                           layout,
        .                       ))
        .                   };
        .                   mem::forget(self);
        .                   alloc
        .               }
        .           }
        .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<A> RawTableInner<A> {
        .               #[inline]
        .               const fn new_in(alloc: A) -> Self {
  215,665 ( 0.04%)          Self {
        .                       // Be careful to cast the entire slice to a raw pointer.
        .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
        .                       bucket_mask: 0,
        .                       items: 0,
        .                       growth_left: 0,
        .                       alloc,
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Allocator + Clone> RawTableInner<A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
  137,705 ( 0.02%)      unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
        .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
        .                   // such allocations will never succeed anyways.
        .                   //
        .                   // This mirrors what Vec does in the standard library.
        .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
        .                       return Err(fallibility.capacity_overflow());
        .                   }
        .           
   31,530 ( 0.01%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
        .                       Ok(block) => block.cast(),
        .                       Err(_) => return Err(fallibility.alloc_err(layout)),
        .                   };
        .           
        .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   76,974 ( 0.01%)          Ok(Self {
        .                       ctrl,
   32,149 ( 0.01%)              bucket_mask: buckets - 1,
        .                       items: 0,
        .                       growth_left: bucket_mask_to_capacity(buckets - 1),
        .                       alloc,
        .                   })
  100,356 ( 0.02%)      }
        .           
        .               #[inline]
   13,527 ( 0.00%)      fn fallible_with_capacity(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
    3,474 ( 0.00%)          if capacity == 0 {
    2,843 ( 0.00%)              Ok(Self::new_in(alloc))
        .                   } else {
        .                       unsafe {
        .                           let buckets =
        .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
        .           
   62,801 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
        .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
        .           
    6,863 ( 0.00%)                  Ok(result)
        .                       }
        .                   }
   13,527 ( 0.00%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element and sets the hash for that slot.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
   47,133 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
        .                   let index = self.find_insert_slot(hash);
   47,133 ( 0.01%)          let old_ctrl = *self.ctrl(index);
        .                   self.set_ctrl_h2(index, hash);
        .                   (index, old_ctrl)
   94,266 ( 0.02%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
        .               fn find_insert_slot(&self, hash: u64) -> usize {
        .                   let mut probe_seq = self.probe_seq(hash);
        .                   loop {
        .                       unsafe {
        .                           let group = Group::load(self.ctrl(probe_seq.pos));
  533,661 ( 0.10%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
1,533,784 ( 0.27%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
        .           
        .                               // In tables smaller than the group width, trailing control
        .                               // bytes outside the range of the table are filled with
        .                               // EMPTY entries. These will unfortunately trigger a
        .                               // match, but once masked may point to a full bucket that
        .                               // is already occupied. We detect this situation here and
        .                               // perform a second scan starting at the beginning of the
        .                               // table. This second scan is guaranteed to find an empty
        .                               // slot (due to the load factor) before hitting the trailing
        .                               // control bytes (containing EMPTY).
  714,219 ( 0.13%)                      if unlikely(is_full(*self.ctrl(result))) {
        .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
        .                                   debug_assert_ne!(probe_seq.pos, 0);
        .                                   return Group::load_aligned(self.ctrl(0))
        .                                       .match_empty_or_deleted()
        .                                       .lowest_set_bit_nonzero();
        .                               }
        .           
        .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
        .           
        .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
        .               /// code generated, but it is eliminated by LLVM optimizations.
        .               #[inline]
        .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
        .                   let h2_hash = h2(hash);
        .                   let mut probe_seq = self.probe_seq(hash);
        .           
   17,668 ( 0.00%)          loop {
        .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
        .           
1,038,536 ( 0.19%)              for bit in group.match_byte(h2_hash) {
1,717,187 ( 0.31%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
        .           
1,124,567 ( 0.20%)                  if likely(eq(index)) {
        .                               return Some(index);
        .                           }
        .                       }
        .           
  432,885 ( 0.08%)              if likely(group.match_empty().any_bit_set()) {
        .                           return None;
        .                       }
        .           
        .                       probe_seq.move_next(self.bucket_mask);
        .                   }
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
        .               #[inline]
        .               unsafe fn prepare_rehash_in_place(&mut self) {
        .                   // Bulk convert all full control bytes to DELETED, and all DELETED
        .                   // control bytes to EMPTY. This effectively frees up all buckets
        .                   // containing a DELETED entry.
        3 ( 0.00%)          for i in (0..self.buckets()).step_by(Group::WIDTH) {
        .                       let group = Group::load_aligned(self.ctrl(i));
        .                       let group = group.convert_special_to_empty_and_full_to_deleted();
        .                       group.store_aligned(self.ctrl(i));
        .                   }
        .           
        .                   // Fix up the trailing control bytes. See the comments in set_ctrl
        .                   // for the handling of tables smaller than the group width.
        3 ( 0.00%)          if self.buckets() < Group::WIDTH {
        .                       self.ctrl(0)
        .                           .copy_to(self.ctrl(Group::WIDTH), self.buckets());
        .                   } else {
        .                       self.ctrl(0)
        .                           .copy_to(self.ctrl(self.buckets()), Group::WIDTH);
        .                   }
        .               }
        .           
-- line 1220 ----------------------------------------
-- line 1225 ----------------------------------------
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               #[inline]
        .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
        .                   debug_assert_ne!(self.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   let base: *mut u8 = self.data_end().as_ptr();
1,989,712 ( 0.36%)          base.sub((index + 1) * size_of)
        .               }
        .           
        .               #[inline]
        .               unsafe fn data_end<T>(&self) -> NonNull<T> {
        .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
        .               }
        .           
        .               /// Returns an iterator-like object for a probe sequence on the table.
        .               ///
        .               /// This iterator never terminates, but is guaranteed to visit each bucket
        .               /// group exactly once. The loop using `probe_seq` must terminate upon
        .               /// reaching a group containing an empty bucket.
        .               #[inline]
        .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
        .                   ProbeSeq {
6,857,533 ( 1.23%)              pos: h1(hash) & self.bucket_mask,
        .                       stride: 0,
        .                   }
        .               }
        .           
        .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
        .               /// in the table, otherwise returns error
        .               #[cfg(feature = "raw")]
        .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
        .                   } else {
        .                       self.record_item_insert_at(index, old_ctrl, hash);
        .                       Ok(index)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
1,015,455 ( 0.18%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
        .                   self.set_ctrl_h2(index, hash);
  812,364 ( 0.15%)          self.items += 1;
        .               }
        .           
        .               #[inline]
        .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
        .                   let probe_seq_pos = self.probe_seq(hash).pos;
        .                   let probe_index =
        .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
       36 ( 0.00%)          probe_index(i) == probe_index(new_i)
        .               }
        .           
        .               /// Sets a control byte to the hash, and possibly also the replicated control byte at
        .               /// the end of the array.
        .               #[inline]
        .               unsafe fn set_ctrl_h2(&self, index: usize, hash: u64) {
        .                   self.set_ctrl(index, h2(hash));
        .               }
-- line 1289 ----------------------------------------
-- line 1312 ----------------------------------------
        .                   // replicate the buckets at the end of the trailing group. For example
        .                   // with 2 buckets and a group size of 4, the control bytes will look
        .                   // like this:
        .                   //
        .                   //     Real    |             Replicated
        .                   // ---------------------------------------------
        .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
        .                   // ---------------------------------------------
1,497,780 ( 0.27%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
        .           
  499,260 ( 0.09%)          *self.ctrl(index) = ctrl;
  499,501 ( 0.09%)          *self.ctrl(index2) = ctrl;
        .               }
        .           
        .               /// Returns a pointer to a control byte.
        .               #[inline]
        .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
        .                   debug_assert!(index < self.num_ctrl_bytes());
        .                   self.ctrl.as_ptr().add(index)
        .               }
        .           
        .               #[inline]
        .               fn buckets(&self) -> usize {
   92,089 ( 0.02%)          self.bucket_mask + 1
        .               }
        .           
        .               #[inline]
        .               fn num_ctrl_bytes(&self) -> usize {
   75,376 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
        .               }
        .           
        .               #[inline]
        .               fn is_empty_singleton(&self) -> bool {
  498,228 ( 0.09%)          self.bucket_mask == 0
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
        .               #[inline]
        .               unsafe fn prepare_resize(
        .                   &self,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
        .                   debug_assert!(self.items <= capacity);
        .           
        .                   // Allocate and initialize the new table.
      915 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
        .                       self.alloc.clone(),
        .                       table_layout,
        .                       capacity,
        .                       fallibility,
        .                   )?;
   41,403 ( 0.01%)          new_table.growth_left -= self.items;
        .                   new_table.items = self.items;
        .           
        .                   // The hash function may panic, in which case we simply free the new
        .                   // table without dropping any elements that may have been copied into
        .                   // it.
        .                   //
        .                   // This guard is also used to free the old table on success, see
        .                   // the comment at the bottom of this function.
        .                   Ok(guard(new_table, move |self_| {
   18,460 ( 0.00%)              if !self_.is_empty_singleton() {
        .                           self_.free_buckets(table_layout);
        .                       }
        .                   }))
        .               }
        .           
        .               /// Reserves or rehashes to make room for `additional` more elements.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .                   drop: Option<fn(*mut u8)>,
        .               ) -> Result<(), TryReserveError> {
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
   36,924 ( 0.01%)          let new_items = match self.items.checked_add(additional) {
        .                       Some(new_items) => new_items,
        .                       None => return Err(fallibility.capacity_overflow()),
        .                   };
   36,922 ( 0.01%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   79,475 ( 0.01%)          if new_items <= full_capacity / 2 {
        .                       // Rehash in-place without re-allocating if we have plenty of spare
        .                       // capacity that is locked up due to DELETED entries.
        .                       self.rehash_in_place(hasher, layout.size, drop);
        2 ( 0.00%)              Ok(())
        .                   } else {
        .                       // Otherwise, conservatively resize to at least the next size up
        .                       // to avoid churning deletes into frequent rehashes.
        .                       self.resize_inner(
   18,460 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
        .                           hasher,
        .                           fallibility,
        .                           layout,
        .                       )
        .                   }
        .               }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
        .               #[inline(always)]
        .               unsafe fn resize_inner(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .               ) -> Result<(), TryReserveError> {
    2,262 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
        .           
        .                   // Copy all elements to the new table.
        .                   for i in 0..self.buckets() {
  298,598 ( 0.05%)              if !is_full(*self.ctrl(i)) {
        .                           continue;
        .                       }
        .           
        .                       // This may panic.
        .                       let hash = hasher(self, i);
        .           
        .                       // We can use a simpler version of insert() here since:
        .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
        .                   }
        .           
        .                   // We successfully copied all elements without panicking. Now replace
        .                   // self with the new table. The old table will have its memory freed but
        .                   // the items will not be dropped (since they have been moved into the
        .                   // new table).
        .                   mem::swap(self, &mut new_table);
        .           
   18,460 ( 0.00%)          Ok(())
        .               }
        .           
        .               /// Rehashes the contents of the table in place (i.e. without changing the
        .               /// allocation).
        .               ///
        .               /// If `hasher` panics then some the table's contents may be lost.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1496 ----------------------------------------
        .                       }
        .                       self_.growth_left = bucket_mask_to_capacity(self_.bucket_mask) - self_.items;
        .                   });
        .           
        .                   // At this point, DELETED elements are elements that we haven't
        .                   // rehashed yet. Find them and re-insert them at their ideal
        .                   // position.
        .                   'outer: for i in 0..guard.buckets() {
       64 ( 0.00%)              if *guard.ctrl(i) != DELETED {
        .                           continue;
        .                       }
        .           
        .                       let i_p = guard.bucket_ptr(i, size_of);
        .           
        .                       'inner: loop {
        .                           // Hash the current item
        .                           let hash = hasher(*guard, i);
-- line 1512 ----------------------------------------
-- line 1515 ----------------------------------------
        .                           let new_i = guard.find_insert_slot(hash);
        .                           let new_i_p = guard.bucket_ptr(new_i, size_of);
        .           
        .                           // Probing works by scanning through all of the control
        .                           // bytes in groups, which may not be aligned to the group
        .                           // size. If both the new and old position fall within the
        .                           // same unaligned group, then there is no benefit in moving
        .                           // it and we can just continue to the next item.
       12 ( 0.00%)                  if likely(guard.is_in_same_group(i, new_i, hash)) {
        .                               guard.set_ctrl_h2(i, hash);
        .                               continue 'outer;
        .                           }
        .           
        .                           // We are moving the current item to a new position. Write
        .                           // our H2 to the control byte of the new position.
        .                           let prev_ctrl = guard.replace_ctrl_h2(new_i, hash);
        .                           if prev_ctrl == EMPTY {
-- line 1531 ----------------------------------------
-- line 1541 ----------------------------------------
        .                               // swapped into the old slot.
        .                               debug_assert_eq!(prev_ctrl, DELETED);
        .                               ptr::swap_nonoverlapping(i_p, new_i_p, size_of);
        .                               continue 'inner;
        .                           }
        .                       }
        .                   }
        .           
        3 ( 0.00%)          guard.growth_left = bucket_mask_to_capacity(guard.bucket_mask) - guard.items;
        .           
        .                   mem::forget(guard);
        .               }
        .           
        .               #[inline]
        .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
        .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
        .                       Some(lco) => lco,
        .                       None => hint::unreachable_unchecked(),
        .                   };
        .                   self.alloc.deallocate(
   12,894 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
        .                       layout,
        .                   );
        .               }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[inline]
        .               fn clear_no_drop(&mut self) {
    1,693 ( 0.00%)          if !self.is_empty_singleton() {
        .                       unsafe {
        .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
        .                       }
        .                   }
    2,066 ( 0.00%)          self.items = 0;
    1,693 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
        .               }
        .           
        .               #[inline]
        .               unsafe fn erase(&mut self, index: usize) {
        .                   debug_assert!(is_full(*self.ctrl(index)));
   41,517 ( 0.01%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
        .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
        .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
        .           
        .                   // If we are inside a continuous block of Group::WIDTH full or deleted
        .                   // cells then a probe window may have seen a full block when trying to
        .                   // insert. We therefore need to keep that block non-empty so that
        .                   // lookups will continue searching to the next probe window.
        .                   //
        .                   // Note that in this context `leading_zeros` refers to the bytes at the
        .                   // end of a group, while `trailing_zeros` refers to the bytes at the
        .                   // beginning of a group.
  166,068 ( 0.03%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
        .                       DELETED
        .                   } else {
  206,280 ( 0.04%)              self.growth_left += 1;
        .                       EMPTY
        .                   };
        .                   self.set_ctrl(index, ctrl);
  166,068 ( 0.03%)          self.items -= 1;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
    1,248 ( 0.00%)      fn clone(&self) -> Self {
      179 ( 0.00%)          if self.table.is_empty_singleton() {
        .                       Self::new_in(self.table.alloc.clone())
        .                   } else {
        .                       unsafe {
        .                           let mut new_table = ManuallyDrop::new(
        .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
        .                               match Self::new_uninitialized(
        .                                   self.table.alloc.clone(),
        .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
        .                               // We need to free the memory allocated for the new table.
        .                               new_table.free_buckets();
        .                           });
        .           
        .                           // Return the newly created table.
        .                           ManuallyDrop::into_inner(new_table)
        .                       }
        .                   }
    1,404 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   if source.table.is_empty_singleton() {
        .                       *self = Self::new_in(self.table.alloc.clone());
        .                   } else {
        .                       unsafe {
        .                           // First, drop all our elements without clearing the control bytes.
        .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
        .                       .table
        .                       .ctrl(0)
        .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
        .                   source
        .                       .data_start()
        .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
        .           
        .                   self.table.items = source.table.items;
       42 ( 0.00%)          self.table.growth_left = source.table.growth_left;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
        .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
        .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
        .               fn default() -> Self {
        .                   Self::new_in(Default::default())
        .               }
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
  212,669 ( 0.04%)      fn drop(&mut self) {
  222,624 ( 0.04%)          if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
        .                           self.free_buckets();
        .                       }
        .                   }
  228,534 ( 0.04%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
        .               type Item = T;
        .               type IntoIter = RawIntoIter<T, A>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    2,356 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
        .                   unsafe {
        .                       let iter = self.iter();
        .                       self.into_iter_from(iter)
        .                   }
    2,945 ( 0.00%)      }
        .           }
        .           
        .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
        .           /// not track an item count.
        .           pub(crate) struct RawIterRange<T> {
        .               // Mask of full buckets in the current group. Bits are cleared from this
        .               // mask as each element is processed.
        .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
        .           
        .           impl<T> Iterator for RawIterRange<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<Bucket<T>> {
        .                   unsafe {
        .                       loop {
   63,124 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    8,121 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
   12,755 ( 0.00%)                      return Some(self.data.next_n(index));
        .                           }
        .           
   58,365 ( 0.01%)                  if self.next_ctrl >= self.end {
        .                               return None;
        .                           }
        .           
        .                           // We might read past self.end up to the next group boundary,
        .                           // but this is fine because it only occurs on tables smaller
        .                           // than the group size where the trailing control bytes are all
        .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
        .                           // to the group size (since tables are power-of-two sized).
    1,738 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
    1,080 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    3,789 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
        .                       }
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // We don't have an item count, so just guess based on the range size.
        .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
        .                           }
        .                       } else {
        .                           // We must have already iterated past the removed item.
        .                       }
        .                   }
        .               }
        .           
        .               unsafe fn drop_elements(&mut self) {
      630 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
        .                       for item in self {
        .                           item.drop();
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Iterator for RawIter<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
   10,068 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
   20,542 ( 0.00%)          if let Some(b) = self.iter.next() {
   75,713 ( 0.01%)              self.items -= 1;
        .                       Some(b)
        .                   } else {
        .                       // We don't check against items == 0 here to allow the
        .                       // compiler to optimize away the item count entirely if the
        .                       // iterator length is never queried.
        .                       debug_assert_eq!(self.items, 0);
        .                       None
        .                   }
   20,136 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.items, Some(self.items))
        .               }
        .           }
        .           
        .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
    1,118 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
        .           
        .                       // Free the table
    4,202 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
        .                           self.alloc.deallocate(ptr, layout);
        .                       }
        .                   }
      214 ( 0.00%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
      147 ( 0.00%)      fn next(&mut self) -> Option<T> {
       72 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
      294 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        4 ( 0.00%)          self.iter.size_hint()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
        .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
        .           
        .           /// Iterator which consumes elements without freeing the table storage.
        .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
        .           where
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
      360 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements. Note that this may panic.
        .                       self.iter.drop_elements();
        .           
        .                       // Reset the contents of the table now that all elements have been
        .                       // dropped.
        .                       self.table.clear_no_drop();
        .           
        .                       // Move the now empty table back to its original location.
       45 ( 0.00%)              self.orig_table
        .                           .as_ptr()
        .                           .copy_from_nonoverlapping(&*self.table, 1);
        .                   }
      360 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<T> {
        .                   unsafe {
-- line 2289 ----------------------------------------

3,756,657 ( 0.67%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs
--------------------------------------------------------------------------------
Ir               

-- line 32 ----------------------------------------
      .           ///
      .           /// If the syntax extension is an MBE macro, it will attempt to match its
      .           /// LHS token tree against the provided token tree, and if it finds a
      .           /// match, will transcribe the RHS token tree, splicing in any captured
      .           /// `macro_parser::matched_nonterminals` into the `SubstNt`s it finds.
      .           ///
      .           /// The RHS of an MBE macro is the only place `SubstNt`s are substituted.
      .           /// Nothing special happens to misnamed or misplaced `SubstNt`s.
276,949 ( 0.05%)  #[derive(Debug, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub enum TokenTree {
      .               /// A single token.
 65,516 ( 0.01%)      Token(Token),
      .               /// A delimited sequence of token trees.
  6,562 ( 0.00%)      Delimited(DelimSpan, DelimToken, TokenStream),
      .           }
      .           
      .           #[derive(Copy, Clone)]
      .           pub enum CanSynthesizeMissingTokens {
      .               Yes,
      .               No,
      .           }
      .           
-- line 53 ----------------------------------------
-- line 71 ----------------------------------------
      .                           delim == delim2 && tts.eq_unspanned(&tts2)
      .                       }
      .                       _ => false,
      .                   }
      .               }
      .           
      .               /// Retrieves the `TokenTree`'s span.
      .               pub fn span(&self) -> Span {
    670 ( 0.00%)          match self {
    343 ( 0.00%)              TokenTree::Token(token) => token.span,
    324 ( 0.00%)              TokenTree::Delimited(sp, ..) => sp.entire(),
      .                   }
    255 ( 0.00%)      }
      .           
      .               /// Modify the `TokenTree`'s span in-place.
      .               pub fn set_span(&mut self, span: Span) {
    670 ( 0.00%)          match self {
    255 ( 0.00%)              TokenTree::Token(token) => token.span = span,
    160 ( 0.00%)              TokenTree::Delimited(dspan, ..) => *dspan = DelimSpan::from_single(span),
      .                   }
    335 ( 0.00%)      }
      .           
    652 ( 0.00%)      pub fn token(kind: TokenKind, span: Span) -> TokenTree {
 20,908 ( 0.00%)          TokenTree::Token(Token::new(kind, span))
    652 ( 0.00%)      }
      .           
      .               /// Returns the opening delimiter as a token tree.
  2,329 ( 0.00%)      pub fn open_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
  6,987 ( 0.00%)          TokenTree::token(token::OpenDelim(delim), span.open)
  2,329 ( 0.00%)      }
      .           
      .               /// Returns the closing delimiter as a token tree.
  2,246 ( 0.00%)      pub fn close_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
  6,738 ( 0.00%)          TokenTree::token(token::CloseDelim(delim), span.close)
  2,246 ( 0.00%)      }
      .           
    555 ( 0.00%)      pub fn uninterpolate(self) -> TokenTree {
    370 ( 0.00%)          match self {
  1,665 ( 0.00%)              TokenTree::Token(token) => TokenTree::Token(token.uninterpolate().into_owned()),
      .                       tt => tt,
      .                   }
    740 ( 0.00%)      }
      .           }
      .           
      .           impl<CTX> HashStable<CTX> for TokenStream
      .           where
      .               CTX: crate::HashStableContext,
      .           {
    585 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
  1,952 ( 0.00%)          for sub_tt in self.trees() {
      .                       sub_tt.hash_stable(hcx, hasher);
      .                   }
    520 ( 0.00%)      }
      .           }
      .           
      .           pub trait CreateTokenStream: sync::Send + sync::Sync {
      .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream;
      .           }
      .           
      .           impl CreateTokenStream for AttrAnnotatedTokenStream {
      .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
-- line 131 ----------------------------------------
-- line 135 ----------------------------------------
      .           
      .           /// A lazy version of [`TokenStream`], which defers creation
      .           /// of an actual `TokenStream` until it is needed.
      .           /// `Box` is here only to reduce the structure size.
      .           #[derive(Clone)]
      .           pub struct LazyTokenStream(Lrc<Box<dyn CreateTokenStream>>);
      .           
      .           impl LazyTokenStream {
    184 ( 0.00%)      pub fn new(inner: impl CreateTokenStream + 'static) -> LazyTokenStream {
      .                   LazyTokenStream(Lrc::new(Box::new(inner)))
    184 ( 0.00%)      }
      .           
      .               pub fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
      .                   self.0.create_token_stream()
      .               }
      .           }
      .           
      .           impl fmt::Debug for LazyTokenStream {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
-- line 153 ----------------------------------------
-- line 188 ----------------------------------------
      .               Delimited(DelimSpan, DelimToken, AttrAnnotatedTokenStream),
      .               /// Stores the attributes for an attribute target,
      .               /// along with the tokens for that attribute target.
      .               /// See `AttributesData` for more information
      .               Attributes(AttributesData),
      .           }
      .           
      .           impl AttrAnnotatedTokenStream {
  3,134 ( 0.00%)      pub fn new(tokens: Vec<(AttrAnnotatedTokenTree, Spacing)>) -> AttrAnnotatedTokenStream {
      .                   AttrAnnotatedTokenStream(Lrc::new(tokens))
  3,134 ( 0.00%)      }
      .           
      .               /// Converts this `AttrAnnotatedTokenStream` to a plain `TokenStream
      .               /// During conversion, `AttrAnnotatedTokenTree::Attributes` get 'flattened'
      .               /// back to a `TokenStream` of the form `outer_attr attr_target`.
      .               /// If there are inner attributes, they are inserted into the proper
      .               /// place in the attribute target tokens.
      .               pub fn to_tokenstream(&self) -> TokenStream {
      .                   let trees: Vec<_> = self
-- line 206 ----------------------------------------
-- line 316 ----------------------------------------
      .           pub struct TokenStream(pub(crate) Lrc<Vec<TreeAndSpacing>>);
      .           
      .           pub type TreeAndSpacing = (TokenTree, Spacing);
      .           
      .           // `TokenStream` is used a lot. Make sure it doesn't unintentionally get bigger.
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           rustc_data_structures::static_assert_size!(TokenStream, 8);
      .           
 24,496 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Encodable, Decodable)]
      .           pub enum Spacing {
      .               Alone,
      .               Joint,
      .           }
      .           
      .           impl TokenStream {
      .               /// Given a `TokenStream` with a `Stream` of only two arguments, return a new `TokenStream`
      .               /// separating the two arguments with a comma for diagnostic suggestions.
-- line 332 ----------------------------------------
-- line 371 ----------------------------------------
      .           impl From<(AttrAnnotatedTokenTree, Spacing)> for AttrAnnotatedTokenStream {
      .               fn from((tree, spacing): (AttrAnnotatedTokenTree, Spacing)) -> AttrAnnotatedTokenStream {
      .                   AttrAnnotatedTokenStream::new(vec![(tree, spacing)])
      .               }
      .           }
      .           
      .           impl From<TokenTree> for TokenStream {
      .               fn from(tree: TokenTree) -> TokenStream {
    680 ( 0.00%)          TokenStream::new(vec![(tree, Spacing::Alone)])
      .               }
      .           }
      .           
      .           impl From<TokenTree> for TreeAndSpacing {
      .               fn from(tree: TokenTree) -> TreeAndSpacing {
  9,192 ( 0.00%)          (tree, Spacing::Alone)
      .               }
      .           }
      .           
      .           impl iter::FromIterator<TokenTree> for TokenStream {
      .               fn from_iter<I: IntoIterator<Item = TokenTree>>(iter: I) -> Self {
      .                   TokenStream::new(iter.into_iter().map(Into::into).collect::<Vec<TreeAndSpacing>>())
      .               }
      .           }
-- line 393 ----------------------------------------
-- line 401 ----------------------------------------
      .           }
      .           
      .           impl TokenStream {
      .               pub fn new(streams: Vec<TreeAndSpacing>) -> TokenStream {
      .                   TokenStream(Lrc::new(streams))
      .               }
      .           
      .               pub fn is_empty(&self) -> bool {
    901 ( 0.00%)          self.0.is_empty()
    901 ( 0.00%)      }
      .           
      .               pub fn len(&self) -> usize {
 25,444 ( 0.00%)          self.0.len()
     44 ( 0.00%)      }
      .           
      .               pub fn from_streams(mut streams: SmallVec<[TokenStream; 2]>) -> TokenStream {
      .                   match streams.len() {
      .                       0 => TokenStream::default(),
      .                       1 => streams.pop().unwrap(),
      .                       _ => {
      .                           // We are going to extend the first stream in `streams` with
      .                           // the elements from the subsequent streams. This requires
-- line 422 ----------------------------------------
-- line 448 ----------------------------------------
      .           
      .                           // Create the final `TokenStream`.
      .                           TokenStream(first_stream_lrc)
      .                       }
      .                   }
      .               }
      .           
      .               pub fn trees(&self) -> Cursor {
    851 ( 0.00%)          self.clone().into_trees()
  1,702 ( 0.00%)      }
      .           
  2,792 ( 0.00%)      pub fn into_trees(self) -> Cursor {
      .                   Cursor::new(self)
  5,584 ( 0.00%)      }
      .           
      .               /// Compares two `TokenStream`s, checking equality without regarding span information.
      .               pub fn eq_unspanned(&self, other: &TokenStream) -> bool {
      .                   let mut t1 = self.trees();
      .                   let mut t2 = other.trees();
      .                   for (t1, t2) in iter::zip(&mut t1, &mut t2) {
      .                       if !t1.eq_unspanned(&t2) {
      .                           return false;
      .                       }
      .                   }
      .                   t1.next().is_none() && t2.next().is_none()
      .               }
      .           
      .               pub fn map_enumerated<F: FnMut(usize, &TokenTree) -> TokenTree>(self, mut f: F) -> TokenStream {
     36 ( 0.00%)          TokenStream(Lrc::new(
      .                       self.0
      .                           .iter()
      .                           .enumerate()
  2,010 ( 0.00%)                  .map(|(i, (tree, is_joint))| (f(i, tree), *is_joint))
      .                           .collect(),
      .                   ))
      .               }
      .           }
      .           
      .           // 99.5%+ of the time we have 1 or 2 elements in this vector.
      .           #[derive(Clone)]
      .           pub struct TokenStreamBuilder(SmallVec<[TokenStream; 2]>);
-- line 488 ----------------------------------------
-- line 572 ----------------------------------------
      .           pub struct Cursor {
      .               pub stream: TokenStream,
      .               index: usize,
      .           }
      .           
      .           impl Iterator for Cursor {
      .               type Item = TokenTree;
      .           
 15,306 ( 0.00%)      fn next(&mut self) -> Option<TokenTree> {
 27,427 ( 0.00%)          self.next_with_spacing().map(|(tree, _)| tree)
 20,408 ( 0.00%)      }
      .           }
      .           
      .           impl Cursor {
      .               fn new(stream: TokenStream) -> Self {
      .                   Cursor { stream, index: 0 }
      .               }
      .           
101,270 ( 0.02%)      pub fn next_with_spacing(&mut self) -> Option<TreeAndSpacing> {
 76,068 ( 0.01%)          if self.index < self.stream.len() {
 38,378 ( 0.01%)              self.index += 1;
106,120 ( 0.02%)              Some(self.stream.0[self.index - 1].clone())
      .                   } else {
 10,188 ( 0.00%)              None
      .                   }
121,524 ( 0.02%)      }
      .           
      .               pub fn index(&self) -> usize {
      .                   self.index
      .               }
      .           
      .               pub fn append(&mut self, new_stream: TokenStream) {
      .                   if new_stream.is_empty() {
      .                       return;
      .                   }
      .                   let index = self.index;
      .                   let stream = mem::take(&mut self.stream);
      .                   *self = TokenStream::from_streams(smallvec![stream, new_stream]).into_trees();
      .                   self.index = index;
      .               }
      .           
  9,787 ( 0.00%)      pub fn look_ahead(&self, n: usize) -> Option<&TokenTree> {
 19,574 ( 0.00%)          self.stream.0[self.index..].get(n).map(|(tree, _)| tree)
 19,574 ( 0.00%)      }
      .           }
      .           
 11,982 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub struct DelimSpan {
      .               pub open: Span,
      .               pub close: Span,
      .           }
      .           
      .           impl DelimSpan {
      .               pub fn from_single(sp: Span) -> Self {
      .                   DelimSpan { open: sp, close: sp }
      .               }
      .           
  1,798 ( 0.00%)      pub fn from_pair(open: Span, close: Span) -> Self {
      .                   DelimSpan { open, close }
    899 ( 0.00%)      }
      .           
      .               pub fn dummy() -> Self {
      .                   Self::from_single(DUMMY_SP)
    927 ( 0.00%)      }
      .           
  3,592 ( 0.00%)      pub fn entire(self) -> Span {
      .                   self.open.with_hi(self.close.hi())
  2,694 ( 0.00%)      }
      .           }

  7,900 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
    4,714 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
   83,771 ( 0.01%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
      210 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
      567 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
   74,176 ( 0.01%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
    1,033 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
       23 ( 0.00%)          self.position += bytes;
       23 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
      777 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
    2,917 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   55,735 ( 0.01%)      fn read_u32(&mut self) -> u32 {
  237,043 ( 0.04%)          read_leb128!(self, read_u32_leb128)
  111,470 ( 0.02%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  578,179 ( 0.10%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   82,597 ( 0.01%)          let value = u16::from_le_bytes(bytes);
  165,498 ( 0.03%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
2,071,233 ( 0.37%)          let value = self.data[self.position];
  416,779 ( 0.07%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
  262,382 ( 0.05%)      fn read_usize(&mut self) -> usize {
  262,652 ( 0.05%)          read_leb128!(self, read_usize_leb128)
  524,764 ( 0.09%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
   16,080 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
   42,615 ( 0.01%)          let len = self.read_usize();
  248,870 ( 0.04%)          let sentinel = self.data[self.position + len];
   62,420 ( 0.01%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
  156,050 ( 0.03%)          self.position += len + 1;
   35,025 ( 0.01%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
      139 ( 0.00%)          let start = self.position;
    2,332 ( 0.00%)          self.position += s.len();
      139 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  636,287 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 121 ----------------------------------------
      .           #[derive(Debug)]
      .           pub enum ProcessResult<O, E> {
      .               Unchanged,
      .               Changed(Vec<O>),
      .               Error(E),
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
  8,628 ( 0.00%)  struct ObligationTreeId(usize);
      .           
      .           type ObligationTreeIdGenerator =
      .               std::iter::Map<std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;
      .           
      .           pub struct ObligationForest<O: ForestObligation> {
      .               /// The list of obligations. In between calls to `process_obligations`,
      .               /// this list only contains nodes in the `Pending` or `Waiting` state.
      .               ///
-- line 137 ----------------------------------------
-- line 181 ----------------------------------------
      .               has_parent: bool,
      .           
      .               /// Identifier of the obligation tree to which this node belongs.
      .               obligation_tree_id: ObligationTreeId,
      .           }
      .           
      .           impl<O> Node<O> {
      .               fn new(parent: Option<usize>, obligation: O, obligation_tree_id: ObligationTreeId) -> Node<O> {
102,720 ( 0.02%)          Node {
      .                       obligation,
      .                       state: Cell::new(NodeState::Pending),
 12,738 ( 0.00%)              dependents: if let Some(parent_index) = parent { vec![parent_index] } else { vec![] },
      .                       has_parent: parent.is_some(),
      .                       obligation_tree_id,
      .                   }
      .               }
      .           }
      .           
      .           /// The state of one node in some tree within the forest. This represents the
      .           /// current state of processing for the obligation (of type `O`) associated
-- line 200 ----------------------------------------
-- line 223 ----------------------------------------
      .           ///  |     compress()
      .           ///  v
      .           /// (Removed)
      .           /// ```
      .           /// The `Error` state can be introduced in several places, via `error_at()`.
      .           ///
      .           /// Outside of `ObligationForest` methods, nodes should be either `Pending` or
      .           /// `Waiting`.
 69,389 ( 0.01%)  #[derive(Debug, Copy, Clone, PartialEq, Eq)]
      .           enum NodeState {
      .               /// This obligation has not yet been selected successfully. Cannot have
      .               /// subobligations.
      .               Pending,
      .           
      .               /// This obligation was selected successfully, but may or may not have
      .               /// subobligations.
      .               Success,
-- line 239 ----------------------------------------
-- line 279 ----------------------------------------
      .               pub stalled: bool,
      .           }
      .           
      .           impl<O, E> OutcomeTrait for Outcome<O, E> {
      .               type Error = Error<O, E>;
      .               type Obligation = O;
      .           
      .               fn new() -> Self {
 18,626 ( 0.00%)          Self { stalled: true, errors: vec![] }
      .               }
      .           
      .               fn mark_not_stalled(&mut self) {
  6,385 ( 0.00%)          self.stalled = false;
      .               }
      .           
      .               fn is_stalled(&self) -> bool {
  2,990 ( 0.00%)          self.stalled
      .               }
      .           
      .               fn record_completed(&mut self, _outcome: &Self::Obligation) {
      .                   // do nothing
      .               }
      .           
      .               fn record_error(&mut self, error: Self::Error) {
      .                   self.errors.push(error)
-- line 303 ----------------------------------------
-- line 306 ----------------------------------------
      .           
      .           #[derive(Debug, PartialEq, Eq)]
      .           pub struct Error<O, E> {
      .               pub error: E,
      .               pub backtrace: Vec<O>,
      .           }
      .           
      .           impl<O: ForestObligation> ObligationForest<O> {
  3,624 ( 0.00%)      pub fn new() -> ObligationForest<O> {
 43,488 ( 0.01%)          ObligationForest {
      .                       nodes: vec![],
      .                       done_cache: Default::default(),
      .                       active_cache: Default::default(),
      .                       reused_node_vec: vec![],
      .                       obligation_tree_id_generator: (0..).map(ObligationTreeId),
      .                       error_cache: Default::default(),
      .                   }
  3,624 ( 0.00%)      }
      .           
      .               /// Returns the total number of nodes in the forest that have not
      .               /// yet been fully resolved.
      .               pub fn len(&self) -> usize {
      .                   self.nodes.len()
      .               }
      .           
      .               /// Registers an obligation.
      .               pub fn register_obligation(&mut self, obligation: O) {
      .                   // Ignore errors here - there is no guarantee of success.
 74,880 ( 0.01%)          let _ = self.register_obligation_at(obligation, None);
      .               }
      .           
      .               // Returns Err(()) if we already know this obligation failed.
109,461 ( 0.02%)      fn register_obligation_at(&mut self, obligation: O, parent: Option<usize>) -> Result<(), ()> {
 19,902 ( 0.00%)          let cache_key = obligation.as_cache_key();
 19,902 ( 0.00%)          if self.done_cache.contains(&cache_key) {
      .                       debug!("register_obligation_at: ignoring already done obligation: {:?}", obligation);
      .                       return Ok(());
      .                   }
      .           
 46,332 ( 0.01%)          match self.active_cache.entry(cache_key) {
      .                       Entry::Occupied(o) => {
  2,604 ( 0.00%)                  let node = &mut self.nodes[*o.get()];
  2,604 ( 0.00%)                  if let Some(parent_index) = parent {
      .                               // If the node is already in `active_cache`, it has already
      .                               // had its chance to be marked with a parent. So if it's
      .                               // not already present, just dump `parent` into the
      .                               // dependents as a non-parent.
  2,484 ( 0.00%)                      if !node.dependents.contains(&parent_index) {
      .                                   node.dependents.push(parent_index);
      .                               }
      .                           }
  3,906 ( 0.00%)                  if let NodeState::Error = node.state.get() { Err(()) } else { Ok(()) }
      .                       }
 19,260 ( 0.00%)              Entry::Vacant(v) => {
 38,520 ( 0.01%)                  let obligation_tree_id = match parent {
  4,212 ( 0.00%)                      Some(parent_index) => self.nodes[parent_index].obligation_tree_id,
      .                               None => self.obligation_tree_id_generator.next().unwrap(),
      .                           };
      .           
      .                           let already_failed = parent.is_some()
      .                               && self
      .                                   .error_cache
      .                                   .get(&obligation_tree_id)
      .                                   .map_or(false, |errors| errors.contains(v.key()));
      .           
      .                           if already_failed {
      .                               Err(())
      .                           } else {
  6,420 ( 0.00%)                      let new_index = self.nodes.len();
      .                               v.insert(new_index);
      .                               self.nodes.push(Node::new(parent, obligation, obligation_tree_id));
      .                               Ok(())
      .                           }
      .                       }
      .                   }
 89,559 ( 0.02%)      }
      .           
      .               /// Converts all remaining obligations to the given error.
 33,054 ( 0.01%)      pub fn to_errors<E: Clone>(&mut self, error: E) -> Vec<Error<O, E>> {
      .                   let errors = self
      .                       .nodes
      .                       .iter()
      .                       .enumerate()
      .                       .filter(|(_index, node)| node.state.get() == NodeState::Pending)
      .                       .map(|(index, _node)| Error { error: error.clone(), backtrace: self.error_at(index) })
      .                       .collect();
      .           
  9,444 ( 0.00%)          self.compress(|_| assert!(false));
      .                   errors
 28,332 ( 0.01%)      }
      .           
      .               /// Returns the set of obligations that are in a pending state.
      .               pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>
      .               where
      .                   F: Fn(&O) -> P,
      .               {
     10 ( 0.00%)          self.nodes
      .                       .iter()
      .                       .filter(|node| node.state.get() == NodeState::Pending)
      .                       .map(|node| f(&node.obligation))
      .                       .collect()
      .               }
      .           
      .               fn insert_into_error_cache(&mut self, index: usize) {
      .                   let node = &self.nodes[index];
-- line 410 ----------------------------------------
-- line 414 ----------------------------------------
      .                       .insert(node.obligation.as_cache_key());
      .               }
      .           
      .               /// Performs a pass through the obligation list. This must
      .               /// be called in a loop until `outcome.stalled` is false.
      .               ///
      .               /// This _cannot_ be unrolled (presently, at least).
      .               #[inline(never)]
 83,817 ( 0.01%)      pub fn process_obligations<P, OUT>(&mut self, processor: &mut P) -> OUT
      .               where
      .                   P: ObligationProcessor<Obligation = O>,
      .                   OUT: OutcomeTrait<Obligation = O, Error = Error<O, P::Error>>,
      .               {
      .                   let mut outcome = OUT::new();
      .           
      .                   // Note that the loop body can append new nodes, and those new nodes
      .                   // will then be processed by subsequent iterations of the loop.
      .                   //
      .                   // We can't use an iterator for the loop because `self.nodes` is
      .                   // appended to and the borrow checker would complain. We also can't use
      .                   // `for index in 0..self.nodes.len() { ... }` because the range would
      .                   // be computed with the initial length, and we would miss the appended
      .                   // nodes. Therefore we use a `while` loop.
      .                   let mut index = 0;
 32,883 ( 0.01%)          while let Some(node) = self.nodes.get_mut(index) {
      .                       // `processor.process_obligation` can modify the predicate within
      .                       // `node.obligation`, and that predicate is the key used for
      .                       // `self.active_cache`. This means that `self.active_cache` can get
      .                       // out of sync with `nodes`. It's not very common, but it does
      .                       // happen, and code in `compress` has to allow for it.
 47,140 ( 0.01%)              if node.state.get() != NodeState::Pending {
  1,829 ( 0.00%)                  index += 1;
      .                           continue;
      .                       }
      .           
 36,965 ( 0.01%)              match processor.process_obligation(&mut node.obligation) {
      .                           ProcessResult::Unchanged => {
      .                               // No change in state.
      .                           }
 25,540 ( 0.00%)                  ProcessResult::Changed(children) => {
      .                               // We are not (yet) stalled.
      .                               outcome.mark_not_stalled();
      .                               node.state.set(NodeState::Success);
      .           
 33,922 ( 0.01%)                      for child in children {
 71,247 ( 0.01%)                          let st = self.register_obligation_at(child, Some(index));
  8,382 ( 0.00%)                          if let Err(()) = st {
      .                                       // Error already reported - propagate it
      .                                       // to our node.
      .                                       self.error_at(index);
      .                                   }
      .                               }
      .                           }
      .                           ProcessResult::Error(err) => {
      .                               outcome.mark_not_stalled();
      .                               outcome.record_error(Error { error: err, backtrace: self.error_at(index) });
      .                           }
      .                       }
 43,482 ( 0.01%)              index += 1;
      .                   }
      .           
      .                   // There's no need to perform marking, cycle processing and compression when nothing
      .                   // changed.
  2,990 ( 0.00%)          if !outcome.is_stalled() {
      .                       self.mark_successes();
      .                       self.process_cycles(processor);
  3,144 ( 0.00%)              self.compress(|obl| outcome.record_completed(obl));
      .                   }
      .           
      .                   outcome
 83,817 ( 0.01%)      }
      .           
      .               /// Returns a vector of obligations for `p` and all of its
      .               /// ancestors, putting them into the error state in the process.
      .               fn error_at(&self, mut index: usize) -> Vec<O> {
      .                   let mut error_stack: Vec<usize> = vec![];
      .                   let mut trace = vec![];
      .           
      .                   loop {
-- line 492 ----------------------------------------
-- line 516 ----------------------------------------
      .                   trace
      .               }
      .           
      .               /// Mark all `Waiting` nodes as `Success`, except those that depend on a
      .               /// pending node.
      .               fn mark_successes(&self) {
      .                   // Convert all `Waiting` nodes to `Success`.
      .                   for node in &self.nodes {
 31,418 ( 0.01%)              if node.state.get() == NodeState::Waiting {
      .                           node.state.set(NodeState::Success);
      .                       }
      .                   }
      .           
      .                   // Convert `Success` nodes that depend on a pending node back to
      .                   // `Waiting`.
      .                   for node in &self.nodes {
 11,883 ( 0.00%)              if node.state.get() == NodeState::Pending {
      .                           // This call site is hot.
      .                           self.inlined_mark_dependents_as_waiting(node);
      .                       }
      .                   }
      .               }
      .           
      .               // This always-inlined function is for the hot call site.
      .               #[inline(always)]
      .               fn inlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
  1,082 ( 0.00%)          for &index in node.dependents.iter() {
      .                       let node = &self.nodes[index];
  1,082 ( 0.00%)              let state = node.state.get();
  1,082 ( 0.00%)              if state == NodeState::Success {
      .                           // This call site is cold.
  1,776 ( 0.00%)                  self.uninlined_mark_dependents_as_waiting(node);
      .                       } else {
      .                           debug_assert!(state == NodeState::Waiting || state == NodeState::Error)
      .                       }
      .                   }
      .               }
      .           
      .               // This never-inlined function is for the cold call site.
      .               #[inline(never)]
  4,144 ( 0.00%)      fn uninlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
      .                   // Mark node Waiting in the cold uninlined code instead of the hot inlined
      .                   node.state.set(NodeState::Waiting);
      .                   self.inlined_mark_dependents_as_waiting(node)
  4,736 ( 0.00%)      }
      .           
      .               /// Report cycles between all `Success` nodes, and convert all `Success`
      .               /// nodes to `Done`. This must be called after `mark_successes`.
      .               fn process_cycles<P>(&mut self, processor: &mut P)
      .               where
      .                   P: ObligationProcessor<Obligation = O>,
      .               {
  1,572 ( 0.00%)          let mut stack = std::mem::take(&mut self.reused_node_vec);
      .                   for (index, node) in self.nodes.iter().enumerate() {
      .                       // For some benchmarks this state test is extremely hot. It's a win
      .                       // to handle the no-op cases immediately to avoid the cost of the
      .                       // function call.
 11,883 ( 0.00%)              if node.state.get() == NodeState::Success {
 31,360 ( 0.01%)                  self.find_cycles_from_node(&mut stack, processor, index);
      .                       }
      .                   }
      .           
      .                   debug_assert!(stack.is_empty());
 12,576 ( 0.00%)          self.reused_node_vec = stack;
      .               }
      .           
 80,523 ( 0.01%)      fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)
      .               where
      .                   P: ObligationProcessor<Obligation = O>,
      .               {
      .                   let node = &self.nodes[index];
 17,894 ( 0.00%)          if node.state.get() == NodeState::Success {
    226 ( 0.00%)              match stack.iter().rposition(|&n| n == index) {
      .                           None => {
      .                               stack.push(index);
  2,675 ( 0.00%)                      for &dep_index in node.dependents.iter() {
 10,700 ( 0.00%)                          self.find_cycles_from_node(stack, processor, dep_index);
      .                               }
      .                               stack.pop();
      .                               node.state.set(NodeState::Done);
      .                           }
      .                           Some(rpos) => {
      .                               // Cycle detected.
      .                               processor.process_backedge(
      .                                   stack[rpos..].iter().map(|&i| &self.nodes[i].obligation),
      .                                   PhantomData,
      .                               );
      .                           }
      .                       }
      .                   }
 71,576 ( 0.01%)      }
      .           
      .               /// Compresses the vector, removing all popped nodes. This adjusts the
      .               /// indices and hence invalidates any outstanding indices. `process_cycles`
      .               /// must be run beforehand to remove any cycles on `Success` nodes.
      .               #[inline(never)]
 45,630 ( 0.01%)      fn compress(&mut self, mut outcome_cb: impl FnMut(&O)) {
  6,294 ( 0.00%)          let orig_nodes_len = self.nodes.len();
      .                   let mut node_rewrites: Vec<_> = std::mem::take(&mut self.reused_node_vec);
      .                   debug_assert!(node_rewrites.is_empty());
      .                   node_rewrites.extend(0..orig_nodes_len);
      .                   let mut dead_nodes = 0;
      .           
      .                   // Move removable nodes to the end, preserving the order of the
      .                   // remaining nodes.
      .                   //
      .                   // LOOP INVARIANT:
      .                   //     self.nodes[0..index - dead_nodes] are the first remaining nodes
      .                   //     self.nodes[index - dead_nodes..index] are all dead
      .                   //     self.nodes[index..] are unchanged
      .                   for index in 0..orig_nodes_len {
      .                       let node = &self.nodes[index];
 65,703 ( 0.01%)              match node.state.get() {
      .                           NodeState::Pending | NodeState::Waiting => {
 10,996 ( 0.00%)                      if dead_nodes > 0 {
  5,634 ( 0.00%)                          self.nodes.swap(index, index - dead_nodes);
  9,390 ( 0.00%)                          node_rewrites[index] -= dead_nodes;
      .                               }
      .                           }
      .                           NodeState::Done => {
      .                               // This lookup can fail because the contents of
      .                               // `self.active_cache` are not guaranteed to match those of
      .                               // `self.nodes`. See the comment in `process_obligation`
      .                               // for more details.
 23,565 ( 0.00%)                      if let Some((predicate, _)) =
 19,155 ( 0.00%)                          self.active_cache.remove_entry(&node.obligation.as_cache_key())
      .                               {
      .                                   self.done_cache.insert(predicate);
      .                               } else {
      .                                   self.done_cache.insert(node.obligation.as_cache_key().clone());
      .                               }
      .                               // Extract the success stories.
      .                               outcome_cb(&node.obligation);
 12,770 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
 12,770 ( 0.00%)                      dead_nodes += 1;
      .                           }
      .                           NodeState::Error => {
      .                               // We *intentionally* remove the node from the cache at this point. Otherwise
      .                               // tests must come up with a different type on every type error they
      .                               // check against.
      .                               self.active_cache.remove(&node.obligation.as_cache_key());
      .                               self.insert_into_error_cache(index);
      .                               node_rewrites[index] = orig_nodes_len;
-- line 658 ----------------------------------------
-- line 659 ----------------------------------------
      .                               dead_nodes += 1;
      .                           }
      .                           NodeState::Success => unreachable!(),
      .                       }
      .                   }
      .           
      .                   if dead_nodes > 0 {
      .                       // Remove the dead nodes and rewrite indices.
  3,012 ( 0.00%)              self.nodes.truncate(orig_nodes_len - dead_nodes);
  1,506 ( 0.00%)              self.apply_rewrites(&node_rewrites);
      .                   }
      .           
      .                   node_rewrites.truncate(0);
 25,176 ( 0.00%)          self.reused_node_vec = node_rewrites;
 50,352 ( 0.01%)      }
      .           
      .               #[inline(never)]
 13,554 ( 0.00%)      fn apply_rewrites(&mut self, node_rewrites: &[usize]) {
      .                   let orig_nodes_len = node_rewrites.len();
      .           
      .                   for node in &mut self.nodes {
      .                       let mut i = 0;
  5,480 ( 0.00%)              while let Some(dependent) = node.dependents.get_mut(i) {
  3,440 ( 0.00%)                  let new_index = node_rewrites[*dependent];
  1,720 ( 0.00%)                  if new_index >= orig_nodes_len {
      .                               node.dependents.swap_remove(i);
      .                               if i == 0 && node.has_parent {
      .                                   // We just removed the parent.
      .                                   node.has_parent = false;
      .                               }
      .                           } else {
    860 ( 0.00%)                      *dependent = new_index;
  1,720 ( 0.00%)                      i += 1;
      .                           }
      .                       }
      .                   }
      .           
      .                   // This updating of `self.active_cache` is necessary because the
      .                   // removal of nodes within `compress` can fail. See above.
      .                   self.active_cache.retain(|_predicate, index| {
 26,380 ( 0.00%)              let new_index = node_rewrites[*index];
 13,190 ( 0.00%)              if new_index >= orig_nodes_len {
      .                           false
      .                       } else {
  4,620 ( 0.00%)                  *index = new_index;
      .                           true
      .                       }
      .                   });
 12,048 ( 0.00%)      }
      .           }

167,059 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir               

-- line 91 ----------------------------------------
      .           // maximum of number bytes needed to fill an 8-byte-sized element on which
      .           // SipHash operates. Note that for variable-sized copies which are known to be
      .           // less than 8 bytes, this function will perform more work than necessary unless
      .           // the compiler is able to optimize the extra work away.
      .           #[inline]
      .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
      .               debug_assert!(count <= 8);
      .           
 14,177 ( 0.00%)      if count == 8 {
      .                   ptr::copy_nonoverlapping(src, dst, 8);
      .                   return;
      .               }
      .           
      .               let mut i = 0;
 20,210 ( 0.00%)      if i + 3 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
      .                   i += 4;
      .               }
      .           
 43,292 ( 0.01%)      if i + 1 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
  5,972 ( 0.00%)          i += 2
      .               }
      .           
 20,210 ( 0.00%)      if i < count {
 12,377 ( 0.00%)          *dst.add(i) = *src.add(i);
      .                   i += 1;
      .               }
      .           
      .               debug_assert_eq!(i, count);
      .           }
      .           
      .           // # Implementation
      .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
      .           
      .                   hasher
      .               }
      .           
      .               // A specialized write function for values with size <= 8.
      .               #[inline]
      .               fn short_write<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
113,962 ( 0.02%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
755,301 ( 0.14%)          if nbuf + size < BUFFER_SIZE {
      .                       unsafe {
      .                           // The memcpy call is optimized away because the size is known.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .                       }
      .           
236,658 ( 0.04%)              self.nbuf = nbuf + size;
      .           
      .                       return;
      .                   }
      .           
 35,664 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
      .               }
      .           
      .               // A specialized write function for values with size <= 8 that should only
      .               // be called when the write would cause the buffer to fill.
      .               //
      .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
      .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
      .               // overflow) if it wasn't already.
      .               #[inline(never)]
 11,006 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
 11,006 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
      .                   // Copy first part of input into end of buffer, possibly into spill
      .                   // element. The memcpy call is optimized away because the size is known.
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .           
      .                   // Process buffer.
      .                   for i in 0..BUFFER_CAPACITY {
110,060 ( 0.02%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 88,048 ( 0.02%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
 99,054 ( 0.02%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer by copying size - 1
      .                   // elements from spill (at most size - 1 bytes could have overflowed
      .                   // into the spill). The memcpy call is optimized away because the size
      .                   // is known. And the whole copy is optimized away for size == 1.
      .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
      .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
      .           
      .                   // This function should only be called when the write fills the buffer.
      .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
      .                   // is statically known, so the branch is optimized away.
 51,306 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
 44,024 ( 0.01%)          self.processed += BUFFER_SIZE;
 22,012 ( 0.00%)      }
      .           
      .               // A write function for byte slices.
      .               #[inline]
      .               fn slice_write(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
  7,407 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .           
 57,022 ( 0.01%)          if nbuf + length < BUFFER_SIZE {
      .                       unsafe {
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .           
 20,672 ( 0.00%)                  if length <= 8 {
      .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
      .                           } else {
      .                               // This memcpy is *not* optimized away.
      .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
      .                           }
      .                       }
      .           
 10,608 ( 0.00%)              self.nbuf = nbuf + length;
      .           
      .                       return;
      .                   }
      .           
  5,589 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
      .               }
      .           
      .               // A write function for byte slices that should only be called when the
      .               // write would cause the buffer to fill.
      .               //
      .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
      .               // and `msg` must contain enough bytes to initialize the rest of the element
      .               // containing the byte offset `self.nbuf`.
      .               #[inline(never)]
  4,490 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
    898 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
      .           
      .                   // Always copy first part of input into current element of buffer.
      .                   // This function should only be called when the write fills the buffer,
      .                   // so we know that there is enough input to fill the current element.
  2,694 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    898 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
      .           
      .                   let src = msg.as_ptr();
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
      .           
      .                   // Process buffer.
      .           
      .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
      .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
      .                   // We know that is true, because last step ensured we have a full
      .                   // element in the buffer.
  1,796 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
      .           
      .                   for i in 0..last {
  6,871 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  7,769 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
 13,742 ( 0.00%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Process the remaining element-sized chunks of input.
      .                   let mut processed = needed_in_elem;
  1,796 ( 0.00%)          let input_left = length - processed;
    891 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
      .                   let extra_bytes_left = input_left % ELEM_SIZE;
      .           
      .                   for _ in 0..elems_left {
    467 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    467 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
    467 ( 0.00%)              self.state.v0 ^= elem;
    934 ( 0.00%)              processed += ELEM_SIZE;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer.
      .                   let src = msg.as_ptr().add(processed);
      .                   let dst = self.buf.as_mut_ptr() as *mut u8;
      .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
      .           
    898 ( 0.00%)          self.nbuf = extra_bytes_left;
  4,490 ( 0.00%)          self.processed += nbuf + processed;
  5,388 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn finish128(mut self) -> (u64, u64) {
      .                   debug_assert!(self.nbuf < BUFFER_SIZE);
      .           
      .                   // Process full elements in buffer.
  6,663 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
      .           
      .                   // Since we're consuming self, avoid updating members for a potential
      .                   // performance gain.
  8,884 ( 0.00%)          let mut state = self.state;
      .           
      .                   for i in 0..last {
  6,573 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
  6,573 ( 0.00%)              state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut state);
  6,573 ( 0.00%)              state.v0 ^= elem;
      .                   }
      .           
      .                   // Get remaining partial element.
  4,442 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
      .                       unsafe {
      .                           // Ensure element is initialized by writing zero bytes. At most
      .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
      .                           // to write this many because we have the spill and we maintain
      .                           // `self.nbuf` such that this write will start before the spill.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
      .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
  1,959 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
      .                       }
      .                   } else {
      .                       0
      .                   };
      .           
      .                   // Finalize the hash.
  6,401 ( 0.00%)          let length = self.processed + self.nbuf;
  4,440 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
      .           
  2,220 ( 0.00%)          state.v3 ^= b;
      .                   Sip24Rounds::c_rounds(&mut state);
  2,220 ( 0.00%)          state.v0 ^= b;
      .           
  2,220 ( 0.00%)          state.v2 ^= 0xee;
      .                   Sip24Rounds::d_rounds(&mut state);
  6,648 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
  2,206 ( 0.00%)          state.v1 ^= 0xdd;
      .                   Sip24Rounds::d_rounds(&mut state);
  2,206 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
      .                   (_0, _1)
      .               }
      .           }
      .           
      .           impl Hasher for SipHasher128 {
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
      .           }
      .           
      .           #[derive(Debug, Clone, Default)]
      .           struct Sip24Rounds;
      .           
      .           impl Sip24Rounds {
      .               #[inline]
      .               fn c_rounds(state: &mut State) {
430,416 ( 0.08%)          compress!(state);
470,347 ( 0.08%)          compress!(state);
      .               }
      .           
      .               #[inline]
      .               fn d_rounds(state: &mut State) {
 13,292 ( 0.00%)          compress!(state);
 13,292 ( 0.00%)          compress!(state);
 13,292 ( 0.00%)          compress!(state);
 11,073 ( 0.00%)          compress!(state);
      .               }
      .           }

 92,960 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/build_reduced_graph.rs
--------------------------------------------------------------------------------
Ir               

-- line 36 ----------------------------------------
      .           
      .           use std::cell::Cell;
      .           use std::ptr;
      .           use tracing::debug;
      .           
      .           type Res = def::Res<NodeId>;
      .           
      .           impl<'a> ToNameBinding<'a> for (Module<'a>, ty::Visibility, Span, LocalExpnId) {
     16 ( 0.00%)      fn to_name_binding(self, arenas: &'a ResolverArenas<'a>) -> &'a NameBinding<'a> {
      .                   arenas.alloc_name_binding(NameBinding {
      2 ( 0.00%)              kind: NameBindingKind::Module(self.0),
      .                       ambiguity: None,
      6 ( 0.00%)              vis: self.1,
      2 ( 0.00%)              span: self.2,
      2 ( 0.00%)              expansion: self.3,
      .                   })
     16 ( 0.00%)      }
      .           }
      .           
      .           impl<'a> ToNameBinding<'a> for (Res, ty::Visibility, Span, LocalExpnId) {
      .               fn to_name_binding(self, arenas: &'a ResolverArenas<'a>) -> &'a NameBinding<'a> {
 53,334 ( 0.01%)          arenas.alloc_name_binding(NameBinding {
 35,556 ( 0.01%)              kind: NameBindingKind::Res(self.0, false),
      .                       ambiguity: None,
      .                       vis: self.1,
      .                       span: self.2,
      .                       expansion: self.3,
      .                   })
      .               }
      .           }
      .           
-- line 66 ----------------------------------------
-- line 76 ----------------------------------------
      .                       expansion: self.3,
      .                   })
      .               }
      .           }
      .           
      .           impl<'a> Resolver<'a> {
      .               /// Defines `name` in namespace `ns` of module `parent` to be `def` if it is not yet defined;
      .               /// otherwise, reports an error.
112,706 ( 0.02%)      crate fn define<T>(&mut self, parent: Module<'a>, ident: Ident, ns: Namespace, def: T)
      .               where
      .                   T: ToNameBinding<'a>,
      .               {
 66,732 ( 0.01%)          let binding = def.to_name_binding(self.arenas);
      .                   let key = self.new_key(ident, ns);
103,796 ( 0.02%)          if let Err(old_binding) = self.try_define(parent, key, binding) {
      .                       self.report_conflict(parent, ident, ns, old_binding, &binding);
      .                   }
 75,136 ( 0.01%)      }
      .           
      .               /// Walks up the tree of definitions starting at `def_id`,
      .               /// stopping at the first encountered module.
      .               /// Parent block modules for arbitrary def-ids are not recorded for the local crate,
      .               /// and are not preserved in metadata for foreign crates, so block modules are never
      .               /// returned by this function.
      .               ///
      .               /// For the local crate ignoring block modules may be incorrect, so use this method with care.
-- line 101 ----------------------------------------
-- line 103 ----------------------------------------
      .               /// For foreign crates block modules can be ignored without introducing observable differences,
      .               /// moreover they has to be ignored right now because they are not kept in metadata.
      .               /// Foreign parent modules are used for resolving names used by foreign macros with def-site
      .               /// hygiene, therefore block module ignorability relies on macros with def-site hygiene and
      .               /// block module parents being unreachable from other crates.
      .               /// Reachable macros with block module parents exist due to `#[macro_export] macro_rules!`,
      .               /// but they cannot use def-site hygiene, so the assumption holds
      .               /// (<https://github.com/rust-lang/rust/pull/77984#issuecomment-712445508>).
 11,011 ( 0.00%)      pub fn get_nearest_non_block_module(&mut self, mut def_id: DefId) -> Module<'a> {
      .                   loop {
  7,139 ( 0.00%)              match self.get_module(def_id) {
      .                           Some(module) => return module,
      .                           None => {
      .                               def_id.index =
      .                                   self.def_key(def_id).parent.expect("non-root `DefId` without parent")
      .                           }
      .                       }
      .                   }
  6,776 ( 0.00%)      }
      .           
      2 ( 0.00%)      pub fn expect_module(&mut self, def_id: DefId) -> Module<'a> {
  2,012 ( 0.00%)          self.get_module(def_id).expect("argument `DefId` is not a module")
      4 ( 0.00%)      }
      .           
      .               /// If `def_id` refers to a module (in resolver's sense, i.e. a module item, crate root, enum,
      .               /// or trait), then this function returns that module's resolver representation, otherwise it
      .               /// returns `None`.
 21,470 ( 0.00%)      crate fn get_module(&mut self, def_id: DefId) -> Option<Module<'a>> {
      .                   if let module @ Some(..) = self.module_map.get(&def_id) {
      .                       return module.copied();
      .                   }
      .           
    871 ( 0.00%)          if !def_id.is_local() {
  5,154 ( 0.00%)              let def_kind = self.cstore().def_kind(def_id);
  1,718 ( 0.00%)              match def_kind {
      .                           DefKind::Mod | DefKind::Enum | DefKind::Trait => {
  2,376 ( 0.00%)                      let def_key = self.cstore().def_key(def_id);
      .                               let parent = def_key.parent.map(|index| {
  1,920 ( 0.00%)                          self.get_nearest_non_block_module(DefId { index, krate: def_id.krate })
      .                               });
    396 ( 0.00%)                      let name = if def_id.index == CRATE_DEF_INDEX {
     48 ( 0.00%)                          self.cstore().crate_name(def_id.krate)
      .                               } else {
  1,152 ( 0.00%)                          def_key.disambiguated_data.data.get_opt_name().expect("module without name")
      .                               };
      .           
  3,168 ( 0.00%)                      Some(self.new_module(
      .                                   parent,
      .                                   ModuleKind::Def(def_kind, def_id, name),
  2,772 ( 0.00%)                          self.cstore().module_expansion_untracked(def_id, &self.session),
  2,376 ( 0.00%)                          self.cstore().get_span_untracked(def_id, &self.session),
      .                                   // FIXME: Account for `#[no_implicit_prelude]` attributes.
  1,152 ( 0.00%)                          parent.map_or(false, |module| module.no_implicit_prelude),
      .                               ))
      .                           }
      .                           _ => None,
      .                       }
      .                   } else {
      .                       None
      .                   }
 17,176 ( 0.00%)      }
      .           
  3,510 ( 0.00%)      crate fn expn_def_scope(&mut self, expn_id: ExpnId) -> Module<'a> {
  1,170 ( 0.00%)          match expn_id.expn_data().macro_def_id {
  1,140 ( 0.00%)              Some(def_id) => self.macro_def_scope(def_id),
     10 ( 0.00%)              None => expn_id
      .                           .as_local()
      .                           .and_then(|expn_id| self.ast_transform_scopes.get(&expn_id))
     10 ( 0.00%)                  .unwrap_or(&self.graph_root),
      .                   }
  2,340 ( 0.00%)      }
      .           
    463 ( 0.00%)      crate fn macro_def_scope(&mut self, def_id: DefId) -> Module<'a> {
    463 ( 0.00%)          if let Some(id) = def_id.as_local() {
      .                       self.local_macro_def_scopes[&id]
      .                   } else {
    926 ( 0.00%)              self.get_nearest_non_block_module(def_id)
      .                   }
      .               }
      .           
      .               crate fn get_macro(&mut self, res: Res) -> Option<Lrc<SyntaxExtension>> {
    762 ( 0.00%)          match res {
    198 ( 0.00%)              Res::Def(DefKind::Macro(..), def_id) => Some(self.get_macro_by_def_id(def_id)),
      .                       Res::NonMacroAttr(_) => Some(self.non_macro_attr.clone()),
      .                       _ => None,
      .                   }
      .               }
      .           
    768 ( 0.00%)      crate fn get_macro_by_def_id(&mut self, def_id: DefId) -> Lrc<SyntaxExtension> {
      .                   if let Some(ext) = self.macro_map.get(&def_id) {
     84 ( 0.00%)              return ext.clone();
      .                   }
      .           
    108 ( 0.00%)          let ext = Lrc::new(match self.cstore().load_macro_untracked(def_id, &self.session) {
    132 ( 0.00%)              LoadedMacro::MacroDef(item, edition) => self.compile_macro(&item, edition),
      .                       LoadedMacro::ProcMacro(ext) => ext,
      .                   });
      .           
      .                   self.macro_map.insert(def_id, ext.clone());
      .                   ext
    672 ( 0.00%)      }
      .           
      .               crate fn build_reduced_graph(
      .                   &mut self,
      .                   fragment: &AstFragment,
      .                   parent_scope: ParentScope<'a>,
      .               ) -> MacroRulesScopeRef<'a> {
    336 ( 0.00%)          collect_definitions(self, fragment, parent_scope.expansion);
    588 ( 0.00%)          let mut visitor = BuildReducedGraphVisitor { r: self, parent_scope };
    168 ( 0.00%)          fragment.visit_with(&mut visitor);
     84 ( 0.00%)          visitor.parent_scope.macro_rules
      .               }
      .           
      .               crate fn build_reduced_graph_external(&mut self, module: Module<'a>) {
 75,064 ( 0.01%)          for child in self.cstore().module_children_untracked(module.def_id(), self.session) {
      .                       let parent_scope = ParentScope::module(module, self);
 93,160 ( 0.02%)              BuildReducedGraphVisitor { r: self, parent_scope }
 74,528 ( 0.01%)                  .build_reduced_graph_for_external_crate_res(child);
      .                   }
      .               }
      .           }
      .           
      .           struct BuildReducedGraphVisitor<'a, 'b> {
      .               r: &'b mut Resolver<'a>,
      .               parent_scope: ParentScope<'a>,
      .           }
      .           
      .           impl<'a> AsMut<Resolver<'a>> for BuildReducedGraphVisitor<'a, '_> {
      .               fn as_mut(&mut self) -> &mut Resolver<'a> {
      2 ( 0.00%)          self.r
      .               }
      .           }
      .           
      .           impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {
      .               fn resolve_visibility(&mut self, vis: &ast::Visibility) -> ty::Visibility {
    737 ( 0.00%)          self.resolve_visibility_speculative(vis, false).unwrap_or_else(|err| {
      .                       self.r.report_vis_error(err);
      .                       ty::Visibility::Public
      .                   })
      .               }
      .           
  1,740 ( 0.00%)      fn resolve_visibility_speculative<'ast>(
      .                   &mut self,
      .                   vis: &'ast ast::Visibility,
      .                   speculative: bool,
      .               ) -> Result<ty::Visibility, VisResolutionError<'ast>> {
    174 ( 0.00%)          let parent_scope = &self.parent_scope;
    870 ( 0.00%)          match vis.kind {
     68 ( 0.00%)              ast::VisibilityKind::Public => Ok(ty::Visibility::Public),
      .                       ast::VisibilityKind::Crate(..) => {
     51 ( 0.00%)                  Ok(ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)))
      .                       }
      .                       ast::VisibilityKind::Inherited => {
  1,286 ( 0.00%)                  Ok(match self.parent_scope.module.kind {
      .                               // Any inherited visibility resolved directly inside an enum or trait
      .                               // (i.e. variants, fields, and trait items) inherits from the visibility
      .                               // of the enum or trait.
      2 ( 0.00%)                      ModuleKind::Def(DefKind::Enum | DefKind::Trait, def_id, _) => {
      5 ( 0.00%)                          self.r.visibilities[&def_id.expect_local()]
      .                               }
      .                               // Otherwise, the visibility is restricted to the nearest parent `mod` item.
    244 ( 0.00%)                      _ => ty::Visibility::Restricted(self.parent_scope.module.nearest_parent_mod()),
      .                           })
      .                       }
      .                       ast::VisibilityKind::Restricted { ref path, id, .. } => {
      .                           // For visibilities we are not ready to provide correct implementation of "uniform
      .                           // paths" right now, so on 2018 edition we only allow module-relative paths for now.
      .                           // On 2015 edition visibilities are resolved as crate-relative by default,
      .                           // so we are prepending a root segment if necessary.
      .                           let ident = path.segments.get(0).expect("empty path in visibility").ident;
-- line 272 ----------------------------------------
-- line 326 ----------------------------------------
      .                               }
      .                               PathResult::Failed { span, label, suggestion, .. } => {
      .                                   Err(VisResolutionError::FailedToResolve(span, label, suggestion))
      .                               }
      .                               PathResult::Indeterminate => Err(VisResolutionError::Indeterminate(path.span)),
      .                           }
      .                       }
      .                   }
  1,392 ( 0.00%)      }
      .           
      .               fn insert_field_names_local(&mut self, def_id: DefId, vdata: &ast::VariantData) {
     14 ( 0.00%)          let field_names = vdata
      .                       .fields()
      .                       .iter()
     32 ( 0.00%)              .map(|field| respan(field.span, field.ident.map_or(kw::Empty, |ident| ident.name)))
      .                       .collect();
      .                   self.insert_field_names(def_id, field_names);
      .               }
      .           
      .               fn insert_field_names(&mut self, def_id: DefId, field_names: Vec<Spanned<Symbol>>) {
      .                   self.r.field_names.insert(def_id, field_names);
      .               }
      .           
      .               fn block_needs_anonymous_module(&mut self, block: &Block) -> bool {
      .                   // If any statements are items, we need to create an anonymous module
      .                   block
      .                       .stmts
      .                       .iter()
    550 ( 0.00%)              .any(|statement| matches!(statement.kind, StmtKind::Item(_) | StmtKind::MacCall(_)))
      .               }
      .           
      .               // Add an import to the current module.
    663 ( 0.00%)      fn add_import(
      .                   &mut self,
      .                   module_path: Vec<Segment>,
      .                   kind: ImportKind<'a>,
      .                   span: Span,
      .                   id: NodeId,
      .                   item: &ast::Item,
      .                   root_span: Span,
      .                   root_id: NodeId,
      .                   vis: ty::Visibility,
      .               ) {
    153 ( 0.00%)          let current_module = self.parent_scope.module;
  1,428 ( 0.00%)          let import = self.r.arenas.alloc_import(Import {
      .                       kind,
      .                       parent_scope: self.parent_scope,
    204 ( 0.00%)              module_path,
      .                       imported_module: Cell::new(None),
      .                       span,
      .                       id,
    102 ( 0.00%)              use_span: item.span,
    153 ( 0.00%)              use_span_with_attributes: item.span_with_attributes(),
      .                       has_attributes: !item.attrs.is_empty(),
      .                       root_span,
      .                       root_id,
      .                       vis: Cell::new(vis),
      .                       used: Cell::new(false),
      .                   });
      .           
      .                   self.r.indeterminate_imports.push(import);
    273 ( 0.00%)          match import.kind {
      .                       // Don't add unresolved underscore imports to modules
      .                       ImportKind::Single { target: Ident { name: kw::Underscore, .. }, .. } => {}
    294 ( 0.00%)              ImportKind::Single { target, type_ns_only, .. } => {
  1,176 ( 0.00%)                  self.r.per_ns(|this, ns| {
    378 ( 0.00%)                      if !type_ns_only || ns == TypeNS {
    378 ( 0.00%)                          let key = this.new_key(target, ns);
  1,008 ( 0.00%)                          let mut resolution = this.resolution(current_module, key).borrow_mut();
    126 ( 0.00%)                          resolution.add_single_import(import);
      .                               }
    630 ( 0.00%)                  });
      .                       }
      .                       // We don't add prelude imports to the globs since they only affect lexical scopes,
      .                       // which are not relevant to import resolution.
      .                       ImportKind::Glob { is_prelude: true, .. } => {}
      .                       ImportKind::Glob { .. } => current_module.globs.borrow_mut().push(import),
      .                       _ => unreachable!(),
      .                   }
    408 ( 0.00%)      }
      .           
    513 ( 0.00%)      fn build_reduced_graph_for_use_tree(
      .                   &mut self,
      .                   // This particular use tree
      .                   use_tree: &ast::UseTree,
      .                   id: NodeId,
      .                   parent_prefix: &[Segment],
      .                   nested: bool,
      .                   // The whole `use` item
      .                   item: &Item,
-- line 415 ----------------------------------------
-- line 426 ----------------------------------------
      .                       .cloned()
      .                       .chain(use_tree.prefix.segments.iter().map(|seg| seg.into()))
      .                       .peekable();
      .           
      .                   // On 2015 edition imports are resolved as crate-relative by default,
      .                   // so prefixes are prepended with crate root segment if necessary.
      .                   // The root is prepended lazily, when the first non-empty prefix or terminating glob
      .                   // appears, so imports in braced groups can have roots prepended independently.
     57 ( 0.00%)          let is_glob = matches!(use_tree.kind, ast::UseTreeKind::Glob);
     20 ( 0.00%)          let crate_root = match prefix_iter.peek() {
    657 ( 0.00%)              Some(seg) if !seg.ident.is_path_segment_keyword() && seg.ident.span.rust_2015() => {
      .                           Some(seg.ident.span.ctxt())
      .                       }
      .                       None if is_glob && use_tree.span.rust_2015() => Some(use_tree.span.ctxt()),
      .                       _ => None,
      .                   }
      .                   .map(|ctxt| {
      .                       Segment::from_ident(Ident::new(
      .                           kw::PathRoot,
      .                           use_tree.prefix.span.shrink_to_lo().with_ctxt(ctxt),
      .                       ))
      .                   });
      .           
    285 ( 0.00%)          let prefix = crate_root.into_iter().chain(prefix_iter).collect::<Vec<_>>();
      .                   debug!("build_reduced_graph_for_use_tree: prefix={:?}", prefix);
      .           
      .                   let empty_for_self = |prefix: &[Segment]| {
     12 ( 0.00%)              prefix.is_empty() || prefix.len() == 1 && prefix[0].ident.name == kw::PathRoot
      .                   };
    216 ( 0.00%)          match use_tree.kind {
    210 ( 0.00%)              ast::UseTreeKind::Simple(rename, id1, id2) => {
     42 ( 0.00%)                  let mut ident = use_tree.ident();
    168 ( 0.00%)                  let mut module_path = prefix;
      .                           let mut source = module_path.pop().unwrap();
      .                           let mut type_ns_only = false;
      .           
     84 ( 0.00%)                  if nested {
      .                               // Correctly handle `self`
     37 ( 0.00%)                      if source.ident.name == kw::SelfLower {
      .                                   type_ns_only = true;
      .           
      .                                   if empty_for_self(&module_path) {
      .                                       self.r.report_error(
      .                                           use_tree.span,
      .                                           ResolutionError::SelfImportOnlyInImportListWithNonEmptyPrefix,
      .                                       );
      .                                       return;
-- line 472 ----------------------------------------
-- line 475 ----------------------------------------
      .                                   // Replace `use foo::{ self };` with `use foo;`
      .                                   source = module_path.pop().unwrap();
      .                                   if rename.is_none() {
      .                                       ident = source.ident;
      .                                   }
      .                               }
      .                           } else {
      .                               // Disallow `self`
      5 ( 0.00%)                      if source.ident.name == kw::SelfLower {
      .                                   let parent = module_path.last();
      .           
      .                                   let span = match parent {
      .                                       // only `::self` from `use foo::self as bar`
      .                                       Some(seg) => seg.ident.span.shrink_to_hi().to(source.ident.span),
      .                                       None => source.ident.span,
      .                                   };
      .                                   let span_with_rename = match rename {
-- line 491 ----------------------------------------
-- line 506 ----------------------------------------
      .                                       source = parent;
      .                                       if rename.is_none() {
      .                                           ident = source.ident;
      .                                       }
      .                                   }
      .                               }
      .           
      .                               // Disallow `use $crate;`
      5 ( 0.00%)                      if source.ident.name == kw::DollarCrate && module_path.is_empty() {
      .                                   let crate_root = self.r.resolve_crate_root(source.ident);
      .                                   let crate_name = match crate_root.kind {
      .                                       ModuleKind::Def(.., name) => name,
      .                                       ModuleKind::Block(..) => unreachable!(),
      .                                   };
      .                                   // HACK(eddyb) unclear how good this is, but keeping `$crate`
      .                                   // in `source` breaks `src/test/ui/imports/import-crate-var.rs`,
      .                                   // while the current crate doesn't have a valid `crate_name`.
-- line 522 ----------------------------------------
-- line 535 ----------------------------------------
      .           
      .                                   self.r
      .                                       .session
      .                                       .struct_span_err(item.span, "`$crate` may not be imported")
      .                                       .emit();
      .                               }
      .                           }
      .           
     47 ( 0.00%)                  if ident.name == kw::Crate {
      .                               self.r.session.span_err(
      .                                   ident.span,
      .                                   "crate root imports need to be explicitly named: \
      .                                    `use crate as name;`",
      .                               );
      .                           }
      .           
      .                           let kind = ImportKind::Single {
    210 ( 0.00%)                      source: source.ident,
      .                               target: ident,
      .                               source_bindings: PerNS {
      .                                   type_ns: Cell::new(Err(Determinacy::Undetermined)),
      .                                   value_ns: Cell::new(Err(Determinacy::Undetermined)),
      .                                   macro_ns: Cell::new(Err(Determinacy::Undetermined)),
      .                               },
      .                               target_bindings: PerNS {
      .                                   type_ns: Cell::new(None),
-- line 560 ----------------------------------------
-- line 562 ----------------------------------------
      .                                   macro_ns: Cell::new(None),
      .                               },
      .                               type_ns_only,
      .                               nested,
      .                               additional_ids: (id1, id2),
      .                           };
      .           
      .                           self.add_import(
    168 ( 0.00%)                      module_path,
  1,008 ( 0.00%)                      kind,
     84 ( 0.00%)                      use_tree.span,
      .                               id,
      .                               item,
      .                               root_span,
    168 ( 0.00%)                      item.id,
      .                               vis,
      .                           );
      .                       }
      .                       ast::UseTreeKind::Glob => {
      .                           let kind = ImportKind::Glob {
     45 ( 0.00%)                      is_prelude: self.r.session.contains_name(&item.attrs, sym::prelude_import),
      .                               max_vis: Cell::new(ty::Visibility::Invisible),
      .                           };
    135 ( 0.00%)                  self.add_import(prefix, kind, use_tree.span, id, item, root_span, item.id, vis);
      .                       }
      .                       ast::UseTreeKind::Nested(ref items) => {
      .                           // Ensure there is at most one `self` in the list
      .                           let self_spans = items
      .                               .iter()
      .                               .filter_map(|&(ref use_tree, _)| {
     92 ( 0.00%)                          if let ast::UseTreeKind::Simple(..) = use_tree.kind {
    111 ( 0.00%)                              if use_tree.ident().name == kw::SelfLower {
      .                                           return Some(use_tree.span);
      .                                       }
      .                                   }
      .           
      .                                   None
      .                               })
      .                               .collect::<Vec<_>>();
     18 ( 0.00%)                  if self_spans.len() > 1 {
      .                               let mut e = self.r.into_struct_error(
      .                                   self_spans[0],
      .                                   ResolutionError::SelfImportCanOnlyAppearOnceInTheList,
      .                               );
      .           
      .                               for other_span in self_spans.iter().skip(1) {
      .                                   e.span_label(*other_span, "another `self` import appears here");
      .                               }
      .           
      .                               e.emit();
      .                           }
      .           
     49 ( 0.00%)                  for &(ref tree, id) in items {
    555 ( 0.00%)                      self.build_reduced_graph_for_use_tree(
      .                                   // This particular use tree
      .                                   tree, id, &prefix, true, // The whole `use` item
      .                                   item, vis, root_span,
      .                               );
      .                           }
      .           
      .                           // Empty groups `a::b::{}` are turned into synthetic `self` imports
      .                           // `a::b::c::{self as _}`, so that their prefixes are correctly
      .                           // resolved and checked for privacy/stability/etc.
      6 ( 0.00%)                  if items.is_empty() && !empty_for_self(&prefix) {
      .                               let new_span = prefix[prefix.len() - 1].ident.span;
      .                               let tree = ast::UseTree {
      .                                   prefix: ast::Path::from_ident(Ident::new(kw::SelfLower, new_span)),
      .                                   kind: ast::UseTreeKind::Simple(
      .                                       Some(Ident::new(kw::Underscore, new_span)),
      .                                       ast::DUMMY_NODE_ID,
      .                                       ast::DUMMY_NODE_ID,
      .                                   ),
-- line 633 ----------------------------------------
-- line 642 ----------------------------------------
      .                                   // The whole `use` item
      .                                   item,
      .                                   ty::Visibility::Invisible,
      .                                   root_span,
      .                               );
      .                           }
      .                       }
      .                   }
    456 ( 0.00%)      }
      .           
      .               /// Constructs the reduced graph for one item.
      .               fn build_reduced_graph_for_item(&mut self, item: &'b Item) {
      .                   let parent_scope = &self.parent_scope;
      .                   let parent = parent_scope.module;
    234 ( 0.00%)          let expansion = parent_scope.expansion;
    351 ( 0.00%)          let ident = item.ident;
    234 ( 0.00%)          let sp = item.span;
    234 ( 0.00%)          let vis = self.resolve_visibility(&item.vis);
    351 ( 0.00%)          let local_def_id = self.r.local_def_id(item.id);
      .                   let def_id = local_def_id.to_def_id();
      .           
      .                   self.r.visibilities.insert(local_def_id, vis);
      .           
    660 ( 0.00%)          match item.kind {
     20 ( 0.00%)              ItemKind::Use(ref use_tree) => {
    220 ( 0.00%)                  self.build_reduced_graph_for_use_tree(
      .                               // This particular use tree
      .                               use_tree,
     20 ( 0.00%)                      item.id,
      .                               &[],
      .                               false,
      .                               // The whole `use` item
      .                               item,
      .                               vis,
      .                               use_tree.span,
      .                           );
      .                       }
      .           
      2 ( 0.00%)              ItemKind::ExternCrate(orig_name) => {
      .                           self.build_reduced_graph_for_extern_crate(
      .                               orig_name,
      .                               item,
      .                               local_def_id,
      .                               vis,
      .                               parent,
      .                           );
      .                       }
      .           
      .                       ItemKind::Mod(..) => {
     16 ( 0.00%)                  let module = self.r.new_module(
      .                               Some(parent),
      .                               ModuleKind::Def(DefKind::Mod, def_id, ident.name),
      .                               expansion.to_expn_id(),
      4 ( 0.00%)                      item.span,
      4 ( 0.00%)                      parent.no_implicit_prelude
     14 ( 0.00%)                          || self.r.session.contains_name(&item.attrs, sym::no_implicit_prelude),
      .                           );
     38 ( 0.00%)                  self.r.define(parent, ident, TypeNS, (module, vis, sp, expansion));
      .           
      .                           // Descend into the module.
      4 ( 0.00%)                  self.parent_scope.module = module;
      .                       }
      .           
      .                       // These items live in the value namespace.
      .                       ItemKind::Static(..) => {
      .                           let res = Res::Def(DefKind::Static, def_id);
      .                           self.r.define(parent, ident, ValueNS, (res, vis, sp, expansion));
      .                       }
      .                       ItemKind::Const(..) => {
      .                           let res = Res::Def(DefKind::Const, def_id);
     40 ( 0.00%)                  self.r.define(parent, ident, ValueNS, (res, vis, sp, expansion));
      .                       }
      .                       ItemKind::Fn(..) => {
      .                           let res = Res::Def(DefKind::Fn, def_id);
    945 ( 0.00%)                  self.r.define(parent, ident, ValueNS, (res, vis, sp, expansion));
      .           
      .                           // Functions introducing procedural macros reserve a slot
      .                           // in the macro namespace as well (see #52225).
    180 ( 0.00%)                  self.define_macro(item);
      .                       }
      .           
      .                       // These items live in the type namespace.
      .                       ItemKind::TyAlias(..) => {
      .                           let res = Res::Def(DefKind::TyAlias, def_id);
     28 ( 0.00%)                  self.r.define(parent, ident, TypeNS, (res, vis, sp, expansion));
      .                       }
      .           
      .                       ItemKind::Enum(_, _) => {
      .                           let module = self.r.new_module(
      .                               Some(parent),
      .                               ModuleKind::Def(DefKind::Enum, def_id, ident.name),
      .                               expansion.to_expn_id(),
      .                               item.span,
-- line 734 ----------------------------------------
-- line 739 ----------------------------------------
      .                       }
      .           
      .                       ItemKind::TraitAlias(..) => {
      .                           let res = Res::Def(DefKind::TraitAlias, def_id);
      .                           self.r.define(parent, ident, TypeNS, (res, vis, sp, expansion));
      .                       }
      .           
      .                       // These items live in both the type and value namespaces.
      7 ( 0.00%)              ItemKind::Struct(ref vdata, _) => {
      .                           // Define a name in the type namespace.
      .                           let res = Res::Def(DefKind::Struct, def_id);
    175 ( 0.00%)                  self.r.define(parent, ident, TypeNS, (res, vis, sp, expansion));
      .           
      .                           // Record field names for error reporting.
      .                           self.insert_field_names_local(def_id, vdata);
      .           
      .                           // If this is a tuple or unit struct, define a name
      .                           // in the value namespace as well.
     42 ( 0.00%)                  if let Some(ctor_node_id) = vdata.ctor_id() {
      .                               // If the structure is marked as non_exhaustive then lower the visibility
      .                               // to within the crate.
     15 ( 0.00%)                      let mut ctor_vis = if vis == ty::Visibility::Public
     10 ( 0.00%)                          && self.r.session.contains_name(&item.attrs, sym::non_exhaustive)
      .                               {
      .                                   ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX))
      .                               } else {
      .                                   vis
      .                               };
      .           
     12 ( 0.00%)                      let mut ret_fields = Vec::with_capacity(vdata.fields().len());
      .           
      6 ( 0.00%)                      for field in vdata.fields() {
      .                                   // NOTE: The field may be an expansion placeholder, but expansion sets
      .                                   // correct visibilities for unnamed field placeholders specifically, so the
      .                                   // constructor visibility should still be determined correctly.
      .                                   let field_vis = self
      .                                       .resolve_visibility_speculative(&field.vis, true)
      .                                       .unwrap_or(ty::Visibility::Public);
      .                                   if ctor_vis.is_at_least(field_vis, &*self.r) {
      .                                       ctor_vis = field_vis;
      .                                   }
      .                                   ret_fields.push(field_vis);
      .                               }
      9 ( 0.00%)                      let ctor_def_id = self.r.local_def_id(ctor_node_id);
      .                               let ctor_res = Res::Def(
      3 ( 0.00%)                          DefKind::Ctor(CtorOf::Struct, CtorKind::from_ast(vdata)),
      .                                   ctor_def_id.to_def_id(),
      .                               );
     54 ( 0.00%)                      self.r.define(parent, ident, ValueNS, (ctor_res, ctor_vis, sp, expansion));
      .                               self.r.visibilities.insert(ctor_def_id, ctor_vis);
      .           
      .                               self.r.struct_constructors.insert(def_id, (ctor_res, ctor_vis, ret_fields));
      .                           }
      .                       }
      .           
      .                       ItemKind::Union(ref vdata, _) => {
      .                           let res = Res::Def(DefKind::Union, def_id);
-- line 795 ----------------------------------------
-- line 796 ----------------------------------------
      .                           self.r.define(parent, ident, TypeNS, (res, vis, sp, expansion));
      .           
      .                           // Record field names for error reporting.
      .                           self.insert_field_names_local(def_id, vdata);
      .                       }
      .           
      .                       ItemKind::Trait(..) => {
      .                           // Add all the items within to a new module.
      9 ( 0.00%)                  let module = self.r.new_module(
      .                               Some(parent),
      .                               ModuleKind::Def(DefKind::Trait, def_id, ident.name),
      .                               expansion.to_expn_id(),
      .                               item.span,
      1 ( 0.00%)                      parent.no_implicit_prelude,
      .                           );
      .                           self.r.define(parent, ident, TypeNS, (module, vis, sp, expansion));
      .                           self.parent_scope.module = module;
      .                       }
      .           
      .                       // These items do not add names to modules.
      .                       ItemKind::Impl(box Impl { of_trait: Some(..), .. }) => {
      .                           self.r.trait_impl_items.insert(local_def_id);
-- line 817 ----------------------------------------
-- line 825 ----------------------------------------
      .               fn build_reduced_graph_for_extern_crate(
      .                   &mut self,
      .                   orig_name: Option<Symbol>,
      .                   item: &Item,
      .                   local_def_id: LocalDefId,
      .                   vis: ty::Visibility,
      .                   parent: Module<'a>,
      .               ) {
      8 ( 0.00%)          let ident = item.ident;
      4 ( 0.00%)          let sp = item.span;
      4 ( 0.00%)          let parent_scope = self.parent_scope;
      .                   let expansion = parent_scope.expansion;
      .           
     14 ( 0.00%)          let (used, module, binding) = if orig_name.is_none() && ident.name == kw::SelfLower {
      .                       self.r
      .                           .session
      .                           .struct_span_err(item.span, "`extern crate self;` requires renaming")
      .                           .span_suggestion(
      .                               item.span,
      .                               "rename the `self` crate to be able to import it",
      .                               "extern crate self as name;".into(),
      .                               Applicability::HasPlaceholders,
      .                           )
      .                           .emit();
      .                       return;
      .                   } else if orig_name == Some(kw::SelfLower) {
      .                       Some(self.r.graph_root)
      .                   } else {
     12 ( 0.00%)              self.r.crate_loader.process_extern_crate(item, &self.r.definitions, local_def_id).map(
      2 ( 0.00%)                  |crate_id| {
      2 ( 0.00%)                      self.r.extern_crate_map.insert(local_def_id, crate_id);
     12 ( 0.00%)                      self.r.expect_module(crate_id.as_def_id())
      .                           },
      .                       )
      .                   }
      .                   .map(|module| {
      .                       let used = self.process_macro_use_imports(item, module);
      .                       let binding =
     22 ( 0.00%)                  (module, ty::Visibility::Public, sp, expansion).to_name_binding(self.r.arenas);
      .                       (used, Some(ModuleOrUniformRoot::Module(module)), binding)
      .                   })
      4 ( 0.00%)          .unwrap_or((true, None, self.r.dummy_binding));
     62 ( 0.00%)          let import = self.r.arenas.alloc_import(Import {
      .                       kind: ImportKind::ExternCrate { source: orig_name, target: ident },
      2 ( 0.00%)              root_id: item.id,
      .                       id: item.id,
     12 ( 0.00%)              parent_scope: self.parent_scope,
      .                       imported_module: Cell::new(module),
      .                       has_attributes: !item.attrs.is_empty(),
      4 ( 0.00%)              use_span_with_attributes: item.span_with_attributes(),
      2 ( 0.00%)              use_span: item.span,
      .                       root_span: item.span,
      .                       span: item.span,
      .                       module_path: Vec::new(),
      .                       vis: Cell::new(vis),
      .                       used: Cell::new(used),
      .                   });
      2 ( 0.00%)          self.r.potentially_unused_imports.push(import);
     10 ( 0.00%)          let imported_binding = self.r.import(binding, import);
      4 ( 0.00%)          if ptr::eq(parent, self.r.graph_root) {
     21 ( 0.00%)              if let Some(entry) = self.r.extern_prelude.get(&ident.normalize_to_macros_2_0()) {
      .                           if expansion != LocalExpnId::ROOT
      .                               && orig_name.is_some()
      .                               && entry.extern_crate_item.is_none()
      .                           {
      .                               let msg = "macro-expanded `extern crate` items cannot \
      .                                                  shadow names passed with `--extern`";
      .                               self.r.session.span_err(item.span, msg);
      .                           }
      .                       }
     12 ( 0.00%)              let entry = self.r.extern_prelude.entry(ident.normalize_to_macros_2_0()).or_insert(
      .                           ExternPreludeEntry { extern_crate_item: None, introduced_by_item: true },
      .                       );
      2 ( 0.00%)              entry.extern_crate_item = Some(imported_binding);
      2 ( 0.00%)              if orig_name.is_some() {
      .                           entry.introduced_by_item = true;
      .                       }
      .                   }
     12 ( 0.00%)          self.r.define(parent, ident, TypeNS, imported_binding);
      .               }
      .           
      .               /// Constructs the reduced graph for one foreign item.
      .               fn build_reduced_graph_for_foreign_item(&mut self, item: &ForeignItem) {
      .                   let local_def_id = self.r.local_def_id(item.id);
      .                   let def_id = local_def_id.to_def_id();
      .                   let (def_kind, ns) = match item.kind {
      .                       ForeignItemKind::Fn(..) => (DefKind::Fn, ValueNS),
-- line 911 ----------------------------------------
-- line 918 ----------------------------------------
      .                   let vis = self.resolve_visibility(&item.vis);
      .                   let res = Res::Def(def_kind, def_id);
      .                   self.r.define(parent, item.ident, ns, (res, vis, item.span, expansion));
      .                   self.r.visibilities.insert(local_def_id, vis);
      .               }
      .           
      .               fn build_reduced_graph_for_block(&mut self, block: &Block) {
      .                   let parent = self.parent_scope.module;
    142 ( 0.00%)          let expansion = self.parent_scope.expansion;
      .                   if self.block_needs_anonymous_module(block) {
     30 ( 0.00%)              let module = self.r.new_module(
      .                           Some(parent),
     20 ( 0.00%)                  ModuleKind::Block(block.id),
      .                           expansion.to_expn_id(),
      .                           block.span,
     10 ( 0.00%)                  parent.no_implicit_prelude,
      .                       );
      .                       self.r.block_map.insert(block.id, module);
     10 ( 0.00%)              self.parent_scope.module = module; // Descend into the block.
      .                   }
      .               }
      .           
      .               /// Builds the reduced graph for a single item in an external crate.
 74,528 ( 0.01%)      fn build_reduced_graph_for_external_crate_res(&mut self, child: ModChild) {
  9,316 ( 0.00%)          let parent = self.parent_scope.module;
 55,896 ( 0.01%)          let ModChild { ident, res, vis, span } = child;
 46,580 ( 0.01%)          let res = res.expect_non_local();
 18,632 ( 0.00%)          let expansion = self.parent_scope.expansion;
      .                   // Record primary definitions.
 46,580 ( 0.01%)          match res {
      .                       Res::Def(DefKind::Mod | DefKind::Enum | DefKind::Trait, def_id) => {
    498 ( 0.00%)                  let module = self.r.expect_module(def_id);
  6,972 ( 0.00%)                  self.r.define(parent, ident, TypeNS, (module, vis, span, expansion));
      .                       }
      .                       Res::Def(
      .                           DefKind::Struct
      .                           | DefKind::Union
      .                           | DefKind::Variant
      .                           | DefKind::TyAlias
      .                           | DefKind::ForeignTy
      .                           | DefKind::OpaqueTy
      .                           | DefKind::TraitAlias
      .                           | DefKind::AssocTy,
      .                           _,
      .                       )
      .                       | Res::PrimTy(..)
 92,826 ( 0.02%)              | Res::ToolMod => self.r.define(parent, ident, TypeNS, (res, vis, span, expansion)),
      .                       Res::Def(
      .                           DefKind::Fn
      .                           | DefKind::AssocFn
      .                           | DefKind::Static
      .                           | DefKind::Const
      .                           | DefKind::AssocConst
      .                           | DefKind::Ctor(..),
      .                           _,
151,467 ( 0.03%)              ) => self.r.define(parent, ident, ValueNS, (res, vis, span, expansion)),
      .                       Res::Def(DefKind::Macro(..), _) | Res::NonMacroAttr(..) => {
  4,396 ( 0.00%)                  self.r.define(parent, ident, MacroNS, (res, vis, span, expansion))
      .                       }
      .                       Res::Def(
      .                           DefKind::TyParam
      .                           | DefKind::ConstParam
      .                           | DefKind::ExternCrate
      .                           | DefKind::Use
      .                           | DefKind::ForeignMod
      .                           | DefKind::AnonConst
-- line 983 ----------------------------------------
-- line 992 ----------------------------------------
      .                       )
      .                       | Res::Local(..)
      .                       | Res::SelfTy(..)
      .                       | Res::SelfCtor(..)
      .                       | Res::Err => bug!("unexpected resolution: {:?}", res),
      .                   }
      .                   // Record some extra data for better diagnostics.
      .                   let cstore = self.r.cstore();
 88,761 ( 0.02%)          match res {
    219 ( 0.00%)              Res::Def(DefKind::Struct, def_id) => {
      .                           let field_names =
    438 ( 0.00%)                      cstore.struct_field_names_untracked(def_id, self.r.session).collect();
    511 ( 0.00%)                  let ctor = cstore.ctor_def_id_and_kind_untracked(def_id);
    146 ( 0.00%)                  if let Some((ctor_def_id, ctor_kind)) = ctor {
      .                               let ctor_res = Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
    230 ( 0.00%)                      let ctor_vis = cstore.visibility_untracked(ctor_def_id);
      .                               let field_visibilities =
    184 ( 0.00%)                          cstore.struct_field_visibilities_untracked(def_id).collect();
      .                               self.r
      .                                   .struct_constructors
      .                                   .insert(def_id, (ctor_res, ctor_vis, field_visibilities));
      .                           }
      .                           self.insert_field_names(def_id, field_names);
      .                       }
     21 ( 0.00%)              Res::Def(DefKind::Union, def_id) => {
      .                           let field_names =
     49 ( 0.00%)                      cstore.struct_field_names_untracked(def_id, self.r.session).collect();
      .                           self.insert_field_names(def_id, field_names);
      .                       }
    296 ( 0.00%)              Res::Def(DefKind::AssocFn, def_id) => {
    888 ( 0.00%)                  if cstore.fn_has_self_parameter_untracked(def_id) {
      .                               self.r.has_self.insert(def_id);
      .                           }
      .                       }
      .                       _ => {}
      .                   }
 73,504 ( 0.01%)      }
      .           
    432 ( 0.00%)      fn add_macro_use_binding(
      .                   &mut self,
      .                   name: Symbol,
      .                   binding: &'a NameBinding<'a>,
      .                   span: Span,
      .                   allow_shadowing: bool,
      .               ) {
    216 ( 0.00%)          if self.r.macro_use_prelude.insert(name, binding).is_some() && !allow_shadowing {
      .                       let msg = format!("`{}` is already in scope", name);
      .                       let note =
      .                           "macro-expanded `#[macro_use]`s may not shadow existing macros (see RFC 1560)";
      .                       self.r.session.struct_span_err(span, &msg).note(note).emit();
      .                   }
    324 ( 0.00%)      }
      .           
      .               /// Returns `true` if we should consider the underlying `extern crate` to be used.
      .               fn process_macro_use_imports(&mut self, item: &Item, module: Module<'a>) -> bool {
      .                   let mut import_all = None;
      .                   let mut single_imports = Vec::new();
      .                   for attr in &item.attrs {
      2 ( 0.00%)              if attr.has_name(sym::macro_use) {
      4 ( 0.00%)                  if self.parent_scope.module.parent.is_some() {
      .                               struct_span_err!(
      .                                   self.r.session,
      .                                   item.span,
      .                                   E0468,
      .                                   "an `extern crate` loading macros must be at the crate root"
      .                               )
      .                               .emit();
      .                           }
      8 ( 0.00%)                  if let ItemKind::ExternCrate(Some(orig_name)) = item.kind {
      .                               if orig_name == kw::SelfLower {
      .                                   self.r
      .                                       .session
      .                                       .struct_span_err(
      .                                           attr.span,
      .                                           "`#[macro_use]` is not supported on `extern crate self`",
      .                                       )
      .                                       .emit();
      .                               }
      .                           }
      .                           let ill_formed =
      6 ( 0.00%)                      |span| struct_span_err!(self.r.session, span, E0466, "bad macro import").emit();
     10 ( 0.00%)                  match attr.meta() {
     44 ( 0.00%)                      Some(meta) => match meta.kind {
      .                                   MetaItemKind::Word => {
      4 ( 0.00%)                              import_all = Some(meta.span);
      .                                       break;
      .                                   }
      .                                   MetaItemKind::List(nested_metas) => {
      .                                       for nested_meta in nested_metas {
      .                                           match nested_meta.ident() {
      .                                               Some(ident) if nested_meta.is_word() => {
      .                                                   single_imports.push(ident)
      .                                               }
      .                                               _ => ill_formed(nested_meta.span()),
      .                                           }
      .                                       }
      .                                   }
      .                                   MetaItemKind::NameValue(..) => ill_formed(meta.span),
      4 ( 0.00%)                      },
      .                               None => ill_formed(attr.span),
      .                           }
      .                       }
      .                   }
      .           
      .                   let macro_use_import = |this: &Self, span| {
     40 ( 0.00%)              this.r.arenas.alloc_import(Import {
      .                           kind: ImportKind::MacroUse,
      2 ( 0.00%)                  root_id: item.id,
      .                           id: item.id,
     12 ( 0.00%)                  parent_scope: this.parent_scope,
      .                           imported_module: Cell::new(Some(ModuleOrUniformRoot::Module(module))),
      2 ( 0.00%)                  use_span_with_attributes: item.span_with_attributes(),
      .                           has_attributes: !item.attrs.is_empty(),
      2 ( 0.00%)                  use_span: item.span,
      .                           root_span: span,
      .                           span,
      .                           module_path: Vec::new(),
      .                           vis: Cell::new(ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX))),
      .                           used: Cell::new(false),
      .                       })
      .                   };
      .           
      8 ( 0.00%)          let allow_shadowing = self.parent_scope.expansion == LocalExpnId::ROOT;
      6 ( 0.00%)          if let Some(span) = import_all {
      .                       let import = macro_use_import(self, span);
      2 ( 0.00%)              self.r.potentially_unused_imports.push(import);
     18 ( 0.00%)              module.for_each_child(self, |this, ident, ns, binding| {
    238 ( 0.00%)                  if ns == MacroNS {
    162 ( 0.00%)                      let imported_binding = this.r.import(binding, import);
    432 ( 0.00%)                      this.add_macro_use_binding(ident.name, imported_binding, span, allow_shadowing);
      .                           }
      .                       });
      .                   } else {
      .                       for ident in single_imports.iter().cloned() {
      .                           let result = self.r.resolve_ident_in_module(
      .                               ModuleOrUniformRoot::Module(module),
      .                               ident,
      .                               MacroNS,
-- line 1129 ----------------------------------------
-- line 1146 ----------------------------------------
      .                                   .emit();
      .                           }
      .                       }
      .                   }
      .                   import_all.is_some() || !single_imports.is_empty()
      .               }
      .           
      .               /// Returns `true` if this attribute list contains `macro_use`.
     15 ( 0.00%)      fn contains_macro_use(&mut self, attrs: &[ast::Attribute]) -> bool {
      .                   for attr in attrs {
      4 ( 0.00%)              if attr.has_name(sym::macro_escape) {
      .                           let msg = "`#[macro_escape]` is a deprecated synonym for `#[macro_use]`";
      .                           let mut err = self.r.session.struct_span_warn(attr.span, msg);
      .                           if let ast::AttrStyle::Inner = attr.style {
      .                               err.help("try an outer attribute: `#[macro_use]`").emit();
      .                           } else {
      .                               err.emit();
      .                           }
      .                       } else if !attr.has_name(sym::macro_use) {
-- line 1164 ----------------------------------------
-- line 1167 ----------------------------------------
      .           
      .                       if !attr.is_word() {
      .                           self.r.session.span_err(attr.span, "arguments to `macro_use` are not allowed here");
      .                       }
      .                       return true;
      .                   }
      .           
      .                   false
     21 ( 0.00%)      }
      .           
      .               fn visit_invoc(&mut self, id: NodeId) -> LocalExpnId {
    174 ( 0.00%)          let invoc_id = id.placeholder_to_expn_id();
     30 ( 0.00%)          let old_parent_scope = self.r.invocation_parent_scopes.insert(invoc_id, self.parent_scope);
     61 ( 0.00%)          assert!(old_parent_scope.is_none(), "invocation data is reset for an invocation");
      .                   invoc_id
      .               }
      .           
      .               /// Visit invocation in context in which it can emit a named item (possibly `macro_rules`)
      .               /// directly into its parent scope's module.
    180 ( 0.00%)      fn visit_invoc_in_module(&mut self, id: NodeId) -> MacroRulesScopeRef<'a> {
      .                   let invoc_id = self.visit_invoc(id);
     30 ( 0.00%)          self.parent_scope.module.unexpanded_invocations.borrow_mut().insert(invoc_id);
     90 ( 0.00%)          self.r.arenas.alloc_macro_rules_scope(MacroRulesScope::Invocation(invoc_id))
    180 ( 0.00%)      }
      .           
      .               fn proc_macro_stub(&self, item: &ast::Item) -> Option<(MacroKind, Ident, Span)> {
    270 ( 0.00%)          if self.r.session.contains_name(&item.attrs, sym::proc_macro) {
      .                       return Some((MacroKind::Bang, item.ident, item.span));
    225 ( 0.00%)          } else if self.r.session.contains_name(&item.attrs, sym::proc_macro_attribute) {
      .                       return Some((MacroKind::Attr, item.ident, item.span));
    225 ( 0.00%)          } else if let Some(attr) = self.r.session.find_by_name(&item.attrs, sym::proc_macro_derive)
      .                   {
      .                       if let Some(nested_meta) = attr.meta_item_list().and_then(|list| list.get(0).cloned()) {
      .                           if let Some(ident) = nested_meta.ident() {
      .                               return Some((MacroKind::Derive, ident, ident.span));
      .                           }
      .                       }
      .                   }
      .                   None
-- line 1205 ----------------------------------------
-- line 1209 ----------------------------------------
      .               // Macro uses will remove items from this set, and the remaining
      .               // items will be reported as `unused_macros`.
      .               fn insert_unused_macro(&mut self, ident: Ident, def_id: LocalDefId, node_id: NodeId) {
      .                   if !ident.as_str().starts_with('_') {
      .                       self.r.unused_macros.insert(def_id, (node_id, ident));
      .                   }
      .               }
      .           
    405 ( 0.00%)      fn define_macro(&mut self, item: &ast::Item) -> MacroRulesScopeRef<'a> {
    180 ( 0.00%)          let parent_scope = self.parent_scope;
      .                   let expansion = parent_scope.expansion;
    180 ( 0.00%)          let def_id = self.r.local_def_id(item.id);
    180 ( 0.00%)          let (ext, ident, span, macro_rules) = match &item.kind {
      .                       ItemKind::MacroDef(def) => {
      .                           let ext = Lrc::new(self.r.compile_macro(item, self.r.session.edition()));
      .                           (ext, item.ident, item.span, def.macro_rules)
      .                       }
      .                       ItemKind::Fn(..) => match self.proc_macro_stub(item) {
      .                           Some((macro_kind, ident, span)) => {
      .                               self.r.proc_macro_stubs.insert(def_id);
      .                               (self.r.dummy_ext(macro_kind), ident, span, false)
-- line 1229 ----------------------------------------
-- line 1276 ----------------------------------------
      .                       };
      .                       if vis != ty::Visibility::Public {
      .                           self.insert_unused_macro(ident, def_id, item.id);
      .                       }
      .                       self.r.define(module, ident, MacroNS, (res, vis, span, expansion));
      .                       self.r.visibilities.insert(def_id, vis);
      .                       self.parent_scope.macro_rules
      .                   }
    360 ( 0.00%)      }
      .           }
      .           
      .           macro_rules! method {
      .               ($visit:ident: $ty:ty, $invoc:path, $walk:ident) => {
    270 ( 0.00%)          fn $visit(&mut self, node: &'b $ty) {
  5,844 ( 0.00%)              if let $invoc(..) = node.kind {
     31 ( 0.00%)                  self.visit_invoc(node.id);
      .                       } else {
  6,569 ( 0.00%)                  visit::$walk(self, node);
      .                       }
      .                   }
      .               };
      .           }
      .           
      .           impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {
      .               method!(visit_expr: ast::Expr, ast::ExprKind::MacCall, walk_expr);
      .               method!(visit_pat: ast::Pat, ast::PatKind::MacCall, walk_pat);
      .               method!(visit_ty: ast::Ty, ast::TyKind::MacCall, walk_ty);
      .           
  1,305 ( 0.00%)      fn visit_item(&mut self, item: &'b Item) {
    145 ( 0.00%)          let orig_module_scope = self.parent_scope.module;
    814 ( 0.00%)          self.parent_scope.macro_rules = match item.kind {
      .                       ItemKind::MacroDef(..) => {
      .                           let macro_rules_scope = self.define_macro(item);
      .                           visit::walk_item(self, item);
      .                           macro_rules_scope
      .                       }
      .                       ItemKind::MacCall(..) => {
     84 ( 0.00%)                  let macro_rules_scope = self.visit_invoc_in_module(item.id);
      .                           visit::walk_item(self, item);
      .                           macro_rules_scope
      .                       }
      .                       _ => {
    234 ( 0.00%)                  let orig_macro_rules_scope = self.parent_scope.macro_rules;
      .                           self.build_reduced_graph_for_item(item);
    351 ( 0.00%)                  visit::walk_item(self, item);
    234 ( 0.00%)                  match item.kind {
     12 ( 0.00%)                      ItemKind::Mod(..) if self.contains_macro_use(&item.attrs) => {
      .                                   self.parent_scope.macro_rules
      .                               }
      .                               _ => orig_macro_rules_scope,
      .                           }
      .                       }
      .                   };
    145 ( 0.00%)          self.parent_scope.module = orig_module_scope;
  1,160 ( 0.00%)      }
      .           
      .               fn visit_stmt(&mut self, stmt: &'b ast::Stmt) {
    642 ( 0.00%)          if let ast::StmtKind::MacCall(..) = stmt.kind {
      8 ( 0.00%)              self.parent_scope.macro_rules = self.visit_invoc_in_module(stmt.id);
      .                   } else {
    951 ( 0.00%)              visit::walk_stmt(self, stmt);
      .                   }
      .               }
      .           
      .               fn visit_foreign_item(&mut self, foreign_item: &'b ForeignItem) {
      .                   if let ForeignItemKind::MacCall(_) = foreign_item.kind {
      .                       self.visit_invoc_in_module(foreign_item.id);
      .                       return;
      .                   }
      .           
      .                   self.build_reduced_graph_for_foreign_item(foreign_item);
      .                   visit::walk_foreign_item(self, foreign_item);
      .               }
      .           
  1,278 ( 0.00%)      fn visit_block(&mut self, block: &'b Block) {
    142 ( 0.00%)          let orig_current_module = self.parent_scope.module;
    284 ( 0.00%)          let orig_current_macro_rules_scope = self.parent_scope.macro_rules;
      .                   self.build_reduced_graph_for_block(block);
      .                   visit::walk_block(self, block);
    284 ( 0.00%)          self.parent_scope.module = orig_current_module;
    142 ( 0.00%)          self.parent_scope.macro_rules = orig_current_macro_rules_scope;
  1,136 ( 0.00%)      }
      .           
    410 ( 0.00%)      fn visit_assoc_item(&mut self, item: &'b AssocItem, ctxt: AssocCtxt) {
     82 ( 0.00%)          if let AssocItemKind::MacCall(_) = item.kind {
      .                       match ctxt {
      .                           AssocCtxt::Trait => {
      .                               self.visit_invoc_in_module(item.id);
      .                           }
      .                           AssocCtxt::Impl => {
      .                               self.visit_invoc(item.id);
      .                           }
      .                       }
      .                       return;
      .                   }
      .           
     82 ( 0.00%)          let vis = self.resolve_visibility(&item.vis);
    123 ( 0.00%)          let local_def_id = self.r.local_def_id(item.id);
      .                   let def_id = local_def_id.to_def_id();
      .           
    222 ( 0.00%)          if !(ctxt == AssocCtxt::Impl
      .                       && matches!(item.vis.kind, ast::VisibilityKind::Inherited)
     30 ( 0.00%)              && self
      .                           .r
      .                           .trait_impl_items
     30 ( 0.00%)                  .contains(&ty::DefIdTree::parent(&*self.r, def_id).unwrap().expect_local()))
      .                   {
      .                       // Trait impl item visibility is inherited from its trait when not specified
      .                       // explicitly. In that case we cannot determine it here in early resolve,
      .                       // so we leave a hole in the visibility table to be filled later.
      .                       self.r.visibilities.insert(local_def_id, vis);
      .                   }
      .           
     82 ( 0.00%)          if ctxt == AssocCtxt::Trait {
      7 ( 0.00%)              let (def_kind, ns) = match item.kind {
      .                           AssocItemKind::Const(..) => (DefKind::AssocConst, ValueNS),
      .                           AssocItemKind::Fn(box Fn { ref sig, .. }) => {
      .                               if sig.decl.has_self() {
      .                                   self.r.has_self.insert(def_id);
      .                               }
      .                               (DefKind::AssocFn, ValueNS)
      .                           }
      .                           AssocItemKind::TyAlias(..) => (DefKind::AssocTy, TypeNS),
      .                           AssocItemKind::MacCall(_) => bug!(), // handled above
      .                       };
      .           
      1 ( 0.00%)              let parent = self.parent_scope.module;
      1 ( 0.00%)              let expansion = self.parent_scope.expansion;
      .                       let res = Res::Def(def_kind, def_id);
     19 ( 0.00%)              self.r.define(parent, item.ident, ns, (res, vis, item.span, expansion));
      .                   }
      .           
    164 ( 0.00%)          visit::walk_assoc_item(self, item, ctxt);
    328 ( 0.00%)      }
      .           
    990 ( 0.00%)      fn visit_attribute(&mut self, attr: &'b ast::Attribute) {
  1,120 ( 0.00%)          if !attr.is_doc_comment() && attr::is_builtin_attr(attr) {
    115 ( 0.00%)              self.r
      .                           .builtin_attrs
  1,380 ( 0.00%)                  .push((attr.get_normal_item().path.segments[0].ident, self.parent_scope));
      .                   }
  1,155 ( 0.00%)          visit::walk_attribute(self, attr);
      .               }
      .           
      .               fn visit_arm(&mut self, arm: &'b ast::Arm) {
    104 ( 0.00%)          if arm.is_placeholder {
      .                       self.visit_invoc(arm.id);
      .                   } else {
     26 ( 0.00%)              visit::walk_arm(self, arm);
      .                   }
      .               }
      .           
      .               fn visit_expr_field(&mut self, f: &'b ast::ExprField) {
    220 ( 0.00%)          if f.is_placeholder {
      .                       self.visit_invoc(f.id);
      .                   } else {
    124 ( 0.00%)              visit::walk_expr_field(self, f);
      .                   }
      .               }
      .           
      .               fn visit_pat_field(&mut self, fp: &'b ast::PatField) {
    148 ( 0.00%)          if fp.is_placeholder {
      .                       self.visit_invoc(fp.id);
      .                   } else {
    132 ( 0.00%)              visit::walk_pat_field(self, fp);
      .                   }
      .               }
      .           
      .               fn visit_generic_param(&mut self, param: &'b ast::GenericParam) {
    294 ( 0.00%)          if param.is_placeholder {
      .                       self.visit_invoc(param.id);
      .                   } else {
    156 ( 0.00%)              visit::walk_generic_param(self, param);
      .                   }
      .               }
      .           
      .               fn visit_param(&mut self, p: &'b ast::Param) {
    777 ( 0.00%)          if p.is_placeholder {
      .                       self.visit_invoc(p.id);
      .                   } else {
    558 ( 0.00%)              visit::walk_param(self, p);
      .                   }
      .               }
      .           
    128 ( 0.00%)      fn visit_field_def(&mut self, sf: &'b ast::FieldDef) {
     32 ( 0.00%)          if sf.is_placeholder {
      .                       self.visit_invoc(sf.id);
      .                   } else {
     32 ( 0.00%)              let vis = self.resolve_visibility(&sf.vis);
     48 ( 0.00%)              self.r.visibilities.insert(self.r.local_def_id(sf.id), vis);
    144 ( 0.00%)              visit::walk_field_def(self, sf);
      .                   }
      .               }
      .           
      .               // Constructs the reduced graph for one variant. Variants exist in the
      .               // type and value namespaces.
      .               fn visit_variant(&mut self, variant: &'b ast::Variant) {
      .                   if variant.is_placeholder {
      .                       self.visit_invoc_in_module(variant.id);
-- line 1474 ----------------------------------------
-- line 1510 ----------------------------------------
      .                   }
      .                   // Record field names for error reporting.
      .                   self.insert_field_names_local(ctor_def_id.to_def_id(), &variant.data);
      .           
      .                   visit::walk_variant(self, variant);
      .               }
      .           
      .               fn visit_crate(&mut self, krate: &'b ast::Crate) {
      2 ( 0.00%)          if krate.is_placeholder {
      .                       self.visit_invoc_in_module(krate.id);
      .                   } else {
      .                       visit::walk_crate(self, krate);
     11 ( 0.00%)              self.contains_macro_use(&krate.attrs);
      .                   }
      .               }
      .           }

 33,542 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/build_reduced_graph.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs
--------------------------------------------------------------------------------
Ir                 

-- line 46 ----------------------------------------
        .           ///
        .           /// To implement this conveniently, use the derive macro located in `rustc_macros`.
        .           pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {
        .               /// Consumers may find this more convenient to use with infallible folders than
        .               /// [`try_super_fold_with`][`TypeFoldable::try_super_fold_with`], to which the
        .               /// provided default definition delegates.  Implementors **should not** override
        .               /// this provided default definition, to ensure that the two methods are coherent
        .               /// (provide a definition of `try_super_fold_with` instead).
  640,698 ( 0.11%)      fn super_fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
   33,290 ( 0.01%)          self.try_super_fold_with(folder).into_ok()
  673,824 ( 0.12%)      }
        .               /// Consumers may find this more convenient to use with infallible folders than
        .               /// [`try_fold_with`][`TypeFoldable::try_fold_with`], to which the provided
        .               /// default definition delegates.  Implementors **should not** override this
        .               /// provided default definition, to ensure that the two methods are coherent
        .               /// (provide a definition of `try_fold_with` instead).
   48,327 ( 0.01%)      fn fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
   32,073 ( 0.01%)          self.try_fold_with(folder).into_ok()
   44,516 ( 0.01%)      }
        .           
        .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error>;
        .           
1,191,791 ( 0.21%)      fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
  397,798 ( 0.07%)          self.try_super_fold_with(folder)
1,247,342 ( 0.22%)      }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;
   93,369 ( 0.02%)      fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
   80,573 ( 0.01%)          self.super_visit_with(visitor)
   47,346 ( 0.01%)      }
        .           
        .               /// Returns `true` if `self` has any late-bound regions that are either
        .               /// bound by `binder` or bound by some binder outside of `binder`.
        .               /// If `binder` is `ty::INNERMOST`, this indicates whether
        .               /// there are any late-bound regions that appear free.
        .               fn has_vars_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {
   56,323 ( 0.01%)          self.visit_with(&mut HasEscapingVarsVisitor { outer_index: binder }).is_break()
        .               }
        .           
        .               /// Returns `true` if this `self` has any regions that escape `binder` (and
        .               /// hence are not bound by it).
        .               fn has_vars_bound_above(&self, binder: ty::DebruijnIndex) -> bool {
        9 ( 0.00%)          self.has_vars_bound_at_or_above(binder.shifted_in(1))
        .               }
        .           
  176,450 ( 0.03%)      fn has_escaping_bound_vars(&self) -> bool {
   22,695 ( 0.00%)          self.has_vars_bound_at_or_above(ty::INNERMOST)
  176,942 ( 0.03%)      }
        .           
   15,065 ( 0.00%)      #[instrument(level = "trace")]
        .               fn has_type_flags(&self, flags: TypeFlags) -> bool {
   16,226 ( 0.00%)          self.visit_with(&mut HasTypeFlagsVisitor { flags }).break_value() == Some(FoundFlags)
        .               }
        .               fn has_projections(&self) -> bool {
    1,648 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_PROJECTION)
        .               }
        .               fn has_opaque_types(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_TY_OPAQUE)
        .               }
    4,024 ( 0.00%)      fn references_error(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_ERROR)
    4,024 ( 0.00%)      }
        .               fn has_param_types_or_consts(&self) -> bool {
      294 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)
        .               }
        .               fn has_infer_regions(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_RE_INFER)
        .               }
        .               fn has_infer_types(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_TY_INFER)
        .               }
        .               fn has_infer_types_or_consts(&self) -> bool {
   33,271 ( 0.01%)          self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_CT_INFER)
        .               }
   12,087 ( 0.00%)      fn needs_infer(&self) -> bool {
   23,298 ( 0.00%)          self.has_type_flags(TypeFlags::NEEDS_INFER)
   12,170 ( 0.00%)      }
        .               fn has_placeholders(&self) -> bool {
        .                   self.has_type_flags(
        .                       TypeFlags::HAS_RE_PLACEHOLDER
        .                           | TypeFlags::HAS_TY_PLACEHOLDER
        .                           | TypeFlags::HAS_CT_PLACEHOLDER,
        .                   )
        .               }
        .               fn needs_subst(&self) -> bool {
-- line 133 ----------------------------------------
-- line 147 ----------------------------------------
        .               fn has_erasable_regions(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)
        .               }
        .           
        .               /// Indicates whether this value references only 'global'
        .               /// generic parameters that are the same regardless of what fn we are
        .               /// in. This is used for caching.
        .               fn is_global(&self) -> bool {
   10,900 ( 0.00%)          !self.has_type_flags(TypeFlags::HAS_FREE_LOCAL_NAMES)
        .               }
        .           
        .               /// True if there are any late-bound regions
        .               fn has_late_bound_regions(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_RE_LATE_BOUND)
        .               }
        .           
        .               /// Indicates whether this value still has parameters/placeholders/inference variables
-- line 163 ----------------------------------------
-- line 194 ----------------------------------------
        .           
        .               fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;
        .           
        .               fn fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
  221,665 ( 0.04%)          t.super_fold_with(self)
        .               }
        .           
        .               fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
   22,283 ( 0.00%)          t.super_fold_with(self)
        .               }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
        .                   r.super_fold_with(self)
        .               }
        .           
        .               fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
    1,744 ( 0.00%)          c.super_fold_with(self)
        .               }
        .           
        .               fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
      546 ( 0.00%)          p.super_fold_with(self)
        .               }
        .           
        .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
        .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
        .               }
-- line 238 ----------------------------------------
-- line 247 ----------------------------------------
        .           /// A blanket implementation of this trait (that defers to the relevant
        .           /// method of [`TypeFolder`]) is provided for all infallible folders in
        .           /// order to ensure the two APIs are coherent.
        .           pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {
        .               fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
    6,722 ( 0.00%)          t.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
        .                   t.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
        .                   r.try_super_fold_with(self)
-- line 263 ----------------------------------------
-- line 269 ----------------------------------------
        .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
        .                   c.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_predicate(
        .                   &mut self,
        .                   p: ty::Predicate<'tcx>,
        .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
    2,073 ( 0.00%)          p.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_mir_const(
        .                   &mut self,
        .                   c: mir::ConstantKind<'tcx>,
        .               ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {
        .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
        .               }
-- line 285 ----------------------------------------
-- line 286 ----------------------------------------
        .           }
        .           
        .           // Blanket implementation of fallible trait for infallible folders
        .           // delegates to infallible methods to prevent incoherence
        .           impl<'tcx, F> FallibleTypeFolder<'tcx> for F
        .           where
        .               F: TypeFolder<'tcx, Error = !>,
        .           {
   44,734 ( 0.01%)      fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
   77,329 ( 0.01%)          Ok(self.fold_binder(t))
   65,225 ( 0.01%)      }
        .           
    4,469 ( 0.00%)      fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
  399,844 ( 0.07%)          Ok(self.fold_ty(t))
    4,997 ( 0.00%)      }
        .           
      560 ( 0.00%)      fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
   33,696 ( 0.01%)          Ok(self.fold_region(r))
      560 ( 0.00%)      }
        .           
    3,080 ( 0.00%)      fn try_fold_const(
        .                   &mut self,
        .                   c: &'tcx ty::Const<'tcx>,
        .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
    3,344 ( 0.00%)          Ok(self.fold_const(c))
    2,195 ( 0.00%)      }
        .           
        .               fn try_fold_predicate(
        .                   &mut self,
        .                   p: ty::Predicate<'tcx>,
        .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
        .                   Ok(self.fold_predicate(p))
        .               }
        .           
-- line 322 ----------------------------------------
-- line 341 ----------------------------------------
        .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   t.super_visit_with(self)
        .               }
        .           
        .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   r.super_visit_with(self)
        .               }
        .           
      104 ( 0.00%)      fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   c.super_visit_with(self)
       91 ( 0.00%)      }
        .           
        .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   uv.super_visit_with(self)
        .               }
        .           
        .               fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   p.super_visit_with(self)
        .               }
-- line 359 ----------------------------------------
-- line 380 ----------------------------------------
        .               G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,
        .               H: FnMut(&'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>,
        .           {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        .                   self.tcx
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
      426 ( 0.00%)          let t = ty.super_fold_with(self);
        .                   (self.ty_op)(t)
        .               }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
        .                   let r = r.super_fold_with(self);
        .                   (self.lt_op)(r)
        .               }
        .           
-- line 396 ----------------------------------------
-- line 415 ----------------------------------------
        .               ) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   value.fold_with(&mut RegionFolder::new(self, skipped_regions, &mut f))
        .               }
        .           
        .               /// Invoke `callback` on every region appearing free in `value`.
      578 ( 0.00%)      pub fn for_each_free_region(
        .                   self,
        .                   value: &impl TypeFoldable<'tcx>,
        .                   mut callback: impl FnMut(ty::Region<'tcx>),
        .               ) {
        .                   self.any_free_region_meets(value, |r| {
    2,230 ( 0.00%)              callback(r);
        .                       false
        .                   });
      492 ( 0.00%)      }
        .           
        .               /// Returns `true` if `callback` returns true for every region appearing free in `value`.
        .               pub fn all_free_regions_meet(
        .                   self,
        .                   value: &impl TypeFoldable<'tcx>,
        .                   mut callback: impl FnMut(ty::Region<'tcx>) -> bool,
        .               ) -> bool {
      590 ( 0.00%)          !self.any_free_region_meets(value, |r| !callback(r))
        .               }
        .           
        .               /// Returns `true` if `callback` returns true for some region appearing free in `value`.
        .               pub fn any_free_region_meets(
        .                   self,
        .                   value: &impl TypeFoldable<'tcx>,
        .                   callback: impl FnMut(ty::Region<'tcx>) -> bool,
        .               ) -> bool {
-- line 448 ----------------------------------------
-- line 479 ----------------------------------------
        .                           t: &Binder<'tcx, T>,
        .                       ) -> ControlFlow<Self::BreakTy> {
        .                           self.outer_index.shift_in(1);
        .                           let result = t.as_ref().skip_binder().visit_with(self);
        .                           self.outer_index.shift_out(1);
        .                           result
        .                       }
        .           
    2,505 ( 0.00%)              fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
    4,258 ( 0.00%)                  match *r {
        .                               ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {
        .                                   ControlFlow::CONTINUE
        .                               }
        .                               _ => {
        .                                   if (self.callback)(r) {
        .                                       ControlFlow::BREAK
        .                                   } else {
        .                                       ControlFlow::CONTINUE
        .                                   }
        .                               }
        .                           }
    3,507 ( 0.00%)              }
        .           
        .                       fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                           // We're only interested in types involving regions
    4,338 ( 0.00%)                  if ty.flags().intersects(TypeFlags::HAS_FREE_REGIONS) {
    3,699 ( 0.00%)                      ty.super_visit_with(self)
        .                           } else {
        .                               ControlFlow::CONTINUE
        .                           }
        .                       }
        .                   }
        .           
   11,842 ( 0.00%)          value.visit_with(&mut RegionVisitor { outer_index: ty::INNERMOST, callback }).is_break()
        .               }
        .           }
        .           
        .           /// Folds over the substructure of a type, visiting its component
        .           /// types and all regions that occur *free* within it.
        .           ///
        .           /// That is, `Ty` can contain function or method types that bind
        .           /// regions at the call site (`ReLateBound`), and occurrences of
-- line 520 ----------------------------------------
-- line 540 ----------------------------------------
        .           
        .           impl<'a, 'tcx> RegionFolder<'a, 'tcx> {
        .               #[inline]
        .               pub fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   skipped_regions: &'a mut bool,
        .                   fold_region_fn: &'a mut dyn FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,
        .               ) -> RegionFolder<'a, 'tcx> {
   35,649 ( 0.01%)          RegionFolder { tcx, skipped_regions, current_index: ty::INNERMOST, fold_region_fn }
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   16,728 ( 0.00%)          self.tcx
   16,728 ( 0.00%)      }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
      300 ( 0.00%)          self.current_index.shift_in(1);
        .                   let t = t.super_fold_with(self);
      285 ( 0.00%)          self.current_index.shift_out(1);
        .                   t
        .               }
        .           
      228 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
    3,036 ( 0.00%)          match *r {
      228 ( 0.00%)              ty::ReLateBound(debruijn, _) if debruijn < self.current_index => {
        .                           debug!(?self.current_index, "skipped bound region");
      228 ( 0.00%)                  *self.skipped_regions = true;
        .                           r
        .                       }
        .                       _ => {
        .                           debug!(?self.current_index, "folding free region");
    8,424 ( 0.00%)                  (self.fold_region_fn)(r, self.current_index)
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Bound vars replacer
        .           
-- line 585 ----------------------------------------
-- line 592 ----------------------------------------
        .               current_index: ty::DebruijnIndex,
        .           
        .               fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
        .               fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
        .               fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
        .           }
        .           
        .           impl<'a, 'tcx> BoundVarReplacer<'a, 'tcx> {
    6,822 ( 0.00%)      fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
        .                   fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
        .                   fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
        .               ) -> Self {
   23,877 ( 0.00%)          BoundVarReplacer { tcx, current_index: ty::INNERMOST, fld_r, fld_t, fld_c }
    3,411 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
    6,404 ( 0.00%)          self.tcx
    4,097 ( 0.00%)      }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
   10,863 ( 0.00%)          self.current_index.shift_in(1);
   24,420 ( 0.00%)          let t = t.super_fold_with(self);
   10,158 ( 0.00%)          self.current_index.shift_out(1);
        .                   t
        .               }
        .           
   38,595 ( 0.01%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
   19,738 ( 0.00%)          match *t.kind() {
      865 ( 0.00%)              ty::Bound(debruijn, bound_ty) if debruijn == self.current_index => {
      173 ( 0.00%)                  if let Some(fld_t) = self.fld_t.as_mut() {
        .                               let ty = fld_t(bound_ty);
      173 ( 0.00%)                      return ty::fold::shift_vars(self.tcx, &ty, self.current_index.as_u32());
        .                           }
        .                       }
   19,392 ( 0.00%)              _ if t.has_vars_bound_at_or_above(self.current_index) => {
   14,458 ( 0.00%)                  return t.super_fold_with(self);
        .                       }
        .                       _ => {}
        .                   }
        .                   t
   34,674 ( 0.01%)      }
        .           
    8,672 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
    8,298 ( 0.00%)          match *r {
    8,212 ( 0.00%)              ty::ReLateBound(debruijn, br) if debruijn == self.current_index => {
    4,106 ( 0.00%)                  if let Some(fld_r) = self.fld_r.as_mut() {
        .                               let region = fld_r(br);
    8,212 ( 0.00%)                      return if let ty::ReLateBound(debruijn1, br) = *region {
        .                                   // If the callback returns a late-bound region,
        .                                   // that region should always use the INNERMOST
        .                                   // debruijn index. Then we adjust it to the
        .                                   // correct depth.
        .                                   assert_eq!(debruijn1, ty::INNERMOST);
        .                                   self.tcx.mk_region(ty::ReLateBound(debruijn, br))
        .                               } else {
        .                                   region
        .                               };
        .                           }
        .                       }
        .                       _ => {}
        .                   }
        .                   r
    8,672 ( 0.00%)      }
        .           
        .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
        .                   match *ct {
        .                       ty::Const { val: ty::ConstKind::Bound(debruijn, bound_const), ty }
        .                           if debruijn == self.current_index =>
        .                       {
        .                           if let Some(fld_c) = self.fld_c.as_mut() {
        .                               let ct = fld_c(bound_const, ty);
-- line 669 ----------------------------------------
-- line 697 ----------------------------------------
        .                   mut fld_r: F,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let mut region_map = BTreeMap::new();
        .                   let mut real_fld_r =
   25,460 ( 0.00%)              |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
    1,143 ( 0.00%)          let value = value.skip_binder();
   10,845 ( 0.00%)          let value = if !value.has_escaping_bound_vars() {
   19,914 ( 0.00%)              value
        .                   } else {
    2,337 ( 0.00%)              let mut replacer = BoundVarReplacer::new(self, Some(&mut real_fld_r), None, None);
        .                       value.fold_with(&mut replacer)
        .                   };
   36,026 ( 0.01%)          (value, region_map)
        .               }
        .           
        .               /// Replaces all escaping bound vars. The `fld_r` closure replaces escaping
        .               /// bound regions; the `fld_t` closure replaces escaping bound types and the `fld_c`
        .               /// closure replaces escaping bound consts.
   19,683 ( 0.00%)      pub fn replace_escaping_bound_vars<T, F, G, H>(
        .                   self,
        .                   value: T,
        .                   mut fld_r: F,
        .                   mut fld_t: G,
        .                   mut fld_c: H,
        .               ) -> T
        .               where
        .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
        .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
        .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
        .                   T: TypeFoldable<'tcx>,
        .               {
   10,396 ( 0.00%)          if !value.has_escaping_bound_vars() {
   32,353 ( 0.01%)              value
        .                   } else {
        .                       let mut replacer =
   36,951 ( 0.01%)                  BoundVarReplacer::new(self, Some(&mut fld_r), Some(&mut fld_t), Some(&mut fld_c));
    2,544 ( 0.00%)              value.fold_with(&mut replacer)
        .                   }
   13,590 ( 0.00%)      }
        .           
        .               /// Replaces all types or regions bound by the given `Binder`. The `fld_r`
        .               /// closure replaces bound regions while the `fld_t` closure replaces bound
        .               /// types.
  134,188 ( 0.02%)      pub fn replace_bound_vars<T, F, G, H>(
        .                   self,
        .                   value: Binder<'tcx, T>,
        .                   mut fld_r: F,
        .                   fld_t: G,
        .                   fld_c: H,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
        .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
        .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let mut region_map = BTreeMap::new();
   18,260 ( 0.00%)          let real_fld_r = |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
  125,429 ( 0.02%)          let value = self.replace_escaping_bound_vars(value.skip_binder(), real_fld_r, fld_t, fld_c);
  116,455 ( 0.02%)          (value, region_map)
   95,693 ( 0.02%)      }
        .           
        .               /// Replaces any late-bound regions bound in `value` with
        .               /// free variants attached to `all_outlive_scope`.
    2,288 ( 0.00%)      pub fn liberate_late_bound_regions<T>(
        .                   self,
        .                   all_outlive_scope: DefId,
        .                   value: ty::Binder<'tcx, T>,
        .               ) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.replace_late_bound_regions(value, |br| {
    3,770 ( 0.00%)              self.mk_region(ty::ReFree(ty::FreeRegion {
      580 ( 0.00%)                  scope: all_outlive_scope,
        .                           bound_region: br.kind,
        .                       }))
        .                   })
        .                   .0
    1,248 ( 0.00%)      }
        .           
        .               pub fn shift_bound_var_indices<T>(self, bound_vars: usize, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.replace_escaping_bound_vars(
   26,475 ( 0.00%)              value,
        .                       |r| {
        .                           self.mk_region(ty::ReLateBound(
        .                               ty::INNERMOST,
        .                               ty::BoundRegion {
        .                                   var: ty::BoundVar::from_usize(r.var.as_usize() + bound_vars),
        .                                   kind: r.kind,
        .                               },
        .                           ))
-- line 795 ----------------------------------------
-- line 843 ----------------------------------------
        .               fn collect_late_bound_regions<T>(
        .                   self,
        .                   value: &Binder<'tcx, T>,
        .                   just_constraint: bool,
        .               ) -> FxHashSet<ty::BoundRegionKind>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
      320 ( 0.00%)          let mut collector = LateBoundRegionsCollector::new(just_constraint);
        .                   let result = value.as_ref().skip_binder().visit_with(&mut collector);
        .                   assert!(result.is_continue()); // should never have stopped early
      640 ( 0.00%)          collector.regions
        .               }
        .           
        .               /// Replaces any late-bound regions bound in `value` with `'erased`. Useful in codegen but also
        .               /// method lookup and a few other places where precise region relationships are not required.
        .               pub fn erase_late_bound_regions<T>(self, value: Binder<'tcx, T>) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
      312 ( 0.00%)          self.replace_late_bound_regions(value, |_| self.lifetimes.re_erased).0
        .               }
        .           
        .               /// Rewrite any late-bound regions so that they are anonymous. Region numbers are
        .               /// assigned starting at 0 and increasing monotonically in the order traversed
        .               /// by the fold operation.
        .               ///
        .               /// The chief purpose of this function is to canonicalize regions so that two
        .               /// `FnSig`s or `TraitRef`s which are equivalent up to region naming will become
        .               /// structurally identical. For example, `for<'a, 'b> fn(&'a isize, &'b isize)` and
        .               /// `for<'a, 'b> fn(&'b isize, &'a isize)` will become identical after anonymization.
   25,246 ( 0.00%)      pub fn anonymize_late_bound_regions<T>(self, sig: Binder<'tcx, T>) -> Binder<'tcx, T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
   17,810 ( 0.00%)          let mut counter = 0;
    1,179 ( 0.00%)          let inner = self
        .                       .replace_late_bound_regions(sig, |_| {
        .                           let br = ty::BoundRegion {
        .                               var: ty::BoundVar::from_u32(counter),
        .                               kind: ty::BrAnon(counter),
        .                           };
        .                           let r = self.mk_region(ty::ReLateBound(ty::INNERMOST, br));
        .                           counter += 1;
        .                           r
        .                       })
        .                       .0;
    3,562 ( 0.00%)          let bound_vars = self.mk_bound_variable_kinds(
   10,686 ( 0.00%)              (0..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i))),
        .                   );
   19,914 ( 0.00%)          Binder::bind_with_vars(inner, bound_vars)
   21,690 ( 0.00%)      }
        .           }
        .           
        .           pub struct ValidateBoundVars<'tcx> {
        .               bound_vars: &'tcx ty::List<ty::BoundVariableKind>,
        .               binder_index: ty::DebruijnIndex,
        .               // We may encounter the same variable at different levels of binding, so
        .               // this can't just be `Ty`
        .               visited: SsoHashSet<(ty::DebruijnIndex, Ty<'tcx>)>,
-- line 902 ----------------------------------------
-- line 1004 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               current_index: ty::DebruijnIndex,
        .               amount: u32,
        .           }
        .           
        .           impl<'tcx> Shifter<'tcx> {
        .               pub fn new(tcx: TyCtxt<'tcx>, amount: u32) -> Self {
        .                   Shifter { tcx, current_index: ty::INNERMOST, amount }
      346 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        .                   self.tcx
        .               }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
-- line 1020 ----------------------------------------
-- line 1038 ----------------------------------------
        .                               self.tcx.mk_region(shifted)
        .                           }
        .                       }
        .                       _ => r,
        .                   }
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
      346 ( 0.00%)          match *ty.kind() {
        .                       ty::Bound(debruijn, bound_ty) => {
        .                           if self.amount == 0 || debruijn < self.current_index {
        .                               ty
        .                           } else {
        .                               let debruijn = debruijn.shifted_in(self.amount);
        .                               self.tcx.mk_ty(ty::Bound(debruijn, bound_ty))
        .                           }
        .                       }
        .           
      519 ( 0.00%)              _ => ty.super_fold_with(self),
        .                   }
        .               }
        .           
        .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
        .                   if let ty::Const { val: ty::ConstKind::Bound(debruijn, bound_ct), ty } = *ct {
        .                       if self.amount == 0 || debruijn < self.current_index {
        .                           ct
        .                       } else {
-- line 1064 ----------------------------------------
-- line 1085 ----------------------------------------
        .           }
        .           
        .           pub fn shift_vars<'tcx, T>(tcx: TyCtxt<'tcx>, value: T, amount: u32) -> T
        .           where
        .               T: TypeFoldable<'tcx>,
        .           {
        .               debug!("shift_vars(value={:?}, amount={})", value, amount);
        .           
      346 ( 0.00%)      value.fold_with(&mut Shifter::new(tcx, amount))
        .           }
        .           
        .           #[derive(Debug, PartialEq, Eq, Copy, Clone)]
        .           struct FoundEscapingVars;
        .           
        .           /// An "escaping var" is a bound var whose binder is not part of `t`. A bound var can be a
        .           /// bound region or a bound type.
        .           ///
-- line 1101 ----------------------------------------
-- line 1128 ----------------------------------------
        .           
        .           impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {
        .               type BreakTy = FoundEscapingVars;
        .           
        .               fn visit_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: &Binder<'tcx, T>,
        .               ) -> ControlFlow<Self::BreakTy> {
    1,748 ( 0.00%)          self.outer_index.shift_in(1);
        .                   let result = t.super_visit_with(self);
    2,235 ( 0.00%)          self.outer_index.shift_out(1);
        .                   result
        .               }
        .           
        .               #[inline]
        .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // If the outer-exclusive-binder is *strictly greater* than
        .                   // `outer_index`, that means that `t` contains some content
        .                   // bound at `outer_index` or above (because
-- line 1146 ----------------------------------------
-- line 1160 ----------------------------------------
        .                   // visited.
        .                   if r.bound_at_or_above_binder(self.outer_index) {
        .                       ControlFlow::Break(FoundEscapingVars)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
       30 ( 0.00%)      fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // we don't have a `visit_infer_const` callback, so we have to
        .                   // hook in here to catch this case (annoying...), but
        .                   // otherwise we do want to remember to visit the rest of the
        .                   // const, as it has types/regions embedded in a lot of other
        .                   // places.
       59 ( 0.00%)          match ct.val {
        .                       ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {
        .                           ControlFlow::Break(FoundEscapingVars)
        .                       }
       21 ( 0.00%)              _ => ct.super_visit_with(self),
        .                   }
       30 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   if predicate.inner.outer_exclusive_binder > self.outer_index {
        .                       ControlFlow::Break(FoundEscapingVars)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
-- line 1188 ----------------------------------------
-- line 1210 ----------------------------------------
        .               #[instrument(level = "trace")]
        .               fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<Self::BreakTy> {
        .                   debug!(
        .                       "HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}",
        .                       t,
        .                       t.flags(),
        .                       self.flags
        .                   );
   97,957 ( 0.02%)          if t.flags().intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        .               #[inline]
        .               #[instrument(skip(self), level = "trace")]
        .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
      660 ( 0.00%)          let flags = r.type_flags();
        .                   trace!(r.flags=?flags);
        .                   if flags.intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        .               #[inline]
        .               #[instrument(level = "trace")]
        .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
    1,883 ( 0.00%)          let flags = FlagComputation::for_const(c);
        .                   trace!(r.flags=?flags);
      490 ( 0.00%)          if flags.intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        .               #[inline]
        .               #[instrument(level = "trace")]
        .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
    5,635 ( 0.00%)          let flags = FlagComputation::for_unevaluated_const(uv);
        .                   trace!(r.flags=?flags);
        .                   if flags.intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
-- line 1260 ----------------------------------------
-- line 1285 ----------------------------------------
        .               /// them constraints `'a == 'b`. But if you have `<&'a u32 as
        .               /// Trait>::Foo` and `<&'b u32 as Trait>::Foo`, normalizing those
        .               /// types may mean that `'a` and `'b` don't appear in the results,
        .               /// so they are not considered *constrained*.
        .               just_constrained: bool,
        .           }
        .           
        .           impl LateBoundRegionsCollector {
      160 ( 0.00%)      fn new(just_constrained: bool) -> Self {
    1,120 ( 0.00%)          LateBoundRegionsCollector {
        .                       current_index: ty::INNERMOST,
        .                       regions: Default::default(),
        .                       just_constrained,
        .                   }
      160 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {
        .               fn visit_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: &Binder<'tcx, T>,
        .               ) -> ControlFlow<Self::BreakTy> {
        .                   self.current_index.shift_in(1);
        .                   let result = t.super_visit_with(self);
        .                   self.current_index.shift_out(1);
        .                   result
        .               }
        .           
      789 ( 0.00%)      fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // if we are only looking for "constrained" region, we have to
        .                   // ignore the inputs to a projection, as they may not appear
        .                   // in the normalized form
    1,186 ( 0.00%)          if self.just_constrained {
    1,821 ( 0.00%)              if let ty::Projection(..) | ty::Opaque(..) = t.kind() {
        .                           return ControlFlow::CONTINUE;
        .                       }
        .                   }
        .           
    1,466 ( 0.00%)          t.super_visit_with(self)
      574 ( 0.00%)      }
        .           
        .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // if we are only looking for "constrained" region, we have to
        .                   // ignore the inputs of an unevaluated const, as they may not appear
        .                   // in the normalized form
       48 ( 0.00%)          if self.just_constrained {
       48 ( 0.00%)              if let ty::ConstKind::Unevaluated(..) = c.val {
        .                           return ControlFlow::CONTINUE;
        .                       }
        .                   }
        .           
        .                   c.super_visit_with(self)
        .               }
        .           
        .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
      570 ( 0.00%)          if let ty::ReLateBound(debruijn, br) = *r {
      114 ( 0.00%)              if debruijn == self.current_index {
        .                           self.regions.insert(br.kind);
        .                       }
        .                   }
        .                   ControlFlow::CONTINUE
        .               }
        .           }

   43,491 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core/raw.rs
--------------------------------------------------------------------------------
Ir               

-- line 30 ----------------------------------------
      .                               bucket.write(i - offset);
      .                           } else if i >= start {
      .                               self.indices.erase(bucket);
      .                           }
      .                       }
      .                   }
      .               }
      .           
688,457 ( 0.12%)      pub(crate) fn entry(&mut self, hash: HashValue, key: K) -> Entry<'_, K, V>
      .               where
      .                   K: Eq,
      .               {
      .                   let eq = equivalent(&key, &self.entries);
 21,045 ( 0.00%)          match self.indices.find(hash.get(), eq) {
      .                       // SAFETY: The entry is created with a live raw bucket, at the same time
      .                       // we have a &mut reference to the map, so it can not be modified further.
 67,689 ( 0.01%)              Some(raw_bucket) => Entry::Occupied(OccupiedEntry {
      .                           map: self,
      .                           raw_bucket,
 47,856 ( 0.01%)                  key,
      .                       }),
243,018 ( 0.04%)              None => Entry::Vacant(VacantEntry {
      .                           map: self,
      .                           hash,
298,890 ( 0.05%)                  key,
      .                       }),
      .                   }
594,502 ( 0.11%)      }
      .           
      .               pub(super) fn indices_mut(&mut self) -> impl Iterator<Item = &mut usize> {
      .                   // SAFETY: we're not letting any of the buckets escape this function,
      .                   // only the item references that are appropriately bound to `&mut self`.
      .                   unsafe { self.indices.iter().map(|bucket| bucket.as_mut()) }
      .               }
      .           
      .               /// Return the raw bucket for the given index
-- line 65 ----------------------------------------
-- line 139 ----------------------------------------
      .               pub fn index(&self) -> usize {
      .                   // SAFETY: we have &mut map keep keeping the bucket stable
      .                   unsafe { self.raw_bucket.read() }
      .               }
      .           
      .               /// Converts into a mutable reference to the entry's value in the map,
      .               /// with a lifetime bound to the map itself.
      .               pub fn into_mut(self) -> &'a mut V {
 13,428 ( 0.00%)          let index = self.index();
 40,284 ( 0.01%)          &mut self.map.entries[index].value
      .               }
      .           
      .               /// Remove and return the key, value pair stored in the map for this entry
      .               ///
      .               /// Like `Vec::swap_remove`, the pair is removed by swapping it with the
      .               /// last element of the map and popping it off. **This perturbs
      .               /// the position of what used to be the last element!**
      .               ///
-- line 156 ----------------------------------------

191,722 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.8.0/src/map/core/raw.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/imports.rs
--------------------------------------------------------------------------------
Ir                 

-- line 109 ----------------------------------------
        .               /// The resolution of `module_path`.
        .               pub imported_module: Cell<Option<ModuleOrUniformRoot<'a>>>,
        .               pub vis: Cell<ty::Visibility>,
        .               pub used: Cell<bool>,
        .           }
        .           
        .           impl<'a> Import<'a> {
        .               pub fn is_glob(&self) -> bool {
   74,975 ( 0.01%)          matches!(self.kind, ImportKind::Glob { .. })
        .               }
        .           
        .               pub fn is_nested(&self) -> bool {
        .                   match self.kind {
        .                       ImportKind::Single { nested, .. } => nested,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               crate fn crate_lint(&self) -> CrateLint {
      165 ( 0.00%)          CrateLint::UsePath { root_id: self.root_id, root_span: self.root_span }
      291 ( 0.00%)      }
        .           }
        .           
  149,445 ( 0.03%)  #[derive(Clone, Default, Debug)]
        .           /// Records information about the resolution of a name in a namespace of a module.
        .           pub struct NameResolution<'a> {
        .               /// Single imports that may define the name in the namespace.
        .               /// Imports are arena-allocated, so it's ok to use pointers as keys.
        .               single_imports: FxHashSet<PtrKey<'a, Import<'a>>>,
        .               /// The least shadowable known binding for this name, or None if there are no known bindings.
        .               pub binding: Option<&'a NameBinding<'a>>,
        .               shadowed_glob: Option<&'a NameBinding<'a>>,
        .           }
        .           
        .           impl<'a> NameResolution<'a> {
        .               // Returns the binding for the name if it is known or None if it not known.
        .               pub(crate) fn binding(&self) -> Option<&'a NameBinding<'a>> {
   99,158 ( 0.02%)          self.binding.and_then(|binding| {
   99,338 ( 0.02%)              if !binding.is_glob_import() || self.single_imports.is_empty() {
        .                           Some(binding)
        .                       } else {
        .                           None
        .                       }
        .                   })
        .               }
        .           
        .               crate fn add_single_import(&mut self, import: &'a Import<'a>) {
-- line 155 ----------------------------------------
-- line 177 ----------------------------------------
        .                   &mut self,
        .                   module: ModuleOrUniformRoot<'a>,
        .                   ident: Ident,
        .                   ns: Namespace,
        .                   parent_scope: &ParentScope<'a>,
        .                   record_used: bool,
        .                   path_span: Span,
        .               ) -> Result<&'a NameBinding<'a>, Determinacy> {
   11,576 ( 0.00%)          self.resolve_ident_in_module_unadjusted_ext(
        .                       module,
        .                       ident,
        .                       ns,
        .                       parent_scope,
        .                       false,
        .                       record_used,
        .                       path_span,
        .                   )
        .                   .map_err(|(determinacy, _)| determinacy)
        .               }
        .           
        .               /// Attempts to resolve `ident` in namespaces `ns` of `module`.
        .               /// Invariant: if `record_used` is `Some`, expansion and import resolution must be complete.
   72,177 ( 0.01%)      crate fn resolve_ident_in_module_unadjusted_ext(
        .                   &mut self,
        .                   module: ModuleOrUniformRoot<'a>,
        .                   ident: Ident,
        .                   ns: Namespace,
        .                   parent_scope: &ParentScope<'a>,
        .                   restricted_shadowing: bool,
        .                   record_used: bool,
        .                   path_span: Span,
-- line 207 ----------------------------------------
-- line 259 ----------------------------------------
        .                               path_span,
        .                           );
        .                           return binding.map_err(|determinacy| (determinacy, Weak::No));
        .                       }
        .                   };
        .           
        .                   let key = self.new_key(ident, ns);
        .                   let resolution =
   27,496 ( 0.00%)              self.resolution(module, key).try_borrow_mut().map_err(|_| (Determined, Weak::No))?; // This happens when there is a cycle of imports.
        .           
   12,425 ( 0.00%)          if let Some(binding) = resolution.binding {
    1,055 ( 0.00%)              if !restricted_shadowing && binding.expansion != LocalExpnId::ROOT {
      780 ( 0.00%)                  if let NameBindingKind::Res(_, true) = binding.kind {
        .                               self.macro_expanded_macro_export_errors.insert((path_span, binding.span));
        .                           }
        .                       }
        .                   }
        .           
   13,748 ( 0.00%)          let check_usable = |this: &mut Self, binding: &'a NameBinding<'a>| {
    1,854 ( 0.00%)              if let Some(unusable_binding) = this.unusable_binding {
        .                           if ptr::eq(binding, unusable_binding) {
        .                               return Err((Determined, Weak::No));
        .                           }
        .                       }
      990 ( 0.00%)              let usable = this.is_accessible_from(binding.vis, parent_scope.module);
    1,144 ( 0.00%)              if usable { Ok(binding) } else { Err((Determined, Weak::No)) }
        .                   };
        .           
    6,874 ( 0.00%)          if record_used {
    3,290 ( 0.00%)              return resolution
        .                           .binding
        .                           .and_then(|binding| {
        .                               // If the primary binding is unusable, search further and return the shadowed glob
        .                               // binding if it exists. What we really want here is having two separate scopes in
        .                               // a module - one for non-globs and one for globs, but until that's done use this
        .                               // hack to avoid inconsistent resolution ICEs during import validation.
    3,894 ( 0.00%)                      if let Some(unusable_binding) = self.unusable_binding {
        .                                   if ptr::eq(binding, unusable_binding) {
        .                                       return resolution.shadowed_glob;
        .                                   }
        .                               }
        .                               Some(binding)
        .                           })
        .                           .ok_or((Determined, Weak::No))
        .                           .and_then(|binding| {
    1,628 ( 0.00%)                      if self.last_import_segment && check_usable(self, binding).is_err() {
        .                                   Err((Determined, Weak::No))
        .                               } else {
    4,620 ( 0.00%)                          self.record_use(ident, binding, restricted_shadowing);
        .           
    2,310 ( 0.00%)                          if let Some(shadowed_glob) = resolution.shadowed_glob {
        .                                       // Forbid expanded shadowing to avoid time travel.
        .                                       if restricted_shadowing
        .                                           && binding.expansion != LocalExpnId::ROOT
        .                                           && binding.res() != shadowed_glob.res()
        .                                       {
        .                                           self.ambiguity_errors.push(AmbiguityError {
        .                                               kind: AmbiguityKind::GlobVsExpanded,
        .                                               ident,
-- line 317 ----------------------------------------
-- line 318 ----------------------------------------
        .                                               b1: binding,
        .                                               b2: shadowed_glob,
        .                                               misc1: AmbiguityErrorMisc::None,
        .                                               misc2: AmbiguityErrorMisc::None,
        .                                           });
        .                                       }
        .                                   }
        .           
    3,850 ( 0.00%)                          if !self.is_accessible_from(binding.vis, parent_scope.module) {
        .                                       self.privacy_errors.push(PrivacyError {
        .                                           ident,
        .                                           binding,
        .                                           dedup_span: path_span,
        .                                       });
        .                                   }
        .           
        .                                   Ok(binding)
        .                               }
        .                           });
        .                   }
        .           
        .                   // Items and single imports are not shadowable, if we have one, then it's determined.
    5,376 ( 0.00%)          if let Some(binding) = resolution.binding {
       60 ( 0.00%)              if !binding.is_glob_import() {
        .                           return check_usable(self, binding);
        .                       }
        .                   }
        .           
        .                   // --- From now on we either have a glob resolution or no resolution. ---
        .           
        .                   // Check if one of single imports can still define the name,
        .                   // if it can then our result is not determined and can be invalidated.
   15,050 ( 0.00%)          for single_import in &resolution.single_imports {
        .                       if !self.is_accessible_from(single_import.vis.get(), parent_scope.module) {
        .                           continue;
        .                       }
        .                       let module = match single_import.imported_module.get() {
        .                           Some(x) => x,
        .                           None => return Err((Undetermined, Weak::No)),
        .                       };
        .                       let ident = match single_import.kind {
-- line 358 ----------------------------------------
-- line 385 ----------------------------------------
        .                   // Additionally, any macro in any module can plant names in the root module if it creates
        .                   // `macro_export` macros, so the root module effectively has unresolved invocations if any
        .                   // module has unresolved invocations.
        .                   // However, it causes resolution/expansion to stuck too often (#53144), so, to make
        .                   // progress, we have to ignore those potential unresolved invocations from other modules
        .                   // and prohibit access to macro-expanded `macro_export` macros instead (unless restricted
        .                   // shadowing is enabled, see `macro_expanded_macro_export_errors`).
        .                   let unexpanded_macros = !module.unexpanded_invocations.borrow().is_empty();
    7,525 ( 0.00%)          if let Some(binding) = resolution.binding {
        .                       if !unexpanded_macros || ns == MacroNS || restricted_shadowing {
        .                           return check_usable(self, binding);
        .                       } else {
        .                           return Err((Undetermined, Weak::No));
        .                       }
        .                   }
        .           
        .                   // --- From now on we have no resolution. ---
-- line 401 ----------------------------------------
-- line 403 ----------------------------------------
        .                   // Now we are in situation when new item/import can appear only from a glob or a macro
        .                   // expansion. With restricted shadowing names from globs and macro expansions cannot
        .                   // shadow names from outer scopes, so we can freely fallback from module search to search
        .                   // in outer scopes. For `early_resolve_ident_in_lexical_scope` to continue search in outer
        .                   // scopes we return `Undetermined` with `Weak::Yes`.
        .           
        .                   // Check if one of unexpanded macros can still define the name,
        .                   // if it can then our "no resolution" result is not determined and can be invalidated.
    1,505 ( 0.00%)          if unexpanded_macros {
        .                       return Err((Undetermined, Weak::Yes));
        .                   }
        .           
        .                   // Check if one of glob imports can still define the name,
        .                   // if it can then our "no resolution" result is not determined and can be invalidated.
    5,388 ( 0.00%)          for glob_import in module.globs.borrow().iter() {
      244 ( 0.00%)              if !self.is_accessible_from(glob_import.vis.get(), parent_scope.module) {
        .                           continue;
        .                       }
      318 ( 0.00%)              let module = match glob_import.imported_module.get() {
        .                           Some(ModuleOrUniformRoot::Module(module)) => module,
        .                           Some(_) => continue,
        .                           None => return Err((Undetermined, Weak::Yes)),
        .                       };
        .                       let tmp_parent_scope;
        .                       let (mut adjusted_parent_scope, mut ident) =
        .                           (parent_scope, ident.normalize_to_macros_2_0());
        .                       match ident.span.glob_adjust(module.expansion, glob_import.span) {
-- line 429 ----------------------------------------
-- line 452 ----------------------------------------
        .                               continue;
        .                           }
        .                           Ok(_) | Err(Undetermined) => return Err((Undetermined, Weak::Yes)),
        .                       }
        .                   }
        .           
        .                   // No resolution and no one else can define the name - determinate error.
        .                   Err((Determined, Weak::No))
   61,866 ( 0.01%)      }
        .           
        .               // Given a binding and an import that resolves to it,
        .               // return the corresponding binding defined by the import.
  447,760 ( 0.08%)      crate fn import(
        .                   &self,
        .                   binding: &'a NameBinding<'a>,
        .                   import: &'a Import<'a>,
        .               ) -> &'a NameBinding<'a> {
  447,760 ( 0.08%)          let vis = if binding.vis.is_at_least(import.vis.get(), self)
        .                       || pub_use_of_private_extern_crate_hack(import, binding)
        .                   {
        .                       import.vis.get()
        .                   } else {
        .                       binding.vis
        .                   };
        .           
  134,328 ( 0.02%)          if let ImportKind::Glob { ref max_vis, .. } = import.kind {
  178,704 ( 0.03%)              if vis == import.vis.get() || vis.is_at_least(max_vis.get(), self) {
        .                           max_vis.set(vis)
        .                       }
        .                   }
        .           
   44,776 ( 0.01%)          self.arenas.alloc_name_binding(NameBinding {
        .                       kind: NameBindingKind::Import { binding, import, used: Cell::new(false) },
        .                       ambiguity: None,
   44,776 ( 0.01%)              span: import.span,
        .                       vis,
   44,776 ( 0.01%)              expansion: import.parent_scope.expansion,
        .                   })
  358,208 ( 0.06%)      }
        .           
        .               // Define the name or return the existing binding if there is a collision.
  649,344 ( 0.12%)      crate fn try_define(
        .                   &mut self,
        .                   module: Module<'a>,
        .                   key: BindingKey,
        .                   binding: &'a NameBinding<'a>,
        .               ) -> Result<(), &'a NameBinding<'a>> {
        .                   let res = binding.res();
  974,016 ( 0.17%)          self.check_reserved_macro_name(key.ident, res);
        .                   self.set_binding_parent_module(binding, module);
  324,672 ( 0.06%)          self.update_resolution(module, key, |this, resolution| {
        .                       if let Some(old_binding) = resolution.binding {
   24,820 ( 0.00%)                  if res == Res::Err {
        .                               // Do not override real bindings with `Res::Err`s from error recovery.
        .                               return Ok(());
        .                           }
    9,928 ( 0.00%)                  match (old_binding.is_glob_import(), binding.is_glob_import()) {
        .                               (true, true) => {
   14,892 ( 0.00%)                          if res != old_binding.res() {
        .                                       resolution.binding = Some(this.ambiguity(
        .                                           AmbiguityKind::GlobVsGlob,
        .                                           old_binding,
        .                                           binding,
        .                                       ));
   39,712 ( 0.01%)                          } else if !old_binding.vis.is_at_least(binding.vis, &*this) {
        .                                       // We are glob-importing the same item but with greater visibility.
        .                                       resolution.binding = Some(binding);
        .                                   }
        .                               }
        .                               (old_glob @ true, false) | (old_glob @ false, true) => {
        .                                   let (glob_binding, nonglob_binding) =
        .                                       if old_glob { (old_binding, binding) } else { (binding, old_binding) };
        .                                   if glob_binding.res() != nonglob_binding.res()
-- line 524 ----------------------------------------
-- line 535 ----------------------------------------
        .                                   }
        .                                   resolution.shadowed_glob = Some(glob_binding);
        .                               }
        .                               (false, false) => {
        .                                   return Err(old_binding);
        .                               }
        .                           }
        .                       } else {
  147,444 ( 0.03%)                  resolution.binding = Some(binding);
        .                       }
        .           
        .                       Ok(())
        .                   })
  487,008 ( 0.09%)      }
        .           
        .               fn ambiguity(
        .                   &self,
        .                   kind: AmbiguityKind,
        .                   primary_binding: &'a NameBinding<'a>,
        .                   secondary_binding: &'a NameBinding<'a>,
        .               ) -> &'a NameBinding<'a> {
        .                   self.arenas.alloc_name_binding(NameBinding {
-- line 556 ----------------------------------------
-- line 563 ----------------------------------------
        .               // If the resolution becomes a success, define it in the module's glob importers.
        .               fn update_resolution<T, F>(&mut self, module: Module<'a>, key: BindingKey, f: F) -> T
        .               where
        .                   F: FnOnce(&mut Resolver<'a>, &mut NameResolution<'a>) -> T,
        .               {
        .                   // Ensure that `resolution` isn't borrowed when defining in the module's glob importers,
        .                   // during which the resolution might end up getting re-defined via a glob cycle.
        .                   let (binding, t) = {
  866,448 ( 0.15%)              let resolution = &mut *self.resolution(module, key).borrow_mut();
        .                       let old_binding = resolution.binding();
        .           
        .                       let t = f(self, resolution);
        .           
        .                       match resolution.binding() {
        .                           _ if old_binding.is_some() => return t,
        .                           None => return t,
        .                           Some(binding) => match old_binding {
-- line 579 ----------------------------------------
-- line 580 ----------------------------------------
        .                               Some(old_binding) if ptr::eq(old_binding, binding) => return t,
        .                               _ => (binding, t),
        .                           },
        .                       }
        .                   };
        .           
        .                   // Define `binding` in `module`s glob importers.
        .                   for import in module.glob_importers.borrow_mut().iter() {
   19,912 ( 0.00%)              let mut ident = key.ident;
   44,802 ( 0.01%)              let scope = match ident.span.reverse_glob_adjust(module.expansion, import.span) {
        .                           Some(Some(def)) => self.expn_def_scope(def),
    9,956 ( 0.00%)                  Some(None) => import.parent_scope.module,
        .                           None => continue,
        .                       };
    9,956 ( 0.00%)              if self.is_accessible_from(binding.vis, scope) {
   19,856 ( 0.00%)                  let imported_binding = self.import(binding, import);
        .                           let key = BindingKey { ident, ..key };
   74,460 ( 0.01%)                  let _ = self.try_define(import.parent_scope.module, key, imported_binding);
        .                       }
        .                   }
        .           
        .                   t
        .               }
        .           
        .               // Define a "dummy" resolution containing a Res::Err as a placeholder for a
        .               // failed resolution
-- line 605 ----------------------------------------
-- line 643 ----------------------------------------
        .               // This is a fixed-point algorithm. We resolve imports until our efforts
        .               // are stymied by an unresolved import; then we bail out of the current
        .               // module and continue. We terminate successfully once no more imports
        .               // remain or unsuccessfully when no forward progress in resolving imports
        .               // is made.
        .           
        .               /// Resolves all imports for the crate. This method performs the fixed-
        .               /// point iteration.
       16 ( 0.00%)      pub fn resolve_imports(&mut self) {
       10 ( 0.00%)          let mut prev_num_indeterminates = self.r.indeterminate_imports.len() + 1;
       29 ( 0.00%)          while self.r.indeterminate_imports.len() < prev_num_indeterminates {
        .                       prev_num_indeterminates = self.r.indeterminate_imports.len();
      154 ( 0.00%)              for import in mem::take(&mut self.r.indeterminate_imports) {
        .                           match self.resolve_import(&import) {
       60 ( 0.00%)                      true => self.r.determined_imports.push(import),
       26 ( 0.00%)                      false => self.r.indeterminate_imports.push(import),
        .                           }
        .                       }
        .                   }
       16 ( 0.00%)      }
        .           
        7 ( 0.00%)      pub fn finalize_imports(&mut self) {
        2 ( 0.00%)          for module in self.r.arenas.local_modules().iter() {
       15 ( 0.00%)              self.finalize_resolutions_in(module);
        .                   }
        .           
        .                   let mut seen_spans = FxHashSet::default();
        .                   let mut errors = vec![];
        .                   let mut prev_root_id: NodeId = NodeId::from_u32(0);
        1 ( 0.00%)          let determined_imports = mem::take(&mut self.r.determined_imports);
        1 ( 0.00%)          let indeterminate_imports = mem::take(&mut self.r.indeterminate_imports);
        .           
       12 ( 0.00%)          for (is_indeterminate, import) in determined_imports
        .                       .into_iter()
        .                       .map(|i| (false, i))
        .                       .chain(indeterminate_imports.into_iter().map(|i| (true, i)))
        .                   {
      306 ( 0.00%)              if let Some(err) = self.finalize_import(import) {
        .                           if let ImportKind::Single { source, ref source_bindings, .. } = import.kind {
        .                               if source.name == kw::SelfLower {
        .                                   // Silence `unresolved import` error if E0429 is already emitted
        .                                   if let Err(Determined) = source_bindings.value_ns.get() {
        .                                       continue;
        .                                   }
        .                               }
        .                           }
-- line 688 ----------------------------------------
-- line 703 ----------------------------------------
        .                               let path = import_path_to_string(
        .                                   &import.module_path.iter().map(|seg| seg.ident).collect::<Vec<_>>(),
        .                                   &import.kind,
        .                                   err.span,
        .                               );
        .                               errors.push((path, err));
        .                               prev_root_id = import.root_id;
        .                           }
      102 ( 0.00%)              } else if is_indeterminate {
        .                           // Consider erroneous imports used to avoid duplicate diagnostics.
        .                           self.r.used_imports.insert(import.id);
        .                           let path = import_path_to_string(
        .                               &import.module_path.iter().map(|seg| seg.ident).collect::<Vec<_>>(),
        .                               &import.kind,
        .                               import.span,
        .                           );
        .                           let err = UnresolvedImportError {
-- line 719 ----------------------------------------
-- line 721 ----------------------------------------
        .                               label: None,
        .                               note: Vec::new(),
        .                               suggestion: None,
        .                           };
        .                           errors.push((path, err));
        .                       }
        .                   }
        .           
        1 ( 0.00%)          if !errors.is_empty() {
        .                       self.throw_unresolved_import_error(errors, None);
        .                   }
        8 ( 0.00%)      }
        .           
        .               fn throw_unresolved_import_error(
        .                   &self,
        .                   errors: Vec<(String, UnresolvedImportError)>,
        .                   span: Option<MultiSpan>,
        .               ) {
        .                   /// Upper limit on the number of `span_label` messages.
        .                   const MAX_LABEL_COUNT: usize = 10;
-- line 740 ----------------------------------------
-- line 776 ----------------------------------------
        .               /// If successful, the resolved bindings are written into the module.
        .               fn resolve_import(&mut self, import: &'b Import<'b>) -> bool {
        .                   debug!(
        .                       "(resolving import for module) resolving import `{}::...` in `{}`",
        .                       Segment::names_to_string(&import.module_path),
        .                       module_to_string(import.parent_scope.module).unwrap_or_else(|| "???".to_string()),
        .                   );
        .           
      257 ( 0.00%)          let module = if let Some(module) = import.imported_module.get() {
       52 ( 0.00%)              module
        .                   } else {
        .                       // For better failure detection, pretend that the import will
        .                       // not define any names while resolving its module path.
        .                       let orig_vis = import.vis.replace(ty::Visibility::Invisible);
        .                       let path_res = self.r.resolve_path(
        .                           &import.module_path,
        .                           None,
       51 ( 0.00%)                  &import.parent_scope,
        .                           false,
        .                           import.span,
        .                           import.crate_lint(),
        .                       );
        .                       import.vis.set(orig_vis);
        .           
      357 ( 0.00%)              match path_res {
      255 ( 0.00%)                  PathResult::Module(module) => module,
        .                           PathResult::Indeterminate => return false,
        .                           PathResult::NonModule(..) | PathResult::Failed { .. } => return true,
        .                       }
        .                   };
        .           
        .                   import.imported_module.set(Some(module));
      861 ( 0.00%)          let (source, target, source_bindings, target_bindings, type_ns_only) = match import.kind {
        .                       ImportKind::Single {
        .                           source,
        .                           target,
       68 ( 0.00%)                  ref source_bindings,
       68 ( 0.00%)                  ref target_bindings,
       68 ( 0.00%)                  type_ns_only,
        .                           ..
        .                       } => (source, target, source_bindings, target_bindings, type_ns_only),
        .                       ImportKind::Glob { .. } => {
        .                           self.resolve_glob_import(import);
        .                           return true;
        .                       }
        .                       _ => unreachable!(),
        .                   };
        .           
       68 ( 0.00%)          let mut indeterminate = false;
    2,924 ( 0.00%)          self.r.per_ns(|this, ns| {
      612 ( 0.00%)              if !type_ns_only || ns == TypeNS {
      840 ( 0.00%)                  if let Err(Undetermined) = source_bindings[ns].get() {
        .                               // For better failure detection, pretend that the import will
        .                               // not define any names while resolving its module path.
      180 ( 0.00%)                      let orig_vis = import.vis.replace(ty::Visibility::Invisible);
        .                               let binding = this.resolve_ident_in_module(
      540 ( 0.00%)                          module,
      540 ( 0.00%)                          source,
        .                                   ns,
      180 ( 0.00%)                          &import.parent_scope,
        .                                   false,
      180 ( 0.00%)                          import.span,
        .                               );
        .                               import.vis.set(orig_vis);
        .                               source_bindings[ns].set(binding);
        .                           } else {
        .                               return;
        .                           };
        .           
      180 ( 0.00%)                  let parent = import.parent_scope.module;
      452 ( 0.00%)                  match source_bindings[ns].get() {
      162 ( 0.00%)                      Err(Undetermined) => indeterminate = true,
        .                               // Don't update the resolution, because it was never added.
      164 ( 0.00%)                      Err(Determined) if target.name == kw::Underscore => {}
        .                               Err(Determined) => {
      164 ( 0.00%)                          let key = this.new_key(target, ns);
        .                                   this.update_resolution(parent, key, |_, resolution| {
      164 ( 0.00%)                              resolution.single_imports.remove(&PtrKey(import));
        .                                   });
        .                               }
        .                               Ok(binding) if !binding.is_importable() => {
        .                                   let msg = format!("`{}` is not directly importable", target);
        .                                   struct_span_err!(this.session, import.span, E0253, "{}", &msg)
        .                                       .span_label(import.span, "cannot be imported directly")
        .                                       .emit();
        .                                   // Do not import this illegal binding. Import a dummy binding and pretend
        .                                   // everything is fine
        .                                   this.import_dummy_binding(import);
        .                               }
        .                               Ok(binding) => {
      176 ( 0.00%)                          let imported_binding = this.import(binding, import);
       44 ( 0.00%)                          target_bindings[ns].set(Some(imported_binding));
      132 ( 0.00%)                          this.define(parent, target, ns, imported_binding);
        .                               }
        .                           }
        .                       }
    1,632 ( 0.00%)          });
        .           
      178 ( 0.00%)          !indeterminate
        .               }
        .           
        .               /// Performs final import resolution, consistency checks and error reporting.
        .               ///
        .               /// Optionally returns an unresolved import error. This error is buffered and used to
        .               /// consolidate multiple unresolved import errors into a single diagnostic.
      510 ( 0.00%)      fn finalize_import(&mut self, import: &'b Import<'b>) -> Option<UnresolvedImportError> {
        .                   let orig_vis = import.vis.replace(ty::Visibility::Invisible);
      204 ( 0.00%)          let orig_unusable_binding = match &import.kind {
        .                       ImportKind::Single { target_bindings, .. } => {
       84 ( 0.00%)                  Some(mem::replace(&mut self.r.unusable_binding, target_bindings[TypeNS].get()))
        .                       }
        .                       _ => None,
        .                   };
      102 ( 0.00%)          let prev_ambiguity_errors_len = self.r.ambiguity_errors.len();
        .                   let path_res = self.r.resolve_path(
        .                       &import.module_path,
        .                       None,
       51 ( 0.00%)              &import.parent_scope,
        .                       true,
       51 ( 0.00%)              import.span,
        .                       import.crate_lint(),
        .                   );
       51 ( 0.00%)          let no_ambiguity = self.r.ambiguity_errors.len() == prev_ambiguity_errors_len;
       51 ( 0.00%)          if let Some(orig_unusable_binding) = orig_unusable_binding {
       42 ( 0.00%)              self.r.unusable_binding = orig_unusable_binding;
        .                   }
        .                   import.vis.set(orig_vis);
      255 ( 0.00%)          if let PathResult::Failed { .. } | PathResult::NonModule(..) = path_res {
        .                       // Consider erroneous imports used to avoid duplicate diagnostics.
        .                       self.r.used_imports.insert(import.id);
        .                   }
        .                   let module = match path_res {
      153 ( 0.00%)              PathResult::Module(module) => {
        .                           // Consistency checks, analogous to `finalize_macro_resolutions`.
      153 ( 0.00%)                  if let Some(initial_module) = import.imported_module.get() {
      153 ( 0.00%)                      if !ModuleOrUniformRoot::same_def(module, initial_module) && no_ambiguity {
        .                                   span_bug!(import.span, "inconsistent resolution for an import");
        .                               }
        .                           } else if self.r.privacy_errors.is_empty() {
        .                               let msg = "cannot determine resolution for the import";
        .                               let msg_note = "import resolution is stuck, try simplifying other imports";
        .                               self.r.session.struct_span_err(import.span, msg).note(msg_note).emit();
        .                           }
        .           
      153 ( 0.00%)                  module
        .                       }
        .                       PathResult::Failed { is_error_from_last_segment: false, span, label, suggestion } => {
        .                           if no_ambiguity {
        .                               assert!(import.imported_module.get().is_none());
        .                               self.r
        .                                   .report_error(span, ResolutionError::FailedToResolve { label, suggestion });
        .                           }
        .                           return None;
-- line 928 ----------------------------------------
-- line 961 ----------------------------------------
        .                               assert!(import.imported_module.get().is_none());
        .                           }
        .                           // The error was already reported earlier.
        .                           return None;
        .                       }
        .                       PathResult::Indeterminate => unreachable!(),
        .                   };
        .           
      549 ( 0.00%)          let (ident, target, source_bindings, target_bindings, type_ns_only) = match import.kind {
        .                       ImportKind::Single {
        .                           source,
        .                           target,
       42 ( 0.00%)                  ref source_bindings,
       42 ( 0.00%)                  ref target_bindings,
       42 ( 0.00%)                  type_ns_only,
        .                           ..
        .                       } => (source, target, source_bindings, target_bindings, type_ns_only),
       18 ( 0.00%)              ImportKind::Glob { is_prelude, ref max_vis } => {
       27 ( 0.00%)                  if import.module_path.len() <= 1 {
        .                               // HACK(eddyb) `lint_if_path_starts_with_module` needs at least
        .                               // 2 segments, so the `resolve_path` above won't trigger it.
        .                               let mut full_path = import.module_path.clone();
        .                               full_path.push(Segment::from_ident(Ident::empty()));
        .                               self.r.lint_if_path_starts_with_module(
        .                                   import.crate_lint(),
        .                                   &full_path,
        .                                   import.span,
        .                                   None,
        .                               );
        .                           }
        .           
       36 ( 0.00%)                  if let ModuleOrUniformRoot::Module(module) = module {
        9 ( 0.00%)                      if ptr::eq(module, import.parent_scope.module) {
        .                                   // Importing a module into itself is not allowed.
        .                                   return Some(UnresolvedImportError {
        .                                       span: import.span,
        .                                       label: Some(String::from("cannot glob-import a module into itself")),
        .                                       note: Vec::new(),
        .                                       suggestion: None,
        .                                   });
        .                               }
        .                           }
       41 ( 0.00%)                  if !is_prelude &&
        8 ( 0.00%)                     max_vis.get() != ty::Visibility::Invisible && // Allow empty globs.
        8 ( 0.00%)                     !max_vis.get().is_at_least(import.vis.get(), &*self)
        .                           {
        .                               let msg = "glob import doesn't reexport anything because no candidate is public enough";
        .                               self.r.lint_buffer.buffer_lint(UNUSED_IMPORTS, import.id, import.span, msg);
        .                           }
        .                           return None;
        .                       }
        .                       _ => unreachable!(),
        .                   };
        .           
       84 ( 0.00%)          let mut all_ns_err = true;
    1,932 ( 0.00%)          self.r.per_ns(|this, ns| {
      378 ( 0.00%)              if !type_ns_only || ns == TypeNS {
      126 ( 0.00%)                  let orig_vis = import.vis.replace(ty::Visibility::Invisible);
        .                           let orig_unusable_binding =
      252 ( 0.00%)                      mem::replace(&mut this.unusable_binding, target_bindings[ns].get());
        .                           let orig_last_import_segment = mem::replace(&mut this.last_import_segment, true);
        .                           let binding = this.resolve_ident_in_module(
      378 ( 0.00%)                      module,
      504 ( 0.00%)                      ident,
        .                               ns,
      126 ( 0.00%)                      &import.parent_scope,
        .                               true,
        .                               import.span,
        .                           );
      252 ( 0.00%)                  this.last_import_segment = orig_last_import_segment;
      252 ( 0.00%)                  this.unusable_binding = orig_unusable_binding;
        .                           import.vis.set(orig_vis);
        .           
        .                           match binding {
        .                               Ok(binding) => {
        .                                   // Consistency checks, analogous to `finalize_macro_resolutions`.
      132 ( 0.00%)                          let initial_res = source_bindings[ns].get().map(|initial_binding| {
       44 ( 0.00%)                              all_ns_err = false;
      132 ( 0.00%)                              if let Some(target_binding) = target_bindings[ns].get() {
       44 ( 0.00%)                                  if target.name == kw::Underscore
        .                                               && initial_binding.is_extern_crate()
        .                                               && !initial_binding.is_import()
        .                                           {
        .                                               this.record_use(
        .                                                   ident,
        .                                                   target_binding,
        .                                                   import.module_path.is_empty(),
        .                                               );
        .                                           }
        .                                       }
        .                                       initial_binding.res()
        .                                   });
        .                                   let res = binding.res();
      616 ( 0.00%)                          if let Ok(initial_res) = initial_res {
      132 ( 0.00%)                              if res != initial_res && this.ambiguity_errors.is_empty() {
        .                                           span_bug!(import.span, "inconsistent resolution for an import");
        .                                       }
        .                                   } else if res != Res::Err
        .                                       && this.ambiguity_errors.is_empty()
        .                                       && this.privacy_errors.is_empty()
        .                                   {
        .                                       let msg = "cannot determine resolution for the import";
        .                                       let msg_note =
-- line 1063 ----------------------------------------
-- line 1070 ----------------------------------------
        .                                   // single import (see test `issue-55884-2.rs`). In theory single imports should
        .                                   // always block globs, even if they are not yet resolved, so that this kind of
        .                                   // self-inconsistent resolution never happens.
        .                                   // Re-enable the assert when the issue is fixed.
        .                                   // assert!(result[ns].get().is_err());
        .                               }
        .                           }
        .                       }
    1,008 ( 0.00%)          });
        .           
       84 ( 0.00%)          if all_ns_err {
        .                       let mut all_ns_failed = true;
        .                       self.r.per_ns(|this, ns| {
        .                           if !type_ns_only || ns == TypeNS {
        .                               let binding = this.resolve_ident_in_module(
        .                                   module,
        .                                   ident,
        .                                   ns,
        .                                   &import.parent_scope,
-- line 1088 ----------------------------------------
-- line 1175 ----------------------------------------
        .                           })
        .                       } else {
        .                           // `resolve_ident_in_module` reported a privacy error.
        .                           self.r.import_dummy_binding(import);
        .                           None
        .                       };
        .                   }
        .           
       42 ( 0.00%)          let mut reexport_error = None;
       42 ( 0.00%)          let mut any_successful_reexport = false;
       84 ( 0.00%)          let mut crate_private_reexport = false;
      504 ( 0.00%)          self.r.per_ns(|this, ns| {
      294 ( 0.00%)              if let Ok(binding) = source_bindings[ns].get() {
      132 ( 0.00%)                  let vis = import.vis.get();
      264 ( 0.00%)                  if !binding.vis.is_at_least(vis, &*this) {
        .                               reexport_error = Some((ns, binding));
        .                               if let ty::Visibility::Restricted(binding_def_id) = binding.vis {
        .                                   if binding_def_id.is_top_level_module() {
        .                                       crate_private_reexport = true;
        .                                   }
        .                               }
        .                           } else {
       88 ( 0.00%)                      any_successful_reexport = true;
        .                           }
        .                       }
        .                   });
        .           
        .                   // All namespaces must be re-exported with extra visibility for an error to occur.
       84 ( 0.00%)          if !any_successful_reexport {
        .                       let (ns, binding) = reexport_error.unwrap();
        .                       if pub_use_of_private_extern_crate_hack(import, binding) {
        .                           let msg = format!(
        .                               "extern crate `{}` is private, and cannot be \
        .                                              re-exported (error E0365), consider declaring with \
        .                                              `pub`",
        .                               ident
        .                           );
-- line 1211 ----------------------------------------
-- line 1241 ----------------------------------------
        .                                   format!("consider marking `{}` as `pub` in the imported module", ident);
        .                               struct_span_err!(self.r.session, import.span, E0364, "{}", error_msg)
        .                                   .span_note(import.span, &note_msg)
        .                                   .emit();
        .                           }
        .                       }
        .                   }
        .           
      126 ( 0.00%)          if import.module_path.len() <= 1 {
        .                       // HACK(eddyb) `lint_if_path_starts_with_module` needs at least
        .                       // 2 segments, so the `resolve_path` above won't trigger it.
        .                       let mut full_path = import.module_path.clone();
       36 ( 0.00%)              full_path.push(Segment::from_ident(ident));
       84 ( 0.00%)              self.r.per_ns(|this, ns| {
       72 ( 0.00%)                  if let Ok(binding) = source_bindings[ns].get() {
       36 ( 0.00%)                      this.lint_if_path_starts_with_module(
        .                                   import.crate_lint(),
        .                                   &full_path,
       12 ( 0.00%)                          import.span,
        .                                   Some(binding),
        .                               );
        .                           }
        .                       });
        .                   }
        .           
        .                   // Record what this import resolves to for later uses in documentation,
        .                   // this may resolve to either a value or a type, but for documentation
        .                   // purposes it's good enough to just favor one over the other.
    1,176 ( 0.00%)          self.r.per_ns(|this, ns| {
      496 ( 0.00%)              if let Ok(binding) = source_bindings[ns].get() {
      704 ( 0.00%)                  this.import_res_map.entry(import.id).or_default()[ns] = Some(binding.res());
        .                       }
    1,008 ( 0.00%)          });
        .           
      378 ( 0.00%)          self.check_for_redundant_imports(ident, import, source_bindings, target_bindings, target);
        .           
        .                   debug!("(resolving single import) successfully resolved import");
        .                   None
      408 ( 0.00%)      }
        .           
        .               fn check_for_redundant_imports(
        .                   &mut self,
        .                   ident: Ident,
        .                   import: &'b Import<'b>,
        .                   source_bindings: &PerNS<Cell<Result<&'b NameBinding<'b>, Determinacy>>>,
        .                   target_bindings: &PerNS<Cell<Option<&'b NameBinding<'b>>>>,
        .                   target: Ident,
        .               ) {
        .                   // Skip if the import was produced by a macro.
       42 ( 0.00%)          if import.parent_scope.expansion != LocalExpnId::ROOT {
        .                       return;
        .                   }
        .           
        .                   // Skip if we are inside a named module (in contrast to an anonymous
        .                   // module defined by a block).
      126 ( 0.00%)          if let ModuleKind::Def(..) = import.parent_scope.module.kind {
        .                       return;
        .                   }
        .           
        .                   let mut is_redundant = PerNS { value_ns: None, type_ns: None, macro_ns: None };
        .           
        .                   let mut redundant_span = PerNS { value_ns: None, type_ns: None, macro_ns: None };
        .           
        .                   self.r.per_ns(|this, ns| {
-- line 1304 ----------------------------------------
-- line 1350 ----------------------------------------
        .                   let module = match import.imported_module.get().unwrap() {
        .                       ModuleOrUniformRoot::Module(module) => module,
        .                       _ => {
        .                           self.r.session.span_err(import.span, "cannot glob-import all possible crates");
        .                           return;
        .                       }
        .                   };
        .           
       27 ( 0.00%)          if module.is_trait() {
        .                       self.r.session.span_err(import.span, "items in traits are not importable");
        .                       return;
        9 ( 0.00%)          } else if ptr::eq(module, import.parent_scope.module) {
        .                       return;
       36 ( 0.00%)          } else if let ImportKind::Glob { is_prelude: true, .. } = import.kind {
        2 ( 0.00%)              self.r.prelude = Some(module);
        .                       return;
        .                   }
        .           
        .                   // Add to module's glob_importers
        .                   module.glob_importers.borrow_mut().push(import);
        .           
        .                   // Ensure that `resolutions` isn't borrowed during `try_define`,
        .                   // since it might get updated via a glob cycle.
       24 ( 0.00%)          let bindings = self
        .                       .r
        .                       .resolutions(module)
        .                       .borrow()
        .                       .iter()
        .                       .filter_map(|(key, resolution)| {
  159,296 ( 0.03%)                  resolution.borrow().binding().map(|binding| (*key, binding))
        .                       })
        .                       .collect::<Vec<_>>();
   79,648 ( 0.01%)          for (mut key, binding) in bindings {
  358,416 ( 0.06%)              let scope = match key.ident.span.reverse_glob_adjust(module.expansion, import.span) {
        .                           Some(Some(def)) => self.r.expn_def_scope(def),
   79,648 ( 0.01%)                  Some(None) => import.parent_scope.module,
        .                           None => continue,
        .                       };
  318,592 ( 0.06%)              if self.r.is_accessible_from(binding.vis, scope) {
   79,424 ( 0.01%)                  let imported_binding = self.r.import(binding, import);
  436,832 ( 0.08%)                  let _ = self.r.try_define(import.parent_scope.module, key, imported_binding);
        .                       }
        .                   }
        .           
        .                   // Record the destination of this import
        .                   self.r.record_partial_res(import.id, PartialRes::new(module.res().unwrap()));
        .               }
        .           
        .               // Miscellaneous post-processing, including recording re-exports,
        .               // reporting conflicts, and reporting unresolved imports.
        .               fn finalize_resolutions_in(&mut self, module: Module<'b>) {
        .                   // Since import resolution is finished, globs will not define any more names.
       60 ( 0.00%)          *module.globs.borrow_mut() = Vec::new();
        .           
        .                   let mut reexports = Vec::new();
        .           
       75 ( 0.00%)          module.for_each_child(self.r, |_, ident, _, binding| {
        .                       // Filter away ambiguous imports and anything that has def-site hygiene.
        .                       // FIXME: Implement actual cross-crate hygiene.
        .                       let is_good_import =
   79,590 ( 0.01%)                  binding.is_import() && !binding.is_ambiguity() && !ident.span.from_expansion();
   40,119 ( 0.01%)              if is_good_import || binding.is_macro_def() {
        .                           let res = binding.res().expect_non_local();
        .                           if res != def::Res::Err {
  159,028 ( 0.03%)                      reexports.push(ModChild { ident, res, vis: binding.vis, span: binding.span });
        .                           }
        .                       }
        .                   });
        .           
       15 ( 0.00%)          if !reexports.is_empty() {
       17 ( 0.00%)              if let Some(def_id) = module.opt_def_id() {
        .                           // Call to `expect_local` should be fine because current
        .                           // code is only called for local modules.
        .                           self.r.reexport_map.insert(def_id.expect_local(), reexports);
        .                       }
        .                   }
        .               }
        .           }
        .           
-- line 1428 ----------------------------------------

1,210,597 ( 0.22%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/imports.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir               

-- line 5 ----------------------------------------
      .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
      .           unsafe impl GlobalAlloc for System {
      .               #[inline]
      .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
      .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
      .                   // So only rely on MIN_ALIGN if size >= align.
      .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
      .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
697,804 ( 0.12%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
523,353 ( 0.09%)              libc::malloc(layout.size()) as *mut u8
      .                   } else {
      .                       #[cfg(target_os = "macos")]
      .                       {
      .                           if layout.align() > (1 << 31) {
      .                               return ptr::null_mut();
      .                           }
      .                       }
      .                       aligned_malloc(&layout)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
      .                   // See the comment above in `alloc` for why this check looks the way it does.
 24,464 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 36,696 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
      .                   } else {
      .                       let ptr = self.alloc(layout);
      .                       if !ptr.is_null() {
      .                           ptr::write_bytes(ptr, 0, layout.size());
      .                       }
      .                       ptr
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
180,556 ( 0.03%)          libc::free(ptr as *mut libc::c_void)
      .               }
      .           
      .               #[inline]
      .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 65,096 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
130,192 ( 0.02%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
      .                   } else {
      .                       realloc_fallback(self, ptr, layout, new_size)
      .                   }
      .               }
      .           }
      .           
      .           cfg_if::cfg_if! {
      .               if #[cfg(any(
-- line 56 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 42 ----------------------------------------
      .           /// `stack_size` bytes.
      .           ///
      .           /// The closure `f` is guaranteed to run on a stack with at least `red_zone` bytes, and it will be
      .           /// run on the current stack if there's space available.
      .           #[inline(always)]
      .           pub fn maybe_grow<R, F: FnOnce() -> R>(red_zone: usize, stack_size: usize, callback: F) -> R {
      .               // if we can't guess the remaining stack (unsupported on some platforms) we immediately grow
      .               // the stack and then cache the new stack size (which we do know now because we allocated it.
157,986 ( 0.03%)      let enough_space = match remaining_stack() {
      .                   Some(remaining) => remaining >= red_zone,
      .                   None => false,
      .               };
215,142 ( 0.04%)      if enough_space {
 11,497 ( 0.00%)          callback()
      .               } else {
      .                   grow(stack_size, callback)
      .               }
      .           }
      .           
      .           /// Always creates a new stack for the passed closure to run on.
      .           /// The closure will still be on the same thread as the caller of `grow`.
      .           /// This will allocate a new stack with at least `stack_size` bytes.
-- line 63 ----------------------------------------
-- line 82 ----------------------------------------
      .               _grow(stack_size, dyn_callback);
      .               ret.unwrap()
      .           }
      .           
      .           /// Queries the amount of remaining stack as interpreted by this library.
      .           ///
      .           /// This function will return the amount of stack space left which will be used
      .           /// to determine whether a stack switch should be made or not.
143,428 ( 0.03%)  pub fn remaining_stack() -> Option<usize> {
      .               let current_ptr = current_stack_ptr();
143,428 ( 0.03%)      get_stack_limit().map(|limit| current_ptr - limit)
286,856 ( 0.05%)  }
      .           
      .           psm_stack_information! (
      .               yes {
      .                   fn current_stack_ptr() -> usize {
143,428 ( 0.03%)              psm::stack_pointer() as usize
      .                   }
      .               }
      .               no {
      .                   #[inline(always)]
      .                   fn current_stack_ptr() -> usize {
      .                       unsafe {
      .                           let mut x = std::mem::MaybeUninit::<u8>::uninit();
      .                           // Unlikely to be ever exercised. As a fallback we execute a volatile read to a
-- line 106 ----------------------------------------
-- line 111 ----------------------------------------
      .                           x.as_ptr() as usize
      .                       }
      .                   }
      .               }
      .           );
      .           
      .           thread_local! {
      .               static STACK_LIMIT: Cell<Option<usize>> = Cell::new(unsafe {
      1 ( 0.00%)          guess_os_stack_limit()
      .               })
      .           }
      .           
      .           #[inline(always)]
      .           fn get_stack_limit() -> Option<usize> {
      .               STACK_LIMIT.with(|s| s.get())
      .           }
      .           
-- line 127 ----------------------------------------
-- line 403 ----------------------------------------
      .                       VirtualQuery(
      .                           psm::stack_pointer() as *const _,
      .                           mi.as_mut_ptr(),
      .                           std::mem::size_of::<QueryT>() as SIZE_T,
      .                       );
      .                       Some(mi.assume_init().AllocationBase as usize + get_thread_stack_guarantee() + 0x1000)
      .                   }
      .               } else if #[cfg(any(target_os = "linux", target_os="solaris", target_os = "netbsd"))] {
      2 ( 0.00%)          unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      7 ( 0.00%)              assert_eq!(libc::pthread_getattr_np(libc::pthread_self(),
      .                                                           attr.as_mut_ptr()), 0);
      1 ( 0.00%)              let mut stackaddr = std::ptr::null_mut();
      4 ( 0.00%)              let mut stacksize = 0;
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_getstack(
      .                           attr.as_ptr(), &mut stackaddr, &mut stacksize
      .                       ), 0);
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_destroy(attr.as_mut_ptr()), 0);
      1 ( 0.00%)              Some(stackaddr as usize)
      3 ( 0.00%)          }
      .               } else if #[cfg(any(target_os = "freebsd", target_os = "dragonfly"))] {
      .                   unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      .                       assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      .                       assert_eq!(libc::pthread_attr_get_np(libc::pthread_self(), attr.as_mut_ptr()), 0);
      .                       let mut stackaddr = std::ptr::null_mut();
      .                       let mut stacksize = 0;
      .                       assert_eq!(libc::pthread_attr_getstack(
-- line 431 ----------------------------------------

 89,900 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
245,671,620 (43.95%)  events annotated

