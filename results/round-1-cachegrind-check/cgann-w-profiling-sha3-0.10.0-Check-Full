--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name sha3 --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --cfg feature="default" --cfg feature="std" -C metadata=9337a2f562c351ee -C extra-filename=-9337a2f562c351ee --out-dir /usr/home/liquid/tmp/.tmp95jW2Y/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmp95jW2Y/target/debug/deps --extern digest=/usr/home/liquid/tmp/.tmp95jW2Y/target/debug/deps/libdigest-d52a00c82465b52c.rmeta --extern keccak=/usr/home/liquid/tmp/.tmp95jW2Y/target/debug/deps/libkeccak-c0b741d36dc509dc.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-sha3-0.10.0-Check-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
474,686,168 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
14,484,772 ( 3.05%)  ./malloc/malloc.c:_int_free
14,082,677 ( 2.97%)  ./malloc/malloc.c:_int_malloc
10,305,124 ( 2.17%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 8,665,971 ( 1.83%)  ./malloc/malloc.c:malloc
 6,315,496 ( 1.33%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 4,835,679 ( 1.02%)  ./elf/dl-lookup.c:do_lookup_x
 4,141,271 ( 0.87%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 4,140,178 ( 0.87%)  ./malloc/malloc.c:free
 4,066,961 ( 0.86%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 2,933,894 ( 0.62%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,607,029 ( 0.55%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,450,061 ( 0.52%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,208,108 ( 0.47%)  ./malloc/malloc.c:malloc_consolidate
 2,139,033 ( 0.45%)  ./elf/do-rel.h:_dl_relocate_object
 1,932,322 ( 0.41%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 1,851,175 ( 0.39%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 1,816,507 ( 0.38%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
 1,790,108 ( 0.38%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
 1,779,948 ( 0.37%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs:rustc_middle::ty::relate::super_relate_tys::<rustc_infer::infer::combine::Generalizer>
 1,755,754 ( 0.37%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs:<rustc_infer::infer::combine::Generalizer as rustc_middle::ty::relate::TypeRelation>::tys
 1,748,934 ( 0.37%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 1,697,322 ( 0.36%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 1,667,077 ( 0.35%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
 1,631,425 ( 0.34%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, ())>>::insert::<hashbrown::map::make_hasher<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
 1,609,034 ( 0.34%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 1,586,406 ( 0.33%)  ./malloc/malloc.c:realloc
 1,553,610 ( 0.33%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 1,540,900 ( 0.32%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 1,475,150 ( 0.31%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 1,464,980 ( 0.31%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
 1,362,217 ( 0.29%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
 1,329,145 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
 1,296,216 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 1,213,380 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
 1,211,646 ( 0.26%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, ())>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
 1,134,573 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
 1,130,191 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,126,891 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,115,014 ( 0.23%)  ./malloc/malloc.c:_int_realloc
 1,091,018 ( 0.23%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::HashMap<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
 1,070,814 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::SubstFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty
 1,046,576 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
 1,023,758 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 1,011,158 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sso/map.rs:<rustc_data_structures::sso::map::SsoHashMap<&rustc_middle::ty::TyS, core::result::Result<&rustc_middle::ty::TyS, rustc_middle::ty::error::TypeError>>>::insert
 1,002,334 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   968,191 ( 0.20%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_span::def_id::DefId, rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>>::{closure#0}>
   909,446 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
   864,856 ( 0.18%)  ./elf/dl-lookup.c:check_match
   863,838 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs:<rustc_infer::infer::type_variable::TypeVariableTable>::probe
   831,829 ( 0.18%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:<smallvec::SmallVec<[rustc_middle::ty::subst::GenericArg; 8]> as core::iter::traits::collect::Extend<rustc_middle::ty::subst::GenericArg>>::extend::<core::iter::adapters::rev::Rev<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>
   827,729 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   824,528 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_predicate
   817,339 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
   814,932 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::register_obligation_at
   806,392 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs:<rustc_privacy::DefIdVisitorSkeleton<rustc_privacy::TypePrivacyVisitor> as rustc_middle::ty::fold::TypeVisitor>::visit_ty
   797,339 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
   789,136 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
   789,094 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   779,633 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs:<rustc_middle::ty::PredicateKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   767,053 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
   762,751 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<core::result::Result<rustc_middle::ty::subst::GenericArg, rustc_middle::ty::error::TypeError> as rustc_middle::ty::context::InternIteratorElement<rustc_middle::ty::subst::GenericArg, &rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::intern_with::<core::iter::adapters::map::Map<core::iter::adapters::enumerate::Enumerate<core::iter::adapters::zip::Zip<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>, core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>, rustc_middle::ty::relate::relate_substs<rustc_infer::infer::combine::Generalizer>::{closure#0}>, <rustc_middle::ty::context::TyCtxt>::mk_substs<core::iter::adapters::map::Map<core::iter::adapters::enumerate::Enumerate<core::iter::adapters::zip::Zip<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>, core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>, rustc_middle::ty::relate::relate_substs<rustc_infer::infer::combine::Generalizer>::{closure#0}>>::{closure#0}>
   752,181 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
   748,668 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(&rustc_middle::ty::TyS, core::result::Result<&rustc_middle::ty::TyS, rustc_middle::ty::error::TypeError>)>>::insert::<hashbrown::map::make_hasher<&rustc_middle::ty::TyS, &rustc_middle::ty::TyS, core::result::Result<&rustc_middle::ty::TyS, rustc_middle::ty::error::TypeError>, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   747,245 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_middle::ty::subst::GenericArg, ())>>::insert::<hashbrown::map::make_hasher<rustc_middle::ty::subst::GenericArg, rustc_middle::ty::subst::GenericArg, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   724,034 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   722,898 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs:stacker::remaining_stack
   678,532 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::DefId, &(rustc_middle::ty::assoc::AssocItem, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::DefId>
   672,305 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   666,548 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_middle::ty::subst::SubstFolder>
   652,425 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::HashMap<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
   647,358 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<hashbrown::raw::RawTable<(rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, ())>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   632,648 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs:<rustc_middle::ty::subst::GenericArg as rustc_middle::ty::relate::Relate>::relate::<rustc_infer::infer::combine::Generalizer>
   632,540 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/function.rs:<&mut rustc_middle::ty::relate::relate_substs<rustc_infer::infer::combine::Generalizer>::{closure#0} as core::ops::function::FnOnce<((usize, (rustc_middle::ty::subst::GenericArg, rustc_middle::ty::subst::GenericArg)),)>>::call_once
   618,228 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/project.rs:rustc_trait_selection::traits::project::normalize_with_depth_to::<rustc_middle::ty::Predicate>
   615,919 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   614,864 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs:<rustc_infer::infer::equate::Equate as rustc_middle::ty::relate::TypeRelation>::tys
   612,656 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sso/map.rs:<rustc_data_structures::sso::map::SsoHashMap<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, ()>>::insert
   612,108 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
   610,050 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs:<rustc_infer::infer::combine::Generalizer as rustc_middle::ty::relate::TypeRelation>::relate_item_substs
   603,077 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   601,210 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
   600,913 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:<core::result::Result<rustc_middle::ty::subst::GenericArg, rustc_middle::ty::error::TypeError> as rustc_middle::ty::context::InternIteratorElement<rustc_middle::ty::subst::GenericArg, &rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::intern_with::<core::iter::adapters::map::Map<core::iter::adapters::enumerate::Enumerate<core::iter::adapters::zip::Zip<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>, core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>, rustc_middle::ty::relate::relate_substs<rustc_infer::infer::combine::Generalizer>::{closure#0}>, <rustc_middle::ty::context::TyCtxt>::mk_substs<core::iter::adapters::map::Map<core::iter::adapters::enumerate::Enumerate<core::iter::adapters::zip::Zip<core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>, core::iter::adapters::copied::Copied<core::slice::iter::Iter<rustc_middle::ty::subst::GenericArg>>>>, rustc_middle::ty::relate::relate_substs<rustc_infer::infer::combine::Generalizer>::{closure#0}>>::{closure#0}>
   583,316 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
   578,535 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<hashbrown::map::HashMap<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
   574,224 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxtInner>::rollback_to
   552,380 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs:<rustc_trait_selection::traits::fulfill::FulfillProcessor>::progress_changed_obligations
   548,180 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(&str, rustc_span::symbol::Symbol)>>::insert::<hashbrown::map::make_hasher<&str, &str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   537,901 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::cmp::PartialEq>::eq
   537,823 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   532,368 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::TyS as rustc_middle::ty::fold::TypeFoldable>::super_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
   530,524 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_infer::infer::combine::Generalizer as rustc_middle::ty::relate::TypeRelation>::relate_item_substs
   529,264 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:<smallvec::SmallVec<[rustc_middle::ty::subst::GenericArg; 8]>>::retain::<<rustc_middle::ty::subst::GenericArg>::walk_shallow::{closure#0}>
   529,040 ( 0.11%)  ./string/../sysdeps/x86_64/strcmp.S:strcmp
   528,620 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTableInner<alloc::alloc::Global>>::prepare_insert_slot
   524,723 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs:<rustc_trait_selection::traits::select::SelectionContext>::match_impl
   523,822 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/walk.rs:rustc_middle::ty::walk::push_inner
   521,454 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sharded.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
   512,782 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_middle::ty::subst::SubstFolder>
   512,568 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs:<hashbrown::map::HashMap<rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
   512,185 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::reuse_or_mk_predicate
   508,768 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   507,852 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
   505,758 ( 0.11%)  ./malloc/malloc.c:calloc
   503,988 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sso/map.rs:<rustc_data_structures::sso::map::SsoHashMap<&rustc_middle::ty::TyS, core::result::Result<&rustc_middle::ty::TyS, rustc_middle::ty::error::TypeError>>>::get
   502,769 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
   496,941 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fast_reject.rs:rustc_middle::ty::fast_reject::simplify_type
   490,419 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxtInner as ena::undo_log::Rollback<rustc_infer::infer::undo_log::UndoLog>>::reverse
   490,228 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs:<&rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg> as rustc_middle::ty::fold::TypeFoldable>::try_fold_with::<rustc_infer::infer::resolve::OpportunisticVarResolver>
   476,026 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   475,027 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/project.rs
--------------------------------------------------------------------------------
Ir               

-- line 47 ----------------------------------------
      .           pub enum ProjectionTyError<'tcx> {
      .               /// ...we found multiple sources of information and couldn't resolve the ambiguity.
      .               TooManyCandidates,
      .           
      .               /// ...an error occurred matching `T : TraitRef`
      .               TraitSelectionError(SelectionError<'tcx>),
      .           }
      .           
    105 ( 0.00%)  #[derive(PartialEq, Eq, Debug)]
      .           enum ProjectionTyCandidate<'tcx> {
      .               /// From a where-clause in the env or object type
     38 ( 0.00%)      ParamEnv(ty::PolyProjectionPredicate<'tcx>),
      .           
      .               /// From the definition of `Trait` when you have something like <<A as Trait>::B as Trait2>::C
      .               TraitDef(ty::PolyProjectionPredicate<'tcx>),
      .           
      .               /// Bounds specified on an object type
      .               Object(ty::PolyProjectionPredicate<'tcx>),
      .           
      .               /// From an "impl" (or a "pseudo-impl" returned by select)
-- line 66 ----------------------------------------
-- line 71 ----------------------------------------
      .               None,
      .               Single(ProjectionTyCandidate<'tcx>),
      .               Ambiguous,
      .               Error(SelectionError<'tcx>),
      .           }
      .           
      .           impl<'tcx> ProjectionTyCandidateSet<'tcx> {
      .               fn mark_ambiguous(&mut self) {
    261 ( 0.00%)          *self = ProjectionTyCandidateSet::Ambiguous;
      .               }
      .           
      .               fn mark_error(&mut self, err: SelectionError<'tcx>) {
      .                   *self = ProjectionTyCandidateSet::Error(err);
      .               }
      .           
      .               // Returns true if the push was successful, or false if the candidate
      .               // was discarded -- this could be because of ambiguity, or because
      .               // a higher-priority candidate is already there.
  8,154 ( 0.00%)      fn push_candidate(&mut self, candidate: ProjectionTyCandidate<'tcx>) -> bool {
      .                   use self::ProjectionTyCandidate::*;
      .                   use self::ProjectionTyCandidateSet::*;
      .           
      .                   // This wacky variable is just used to try and
      .                   // make code readable and avoid confusing paths.
      .                   // It is assigned a "value" of `()` only on those
      .                   // paths in which we wish to convert `*self` to
      .                   // ambiguous (and return false, because the candidate
      .                   // was not used). On other paths, it is not assigned,
      .                   // and hence if those paths *could* reach the code that
      .                   // comes after the match, this fn would not compile.
      .                   let convert_to_ambiguous;
      .           
  8,154 ( 0.00%)          match self {
      .                       None => {
 17,212 ( 0.00%)                  *self = Single(candidate);
      .                           return true;
      .                       }
      .           
      .                       Single(current) => {
      .                           // Duplicates can happen inside ParamEnv. In the case, we
      .                           // perform a lazy deduplication.
      .                           if current == &candidate {
      .                               return false;
-- line 113 ----------------------------------------
-- line 115 ----------------------------------------
      .           
      .                           // Prefer where-clauses. As in select, if there are multiple
      .                           // candidates, we prefer where-clause candidates over impls.  This
      .                           // may seem a bit surprising, since impls are the source of
      .                           // "truth" in some sense, but in fact some of the impls that SEEM
      .                           // applicable are not, because of nested obligations. Where
      .                           // clauses are the safer choice. See the comment on
      .                           // `select::SelectionCandidate` and #21974 for more details.
    560 ( 0.00%)                  match (current, candidate) {
      .                               (ParamEnv(..), ParamEnv(..)) => convert_to_ambiguous = (),
      .                               (ParamEnv(..), _) => return false,
      .                               (_, ParamEnv(..)) => unreachable!(),
      .                               (_, _) => convert_to_ambiguous = (),
      .                           }
      .                       }
      .           
      .                       Ambiguous | Error(..) => {
-- line 131 ----------------------------------------
-- line 133 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   // We only ever get here when we moved from a single candidate
      .                   // to ambiguous.
      .                   let () = convert_to_ambiguous;
      .                   *self = Ambiguous;
      .                   false
  9,513 ( 0.00%)      }
      .           }
      .           
      .           /// Evaluates constraints of the form:
      .           ///
      .           ///     for<...> <T as Trait>::U == V
      .           ///
      .           /// If successful, this may result in additional obligations. Also returns
      .           /// the projection cache key used to track these additional obligations.
-- line 149 ----------------------------------------
-- line 164 ----------------------------------------
      .           pub(super) fn poly_project_and_unify_type<'cx, 'tcx>(
      .               selcx: &mut SelectionContext<'cx, 'tcx>,
      .               obligation: &PolyProjectionObligation<'tcx>,
      .           ) -> Result<
      .               Result<Option<Vec<PredicateObligation<'tcx>>>, InProgress>,
      .               MismatchedProjectionTypes<'tcx>,
      .           > {
      .               let infcx = selcx.infcx();
  1,244 ( 0.00%)      infcx.commit_if_ok(|_snapshot| {
      .                   let placeholder_predicate =
  1,242 ( 0.00%)              infcx.replace_bound_vars_with_placeholders(obligation.predicate);
      .           
      .                   let placeholder_obligation = obligation.with(placeholder_predicate);
    414 ( 0.00%)          let result = project_and_unify_type(selcx, &placeholder_obligation)?;
    207 ( 0.00%)          Ok(result)
      .               })
      .           }
      .           
      .           /// Evaluates constraints of the form:
      .           ///
      .           ///     <T as Trait>::U == V
      .           ///
      .           /// If successful, this may result in additional obligations.
      .           ///
      .           /// See [poly_project_and_unify_type] for an explanation of the return value.
  2,070 ( 0.00%)  fn project_and_unify_type<'cx, 'tcx>(
      .               selcx: &mut SelectionContext<'cx, 'tcx>,
      .               obligation: &ProjectionObligation<'tcx>,
      .           ) -> Result<
      .               Result<Option<Vec<PredicateObligation<'tcx>>>, InProgress>,
      .               MismatchedProjectionTypes<'tcx>,
      .           > {
      .               debug!(?obligation, "project_and_unify_type");
      .           
      .               let mut obligations = vec![];
  1,656 ( 0.00%)      let normalized_ty = match opt_normalize_projection_type(
      .                   selcx,
    207 ( 0.00%)          obligation.param_env,
    414 ( 0.00%)          obligation.predicate.projection_ty,
      .                   obligation.cause.clone(),
    414 ( 0.00%)          obligation.recursion_depth,
      .                   &mut obligations,
      .               ) {
      .                   Ok(Some(n)) => n,
    396 ( 0.00%)          Ok(None) => return Ok(Ok(None)),
      .                   Err(InProgress) => return Ok(Err(InProgress)),
      .               };
      .           
      .               debug!(?normalized_ty, ?obligations, "project_and_unify_type result");
      .           
      .               let infcx = selcx.infcx();
      .               // FIXME(associated_const_equality): Handle consts here as well as types.
    216 ( 0.00%)      let obligation_pred_ty = obligation.predicate.term.ty().unwrap();
    324 ( 0.00%)      match infcx.at(&obligation.cause, obligation.param_env).eq(normalized_ty, obligation_pred_ty) {
      .                   Ok(InferOk { obligations: inferred_obligations, value: () }) => {
      .                       obligations.extend(inferred_obligations);
    756 ( 0.00%)              Ok(Ok(Some(obligations)))
      .                   }
      .                   Err(err) => {
      .                       debug!("project_and_unify_type: equating types encountered error {:?}", err);
      .                       Err(MismatchedProjectionTypes { err })
      .                   }
      .               }
  1,863 ( 0.00%)  }
      .           
      .           /// Normalizes any associated type projections in `value`, replacing
      .           /// them with a fully resolved type where possible. The return value
      .           /// combines the normalized result and any additional obligations that
      .           /// were incurred as result.
 48,070 ( 0.01%)  pub fn normalize<'a, 'b, 'tcx, T>(
      .               selcx: &'a mut SelectionContext<'b, 'tcx>,
      .               param_env: ty::ParamEnv<'tcx>,
      .               cause: ObligationCause<'tcx>,
      .               value: T,
      .           ) -> Normalized<'tcx, T>
      .           where
      .               T: TypeFoldable<'tcx>,
      .           {
      .               let mut obligations = Vec::new();
      .               let value = normalize_to(selcx, param_env, cause, value, &mut obligations);
 33,662 ( 0.01%)      Normalized { value, obligations }
 43,263 ( 0.01%)  }
      .           
      .           pub fn normalize_to<'a, 'b, 'tcx, T>(
      .               selcx: &'a mut SelectionContext<'b, 'tcx>,
      .               param_env: ty::ParamEnv<'tcx>,
      .               cause: ObligationCause<'tcx>,
      .               value: T,
      .               obligations: &mut Vec<PredicateObligation<'tcx>>,
      .           ) -> T
      .           where
      .               T: TypeFoldable<'tcx>,
      .           {
 39,661 ( 0.01%)      normalize_with_depth_to(selcx, param_env, cause, 0, value, obligations)
      .           }
      .           
      .           /// As `normalize`, but with a custom depth.
    660 ( 0.00%)  pub fn normalize_with_depth<'a, 'b, 'tcx, T>(
      .               selcx: &'a mut SelectionContext<'b, 'tcx>,
      .               param_env: ty::ParamEnv<'tcx>,
      .               cause: ObligationCause<'tcx>,
      .               depth: usize,
      .               value: T,
      .           ) -> Normalized<'tcx, T>
      .           where
      .               T: TypeFoldable<'tcx>,
      .           {
      .               let mut obligations = Vec::new();
 43,532 ( 0.01%)      let value = normalize_with_depth_to(selcx, param_env, cause, depth, value, &mut obligations);
 23,977 ( 0.01%)      Normalized { value, obligations }
    572 ( 0.00%)  }
      .           
183,814 ( 0.04%)  #[instrument(level = "info", skip(selcx, param_env, cause, obligations))]
259,714 ( 0.05%)  pub fn normalize_with_depth_to<'a, 'b, 'tcx, T>(
      .               selcx: &'a mut SelectionContext<'b, 'tcx>,
      .               param_env: ty::ParamEnv<'tcx>,
      .               cause: ObligationCause<'tcx>,
      .               depth: usize,
      .               value: T,
      .               obligations: &mut Vec<PredicateObligation<'tcx>>,
      .           ) -> T
      .           where
      .               T: TypeFoldable<'tcx>,
      .           {
      .               debug!(obligations.len = obligations.len());
161,021 ( 0.03%)      let mut normalizer = AssocTypeNormalizer::new(selcx, param_env, cause, depth, obligations);
108,166 ( 0.02%)      let result = ensure_sufficient_stack(|| normalizer.fold(value));
      .               debug!(?result, obligations.len = normalizer.obligations.len());
      .               debug!(?normalizer.obligations,);
 11,134 ( 0.00%)      result
 49,702 ( 0.01%)  }
      .           
      .           pub(crate) fn needs_normalization<'tcx, T: TypeFoldable<'tcx>>(value: &T, reveal: Reveal) -> bool {
      .               match reveal {
      .                   Reveal::UserFacing => value
      .                       .has_type_flags(ty::TypeFlags::HAS_TY_PROJECTION | ty::TypeFlags::HAS_CT_PROJECTION),
      .                   Reveal::All => value.has_type_flags(
      .                       ty::TypeFlags::HAS_TY_PROJECTION
      .                           | ty::TypeFlags::HAS_TY_OPAQUE
-- line 302 ----------------------------------------
-- line 310 ----------------------------------------
      .               param_env: ty::ParamEnv<'tcx>,
      .               cause: ObligationCause<'tcx>,
      .               obligations: &'a mut Vec<PredicateObligation<'tcx>>,
      .               depth: usize,
      .               universes: Vec<Option<ty::UniverseIndex>>,
      .           }
      .           
      .           impl<'a, 'b, 'tcx> AssocTypeNormalizer<'a, 'b, 'tcx> {
  3,771 ( 0.00%)      fn new(
      .                   selcx: &'a mut SelectionContext<'b, 'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   cause: ObligationCause<'tcx>,
      .                   depth: usize,
      .                   obligations: &'a mut Vec<PredicateObligation<'tcx>>,
      .               ) -> AssocTypeNormalizer<'a, 'b, 'tcx> {
150,781 ( 0.03%)          AssocTypeNormalizer { selcx, param_env, cause, obligations, depth, universes: vec![] }
  3,771 ( 0.00%)      }
      .           
152,874 ( 0.03%)      fn fold<T: TypeFoldable<'tcx>>(&mut self, value: T) -> T {
 86,708 ( 0.02%)          let value = self.selcx.infcx().resolve_vars_if_possible(value);
      .                   debug!(?value);
      .           
 34,353 ( 0.01%)          assert!(
      .                       !value.has_escaping_bound_vars(),
      .                       "Normalizing {:?} without wrapping in a `Binder`",
      .                       value
      .                   );
      .           
 59,715 ( 0.01%)          if !needs_normalization(&value, self.param_env.reveal()) {
  9,158 ( 0.00%)              value
      .                   } else {
    760 ( 0.00%)              value.fold_with(self)
      .                   }
148,364 ( 0.03%)      }
      .           }
      .           
      .           impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {
      .               fn tcx<'c>(&'c self) -> TyCtxt<'tcx> {
  2,720 ( 0.00%)          self.selcx.tcx()
  1,119 ( 0.00%)      }
      .           
      .               fn fold_binder<T: TypeFoldable<'tcx>>(
      .                   &mut self,
      .                   t: ty::Binder<'tcx, T>,
      .               ) -> ty::Binder<'tcx, T> {
      .                   self.universes.push(None);
    190 ( 0.00%)          let t = t.super_fold_with(self);
      .                   self.universes.pop();
      .                   t
      .               }
      .           
 59,376 ( 0.01%)      fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
 14,844 ( 0.00%)          if !needs_normalization(&ty, self.param_env.reveal()) {
      .                       return ty;
      .                   }
      .           
      .                   // We try to be a little clever here as a performance optimization in
      .                   // cases where there are nested projections under binders.
      .                   // For example:
      .                   // ```
      .                   // for<'a> fn(<T as Foo>::One<'a, Box<dyn Bar<'a, Item=<T as Foo>::Two<'a>>>>)
-- line 370 ----------------------------------------
-- line 381 ----------------------------------------
      .                   //
      .                   // This is possible because the inner `'a` will already be a placeholder
      .                   // when we need to normalize the inner projection
      .                   //
      .                   // On the other hand, this does add a bit of complexity, since we only
      .                   // replace bound vars if the current type is a `Projection` and we need
      .                   // to make sure we don't forget to fold the substs regardless.
      .           
  9,348 ( 0.00%)          match *ty.kind() {
      .                       // This is really important. While we *can* handle this, this has
      .                       // severe performance implications for large opaque types with
      .                       // late-bound regions. See `issue-88862` benchmark.
      .                       ty::Opaque(def_id, substs) if !substs.has_escaping_bound_vars() => {
      .                           // Only normalize `impl Trait` after type-checking, usually in codegen.
      .                           match self.param_env.reveal() {
      .                               Reveal::UserFacing => ty.super_fold_with(self),
      .           
-- line 397 ----------------------------------------
-- line 421 ----------------------------------------
      .                       ty::Projection(data) if !data.has_escaping_bound_vars() => {
      .                           // This branch is *mostly* just an optimization: when we don't
      .                           // have escaping bound vars, we don't need to replace them with
      .                           // placeholders (see branch below). *Also*, we know that we can
      .                           // register an obligation to *later* project, since we know
      .                           // there won't be bound vars there.
      .           
      .                           let data = data.super_fold_with(self);
 10,446 ( 0.00%)                  let normalized_ty = normalize_projection_type(
  1,741 ( 0.00%)                      self.selcx,
  1,741 ( 0.00%)                      self.param_env,
      .                               data,
      .                               self.cause.clone(),
  1,741 ( 0.00%)                      self.depth,
  1,741 ( 0.00%)                      &mut self.obligations,
      .                           );
      .                           debug!(
      .                               ?self.depth,
      .                               ?ty,
      .                               ?normalized_ty,
      .                               obligations.len = ?self.obligations.len(),
      .                               "AssocTypeNormalizer: normalized type"
      .                           );
-- line 443 ----------------------------------------
-- line 490 ----------------------------------------
      .                               obligations.len = ?self.obligations.len(),
      .                               "AssocTypeNormalizer: normalized type"
      .                           );
      .                           normalized_ty
      .                       }
      .           
      .                       _ => ty.super_fold_with(self),
      .                   }
 66,798 ( 0.01%)      }
      .           
    765 ( 0.00%)      fn fold_const(&mut self, constant: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    170 ( 0.00%)          if self.selcx.tcx().lazy_normalization() {
      .                       constant
      .                   } else {
    340 ( 0.00%)              let constant = constant.super_fold_with(self);
      .                       constant.eval(self.selcx.tcx(), self.param_env)
      .                   }
    765 ( 0.00%)      }
      .           }
      .           
      .           pub struct BoundVarReplacer<'me, 'tcx> {
      .               infcx: &'me InferCtxt<'me, 'tcx>,
      .               // These three maps track the bound variable that were replaced by placeholders. It might be
      .               // nice to remove these since we already have the `kind` in the placeholder; we really just need
      .               // the `var` (but we *could* bring that into scope if we were to track them as we pass them).
      .               mapped_regions: BTreeMap<ty::PlaceholderRegion, ty::BoundRegion>,
-- line 515 ----------------------------------------
-- line 781 ----------------------------------------
      .           }
      .           
      .           /// The guts of `normalize`: normalize a specific projection like `<T
      .           /// as Trait>::Item`. The result is always a type (and possibly
      .           /// additional obligations). If ambiguity arises, which implies that
      .           /// there are unresolved type variables in the projection, we will
      .           /// substitute a fresh type variable `$X` and generate a new
      .           /// obligation `<T as Trait>::Item == $X` for later.
 19,090 ( 0.00%)  pub fn normalize_projection_type<'a, 'b, 'tcx>(
      .               selcx: &'a mut SelectionContext<'b, 'tcx>,
      .               param_env: ty::ParamEnv<'tcx>,
      .               projection_ty: ty::ProjectionTy<'tcx>,
      .               cause: ObligationCause<'tcx>,
      .               depth: usize,
      .               obligations: &mut Vec<PredicateObligation<'tcx>>,
      .           ) -> Ty<'tcx> {
 15,272 ( 0.00%)      opt_normalize_projection_type(
      .                   selcx,
      .                   param_env,
      .                   projection_ty,
      .                   cause.clone(),
      .                   depth,
      .                   obligations,
      .               )
      .               .ok()
      .               .flatten()
      .               .unwrap_or_else(move || {
      .                   // if we bottom out in ambiguity, create a type variable
      .                   // and a deferred predicate to resolve this when more type
      .                   // information is available.
      .           
  1,232 ( 0.00%)          selcx.infcx().infer_projection(param_env, projection_ty, cause, depth + 1, obligations)
      .               })
 17,181 ( 0.00%)  }
      .           
      .           /// The guts of `normalize`: normalize a specific projection like `<T
      .           /// as Trait>::Item`. The result is always a type (and possibly
      .           /// additional obligations). Returns `None` in the case of ambiguity,
      .           /// which indicates that there are unbound type variables.
      .           ///
      .           /// This function used to return `Option<NormalizedTy<'tcx>>`, which contains a
      .           /// `Ty<'tcx>` and an obligations vector. But that obligation vector was very
      .           /// often immediately appended to another obligations vector. So now this
      .           /// function takes an obligations vector and appends to it directly, which is
      .           /// slightly uglier but avoids the need for an extra short-lived allocation.
 57,206 ( 0.01%)  #[instrument(level = "debug", skip(selcx, param_env, cause, obligations))]
      .           fn opt_normalize_projection_type<'a, 'b, 'tcx>(
      .               selcx: &'a mut SelectionContext<'b, 'tcx>,
      .               param_env: ty::ParamEnv<'tcx>,
      .               projection_ty: ty::ProjectionTy<'tcx>,
      .               cause: ObligationCause<'tcx>,
      .               depth: usize,
      .               obligations: &mut Vec<PredicateObligation<'tcx>>,
      .           ) -> Result<Option<Ty<'tcx>>, InProgress> {
      .               let infcx = selcx.infcx();
      .               // Don't use the projection cache in intercrate mode -
      .               // the `infcx` may be re-used between intercrate in non-intercrate
      .               // mode, which could lead to using incorrect cache results.
      .               let use_cache = !selcx.is_intercrate();
      .           
      .               let projection_ty = infcx.resolve_vars_if_possible(projection_ty);
  6,348 ( 0.00%)      let cache_key = ProjectionCacheKey::new(projection_ty);
      .           
      .               // FIXME(#20304) For now, I am caching here, which is good, but it
      .               // means we don't capture the type variables that are created in
      .               // the case of ambiguity. Which means we may create a large stream
      .               // of such variables. OTOH, if we move the caching up a level, we
      .               // would not benefit from caching when proving `T: Trait<U=Foo>`
      .               // bounds. It might be the case that we want two distinct caches,
      .               // or else another kind of cache entry.
      .           
  2,116 ( 0.00%)      let cache_result = if use_cache {
 12,696 ( 0.00%)          infcx.inner.borrow_mut().projection_cache().try_start(cache_key)
      .               } else {
      .                   Ok(())
      .               };
 12,696 ( 0.00%)      match cache_result {
      .                   Ok(()) => debug!("no cache"),
      .                   Err(ProjectionCacheEntry::Ambiguous) => {
      .                       // If we found ambiguity the last time, that means we will continue
      .                       // to do so until some type in the key changes (and we know it
      .                       // hasn't, because we just fully resolved it).
      .                       debug!("found cache entry: ambiguous");
      .                       return Ok(None);
      .                   }
-- line 865 ----------------------------------------
-- line 882 ----------------------------------------
      .                           infcx.inner.borrow_mut().projection_cache().recur(cache_key);
      .                       }
      .                       return Err(InProgress);
      .                   }
      .                   Err(ProjectionCacheEntry::Recur) => {
      .                       debug!("recur cache");
      .                       return Err(InProgress);
      .                   }
  1,210 ( 0.00%)          Err(ProjectionCacheEntry::NormalizedTy { ty, complete: _ }) => {
      .                       // This is the hottest path in this function.
      .                       //
      .                       // If we find the value in the cache, then return it along
      .                       // with the obligations that went along with it. Note
      .                       // that, when using a fulfillment context, these
      .                       // obligations could in principle be ignored: they have
      .                       // already been registered when the cache entry was
      .                       // created (and hence the new ones will quickly be
-- line 898 ----------------------------------------
-- line 908 ----------------------------------------
      .                       let result = normalize_to_error(selcx, param_env, projection_ty, cause, depth);
      .                       obligations.extend(result.obligations);
      .                       return Ok(Some(result.value));
      .                   }
      .               }
      .           
      .               let obligation = Obligation::with_depth(cause.clone(), depth, param_env, projection_ty);
      .           
 12,807 ( 0.00%)      match project_type(selcx, &obligation) {
      .                   Ok(ProjectedTy::Progress(Progress {
      .                       ty: projected_ty,
  5,296 ( 0.00%)              obligations: mut projected_obligations,
      .                   })) => {
      .                       // if projection succeeded, then what we get out of this
      .                       // is also non-normalized (consider: it was derived from
      .                       // an impl, where-clause etc) and hence we must
      .                       // re-normalize it
      .           
      .                       let projected_ty = selcx.infcx().resolve_vars_if_possible(projected_ty);
      .                       debug!(?projected_ty, ?depth, ?projected_obligations);
      .           
  1,324 ( 0.00%)              let mut result = if projected_ty.has_projections() {
      .                           let mut normalizer = AssocTypeNormalizer::new(
      .                               selcx,
      .                               param_env,
  3,080 ( 0.00%)                      cause,
  1,540 ( 0.00%)                      depth + 1,
      .                               &mut projected_obligations,
      .                           );
  1,540 ( 0.00%)                  let normalized_ty = normalizer.fold(projected_ty);
      .           
      .                           debug!(?normalized_ty, ?depth);
      .           
  3,850 ( 0.00%)                  Normalized { value: normalized_ty, obligations: projected_obligations }
      .                       } else {
  3,324 ( 0.00%)                  Normalized { value: projected_ty, obligations: projected_obligations }
      .                       };
      .           
      .                       let mut deduped: SsoHashSet<_> = Default::default();
  1,324 ( 0.00%)              result.obligations.drain_filter(|projected_obligation| {
      .                           if !deduped.insert(projected_obligation.clone()) {
      .                               return true;
      .                           }
      .                           false
      .                       });
      .           
  1,324 ( 0.00%)              if use_cache {
  3,972 ( 0.00%)                  infcx.inner.borrow_mut().projection_cache().insert_ty(cache_key, result.clone());
      .                       }
      .                       obligations.extend(result.obligations);
  1,324 ( 0.00%)              Ok(Some(result.value))
      .                   }
      .                   Ok(ProjectedTy::NoProgress(projected_ty)) => {
      .                       debug!(?projected_ty, "opt_normalize_projection_type: no progress");
      .                       let result = Normalized { value: projected_ty, obligations: vec![] };
      .                       if use_cache {
      .                           infcx.inner.borrow_mut().projection_cache().insert_ty(cache_key, result.clone());
      .                       }
      .                       // No need to extend `obligations`.
      .                       Ok(Some(result.value))
      .                   }
      .                   Err(ProjectionTyError::TooManyCandidates) => {
      .                       debug!("opt_normalize_projection_type: too many candidates");
     99 ( 0.00%)              if use_cache {
    594 ( 0.00%)                  infcx.inner.borrow_mut().projection_cache().ambiguous(cache_key);
      .                       }
      .                       Ok(None)
      .                   }
      .                   Err(ProjectionTyError::TraitSelectionError(_)) => {
      .                       debug!("opt_normalize_projection_type: ERROR");
      .                       // if we got an error processing the `T as Trait` part,
      .                       // just return `ty::err` but add the obligation `T :
      .                       // Trait`, which when processed will cause the error to be
-- line 980 ----------------------------------------
-- line 1042 ----------------------------------------
      .               obligations: Vec<PredicateObligation<'tcx>>,
      .           }
      .           
      .           impl<'tcx> Progress<'tcx> {
      .               fn error(tcx: TyCtxt<'tcx>) -> Self {
      .                   Progress { ty: tcx.ty_error(), obligations: vec![] }
      .               }
      .           
    440 ( 0.00%)      fn with_addl_obligations(mut self, mut obligations: Vec<PredicateObligation<'tcx>>) -> Self {
      .                   debug!(
      .                       self.obligations.len = ?self.obligations.len(),
      .                       obligations.len = obligations.len(),
      .                       "with_addl_obligations"
      .                   );
      .           
      .                   debug!(?self.obligations, ?obligations, "with_addl_obligations");
      .           
     44 ( 0.00%)          self.obligations.append(&mut obligations);
    264 ( 0.00%)          self
    176 ( 0.00%)      }
      .           }
      .           
      .           /// Computes the result of a projection type (if we can).
      .           ///
      .           /// IMPORTANT:
      .           /// - `obligation` must be fully normalized
 25,614 ( 0.01%)  #[tracing::instrument(level = "info", skip(selcx))]
      .           fn project_type<'cx, 'tcx>(
      .               selcx: &mut SelectionContext<'cx, 'tcx>,
      .               obligation: &ProjectionTyObligation<'tcx>,
      .           ) -> Result<ProjectedTy<'tcx>, ProjectionTyError<'tcx>> {
  4,269 ( 0.00%)      if !selcx.tcx().recursion_limit().value_within_limit(obligation.recursion_depth) {
      .                   debug!("project: overflow!");
      .                   // This should really be an immediate error, but some existing code
      .                   // relies on being able to recover from this.
      .                   return Err(ProjectionTyError::TraitSelectionError(SelectionError::Overflow));
      .               }
      .           
      .               if obligation.predicate.references_error() {
      .                   return Ok(ProjectedTy::Progress(Progress::error(selcx.tcx())));
      .               }
      .           
  1,423 ( 0.00%)      let mut candidates = ProjectionTyCandidateSet::None;
      .           
      .               // Make sure that the following procedures are kept in order. ParamEnv
      .               // needs to be first because it has highest priority, and Select checks
      .               // the return value of push_candidate which assumes it's ran at last.
  2,846 ( 0.00%)      assemble_candidates_from_param_env(selcx, obligation, &mut candidates);
      .           
    106 ( 0.00%)      assemble_candidates_from_trait_def(selcx, obligation, &mut candidates);
      .           
  2,846 ( 0.00%)      assemble_candidates_from_object_ty(selcx, obligation, &mut candidates);
      .           
  2,760 ( 0.00%)      if let ProjectionTyCandidateSet::Single(ProjectionTyCandidate::Object(_)) = candidates {
      .                   // Avoid normalization cycle from selection (see
      .                   // `assemble_candidates_from_object_ty`).
      .                   // FIXME(lazy_normalization): Lazy normalization should save us from
      .                   // having to special case this.
      .               } else {
  2,846 ( 0.00%)          assemble_candidates_from_impls(selcx, obligation, &mut candidates);
      .               };
      .           
  7,115 ( 0.00%)      match candidates {
      .                   ProjectionTyCandidateSet::Single(candidate) => {
 29,128 ( 0.01%)              Ok(ProjectedTy::Progress(confirm_candidate(selcx, obligation, candidate)))
      .                   }
      .                   ProjectionTyCandidateSet::None => Ok(ProjectedTy::NoProgress(
      .                       selcx
      .                           .tcx()
      .                           .mk_projection(obligation.predicate.item_def_id, obligation.predicate.substs),
      .                   )),
      .                   // Error occurred while trying to processing impls.
      .                   ProjectionTyCandidateSet::Error(e) => Err(ProjectionTyError::TraitSelectionError(e)),
      .                   // Inherent ambiguity that prevents us from even enumerating the
      .                   // candidates.
    396 ( 0.00%)          ProjectionTyCandidateSet::Ambiguous => Err(ProjectionTyError::TooManyCandidates),
      .               }
  2,945 ( 0.00%)  }
      .           
      .           /// The first thing we have to do is scan through the parameter
      .           /// environment to see whether there are any projection predicates
      .           /// there that can answer this question.
      .           fn assemble_candidates_from_param_env<'cx, 'tcx>(
      .               selcx: &mut SelectionContext<'cx, 'tcx>,
      .               obligation: &ProjectionTyObligation<'tcx>,
      .               candidate_set: &mut ProjectionTyCandidateSet<'tcx>,
      .           ) {
      .               debug!("assemble_candidates_from_param_env(..)");
      .               assemble_candidates_from_predicates(
      .                   selcx,
      .                   obligation,
      .                   candidate_set,
      .                   ProjectionTyCandidate::ParamEnv,
  1,423 ( 0.00%)          obligation.param_env.caller_bounds().iter(),
      .                   false,
      .               );
      .           }
      .           
      .           /// In the case of a nested projection like <<A as Foo>::FooT as Bar>::BarT, we may find
      .           /// that the definition of `Foo` has some clues:
      .           ///
      .           /// ```
-- line 1143 ----------------------------------------
-- line 1152 ----------------------------------------
      .               obligation: &ProjectionTyObligation<'tcx>,
      .               candidate_set: &mut ProjectionTyCandidateSet<'tcx>,
      .           ) {
      .               debug!("assemble_candidates_from_trait_def(..)");
      .           
      .               let tcx = selcx.tcx();
      .               // Check whether the self-type is itself a projection.
      .               // If so, extract what we know from the trait and try to come up with a good answer.
 16,904 ( 0.00%)      let bounds = match *obligation.predicate.self_ty().kind() {
      .                   ty::Projection(ref data) => tcx.item_bounds(data.item_def_id).subst(tcx, data.substs),
      .                   ty::Opaque(def_id, substs) => tcx.item_bounds(def_id).subst(tcx, substs),
      .                   ty::Infer(ty::TyVar(_)) => {
      .                       // If the self-type is an inference variable, then it MAY wind up
      .                       // being a projected type, so induce an ambiguity.
      .                       candidate_set.mark_ambiguous();
      .                       return;
      .                   }
-- line 1168 ----------------------------------------
-- line 1192 ----------------------------------------
      .               selcx: &mut SelectionContext<'cx, 'tcx>,
      .               obligation: &ProjectionTyObligation<'tcx>,
      .               candidate_set: &mut ProjectionTyCandidateSet<'tcx>,
      .           ) {
      .               debug!("assemble_candidates_from_object_ty(..)");
      .           
      .               let tcx = selcx.tcx();
      .           
  2,846 ( 0.00%)      let self_ty = obligation.predicate.self_ty();
      .               let object_ty = selcx.infcx().shallow_resolve(self_ty);
  7,115 ( 0.00%)      let data = match object_ty.kind() {
      .                   ty::Dynamic(data, ..) => data,
      .                   ty::Infer(ty::TyVar(_)) => {
      .                       // If the self-type is an inference variable, then it MAY wind up
      .                       // being an object type, so induce an ambiguity.
      .                       candidate_set.mark_ambiguous();
      .                       return;
      .                   }
      .                   _ => return,
-- line 1210 ----------------------------------------
-- line 1235 ----------------------------------------
      .               ctor: fn(ty::PolyProjectionPredicate<'tcx>) -> ProjectionTyCandidate<'tcx>,
      .               env_predicates: impl Iterator<Item = ty::Predicate<'tcx>>,
      .               potentially_unnormalized_candidates: bool,
      .           ) {
      .               let infcx = selcx.infcx();
      .               for predicate in env_predicates {
      .                   debug!(?predicate);
      .                   let bound_predicate = predicate.kind();
    337 ( 0.00%)          if let ty::PredicateKind::Projection(data) = predicate.kind().skip_binder() {
    212 ( 0.00%)              let data = bound_predicate.rebind(data);
    106 ( 0.00%)              let same_def_id = data.projection_def_id() == obligation.predicate.item_def_id;
      .           
    129 ( 0.00%)              let is_match = same_def_id
      .                           && infcx.probe(|_| {
    114 ( 0.00%)                      selcx.match_projection_projections(
      .                                   obligation,
    342 ( 0.00%)                          data,
      .                                   potentially_unnormalized_candidates,
      .                               )
      .                           });
      .           
      .                       debug!(?data, ?is_match, ?same_def_id);
      .           
     76 ( 0.00%)              if is_match {
    418 ( 0.00%)                  candidate_set.push_candidate(ctor(data));
      .           
      .                           if potentially_unnormalized_candidates
      .                               && !obligation.predicate.has_infer_types_or_consts()
      .                           {
      .                               // HACK: Pick the first trait def candidate for a fully
      .                               // inferred predicate. This is to allow duplicates that
      .                               // differ only in normalization.
      .                               return;
-- line 1267 ----------------------------------------
-- line 1274 ----------------------------------------
      .           #[tracing::instrument(level = "debug", skip(selcx, obligation, candidate_set))]
      .           fn assemble_candidates_from_impls<'cx, 'tcx>(
      .               selcx: &mut SelectionContext<'cx, 'tcx>,
      .               obligation: &ProjectionTyObligation<'tcx>,
      .               candidate_set: &mut ProjectionTyCandidateSet<'tcx>,
      .           ) {
      .               // If we are resolving `<T as TraitRef<...>>::Item == Type`,
      .               // start out by selecting the predicate `T as TraitRef<...>`:
  4,269 ( 0.00%)      let poly_trait_ref = ty::Binder::dummy(obligation.predicate.trait_ref(selcx.tcx()));
  2,846 ( 0.00%)      let trait_obligation = obligation.with(poly_trait_ref.to_poly_trait_predicate());
 12,807 ( 0.00%)      let _ = selcx.infcx().commit_if_ok(|_| {
  8,538 ( 0.00%)          let impl_source = match selcx.select(&trait_obligation) {
 13,240 ( 0.00%)              Ok(Some(impl_source)) => impl_source,
      .                       Ok(None) => {
      .                           candidate_set.mark_ambiguous();
      .                           return Err(());
      .                       }
      .                       Err(e) => {
      .                           debug!(error = ?e, "selection error");
      .                           candidate_set.mark_error(e);
      .                           return Err(());
      .                       }
      .                   };
      .           
  6,620 ( 0.00%)          let eligible = match &impl_source {
      .                       super::ImplSource::Closure(_)
      .                       | super::ImplSource::Generator(_)
      .                       | super::ImplSource::FnPointer(_)
      .                       | super::ImplSource::TraitAlias(_) => {
      .                           debug!(?impl_source);
      .                           true
      .                       }
      .                       super::ImplSource::UserDefined(impl_data) => {
-- line 1306 ----------------------------------------
-- line 1322 ----------------------------------------
      .                           //
      .                           // In either case, we handle this by not adding a
      .                           // candidate for an impl if it contains a `default`
      .                           // type.
      .                           //
      .                           // NOTE: This should be kept in sync with the similar code in
      .                           // `rustc_ty_utils::instance::resolve_associated_item()`.
      .                           let node_item =
 11,691 ( 0.00%)                      assoc_ty_def(selcx, impl_data.impl_def_id, obligation.predicate.item_def_id)
      .                                   .map_err(|ErrorReported| ())?;
      .           
  3,897 ( 0.00%)                  if node_item.is_final() {
      .                               // Non-specializable items are always projectable.
      .                               true
      .                           } else {
      .                               // Only reveal a specializable default if we're past type-checking
      .                               // and the obligation is monomorphic, otherwise passes such as
      .                               // transmute checking and polymorphic MIR optimizations could
      .                               // get a result which isn't correct for all monomorphizations.
      .                               if obligation.param_env.reveal() == Reveal::All {
-- line 1341 ----------------------------------------
-- line 1495 ----------------------------------------
      .                               obligation.cause.span,
      .                               &format!("Cannot project an associated type from `{:?}`", impl_source),
      .                           );
      .                           return Err(());
      .                       }
      .                   };
      .           
      .                   if eligible {
 18,494 ( 0.00%)              if candidate_set.push_candidate(ProjectionTyCandidate::Select(impl_source)) {
      .                           Ok(())
      .                       } else {
      .                           Err(())
      .                       }
      .                   } else {
      .                       Err(())
      .                   }
      6 ( 0.00%)      });
      .           }
      .           
      .           fn confirm_candidate<'cx, 'tcx>(
      .               selcx: &mut SelectionContext<'cx, 'tcx>,
      .               obligation: &ProjectionTyObligation<'tcx>,
      .               candidate: ProjectionTyCandidate<'tcx>,
      .           ) -> Progress<'tcx> {
      .               debug!(?obligation, ?candidate, "confirm_candidate");
  6,620 ( 0.00%)      let mut progress = match candidate {
      .                   ProjectionTyCandidate::ParamEnv(poly_projection)
      .                   | ProjectionTyCandidate::Object(poly_projection) => {
    532 ( 0.00%)              confirm_param_env_candidate(selcx, obligation, poly_projection, false)
      .                   }
      .           
      .                   ProjectionTyCandidate::TraitDef(poly_projection) => {
      .                       confirm_param_env_candidate(selcx, obligation, poly_projection, true)
      .                   }
      .           
      .                   ProjectionTyCandidate::Select(impl_source) => {
 12,860 ( 0.00%)              confirm_select_candidate(selcx, obligation, impl_source)
      .                   }
      .               };
      .               // When checking for cycle during evaluation, we compare predicates with
      .               // "syntactic" equality. Since normalization generally introduces a type
      .               // with new region variables, we need to resolve them to existing variables
      .               // when possible for this to work. See `auto-trait-projection-recursion.rs`
      .               // for a case where this matters.
  1,362 ( 0.00%)      if progress.ty.has_infer_regions() {
    312 ( 0.00%)          progress.ty = OpportunisticRegionResolver::new(selcx.infcx()).fold_ty(progress.ty);
      .               }
      .               progress
      .           }
      .           
      .           fn confirm_select_candidate<'cx, 'tcx>(
      .               selcx: &mut SelectionContext<'cx, 'tcx>,
      .               obligation: &ProjectionTyObligation<'tcx>,
      .               impl_source: Selection<'tcx>,
      .           ) -> Progress<'tcx> {
  6,430 ( 0.00%)      match impl_source {
  6,320 ( 0.00%)          super::ImplSource::UserDefined(data) => confirm_impl_candidate(selcx, obligation, data),
      .                   super::ImplSource::Generator(data) => confirm_generator_candidate(selcx, obligation, data),
    132 ( 0.00%)          super::ImplSource::Closure(data) => confirm_closure_candidate(selcx, obligation, data),
      .                   super::ImplSource::FnPointer(data) => confirm_fn_pointer_candidate(selcx, obligation, data),
      .                   super::ImplSource::DiscriminantKind(data) => {
      .                       confirm_discriminant_kind_candidate(selcx, obligation, data)
      .                   }
      .                   super::ImplSource::Pointee(data) => confirm_pointee_candidate(selcx, obligation, data),
      .                   super::ImplSource::Object(_)
      .                   | super::ImplSource::AutoImpl(..)
      .                   | super::ImplSource::Param(..)
-- line 1561 ----------------------------------------
-- line 1700 ----------------------------------------
      .                   .with_addl_obligations(obligations)
      .           }
      .           
      .           fn confirm_closure_candidate<'cx, 'tcx>(
      .               selcx: &mut SelectionContext<'cx, 'tcx>,
      .               obligation: &ProjectionTyObligation<'tcx>,
      .               impl_source: ImplSourceClosureData<'tcx, PredicateObligation<'tcx>>,
      .           ) -> Progress<'tcx> {
     88 ( 0.00%)      let closure_sig = impl_source.substs.as_closure().sig();
    220 ( 0.00%)      let Normalized { value: closure_sig, obligations } = normalize_with_depth(
      .                   selcx,
     22 ( 0.00%)          obligation.param_env,
      .                   obligation.cause.clone(),
     66 ( 0.00%)          obligation.recursion_depth + 1,
    176 ( 0.00%)          closure_sig,
      .               );
      .           
      .               debug!(?obligation, ?closure_sig, ?obligations, "confirm_closure_candidate");
      .           
     66 ( 0.00%)      confirm_callable_candidate(selcx, obligation, closure_sig, util::TupleArgumentsFlag::No)
    154 ( 0.00%)          .with_addl_obligations(impl_source.nested)
    154 ( 0.00%)          .with_addl_obligations(obligations)
      .           }
      .           
      .           fn confirm_callable_candidate<'cx, 'tcx>(
      .               selcx: &mut SelectionContext<'cx, 'tcx>,
      .               obligation: &ProjectionTyObligation<'tcx>,
      .               fn_sig: ty::PolyFnSig<'tcx>,
      .               flag: util::TupleArgumentsFlag,
      .           ) -> Progress<'tcx> {
      .               let tcx = selcx.tcx();
      .           
      .               debug!(?obligation, ?fn_sig, "confirm_callable_candidate");
      .           
    110 ( 0.00%)      let fn_once_def_id = tcx.require_lang_item(LangItem::FnOnce, None);
    110 ( 0.00%)      let fn_once_output_def_id = tcx.require_lang_item(LangItem::FnOnceOutput, None);
      .           
    220 ( 0.00%)      let predicate = super::util::closure_trait_ref_and_return_type(
      .                   tcx,
      .                   fn_once_def_id,
     44 ( 0.00%)          obligation.predicate.self_ty(),
     88 ( 0.00%)          fn_sig,
      .                   flag,
      .               )
      .               .map_bound(|(trait_ref, ret_type)| ty::ProjectionPredicate {
      .                   projection_ty: ty::ProjectionTy {
      .                       substs: trait_ref.substs,
      .                       item_def_id: fn_once_output_def_id,
      .                   },
      .                   term: ret_type.into(),
      .               });
      .           
    264 ( 0.00%)      confirm_param_env_candidate(selcx, obligation, predicate, true)
      .           }
      .           
    720 ( 0.00%)  fn confirm_param_env_candidate<'cx, 'tcx>(
      .               selcx: &mut SelectionContext<'cx, 'tcx>,
      .               obligation: &ProjectionTyObligation<'tcx>,
      .               poly_cache_entry: ty::PolyProjectionPredicate<'tcx>,
      .               potentially_unnormalized_candidate: bool,
      .           ) -> Progress<'tcx> {
      .               let infcx = selcx.infcx();
      .               let cause = &obligation.cause;
    120 ( 0.00%)      let param_env = obligation.param_env;
      .           
    240 ( 0.00%)      let (cache_entry, _) = infcx.replace_bound_vars_with_fresh_vars(
    180 ( 0.00%)          cause.span,
      .                   LateBoundRegionConversionTime::HigherRankedType,
      .                   poly_cache_entry,
      .               );
      .           
    120 ( 0.00%)      let cache_projection = cache_entry.projection_ty;
      .               let mut nested_obligations = Vec::new();
    180 ( 0.00%)      let obligation_projection = obligation.predicate;
    480 ( 0.00%)      let obligation_projection = ensure_sufficient_stack(|| {
    240 ( 0.00%)          normalize_with_depth_to(
      .                       selcx,
     60 ( 0.00%)              obligation.param_env,
      .                       obligation.cause.clone(),
    180 ( 0.00%)              obligation.recursion_depth + 1,
    120 ( 0.00%)              obligation_projection,
      .                       &mut nested_obligations,
      .                   )
      .               });
    120 ( 0.00%)      let cache_projection = if potentially_unnormalized_candidate {
    154 ( 0.00%)          ensure_sufficient_stack(|| {
     88 ( 0.00%)              normalize_with_depth_to(
      .                           selcx,
     22 ( 0.00%)                  obligation.param_env,
      .                           obligation.cause.clone(),
     66 ( 0.00%)                  obligation.recursion_depth + 1,
     44 ( 0.00%)                  cache_projection,
      .                           &mut nested_obligations,
      .                       )
      .                   })
      .               } else {
     76 ( 0.00%)          cache_projection
      .               };
      .           
      .               debug!(?cache_projection, ?obligation_projection);
      .           
    120 ( 0.00%)      match infcx.at(cause, param_env).eq(cache_projection, obligation_projection) {
      .                   Ok(InferOk { value: _, obligations }) => {
      .                       nested_obligations.extend(obligations);
    120 ( 0.00%)              assoc_ty_own_obligations(selcx, obligation, &mut nested_obligations);
      .                       // FIXME(associated_const_equality): Handle consts here as well? Maybe this progress type should just take
      .                       // a term instead.
    480 ( 0.00%)              Progress { ty: cache_entry.term.ty().unwrap(), obligations: nested_obligations }
      .                   }
      .                   Err(e) => {
      .                       let msg = format!(
      .                           "Failed to unify obligation `{:?}` with poly_projection `{:?}`: {:?}",
      .                           obligation, poly_cache_entry, e,
      .                       );
      .                       debug!("confirm_param_env_candidate: {}", msg);
      .                       let err = infcx.tcx.ty_error_with_message(obligation.cause.span, &msg);
      .                       Progress { ty: err, obligations: vec![] }
      .                   }
      .               }
    480 ( 0.00%)  }
      .           
      .           fn confirm_impl_candidate<'cx, 'tcx>(
      .               selcx: &mut SelectionContext<'cx, 'tcx>,
      .               obligation: &ProjectionTyObligation<'tcx>,
      .               impl_impl_source: ImplSourceUserDefinedData<'tcx, PredicateObligation<'tcx>>,
      .           ) -> Progress<'tcx> {
      .               let tcx = selcx.tcx();
      .           
  5,056 ( 0.00%)      let ImplSourceUserDefinedData { impl_def_id, substs, mut nested } = impl_impl_source;
  3,792 ( 0.00%)      let assoc_item_id = obligation.predicate.item_def_id;
  5,056 ( 0.00%)      let trait_def_id = tcx.trait_id_of_impl(impl_def_id).unwrap();
      .           
  5,056 ( 0.00%)      let param_env = obligation.param_env;
  8,848 ( 0.00%)      let assoc_ty = match assoc_ty_def(selcx, impl_def_id, assoc_item_id) {
 12,640 ( 0.00%)          Ok(assoc_ty) => assoc_ty,
      .                   Err(ErrorReported) => return Progress { ty: tcx.ty_error(), obligations: nested },
      .               };
      .           
  5,056 ( 0.00%)      if !assoc_ty.item.defaultness.has_value() {
      .                   // This means that the impl is missing a definition for the
      .                   // associated type. This error will be reported by the type
      .                   // checker method `check_impl_items_against_trait`, so here we
      .                   // just return Error.
      .                   debug!(
      .                       "confirm_impl_candidate: no associated type {:?} for {:?}",
      .                       assoc_ty.item.name, obligation.predicate
      .                   );
-- line 1846 ----------------------------------------
-- line 1847 ----------------------------------------
      .                   return Progress { ty: tcx.ty_error(), obligations: nested };
      .               }
      .               // If we're trying to normalize `<Vec<u32> as X>::A<S>` using
      .               //`impl<T> X for Vec<T> { type A<Y> = Box<Y>; }`, then:
      .               //
      .               // * `obligation.predicate.substs` is `[Vec<u32>, S]`
      .               // * `substs` is `[u32]`
      .               // * `substs` ends up as `[u32, S]`
  7,584 ( 0.00%)      let substs = obligation.predicate.substs.rebase_onto(tcx, trait_def_id, substs);
      .               let substs =
 13,904 ( 0.00%)          translate_substs(selcx.infcx(), param_env, impl_def_id, substs, assoc_ty.defining_node);
  1,264 ( 0.00%)      let ty = tcx.type_of(assoc_ty.item.def_id);
  3,792 ( 0.00%)      if substs.len() != tcx.generics_of(assoc_ty.item.def_id).count() {
      .                   let err = tcx.ty_error_with_message(
      .                       obligation.cause.span,
      .                       "impl item and trait item have different parameter counts",
      .                   );
      .                   Progress { ty: err, obligations: nested }
      .               } else {
  2,528 ( 0.00%)          assoc_ty_own_obligations(selcx, obligation, &mut nested);
      .                   Progress { ty: ty.subst(tcx, substs), obligations: nested }
      .               }
      .           }
      .           
      .           // Get obligations corresponding to the predicates from the where-clause of the
      .           // associated type itself.
      .           // Note: `feature(generic_associated_types)` is required to write such
      .           // predicates, even for non-generic associcated types.
 11,916 ( 0.00%)  fn assoc_ty_own_obligations<'cx, 'tcx>(
      .               selcx: &mut SelectionContext<'cx, 'tcx>,
      .               obligation: &ProjectionTyObligation<'tcx>,
      .               nested: &mut Vec<PredicateObligation<'tcx>>,
      .           ) {
      .               let tcx = selcx.tcx();
 11,916 ( 0.00%)      for predicate in tcx
  2,648 ( 0.00%)          .predicates_of(obligation.predicate.item_def_id)
  3,972 ( 0.00%)          .instantiate_own(tcx, obligation.predicate.substs)
      .                   .predicates
      .               {
      .                   let normalized = normalize_with_depth_to(
      .                       selcx,
      .                       obligation.param_env,
      .                       obligation.cause.clone(),
      .                       obligation.recursion_depth + 1,
      .                       predicate,
-- line 1891 ----------------------------------------
-- line 1893 ----------------------------------------
      .                   );
      .                   nested.push(Obligation::with_depth(
      .                       obligation.cause.clone(),
      .                       obligation.recursion_depth + 1,
      .                       obligation.param_env,
      .                       normalized,
      .                   ));
      .               }
 10,592 ( 0.00%)  }
      .           
      .           /// Locate the definition of an associated type in the specialization hierarchy,
      .           /// starting from the given impl.
      .           ///
      .           /// Based on the "projection mode", this lookup may in fact only examine the
      .           /// topmost impl. See the comments for `Reveal` for more details.
 23,067 ( 0.00%)  fn assoc_ty_def(
      .               selcx: &SelectionContext<'_, '_>,
      .               impl_def_id: DefId,
      .               assoc_ty_def_id: DefId,
      .           ) -> Result<specialization_graph::LeafDef, ErrorReported> {
      .               let tcx = selcx.tcx();
  5,126 ( 0.00%)      let trait_def_id = tcx.impl_trait_ref(impl_def_id).unwrap().def_id;
      .               let trait_def = tcx.trait_def(trait_def_id);
      .           
      .               // This function may be called while we are still building the
      .               // specialization graph that is queried below (via TraitDef::ancestors()),
      .               // so, in order to avoid unnecessary infinite recursion, we manually look
      .               // for the associated item at the given impl.
      .               // If there is no such item in that impl, this function will fail with a
      .               // cycle error if the specialization graph is currently being built.
  5,126 ( 0.00%)      if let Some(&impl_item_id) = tcx.impl_item_implementor_ids(impl_def_id).get(&assoc_ty_def_id) {
      .                   let item = tcx.associated_item(impl_item_id);
      .                   let impl_node = specialization_graph::Node::Impl(impl_def_id);
 30,756 ( 0.01%)          return Ok(specialization_graph::LeafDef {
 15,378 ( 0.00%)              item: *item,
      .                       defining_node: impl_node,
 12,815 ( 0.00%)              finalizing_node: if item.defaultness.is_default() { None } else { Some(impl_node) },
      .                   });
      .               }
      .           
      .               let ancestors = trait_def.ancestors(tcx, impl_def_id)?;
      .               if let Some(assoc_item) = ancestors.leaf_def(tcx, assoc_ty_def_id) {
      .                   Ok(assoc_item)
      .               } else {
      .                   // This is saying that neither the trait nor
-- line 1937 ----------------------------------------
-- line 1941 ----------------------------------------
      .                   // if the user wrote a bad item name, it
      .                   // should have failed in astconv.
      .                   bug!(
      .                       "No associated type `{}` for {}",
      .                       tcx.item_name(assoc_ty_def_id),
      .                       tcx.def_path_str(impl_def_id)
      .                   )
      .               }
 23,067 ( 0.00%)  }
      .           
      .           crate trait ProjectionCacheKeyExt<'cx, 'tcx>: Sized {
      .               fn from_poly_projection_predicate(
      .                   selcx: &mut SelectionContext<'cx, 'tcx>,
      .                   predicate: ty::PolyProjectionPredicate<'tcx>,
      .               ) -> Option<Self>;
      .           }
      .           
      .           impl<'cx, 'tcx> ProjectionCacheKeyExt<'cx, 'tcx> for ProjectionCacheKey<'tcx> {
     63 ( 0.00%)      fn from_poly_projection_predicate(
      .                   selcx: &mut SelectionContext<'cx, 'tcx>,
      .                   predicate: ty::PolyProjectionPredicate<'tcx>,
      .               ) -> Option<Self> {
      .                   let infcx = selcx.infcx();
      .                   // We don't do cross-snapshot caching of obligations with escaping regions,
      .                   // so there's no cache key to use
     54 ( 0.00%)          predicate.no_bound_vars().map(|predicate| {
     18 ( 0.00%)              ProjectionCacheKey::new(
      .                           // We don't attempt to match up with a specific type-variable state
      .                           // from a specific call to `opt_normalize_projection_type` - if
      .                           // there's no precise match, the original cache entry is "stranded"
      .                           // anyway.
      .                           infcx.resolve_vars_if_possible(predicate.projection_ty),
      .                       )
      .                   })
     72 ( 0.00%)      }
      .           }

159,238 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/project.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs
--------------------------------------------------------------------------------
Ir               

-- line 33 ----------------------------------------
      .           
      .           impl<'tcx> ForestObligation for PendingPredicateObligation<'tcx> {
      .               /// Note that we include both the `ParamEnv` and the `Predicate`,
      .               /// as the `ParamEnv` can influence whether fulfillment succeeds
      .               /// or fails.
      .               type CacheKey = ty::ParamEnvAnd<'tcx, ty::Predicate<'tcx>>;
      .           
      .               fn as_cache_key(&self) -> Self::CacheKey {
 83,379 ( 0.02%)          self.obligation.param_env.and(self.obligation.predicate)
      .               }
      .           }
      .           
      .           /// The fulfillment context is used to drive trait resolution. It
      .           /// consists of a list of obligations that must be (eventually)
      .           /// satisfied. The job is to track which are satisfied, which yielded
      .           /// errors, and which are still pending. At any point, users can call
      .           /// `select_where_possible`, and the fulfillment context will try to do
-- line 49 ----------------------------------------
-- line 95 ----------------------------------------
      .           }
      .           
      .           // `PendingPredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           static_assert_size!(PendingPredicateObligation<'_>, 72);
      .           
      .           impl<'a, 'tcx> FulfillmentContext<'tcx> {
      .               /// Creates a new fulfillment context.
  1,170 ( 0.00%)      pub fn new() -> FulfillmentContext<'tcx> {
 14,550 ( 0.00%)          FulfillmentContext {
  1,386 ( 0.00%)              predicates: ObligationForest::new(),
      .                       relationships: FxHashMap::default(),
      .                       register_region_obligations: true,
      .                       usable_in_snapshot: false,
      .                   }
  1,170 ( 0.00%)      }
      .           
      .               pub fn new_in_snapshot() -> FulfillmentContext<'tcx> {
    267 ( 0.00%)          FulfillmentContext {
     89 ( 0.00%)              predicates: ObligationForest::new(),
      .                       relationships: FxHashMap::default(),
      .                       register_region_obligations: true,
      .                       usable_in_snapshot: true,
      .                   }
      .               }
      .           
      .               pub fn new_ignoring_regions() -> FulfillmentContext<'tcx> {
  3,888 ( 0.00%)          FulfillmentContext {
    972 ( 0.00%)              predicates: ObligationForest::new(),
      .                       relationships: FxHashMap::default(),
      .                       register_region_obligations: false,
      .                       usable_in_snapshot: false,
      .                   }
      .               }
      .           
      .               /// Attempts to select obligations using `selcx`.
      .               fn select(&mut self, selcx: &mut SelectionContext<'a, 'tcx>) -> Vec<FulfillmentError<'tcx>> {
 12,098 ( 0.00%)          let span = debug_span!("select", obligation_forest_size = ?self.predicates.len());
      .                   let _enter = span.enter();
      .           
      .                   let mut errors = Vec::new();
      .           
      .                   loop {
      .                       debug!("select: starting another iteration");
      .           
      .                       // Process pending obligations.
      .                       let outcome: Outcome<_, _> =
 51,093 ( 0.01%)                  self.predicates.process_obligations(&mut FulfillProcessor {
      .                               selcx,
  7,299 ( 0.00%)                      register_region_obligations: self.register_region_obligations,
      .                           });
      .                       debug!("select: outcome={:#?}", outcome);
      .           
      .                       // FIXME: if we kept the original cache key, we could mark projection
      .                       // obligations as complete for the projection cache here.
      .           
      .                       errors.extend(outcome.errors.into_iter().map(to_fulfillment_error));
      .           
      .                       // If nothing new was added, no need to keep looping.
 14,598 ( 0.00%)              if outcome.stalled {
      .                           break;
      .                       }
      .                   }
      .           
      .                   debug!(
      .                       "select({} predicates remaining, {} errors) done",
      .                       self.predicates.len(),
      .                       errors.len()
-- line 162 ----------------------------------------
-- line 169 ----------------------------------------
      .           impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {
      .               /// "Normalize" a projection type `<SomeType as SomeTrait>::X` by
      .               /// creating a fresh type variable `$0` as well as a projection
      .               /// predicate `<SomeType as SomeTrait>::X == $0`. When the
      .               /// inference engine runs, it will attempt to find an impl of
      .               /// `SomeTrait` or a where-clause that lets us unify `$0` with
      .               /// something concrete. If this fails, we'll unify `$0` with
      .               /// `projection_ty` again.
  1,958 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self, infcx, param_env, cause))]
      .               fn normalize_projection_type(
      .                   &mut self,
      .                   infcx: &InferCtxt<'_, 'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   projection_ty: ty::ProjectionTy<'tcx>,
      .                   cause: ObligationCause<'tcx>,
      .               ) -> Ty<'tcx> {
      .                   debug_assert!(!projection_ty.has_escaping_bound_vars());
      .           
      .                   // FIXME(#20304) -- cache
      .           
      .                   let mut selcx = SelectionContext::new(infcx);
      .                   let mut obligations = vec![];
    801 ( 0.00%)          let normalized_ty = project::normalize_projection_type(
      .                       &mut selcx,
      .                       param_env,
      .                       projection_ty,
    445 ( 0.00%)              cause,
      .                       0,
      .                       &mut obligations,
      .                   );
      .                   self.register_predicate_obligations(infcx, obligations);
      .           
      .                   debug!(?normalized_ty);
      .           
      .                   normalized_ty
      .               }
      .           
 44,466 ( 0.01%)      fn register_predicate_obligation(
      .                   &mut self,
      .                   infcx: &InferCtxt<'_, 'tcx>,
      .                   obligation: PredicateObligation<'tcx>,
      .               ) {
      .                   // this helps to reduce duplicate errors, as well as making
      .                   // debug output much nicer to read and so on.
 22,233 ( 0.00%)          let obligation = infcx.resolve_vars_if_possible(obligation);
      .           
      .                   debug!(?obligation, "register_predicate_obligation");
      .           
 44,466 ( 0.01%)          assert!(!infcx.is_in_snapshot() || self.usable_in_snapshot);
      .           
 22,233 ( 0.00%)          super::relationships::update(self, infcx, &obligation);
      .           
      .                   self.predicates
      .                       .register_obligation(PendingPredicateObligation { obligation, stalled_on: vec![] });
 37,055 ( 0.01%)      }
      .           
 32,728 ( 0.01%)      fn select_all_or_error(&mut self, infcx: &InferCtxt<'_, 'tcx>) -> Vec<FulfillmentError<'tcx>> {
      .                   {
  4,091 ( 0.00%)              let errors = self.select_where_possible(infcx);
  4,091 ( 0.00%)              if !errors.is_empty() {
      .                           return errors;
      .                       }
      .                   }
      .           
 20,455 ( 0.00%)          self.predicates.to_errors(CodeAmbiguity).into_iter().map(to_fulfillment_error).collect()
 28,637 ( 0.01%)      }
      .           
 60,490 ( 0.01%)      fn select_where_possible(
      .                   &mut self,
      .                   infcx: &InferCtxt<'_, 'tcx>,
      .               ) -> Vec<FulfillmentError<'tcx>> {
      .                   let mut selcx = SelectionContext::new(infcx);
      .                   self.select(&mut selcx)
 54,441 ( 0.01%)      }
      .           
    144 ( 0.00%)      fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {
      .                   self.predicates.map_pending_obligations(|o| o.obligation.clone())
    192 ( 0.00%)      }
      .           
      .               fn relationships(&mut self) -> &mut FxHashMap<ty::TyVid, ty::FoundRelationships> {
     26 ( 0.00%)          &mut self.relationships
     26 ( 0.00%)      }
      .           }
      .           
      .           struct FulfillProcessor<'a, 'b, 'tcx> {
      .               selcx: &'a mut SelectionContext<'b, 'tcx>,
      .               register_region_obligations: bool,
      .           }
      .           
      .           fn mk_pending(os: Vec<PredicateObligation<'_>>) -> Vec<PendingPredicateObligation<'_>> {
-- line 258 ----------------------------------------
-- line 275 ----------------------------------------
      .               #[inline(always)]
      .               fn process_obligation(
      .                   &mut self,
      .                   pending_obligation: &mut Self::Obligation,
      .               ) -> ProcessResult<Self::Obligation, Self::Error> {
      .                   // If we were stalled on some unresolved variables, first check whether
      .                   // any of them have been resolved; if not, don't bother doing more work
      .                   // yet.
 57,645 ( 0.01%)          let change = match pending_obligation.stalled_on.len() {
      .                       // Match arms are in order of frequency, which matters because this
      .                       // code is so hot. 1 and 0 dominate; 2+ is fairly rare.
      .                       1 => {
 16,023 ( 0.00%)                  let infer_var = pending_obligation.stalled_on[0];
  5,341 ( 0.00%)                  self.selcx.infcx().ty_or_const_infer_var_changed(infer_var)
      .                       }
      .                       0 => {
      .                           // In this case we haven't changed, but wish to make a change.
      .                           true
      .                       }
      .                       _ => {
      .                           // This `for` loop was once a call to `all()`, but this lower-level
      .                           // form was a perf win. See #64545 for details.
    117 ( 0.00%)                  (|| {
    201 ( 0.00%)                      for &infer_var in &pending_obligation.stalled_on {
     30 ( 0.00%)                          if self.selcx.infcx().ty_or_const_infer_var_changed(infer_var) {
      .                                       return true;
      .                                   }
      .                               }
      .                               false
      .                           })()
      .                       }
      .                   };
      .           
-- line 307 ----------------------------------------
-- line 309 ----------------------------------------
      .                       debug!(
      .                           "process_predicate: pending obligation {:?} still stalled on {:?}",
      .                           self.selcx.infcx().resolve_vars_if_possible(pending_obligation.obligation.clone()),
      .                           pending_obligation.stalled_on
      .                       );
      .                       return ProcessResult::Unchanged;
      .                   }
      .           
 27,855 ( 0.01%)          self.progress_changed_obligations(pending_obligation)
      .               }
      .           
      .               fn process_backedge<'c, I>(
      .                   &mut self,
      .                   cycle: I,
      .                   _marker: PhantomData<&'c PendingPredicateObligation<'tcx>>,
      .               ) where
      .                   I: Clone + Iterator<Item = &'c PendingPredicateObligation<'tcx>>,
-- line 325 ----------------------------------------
-- line 333 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {
      .               // The code calling this method is extremely hot and only rarely
      .               // actually uses this, so move this part of the code
      .               // out of that loop.
      .               #[inline(never)]
 92,850 ( 0.02%)      fn progress_changed_obligations(
      .                   &mut self,
      .                   pending_obligation: &mut PendingPredicateObligation<'tcx>,
      .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
      .                   pending_obligation.stalled_on.truncate(0);
      .           
      .                   let obligation = &mut pending_obligation.obligation;
      .           
 27,855 ( 0.01%)          if obligation.predicate.has_infer_types_or_consts() {
  2,110 ( 0.00%)              obligation.predicate =
  6,330 ( 0.00%)                  self.selcx.infcx().resolve_vars_if_possible(obligation.predicate);
      .                   }
      .           
      .                   debug!(?obligation, ?obligation.cause, "process_obligation");
      .           
      .                   let infcx = self.selcx.infcx();
      .           
 14,350 ( 0.00%)          let binder = obligation.predicate.kind();
 64,995 ( 0.01%)          match binder.no_bound_vars() {
    748 ( 0.00%)              None => match binder.skip_binder() {
      .                           // Evaluation will discard candidates using the leak check.
      .                           // This means we need to pass it the bound version of our
      .                           // predicate.
      .                           ty::PredicateKind::Trait(trait_ref) => {
      .                               let trait_obligation = obligation.with(binder.rebind(trait_ref));
      .           
    136 ( 0.00%)                      self.process_trait_obligation(
      .                                   obligation,
    408 ( 0.00%)                          trait_obligation,
      .                                   &mut pending_obligation.stalled_on,
      .                               )
      .                           }
      .                           ty::PredicateKind::Projection(data) => {
      .                               let project_obligation = obligation.with(binder.rebind(data));
      .           
    136 ( 0.00%)                      self.process_projection_obligation(
      .                                   obligation,
    408 ( 0.00%)                          project_obligation,
      .                                   &mut pending_obligation.stalled_on,
      .                               )
      .                           }
      .                           ty::PredicateKind::RegionOutlives(_)
      .                           | ty::PredicateKind::TypeOutlives(_)
      .                           | ty::PredicateKind::WellFormed(_)
      .                           | ty::PredicateKind::ObjectSafe(_)
      .                           | ty::PredicateKind::ClosureKind(..)
-- line 386 ----------------------------------------
-- line 397 ----------------------------------------
      .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
      .                               bug!("TypeWellFormedFromEnv is only used for Chalk")
      .                           }
      .                       },
      .                       Some(pred) => match pred {
      .                           ty::PredicateKind::Trait(data) => {
      .                               let trait_obligation = obligation.with(Binder::dummy(data));
      .           
 32,260 ( 0.01%)                      self.process_trait_obligation(
      .                                   obligation,
141,944 ( 0.03%)                          trait_obligation,
      .                                   &mut pending_obligation.stalled_on,
      .                               )
      .                           }
      .           
      .                           ty::PredicateKind::RegionOutlives(data) => {
    498 ( 0.00%)                      match infcx.region_outlives_predicate(&obligation.cause, Binder::dummy(data)) {
    332 ( 0.00%)                          Ok(()) => ProcessResult::Changed(vec![]),
      .                                   Err(_) => ProcessResult::Error(CodeSelectionError(Unimplemented)),
      .                               }
      .                           }
      .           
      .                           ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(t_a, r_b)) => {
  1,940 ( 0.00%)                      if self.register_region_obligations {
  4,850 ( 0.00%)                          self.selcx.infcx().register_region_obligation_with_cause(
      .                                       t_a,
      .                                       r_b,
      .                                       &obligation.cause,
      .                                   );
      .                               }
      .                               ProcessResult::Changed(vec![])
      .                           }
      .           
      .                           ty::PredicateKind::Projection(ref data) => {
      .                               let project_obligation = obligation.with(Binder::dummy(*data));
      .           
    880 ( 0.00%)                      self.process_projection_obligation(
      .                                   obligation,
  2,640 ( 0.00%)                          project_obligation,
      .                                   &mut pending_obligation.stalled_on,
      .                               )
      .                           }
      .           
      .                           ty::PredicateKind::ObjectSafe(trait_def_id) => {
      .                               if !self.selcx.tcx().is_object_safe(trait_def_id) {
      .                                   ProcessResult::Error(CodeSelectionError(Unimplemented))
      .                               } else {
      .                                   ProcessResult::Changed(vec![])
      .                               }
      .                           }
      .           
      .                           ty::PredicateKind::ClosureKind(_, closure_substs, kind) => {
     99 ( 0.00%)                      match self.selcx.infcx().closure_kind(closure_substs) {
      .                                   Some(closure_kind) => {
    198 ( 0.00%)                              if closure_kind.extends(kind) {
      .                                           ProcessResult::Changed(vec![])
      .                                       } else {
      .                                           ProcessResult::Error(CodeSelectionError(Unimplemented))
      .                                       }
      .                                   }
      .                                   None => ProcessResult::Unchanged,
      .                               }
      .                           }
      .           
      .                           ty::PredicateKind::WellFormed(arg) => {
 10,248 ( 0.00%)                      match wf::obligations(
      .                                   self.selcx.infcx(),
  2,928 ( 0.00%)                          obligation.param_env,
  2,928 ( 0.00%)                          obligation.cause.body_id,
  4,392 ( 0.00%)                          obligation.recursion_depth + 1,
      .                                   arg,
      .                                   obligation.cause.span,
      .                               ) {
      .                                   None => {
    892 ( 0.00%)                              pending_obligation.stalled_on =
  1,561 ( 0.00%)                                  vec![TyOrConstInferVar::maybe_from_generic_arg(arg).unwrap()];
    446 ( 0.00%)                              ProcessResult::Unchanged
      .                                   }
  3,723 ( 0.00%)                          Some(os) => ProcessResult::Changed(mk_pending(os)),
      .                               }
      .                           }
      .           
      .                           ty::PredicateKind::Subtype(subtype) => {
    304 ( 0.00%)                      match self.selcx.infcx().subtype_predicate(
      .                                   &obligation.cause,
      .                                   obligation.param_env,
      .                                   Binder::dummy(subtype),
      .                               ) {
      .                                   None => {
      .                                       // None means that both are unresolved.
    180 ( 0.00%)                              pending_obligation.stalled_on = vec![
     36 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(subtype.a).unwrap(),
     72 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(subtype.b).unwrap(),
      .                                       ];
      .                                       ProcessResult::Unchanged
      .                                   }
      .                                   Some(Ok(ok)) => ProcessResult::Changed(mk_pending(ok.obligations)),
      .                                   Some(Err(err)) => {
      .                                       let expected_found =
      .                                           ExpectedFound::new(subtype.a_is_expected, subtype.a, subtype.b);
      .                                       ProcessResult::Error(FulfillmentErrorCode::CodeSubtypeError(
-- line 497 ----------------------------------------
-- line 523 ----------------------------------------
      .                                           expected_found,
      .                                           err,
      .                                       ))
      .                                   }
      .                               }
      .                           }
      .           
      .                           ty::PredicateKind::ConstEvaluatable(uv) => {
      6 ( 0.00%)                      match const_evaluatable::is_const_evaluatable(
      .                                   self.selcx.infcx(),
     12 ( 0.00%)                          uv,
      2 ( 0.00%)                          obligation.param_env,
      1 ( 0.00%)                          obligation.cause.span,
      .                               ) {
      .                                   Ok(()) => ProcessResult::Changed(vec![]),
      .                                   Err(NotConstEvaluatable::MentionsInfer) => {
      .                                       pending_obligation.stalled_on.clear();
      .                                       pending_obligation.stalled_on.extend(
      .                                           uv.substs
      .                                               .iter()
      .                                               .filter_map(TyOrConstInferVar::maybe_from_generic_arg),
-- line 543 ----------------------------------------
-- line 639 ----------------------------------------
      .                                   }
      .                               }
      .                           }
      .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
      .                               bug!("TypeWellFormedFromEnv is only used for Chalk")
      .                           }
      .                       },
      .                   }
 83,565 ( 0.02%)      }
      .           
123,234 ( 0.03%)      #[instrument(level = "debug", skip(self, obligation, stalled_on))]
      .               fn process_trait_obligation(
      .                   &mut self,
      .                   obligation: &PredicateObligation<'tcx>,
      .                   trait_obligation: TraitObligation<'tcx>,
      .                   stalled_on: &mut Vec<TyOrConstInferVar<'tcx>>,
      .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
  6,486 ( 0.00%)          let infcx = self.selcx.infcx();
 19,458 ( 0.00%)          if obligation.predicate.is_global() {
      .                       // no type variables present, can use evaluation for better caching.
      .                       // FIXME: consider caching errors too.
 10,584 ( 0.00%)              if infcx.predicate_must_hold_considering_regions(obligation) {
      .                           debug!(
      .                               "selecting trait at depth {} evaluated to holds",
      .                               obligation.recursion_depth
      .                           );
 10,584 ( 0.00%)                  return ProcessResult::Changed(vec![]);
      .                       }
      .                   }
      .           
  8,358 ( 0.00%)          match self.selcx.select(&trait_obligation) {
      .                       Ok(Some(impl_source)) => {
      .                           debug!("selecting trait at depth {} yielded Ok(Some)", obligation.recursion_depth);
 12,384 ( 0.00%)                  ProcessResult::Changed(mk_pending(impl_source.nested_obligations()))
      .                       }
      .                       Ok(None) => {
      .                           debug!("selecting trait at depth {} yielded Ok(None)", obligation.recursion_depth);
      .           
      .                           // This is a bit subtle: for the most part, the
      .                           // only reason we can fail to make progress on
      .                           // trait selection is because we don't have enough
      .                           // information about the types in the trait.
      .                           stalled_on.clear();
      .                           stalled_on.extend(substs_infer_vars(
      .                               self.selcx,
    506 ( 0.00%)                      trait_obligation.predicate.map_bound(|pred| pred.trait_ref.substs),
      .                           ));
      .           
      .                           debug!(
      .                               "process_predicate: pending obligation {:?} now stalled on {:?}",
      .                               infcx.resolve_vars_if_possible(obligation.clone()),
      .                               stalled_on
      .                           );
      .           
    506 ( 0.00%)                  ProcessResult::Unchanged
      .                       }
      .                       Err(selection_err) => {
      .                           debug!("selecting trait at depth {} yielded Err", obligation.recursion_depth);
      .           
      .                           ProcessResult::Error(CodeSelectionError(selection_err))
      .                       }
      .                   }
      .               }
      .           
  2,310 ( 0.00%)      fn process_projection_obligation(
      .                   &mut self,
      .                   obligation: &PredicateObligation<'tcx>,
      .                   project_obligation: PolyProjectionObligation<'tcx>,
      .                   stalled_on: &mut Vec<TyOrConstInferVar<'tcx>>,
      .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
    210 ( 0.00%)          let tcx = self.selcx.tcx();
      .           
    630 ( 0.00%)          if obligation.predicate.is_global() {
      .                       // no type variables present, can use evaluation for better caching.
      .                       // FIXME: consider caching errors too.
     10 ( 0.00%)              if self.selcx.infcx().predicate_must_hold_considering_regions(obligation) {
     30 ( 0.00%)                  if let Some(key) = ProjectionCacheKey::from_poly_projection_predicate(
      .                               &mut self.selcx,
     35 ( 0.00%)                      project_obligation.predicate,
      .                           ) {
      .                               // If `predicate_must_hold_considering_regions` succeeds, then we've
      .                               // evaluated all sub-obligations. We can therefore mark the 'root'
      .                               // obligation as complete, and skip evaluating sub-obligations.
     30 ( 0.00%)                      self.selcx
      .                                   .infcx()
      .                                   .inner
      .                                   .borrow_mut()
      .                                   .projection_cache()
      .                                   .complete(key, EvaluationResult::EvaluatedToOk);
      .                           }
     10 ( 0.00%)                  return ProcessResult::Changed(vec![]);
      .                       } else {
      .                           tracing::debug!("Does NOT hold: {:?}", obligation);
      .                       }
      .                   }
      .           
  1,435 ( 0.00%)          match project::poly_project_and_unify_type(self.selcx, &project_obligation) {
      .                       Ok(Ok(Some(os))) => ProcessResult::Changed(mk_pending(os)),
      .                       Ok(Ok(None)) => {
      .                           stalled_on.clear();
      .                           stalled_on.extend(substs_infer_vars(
      .                               self.selcx,
     99 ( 0.00%)                      project_obligation.predicate.map_bound(|pred| pred.projection_ty.substs),
      .                           ));
     99 ( 0.00%)                  ProcessResult::Unchanged
      .                       }
      .                       // Let the caller handle the recursion
      .                       Ok(Err(project::InProgress)) => ProcessResult::Changed(mk_pending(vec![
      .                           project_obligation.with(project_obligation.predicate.to_predicate(tcx)),
      .                       ])),
      .                       Err(e) => ProcessResult::Error(CodeProjectionError(e)),
      .                   }
  1,680 ( 0.00%)      }
      .           }
      .           
      .           /// Returns the set of inference variables contained in `substs`.
      .           fn substs_infer_vars<'a, 'tcx>(
      .               selcx: &mut SelectionContext<'a, 'tcx>,
      .               substs: ty::Binder<'tcx, SubstsRef<'tcx>>,
      .           ) -> impl Iterator<Item = TyOrConstInferVar<'tcx>> {
      .               selcx
      .                   .infcx()
      .                   .resolve_vars_if_possible(substs)
      .                   .skip_binder() // ok because this check doesn't care about regions
      .                   .iter()
      .                   .filter(|arg| arg.has_infer_types_or_consts())
      .                   .flat_map(|arg| {
  3,075 ( 0.00%)              let mut walker = arg.walk();
  5,535 ( 0.00%)              while let Some(c) = walker.next() {
    615 ( 0.00%)                  if !c.has_infer_types_or_consts() {
      .                               walker.visited.remove(&c);
      .                               walker.skip_current_subtree();
      .                           }
      .                       }
      .                       walker.visited.into_iter()
      .                   })
      .                   .filter_map(TyOrConstInferVar::maybe_from_generic_arg)
      .           }
-- line 776 ----------------------------------------

113,733 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs
--------------------------------------------------------------------------------
Ir                 

-- line 22 ----------------------------------------
        .           
        .           /// An entity in the Rust type system, which can be one of
        .           /// several kinds (types, lifetimes, and consts).
        .           /// To reduce memory usage, a `GenericArg` is an interned pointer,
        .           /// with the lowest 2 bits being reserved for a tag to
        .           /// indicate the type (`Ty`, `Region`, or `Const`) it points to.
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
        .           pub struct GenericArg<'tcx> {
  141,720 ( 0.03%)      ptr: NonZeroUsize,
  328,411 ( 0.07%)      marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, &'tcx ty::Const<'tcx>)>,
        .           }
        .           
        .           const TAG_MASK: usize = 0b11;
        .           const TYPE_TAG: usize = 0b00;
        .           const REGION_TAG: usize = 0b01;
        .           const CONST_TAG: usize = 0b10;
        .           
   29,630 ( 0.01%)  #[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]
        .           pub enum GenericArgKind<'tcx> {
        .               Lifetime(ty::Region<'tcx>),
        .               Type(Ty<'tcx>),
        .               Const(&'tcx ty::Const<'tcx>),
        .           }
        .           
        .           impl<'tcx> GenericArgKind<'tcx> {
    8,053 ( 0.00%)      fn pack(self) -> GenericArg<'tcx> {
    8,053 ( 0.00%)          let (tag, ptr) = match self {
        .                       GenericArgKind::Lifetime(lt) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(lt) & TAG_MASK, 0);
        .                           (REGION_TAG, lt as *const _ as usize)
        .                       }
        .                       GenericArgKind::Type(ty) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(ty) & TAG_MASK, 0);
-- line 56 ----------------------------------------
-- line 58 ----------------------------------------
        .                       }
        .                       GenericArgKind::Const(ct) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(ct) & TAG_MASK, 0);
        .                           (CONST_TAG, ct as *const _ as usize)
        .                       }
        .                   };
        .           
   25,233 ( 0.01%)          GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }
    8,053 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> fmt::Debug for GenericArg<'tcx> {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   match self.unpack() {
        .                       GenericArgKind::Lifetime(lt) => lt.fmt(f),
        .                       GenericArgKind::Type(ty) => ty.fmt(f),
        .                       GenericArgKind::Const(ct) => ct.fmt(f),
-- line 75 ----------------------------------------
-- line 85 ----------------------------------------
        .           
        .           impl<'tcx> PartialOrd for GenericArg<'tcx> {
        .               fn partial_cmp(&self, other: &GenericArg<'_>) -> Option<Ordering> {
        .                   Some(self.cmp(&other))
        .               }
        .           }
        .           
        .           impl<'tcx> From<ty::Region<'tcx>> for GenericArg<'tcx> {
   13,410 ( 0.00%)      fn from(r: ty::Region<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Lifetime(r).pack()
   13,410 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {
  163,392 ( 0.03%)      fn from(ty: Ty<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Type(ty).pack()
  163,392 ( 0.03%)      }
        .           }
        .           
        .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for GenericArg<'tcx> {
      164 ( 0.00%)      fn from(c: &'tcx ty::Const<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Const(c).pack()
      164 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> GenericArg<'tcx> {
        .               #[inline]
        .               pub fn unpack(self) -> GenericArgKind<'tcx> {
        .                   let ptr = self.ptr.get();
        .                   unsafe {
1,698,888 ( 0.36%)              match ptr & TAG_MASK {
    9,626 ( 0.00%)                  REGION_TAG => GenericArgKind::Lifetime(&*((ptr & !TAG_MASK) as *const _)),
  463,006 ( 0.10%)                  TYPE_TAG => GenericArgKind::Type(&*((ptr & !TAG_MASK) as *const _)),
      327 ( 0.00%)                  CONST_TAG => GenericArgKind::Const(&*((ptr & !TAG_MASK) as *const _)),
        .                           _ => intrinsics::unreachable(),
        .                       }
        .                   }
        .               }
        .           
        .               /// Unpack the `GenericArg` as a type when it is known certainly to be a type.
        .               /// This is true in cases where `Substs` is used in places where the kinds are known
        .               /// to be limited (e.g. in tuples, where the only parameters are type parameters).
        .               pub fn expect_ty(self) -> Ty<'tcx> {
        .                   match self.unpack() {
        .                       GenericArgKind::Type(ty) => ty,
        .                       _ => bug!("expected a type, but found another kind"),
        .                   }
    4,812 ( 0.00%)      }
        .           
        .               /// Unpack the `GenericArg` as a const when it is known certainly to be a const.
        .               pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {
        .                   match self.unpack() {
        .                       GenericArgKind::Const(c) => c,
        .                       _ => bug!("expected a const, but found another kind"),
        .                   }
        .               }
-- line 140 ----------------------------------------
-- line 170 ----------------------------------------
        .                       GenericArgKind::Type(ty) => ty.visit_with(visitor),
        .                       GenericArgKind::Const(ct) => ct.visit_with(visitor),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for GenericArg<'tcx> {
        .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
    1,176 ( 0.00%)          self.unpack().encode(e)
        .               }
        .           }
        .           
        .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for GenericArg<'tcx> {
   40,265 ( 0.01%)      fn decode(d: &mut D) -> GenericArg<'tcx> {
   40,265 ( 0.01%)          GenericArgKind::decode(d).pack()
        .               }
        .           }
        .           
        .           /// A substitution mapping generic parameters to new values.
        .           pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;
        .           
        .           pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;
        .           
        .           impl<'a, 'tcx> InternalSubsts<'tcx> {
        .               /// Interpret these substitutions as the substitutions of a closure type.
        .               /// Closure substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the signature and closure kind;
        .               /// see `ty::ClosureSubsts` struct for more comments.
      462 ( 0.00%)      pub fn as_closure(&'a self) -> ClosureSubsts<'a> {
        .                   ClosureSubsts { substs: self }
      462 ( 0.00%)      }
        .           
        .               /// Interpret these substitutions as the substitutions of a generator type.
        .               /// Generator substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the signature and generator kind;
        .               /// see `ty::GeneratorSubsts` struct for more comments.
        .               pub fn as_generator(&'tcx self) -> GeneratorSubsts<'tcx> {
        .                   GeneratorSubsts { substs: self }
        .               }
-- line 208 ----------------------------------------
-- line 211 ----------------------------------------
        .               /// Inline const substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the inferred type;
        .               /// see `ty::InlineConstSubsts` struct for more comments.
        .               pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {
        .                   InlineConstSubsts { substs: self }
        .               }
        .           
        .               /// Creates an `InternalSubsts` that maps each generic parameter to itself.
    4,290 ( 0.00%)      pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {
      188 ( 0.00%)          Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))
    3,861 ( 0.00%)      }
        .           
        .               /// Creates an `InternalSubsts` for generic parameter definitions,
        .               /// by calling closures to obtain each kind.
        .               /// The closures get to observe the `InternalSubsts` as they're
        .               /// being built, which can be used to correctly
        .               /// substitute defaults of generic parameters.
   42,190 ( 0.01%)      pub fn for_item<F>(tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
        .               where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   let defs = tcx.generics_of(def_id);
        .                   let count = defs.count();
        .                   let mut substs = SmallVec::with_capacity(count);
   15,809 ( 0.00%)          Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);
    9,498 ( 0.00%)          tcx.intern_substs(&substs)
   42,741 ( 0.01%)      }
        .           
        .               pub fn extend_to<F>(&self, tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
        .               where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   Self::for_item(tcx, def_id, |param, substs| {
        .                       self.get(param.index as usize).cloned().unwrap_or_else(|| mk_kind(param, substs))
        .                   })
        .               }
        .           
   57,784 ( 0.01%)      pub fn fill_item<F>(
        .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
        .                   tcx: TyCtxt<'tcx>,
        .                   defs: &ty::Generics,
        .                   mk_kind: &mut F,
        .               ) where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
   23,638 ( 0.00%)          if let Some(def_id) = defs.parent {
        .                       let parent_defs = tcx.generics_of(def_id);
    2,670 ( 0.00%)              Self::fill_item(substs, tcx, parent_defs, mk_kind);
        .                   }
        .                   Self::fill_single(substs, defs, mk_kind)
   45,976 ( 0.01%)      }
        .           
      280 ( 0.00%)      pub fn fill_single<F>(
        .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
        .                   defs: &ty::Generics,
        .                   mk_kind: &mut F,
        .               ) where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   substs.reserve(defs.params.len());
        .                   for param in &defs.params {
        .                       let kind = mk_kind(param, substs);
   37,411 ( 0.01%)              assert_eq!(param.index as usize, substs.len());
        .                       substs.push(kind);
        .                   }
      280 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {
        .                   self.iter()
        .                       .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })
        .               }
        .           
        .               #[inline]
-- line 284 ----------------------------------------
-- line 302 ----------------------------------------
        .                   self.iter().filter_map(|k| match k.unpack() {
        .                       GenericArgKind::Lifetime(_) => None,
        .                       generic => Some(generic),
        .                   })
        .               }
        .           
        .               #[inline]
        .               pub fn type_at(&self, i: usize) -> Ty<'tcx> {
   60,207 ( 0.01%)          if let GenericArgKind::Type(ty) = self[i].unpack() {
        .                       ty
        .                   } else {
        .                       bug!("expected type for param #{} in {:?}", i, self);
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {
-- line 318 ----------------------------------------
-- line 350 ----------------------------------------
        .               /// impl<U> X<U> for U { fn f<V>() {} }
        .               /// ```
        .               ///
        .               /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.
        .               /// * If `source_ancestor` is the def_id of the trait.
        .               /// * If `target_substs` is `[U]`, the substs for the impl.
        .               /// * Then we will return `[U, T]`, the subst for `f` in the impl that
        .               ///   are needed for it to match the trait.
   10,465 ( 0.00%)      pub fn rebase_onto(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   source_ancestor: DefId,
        .                   target_substs: SubstsRef<'tcx>,
        .               ) -> SubstsRef<'tcx> {
        .                   let defs = tcx.generics_of(source_ancestor);
    2,990 ( 0.00%)          tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))
   11,960 ( 0.00%)      }
        .           
        .               pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {
        .                   tcx.mk_substs(self.iter().take(generics.count()))
        .               }
        .           }
        .           
        .           impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {
   17,878 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // The match arms are in order of frequency. The 1, 2, and 0 cases are
        .                   // typically hit in 90--99.99% of cases. When folding doesn't change
        .                   // the substs, it's faster to reuse the existing substs rather than
        .                   // calling `intern_substs`.
  410,042 ( 0.09%)          match self.len() {
        .                       1 => {
   41,013 ( 0.01%)                  let param0 = self[0].try_fold_with(folder)?;
  204,366 ( 0.04%)                  if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }
        .                       }
        .                       2 => {
   56,782 ( 0.01%)                  let param0 = self[0].try_fold_with(folder)?;
  122,531 ( 0.03%)                  let param1 = self[1].try_fold_with(folder)?;
  129,530 ( 0.03%)                  if param0 == self[0] && param1 == self[1] {
        .                               Ok(self)
        .                           } else {
   64,194 ( 0.01%)                      Ok(folder.tcx().intern_substs(&[param0, param1]))
        .                           }
        .                       }
        .                       0 => Ok(self),
        .                       _ => {
        .                           let params: SmallVec<[_; 8]> =
   11,893 ( 0.00%)                      self.iter().map(|k| k.try_fold_with(folder)).collect::<Result<_, _>>()?;
      832 ( 0.00%)                  if params[..] == self[..] {
        .                               Ok(self)
        .                           } else {
   16,829 ( 0.00%)                      Ok(folder.tcx().intern_substs(&params))
        .                           }
        .                       }
        .                   }
   22,427 ( 0.00%)      }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
   71,301 ( 0.02%)          self.iter().try_for_each(|t| t.visit_with(visitor))
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Public trait `Subst`
        .           //
        .           // Just call `foo.subst(tcx, substs)` to perform a substitution across
        .           // `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when
-- line 420 ----------------------------------------
-- line 435 ----------------------------------------
        .           
        .           impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {
        .               fn subst_spanned(
        .                   self,
        .                   tcx: TyCtxt<'tcx>,
        .                   substs: &[GenericArg<'tcx>],
        .                   span: Option<Span>,
        .               ) -> T {
  177,525 ( 0.04%)          let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };
        .                   self.fold_with(&mut folder)
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // The actual substitution engine itself is a type folder.
        .           
        .           struct SubstFolder<'a, 'tcx> {
-- line 451 ----------------------------------------
-- line 456 ----------------------------------------
        .               span: Option<Span>,
        .           
        .               /// Number of region binders we have passed through while doing the substitution
        .               binders_passed: u32,
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   34,438 ( 0.01%)          self.tcx
        .               }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
   64,036 ( 0.01%)          self.binders_passed += 1;
   15,639 ( 0.00%)          let t = t.super_fold_with(self);
   64,036 ( 0.01%)          self.binders_passed -= 1;
        .                   t
        .               }
        .           
   21,714 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
        .                   // Note: This routine only handles regions that are bound on
        .                   // type declarations and other outer declarations, not those
        .                   // bound in *fn types*. Region substitution of the bound
        .                   // regions that appear in a function signature is done using
        .                   // the specialized routine `ty::replace_late_regions()`.
    7,238 ( 0.00%)          match *r {
    4,240 ( 0.00%)              ty::ReEarlyBound(data) => {
    4,240 ( 0.00%)                  let rk = self.substs.get(data.index as usize).map(|k| k.unpack());
        .                           match rk {
    2,120 ( 0.00%)                      Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),
        .                               _ => {
        .                                   let span = self.span.unwrap_or(DUMMY_SP);
        .                                   let msg = format!(
        .                                       "Region parameter out of range \
        .                                        when substituting in region {} (index={})",
        .                                       data.name, data.index
        .                                   );
        .                                   span_bug!(span, "{}", msg);
        .                               }
        .                           }
        .                       }
        .                       _ => r,
        .                   }
   25,333 ( 0.01%)      }
        .           
  157,545 ( 0.03%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
   52,515 ( 0.01%)          if !t.needs_subst() {
        .                       return t;
        .                   }
        .           
   84,362 ( 0.02%)          match *t.kind() {
  157,960 ( 0.03%)              ty::Param(p) => self.ty_for_param(p, t),
   63,534 ( 0.01%)              _ => t.super_fold_with(self),
        .                   }
  209,630 ( 0.04%)      }
        .           
    5,537 ( 0.00%)      fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    2,332 ( 0.00%)          if let ty::ConstKind::Param(p) = c.val {
        .                       self.const_for_param(p, c)
        .                   } else {
    5,769 ( 0.00%)              c.super_fold_with(self)
        .                   }
    1,200 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {
        .                   c.super_fold_with(self)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> SubstFolder<'a, 'tcx> {
        .               fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   // Look up the type in the substitutions. It really should be in there.
   63,184 ( 0.01%)          let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());
        .                   let ty = match opt_ty {
        .                       Some(GenericArgKind::Type(ty)) => ty,
        .                       Some(kind) => {
        .                           let span = self.span.unwrap_or(DUMMY_SP);
        .                           span_bug!(
        .                               span,
        .                               "expected type for `{:?}` ({:?}/{}) but found {:?} \
        .                                when substituting, substs={:?}",
-- line 539 ----------------------------------------
-- line 562 ----------------------------------------
        .               }
        .           
        .               fn const_for_param(
        .                   &self,
        .                   p: ParamConst,
        .                   source_ct: &'tcx ty::Const<'tcx>,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   // Look up the const in the substitutions. It really should be in there.
      300 ( 0.00%)          let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());
        .                   let ct = match opt_ct {
        .                       Some(GenericArgKind::Const(ct)) => ct,
        .                       Some(kind) => {
        .                           let span = self.span.unwrap_or(DUMMY_SP);
        .                           span_bug!(
        .                               span,
        .                               "expected const for `{:?}` ({:?}/{}) but found {:?} \
        .                                when substituting substs={:?}",
-- line 578 ----------------------------------------
-- line 645 ----------------------------------------
        .               fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {
        .                   debug!(
        .                       "shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})",
        .                       val,
        .                       self.binders_passed,
        .                       val.has_escaping_bound_vars()
        .                   );
        .           
  113,977 ( 0.02%)          if self.binders_passed == 0 || !val.has_escaping_bound_vars() {
        .                       return val;
        .                   }
        .           
        .                   let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);
        .                   debug!("shift_vars: shifted result = {:?}", result);
        .           
        .                   result
        .               }
        .           
        .               fn shift_region_through_binders(&self, region: ty::Region<'tcx>) -> ty::Region<'tcx> {
    4,721 ( 0.00%)          if self.binders_passed == 0 || !region.has_escaping_bound_vars() {
        .                       return region;
        .                   }
        .                   ty::fold::shift_region(self.tcx, region, self.binders_passed)
        .               }
        .           }
        .           
        .           /// Stores the user-given substs to reach some fully qualified path
        .           /// (e.g., `<T>::Item` or `<T as Trait>::Item`).
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
      291 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct UserSubsts<'tcx> {
        .               /// The substitutions for the item as given by the user.
        .               pub substs: SubstsRef<'tcx>,
        .           
        .               /// The self type, in the case of a `<T>::Item` path (when applied
        .               /// to an inherent impl). See `UserSelfTy` below.
       81 ( 0.00%)      pub user_self_ty: Option<UserSelfTy<'tcx>>,
        .           }
        .           
        .           /// Specifies the user-given self type. In the case of a path that
        .           /// refers to a member in an inherent impl, this self type is
        .           /// sometimes needed to constrain the type parameters on the impl. For
        .           /// example, in this code:
        .           ///
        .           /// ```
-- line 689 ----------------------------------------

  779,184 ( 0.16%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 417 ----------------------------------------
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> Self {
  709,361 ( 0.15%)          Vec { buf: RawVec::NEW, len: 0 }
       40 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
  222,654 ( 0.05%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
        .               }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
   10,253 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        .               }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn capacity(&self) -> usize {
   48,715 ( 0.01%)          self.buf.capacity()
        .               }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve(&mut self, additional: usize) {
   59,243 ( 0.01%)          self.buf.reserve(self.len, additional);
        .               }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
    2,988 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
    3,356 ( 0.00%)          if self.capacity() > self.len {
    1,237 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
        .               }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
        .                       self.shrink_to_fit();
    1,034 ( 0.00%)              let me = ManuallyDrop::new(self);
        .                       let buf = ptr::read(&me.buf);
        .                       let len = me.len();
        .                       buf.into_box(len).assume_init()
        .                   }
        .               }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
   44,557 ( 0.01%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
   36,309 ( 0.01%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   36,298 ( 0.01%)              self.len = len;
    1,231 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
   53,468 ( 0.01%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
  662,949 ( 0.14%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
  920,597 ( 0.19%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
  105,959 ( 0.02%)          self.len = new_len;
       84 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      952 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
      151 ( 0.00%)          let len = self.len();
      562 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
      812 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
    1,173 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
      812 ( 0.00%)              self.set_len(len + 1);
        .                   }
      816 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
        .               pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
       55 ( 0.00%)          let len = self.len();
      206 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
      224 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
      158 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
       55 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
   46,396 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
    2,534 ( 0.00%)          self.retain_mut(|elem| f(elem));
   43,752 ( 0.01%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    5,603 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
    4,402 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
    2,732 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
   83,370 ( 0.02%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
   31,930 ( 0.01%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
       36 ( 0.00%)                      g.processed_len += 1;
        2 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
        4 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
       81 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
       54 ( 0.00%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
        7 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
        1 ( 0.00%)          let len = self.len();
      648 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
       36 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
       30 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
        .                           } else {
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
       12 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
       30 ( 0.00%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
1,900,258 ( 0.40%)          if self.len == self.buf.capacity() {
  101,499 ( 0.02%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
   44,077 ( 0.01%)              let end = self.as_mut_ptr().add(self.len);
        .                       ptr::write(end, value);
2,222,175 ( 0.47%)              self.len += 1;
        .                   }
       24 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
  186,142 ( 0.04%)          if self.len == 0 {
       46 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
  161,974 ( 0.03%)                  self.len -= 1;
   18,776 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
      791 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
      678 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               unsafe fn append_elements(&mut self, other: *const [T]) {
        .                   let count = unsafe { (*other).len() };
        .                   self.reserve(count);
    4,618 ( 0.00%)          let len = self.len();
        .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
   65,275 ( 0.01%)          self.len += count;
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
    4,602 ( 0.00%)          let len = self.len();
        .                   let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
        .                       self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
       14 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
      509 ( 0.00%)              Drain {
        .                           tail_start: end,
       14 ( 0.00%)                  tail_len: len - end,
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
   78,792 ( 0.02%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
   71,418 ( 0.02%)          self.len() == 0
        .               }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
      770 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
      514 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    5,617 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
      761 ( 0.00%)          let len = self.len();
    1,522 ( 0.00%)          if new_len > len {
    6,025 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
    4,856 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
        .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
        .                       slice::from_raw_parts_mut(
        2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
       24 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
        .               }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
      160 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
       16 ( 0.00%)          let len = self.len();
        .           
       48 ( 0.00%)          if new_len > len {
    1,188 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
       16 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
   23,473 ( 0.00%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
    1,572 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
   61,099 ( 0.01%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
   18,577 ( 0.00%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
        2 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
   13,921 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   44,783 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
   18,661 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
        .               fn deref(&self) -> &[T] {
  940,064 ( 0.20%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
      166 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
        .               fn deref_mut(&mut self) -> &mut [T] {
  198,144 ( 0.04%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
   47,714 ( 0.01%)      fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
        2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   61,874 ( 0.01%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
   29,484 ( 0.01%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
        .               #[inline]
        .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
       76 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
  379,665 ( 0.08%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
        .               fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
  141,836 ( 0.03%)              let mut me = ManuallyDrop::new(self);
        .                       let alloc = ptr::read(me.allocator());
        .                       let begin = me.as_mut_ptr();
        .                       let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
        .                           begin.add(me.len()) as *const T
        .                       };
        .                       let cap = me.buf.capacity();
   79,498 ( 0.02%)              IntoIter {
        .                           buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
        .                           end,
        .                       }
        .                   }
-- line 2589 ----------------------------------------
-- line 2601 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        .               fn into_iter(self) -> slice::IterMut<'a, T> {
    1,166 ( 0.00%)          self.iter_mut()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
      800 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  188,323 ( 0.04%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
      800 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2627 ----------------------------------------
-- line 2636 ----------------------------------------
        .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
   55,246 ( 0.01%)          while let Some(element) = iterator.next() {
    5,887 ( 0.00%)              let len = self.len();
   50,651 ( 0.01%)              if len == self.capacity() {
      378 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
   45,200 ( 0.01%)                  self.set_len(len + 1);
        .                       }
        .                   }
      686 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    1,810 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
   10,592 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
  173,037 ( 0.04%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
   71,345 ( 0.02%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
  203,668 ( 0.04%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

  306,649 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 59 ----------------------------------------
      .                   &mut self,
      .                   def_id: DefId,
      .                   kind: &str,
      .                   descr: &dyn fmt::Display,
      .               ) -> ControlFlow<Self::BreakTy>;
      .           
      .               /// Not overridden, but used to actually visit types and traits.
      .               fn skeleton(&mut self) -> DefIdVisitorSkeleton<'_, 'tcx, Self> {
 36,701 ( 0.01%)          DefIdVisitorSkeleton {
      .                       def_id_visitor: self,
      .                       visited_opaque_tys: Default::default(),
      .                       dummy: Default::default(),
      .                   }
      .               }
  1,152 ( 0.00%)      fn visit(&mut self, ty_fragment: impl TypeFoldable<'tcx>) -> ControlFlow<Self::BreakTy> {
      .                   ty_fragment.visit_with(&mut self.skeleton())
  1,920 ( 0.00%)      }
    762 ( 0.00%)      fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<Self::BreakTy> {
      .                   self.skeleton().visit_trait(trait_ref)
    762 ( 0.00%)      }
      .               fn visit_projection_ty(
      .                   &mut self,
      .                   projection: ty::ProjectionTy<'tcx>,
      .               ) -> ControlFlow<Self::BreakTy> {
      4 ( 0.00%)          self.skeleton().visit_projection_ty(projection)
      .               }
      .               fn visit_predicates(
      .                   &mut self,
      .                   predicates: ty::GenericPredicates<'tcx>,
      .               ) -> ControlFlow<Self::BreakTy> {
    687 ( 0.00%)          self.skeleton().visit_predicates(predicates)
      .               }
      .           }
      .           
      .           struct DefIdVisitorSkeleton<'v, 'tcx, V: ?Sized> {
      .               def_id_visitor: &'v mut V,
      .               visited_opaque_tys: FxHashSet<DefId>,
      .               dummy: PhantomData<TyCtxt<'tcx>>,
      .           }
      .           
      .           impl<'tcx, V> DefIdVisitorSkeleton<'_, 'tcx, V>
      .           where
      .               V: DefIdVisitor<'tcx> + ?Sized,
      .           {
      .               fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<V::BreakTy> {
    127 ( 0.00%)          let TraitRef { def_id, substs } = trait_ref;
  8,658 ( 0.00%)          self.def_id_visitor.visit_def_id(def_id, "trait", &trait_ref.print_only_trait_path())?;
    127 ( 0.00%)          if self.def_id_visitor.shallow() { ControlFlow::CONTINUE } else { substs.visit_with(self) }
      .               }
      .           
  2,740 ( 0.00%)      fn visit_projection_ty(
      .                   &mut self,
      .                   projection: ty::ProjectionTy<'tcx>,
      .               ) -> ControlFlow<V::BreakTy> {
  2,192 ( 0.00%)          let (trait_ref, assoc_substs) =
    548 ( 0.00%)              projection.trait_ref_and_own_substs(self.def_id_visitor.tcx());
      .                   self.visit_trait(trait_ref)?;
      .                   if self.def_id_visitor.shallow() {
      .                       ControlFlow::CONTINUE
      .                   } else {
      .                       assoc_substs.iter().try_for_each(|subst| subst.visit_with(self))
      .                   }
  2,466 ( 0.00%)      }
      .           
      .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<V::BreakTy> {
      3 ( 0.00%)          match predicate.kind().skip_binder() {
      .                       ty::PredicateKind::Trait(ty::TraitPredicate {
      .                           trait_ref,
      .                           constness: _,
      .                           polarity: _,
      .                       }) => self.visit_trait(trait_ref),
      .                       ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, term }) => {
      2 ( 0.00%)                  term.visit_with(self)?;
      5 ( 0.00%)                  self.visit_projection_ty(projection_ty)
      .                       }
      .                       ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty, _region)) => {
      .                           ty.visit_with(self)
      .                       }
      .                       ty::PredicateKind::RegionOutlives(..) => ControlFlow::CONTINUE,
      .                       ty::PredicateKind::ConstEvaluatable(uv)
      .                           if self.def_id_visitor.tcx().features().generic_const_exprs =>
      .                       {
-- line 140 ----------------------------------------
-- line 157 ----------------------------------------
      .                       ACNode::Leaf(leaf) => self.visit_const(leaf),
      .                       ACNode::Cast(_, _, ty) => self.visit_ty(ty),
      .                       ACNode::Binop(..) | ACNode::UnaryOp(..) | ACNode::FunctionCall(_, _) => {
      .                           ControlFlow::CONTINUE
      .                       }
      .                   })
      .               }
      .           
  4,809 ( 0.00%)      fn visit_predicates(
      .                   &mut self,
      .                   predicates: ty::GenericPredicates<'tcx>,
      .               ) -> ControlFlow<V::BreakTy> {
      .                   let ty::GenericPredicates { parent: _, predicates } = predicates;
      .                   predicates.iter().try_for_each(|&(predicate, _span)| self.visit_predicate(predicate))
  5,496 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, V> TypeVisitor<'tcx> for DefIdVisitorSkeleton<'_, 'tcx, V>
      .           where
      .               V: DefIdVisitor<'tcx> + ?Sized,
      .           {
      .               type BreakTy = V::BreakTy;
      .           
187,854 ( 0.04%)      fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<V::BreakTy> {
 21,076 ( 0.00%)          let tcx = self.def_id_visitor.tcx();
      .                   // InternalSubsts are not visited here because they are visited below in `super_visit_with`.
103,336 ( 0.02%)          match *ty.kind() {
 43,660 ( 0.01%)              ty::Adt(&ty::AdtDef { did: def_id, .. }, ..)
      .                       | ty::Foreign(def_id)
      .                       | ty::FnDef(def_id, ..)
      .                       | ty::Closure(def_id, ..)
      .                       | ty::Generator(def_id, ..) => {
181,040 ( 0.04%)                  self.def_id_visitor.visit_def_id(def_id, "type", &ty)?;
      .                           if self.def_id_visitor.shallow() {
      .                               return ControlFlow::CONTINUE;
      .                           }
      .                           // Default type visitor doesn't visit signatures of fn types.
      .                           // Something like `fn() -> Priv {my_func}` is considered a private type even if
      .                           // `my_func` is public, so we need to visit signatures.
 41,525 ( 0.01%)                  if let ty::FnDef(..) = ty.kind() {
      .                               tcx.fn_sig(def_id).visit_with(self)?;
      .                           }
      .                           // Inherent static methods don't have self type in substs.
      .                           // Something like `fn() {my_method}` type of the method
      .                           // `impl Pub<Priv> { pub fn my_method() {} }` is considered a private type,
      .                           // so we need to visit the self type additionally.
 64,554 ( 0.01%)                  if let Some(assoc_item) = tcx.opt_associated_item(def_id) {
  1,648 ( 0.00%)                      if let ty::ImplContainer(impl_def_id) = assoc_item.container {
    252 ( 0.00%)                          tcx.type_of(impl_def_id).visit_with(self)?;
      .                               }
      .                           }
      .                       }
    544 ( 0.00%)              ty::Projection(proj) => {
      .                           if self.def_id_visitor.skip_assoc_tys() {
      .                               // Visitors searching for minimal visibility/reachability want to
      .                               // conservatively approximate associated types like `<Type as Trait>::Alias`
      .                               // as visible/reachable even if both `Type` and `Trait` are private.
      .                               // Ideally, associated types should be substituted in the same way as
      .                               // free type aliases, but this isn't done yet.
      .                               return ControlFlow::CONTINUE;
      .                           }
      .                           // This will also visit substs if necessary, so we don't need to recurse.
  2,628 ( 0.00%)                  return self.visit_projection_ty(proj);
      .                       }
      .                       ty::Dynamic(predicates, ..) => {
      .                           // All traits in the list are considered the "primary" part of the type
      .                           // and are visited by shallow visitors.
      .                           for predicate in predicates {
      .                               let trait_ref = match predicate.skip_binder() {
      .                                   ty::ExistentialPredicate::Trait(trait_ref) => trait_ref,
      .                                   ty::ExistentialPredicate::Projection(proj) => proj.trait_ref(tcx),
-- line 227 ----------------------------------------
-- line 270 ----------------------------------------
      .                       ty::Bound(..) | ty::Placeholder(..) | ty::Infer(..) => {
      .                           bug!("unexpected type: {:?}", ty)
      .                       }
      .                   }
      .           
      .                   if self.def_id_visitor.shallow() {
      .                       ControlFlow::CONTINUE
      .                   } else {
 56,411 ( 0.01%)              ty.super_visit_with(self)
      .                   }
178,681 ( 0.04%)      }
      .           
      .               fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {
  1,128 ( 0.00%)          self.visit_ty(c.ty)?;
    188 ( 0.00%)          let tcx = self.def_id_visitor.tcx();
  1,316 ( 0.00%)          if let Ok(Some(ct)) = AbstractConst::from_const(tcx, c) {
      .                       self.visit_abstract_const_expr(tcx, ct)?;
      .                   }
      .                   ControlFlow::CONTINUE
      .               }
      .           }
      .           
      .           fn min(vis1: ty::Visibility, vis2: ty::Visibility, tcx: TyCtxt<'_>) -> ty::Visibility {
    379 ( 0.00%)      if vis1.is_at_least(vis2, tcx) { vis2 } else { vis1 }
      .           }
      .           
      .           ////////////////////////////////////////////////////////////////////////////////
      .           /// Visitor used to determine if pub(restricted) is used anywhere in the crate.
      .           ///
      .           /// This is done so that `private_in_public` warnings can be turned into hard errors
      .           /// in crates that have been updated to use pub(restricted).
      .           ////////////////////////////////////////////////////////////////////////////////
-- line 301 ----------------------------------------
-- line 303 ----------------------------------------
      .               tcx: TyCtxt<'tcx>,
      .               has_pub_restricted: bool,
      .           }
      .           
      .           impl<'tcx> Visitor<'tcx> for PubRestrictedVisitor<'tcx> {
      .               type NestedFilter = nested_filter::All;
      .           
      .               fn nested_visit_map(&mut self) -> Self::Map {
    430 ( 0.00%)          self.tcx.hir()
      .               }
      .               fn visit_vis(&mut self, vis: &'tcx hir::Visibility<'tcx>) {
  1,094 ( 0.00%)          self.has_pub_restricted = self.has_pub_restricted || vis.node.is_pub_restricted();
      .               }
      .           }
      .           
      .           ////////////////////////////////////////////////////////////////////////////////
      .           /// Visitor used to determine impl visibility and reachability.
      .           ////////////////////////////////////////////////////////////////////////////////
      .           
      .           struct FindMin<'a, 'tcx, VL: VisibilityLike> {
-- line 322 ----------------------------------------
-- line 336 ----------------------------------------
      .                   true
      .               }
      .               fn visit_def_id(
      .                   &mut self,
      .                   def_id: DefId,
      .                   _kind: &str,
      .                   _descr: &dyn fmt::Display,
      .               ) -> ControlFlow<Self::BreakTy> {
  3,951 ( 0.00%)          self.min = VL::new_min(self, def_id);
      .                   ControlFlow::CONTINUE
      .               }
      .           }
      .           
      .           trait VisibilityLike: Sized {
      .               const MAX: Self;
      .               const SHALLOW: bool = false;
      .               fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self;
      .           
      .               // Returns an over-approximation (`skip_assoc_tys` = true) of visibility due to
      .               // associated types for which we can't determine visibility precisely.
  2,688 ( 0.00%)      fn of_impl(def_id: LocalDefId, tcx: TyCtxt<'_>, access_levels: &AccessLevels) -> Self {
  1,280 ( 0.00%)          let mut find = FindMin { tcx, access_levels, min: Self::MAX };
    384 ( 0.00%)          find.visit(tcx.type_of(def_id));
  1,152 ( 0.00%)          if let Some(trait_ref) = tcx.impl_trait_ref(def_id) {
    127 ( 0.00%)              find.visit_trait(trait_ref);
      .                   }
    260 ( 0.00%)          find.min
  3,072 ( 0.00%)      }
      .           }
      .           impl VisibilityLike for ty::Visibility {
      .               const MAX: Self = ty::Visibility::Public;
  2,674 ( 0.00%)      fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {
  1,146 ( 0.00%)          min(find.tcx.visibility(def_id), find.min, find.tcx)
  3,820 ( 0.00%)      }
      .           }
      .           impl VisibilityLike for Option<AccessLevel> {
      .               const MAX: Self = Some(AccessLevel::Public);
      .               // Type inference is very smart sometimes.
      .               // It can make an impl reachable even some components of its type or trait are unreachable.
      .               // E.g. methods of `impl ReachableTrait<UnreachableTy> for ReachableTy<UnreachableTy> { ... }`
      .               // can be usable from other crates (#57264). So we skip substs when calculating reachability
      .               // and consider an impl reachable if its "shallow" type and trait are reachable.
      .               //
      .               // The assumption we make here is that type-inference won't let you use an impl without knowing
      .               // both "shallow" version of its self type and "shallow" version of its trait if it exists
      .               // (which require reaching the `DefId`s in them).
      .               const SHALLOW: bool = true;
  1,530 ( 0.00%)      fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {
      .                   cmp::min(
  1,530 ( 0.00%)              if let Some(def_id) = def_id.as_local() {
    512 ( 0.00%)                  find.access_levels.map.get(&def_id).copied()
      .                       } else {
      .                           Self::MAX
      .                       },
  1,262 ( 0.00%)              find.min,
      .                   )
  2,040 ( 0.00%)      }
      .           }
      .           
      .           ////////////////////////////////////////////////////////////////////////////////
      .           /// The embargo visitor, used to determine the exports of the AST.
      .           ////////////////////////////////////////////////////////////////////////////////
      .           
      .           struct EmbargoVisitor<'tcx> {
      .               tcx: TyCtxt<'tcx>,
-- line 400 ----------------------------------------
-- line 422 ----------------------------------------
      .           
      .           struct ReachEverythingInTheInterfaceVisitor<'a, 'tcx> {
      .               access_level: Option<AccessLevel>,
      .               item_def_id: LocalDefId,
      .               ev: &'a mut EmbargoVisitor<'tcx>,
      .           }
      .           
      .           impl<'tcx> EmbargoVisitor<'tcx> {
  4,020 ( 0.00%)      fn get(&self, def_id: LocalDefId) -> Option<AccessLevel> {
      .                   self.access_levels.map.get(&def_id).copied()
  4,020 ( 0.00%)      }
      .           
      .               fn update_with_hir_id(
      .                   &mut self,
      .                   hir_id: hir::HirId,
      .                   level: Option<AccessLevel>,
      .               ) -> Option<AccessLevel> {
     10 ( 0.00%)          let def_id = self.tcx.hir().local_def_id(hir_id);
      .                   self.update(def_id, level)
      .               }
      .           
      .               /// Updates node level and returns the updated level.
      .               fn update(&mut self, def_id: LocalDefId, level: Option<AccessLevel>) -> Option<AccessLevel> {
  4,838 ( 0.00%)          let old_level = self.get(def_id);
      .                   // Accessibility levels can only grow.
      .                   if level > old_level {
      .                       self.access_levels.map.insert(def_id, level.unwrap());
    241 ( 0.00%)              self.changed = true;
      .                       level
      .                   } else {
      .                       old_level
      .                   }
      .               }
      .           
      .               fn reach(
      .                   &mut self,
-- line 457 ----------------------------------------
-- line 458 ----------------------------------------
      .                   def_id: LocalDefId,
      .                   access_level: Option<AccessLevel>,
      .               ) -> ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {
      .                   ReachEverythingInTheInterfaceVisitor {
      .                       access_level: cmp::min(access_level, Some(AccessLevel::Reachable)),
      .                       item_def_id: def_id,
      .                       ev: self,
      .                   }
  1,834 ( 0.00%)      }
      .           
      .               // We have to make sure that the items that macros might reference
      .               // are reachable, since they might be exported transitively.
      .               fn update_reachability_from_macro(&mut self, local_def_id: LocalDefId, md: &MacroDef) {
      .                   // Non-opaque macros cannot make other items more accessible than they already are.
      .           
      4 ( 0.00%)          let hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);
     12 ( 0.00%)          let attrs = self.tcx.hir().attrs(hir_id);
     28 ( 0.00%)          if attr::find_transparency(attrs, md.macro_rules).0 != Transparency::Opaque {
      .                       return;
      .                   }
      .           
      .                   let item_def_id = local_def_id.to_def_id();
      .                   let macro_module_def_id =
      .                       ty::DefIdTree::parent(self.tcx, item_def_id).unwrap().expect_local();
      .                   if self.tcx.hir().opt_def_kind(macro_module_def_id) != Some(DefKind::Mod) {
      .                       // The macro's parent doesn't correspond to a `mod`, return early (#63164, #65252).
-- line 483 ----------------------------------------
-- line 630 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {
      .               type NestedFilter = nested_filter::All;
      .           
      .               /// We want to visit items in the context of their containing
      .               /// module and so forth, so supply a crate for doing a deep walk.
      .               fn nested_visit_map(&mut self) -> Self::Map {
    860 ( 0.00%)          self.tcx.hir()
      .               }
      .           
  3,618 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    804 ( 0.00%)          let item_level = match item.kind {
      .                       hir::ItemKind::Impl { .. } => {
      .                           let impl_level =
  1,536 ( 0.00%)                      Option::<AccessLevel>::of_impl(item.def_id, self.tcx, &self.access_levels);
    256 ( 0.00%)                  self.update(item.def_id, impl_level)
      .                       }
    584 ( 0.00%)              _ => self.get(item.def_id),
      .                   };
      .           
      .                   // Update levels of nested things.
  2,135 ( 0.00%)          match item.kind {
      .                       hir::ItemKind::Enum(ref def, _) => {
      .                           for variant in def.variants {
      .                               let variant_level = self.update_with_hir_id(variant.id, item_level);
      .                               if let Some(ctor_hir_id) = variant.data.ctor_hir_id() {
      .                                   self.update_with_hir_id(ctor_hir_id, item_level);
      .                               }
      .                               for field in variant.data.fields() {
      .                                   self.update_with_hir_id(field.hir_id, variant_level);
      .                               }
      .                           }
      .                       }
      .                       hir::ItemKind::Impl(ref impl_) => {
    768 ( 0.00%)                  for impl_item_ref in impl_.items {
  1,418 ( 0.00%)                      if impl_.of_trait.is_some()
     12 ( 0.00%)                          || self.tcx.visibility(impl_item_ref.id.def_id) == ty::Visibility::Public
      .                               {
    472 ( 0.00%)                          self.update(impl_item_ref.id.def_id, item_level);
      .                               }
      .                           }
      .                       }
      .                       hir::ItemKind::Trait(.., trait_item_refs) => {
      .                           for trait_item_ref in trait_item_refs {
      .                               self.update(trait_item_ref.id.def_id, item_level);
      .                           }
      .                       }
      .                       hir::ItemKind::Struct(ref def, _) | hir::ItemKind::Union(ref def, _) => {
    112 ( 0.00%)                  if let Some(ctor_hir_id) = def.ctor_hir_id() {
      .                               self.update_with_hir_id(ctor_hir_id, item_level);
      .                           }
     56 ( 0.00%)                  for field in def.fields() {
    112 ( 0.00%)                      if field.vis.node.is_pub() {
      8 ( 0.00%)                          self.update_with_hir_id(field.hir_id, item_level);
      .                               }
      .                           }
      .                       }
      .                       hir::ItemKind::Macro(ref macro_def) => {
      8 ( 0.00%)                  self.update_reachability_from_macro(item.def_id, macro_def);
      .                       }
      .                       hir::ItemKind::ForeignMod { items, .. } => {
      .                           for foreign_item in items {
      .                               if self.tcx.visibility(foreign_item.id.def_id) == ty::Visibility::Public {
      .                                   self.update(foreign_item.id.def_id, item_level);
      .                               }
      .                           }
      .                       }
-- line 697 ----------------------------------------
-- line 704 ----------------------------------------
      .                       | hir::ItemKind::TyAlias(..)
      .                       | hir::ItemKind::Mod(..)
      .                       | hir::ItemKind::TraitAlias(..)
      .                       | hir::ItemKind::Fn(..)
      .                       | hir::ItemKind::ExternCrate(..) => {}
      .                   }
      .           
      .                   // Mark all items in interfaces of reachable items as reachable.
  2,010 ( 0.00%)          match item.kind {
      .                       // The interface is empty.
      .                       hir::ItemKind::Macro(..) | hir::ItemKind::ExternCrate(..) => {}
      .                       // All nested items are checked by `visit_item`.
      .                       hir::ItemKind::Mod(..) => {}
      .                       // Handled in the access level of in rustc_resolve
      .                       hir::ItemKind::Use(..) => {}
      .                       // The interface is empty.
      .                       hir::ItemKind::GlobalAsm(..) => {}
-- line 720 ----------------------------------------
-- line 732 ----------------------------------------
      .                               self.reach(item.def_id, exist_level).generics().predicates().ty();
      .                           }
      .                       }
      .                       // Visit everything.
      .                       hir::ItemKind::Const(..)
      .                       | hir::ItemKind::Static(..)
      .                       | hir::ItemKind::Fn(..)
      .                       | hir::ItemKind::TyAlias(..) => {
     34 ( 0.00%)                  if item_level.is_some() {
     52 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates().ty();
      .                           }
      .                       }
      .                       hir::ItemKind::Trait(.., trait_item_refs) => {
      .                           if item_level.is_some() {
      .                               self.reach(item.def_id, item_level).generics().predicates();
      .           
      .                               for trait_item_ref in trait_item_refs {
      .                                   let mut reach = self.reach(trait_item_ref.id.def_id, item_level);
-- line 749 ----------------------------------------
-- line 761 ----------------------------------------
      .                       }
      .                       hir::ItemKind::TraitAlias(..) => {
      .                           if item_level.is_some() {
      .                               self.reach(item.def_id, item_level).generics().predicates();
      .                           }
      .                       }
      .                       // Visit everything except for private impl items.
      .                       hir::ItemKind::Impl(ref impl_) => {
    256 ( 0.00%)                  if item_level.is_some() {
  2,500 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates().ty().trait_ref();
      .           
    250 ( 0.00%)                      for impl_item_ref in impl_.items {
    696 ( 0.00%)                          let impl_item_level = self.get(impl_item_ref.id.def_id);
  1,600 ( 0.00%)                          if impl_item_level.is_some() {
  2,320 ( 0.00%)                              self.reach(impl_item_ref.id.def_id, impl_item_level)
      .                                           .generics()
      .                                           .predicates()
      .                                           .ty();
      .                                   }
      .                               }
      .                           }
      .                       }
      .           
-- line 783 ----------------------------------------
-- line 808 ----------------------------------------
      .                                       .generics()
      .                                       .predicates()
      .                                       .ty();
      .                               }
      .                           }
      .                       }
      .                       // Visit everything except for private fields.
      .                       hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {
     28 ( 0.00%)                  if item_level.is_some() {
    208 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
     52 ( 0.00%)                      for field in struct_def.fields() {
    182 ( 0.00%)                          let def_id = self.tcx.hir().local_def_id(field.hir_id);
     78 ( 0.00%)                          let field_level = self.get(def_id);
     26 ( 0.00%)                          if field_level.is_some() {
      .                                       self.reach(def_id, field_level).ty();
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   }
      .           
      .                   let orig_level = mem::replace(&mut self.prev_level, item_level);
  1,206 ( 0.00%)          intravisit::walk_item(self, item);
    402 ( 0.00%)          self.prev_level = orig_level;
  3,216 ( 0.00%)      }
      .           
      .               fn visit_block(&mut self, b: &'tcx hir::Block<'tcx>) {
      .                   // Blocks can have public items, for example impls, but they always
      .                   // start as completely private regardless of publicity of a function,
      .                   // constant, type, field, etc., in which this block resides.
      .                   let orig_level = mem::replace(&mut self.prev_level, None);
      .                   intravisit::walk_block(self, b);
      .                   self.prev_level = orig_level;
      .               }
      .           }
      .           
      .           impl ReachEverythingInTheInterfaceVisitor<'_, '_> {
  3,738 ( 0.00%)      fn generics(&mut self) -> &mut Self {
  2,136 ( 0.00%)          for param in &self.ev.tcx.generics_of(self.item_def_id).params {
      .                       match param.kind {
      .                           GenericParamDefKind::Lifetime => {}
      .                           GenericParamDefKind::Type { has_default, .. } => {
      .                               if has_default {
      .                                   self.visit(self.ev.tcx.type_of(param.def_id));
      .                               }
      .                           }
      .                           GenericParamDefKind::Const { has_default, .. } => {
-- line 854 ----------------------------------------
-- line 855 ----------------------------------------
      .                               self.visit(self.ev.tcx.type_of(param.def_id));
      .                               if has_default {
      .                                   self.visit(self.ev.tcx.const_param_default(param.def_id));
      .                               }
      .                           }
      .                       }
      .                   }
      .                   self
  4,806 ( 0.00%)      }
      .           
  2,670 ( 0.00%)      fn predicates(&mut self) -> &mut Self {
  1,602 ( 0.00%)          self.visit_predicates(self.ev.tcx.predicates_of(self.item_def_id));
      .                   self
  3,204 ( 0.00%)      }
      .           
  2,540 ( 0.00%)      fn ty(&mut self) -> &mut Self {
  1,524 ( 0.00%)          self.visit(self.ev.tcx.type_of(self.item_def_id));
      .                   self
  3,048 ( 0.00%)      }
      .           
      .               fn trait_ref(&mut self) -> &mut Self {
  1,500 ( 0.00%)          if let Some(trait_ref) = self.ev.tcx.impl_trait_ref(self.item_def_id) {
      .                       self.visit_trait(trait_ref);
      .                   }
      .                   self
      .               }
      .           }
      .           
      .           impl<'tcx> DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {
      .               fn tcx(&self) -> TyCtxt<'tcx> {
  7,620 ( 0.00%)          self.ev.tcx
      .               }
 11,840 ( 0.00%)      fn visit_def_id(
      .                   &mut self,
      .                   def_id: DefId,
      .                   _kind: &str,
      .                   _descr: &dyn fmt::Display,
      .               ) -> ControlFlow<Self::BreakTy> {
  7,104 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
  4,435 ( 0.00%)              if let (ty::Visibility::Public, _) | (_, Some(AccessLevel::ReachableFromImplTrait)) =
  1,112 ( 0.00%)                  (self.tcx().visibility(def_id.to_def_id()), self.access_level)
      .                       {
      .                           self.ev.update(def_id, self.access_level);
      .                       }
      .                   }
      .                   ControlFlow::CONTINUE
 16,576 ( 0.00%)      }
      .           }
      .           
      .           //////////////////////////////////////////////////////////////////////////////////////
      .           /// Name privacy visitor, checks privacy and reports violations.
      .           /// Most of name privacy checks are performed during the main resolution phase,
      .           /// or later in type checking when field accesses and associated items are resolved.
      .           /// This pass performs remaining checks for fields in struct expressions and patterns.
      .           //////////////////////////////////////////////////////////////////////////////////////
-- line 909 ----------------------------------------
-- line 920 ----------------------------------------
      .               /// `Expr` or `Pat` nodes (they are guaranteed to be found only in bodies).
      .               #[track_caller]
      .               fn typeck_results(&self) -> &'tcx ty::TypeckResults<'tcx> {
      .                   self.maybe_typeck_results
      .                       .expect("`NamePrivacyVisitor::typeck_results` called outside of body")
      .               }
      .           
      .               // Checks that a field in a struct constructor (expression or pattern) is accessible.
    700 ( 0.00%)      fn check_field(
      .                   &mut self,
      .                   use_ctxt: Span,        // syntax context of the field name at the use site
      .                   span: Span,            // span of the field pattern, e.g., `x: 0`
      .                   def: &'tcx ty::AdtDef, // definition of the struct or enum
      .                   field: &'tcx ty::FieldDef,
      .                   in_update_syntax: bool,
      .               ) {
    140 ( 0.00%)          if def.is_enum() {
      .                       return;
      .                   }
      .           
      .                   // definition of the field
      .                   let ident = Ident::new(kw::Empty, use_ctxt);
    110 ( 0.00%)          let hir_id = self.tcx.hir().local_def_id_to_hir_id(self.current_item);
    385 ( 0.00%)          let def_id = self.tcx.adjust_ident_and_get_scope(ident, def.did, hir_id).1;
     55 ( 0.00%)          if !field.vis.is_accessible_from(def_id, self.tcx) {
      .                       let label = if in_update_syntax {
      .                           format!("field `{}` is private", field.name)
      .                       } else {
      .                           "private field".to_string()
      .                       };
      .           
      .                       struct_span_err!(
      .                           self.tcx.sess,
-- line 952 ----------------------------------------
-- line 955 ----------------------------------------
      .                           "field `{}` of {} `{}` is private",
      .                           field.name,
      .                           def.variant_descr(),
      .                           self.tcx.def_path_str(def.did)
      .                       )
      .                       .span_label(span, label)
      .                       .emit();
      .                   }
    560 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Visitor<'tcx> for NamePrivacyVisitor<'tcx> {
      .               type NestedFilter = nested_filter::All;
      .           
      .               /// We want to visit items in the context of their containing
      .               /// module and so forth, so supply a crate for doing a deep walk.
      .               fn nested_visit_map(&mut self) -> Self::Map {
    319 ( 0.00%)          self.tcx.hir()
      .               }
      .           
      .               fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {
      .                   // Don't visit nested modules, since we run a separate visitor walk
      .                   // for each module in `privacy_access_levels`
      .               }
      .           
      .               fn visit_nested_body(&mut self, body: hir::BodyId) {
      .                   let old_maybe_typeck_results =
    562 ( 0.00%)              self.maybe_typeck_results.replace(self.tcx.typeck_body(body));
    648 ( 0.00%)          let body = self.tcx.hir().body(body);
      .                   self.visit_body(body);
     19 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
      .               }
      .           
      .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    201 ( 0.00%)          let orig_current_item = mem::replace(&mut self.current_item, item.def_id);
    600 ( 0.00%)          intravisit::walk_item(self, item);
    201 ( 0.00%)          self.current_item = orig_current_item;
      .               }
      .           
 10,629 ( 0.00%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
  2,362 ( 0.00%)          if let hir::ExprKind::Struct(qpath, fields, ref base) = expr.kind {
    246 ( 0.00%)              let res = self.typeck_results().qpath_res(qpath, expr.hir_id);
    123 ( 0.00%)              let adt = self.typeck_results().expr_ty(expr).ty_adt_def().unwrap();
    369 ( 0.00%)              let variant = adt.variant_of_res(res);
    164 ( 0.00%)              if let Some(base) = *base {
      .                           // If the expression uses FRU we need to make sure all the unmentioned fields
      .                           // are checked for privacy (RFC 736). Rather than computing the set of
      .                           // unmentioned fields, just check them all.
      .                           for (vf_index, variant_field) in variant.fields.iter().enumerate() {
      .                               let field = fields.iter().find(|f| {
      .                                   self.tcx.field_index(f.hir_id, self.typeck_results()) == vf_index
      .                               });
      .                               let (use_ctxt, span) = match field {
      .                                   Some(field) => (field.ident.span, field.span),
      .                                   None => (base.span, base.span),
      .                               };
      .                               self.check_field(use_ctxt, span, adt, variant_field, true);
      .                           }
      .                       } else {
      .                           for field in fields {
     41 ( 0.00%)                      let use_ctxt = field.ident.span;
    410 ( 0.00%)                      let index = self.tcx.field_index(field.hir_id, self.typeck_results());
    451 ( 0.00%)                      self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);
      .                           }
      .                       }
      .                   }
      .           
 11,810 ( 0.00%)          intravisit::walk_expr(self, expr);
      .               }
      .           
  2,248 ( 0.00%)      fn visit_pat(&mut self, pat: &'tcx hir::Pat<'tcx>) {
    606 ( 0.00%)          if let PatKind::Struct(ref qpath, fields, _) = pat.kind {
    308 ( 0.00%)              let res = self.typeck_results().qpath_res(qpath, pat.hir_id);
    176 ( 0.00%)              let adt = self.typeck_results().pat_ty(pat).ty_adt_def().unwrap();
    352 ( 0.00%)              let variant = adt.variant_of_res(res);
      .                       for field in fields {
     29 ( 0.00%)                  let use_ctxt = field.ident.span;
    232 ( 0.00%)                  let index = self.tcx.field_index(field.hir_id, self.typeck_results());
    290 ( 0.00%)                  self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);
      .                       }
      .                   }
      .           
  2,529 ( 0.00%)          intravisit::walk_pat(self, pat);
      .               }
      .           }
      .           
      .           ////////////////////////////////////////////////////////////////////////////////////////////
      .           /// Type privacy visitor, checks types for privacy and reports violations.
      .           /// Both explicitly written types and inferred types of expressions and patterns are checked.
      .           /// Checks are performed on "semantic" types regardless of names and their hygiene.
      .           ////////////////////////////////////////////////////////////////////////////////////////////
-- line 1045 ----------------------------------------
-- line 1061 ----------------------------------------
      .                       .expect("`TypePrivacyVisitor::typeck_results` called outside of body")
      .               }
      .           
      .               fn item_is_accessible(&self, did: DefId) -> bool {
      .                   self.tcx.visibility(did).is_accessible_from(self.current_item.to_def_id(), self.tcx)
      .               }
      .           
      .               // Take node-id of an expression or pattern and check its type for privacy.
 11,081 ( 0.00%)      fn check_expr_pat_type(&mut self, id: hir::HirId, span: Span) -> bool {
  1,583 ( 0.00%)          self.span = span;
  1,583 ( 0.00%)          let typeck_results = self.typeck_results();
      .                   let result: ControlFlow<()> = try {
  6,332 ( 0.00%)              self.visit(typeck_results.node_type(id))?;
 12,664 ( 0.00%)              self.visit(typeck_results.node_substs(id))?;
 14,247 ( 0.00%)              if let Some(adjustments) = typeck_results.adjustments().get(id) {
      .                           adjustments.iter().try_for_each(|adjustment| self.visit(adjustment.target))?;
      .                       }
      .                   };
      .                   result.is_break()
 12,664 ( 0.00%)      }
      .           
      .               fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {
 23,584 ( 0.00%)          let is_error = !self.item_is_accessible(def_id);
      .                   if is_error {
      .                       self.tcx
      .                           .sess
      .                           .struct_span_err(self.span, &format!("{} `{}` is private", kind, descr))
      .                           .span_label(self.span, &format!("private {}", kind))
      .                           .emit();
      .                   }
      .                   is_error
-- line 1091 ----------------------------------------
-- line 1093 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {
      .               type NestedFilter = nested_filter::All;
      .           
      .               /// We want to visit items in the context of their containing
      .               /// module and so forth, so supply a crate for doing a deep walk.
      .               fn nested_visit_map(&mut self) -> Self::Map {
    319 ( 0.00%)          self.tcx.hir()
      .               }
      .           
      .               fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {
      .                   // Don't visit nested modules, since we run a separate visitor walk
      .                   // for each module in `privacy_access_levels`
      .               }
      .           
  1,080 ( 0.00%)      fn visit_nested_body(&mut self, body: hir::BodyId) {
      .                   let old_maybe_typeck_results =
    324 ( 0.00%)              self.maybe_typeck_results.replace(self.tcx.typeck_body(body));
    648 ( 0.00%)          let body = self.tcx.hir().body(body);
      .                   self.visit_body(body);
    108 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
    864 ( 0.00%)      }
      .           
      .               fn visit_generic_arg(&mut self, generic_arg: &'tcx hir::GenericArg<'tcx>) {
    355 ( 0.00%)          match generic_arg {
    196 ( 0.00%)              hir::GenericArg::Type(t) => self.visit_ty(t),
      .                       hir::GenericArg::Infer(inf) => self.visit_infer(inf),
      .                       hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}
      .                   }
      .               }
      .           
  4,004 ( 0.00%)      fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'tcx>) {
  1,144 ( 0.00%)          self.span = hir_ty.span;
  1,716 ( 0.00%)          if let Some(typeck_results) = self.maybe_typeck_results {
      .                       // Types in bodies.
     75 ( 0.00%)              if self.visit(typeck_results.node_type(hir_ty.hir_id)).is_break() {
      .                           return;
      .                       }
      .                   } else {
      .                       // Types in signatures.
      .                       // FIXME: This is very ineffective. Ideally each HIR type should be converted
      .                       // into a semantic type only once and the result should be cached somehow.
  1,641 ( 0.00%)              if self.visit(rustc_typeck::hir_ty_to_ty(self.tcx, hir_ty)).is_break() {
      .                           return;
      .                       }
      .                   }
      .           
  1,716 ( 0.00%)          intravisit::walk_ty(self, hir_ty);
  3,432 ( 0.00%)      }
      .           
      .               fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {
      .                   self.span = inf.span;
      .                   if let Some(typeck_results) = self.maybe_typeck_results {
      .                       if let Some(ty) = typeck_results.node_type_opt(inf.hir_id) {
      .                           if self.visit(ty).is_break() {
      .                               return;
      .                           }
-- line 1150 ----------------------------------------
-- line 1152 ----------------------------------------
      .                           // We don't do anything for const infers here.
      .                       }
      .                   } else {
      .                       bug!("visit_infer without typeck_results");
      .                   }
      .                   intravisit::walk_inf(self, inf);
      .               }
      .           
  1,024 ( 0.00%)      fn visit_trait_ref(&mut self, trait_ref: &'tcx hir::TraitRef<'tcx>) {
    384 ( 0.00%)          self.span = trait_ref.path.span;
    128 ( 0.00%)          if self.maybe_typeck_results.is_none() {
      .                       // Avoid calling `hir_trait_to_predicates` in bodies, it will ICE.
      .                       // The traits' privacy in bodies is already checked as a part of trait object types.
    128 ( 0.00%)              let bounds = rustc_typeck::hir_trait_to_predicates(
    128 ( 0.00%)                  self.tcx,
      .                           trait_ref,
      .                           // NOTE: This isn't really right, but the actual type doesn't matter here. It's
      .                           // just required by `ty::TraitRef`.
    384 ( 0.00%)                  self.tcx.types.never,
      .                       );
      .           
  1,152 ( 0.00%)              for (trait_predicate, _, _) in bounds.trait_bounds {
    896 ( 0.00%)                  if self.visit_trait(trait_predicate.skip_binder()).is_break() {
      .                               return;
      .                           }
      .                       }
      .           
    775 ( 0.00%)              for (poly_predicate, _) in bounds.projection_bounds {
      6 ( 0.00%)                  let pred = poly_predicate.skip_binder();
      .                           let poly_pred_term = self.visit(pred.term);
      4 ( 0.00%)                  if poly_pred_term.is_break()
      .                               || self.visit_projection_ty(pred.projection_ty).is_break()
      .                           {
      .                               return;
      .                           }
      .                       }
      .                   }
      .           
      .                   intravisit::walk_trait_ref(self, trait_ref);
  1,024 ( 0.00%)      }
      .           
      .               // Check types of expressions
 10,629 ( 0.00%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
 10,629 ( 0.00%)          if self.check_expr_pat_type(expr.hir_id, expr.span) {
      .                       // Do not check nested expressions if the error already happened.
      .                       return;
      .                   }
  7,649 ( 0.00%)          match expr.kind {
     93 ( 0.00%)              hir::ExprKind::Assign(_, rhs, _) | hir::ExprKind::Match(rhs, ..) => {
      .                           // Do not report duplicate errors for `x = y` and `match x { ... }`.
    483 ( 0.00%)                  if self.check_expr_pat_type(rhs.hir_id, rhs.span) {
      .                               return;
      .                           }
      .                       }
    132 ( 0.00%)              hir::ExprKind::MethodCall(segment, ..) => {
      .                           // Method calls have to be checked specially.
    264 ( 0.00%)                  self.span = segment.ident.span;
    792 ( 0.00%)                  if let Some(def_id) = self.typeck_results().type_dependent_def_id(expr.hir_id) {
    396 ( 0.00%)                      if self.visit(self.tcx.type_of(def_id)).is_break() {
      .                                   return;
      .                               }
      .                           } else {
      .                               self.tcx
      .                                   .sess
      .                                   .delay_span_bug(expr.span, "no type-dependent def for method call");
      .                           }
      .                       }
      .                       _ => {}
      .                   }
      .           
  3,543 ( 0.00%)          intravisit::walk_expr(self, expr);
  9,448 ( 0.00%)      }
      .           
      .               // Prohibit access to associated items with insufficient nominal visibility.
      .               //
      .               // Additionally, until better reachability analysis for macros 2.0 is available,
      .               // we prohibit access to private statics from other crates, this allows to give
      .               // more code internal visibility at link time. (Access to private functions
      .               // is already prohibited by type privacy for function types.)
  9,010 ( 0.00%)      fn visit_qpath(&mut self, qpath: &'tcx hir::QPath<'tcx>, id: hir::HirId, span: Span) {
  1,802 ( 0.00%)          let def = match qpath {
  2,469 ( 0.00%)              hir::QPath::Resolved(_, path) => match path.res {
  2,322 ( 0.00%)                  Res::Def(kind, def_id) => Some((kind, def_id)),
      .                           _ => None,
      .                       },
     78 ( 0.00%)              hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
      .                           .maybe_typeck_results
    684 ( 0.00%)                  .and_then(|typeck_results| typeck_results.type_dependent_def(id)),
      .                   };
      .                   let def = def.filter(|(kind, _)| {
    926 ( 0.00%)              matches!(
      .                           kind,
      .                           DefKind::AssocFn | DefKind::AssocConst | DefKind::AssocTy | DefKind::Static
      .                       )
      .                   });
      .                   if let Some((kind, def_id)) = def {
      .                       let is_local_static =
    280 ( 0.00%)                  if let DefKind::Static = kind { def_id.is_local() } else { false };
    140 ( 0.00%)              if !self.item_is_accessible(def_id) && !is_local_static {
      .                           let sess = self.tcx.sess;
      .                           let sm = sess.source_map();
      .                           let name = match qpath {
      .                               hir::QPath::Resolved(..) | hir::QPath::LangItem(..) => {
      .                                   sm.span_to_snippet(qpath.span()).ok()
      .                               }
      .                               hir::QPath::TypeRelative(_, segment) => Some(segment.ident.to_string()),
      .                           };
-- line 1258 ----------------------------------------
-- line 1263 ----------------------------------------
      .                           };
      .                           sess.struct_span_err(span, &msg)
      .                               .span_label(span, &format!("private {}", kind))
      .                               .emit();
      .                           return;
      .                       }
      .                   }
      .           
  9,911 ( 0.00%)          intravisit::walk_qpath(self, qpath, id, span);
      .               }
      .           
      .               // Check types of patterns.
      .               fn visit_pat(&mut self, pattern: &'tcx hir::Pat<'tcx>) {
  1,907 ( 0.00%)          if self.check_expr_pat_type(pattern.hir_id, pattern.span) {
      .                       // Do not check nested patterns if the error already happened.
      .                       return;
      .                   }
      .           
  1,011 ( 0.00%)          intravisit::walk_pat(self, pattern);
      .               }
      .           
    265 ( 0.00%)      fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>) {
    159 ( 0.00%)          if let Some(init) = local.init {
    364 ( 0.00%)              if self.check_expr_pat_type(init.hir_id, init.span) {
      .                           // Do not report duplicate errors for `let x = y`.
      .                           return;
      .                       }
      .                   }
      .           
      .                   intravisit::walk_local(self, local);
    208 ( 0.00%)      }
      .           
      .               // Check types in item interfaces.
      .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    201 ( 0.00%)          let orig_current_item = mem::replace(&mut self.current_item, item.def_id);
      .                   let old_maybe_typeck_results = self.maybe_typeck_results.take();
    600 ( 0.00%)          intravisit::walk_item(self, item);
    201 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
    201 ( 0.00%)          self.current_item = orig_current_item;
      .               }
      .           }
      .           
      .           impl<'tcx> DefIdVisitor<'tcx> for TypePrivacyVisitor<'tcx> {
      .               fn tcx(&self) -> TyCtxt<'tcx> {
 33,717 ( 0.01%)          self.tcx
      .               }
176,880 ( 0.04%)      fn visit_def_id(
      .                   &mut self,
      .                   def_id: DefId,
      .                   kind: &str,
      .                   descr: &dyn fmt::Display,
      .               ) -> ControlFlow<Self::BreakTy> {
      .                   if self.check_def_id(def_id, kind, descr) {
      .                       ControlFlow::BREAK
      .                   } else {
      .                       ControlFlow::CONTINUE
      .                   }
106,128 ( 0.02%)      }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////////
      .           /// Obsolete visitors for checking for private items in public interfaces.
      .           /// These visitors are supposed to be kept in frozen state and produce an
      .           /// "old error node set". For backward compatibility the new visitor reports
      .           /// warnings instead of hard errors when the erroneous node is not in this old set.
      .           ///////////////////////////////////////////////////////////////////////////////
-- line 1328 ----------------------------------------
-- line 1342 ----------------------------------------
      .               /// Whether we've recurred at all (i.e., if we're pointing at the
      .               /// first type on which `visit_ty` was called).
      .               at_outer_type: bool,
      .               /// Whether that first type is a public path.
      .               outer_type_is_public_path: bool,
      .           }
      .           
      .           impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {
    163 ( 0.00%)      fn path_is_private_type(&self, path: &hir::Path<'_>) -> bool {
    489 ( 0.00%)          let did = match path.res {
      .                       Res::PrimTy(..) | Res::SelfTy(..) | Res::Err => return false,
    978 ( 0.00%)              res => res.def_id(),
      .                   };
      .           
      .                   // A path can only be private if:
      .                   // it's in this crate...
    163 ( 0.00%)          if let Some(did) = did.as_local() {
      .                       // .. and it corresponds to a private type in the AST (this returns
      .                       // `None` for type parameters).
    650 ( 0.00%)              match self.tcx.hir().find(self.tcx.hir().local_def_id_to_hir_id(did)) {
    520 ( 0.00%)                  Some(Node::Item(item)) => !item.vis.node.is_pub(),
      .                           Some(_) | None => false,
      .                       }
      .                   } else {
      .                       false
      .                   }
    326 ( 0.00%)      }
      .           
      .               fn trait_is_public(&self, trait_id: LocalDefId) -> bool {
      .                   // FIXME: this would preferably be using `exported_items`, but all
      .                   // traits are exported currently (see `EmbargoVisitor.exported_trait`).
      .                   self.access_levels.is_public(trait_id)
      .               }
      .           
      .               fn check_generic_bound(&mut self, bound: &hir::GenericBound<'_>) {
-- line 1376 ----------------------------------------
-- line 1377 ----------------------------------------
      .                   if let hir::GenericBound::Trait(ref trait_ref, _) = *bound {
      .                       if self.path_is_private_type(trait_ref.trait_ref.path) {
      .                           self.old_error_set.insert(trait_ref.trait_ref.hir_ref_id);
      .                       }
      .                   }
      .               }
      .           
      .               fn item_is_public(&self, def_id: LocalDefId, vis: &hir::Visibility<'_>) -> bool {
    100 ( 0.00%)          self.access_levels.is_reachable(def_id) || vis.node.is_pub()
      .               }
      .           }
      .           
      .           impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {
      .               fn visit_generic_arg(&mut self, generic_arg: &'v hir::GenericArg<'v>) {
      .                   match generic_arg {
      .                       hir::GenericArg::Type(t) => self.visit_ty(t),
      .                       hir::GenericArg::Infer(inf) => self.visit_ty(&inf.to_ty()),
      .                       hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}
      .                   }
      .               }
      .           
      .               fn visit_ty(&mut self, ty: &hir::Ty<'_>) {
    640 ( 0.00%)          if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = ty.kind {
    512 ( 0.00%)              if self.inner.path_is_private_type(path) {
      .                           self.contains_private = true;
      .                           // Found what we're looking for, so let's stop working.
      .                           return;
      .                       }
      .                   }
      .                   if let hir::TyKind::Path(_) = ty.kind {
      .                       if self.at_outer_type {
    125 ( 0.00%)                  self.outer_type_is_public_path = true;
      .                       }
      .                   }
    250 ( 0.00%)          self.at_outer_type = false;
    250 ( 0.00%)          intravisit::walk_ty(self, ty)
    500 ( 0.00%)      }
      .           
      .               // Don't want to recurse into `[, .. expr]`.
      .               fn visit_expr(&mut self, _: &hir::Expr<'_>) {}
      .           }
      .           
      .           impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {
      .               type NestedFilter = nested_filter::All;
      .           
      .               /// We want to visit items in the context of their containing
      .               /// module and so forth, so supply a crate for doing a deep walk.
      .               fn nested_visit_map(&mut self) -> Self::Map {
    201 ( 0.00%)          self.tcx.hir()
      .               }
      .           
  1,809 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    804 ( 0.00%)          match item.kind {
      .                       // Contents of a private mod can be re-exported, so we need
      .                       // to check internals.
      .                       hir::ItemKind::Mod(_) => {}
      .           
      .                       // An `extern {}` doesn't introduce a new privacy
      .                       // namespace (the contents have their own privacies).
      .                       hir::ItemKind::ForeignMod { .. } => {}
      .           
-- line 1437 ----------------------------------------
-- line 1454 ----------------------------------------
      .                           // `impl [... for] Private` is never visible.
      .                           let self_contains_private;
      .                           // `impl [... for] Public<...>`, but not `impl [... for]
      .                           // Vec<Public>` or `(Public,)`, etc.
      .                           let self_is_public_path;
      .           
      .                           // Check the properties of the `Self` type:
      .                           {
    512 ( 0.00%)                      let mut visitor = ObsoleteCheckTypeForPrivatenessVisitor {
      .                                   inner: self,
      .                                   contains_private: false,
      .                                   at_outer_type: true,
      .                                   outer_type_is_public_path: false,
      .                               };
    128 ( 0.00%)                      visitor.visit_ty(impl_.self_ty);
      .                               self_contains_private = visitor.contains_private;
      .                               self_is_public_path = visitor.outer_type_is_public_path;
      .                           }
      .           
      .                           // Miscellaneous info about the impl:
      .           
      .                           // `true` iff this is `impl Private for ...`.
      .                           let not_private_trait = impl_.of_trait.as_ref().map_or(
      .                               true, // no trait counts as public trait
      .                               |tr| {
    381 ( 0.00%)                          if let Some(def_id) = tr.path.res.def_id().as_local() {
      .                                       self.trait_is_public(def_id)
      .                                   } else {
      .                                       true // external traits must be public
      .                                   }
      .                               },
      .                           );
      .           
      .                           // `true` iff this is a trait impl or at least one method is public.
-- line 1487 ----------------------------------------
-- line 1488 ----------------------------------------
      .                           //
      .                           // `impl Public { $( fn ...() {} )* }` is not visible.
      .                           //
      .                           // This is required over just using the methods' privacy
      .                           // directly because we might have `impl<T: Foo<Private>> ...`,
      .                           // and we shouldn't warn about the generics if all the methods
      .                           // are private (because `T` won't be visible externally).
      .                           let trait_or_some_public_method = impl_.of_trait.is_some()
      1 ( 0.00%)                      || impl_.items.iter().any(|impl_item_ref| {
     12 ( 0.00%)                          let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
     11 ( 0.00%)                          match impl_item.kind {
      .                                       hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..) => {
      .                                           self.access_levels.is_reachable(impl_item_ref.id.def_id)
      .                                       }
      .                                       hir::ImplItemKind::TyAlias(_) => false,
      .                                   }
      .                               });
      .           
    254 ( 0.00%)                  if !self_contains_private && not_private_trait && trait_or_some_public_method {
      .                               intravisit::walk_generics(self, &impl_.generics);
      .           
    250 ( 0.00%)                      match impl_.of_trait {
      .                                   None => {
      .                                       for impl_item_ref in impl_.items {
      .                                           // This is where we choose whether to walk down
      .                                           // further into the impl to check its items. We
      .                                           // should only walk into public items so that we
      .                                           // don't erroneously report errors for private
      .                                           // types in private items.
      .                                           let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
-- line 1517 ----------------------------------------
-- line 1538 ----------------------------------------
      .                                       //
      .                                       // Those in 1. can only occur if the trait is in
      .                                       // this crate and will've been warned about on the
      .                                       // trait definition (there's no need to warn twice
      .                                       // so we don't check the methods).
      .                                       //
      .                                       // Those in 2. are warned via walk_generics and this
      .                                       // call here.
    375 ( 0.00%)                              intravisit::walk_path(self, tr.path);
      .           
      .                                       // Those in 3. are warned with this call.
    125 ( 0.00%)                              for impl_item_ref in impl_.items {
    580 ( 0.00%)                                  let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
  1,065 ( 0.00%)                                  if let hir::ImplItemKind::TyAlias(ty) = impl_item.kind {
      .                                               self.visit_ty(ty);
      .                                           }
      .                                       }
      .                                   }
      .                               }
      9 ( 0.00%)                  } else if impl_.of_trait.is_none() && self_is_public_path {
      .                               // `impl Public<Private> { ... }`. Any public static
      .                               // methods will be visible as `Public::foo`.
      .                               let mut found_pub_static = false;
      .                               for impl_item_ref in impl_.items {
      .                                   if self.access_levels.is_reachable(impl_item_ref.id.def_id)
      .                                       || self.tcx.visibility(impl_item_ref.id.def_id)
      .                                           == ty::Visibility::Public
      .                                   {
-- line 1565 ----------------------------------------
-- line 1584 ----------------------------------------
      .                           return;
      .                       }
      .           
      .                       // `type ... = ...;` can contain private types, because
      .                       // we're introducing a new name.
      .                       hir::ItemKind::TyAlias(..) => return,
      .           
      .                       // Not at all public, so we don't care.
    358 ( 0.00%)              _ if !self.item_is_public(item.def_id, &item.vis) => {
      .                           return;
      .                       }
      .           
      .                       _ => {}
      .                   }
      .           
      .                   // We've carefully constructed it so that if we're here, then
      .                   // any `visit_ty`'s will be called on things that are in
      .                   // public signatures, i.e., things that we're interested in for
      .                   // this visitor.
    180 ( 0.00%)          intravisit::walk_item(self, item);
  1,464 ( 0.00%)      }
      .           
    104 ( 0.00%)      fn visit_generics(&mut self, generics: &'tcx hir::Generics<'tcx>) {
      .                   for param in generics.params {
      .                       for bound in param.bounds {
      .                           self.check_generic_bound(bound);
      .                       }
      .                   }
     13 ( 0.00%)          for predicate in generics.where_clause.predicates {
      .                       match predicate {
      .                           hir::WherePredicate::BoundPredicate(bound_pred) => {
      .                               for bound in bound_pred.bounds.iter() {
      .                                   self.check_generic_bound(bound)
      .                               }
      .                           }
      .                           hir::WherePredicate::RegionPredicate(_) => {}
      .                           hir::WherePredicate::EqPredicate(eq_pred) => {
      .                               self.visit_ty(eq_pred.rhs_ty);
      .                           }
      .                       }
      .                   }
    104 ( 0.00%)      }
      .           
      .               fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem<'tcx>) {
      .                   if self.access_levels.is_reachable(item.def_id) {
      .                       intravisit::walk_foreign_item(self, item)
      .                   }
      .               }
      .           
      .               fn visit_ty(&mut self, t: &'tcx hir::Ty<'tcx>) {
    175 ( 0.00%)          if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = t.kind {
    140 ( 0.00%)              if self.path_is_private_type(path) {
      .                           self.old_error_set.insert(t.hir_id);
      .                       }
      .                   }
    175 ( 0.00%)          intravisit::walk_ty(self, t)
      .               }
      .           
      .               fn visit_variant(
      .                   &mut self,
      .                   v: &'tcx hir::Variant<'tcx>,
      .                   g: &'tcx hir::Generics<'tcx>,
      .                   item_id: hir::HirId,
      .               ) {
      .                   if self.access_levels.is_reachable(self.tcx.hir().local_def_id(v.id)) {
      .                       self.in_variant = true;
      .                       intravisit::walk_variant(self, v, g, item_id);
      .                       self.in_variant = false;
      .                   }
      .               }
      .           
     65 ( 0.00%)      fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {
     78 ( 0.00%)          if s.vis.node.is_pub() || self.in_variant {
      .                       intravisit::walk_field_def(self, s);
      .                   }
     52 ( 0.00%)      }
      .           
      .               // We don't need to introspect into these at all: an
      .               // expression/block context can't possibly contain exported things.
      .               // (Making them no-ops stops us from traversing the whole AST without
      .               // having to be super careful about our `walk_...` calls above.)
      .               fn visit_block(&mut self, _: &'tcx hir::Block<'tcx>) {}
      .               fn visit_expr(&mut self, _: &'tcx hir::Expr<'tcx>) {}
      .           }
-- line 1667 ----------------------------------------
-- line 1679 ----------------------------------------
      .               /// The visitor checks that each component type is at least this visible.
      .               required_visibility: ty::Visibility,
      .               has_pub_restricted: bool,
      .               has_old_errors: bool,
      .               in_assoc_ty: bool,
      .           }
      .           
      .           impl SearchInterfaceForPrivateItemsVisitor<'_> {
  1,071 ( 0.00%)      fn generics(&mut self) -> &mut Self {
    459 ( 0.00%)          for param in &self.tcx.generics_of(self.item_def_id).params {
      8 ( 0.00%)              match param.kind {
      .                           GenericParamDefKind::Lifetime => {}
      1 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
      1 ( 0.00%)                      if has_default {
      .                                   self.visit(self.tcx.type_of(param.def_id));
      .                               }
      .                           }
      .                           // FIXME(generic_const_exprs): May want to look inside const here
      .                           GenericParamDefKind::Const { .. } => {
      .                               self.visit(self.tcx.type_of(param.def_id));
      .                           }
      .                       }
      .                   }
      .                   self
  1,224 ( 0.00%)      }
      .           
    765 ( 0.00%)      fn predicates(&mut self) -> &mut Self {
      .                   // N.B., we use `explicit_predicates_of` and not `predicates_of`
      .                   // because we don't want to report privacy errors due to where
      .                   // clauses that the compiler inferred. We only want to
      .                   // consider the ones that the user wrote. This is important
      .                   // for the inferred outlives rules; see
      .                   // `src/test/ui/rfc-2093-infer-outlives/privacy.rs`.
    306 ( 0.00%)          self.visit_predicates(self.tcx.explicit_predicates_of(self.item_def_id));
      .                   self
    918 ( 0.00%)      }
      .           
      .               fn bounds(&mut self) -> &mut Self {
      .                   self.visit_predicates(ty::GenericPredicates {
      .                       parent: None,
      .                       predicates: self.tcx.explicit_item_bounds(self.item_def_id),
      .                   });
      .                   self
      .               }
      .           
    760 ( 0.00%)      fn ty(&mut self) -> &mut Self {
    304 ( 0.00%)          self.visit(self.tcx.type_of(self.item_def_id));
      .                   self
    760 ( 0.00%)      }
      .           
      .               fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {
  4,173 ( 0.00%)          if self.leaks_private_dep(def_id) {
      .                       self.tcx.struct_span_lint_hir(
      .                           lint::builtin::EXPORTED_PRIVATE_DEPENDENCIES,
      .                           self.tcx.hir().local_def_id_to_hir_id(self.item_def_id),
      .                           self.tcx.def_span(self.item_def_id.to_def_id()),
      .                           |lint| {
      .                               lint.build(&format!(
      .                                   "{} `{}` from private dependency '{}' in public \
      .                                                           interface",
-- line 1738 ----------------------------------------
-- line 1740 ----------------------------------------
      .                                   descr,
      .                                   self.tcx.crate_name(def_id.krate)
      .                               ))
      .                               .emit()
      .                           },
      .                       );
      .                   }
      .           
  1,511 ( 0.00%)          let hir_id = match def_id.as_local() {
    335 ( 0.00%)              Some(def_id) => self.tcx.hir().local_def_id_to_hir_id(def_id),
      .                       None => return false,
      .                   };
      .           
      .                   let vis = self.tcx.visibility(def_id);
    641 ( 0.00%)          if !vis.is_at_least(self.required_visibility, self.tcx) {
      .                       let vis_descr = match vis {
      .                           ty::Visibility::Public => "public",
      .                           ty::Visibility::Invisible => "private",
      .                           ty::Visibility::Restricted(vis_def_id) => {
      .                               if vis_def_id == self.tcx.parent_module(hir_id).to_def_id() {
      .                                   "private"
      .                               } else if vis_def_id.is_top_level_module() {
      .                                   "crate-private"
-- line 1762 ----------------------------------------
-- line 1792 ----------------------------------------
      .                   false
      .               }
      .           
      .               /// An item is 'leaked' from a private dependency if all
      .               /// of the following are true:
      .               /// 1. It's contained within a public type
      .               /// 2. It comes from a private crate
      .               fn leaks_private_dep(&self, item_id: DefId) -> bool {
  2,523 ( 0.00%)          let ret = self.required_visibility.is_public() && self.tcx.is_private_dep(item_id.krate);
      .           
      .                   tracing::debug!("leaks_private_dep(item_id={:?})={}", item_id, ret);
      .                   ret
      .               }
      .           }
      .           
      .           impl<'tcx> DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {
      .               fn tcx(&self) -> TyCtxt<'tcx> {
  1,216 ( 0.00%)          self.tcx
      .               }
 13,456 ( 0.00%)      fn visit_def_id(
      .                   &mut self,
      .                   def_id: DefId,
      .                   kind: &str,
      .                   descr: &dyn fmt::Display,
      .               ) -> ControlFlow<Self::BreakTy> {
      .                   if self.check_def_id(def_id, kind, descr) {
      .                       ControlFlow::BREAK
      .                   } else {
      .                       ControlFlow::CONTINUE
      .                   }
  7,569 ( 0.00%)      }
      .           }
      .           
      .           struct PrivateItemsInPublicInterfacesVisitor<'tcx> {
      .               tcx: TyCtxt<'tcx>,
      .               has_pub_restricted: bool,
      .               old_error_set_ancestry: LocalDefIdSet,
      .           }
      .           
      .           impl<'tcx> PrivateItemsInPublicInterfacesVisitor<'tcx> {
      .               fn check(
      .                   &self,
      .                   def_id: LocalDefId,
      .                   required_visibility: ty::Visibility,
      .               ) -> SearchInterfaceForPrivateItemsVisitor<'tcx> {
  1,247 ( 0.00%)          SearchInterfaceForPrivateItemsVisitor {
    135 ( 0.00%)              tcx: self.tcx,
      .                       item_def_id: def_id,
      .                       required_visibility,
    181 ( 0.00%)              has_pub_restricted: self.has_pub_restricted,
      .                       has_old_errors: self.old_error_set_ancestry.contains(&def_id),
      .                       in_assoc_ty: false,
      .                   }
      .               }
      .           
  1,573 ( 0.00%)      fn check_assoc_item(
      .                   &self,
      .                   def_id: LocalDefId,
      .                   assoc_item_kind: AssocItemKind,
      .                   defaultness: hir::Defaultness,
      .                   vis: ty::Visibility,
      .               ) {
      .                   let mut check = self.check(def_id, vis);
      .           
    242 ( 0.00%)          let (check_ty, is_assoc_ty) = match assoc_item_kind {
      .                       AssocItemKind::Const | AssocItemKind::Fn { .. } => (true, false),
     70 ( 0.00%)              AssocItemKind::Type => (defaultness.has_value(), true),
      .                   };
    242 ( 0.00%)          check.in_assoc_ty = is_assoc_ty;
    484 ( 0.00%)          check.generics().predicates();
     70 ( 0.00%)          if check_ty {
    121 ( 0.00%)              check.ty();
      .                   }
    968 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'tcx> {
      .               type NestedFilter = nested_filter::OnlyBodies;
      .           
      .               fn nested_visit_map(&mut self) -> Self::Map {
    103 ( 0.00%)          self.tcx.hir()
      .               }
      .           
  1,809 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    201 ( 0.00%)          let tcx = self.tcx;
    201 ( 0.00%)          let item_visibility = tcx.visibility(item.def_id);
      .           
  1,005 ( 0.00%)          match item.kind {
      .                       // Crates are always public.
      .                       hir::ItemKind::ExternCrate(..) => {}
      .                       // All nested items are checked by `visit_item`.
      .                       hir::ItemKind::Mod(..) => {}
      .                       // Checked in resolve.
      .                       hir::ItemKind::Use(..) => {}
      .                       // No subitems.
      .                       hir::ItemKind::Macro(..) | hir::ItemKind::GlobalAsm(..) => {}
      .                       // Subitems of these items have inherited publicity.
      .                       hir::ItemKind::Const(..)
      .                       | hir::ItemKind::Static(..)
      .                       | hir::ItemKind::Fn(..)
      .                       | hir::ItemKind::TyAlias(..) => {
    102 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates().ty();
      .                       }
      .                       hir::ItemKind::OpaqueTy(..) => {
      .                           // `ty()` for opaque types is the underlying type,
      .                           // it's not a part of interface, so we skip it.
      .                           self.check(item.def_id, item_visibility).generics().bounds();
      .                       }
      .                       hir::ItemKind::Trait(.., trait_item_refs) => {
      .                           self.check(item.def_id, item_visibility).generics().predicates();
-- line 1901 ----------------------------------------
-- line 1929 ----------------------------------------
      .                       hir::ItemKind::ForeignMod { items, .. } => {
      .                           for foreign_item in items {
      .                               let vis = tcx.visibility(foreign_item.id.def_id);
      .                               self.check(foreign_item.id.def_id, vis).generics().predicates().ty();
      .                           }
      .                       }
      .                       // Subitems of structs and unions have their own publicity.
      .                       hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {
     56 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
      .           
     42 ( 0.00%)                  for field in struct_def.fields() {
     84 ( 0.00%)                      let def_id = tcx.hir().local_def_id(field.hir_id);
      .                               let field_visibility = tcx.visibility(def_id);
     42 ( 0.00%)                      self.check(def_id, min(item_visibility, field_visibility, tcx)).ty();
      .                           }
      .                       }
      .                       // An inherent impl is public when its type is public
      .                       // Subitems of inherent impls have their own publicity.
      .                       // A trait impl is public when both its type and its trait are public
      .                       // Subitems of trait impls have inherited publicity.
      .                       hir::ItemKind::Impl(ref impl_) => {
    512 ( 0.00%)                  let impl_vis = ty::Visibility::of_impl(item.def_id, tcx, &Default::default());
      .                           // check that private components do not appear in the generics or predicates of inherent impls
      .                           // this check is intentionally NOT performed for impls of traits, per #90586
    256 ( 0.00%)                  if impl_.of_trait.is_none() {
      5 ( 0.00%)                      self.check(item.def_id, impl_vis).generics().predicates();
      .                           }
    128 ( 0.00%)                  for impl_item_ref in impl_.items {
    233 ( 0.00%)                      let impl_item_vis = if impl_.of_trait.is_none() {
      3 ( 0.00%)                          min(tcx.visibility(impl_item_ref.id.def_id), impl_vis, tcx)
      .                               } else {
      .                                   impl_vis
      .                               };
    723 ( 0.00%)                      self.check_assoc_item(
    121 ( 0.00%)                          impl_item_ref.id.def_id,
      .                                   impl_item_ref.kind,
      .                                   impl_item_ref.defaultness,
      .                                   impl_item_vis,
      .                               );
      .                           }
      .                       }
      .                   }
  1,608 ( 0.00%)      }
      .           }
      .           
      .           pub fn provide(providers: &mut Providers) {
      8 ( 0.00%)      *providers = Providers {
      .                   visibility,
      .                   privacy_access_levels,
      .                   check_private_in_public,
      .                   check_mod_privacy,
      .                   ..*providers
      .               };
      1 ( 0.00%)  }
      .           
  3,132 ( 0.00%)  fn visibility(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Visibility {
    348 ( 0.00%)      let def_id = def_id.expect_local();
      .               match tcx.resolutions(()).visibilities.get(&def_id) {
    378 ( 0.00%)          Some(vis) => *vis,
      .                   None => {
      .                       let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);
  1,724 ( 0.00%)              match tcx.hir().get(hir_id) {
      .                           // Unique types created for closures participate in type privacy checking.
      .                           // They have visibilities inherited from the module they are defined in.
      .                           Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => {
     66 ( 0.00%)                      ty::Visibility::Restricted(tcx.parent_module(hir_id).to_def_id())
      .                           }
      .                           // - AST lowering may clone `use` items and the clones don't
      .                           //   get their entries in the resolver's visibility table.
      .                           // - AST lowering also creates opaque type items with inherited visibilies.
      .                           //   Visibility on them should have no effect, but to avoid the visibility
      .                           //   query failing on some items, we provide it for opaque types as well.
      .                           Node::Item(hir::Item {
     30 ( 0.00%)                      vis,
      .                               kind: hir::ItemKind::Use(..) | hir::ItemKind::OpaqueTy(..),
      .                               ..
    180 ( 0.00%)                  }) => ty::Visibility::from_hir(vis, hir_id, tcx),
      .                           // Visibilities of trait impl items are inherited from their traits
      .                           // and are not filled in resolve.
      .                           Node::ImplItem(impl_item) => {
  1,534 ( 0.00%)                      match tcx.hir().get_by_def_id(tcx.hir().get_parent_item(hir_id)) {
      .                                   Node::Item(hir::Item {
      .                                       kind: hir::ItemKind::Impl(hir::Impl { of_trait: Some(tr), .. }),
      .                                       ..
    118 ( 0.00%)                          }) => tr.path.res.opt_def_id().map_or_else(
      .                                       || {
      .                                           tcx.sess.delay_span_bug(tr.path.span, "trait without a def-id");
      .                                           ty::Visibility::Public
      .                                       },
      .                                       |def_id| tcx.visibility(def_id),
      .                                   ),
      .                                   _ => span_bug!(impl_item.span, "the parent is not a trait impl"),
      .                               }
-- line 2021 ----------------------------------------
-- line 2023 ----------------------------------------
      .                           _ => span_bug!(
      .                               tcx.def_span(def_id),
      .                               "visibility table unexpectedly missing a def-id: {:?}",
      .                               def_id,
      .                           ),
      .                       }
      .                   }
      .               }
  2,784 ( 0.00%)  }
      .           
     24 ( 0.00%)  fn check_mod_privacy(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {
      .               // Check privacy of names not checked in previous compilation stages.
      .               let mut visitor =
     12 ( 0.00%)          NamePrivacyVisitor { tcx, maybe_typeck_results: None, current_item: module_def_id };
     27 ( 0.00%)      let (module, span, hir_id) = tcx.hir().get_module(module_def_id);
      .           
      .               intravisit::walk_mod(&mut visitor, module, hir_id);
      .           
      .               // Check privacy of explicitly written types and traits as well as
      .               // inferred types of expressions and patterns.
      .               let mut visitor =
     18 ( 0.00%)          TypePrivacyVisitor { tcx, maybe_typeck_results: None, current_item: module_def_id, span };
      .               intravisit::walk_mod(&mut visitor, module, hir_id);
     24 ( 0.00%)  }
      .           
      7 ( 0.00%)  fn privacy_access_levels(tcx: TyCtxt<'_>, (): ()) -> &AccessLevels {
      .               // Build up a set of all exported items in the AST. This is a set of all
      .               // items which are reachable from external crates based on visibility.
      9 ( 0.00%)      let mut visitor = EmbargoVisitor {
      .                   tcx,
      .                   access_levels: tcx.resolutions(()).access_levels.clone(),
      .                   macro_reachable: Default::default(),
      .                   prev_level: Some(AccessLevel::Public),
      .                   changed: false,
      .               };
      .           
      .               loop {
      .                   tcx.hir().walk_toplevel_module(&mut visitor);
      4 ( 0.00%)          if visitor.changed {
      3 ( 0.00%)              visitor.changed = false;
      .                   } else {
      .                       break;
      .                   }
      .               }
      .           
      1 ( 0.00%)      tcx.arena.alloc(visitor.access_levels)
      9 ( 0.00%)  }
      .           
      8 ( 0.00%)  fn check_private_in_public(tcx: TyCtxt<'_>, (): ()) {
      .               let access_levels = tcx.privacy_access_levels(());
      .           
      9 ( 0.00%)      let mut visitor = ObsoleteVisiblePrivateTypesVisitor {
      .                   tcx,
      .                   access_levels,
      .                   in_variant: false,
      .                   old_error_set: Default::default(),
      .               };
      .               tcx.hir().walk_toplevel_module(&mut visitor);
      .           
      .               let has_pub_restricted = {
      5 ( 0.00%)          let mut pub_restricted_visitor = PubRestrictedVisitor { tcx, has_pub_restricted: false };
      .                   tcx.hir().walk_toplevel_module(&mut pub_restricted_visitor);
      1 ( 0.00%)          pub_restricted_visitor.has_pub_restricted
      .               };
      .           
      .               let mut old_error_set_ancestry = HirIdSet::default();
      9 ( 0.00%)      for mut id in visitor.old_error_set.iter().copied() {
      .                   loop {
      .                       if !old_error_set_ancestry.insert(id) {
      .                           break;
      .                       }
      .                       let parent = tcx.hir().get_parent_node(id);
      .                       if parent == id {
      .                           break;
      .                       }
      .                       id = parent;
      .                   }
      .               }
      .           
      .               // Check for private types and traits in public interfaces.
      8 ( 0.00%)      let mut visitor = PrivateItemsInPublicInterfacesVisitor {
      .                   tcx,
      .                   has_pub_restricted,
      .                   // Only definition IDs are ever searched in `old_error_set_ancestry`,
      .                   // so we can filter away all non-definition IDs at this point.
      .                   old_error_set_ancestry: old_error_set_ancestry
      .                       .into_iter()
      .                       .filter_map(|hir_id| tcx.hir().opt_local_def_id(hir_id))
      .                       .collect(),
      .               };
      6 ( 0.00%)      tcx.hir().visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));
      8 ( 0.00%)  }

 95,549 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs
--------------------------------------------------------------------------------
Ir               

-- line 56 ----------------------------------------
      .           #[derive(Copy, Clone, Debug)]
      .           pub enum RelationDir {
      .               SubtypeOf,
      .               SupertypeOf,
      .               EqTo,
      .           }
      .           
      .           impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {
 54,135 ( 0.01%)      pub fn super_combine_tys<R>(
      .                   &self,
      .                   relation: &mut R,
      .                   a: Ty<'tcx>,
      .                   b: Ty<'tcx>,
      .               ) -> RelateResult<'tcx, Ty<'tcx>>
      .               where
      .                   R: TypeRelation<'tcx>,
      .               {
      .                   let a_is_expected = relation.a_is_expected();
      .           
 49,488 ( 0.01%)          match (a.kind(), b.kind()) {
      .                       // Relate integral variables to other types
      .                       (&ty::Infer(ty::IntVar(a_id)), &ty::Infer(ty::IntVar(b_id))) => {
      .                           self.inner
      .                               .borrow_mut()
      .                               .int_unification_table()
      .                               .unify_var_var(a_id, b_id)
      .                               .map_err(|e| int_unification_error(a_is_expected, e))?;
      .                           Ok(a)
      .                       }
     48 ( 0.00%)              (&ty::Infer(ty::IntVar(v_id)), &ty::Int(v)) => {
     96 ( 0.00%)                  self.unify_integral_variable(a_is_expected, v_id, IntType(v))
      .                       }
      .                       (&ty::Int(v), &ty::Infer(ty::IntVar(v_id))) => {
      .                           self.unify_integral_variable(!a_is_expected, v_id, IntType(v))
      .                       }
     81 ( 0.00%)              (&ty::Infer(ty::IntVar(v_id)), &ty::Uint(v)) => {
    162 ( 0.00%)                  self.unify_integral_variable(a_is_expected, v_id, UintType(v))
      .                       }
      5 ( 0.00%)              (&ty::Uint(v), &ty::Infer(ty::IntVar(v_id))) => {
     10 ( 0.00%)                  self.unify_integral_variable(!a_is_expected, v_id, UintType(v))
      .                       }
      .           
      .                       // Relate floating-point variables to other types
      .                       (&ty::Infer(ty::FloatVar(a_id)), &ty::Infer(ty::FloatVar(b_id))) => {
      .                           self.inner
      .                               .borrow_mut()
      .                               .float_unification_table()
      .                               .unify_var_var(a_id, b_id)
-- line 103 ----------------------------------------
-- line 108 ----------------------------------------
      .                           self.unify_float_variable(a_is_expected, v_id, v)
      .                       }
      .                       (&ty::Float(v), &ty::Infer(ty::FloatVar(v_id))) => {
      .                           self.unify_float_variable(!a_is_expected, v_id, v)
      .                       }
      .           
      .                       // All other cases of inference are errors
      .                       (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {
  2,180 ( 0.00%)                  Err(TypeError::Sorts(ty::relate::expected_found(relation, a, b)))
      .                       }
      .           
 42,240 ( 0.01%)              _ => ty::relate::super_relate_tys(relation, a, b),
      .                   }
 54,135 ( 0.01%)      }
      .           
  1,176 ( 0.00%)      pub fn super_combine_consts<R>(
      .                   &self,
      .                   relation: &mut R,
      .                   a: &'tcx ty::Const<'tcx>,
      .                   b: &'tcx ty::Const<'tcx>,
      .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>>
      .               where
      .                   R: ConstEquateRelation<'tcx>,
      .               {
      .                   debug!("{}.consts({:?}, {:?})", relation.tag(), a, b);
    490 ( 0.00%)          if a == b {
      .                       return Ok(a);
      .                   }
      .           
    285 ( 0.00%)          let a = replace_if_possible(&mut self.inner.borrow_mut().const_unification_table(), a);
    285 ( 0.00%)          let b = replace_if_possible(&mut self.inner.borrow_mut().const_unification_table(), b);
      .           
      .                   let a_is_expected = relation.a_is_expected();
      .           
  1,082 ( 0.00%)          match (a.val, b.val) {
      .                       (
      .                           ty::ConstKind::Infer(InferConst::Var(a_vid)),
      .                           ty::ConstKind::Infer(InferConst::Var(b_vid)),
      .                       ) => {
      .                           self.inner
      .                               .borrow_mut()
      .                               .const_unification_table()
      .                               .unify_var_var(a_vid, b_vid)
-- line 150 ----------------------------------------
-- line 158 ----------------------------------------
      .                           bug!("tried to combine ConstKind::Infer/ConstKind::Infer(InferConst::Var)")
      .                       }
      .           
      .                       (ty::ConstKind::Infer(InferConst::Var(vid)), _) => {
      .                           return self.unify_const_variable(relation.param_env(), vid, b, a_is_expected);
      .                       }
      .           
      .                       (_, ty::ConstKind::Infer(InferConst::Var(vid))) => {
    310 ( 0.00%)                  return self.unify_const_variable(relation.param_env(), vid, a, !a_is_expected);
      .                       }
      2 ( 0.00%)              (ty::ConstKind::Unevaluated(..), _) if self.tcx.lazy_normalization() => {
      .                           // FIXME(#59490): Need to remove the leak check to accommodate
      .                           // escaping bound variables here.
      .                           if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {
      .                               relation.const_equate_obligation(a, b);
      .                           }
      .                           return Ok(b);
      .                       }
      .                       (_, ty::ConstKind::Unevaluated(..)) if self.tcx.lazy_normalization() => {
-- line 176 ----------------------------------------
-- line 179 ----------------------------------------
      .                           if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {
      .                               relation.const_equate_obligation(a, b);
      .                           }
      .                           return Ok(a);
      .                       }
      .                       _ => {}
      .                   }
      .           
    165 ( 0.00%)          ty::relate::super_relate_consts(relation, a, b)
    882 ( 0.00%)      }
      .           
      .               /// Unifies the const variable `target_vid` with the given constant.
      .               ///
      .               /// This also tests if the given const `ct` contains an inference variable which was previously
      .               /// unioned with `target_vid`. If this is the case, inferring `target_vid` to `ct`
      .               /// would result in an infinite type as we continuously replace an inference variable
      .               /// in `ct` with `ct` itself.
      .               ///
-- line 196 ----------------------------------------
-- line 216 ----------------------------------------
      .               /// of `fn bind` (meaning that its substs contain `N`).
      .               ///
      .               /// `bind(arr)` now infers that the type of `arr` must be `[u8; N]`.
      .               /// The assignment `arr = bind(arr)` now tries to equate `N` with `3 + 4`.
      .               ///
      .               /// As `3 + 4` contains `N` in its substs, this must not succeed.
      .               ///
      .               /// See `src/test/ui/const-generics/occurs-check/` for more examples where this is relevant.
  1,178 ( 0.00%)      #[instrument(level = "debug", skip(self))]
      .               fn unify_const_variable(
      .                   &self,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   target_vid: ty::ConstVid<'tcx>,
      .                   ct: &'tcx ty::Const<'tcx>,
      .                   vid_is_expected: bool,
      .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
      .                   let (for_universe, span) = {
      .                       let mut inner = self.inner.borrow_mut();
    248 ( 0.00%)              let variable_table = &mut inner.const_unification_table();
    124 ( 0.00%)              let var_value = variable_table.probe_value(target_vid);
    124 ( 0.00%)              match var_value.val {
      .                           ConstVariableValue::Known { value } => {
      .                               bug!("instantiating {:?} which has a known value {:?}", target_vid, value)
      .                           }
      .                           ConstVariableValue::Unknown { universe } => (universe, var_value.origin.span),
      .                       }
      .                   };
    496 ( 0.00%)          let value = ConstInferUnifier { infcx: self, span, param_env, for_universe, target_vid }
      .                       .relate(ct, ct)?;
      .           
    248 ( 0.00%)          self.inner
      .                       .borrow_mut()
      .                       .const_unification_table()
      .                       .unify_var_value(
      .                           target_vid,
    372 ( 0.00%)                  ConstVarValue {
      .                               origin: ConstVariableOrigin {
      .                                   kind: ConstVariableOriginKind::ConstInference,
      .                                   span: DUMMY_SP,
      .                               },
      .                               val: ConstVariableValue::Known { value },
      .                           },
      .                       )
      .                       .map(|()| value)
      .                       .map_err(|e| const_unification_error(vid_is_expected, e))
      .               }
      .           
    804 ( 0.00%)      fn unify_integral_variable(
      .                   &self,
      .                   vid_is_expected: bool,
      .                   vid: ty::IntVid,
      .                   val: ty::IntVarValue,
      .               ) -> RelateResult<'tcx, Ty<'tcx>> {
  1,072 ( 0.00%)          self.inner
      .                       .borrow_mut()
      .                       .int_unification_table()
      .                       .unify_var_value(vid, Some(val))
      .                       .map_err(|e| int_unification_error(vid_is_expected, e))?;
    268 ( 0.00%)          match val {
     48 ( 0.00%)              IntType(v) => Ok(self.tcx.mk_mach_int(v)),
    306 ( 0.00%)              UintType(v) => Ok(self.tcx.mk_mach_uint(v)),
      .                   }
  1,072 ( 0.00%)      }
      .           
      .               fn unify_float_variable(
      .                   &self,
      .                   vid_is_expected: bool,
      .                   vid: ty::FloatVid,
      .                   val: ty::FloatTy,
      .               ) -> RelateResult<'tcx, Ty<'tcx>> {
      .                   self.inner
-- line 286 ----------------------------------------
-- line 289 ----------------------------------------
      .                       .unify_var_value(vid, Some(ty::FloatVarValue(val)))
      .                       .map_err(|e| float_unification_error(vid_is_expected, e))?;
      .                   Ok(self.tcx.mk_mach_float(val))
      .               }
      .           }
      .           
      .           impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {
      .               pub fn tcx(&self) -> TyCtxt<'tcx> {
 12,856 ( 0.00%)          self.infcx.tcx
      .               }
      .           
      .               pub fn equate<'a>(&'a mut self, a_is_expected: bool) -> Equate<'a, 'infcx, 'tcx> {
      .                   Equate::new(self, a_is_expected)
      .               }
      .           
  4,996 ( 0.00%)      pub fn sub<'a>(&'a mut self, a_is_expected: bool) -> Sub<'a, 'infcx, 'tcx> {
      .                   Sub::new(self, a_is_expected)
  2,498 ( 0.00%)      }
      .           
      .               pub fn lub<'a>(&'a mut self, a_is_expected: bool) -> Lub<'a, 'infcx, 'tcx> {
      .                   Lub::new(self, a_is_expected)
      .               }
      .           
 11,342 ( 0.00%)      pub fn glb<'a>(&'a mut self, a_is_expected: bool) -> Glb<'a, 'infcx, 'tcx> {
      .                   Glb::new(self, a_is_expected)
  5,671 ( 0.00%)      }
      .           
      .               /// Here, `dir` is either `EqTo`, `SubtypeOf`, or `SupertypeOf`.
      .               /// The idea is that we should ensure that the type `a_ty` is equal
      .               /// to, a subtype of, or a supertype of (respectively) the type
      .               /// to which `b_vid` is bound.
      .               ///
      .               /// Since `b_vid` has not yet been instantiated with a type, we
      .               /// will first instantiate `b_vid` with a *generalized* version
      .               /// of `a_ty`. Generalization introduces other inference
      .               /// variables wherever subtyping could occur.
 69,432 ( 0.01%)      pub fn instantiate(
      .                   &mut self,
      .                   a_ty: Ty<'tcx>,
      .                   dir: RelationDir,
      .                   b_vid: ty::TyVid,
      .                   a_is_expected: bool,
      .               ) -> RelateResult<'tcx, ()> {
      .                   use self::RelationDir::*;
      .           
-- line 333 ----------------------------------------
-- line 342 ----------------------------------------
      .                   // - `a_ty == &'x ?1`, where `'x` is some free region and `?1` is an
      .                   //   inference variable,
      .                   // - and `dir` == `SubtypeOf`.
      .                   //
      .                   // Then the generalized form `b_ty` would be `&'?2 ?3`, where
      .                   // `'?2` and `?3` are fresh region/type inference
      .                   // variables. (Down below, we will relate `a_ty <: b_ty`,
      .                   // adding constraints like `'x: '?2` and `?1 <: ?3`.)
  6,312 ( 0.00%)          let Generalization { ty: b_ty, needs_wf } = self.generalize(a_ty, b_vid, dir)?;
      .                   debug!(
      .                       "instantiate(a_ty={:?}, dir={:?}, b_vid={:?}, generalized b_ty={:?})",
      .                       a_ty, dir, b_vid, b_ty
      .                   );
 44,184 ( 0.01%)          self.infcx.inner.borrow_mut().type_variables().instantiate(b_vid, b_ty);
      .           
  6,312 ( 0.00%)          if needs_wf {
      .                       self.obligations.push(Obligation::new(
      .                           self.trace.cause.clone(),
      .                           self.param_env,
      .                           ty::Binder::dummy(ty::PredicateKind::WellFormed(b_ty.into()))
      .                               .to_predicate(self.infcx.tcx),
      .                       ));
      .                   }
      .           
      .                   // Finally, relate `b_ty` to `a_ty`, as described in previous comment.
      .                   //
      .                   // FIXME(#16847): This code is non-ideal because all these subtype
      .                   // relations wind up attributed to the same spans. We need
      .                   // to associate causes/spans with each of the relations in
      .                   // the stack to get this right.
 24,296 ( 0.01%)          match dir {
 27,105 ( 0.01%)              EqTo => self.equate(a_is_expected).relate(a_ty, b_ty),
  2,380 ( 0.00%)              SubtypeOf => self.sub(a_is_expected).relate(a_ty, b_ty),
    830 ( 0.00%)              SupertypeOf => self.sub(a_is_expected).relate_with_variance(
      .                           ty::Contravariant,
      .                           ty::VarianceDiagInfo::default(),
      .                           a_ty,
      .                           b_ty,
      .                       ),
      .                   }?;
      .           
  6,312 ( 0.00%)          Ok(())
 50,496 ( 0.01%)      }
      .           
      .               /// Attempts to generalize `ty` for the type variable `for_vid`.
      .               /// This checks for cycle -- that is, whether the type `ty`
      .               /// references `for_vid`. The `dir` is the "direction" for which we
      .               /// a performing the generalization (i.e., are we producing a type
      .               /// that can be used as a supertype etc).
      .               ///
      .               /// Preconditions:
-- line 392 ----------------------------------------
-- line 401 ----------------------------------------
      .                   debug!("generalize(ty={:?}, for_vid={:?}, dir={:?}", ty, for_vid, dir);
      .                   // Determine the ambient variance within which `ty` appears.
      .                   // The surrounding equation is:
      .                   //
      .                   //     ty [op] ty2
      .                   //
      .                   // where `op` is either `==`, `<:`, or `:>`. This maps quite
      .                   // naturally.
 25,248 ( 0.01%)          let ambient_variance = match dir {
      .                       RelationDir::EqTo => ty::Invariant,
      .                       RelationDir::SubtypeOf => ty::Covariant,
      .                       RelationDir::SupertypeOf => ty::Contravariant,
      .                   };
      .           
      .                   debug!("generalize: ambient_variance = {:?}", ambient_variance);
      .           
 63,120 ( 0.01%)          let for_universe = match self.infcx.inner.borrow_mut().type_variables().probe(for_vid) {
      .                       v @ TypeVariableValue::Known { .. } => {
      .                           bug!("instantiating {:?} which has a known value {:?}", for_vid, v,)
      .                       }
      .                       TypeVariableValue::Unknown { universe } => universe,
      .                   };
      .           
      .                   debug!("generalize: for_universe = {:?}", for_universe);
      .                   debug!("generalize: trace = {:?}", self.trace);
      .           
 63,120 ( 0.01%)          let mut generalize = Generalizer {
      .                       infcx: self.infcx,
      .                       cause: &self.trace.cause,
      .                       for_vid_sub_root: self.infcx.inner.borrow_mut().type_variables().sub_root_var(for_vid),
      .                       for_universe,
      .                       ambient_variance,
      .                       needs_wf: false,
      .                       root_ty: ty,
  6,312 ( 0.00%)              param_env: self.param_env,
      .                       cache: SsoHashMap::new(),
      .                   };
      .           
 12,624 ( 0.00%)          let ty = match generalize.relate(ty, ty) {
  6,312 ( 0.00%)              Ok(ty) => ty,
      .                       Err(e) => {
      .                           debug!("generalize: failure {:?}", e);
      .                           return Err(e);
      .                       }
      .                   };
  6,312 ( 0.00%)          let needs_wf = generalize.needs_wf;
      .                   debug!("generalize: success {{ {:?}, {:?} }}", ty, needs_wf);
      .                   Ok(Generalization { ty, needs_wf })
      .               }
      .           
      .               pub fn add_const_equate_obligation(
      .                   &mut self,
      .                   a_is_expected: bool,
      .                   a: &'tcx ty::Const<'tcx>,
-- line 454 ----------------------------------------
-- line 528 ----------------------------------------
      .               /// will force the calling code to check that `WF(Foo<?C, ?D>)`
      .               /// holds, which in turn implies that `?C::Item == ?D`. So once
      .               /// `?C` is constrained, that should suffice to restrict `?D`.
      .               needs_wf: bool,
      .           }
      .           
      .           impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {
      .               fn tcx(&self) -> TyCtxt<'tcx> {
 52,314 ( 0.01%)          self.infcx.tcx
      .               }
      .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
    178 ( 0.00%)          self.param_env
      .               }
      .           
      .               fn tag(&self) -> &'static str {
      .                   "Generalizer"
      .               }
      .           
      .               fn a_is_expected(&self) -> bool {
      .                   true
      .               }
      .           
     55 ( 0.00%)      fn binders<T>(
      .                   &mut self,
      .                   a: ty::Binder<'tcx, T>,
      .                   b: ty::Binder<'tcx, T>,
      .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>
      .               where
      .                   T: Relate<'tcx>,
      .               {
     99 ( 0.00%)          Ok(a.rebind(self.relate(a.skip_binder(), b.skip_binder())?))
     55 ( 0.00%)      }
      .           
278,366 ( 0.06%)      fn relate_item_substs(
      .                   &mut self,
      .                   item_def_id: DefId,
      .                   a_subst: SubstsRef<'tcx>,
      .                   b_subst: SubstsRef<'tcx>,
      .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
 25,306 ( 0.01%)          if self.ambient_variance == ty::Variance::Invariant {
      .                       // Avoid fetching the variance if we are in an invariant
      .                       // context; no need, and it can induce dependency cycles
      .                       // (e.g., #41849).
 24,855 ( 0.01%)              relate::relate_substs(self, None, a_subst, b_subst)
      .                   } else {
      .                       let tcx = self.tcx();
      .                       let opt_variances = tcx.variances_of(item_def_id);
  2,255 ( 0.00%)              relate::relate_substs(self, Some((item_def_id, &opt_variances)), a_subst, b_subst)
      .                   }
227,754 ( 0.05%)      }
      .           
  5,319 ( 0.00%)      fn relate_with_variance<T: Relate<'tcx>>(
      .                   &mut self,
      .                   variance: ty::Variance,
      .                   _info: ty::VarianceDiagInfo<'tcx>,
      .                   a: T,
      .                   b: T,
      .               ) -> RelateResult<'tcx, T> {
      .                   let old_ambient_variance = self.ambient_variance;
164,912 ( 0.03%)          self.ambient_variance = self.ambient_variance.xform(variance);
      .           
      .                   let result = self.relate(a, b);
 32,855 ( 0.01%)          self.ambient_variance = old_ambient_variance;
      .                   result
  4,137 ( 0.00%)      }
      .           
349,200 ( 0.07%)      fn tys(&mut self, t: Ty<'tcx>, t2: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {
 38,800 ( 0.01%)          assert_eq!(t, t2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
      .           
232,800 ( 0.05%)          if let Some(result) = self.cache.get(&t) {
 39,340 ( 0.01%)              return result.clone();
      .                   }
      .                   debug!("generalize: t={:?}", t);
      .           
      .                   // Check to see whether the type we are generalizing references
      .                   // any other type variable related to `vid` via
      .                   // subtyping. This is basically our "occurs check", preventing
      .                   // us from creating infinitely sized types.
 87,475 ( 0.02%)          let result = match *t.kind() {
     72 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
     72 ( 0.00%)                  let vid = self.infcx.inner.borrow_mut().type_variables().root_var(vid);
     72 ( 0.00%)                  let sub_vid = self.infcx.inner.borrow_mut().type_variables().sub_root_var(vid);
     72 ( 0.00%)                  if sub_vid == self.for_vid_sub_root {
      .                               // If sub-roots are equal, then `for_vid` and
      .                               // `vid` are related via subtyping.
      .                               Err(TypeError::CyclicTy(self.root_ty))
      .                           } else {
    432 ( 0.00%)                      let probe = self.infcx.inner.borrow_mut().type_variables().probe(vid);
    144 ( 0.00%)                      match probe {
      .                                   TypeVariableValue::Known { value: u } => {
      .                                       debug!("generalize: known value {:?}", u);
      .                                       self.relate(u, u)
      .                                   }
      .                                   TypeVariableValue::Unknown { universe } => {
    235 ( 0.00%)                              match self.ambient_variance {
      .                                           // Invariant: no need to make a fresh type variable.
      .                                           ty::Invariant => {
    130 ( 0.00%)                                      if self.for_universe.can_name(universe) {
     60 ( 0.00%)                                          return Ok(t);
      .                                               }
      .                                           }
      .           
      .                                           // Bivariant: make a fresh var, but we
      .                                           // may need a WF predicate. See
      .                                           // comment on `needs_wf` field for
      .                                           // more info.
      .                                           ty::Bivariant => self.needs_wf = true,
      .           
      .                                           // Co/contravariant: this will be
      .                                           // sufficiently constrained later on.
      .                                           ty::Covariant | ty::Contravariant => (),
      .                                       }
      .           
      .                                       let origin =
    288 ( 0.00%)                                  *self.infcx.inner.borrow_mut().type_variables().var_origin(vid);
    224 ( 0.00%)                              let new_var_id = self
      .                                           .infcx
      .                                           .inner
      .                                           .borrow_mut()
      .                                           .type_variables()
    224 ( 0.00%)                                  .new_var(self.for_universe, origin);
      .                                       let u = self.tcx().mk_ty_var(new_var_id);
      .           
      .                                       // Record that we replaced `vid` with `new_var_id` as part of a generalization
      .                                       // operation. This is needed to detect cyclic types. To see why, see the
      .                                       // docs in the `type_variables` module.
    160 ( 0.00%)                              self.infcx.inner.borrow_mut().type_variables().sub(vid, new_var_id);
      .                                       debug!("generalize: replacing original vid={:?} with new={:?}", vid, u);
     64 ( 0.00%)                              Ok(u)
      .                                   }
      .                               }
      .                           }
      .                       }
      .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => {
      .                           // No matter what mode we are in,
      .                           // integer/floating-point types must be equal to be
      .                           // relatable.
     37 ( 0.00%)                  Ok(t)
      .                       }
 86,568 ( 0.02%)              _ => relate::super_relate_tys(self, t, t),
      .                   };
      .           
289,500 ( 0.06%)          self.cache.insert(t, result.clone());
173,700 ( 0.04%)          return result;
349,200 ( 0.07%)      }
      .           
  6,936 ( 0.00%)      fn regions(
      .                   &mut self,
      .                   r: ty::Region<'tcx>,
      .                   r2: ty::Region<'tcx>,
      .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
    841 ( 0.00%)          assert_eq!(r, r2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
      .           
      .                   debug!("generalize: regions r={:?}", r);
      .           
  1,682 ( 0.00%)          match *r {
      .                       // Never make variables for regions bound within the type itself,
      .                       // nor for erased regions.
      .                       ty::ReLateBound(..) | ty::ReErased => {
      .                           return Ok(r);
      .                       }
      .           
      .                       ty::RePlaceholder(..)
      .                       | ty::ReVar(..)
-- line 691 ----------------------------------------
-- line 697 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   // If we are in an invariant context, we can re-use the region
      .                   // as is, unless it happens to be in some universe that we
      .                   // can't name. (In the case of a region *variable*, we could
      .                   // use it if we promoted it into our universe, but we don't
      .                   // bother.)
  1,660 ( 0.00%)          if let ty::Invariant = self.ambient_variance {
  1,761 ( 0.00%)              let r_universe = self.infcx.universe_of_region(r);
  4,105 ( 0.00%)              if self.for_universe.can_name(r_universe) {
      .                           return Ok(r);
      .                       }
      .                   }
      .           
      .                   // FIXME: This is non-ideal because we don't give a
      .                   // very descriptive origin for this region variable.
  2,466 ( 0.00%)          Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.cause.span), self.for_universe))
  6,936 ( 0.00%)      }
      .           
  1,602 ( 0.00%)      fn consts(
      .                   &mut self,
      .                   c: &'tcx ty::Const<'tcx>,
      .                   c2: &'tcx ty::Const<'tcx>,
      .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
    533 ( 0.00%)          assert_eq!(c, c2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
      .           
      .                   match c.val {
      .                       ty::ConstKind::Infer(InferConst::Var(vid)) => {
      .                           let mut inner = self.infcx.inner.borrow_mut();
      .                           let variable_table = &mut inner.const_unification_table();
      .                           let var_value = variable_table.probe_value(vid);
      .                           match var_value.val {
      .                               ConstVariableValue::Known { value: u } => {
-- line 730 ----------------------------------------
-- line 740 ----------------------------------------
      .                                           val: ConstVariableValue::Unknown { universe: self.for_universe },
      .                                       });
      .                                       Ok(self.tcx().mk_const_var(new_var_id, c.ty))
      .                                   }
      .                               }
      .                           }
      .                       }
      .                       ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })
      1 ( 0.00%)                  if self.tcx().lazy_normalization() =>
      .                       {
      .                           assert_eq!(promoted, None);
      .                           let substs = self.relate_with_variance(
      .                               ty::Variance::Invariant,
      .                               ty::VarianceDiagInfo::default(),
      .                               substs,
      .                               substs,
      .                           )?;
      .                           Ok(self.tcx().mk_const(ty::Const {
      .                               ty: c.ty,
      .                               val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),
      .                           }))
      .                       }
    890 ( 0.00%)              _ => relate::super_relate_consts(self, c, c),
      .                   }
  1,602 ( 0.00%)      }
      .           }
      .           
      .           pub trait ConstEquateRelation<'tcx>: TypeRelation<'tcx> {
      .               /// Register an obligation that both constants must be equal to each other.
      .               ///
      .               /// If they aren't equal then the relation doesn't hold.
      .               fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>);
      .           }
-- line 772 ----------------------------------------
-- line 824 ----------------------------------------
      .               target_vid: ty::ConstVid<'tcx>,
      .           }
      .           
      .           // We use `TypeRelation` here to propagate `RelateResult` upwards.
      .           //
      .           // Both inputs are expected to be the same.
      .           impl<'tcx> TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {
      .               fn tcx(&self) -> TyCtxt<'tcx> {
    248 ( 0.00%)          self.infcx.tcx
      .               }
      .           
      .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
     62 ( 0.00%)          self.param_env
      .               }
      .           
      .               fn tag(&self) -> &'static str {
      .                   "ConstInferUnifier"
      .               }
      .           
      .               fn a_is_expected(&self) -> bool {
      .                   true
-- line 844 ----------------------------------------
-- line 937 ----------------------------------------
      .                       return Ok(r);
      .                   } else {
      .                       // FIXME: This is non-ideal because we don't give a
      .                       // very descriptive origin for this region variable.
      .                       Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.span), self.for_universe))
      .                   }
      .               }
      .           
  1,178 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self))]
      .               fn consts(
      .                   &mut self,
      .                   c: &'tcx ty::Const<'tcx>,
      .                   _c: &'tcx ty::Const<'tcx>,
      .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
      .                   debug_assert_eq!(c, _c);
      .                   debug!("ConstInferUnifier: c={:?}", c);
      .           
    310 ( 0.00%)          match c.val {
      .                       ty::ConstKind::Infer(InferConst::Var(vid)) => {
      .                           // Check if the current unification would end up
      .                           // unifying `target_vid` with a const which contains
      .                           // an inference variable which is unioned with `target_vid`.
      .                           //
      .                           // Not doing so can easily result in stack overflows.
      .                           if self
      .                               .infcx
-- line 962 ----------------------------------------
-- line 1000 ----------------------------------------
      .                               substs,
      .                               substs,
      .                           )?;
      .                           Ok(self.tcx().mk_const(ty::Const {
      .                               ty: c.ty,
      .                               val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),
      .                           }))
      .                       }
    310 ( 0.00%)              _ => relate::super_relate_consts(self, c, c),
      .                   }
      .               }
      .           }

149,678 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 71 ----------------------------------------
      .               fn default() -> FxHasher {
      .                   FxHasher { hash: 0 }
      .               }
      .           }
      .           
      .           impl FxHasher {
      .               #[inline]
      .               fn add_to_hash(&mut self, i: usize) {
384,028 ( 0.08%)          self.hash = self.hash.rotate_left(5).bitxor(i).wrapping_mul(K);
      .               }
      .           }
      .           
      .           impl Hasher for FxHasher {
      .               #[inline]
  2,987 ( 0.00%)      fn write(&mut self, mut bytes: &[u8]) {
      .                   #[cfg(target_pointer_width = "32")]
      .                   let read_usize = |bytes: &[u8]| u32::from_ne_bytes(bytes[..4].try_into().unwrap());
      .                   #[cfg(target_pointer_width = "64")]
      .                   let read_usize = |bytes: &[u8]| u64::from_ne_bytes(bytes[..8].try_into().unwrap());
      .           
 50,147 ( 0.01%)          let mut hash = FxHasher { hash: self.hash };
      .                   assert!(size_of::<usize>() <= 8);
480,622 ( 0.10%)          while bytes.len() >= size_of::<usize>() {
      .                       hash.add_to_hash(read_usize(bytes) as usize);
      .                       bytes = &bytes[size_of::<usize>()..];
      .                   }
 99,490 ( 0.02%)          if (size_of::<usize>() > 4) && (bytes.len() >= 4) {
      .                       hash.add_to_hash(u32::from_ne_bytes(bytes[..4].try_into().unwrap()) as usize);
      .                       bytes = &bytes[4..];
      .                   }
 99,490 ( 0.02%)          if (size_of::<usize>() > 2) && bytes.len() >= 2 {
      .                       hash.add_to_hash(u16::from_ne_bytes(bytes[..2].try_into().unwrap()) as usize);
      .                       bytes = &bytes[2..];
      .                   }
108,387 ( 0.02%)          if (size_of::<usize>() > 1) && bytes.len() >= 1 {
 20,111 ( 0.00%)              hash.add_to_hash(bytes[0] as usize);
      .                   }
  3,861 ( 0.00%)          self.hash = hash.hash;
  2,987 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
     66 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u16(&mut self, i: u16) {
     14 ( 0.00%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[inline]
      .               fn write_u32(&mut self, i: u32) {
429,356 ( 0.09%)          self.add_to_hash(i as usize);
      .               }
      .           
      .               #[cfg(target_pointer_width = "32")]
      .               #[inline]
      .               fn write_u64(&mut self, i: u64) {
      .                   self.add_to_hash(i as usize);
      .                   self.add_to_hash((i >> 32) as usize);
      .               }
-- line 131 ----------------------------------------

      1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
    6,077 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
  119,710 ( 0.03%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
      133 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
    1,085 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
  104,180 ( 0.02%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
    1,276 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
       26 ( 0.00%)          self.position += bytes;
       26 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
    1,740 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
    2,966 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
   38,996 ( 0.01%)      fn read_u32(&mut self) -> u32 {
  169,599 ( 0.04%)          read_leb128!(self, read_u32_leb128)
   77,992 ( 0.02%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  577,115 ( 0.12%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   82,445 ( 0.02%)          let value = u16::from_le_bytes(bytes);
  164,890 ( 0.03%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
1,966,916 ( 0.41%)          let value = self.data[self.position];
  385,300 ( 0.08%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
  205,521 ( 0.04%)      fn read_usize(&mut self) -> usize {
  205,531 ( 0.04%)          read_leb128!(self, read_usize_leb128)
  411,042 ( 0.09%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
   12,797 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
   32,793 ( 0.01%)          let len = self.read_usize();
  169,882 ( 0.04%)          let sentinel = self.data[self.position + len];
   42,478 ( 0.01%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
  106,195 ( 0.02%)          self.position += len + 1;
   34,692 ( 0.01%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
      107 ( 0.00%)          let start = self.position;
      749 ( 0.00%)          self.position += s.len();
      107 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

  526,754 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 208 ----------------------------------------
      .               /// There is no built-in impl. There may be some other
      .               /// candidate (a where-clause or user-defined impl).
      .               None,
      .               /// It is unknown whether there is an impl.
      .               Ambiguous,
      .           }
      .           
      .           impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {
 24,306 ( 0.01%)      pub fn new(infcx: &'cx InferCtxt<'cx, 'tcx>) -> SelectionContext<'cx, 'tcx> {
270,353 ( 0.06%)          SelectionContext {
      .                       infcx,
 43,381 ( 0.01%)              freshener: infcx.freshener_keep_static(),
      .                       intercrate: false,
      .                       intercrate_ambiguity_causes: None,
      .                       allow_negative_impls: false,
      .                       query_mode: TraitQueryMode::Standard,
      .                   }
 20,255 ( 0.00%)      }
      .           
      .               pub fn intercrate(infcx: &'cx InferCtxt<'cx, 'tcx>) -> SelectionContext<'cx, 'tcx> {
      .                   SelectionContext {
      .                       infcx,
      .                       freshener: infcx.freshener_keep_static(),
      .                       intercrate: true,
      .                       intercrate_ambiguity_causes: None,
      .                       allow_negative_impls: false,
-- line 233 ----------------------------------------
-- line 245 ----------------------------------------
      .                       freshener: infcx.freshener_keep_static(),
      .                       intercrate: false,
      .                       intercrate_ambiguity_causes: None,
      .                       allow_negative_impls,
      .                       query_mode: TraitQueryMode::Standard,
      .                   }
      .               }
      .           
  4,984 ( 0.00%)      pub fn with_query_mode(
      .                   infcx: &'cx InferCtxt<'cx, 'tcx>,
      .                   query_mode: TraitQueryMode,
      .               ) -> SelectionContext<'cx, 'tcx> {
      .                   debug!(?query_mode, "with_query_mode");
  9,968 ( 0.00%)          SelectionContext {
      .                       infcx,
    623 ( 0.00%)              freshener: infcx.freshener_keep_static(),
      .                       intercrate: false,
      .                       intercrate_ambiguity_causes: None,
      .                       allow_negative_impls: false,
      .                       query_mode,
      .                   }
  3,738 ( 0.00%)      }
      .           
      .               /// Enables tracking of intercrate ambiguity causes. These are
      .               /// used in coherence to give improved diagnostics. We don't do
      .               /// this until we detect a coherence error because it can lead to
      .               /// false overflow results (#47139) and because it costs
      .               /// computation time.
      .               pub fn enable_tracking_intercrate_ambiguity_causes(&mut self) {
      .                   assert!(self.intercrate);
-- line 274 ----------------------------------------
-- line 281 ----------------------------------------
      .               /// was enabled and disables tracking at the same time. If
      .               /// tracking is not enabled, just returns an empty vector.
      .               pub fn take_intercrate_ambiguity_causes(&mut self) -> Vec<IntercrateAmbiguityCause> {
      .                   assert!(self.intercrate);
      .                   self.intercrate_ambiguity_causes.take().unwrap_or_default()
      .               }
      .           
      .               pub fn infcx(&self) -> &'cx InferCtxt<'cx, 'tcx> {
124,253 ( 0.03%)          self.infcx
  3,771 ( 0.00%)      }
      .           
      .               pub fn tcx(&self) -> TyCtxt<'tcx> {
132,722 ( 0.03%)          self.infcx.tcx
      .               }
      .           
      .               pub fn is_intercrate(&self) -> bool {
 12,003 ( 0.00%)          self.intercrate
      .               }
      .           
      .               ///////////////////////////////////////////////////////////////////////////
      .               // Selection
      .               //
      .               // The selection phase tries to identify *how* an obligation will
      .               // be resolved. For example, it will identify which impl or
      .               // parameter bound is to be used. The process can be inconclusive
-- line 305 ----------------------------------------
-- line 309 ----------------------------------------
      .               // 1. If no applicable impl or parameter bound can be found.
      .               // 2. If the output type parameters in the obligation do not match
      .               //    those specified by the impl/bound. For example, if the obligation
      .               //    is `Vec<Foo>: Iterable<Bar>`, but the impl specifies
      .               //    `impl<T> Iterable<T> for Vec<T>`, than an error would result.
      .           
      .               /// Attempts to satisfy the obligation. If successful, this will affect the surrounding
      .               /// type environment by performing unification.
 21,924 ( 0.00%)      #[instrument(level = "debug", skip(self))]
 28,188 ( 0.01%)      pub fn select(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .               ) -> SelectionResult<'tcx, Selection<'tcx>> {
 22,666 ( 0.00%)          let candidate = match self.select_from_obligation(obligation) {
      .                       Err(SelectionError::Overflow) => {
      .                           // In standard mode, overflow must have been caught and reported
      .                           // earlier.
      .                           assert!(self.query_mode == TraitQueryMode::Canonical);
      .                           return Err(SelectionError::Overflow);
      .                       }
      .                       Err(SelectionError::Ambiguous(_)) => {
      .                           return Ok(None);
      .                       }
      .                       Err(e) => {
  4,508 ( 0.00%)                  return Err(e);
      .                       }
      .                       Ok(None) => {
  1,719 ( 0.00%)                  return Ok(None);
      .                       }
 13,128 ( 0.00%)              Ok(Some(candidate)) => candidate,
      .                   };
      .           
 21,906 ( 0.00%)          match self.confirm_candidate(obligation, candidate) {
      .                       Err(SelectionError::Overflow) => {
      .                           assert!(self.query_mode == TraitQueryMode::Canonical);
      .                           Err(SelectionError::Overflow)
      .                       }
    169 ( 0.00%)              Err(e) => Err(e),
      .                       Ok(candidate) => {
      .                           debug!(?candidate, "confirmed");
 26,100 ( 0.01%)                  Ok(Some(candidate))
      .                       }
      .                   }
      .               }
      .           
 31,320 ( 0.01%)      crate fn select_from_obligation(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
      .                   debug_assert!(!obligation.predicate.has_escaping_bound_vars());
      .           
      .                   let pec = &ProvisionalEvaluationCache::default();
      .                   let stack = self.push_stack(TraitObligationStackList::empty(pec), obligation);
      .           
  6,264 ( 0.00%)          self.candidate_from_obligation(&stack)
 28,188 ( 0.01%)      }
      .           
      .               ///////////////////////////////////////////////////////////////////////////
      .               // EVALUATION
      .               //
      .               // Tests whether an obligation can be selected or whether an impl
      .               // can be applied to particular types. It skips the "confirmation"
      .               // step and hence completely ignores output type parameters.
      .               //
-- line 372 ----------------------------------------
-- line 384 ----------------------------------------
      .                   self.evaluate_root_obligation(obligation)
      .                       .expect("Overflow should be caught earlier in standard query mode")
      .                       .may_apply()
      .               }
      .           
      .               /// Evaluates whether the obligation `obligation` can be satisfied
      .               /// and returns an `EvaluationResult`. This is meant for the
      .               /// *initial* call.
  1,246 ( 0.00%)      pub fn evaluate_root_obligation(
      .                   &mut self,
      .                   obligation: &PredicateObligation<'tcx>,
      .               ) -> Result<EvaluationResult, OverflowError> {
      .                   self.evaluation_probe(|this| {
  1,869 ( 0.00%)              this.evaluate_predicate_recursively(
      .                           TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),
      .                           obligation.clone(),
      .                       )
      .                   })
  1,246 ( 0.00%)      }
      .           
      .               fn evaluation_probe(
      .                   &mut self,
      .                   op: impl FnOnce(&mut Self) -> Result<EvaluationResult, OverflowError>,
      .               ) -> Result<EvaluationResult, OverflowError> {
 10,801 ( 0.00%)          self.infcx.probe(|snapshot| -> Result<EvaluationResult, OverflowError> {
  1,246 ( 0.00%)              let result = op(self)?;
      .           
 10,185 ( 0.00%)              match self.infcx.leak_check(true, snapshot) {
      .                           Ok(()) => {}
      .                           Err(_) => return Ok(EvaluatedToErr),
      .                       }
      .           
  7,275 ( 0.00%)              match self.infcx.region_constraints_added_in_snapshot(snapshot) {
      .                           None => Ok(result),
      .                           Some(_) => Ok(result.max(EvaluatedToOkModuloRegions)),
      .                       }
      .                   })
      .               }
      .           
      .               /// Evaluates the predicates in `predicates` recursively. Note that
      .               /// this applies projections in the predicates, and therefore
      .               /// is run within an inference probe.
 16,360 ( 0.00%)      #[instrument(skip(self, stack), level = "debug")]
      .               fn evaluate_predicates_recursively<'o, I>(
      .                   &mut self,
      .                   stack: TraitObligationStackList<'o, 'tcx>,
      .                   predicates: I,
      .               ) -> Result<EvaluationResult, OverflowError>
      .               where
      .                   I: IntoIterator<Item = PredicateObligation<'tcx>> + std::fmt::Debug,
      .               {
      .                   let mut result = EvaluatedToOk;
 23,320 ( 0.00%)          for obligation in predicates {
  7,852 ( 0.00%)              let eval = self.evaluate_predicate_recursively(stack, obligation.clone())?;
  3,926 ( 0.00%)              if let EvaluatedToErr = eval {
      .                           // fast-path - EvaluatedToErr is the top of the lattice,
      .                           // so we don't need to look on the other predicates.
      .                           return Ok(EvaluatedToErr);
      .                       } else {
      .                           result = cmp::max(result, eval);
      .                       }
      .                   }
      .                   Ok(result)
      .               }
      .           
 25,860 ( 0.01%)      #[instrument(
      .                   level = "debug",
      .                   skip(self, previous_stack),
      .                   fields(previous_stack = ?previous_stack.head())
 23,274 ( 0.00%)      )]
      .               fn evaluate_predicate_recursively<'o>(
      .                   &mut self,
      .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
      .                   obligation: PredicateObligation<'tcx>,
      .               ) -> Result<EvaluationResult, OverflowError> {
      .                   // `previous_stack` stores a `TraitObligation`, while `obligation` is
      .                   // a `PredicateObligation`. These are distinct types, so we can't
      .                   // use any `Option` combinator method that would force them to be
      .                   // the same.
  5,172 ( 0.00%)          match previous_stack.head() {
  3,926 ( 0.00%)              Some(h) => self.check_recursion_limit(&obligation, h.obligation)?,
    623 ( 0.00%)              None => self.check_recursion_limit(&obligation, &obligation)?,
      .                   }
      .           
 15,516 ( 0.00%)          let result = ensure_sufficient_stack(|| {
  2,586 ( 0.00%)              let bound_predicate = obligation.predicate.kind();
 25,860 ( 0.01%)              match bound_predicate.skip_binder() {
      .                           ty::PredicateKind::Trait(t) => {
      .                               let t = bound_predicate.rebind(t);
      .                               debug_assert!(!t.has_escaping_bound_vars());
      .                               let obligation = obligation.with(t);
 38,745 ( 0.01%)                      self.evaluate_trait_predicate_recursively(previous_stack, obligation)
      .                           }
      .           
      .                           ty::PredicateKind::Subtype(p) => {
      .                               let p = bound_predicate.rebind(p);
      .                               // Does this code ever run?
     15 ( 0.00%)                      match self.infcx.subtype_predicate(&obligation.cause, obligation.param_env, p) {
      .                                   Some(Ok(InferOk { mut obligations, .. })) => {
      .                                       self.add_depth(obligations.iter_mut(), obligation.recursion_depth);
      .                                       self.evaluate_predicates_recursively(
      .                                           previous_stack,
      .                                           obligations.into_iter(),
      .                                       )
      .                                   }
      .                                   Some(Err(_)) => Ok(EvaluatedToErr),
-- line 489 ----------------------------------------
-- line 545 ----------------------------------------
      .                               } else {
      .                                   Ok(EvaluatedToErr)
      .                               }
      .                           }
      .           
      .                           ty::PredicateKind::Projection(data) => {
      .                               let data = bound_predicate.rebind(data);
      .                               let project_obligation = obligation.with(data);
     12 ( 0.00%)                      match project::poly_project_and_unify_type(self, &project_obligation) {
     10 ( 0.00%)                          Ok(Ok(Some(mut subobligations))) => {
      .                                       'compute_res: {
      .                                           // If we've previously marked this projection as 'complete', thne
      .                                           // use the final cached result (either `EvaluatedToOk` or
      .                                           // `EvaluatedToOkModuloRegions`), and skip re-evaluating the
      .                                           // sub-obligations.
      8 ( 0.00%)                                  if let Some(key) =
     18 ( 0.00%)                                      ProjectionCacheKey::from_poly_projection_predicate(self, data)
      .                                           {
     16 ( 0.00%)                                      if let Some(cached_res) = self
      .                                                   .infcx
      .                                                   .inner
      .                                                   .borrow_mut()
      .                                                   .projection_cache()
      .                                                   .is_complete(key)
      .                                               {
      .                                                   break 'compute_res Ok(cached_res);
      .                                               }
      .                                           }
      .           
      4 ( 0.00%)                                  self.add_depth(
      .                                               subobligations.iter_mut(),
      4 ( 0.00%)                                      obligation.recursion_depth,
      .                                           );
      4 ( 0.00%)                                  let res = self.evaluate_predicates_recursively(
      6 ( 0.00%)                                      previous_stack,
     10 ( 0.00%)                                      subobligations,
      .                                           );
      8 ( 0.00%)                                  if let Ok(res) = res {
      4 ( 0.00%)                                      if res == EvaluatedToOk || res == EvaluatedToOkModuloRegions {
      8 ( 0.00%)                                          if let Some(key) =
      2 ( 0.00%)                                              ProjectionCacheKey::from_poly_projection_predicate(
     14 ( 0.00%)                                                  self, data,
      .                                                       )
      .                                                   {
      .                                                       // If the result is something that we can cache, then mark this
      .                                                       // entry as 'complete'. This will allow us to skip evaluating the
      .                                                       // suboligations at all the next time we evaluate the projection
      .                                                       // predicate.
     14 ( 0.00%)                                              self.infcx
      .                                                           .inner
      .                                                           .borrow_mut()
      .                                                           .projection_cache()
      .                                                           .complete(key, res);
      .                                                   }
      .                                               }
      .                                           }
      .                                           res
-- line 601 ----------------------------------------
-- line 693 ----------------------------------------
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
      .                               bug!("TypeWellFormedFromEnv is only used for chalk")
      .                           }
      .                       }
  2,586 ( 0.00%)          });
      .           
      .                   debug!("finished: {:?} from {:?}", result, obligation);
      .           
      .                   result
      .               }
      .           
 54,243 ( 0.01%)      #[instrument(skip(self, previous_stack), level = "debug")]
      .               fn evaluate_trait_predicate_recursively<'o>(
      .                   &mut self,
      .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
      .                   mut obligation: TraitObligation<'tcx>,
      .               ) -> Result<EvaluationResult, OverflowError> {
  5,166 ( 0.00%)          if !self.intercrate
      .                       && obligation.is_global()
      .                       && obligation.param_env.caller_bounds().iter().all(|bound| bound.needs_subst())
      .                   {
      .                       // If a param env has no global bounds, global obligations do not
      .                       // depend on its particular value in order to work, so we can clear
      .                       // out the param env and get better caching.
      .                       debug!("in global");
  4,854 ( 0.00%)              obligation.param_env = obligation.param_env.without_caller_bounds();
      .                   }
      .           
      .                   let stack = self.push_stack(previous_stack, &obligation);
      .                   let mut fresh_trait_pred = stack.fresh_trait_pred;
  5,166 ( 0.00%)          let mut param_env = obligation.param_env;
      .           
      .                   fresh_trait_pred = fresh_trait_pred.map_bound(|mut pred| {
  2,583 ( 0.00%)              pred.remap_constness(self.tcx(), &mut param_env);
 30,996 ( 0.01%)              pred
      .                   });
      .           
      .                   debug!(?fresh_trait_pred);
      .           
  1,698 ( 0.00%)          if let Some(result) = self.check_evaluation_cache(param_env, fresh_trait_pred) {
      .                       debug!(?result, "CACHE HIT");
      .                       return Ok(result);
      .                   }
      .           
      .                   if let Some(result) = stack.cache().get_provisional(fresh_trait_pred) {
      .                       debug!(?result, "PROVISIONAL CACHE HIT");
      .                       stack.update_reached_depth(result.reached_depth);
      .                       return Ok(result.result);
-- line 744 ----------------------------------------
-- line 748 ----------------------------------------
      .                   // stack. If so, we don't want to insert the result into the
      .                   // main cache (it is cycle dependent) nor the provisional
      .                   // cache (which is meant for things that have completed but
      .                   // for a "backedge" -- this result *is* the backedge).
      .                   if let Some(cycle_result) = self.check_evaluation_cycle(&stack) {
      .                       return Ok(cycle_result);
      .                   }
      .           
  7,641 ( 0.00%)          let (result, dep_node) = self.in_task(|this| this.evaluate_stack(&stack));
    849 ( 0.00%)          let result = result?;
      .           
  4,245 ( 0.00%)          if !result.must_apply_modulo_regions() {
      .                       stack.cache().on_failure(stack.dfn);
      .                   }
      .           
    849 ( 0.00%)          let reached_depth = stack.reached_depth.get();
  1,698 ( 0.00%)          if reached_depth >= stack.depth {
      .                       debug!(?result, "CACHE MISS");
 16,131 ( 0.00%)              self.insert_evaluation_cache(param_env, fresh_trait_pred, dep_node, result);
      .           
      .                       stack.cache().on_completion(
  1,698 ( 0.00%)                  stack.dfn,
      .                           |fresh_trait_pred, provisional_result, provisional_dep_node| {
      .                               // Create a new `DepNode` that has dependencies on:
      .                               // * The `DepNode` for the original evaluation that resulted in a provisional cache
      .                               // entry being crated
      .                               // * The `DepNode` for the *current* evaluation, which resulted in us completing
      .                               // provisional caches entries and inserting them into the evaluation cache
      .                               //
      .                               // This ensures that when a query reads this entry from the evaluation cache,
-- line 777 ----------------------------------------
-- line 839 ----------------------------------------
      .               fn check_evaluation_cycle(
      .                   &mut self,
      .                   stack: &TraitObligationStack<'_, 'tcx>,
      .               ) -> Option<EvaluationResult> {
      .                   if let Some(cycle_depth) = stack
      .                       .iter()
      .                       .skip(1) // Skip top-most frame.
      .                       .find(|prev| {
  1,828 ( 0.00%)                  stack.obligation.param_env == prev.obligation.param_env
      .                               && stack.fresh_trait_pred == prev.fresh_trait_pred
      .                       })
      .                       .map(|stack| stack.depth)
      .                   {
      .                       debug!("evaluate_stack --> recursive at depth {}", cycle_depth);
      .           
      .                       // If we have a stack like `A B C D E A`, where the top of
      .                       // the stack is the final `A`, then this will iterate over
-- line 855 ----------------------------------------
-- line 874 ----------------------------------------
      .                           debug!("evaluate_stack --> recursive, inductive");
      .                           Some(EvaluatedToRecur)
      .                       }
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
  7,641 ( 0.00%)      fn evaluate_stack<'o>(
      .                   &mut self,
      .                   stack: &TraitObligationStack<'o, 'tcx>,
      .               ) -> Result<EvaluationResult, OverflowError> {
      .                   // In intercrate mode, whenever any of the generics are unbound,
      .                   // there can always be an impl. Even if there are no impls in
      .                   // this crate, perhaps the type would be unified with
      .                   // something from another crate that does provide an impl.
      .                   //
-- line 890 ----------------------------------------
-- line 903 ----------------------------------------
      .                   // imagine, this is just where we started. To avoid that, we
      .                   // check for unbound variables and return an ambiguous (hence possible)
      .                   // match if we've seen this trait before.
      .                   //
      .                   // This suffices to allow chains like `FnMut` implemented in
      .                   // terms of `Fn` etc, but we could probably make this more
      .                   // precise still.
      .                   let unbound_input_types =
    849 ( 0.00%)              stack.fresh_trait_pred.skip_binder().trait_ref.substs.types().any(|ty| ty.is_fresh());
      .           
  2,547 ( 0.00%)          if stack.obligation.polarity() != ty::ImplPolarity::Negative {
      .                       // This check was an imperfect workaround for a bug in the old
      .                       // intercrate mode; it should be removed when that goes away.
  4,245 ( 0.00%)              if unbound_input_types && self.intercrate {
      .                           debug!("evaluate_stack --> unbound argument, intercrate -->  ambiguous",);
      .                           // Heuristics: show the diagnostics when there are no candidates in crate.
      .                           if self.intercrate_ambiguity_causes.is_some() {
      .                               debug!("evaluate_stack: intercrate_ambiguity_causes is some");
      .                               if let Ok(candidate_set) = self.assemble_candidates(stack) {
      .                                   if !candidate_set.ambiguous && candidate_set.vec.is_empty() {
      .                                       let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;
      .                                       let self_ty = trait_ref.self_ty();
-- line 924 ----------------------------------------
-- line 937 ----------------------------------------
      .                                       self.intercrate_ambiguity_causes.as_mut().unwrap().push(cause);
      .                                   }
      .                               }
      .                           }
      .                           return Ok(EvaluatedToAmbig);
      .                       }
      .                   }
      .           
  1,698 ( 0.00%)          if unbound_input_types
      .                       && stack.iter().skip(1).any(|prev| {
     33 ( 0.00%)                  stack.obligation.param_env == prev.obligation.param_env
      .                               && self.match_fresh_trait_refs(
     44 ( 0.00%)                          stack.fresh_trait_pred,
     44 ( 0.00%)                          prev.fresh_trait_pred,
      .                                   prev.obligation.param_env,
      .                               )
      .                       })
      .                   {
      .                       debug!("evaluate_stack --> unbound argument, recursive --> giving up",);
      .                       return Ok(EvaluatedToUnknown);
      .                   }
      .           
  7,672 ( 0.00%)          match self.candidate_from_obligation(stack) {
  4,392 ( 0.00%)              Ok(Some(c)) => self.evaluate_candidate(stack, &c),
      .                       Err(SelectionError::Ambiguous(_)) => Ok(EvaluatedToAmbig),
      .                       Ok(None) => Ok(EvaluatedToAmbig),
      .                       Err(Overflow) => Err(OverflowError::Canonical),
      .                       Err(ErrorReporting) => Err(OverflowError::ErrorReporting),
      .                       Err(..) => Ok(EvaluatedToErr),
      .                   }
  8,490 ( 0.00%)      }
      .           
      .               /// For defaulted traits, we use a co-inductive strategy to solve, so
      .               /// that recursion is ok. This routine returns `true` if the top of the
      .               /// stack (`cycle[0]`):
      .               ///
      .               /// - is a defaulted trait,
      .               /// - it also appears in the backtrace at some position `X`,
      .               /// - all the predicates at positions `X..` between `X` and the top are
-- line 975 ----------------------------------------
-- line 998 ----------------------------------------
      .                   skip(self, stack),
      .                   fields(depth = stack.obligation.recursion_depth)
      .               )]
      .               fn evaluate_candidate<'o>(
      .                   &mut self,
      .                   stack: &TraitObligationStack<'o, 'tcx>,
      .                   candidate: &SelectionCandidate<'tcx>,
      .               ) -> Result<EvaluationResult, OverflowError> {
  1,624 ( 0.00%)          let mut result = self.evaluation_probe(|this| {
      .                       let candidate = (*candidate).clone();
 12,994 ( 0.00%)              match this.confirm_candidate(stack.obligation, candidate) {
      .                           Ok(selection) => {
      .                               debug!(?selection);
  3,248 ( 0.00%)                      this.evaluate_predicates_recursively(
      .                                   stack.list(),
 10,556 ( 0.00%)                          selection.nested_obligations().into_iter(),
      .                               )
      .                           }
      .                           Err(..) => Ok(EvaluatedToErr),
      .                       }
      .                   })?;
      .           
      .                   // If we erased any lifetimes, then we want to use
      .                   // `EvaluatedToOkModuloRegions` instead of `EvaluatedToOk`
-- line 1021 ----------------------------------------
-- line 1037 ----------------------------------------
      .                   &self,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   trait_pred: ty::PolyTraitPredicate<'tcx>,
      .               ) -> Option<EvaluationResult> {
      .                   // Neither the global nor local cache is aware of intercrate
      .                   // mode, so don't do any caching. In particular, we might
      .                   // re-use the same `InferCtxt` with both an intercrate
      .                   // and non-intercrate `SelectionContext`
  5,166 ( 0.00%)          if self.intercrate {
      .                       return None;
      .                   }
      .           
      .                   let tcx = self.tcx();
      .                   if self.can_use_global_caches(param_env) {
 18,053 ( 0.00%)              if let Some(res) = tcx.evaluation_cache.get(&param_env.and(trait_pred), tcx) {
      .                           return Some(res);
      .                       }
      .                   }
  3,396 ( 0.00%)          self.infcx.evaluation_cache.get(&param_env.and(trait_pred), tcx)
      .               }
      .           
 10,188 ( 0.00%)      fn insert_evaluation_cache(
      .                   &mut self,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   trait_pred: ty::PolyTraitPredicate<'tcx>,
      .                   dep_node: DepNodeIndex,
      .                   result: EvaluationResult,
      .               ) {
      .                   // Avoid caching results that depend on more than just the trait-ref
      .                   // - the stack can create recursion.
  3,396 ( 0.00%)          if result.is_stack_dependent() {
      .                       return;
      .                   }
      .           
      .                   // Neither the global nor local cache is aware of intercrate
      .                   // mode, so don't do any caching. In particular, we might
      .                   // re-use the same `InferCtxt` with both an intercrate
      .                   // and non-intercrate `SelectionContext`
  1,698 ( 0.00%)          if self.intercrate {
      .                       return;
      .                   }
      .           
      .                   if self.can_use_global_caches(param_env) {
      .                       if !trait_pred.needs_infer() {
      .                           debug!(?trait_pred, ?result, "insert_evaluation_cache global");
      .                           // This may overwrite the cache with the same value
      .                           // FIXME: Due to #50507 this overwrites the different values
      .                           // This should be changed to use HashMapExt::insert_same
      .                           // when that is fixed
    845 ( 0.00%)                  self.tcx().evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);
      .                           return;
      .                       }
      .                   }
      .           
      .                   debug!(?trait_pred, ?result, "insert_evaluation_cache");
     16 ( 0.00%)          self.infcx.evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);
  6,792 ( 0.00%)      }
      .           
      .               /// For various reasons, it's possible for a subobligation
      .               /// to have a *lower* recursion_depth than the obligation used to create it.
      .               /// Projection sub-obligations may be returned from the projection cache,
      .               /// which results in obligations with an 'old' `recursion_depth`.
      .               /// Additionally, methods like `InferCtxt.subtype_predicate` produce
      .               /// subobligations without taking in a 'parent' depth, causing the
      .               /// generated subobligations to have a `recursion_depth` of `0`.
      .               ///
      .               /// To ensure that obligation_depth never decreases, we force all subobligations
      .               /// to have at least the depth of the original obligation.
      2 ( 0.00%)      fn add_depth<T: 'cx, I: Iterator<Item = &'cx mut Obligation<'tcx, T>>>(
      .                   &self,
      .                   it: I,
      .                   min_depth: usize,
      .               ) {
      .                   it.for_each(|o| o.recursion_depth = cmp::max(min_depth, o.recursion_depth) + 1);
      4 ( 0.00%)      }
      .           
      .               fn check_recursion_depth<T: Display + TypeFoldable<'tcx>>(
      .                   &self,
      .                   depth: usize,
      .                   error_obligation: &Obligation<'tcx, T>,
      .               ) -> Result<(), OverflowError> {
 26,268 ( 0.01%)          if !self.infcx.tcx.recursion_limit().value_within_limit(depth) {
      .                       match self.query_mode {
      .                           TraitQueryMode::Standard => {
      .                               if self.infcx.is_tainted_by_errors() {
      .                                   return Err(OverflowError::ErrorReporting);
      .                               }
      .                               self.infcx.report_overflow_error(error_obligation, true);
      .                           }
      .                           TraitQueryMode::Canonical => {
-- line 1126 ----------------------------------------
-- line 1143 ----------------------------------------
      .               ) -> Result<(), OverflowError> {
      .                   self.check_recursion_depth(obligation.recursion_depth, error_obligation)
      .               }
      .           
      .               fn in_task<OP, R>(&mut self, op: OP) -> (R, DepNodeIndex)
      .               where
      .                   OP: FnOnce(&mut Self) -> R,
      .               {
 14,768 ( 0.00%)          let (result, dep_node) =
 13,608 ( 0.00%)              self.tcx().dep_graph.with_anon_task(self.tcx(), DepKind::TraitSelect, || op(self));
      .                   self.tcx().dep_graph.read_index(dep_node);
 13,632 ( 0.00%)          (result, dep_node)
      .               }
      .           
      .               /// filter_impls filters constant trait obligations and candidates that have a positive impl
      .               /// for a negative goal and a negative impl for a positive goal
      .               #[instrument(level = "debug", skip(self))]
      .               fn filter_impls(
      .                   &mut self,
      .                   candidates: Vec<SelectionCandidate<'tcx>>,
      .                   obligation: &TraitObligation<'tcx>,
      .               ) -> Vec<SelectionCandidate<'tcx>> {
      .                   let tcx = self.tcx();
      .                   let mut result = Vec::with_capacity(candidates.len());
      .           
 16,945 ( 0.00%)          for candidate in candidates {
      .                       // Respect const trait obligations
  3,105 ( 0.00%)              if obligation.is_const() {
      .                           match candidate {
      .                               // const impl
      .                               ImplCandidate(def_id)
      .                                   if tcx.impl_constness(def_id) == hir::Constness::Const => {}
      .                               // const param
      .                               ParamCandidate(trait_pred)
      .                                   if trait_pred.skip_binder().constness
      .                                       == ty::BoundConstness::ConstIfConst => {}
-- line 1178 ----------------------------------------
-- line 1186 ----------------------------------------
      .                               ConstDropCandidate(_) => {}
      .                               _ => {
      .                                   // reject all other types of candidates
      .                                   continue;
      .                               }
      .                           }
      .                       }
      .           
  2,070 ( 0.00%)              if let ImplCandidate(def_id) = candidate {
  1,480 ( 0.00%)                  if ty::ImplPolarity::Reservation == tcx.impl_polarity(def_id)
    740 ( 0.00%)                      || obligation.polarity() == tcx.impl_polarity(def_id)
      .                               || self.allow_negative_impls
      .                           {
      .                               result.push(candidate);
      .                           }
      .                       } else {
      .                           result.push(candidate);
      .                       }
      .                   }
      .           
  4,448 ( 0.00%)          result
      .               }
      .           
      .               /// filter_reservation_impls filter reservation impl for any goal as ambiguous
 16,371 ( 0.00%)      #[instrument(level = "debug", skip(self))]
      .               fn filter_reservation_impls(
      .                   &mut self,
      .                   candidate: SelectionCandidate<'tcx>,
      .                   obligation: &TraitObligation<'tcx>,
      .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
      .                   let tcx = self.tcx();
      .                   // Treat reservation impls as ambiguity.
  3,262 ( 0.00%)          if let ImplCandidate(def_id) = candidate {
  1,336 ( 0.00%)              if let ty::ImplPolarity::Reservation = tcx.impl_polarity(def_id) {
      .                           if let Some(intercrate_ambiguity_clauses) = &mut self.intercrate_ambiguity_causes {
      .                               let attrs = tcx.get_attrs(def_id);
      .                               let attr = tcx.sess.find_by_name(&attrs, sym::rustc_reservation_impl);
      .                               let value = attr.and_then(|a| a.value_str());
      .                               if let Some(value) = value {
      .                                   debug!(
      .                                       "filter_reservation_impls: \
      .                                            reservation impl ambiguity on {:?}",
-- line 1227 ----------------------------------------
-- line 1232 ----------------------------------------
      .                                           message: value.to_string(),
      .                                       },
      .                                   );
      .                               }
      .                           }
      .                           return Ok(None);
      .                       }
      .                   }
  5,778 ( 0.00%)          Ok(Some(candidate))
      .               }
      .           
      .               fn is_knowable<'o>(&mut self, stack: &TraitObligationStack<'o, 'tcx>) -> Option<Conflict> {
      .                   debug!("is_knowable(intercrate={:?})", self.intercrate);
      .           
  3,408 ( 0.00%)          if !self.intercrate || stack.obligation.polarity() == ty::ImplPolarity::Negative {
      .                       return None;
      .                   }
      .           
      .                   let obligation = &stack.obligation;
      .                   let predicate = self.infcx().resolve_vars_if_possible(obligation.predicate);
      .           
      .                   // Okay to skip binder because of the nature of the
      .                   // trait-ref-is-knowable check, which does not care about
-- line 1254 ----------------------------------------
-- line 1286 ----------------------------------------
      .                   &mut self,
      .                   mut param_env: ty::ParamEnv<'tcx>,
      .                   cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,
      .               ) -> Option<SelectionResult<'tcx, SelectionCandidate<'tcx>>> {
      .                   // Neither the global nor local cache is aware of intercrate
      .                   // mode, so don't do any caching. In particular, we might
      .                   // re-use the same `InferCtxt` with both an intercrate
      .                   // and non-intercrate `SelectionContext`
  7,962 ( 0.00%)          if self.intercrate {
      .                       return None;
      .                   }
      .                   let tcx = self.tcx();
      .                   let mut pred = cache_fresh_trait_pred.skip_binder();
  7,962 ( 0.00%)          pred.remap_constness(tcx, &mut param_env);
      .           
  3,981 ( 0.00%)          if self.can_use_global_caches(param_env) {
 39,770 ( 0.01%)              if let Some(res) = tcx.selection_cache.get(&param_env.and(pred), tcx) {
 36,985 ( 0.01%)                  return Some(res);
      .                       }
      .                   }
 12,492 ( 0.00%)          self.infcx.selection_cache.get(&param_env.and(pred), tcx)
      .               }
      .           
      .               /// Determines whether can we safely cache the result
      .               /// of selecting an obligation. This is almost always `true`,
      .               /// except when dealing with certain `ParamCandidate`s.
      .               ///
      .               /// Ordinarily, a `ParamCandidate` will contain no inference variables,
      .               /// since it was usually produced directly from a `DefId`. However,
-- line 1314 ----------------------------------------
-- line 1325 ----------------------------------------
      .               fn can_cache_candidate(
      .                   &self,
      .                   result: &SelectionResult<'tcx, SelectionCandidate<'tcx>>,
      .               ) -> bool {
      .                   // Neither the global nor local cache is aware of intercrate
      .                   // mode, so don't do any caching. In particular, we might
      .                   // re-use the same `InferCtxt` with both an intercrate
      .                   // and non-intercrate `SelectionContext`
  2,272 ( 0.00%)          if self.intercrate {
      .                       return false;
      .                   }
  3,408 ( 0.00%)          match result {
      .                       Ok(Some(SelectionCandidate::ParamCandidate(trait_ref))) => !trait_ref.needs_infer(),
      .                       _ => true,
      .                   }
      .               }
      .           
      .               fn insert_candidate_cache(
      .                   &mut self,
      .                   mut param_env: ty::ParamEnv<'tcx>,
      .                   cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,
      .                   dep_node: DepNodeIndex,
      .                   candidate: SelectionResult<'tcx, SelectionCandidate<'tcx>>,
      .               ) {
      .                   let tcx = self.tcx();
      .                   let mut pred = cache_fresh_trait_pred.skip_binder();
      .           
  2,272 ( 0.00%)          pred.remap_constness(tcx, &mut param_env);
      .           
      .                   if !self.can_cache_candidate(&candidate) {
      .                       debug!(?pred, ?candidate, "insert_candidate_cache - candidate is not cacheable");
      .                       return;
      .                   }
      .           
  1,136 ( 0.00%)          if self.can_use_global_caches(param_env) {
  2,554 ( 0.00%)              if let Err(Overflow) = candidate {
      .                           // Don't cache overflow globally; we only produce this in certain modes.
      .                       } else if !pred.needs_infer() {
  4,528 ( 0.00%)                  if !candidate.needs_infer() {
      .                               debug!(?pred, ?candidate, "insert_candidate_cache global");
      .                               // This may overwrite the cache with the same value.
 30,564 ( 0.01%)                      tcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);
      .                               return;
      .                           }
      .                       }
      .                   }
      .           
      .                   debug!(?pred, ?candidate, "insert_candidate_cache local");
     92 ( 0.00%)          self.infcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);
      .               }
      .           
      .               /// Matches a predicate against the bounds of its self type.
      .               ///
      .               /// Given an obligation like `<T as Foo>::Bar: Baz` where the self type is
      .               /// a projection, look at the bounds of `T::Bar`, see if we can find a
      .               /// `Baz` bound. We return indexes into the list returned by
      .               /// `tcx.item_bounds` for any applicable bounds.
-- line 1381 ----------------------------------------
-- line 1484 ----------------------------------------
      .               }
      .           
      .               fn evaluate_where_clause<'o>(
      .                   &mut self,
      .                   stack: &TraitObligationStack<'o, 'tcx>,
      .                   where_clause_trait_ref: ty::PolyTraitRef<'tcx>,
      .               ) -> Result<EvaluationResult, OverflowError> {
      .                   self.evaluation_probe(|this| {
    220 ( 0.00%)              match this.match_where_clause_trait_ref(stack.obligation, where_clause_trait_ref) {
     32 ( 0.00%)                  Ok(obligations) => this.evaluate_predicates_recursively(stack.list(), obligations),
      .                           Err(()) => Ok(EvaluatedToErr),
      .                       }
      .                   })
      .               }
      .           
    342 ( 0.00%)      pub(super) fn match_projection_projections(
      .                   &mut self,
      .                   obligation: &ProjectionTyObligation<'tcx>,
      .                   env_predicate: PolyProjectionPredicate<'tcx>,
      .                   potentially_unnormalized_candidates: bool,
      .               ) -> bool {
      .                   let mut nested_obligations = Vec::new();
    190 ( 0.00%)          let (infer_predicate, _) = self.infcx.replace_bound_vars_with_fresh_vars(
    114 ( 0.00%)              obligation.cause.span,
      .                       LateBoundRegionConversionTime::HigherRankedType,
      .                       env_predicate,
      .                   );
     76 ( 0.00%)          let infer_projection = if potentially_unnormalized_candidates {
      .                       ensure_sufficient_stack(|| {
      .                           project::normalize_with_depth_to(
      .                               self,
      .                               obligation.param_env,
      .                               obligation.cause.clone(),
      .                               obligation.recursion_depth + 1,
      .                               infer_predicate.projection_ty,
      .                               &mut nested_obligations,
      .                           )
      .                       })
      .                   } else {
     76 ( 0.00%)              infer_predicate.projection_ty
      .                   };
      .           
     38 ( 0.00%)          self.infcx
     76 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
     76 ( 0.00%)              .sup(obligation.predicate, infer_projection)
    304 ( 0.00%)              .map_or(false, |InferOk { obligations, value: () }| {
      .                           self.evaluate_predicates_recursively(
      .                               TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),
      .                               nested_obligations.into_iter().chain(obligations),
      .                           )
     76 ( 0.00%)                  .map_or(false, |res| res.may_apply())
      .                       })
    342 ( 0.00%)      }
      .           
      .               ///////////////////////////////////////////////////////////////////////////
      .               // WINNOW
      .               //
      .               // Winnowing is the process of attempting to resolve ambiguity by
      .               // probing further. During the winnowing process, we unify all
      .               // type variables and then we also attempt to evaluate recursive
      .               // bounds to see if they are satisfied.
-- line 1544 ----------------------------------------
-- line 1550 ----------------------------------------
      .               /// See the comment for "SelectionCandidate" for more details.
      .               fn candidate_should_be_dropped_in_favor_of(
      .                   &mut self,
      .                   sized_predicate: bool,
      .                   victim: &EvaluatedCandidate<'tcx>,
      .                   other: &EvaluatedCandidate<'tcx>,
      .                   needs_infer: bool,
      .               ) -> bool {
    112 ( 0.00%)          if victim.candidate == other.candidate {
      .                       return true;
      .                   }
      .           
      .                   // Check if a bound would previously have been removed when normalizing
      .                   // the param_env so that it can be given the lowest priority. See
      .                   // #50825 for the motivation for this.
      .                   let is_global = |cand: &ty::PolyTraitPredicate<'tcx>| {
      .                       cand.is_global() && !cand.has_late_bound_regions()
      .                   };
      .           
      .                   // (*) Prefer `BuiltinCandidate { has_nested: false }`, `PointeeCandidate`,
      .                   // `DiscriminantKindCandidate`, and `ConstDropCandidate` to anything else.
      .                   //
      .                   // This is a fix for #53123 and prevents winnowing from accidentally extending the
      .                   // lifetime of a variable.
  2,016 ( 0.00%)          match (&other.candidate, &victim.candidate) {
      .                       (_, AutoImplCandidate(..)) | (AutoImplCandidate(..), _) => {
      .                           bug!(
      .                               "default implementations shouldn't be recorded \
      .                               when there are other valid candidates"
      .                           );
      .                       }
      .           
      .                       // (*)
-- line 1582 ----------------------------------------
-- line 1674 ----------------------------------------
      .                       }
      .                       (ObjectCandidate(_), ProjectionCandidate(_))
      .                       | (ProjectionCandidate(_), ObjectCandidate(_)) => {
      .                           bug!("Have both object and projection candidate")
      .                       }
      .           
      .                       // Arbitrarily give projection and object candidates priority.
      .                       (
    224 ( 0.00%)                  ObjectCandidate(_) | ProjectionCandidate(_),
      .                           ImplCandidate(..)
      .                           | ClosureCandidate
      .                           | GeneratorCandidate
      .                           | FnPointerCandidate { .. }
      .                           | BuiltinObjectCandidate
      .                           | BuiltinUnsizeCandidate
      .                           | TraitUpcastingUnsizeCandidate(_)
      .                           | BuiltinCandidate { .. }
-- line 1690 ----------------------------------------
-- line 1696 ----------------------------------------
      .                           | ClosureCandidate
      .                           | GeneratorCandidate
      .                           | FnPointerCandidate { .. }
      .                           | BuiltinObjectCandidate
      .                           | BuiltinUnsizeCandidate
      .                           | TraitUpcastingUnsizeCandidate(_)
      .                           | BuiltinCandidate { .. }
      .                           | TraitAliasCandidate(..),
    448 ( 0.00%)                  ObjectCandidate(_) | ProjectionCandidate(_),
      .                       ) => false,
      .           
  1,120 ( 0.00%)              (&ImplCandidate(other_def), &ImplCandidate(victim_def)) => {
      .                           // See if we can toss out `victim` based on specialization.
      .                           // This requires us to know *for sure* that the `other` impl applies
      .                           // i.e., `EvaluatedToOk`.
      .                           //
      .                           // FIXME(@lcnr): Using `modulo_regions` here seems kind of scary
      .                           // to me but is required for `std` to compile, so I didn't change it
      .                           // for now.
      .                           let tcx = self.tcx();
    448 ( 0.00%)                  if other.evaluation.must_apply_modulo_regions() {
    896 ( 0.00%)                      if tcx.specializes((other_def, victim_def)) {
      .                                   return true;
      .                               }
      .                           }
      .           
    560 ( 0.00%)                  if other.evaluation.must_apply_considering_regions() {
    448 ( 0.00%)                      match tcx.impls_are_allowed_to_overlap(other_def, victim_def) {
      .                                   Some(ty::ImplOverlapKind::Permitted { marker: true }) => {
      .                                       // Subtle: If the predicate we are evaluating has inference
      .                                       // variables, do *not* allow discarding candidates due to
      .                                       // marker trait impls.
      .                                       //
      .                                       // Without this restriction, we could end up accidentally
      .                                       // constrainting inference variables based on an arbitrarily
      .                                       // chosen trait impl.
-- line 1731 ----------------------------------------
-- line 1790 ----------------------------------------
      .                           | BuiltinUnsizeCandidate
      .                           | TraitUpcastingUnsizeCandidate(_)
      .                           | BuiltinCandidate { has_nested: true }
      .                           | TraitAliasCandidate(..),
      .                       ) => false,
      .                   }
      .               }
      .           
  2,520 ( 0.00%)      fn sized_conditions(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .               ) -> BuiltinImplConditions<'tcx> {
      .                   use self::BuiltinImplConditions::{Ambiguous, None, Where};
      .           
      .                   // NOTE: binder moved to (*)
    756 ( 0.00%)          let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());
      .           
  1,264 ( 0.00%)          match self_ty.kind() {
      .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
      .                       | ty::Uint(_)
      .                       | ty::Int(_)
      .                       | ty::Bool
      .                       | ty::Float(_)
      .                       | ty::FnDef(..)
      .                       | ty::FnPtr(_)
      .                       | ty::RawPtr(..)
-- line 1815 ----------------------------------------
-- line 1817 ----------------------------------------
      .                       | ty::Ref(..)
      .                       | ty::Generator(..)
      .                       | ty::GeneratorWitness(..)
      .                       | ty::Array(..)
      .                       | ty::Closure(..)
      .                       | ty::Never
      .                       | ty::Error(_) => {
      .                           // safe for everything
    101 ( 0.00%)                  Where(ty::Binder::dummy(Vec::new()))
      .                       }
      .           
      .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => None,
      .           
      .                       ty::Tuple(tys) => Where(
      .                           obligation
      .                               .predicate
     58 ( 0.00%)                      .rebind(tys.last().into_iter().map(|k| k.expect_ty()).collect()),
      .                       ),
      .           
      .                       ty::Adt(def, substs) => {
    240 ( 0.00%)                  let sized_crit = def.sized_constraint(self.tcx());
      .                           // (*) binder moved here
    600 ( 0.00%)                  Where(
      .                               obligation.predicate.rebind({
    120 ( 0.00%)                          sized_crit.iter().map(|ty| ty.subst(self.tcx(), substs)).collect()
      .                               }),
      .                           )
      .                       }
      .           
      .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => None,
      .                       ty::Infer(ty::TyVar(_)) => Ambiguous,
      .           
      .                       ty::Placeholder(..)
      .                       | ty::Bound(..)
      .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
      .                           bug!("asked to assemble builtin bounds of unexpected type: {:?}", self_ty);
      .                       }
      .                   }
  2,016 ( 0.00%)      }
      .           
  2,008 ( 0.00%)      fn copy_clone_conditions(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .               ) -> BuiltinImplConditions<'tcx> {
      .                   // NOTE: binder moved to (*)
    502 ( 0.00%)          let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());
      .           
      .                   use self::BuiltinImplConditions::{Ambiguous, None, Where};
      .           
  1,309 ( 0.00%)          match *self_ty.kind() {
      .                       ty::Infer(ty::IntVar(_))
      .                       | ty::Infer(ty::FloatVar(_))
      .                       | ty::FnDef(..)
      .                       | ty::FnPtr(_)
      .                       | ty::Error(_) => Where(ty::Binder::dummy(Vec::new())),
      .           
      .                       ty::Uint(_)
      .                       | ty::Int(_)
-- line 1874 ----------------------------------------
-- line 1886 ----------------------------------------
      .                       ty::Dynamic(..)
      .                       | ty::Str
      .                       | ty::Slice(..)
      .                       | ty::Generator(..)
      .                       | ty::GeneratorWitness(..)
      .                       | ty::Foreign(..)
      .                       | ty::Ref(_, _, hir::Mutability::Mut) => None,
      .           
     10 ( 0.00%)              ty::Tuple(tys) => {
      .                           // (*) binder moved here
     56 ( 0.00%)                  Where(obligation.predicate.rebind(tys.iter().map(|k| k.expect_ty()).collect()))
      .                       }
      .           
     22 ( 0.00%)              ty::Closure(_, substs) => {
      .                           // (*) binder moved here
     66 ( 0.00%)                  let ty = self.infcx.shallow_resolve(substs.as_closure().tupled_upvars_ty());
     44 ( 0.00%)                  if let ty::Infer(ty::TyVar(_)) = ty.kind() {
      .                               // Not yet resolved.
      .                               Ambiguous
      .                           } else {
    154 ( 0.00%)                      Where(obligation.predicate.rebind(substs.as_closure().upvar_tys().collect()))
      .                           }
      .                       }
      .           
      .                       ty::Adt(..) | ty::Projection(..) | ty::Param(..) | ty::Opaque(..) => {
      .                           // Fallback to whatever user-defined impls exist in this case.
      .                           None
      .                       }
      .           
-- line 1914 ----------------------------------------
-- line 1920 ----------------------------------------
      .                       }
      .           
      .                       ty::Placeholder(..)
      .                       | ty::Bound(..)
      .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
      .                           bug!("asked to assemble builtin bounds of unexpected type: {:?}", self_ty);
      .                       }
      .                   }
  1,506 ( 0.00%)      }
      .           
      .               /// For default impls, we need to break apart a type into its
      .               /// "constituent types" -- meaning, the types that it contains.
      .               ///
      .               /// Here are some (simple) examples:
      .               ///
      .               /// ```
      .               /// (i32, u32) -> [i32, u32]
-- line 1936 ----------------------------------------
-- line 2003 ----------------------------------------
      .                           // We can resolve the `impl Trait` to its concrete type,
      .                           // which enforces a DAG between the functions requiring
      .                           // the auto trait bounds in question.
      .                           t.rebind(vec![self.tcx().type_of(def_id).subst(self.tcx(), substs)])
      .                       }
      .                   }
      .               }
      .           
    504 ( 0.00%)      fn collect_predicates_for_types(
      .                   &mut self,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   cause: ObligationCause<'tcx>,
      .                   recursion_depth: usize,
      .                   trait_def_id: DefId,
      .                   types: ty::Binder<'tcx, Vec<Ty<'tcx>>>,
      .               ) -> Vec<PredicateObligation<'tcx>> {
      .                   // Because the types were potentially derived from
-- line 2019 ----------------------------------------
-- line 2030 ----------------------------------------
      .                   // 2. Produce something like `&'0 i32 : Copy`
      .                   // 3. Re-bind the regions back to `for<'a> &'a i32 : Copy`
      .           
      .                   types
      .                       .as_ref()
      .                       .skip_binder() // binder moved -\
      .                       .iter()
      .                       .flat_map(|ty| {
    171 ( 0.00%)                  let ty: ty::Binder<'tcx, Ty<'tcx>> = types.rebind(ty); // <----/
      .           
    684 ( 0.00%)                  self.infcx.commit_unconditionally(|_| {
    171 ( 0.00%)                      let placeholder_ty = self.infcx.replace_bound_vars_with_placeholders(ty);
    285 ( 0.00%)                      let Normalized { value: normalized_ty, mut obligations } =
    570 ( 0.00%)                          ensure_sufficient_stack(|| {
      .                                       project::normalize_with_depth(
      .                                           self,
     57 ( 0.00%)                                  param_env,
      .                                           cause.clone(),
     57 ( 0.00%)                                  recursion_depth,
     57 ( 0.00%)                                  placeholder_ty,
      .                                       )
      .                                   });
    627 ( 0.00%)                      let placeholder_obligation = predicate_for_trait_def(
      .                                   self.tcx(),
     57 ( 0.00%)                          param_env,
      .                                   cause.clone(),
    114 ( 0.00%)                          trait_def_id,
      .                                   recursion_depth,
      .                                   normalized_ty,
      .                                   &[],
      .                               );
    342 ( 0.00%)                      obligations.push(placeholder_obligation);
      .                               obligations
      .                           })
      .                       })
      .                       .collect()
    252 ( 0.00%)      }
      .           
      .               ///////////////////////////////////////////////////////////////////////////
      .               // Matching
      .               //
      .               // Matching is a common path used for both evaluation and
      .               // confirmation.  It basically unifies types that appear in impls
      .               // and traits. This does affect the surrounding environment;
      .               // therefore, when used during evaluation, match routines must be
-- line 2074 ----------------------------------------
-- line 2075 ----------------------------------------
      .               // run inside of a `probe()` so that their side-effects are
      .               // contained.
      .           
      .               fn rematch_impl(
      .                   &mut self,
      .                   impl_def_id: DefId,
      .                   obligation: &TraitObligation<'tcx>,
      .               ) -> Normalized<'tcx, SubstsRef<'tcx>> {
 11,700 ( 0.00%)          match self.match_impl(impl_def_id, obligation) {
  9,360 ( 0.00%)              Ok(substs) => substs,
      .                       Err(()) => {
      .                           bug!(
      .                               "Impl {:?} was matchable against {:?} but now is not",
      .                               impl_def_id,
      .                               obligation
      .                           );
      .                       }
      .                   }
      .               }
      .           
 75,487 ( 0.02%)      #[tracing::instrument(level = "debug", skip(self))]
      .               fn match_impl(
      .                   &mut self,
      .                   impl_def_id: DefId,
      .                   obligation: &TraitObligation<'tcx>,
      .               ) -> Result<Normalized<'tcx, SubstsRef<'tcx>>, ()> {
      .                   let impl_trait_ref = self.tcx().impl_trait_ref(impl_def_id).unwrap();
      .           
      .                   // Before we create the substitutions and everything, first
      .                   // consider a "quick reject". This avoids creating more types
      .                   // and so forth that we need to.
      .                   if self.fast_reject_trait_refs(obligation, &impl_trait_ref) {
    342 ( 0.00%)              return Err(());
      .                   }
      .           
      .                   let placeholder_obligation =
 26,614 ( 0.01%)              self.infcx().replace_bound_vars_with_placeholders(obligation.predicate);
 11,406 ( 0.00%)          let placeholder_obligation_trait_ref = placeholder_obligation.trait_ref;
      .           
 19,010 ( 0.00%)          let impl_substs = self.infcx.fresh_substs_for_item(obligation.cause.span, impl_def_id);
      .           
  7,604 ( 0.00%)          let impl_trait_ref = impl_trait_ref.subst(self.tcx(), impl_substs);
      .           
      .                   debug!(?impl_trait_ref);
      .           
 22,812 ( 0.00%)          let Normalized { value: impl_trait_ref, obligations: mut nested_obligations } =
 26,614 ( 0.01%)              ensure_sufficient_stack(|| {
      .                           project::normalize_with_depth(
      .                               self,
  3,802 ( 0.00%)                      obligation.param_env,
      .                               obligation.cause.clone(),
 11,406 ( 0.00%)                      obligation.recursion_depth + 1,
  7,604 ( 0.00%)                      impl_trait_ref,
      .                           )
      .                       });
      .           
      .                   debug!(?impl_trait_ref, ?placeholder_obligation_trait_ref);
      .           
      .                   let cause = ObligationCause::new(
  3,802 ( 0.00%)              obligation.cause.span,
  7,604 ( 0.00%)              obligation.cause.body_id,
 34,218 ( 0.01%)              ObligationCauseCode::MatchImpl(obligation.cause.clone(), impl_def_id),
      .                   );
      .           
  7,604 ( 0.00%)          let InferOk { obligations, .. } = self
      .                       .infcx
  3,802 ( 0.00%)              .at(&cause, obligation.param_env)
      .                       .eq(placeholder_obligation_trait_ref, impl_trait_ref)
      .                       .map_err(|e| debug!("match_impl: failed eq_trait_refs due to `{}`", e))?;
      .                   nested_obligations.extend(obligations);
      .           
  9,240 ( 0.00%)          if !self.intercrate
      .                       && self.tcx().impl_polarity(impl_def_id) == ty::ImplPolarity::Reservation
      .                   {
      .                       debug!("match_impl: reservation impls only apply in intercrate mode");
      .                       return Err(());
      .                   }
      .           
      .                   debug!(?impl_substs, ?nested_obligations, "match_impl: success");
 18,480 ( 0.00%)          Ok(Normalized { value: impl_substs, obligations: nested_obligations })
      .               }
      .           
      .               fn fast_reject_trait_refs(
      .                   &mut self,
      .                   obligation: &TraitObligation<'_>,
      .                   impl_trait_ref: &ty::TraitRef<'_>,
      .               ) -> bool {
      .                   // We can avoid creating type variables and doing the full
      .                   // substitution if we find that any of the input types, when
      .                   // simplified, do not match.
      .           
 11,919 ( 0.00%)          iter::zip(obligation.predicate.skip_binder().trait_ref.substs, impl_trait_ref.substs).any(
      .                       |(obligation_arg, impl_arg)| {
 41,952 ( 0.01%)                  match (obligation_arg.unpack(), impl_arg.unpack()) {
      .                               (GenericArgKind::Type(obligation_ty), GenericArgKind::Type(impl_ty)) => {
      .                                   // Note, we simplify parameters for the obligation but not the
      .                                   // impl so that we do not reject a blanket impl but do reject
      .                                   // more concrete impls if we're searching for `T: Trait`.
 55,936 ( 0.01%)                          let simplified_obligation_ty = fast_reject::simplify_type(
      .                                       self.tcx(),
      .                                       obligation_ty,
      .                                       SimplifyParams::Yes,
      .                                       StripReferences::No,
      .                                   );
 41,952 ( 0.01%)                          let simplified_impl_ty = fast_reject::simplify_type(
      .                                       self.tcx(),
      .                                       impl_ty,
      .                                       SimplifyParams::No,
      .                                       StripReferences::No,
      .                                   );
      .           
 20,976 ( 0.00%)                          simplified_obligation_ty.is_some()
      .                                       && simplified_impl_ty.is_some()
      .                                       && simplified_obligation_ty != simplified_impl_ty
      .                               }
      .                               (GenericArgKind::Lifetime(_), GenericArgKind::Lifetime(_)) => {
      .                                   // Lifetimes can never cause a rejection.
      .                                   false
      .                               }
      .                               (GenericArgKind::Const(_), GenericArgKind::Const(_)) => {
-- line 2194 ----------------------------------------
-- line 2201 ----------------------------------------
      .                           }
      .                       },
      .                   )
      .               }
      .           
      .               /// Normalize `where_clause_trait_ref` and try to match it against
      .               /// `obligation`. If successful, return any predicates that
      .               /// result from the normalization.
    180 ( 0.00%)      fn match_where_clause_trait_ref(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .                   where_clause_trait_ref: ty::PolyTraitRef<'tcx>,
      .               ) -> Result<Vec<PredicateObligation<'tcx>>, ()> {
      .                   self.match_poly_trait_ref(obligation, where_clause_trait_ref)
    160 ( 0.00%)      }
      .           
      .               /// Returns `Ok` if `poly_trait_ref` being true implies that the
      .               /// obligation is satisfied.
      .               #[instrument(skip(self), level = "debug")]
      .               fn match_poly_trait_ref(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .                   poly_trait_ref: ty::PolyTraitRef<'tcx>,
      .               ) -> Result<Vec<PredicateObligation<'tcx>>, ()> {
     32 ( 0.00%)          self.infcx
     20 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
     96 ( 0.00%)              .sup(obligation.predicate.to_poly_trait_ref(), poly_trait_ref)
      .                       .map(|InferOk { obligations, .. }| obligations)
      .                       .map_err(|_| ())
      .               }
      .           
      .               ///////////////////////////////////////////////////////////////////////////
      .               // Miscellany
      .           
      .               fn match_fresh_trait_refs(
      .                   &self,
      .                   previous: ty::PolyTraitPredicate<'tcx>,
      .                   current: ty::PolyTraitPredicate<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .               ) -> bool {
     33 ( 0.00%)          let mut matcher = ty::_match::Match::new(self.tcx(), param_env);
      .                   matcher.relate(previous, current).is_ok()
      .               }
      .           
      .               fn push_stack<'o>(
      .                   &mut self,
      .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
      .                   obligation: &'o TraitObligation<'tcx>,
      .               ) -> TraitObligationStack<'o, 'tcx> {
 39,456 ( 0.01%)          let fresh_trait_pred = obligation.predicate.fold_with(&mut self.freshener);
      .           
      .                   let dfn = previous_stack.cache.next_dfn();
  5,166 ( 0.00%)          let depth = previous_stack.depth() + 1;
 43,686 ( 0.01%)          TraitObligationStack {
      .                       obligation,
 31,158 ( 0.01%)              fresh_trait_pred,
      .                       reached_depth: Cell::new(depth),
      .                       previous: previous_stack,
      .                       dfn,
      .                       depth,
      .                   }
      .               }
      .           
      .               #[instrument(skip(self), level = "debug")]
      .               fn closure_trait_ref_unnormalized(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
      .                   substs: SubstsRef<'tcx>,
      .               ) -> ty::PolyTraitRef<'tcx> {
    132 ( 0.00%)          let closure_sig = substs.as_closure().sig();
      .           
      .                   debug!(?closure_sig);
      .           
      .                   // (1) Feels icky to skip the binder here, but OTOH we know
      .                   // that the self-type is an unboxed closure type and hence is
      .                   // in fact unparameterized (or at least does not reference any
      .                   // regions bound in the obligation). Still probably some
      .                   // refactoring could make this nicer.
    440 ( 0.00%)          closure_trait_ref_and_return_type(
      .                       self.tcx(),
    264 ( 0.00%)              obligation.predicate.def_id(),
     44 ( 0.00%)              obligation.predicate.skip_binder().self_ty(), // (1)
    176 ( 0.00%)              closure_sig,
      .                       util::TupleArgumentsFlag::No,
      .                   )
      .                   .map_bound(|(trait_ref, _)| trait_ref)
      .               }
      .           
      .               fn generator_trait_ref_unnormalized(
      .                   &mut self,
      .                   obligation: &TraitObligation<'tcx>,
-- line 2291 ----------------------------------------
-- line 2307 ----------------------------------------
      .                   )
      .                   .map_bound(|(trait_ref, ..)| trait_ref)
      .               }
      .           
      .               /// Returns the obligations that are implied by instantiating an
      .               /// impl or trait. The obligations are substituted and fully
      .               /// normalized. This is used when confirming an impl or default
      .               /// impl.
 53,820 ( 0.01%)      #[tracing::instrument(level = "debug", skip(self, cause, param_env))]
      .               fn impl_or_trait_obligations(
      .                   &mut self,
      .                   cause: ObligationCause<'tcx>,
      .                   recursion_depth: usize,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   def_id: DefId,           // of impl or trait
      .                   substs: SubstsRef<'tcx>, // for impl or trait
      .               ) -> Vec<PredicateObligation<'tcx>> {
-- line 2323 ----------------------------------------
-- line 2334 ----------------------------------------
      .                   //    V: Iterator, V: Sized,
      .                   //    <U as Iterator>::Item: Copy
      .                   // When we substitute, say, `V => IntoIter<u32>, U => $0`, the last
      .                   // obligation will normalize to `<$0 as Iterator>::Item = $1` and
      .                   // `$1: Copy`, so we must ensure the obligations are emitted in
      .                   // that order.
      .                   let predicates = tcx.predicates_of(def_id);
      .                   debug!(?predicates);
  2,340 ( 0.00%)          assert_eq!(predicates.parent, None);
  7,020 ( 0.00%)          let mut obligations = Vec::with_capacity(predicates.predicates.len());
      .                   for (predicate, _) in predicates.predicates {
      .                       debug!(?predicate);
 36,130 ( 0.01%)              let predicate = normalize_with_depth_to(
      .                           self,
      .                           param_env,
      .                           cause.clone(),
      .                           recursion_depth,
  7,226 ( 0.00%)                  predicate.subst(tcx, substs),
      .                           &mut obligations,
      .                       );
 72,260 ( 0.02%)              obligations.push(Obligation {
      .                           cause: cause.clone(),
      .                           recursion_depth,
      .                           param_env,
      .                           predicate,
      .                       });
      .                   }
      .           
      .                   // We are performing deduplication here to avoid exponential blowups
-- line 2362 ----------------------------------------
-- line 2363 ----------------------------------------
      .                   // (#38528) from happening, but the real cause of the duplication is
      .                   // unknown. What we know is that the deduplication avoids exponential
      .                   // amount of predicates being propagated when processing deeply nested
      .                   // types.
      .                   //
      .                   // This code is hot enough that it's worth avoiding the allocation
      .                   // required for the FxHashSet when possible. Special-casing lengths 0,
      .                   // 1 and 2 covers roughly 75-80% of the cases.
  5,361 ( 0.00%)          if obligations.len() <= 1 {
      .                       // No possibility of duplicates.
  1,520 ( 0.00%)          } else if obligations.len() == 2 {
      .                       // Only two elements. Drop the second if they are equal.
      .                       if obligations[0] == obligations[1] {
      .                           obligations.truncate(1);
      .                       }
      .                   } else {
      .                       // Three or more elements. Use a general deduplication process.
      .                       let mut seen = FxHashSet::default();
  1,314 ( 0.00%)              obligations.retain(|i| seen.insert(i.clone()));
      .                   }
      .           
  9,360 ( 0.00%)          obligations
      .               }
      .           }
      .           
      .           trait TraitObligationExt<'tcx> {
      .               fn derived_cause(
      .                   &self,
      .                   variant: fn(DerivedObligationCause<'tcx>) -> ObligationCauseCode<'tcx>,
      .               ) -> ObligationCause<'tcx>;
-- line 2392 ----------------------------------------
-- line 2408 ----------------------------------------
      .                    */
      .           
      .                   let obligation = self;
      .           
      .                   // NOTE(flaper87): As of now, it keeps track of the whole error
      .                   // chain. Ideally, we should have a way to configure this either
      .                   // by using -Z verbose or just a CLI argument.
      .                   let derived_cause = DerivedObligationCause {
  9,528 ( 0.00%)              parent_trait_pred: obligation.predicate,
  4,722 ( 0.00%)              parent_code: obligation.cause.clone_code(),
      .                   };
      .                   let derived_code = variant(derived_cause);
 28,542 ( 0.01%)          ObligationCause::new(obligation.cause.span, obligation.cause.body_id, derived_code)
      .               }
      .           }
      .           
      .           impl<'o, 'tcx> TraitObligationStack<'o, 'tcx> {
      .               fn list(&'o self) -> TraitObligationStackList<'o, 'tcx> {
      .                   TraitObligationStackList::with(self)
      .               }
      .           
      .               fn cache(&self) -> &'o ProvisionalEvaluationCache<'tcx> {
  2,673 ( 0.00%)          self.previous.cache
      .               }
      .           
      .               fn iter(&'o self) -> TraitObligationStackList<'o, 'tcx> {
      .                   self.list()
      .               }
      .           
      .               /// Indicates that attempting to evaluate this stack entry
      .               /// required accessing something from the stack at depth `reached_depth`.
-- line 2438 ----------------------------------------
-- line 2540 ----------------------------------------
      .               /// evaluation. When we create an entry in the evaluation cache using this provisional
      .               /// cache entry (see `on_completion`), we use this `dep_node` to ensure that future reads from
      .               /// the cache will have all of the necessary incr comp dependencies tracked.
      .               dep_node: DepNodeIndex,
      .           }
      .           
      .           impl<'tcx> Default for ProvisionalEvaluationCache<'tcx> {
      .               fn default() -> Self {
  5,776 ( 0.00%)          Self { dfn: Cell::new(0), map: Default::default() }
      .               }
      .           }
      .           
      .           impl<'tcx> ProvisionalEvaluationCache<'tcx> {
      .               /// Get the next DFN in sequence (basically a counter).
      .               fn next_dfn(&self) -> usize {
  2,583 ( 0.00%)          let result = self.dfn.get();
 10,332 ( 0.00%)          self.dfn.set(result + 1);
      .                   result
      .               }
      .           
      .               /// Check the provisional cache for any result for
      .               /// `fresh_trait_ref`. If there is a hit, then you must consider
      .               /// it an access to the stack slots at depth
      .               /// `reached_depth` (from the returned value).
      .               fn get_provisional(
-- line 2564 ----------------------------------------
-- line 2663 ----------------------------------------
      .               fn on_completion(
      .                   &self,
      .                   dfn: usize,
      .                   mut op: impl FnMut(ty::PolyTraitPredicate<'tcx>, EvaluationResult, DepNodeIndex),
      .               ) {
      .                   debug!(?dfn, "on_completion");
      .           
      .                   for (fresh_trait_pred, eval) in
  5,943 ( 0.00%)              self.map.borrow_mut().drain_filter(|_k, eval| eval.from_dfn >= dfn)
      .                   {
      .                       debug!(?fresh_trait_pred, ?eval, "on_completion");
      .           
      .                       op(fresh_trait_pred, eval.result, eval.dep_node);
      .                   }
      .               }
      .           }
      .           
-- line 2679 ----------------------------------------
-- line 2692 ----------------------------------------
      .                   TraitObligationStackList { cache: r.cache(), head: Some(r) }
      .               }
      .           
      .               fn head(&self) -> Option<&'o TraitObligationStack<'o, 'tcx>> {
      .                   self.head
      .               }
      .           
      .               fn depth(&self) -> usize {
  7,129 ( 0.00%)          if let Some(head) = self.head { head.depth } else { 0 }
      .               }
      .           }
      .           
      .           impl<'o, 'tcx> Iterator for TraitObligationStackList<'o, 'tcx> {
      .               type Item = &'o TraitObligationStack<'o, 'tcx>;
      .           
      .               fn next(&mut self) -> Option<&'o TraitObligationStack<'o, 'tcx>> {
  4,465 ( 0.00%)          let o = self.head?;
    959 ( 0.00%)          *self = o.previous;
      .                   Some(o)
      .               }
      .           }
      .           
      .           impl<'o, 'tcx> fmt::Debug for TraitObligationStack<'o, 'tcx> {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   write!(f, "TraitObligationStack({:?})", self.obligation)
      .               }
-- line 2717 ----------------------------------------

136,430 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs
--------------------------------------------------------------------------------
Ir               

-- line 36 ----------------------------------------
      .               fn with_cause<F, R>(&mut self, _cause: Cause, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R,
      .               {
      .                   f(self)
      .               }
      .           
      .               /// Generic relation routine suitable for most anything.
 40,723 ( 0.01%)      fn relate<T: Relate<'tcx>>(&mut self, a: T, b: T) -> RelateResult<'tcx, T> {
208,452 ( 0.04%)          Relate::relate(self, a, b)
 33,544 ( 0.01%)      }
      .           
      .               /// Relate the two substitutions for the given item. The default
      .               /// is to look up the variance for the item and proceed
      .               /// accordingly.
  3,490 ( 0.00%)      fn relate_item_substs(
      .                   &mut self,
      .                   item_def_id: DefId,
      .                   a_subst: SubstsRef<'tcx>,
      .                   b_subst: SubstsRef<'tcx>,
      .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
      .                   debug!(
      .                       "relate_item_substs(item_def_id={:?}, a_subst={:?}, b_subst={:?})",
      .                       item_def_id, a_subst, b_subst
      .                   );
      .           
      .                   let tcx = self.tcx();
      .                   let opt_variances = tcx.variances_of(item_def_id);
  1,396 ( 0.00%)          relate_substs(self, Some((item_def_id, opt_variances)), a_subst, b_subst)
  3,141 ( 0.00%)      }
      .           
      .               /// Switch variance for the purpose of relating `a` and `b`.
      .               fn relate_with_variance<T: Relate<'tcx>>(
      .                   &mut self,
      .                   variance: ty::Variance,
      .                   info: ty::VarianceDiagInfo<'tcx>,
      .                   a: T,
      .                   b: T,
-- line 73 ----------------------------------------
-- line 108 ----------------------------------------
      .                   a: Self,
      .                   b: Self,
      .               ) -> RelateResult<'tcx, Self>;
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // Relate impls
      .           
 18,737 ( 0.00%)  pub fn relate_type_and_mut<'tcx, R: TypeRelation<'tcx>>(
      .               relation: &mut R,
      .               a: ty::TypeAndMut<'tcx>,
      .               b: ty::TypeAndMut<'tcx>,
      .               base_ty: Ty<'tcx>,
      .           ) -> RelateResult<'tcx, ty::TypeAndMut<'tcx>> {
      .               debug!("{}.mts({:?}, {:?})", relation.tag(), a, b);
  3,487 ( 0.00%)      if a.mutbl != b.mutbl {
    422 ( 0.00%)          Err(TypeError::Mutability)
      .               } else {
      .                   let mutbl = a.mutbl;
      .                   let (variance, info) = match mutbl {
      .                       ast::Mutability::Not => (ty::Covariant, ty::VarianceDiagInfo::None),
      .                       ast::Mutability::Mut => {
      .                           (ty::Invariant, ty::VarianceDiagInfo::Invariant { ty: base_ty, param_index: 0 })
      .                       }
      .                   };
  1,278 ( 0.00%)          let ty = relation.relate_with_variance(variance, info, a.ty, b.ty)?;
  8,042 ( 0.00%)          Ok(ty::TypeAndMut { ty, mutbl })
      .               }
 18,855 ( 0.00%)  }
      .           
      .           pub fn relate_substs<'tcx, R: TypeRelation<'tcx>>(
      .               relation: &mut R,
      .               variances: Option<(DefId, &[ty::Variance])>,
      .               a_subst: SubstsRef<'tcx>,
      .               b_subst: SubstsRef<'tcx>,
      .           ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
 48,342 ( 0.01%)      let tcx = relation.tcx();
 32,174 ( 0.01%)      let mut cached_ty = None;
      .           
      .               let params = iter::zip(a_subst, b_subst).enumerate().map(|(i, (a, b))| {
250,545 ( 0.05%)          let (variance, variance_info) = match variances {
  1,906 ( 0.00%)              Some((ty_def_id, variances)) => {
  2,859 ( 0.00%)                  let variance = variances[i];
    953 ( 0.00%)                  let variance_info = if variance == ty::Invariant {
      .                               let ty =
    785 ( 0.00%)                          cached_ty.get_or_insert_with(|| tcx.type_of(ty_def_id).subst(tcx, a_subst));
      .                               ty::VarianceDiagInfo::Invariant { ty, param_index: i.try_into().unwrap() }
      .                           } else {
      .                               ty::VarianceDiagInfo::default()
      .                           };
      .                           (variance, variance_info)
      .                       }
      .                       None => (ty::Invariant, ty::VarianceDiagInfo::default()),
      .                   };
 46,999 ( 0.01%)          relation.relate_with_variance(variance, variance_info, a, b)
      .               });
      .           
      .               tcx.mk_substs(params)
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {
  1,066 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: ty::FnSig<'tcx>,
      .                   b: ty::FnSig<'tcx>,
      .               ) -> RelateResult<'tcx, ty::FnSig<'tcx>> {
      .                   let tcx = relation.tcx();
      .           
    492 ( 0.00%)          if a.c_variadic != b.c_variadic {
      .                       return Err(TypeError::VariadicMismatch(expected_found(
      .                           relation,
      .                           a.c_variadic,
      .                           b.c_variadic,
      .                       )));
      .                   }
    470 ( 0.00%)          let unsafety = relation.relate(a.unsafety, b.unsafety)?;
      .                   let abi = relation.relate(a.abi, b.abi)?;
      .           
    667 ( 0.00%)          if a.inputs().len() != b.inputs().len() {
      .                       return Err(TypeError::ArgCount);
      .                   }
      .           
    738 ( 0.00%)          let inputs_and_output = iter::zip(a.inputs(), b.inputs())
    346 ( 0.00%)              .map(|(&a, &b)| ((a, b), false))
    656 ( 0.00%)              .chain(iter::once(((a.output(), b.output()), true)))
    131 ( 0.00%)              .map(|((a, b), is_output)| {
    131 ( 0.00%)                  if is_output {
      .                               relation.relate(a, b)
      .                           } else {
      .                               relation.relate_with_variance(
      .                                   ty::Contravariant,
      .                                   ty::VarianceDiagInfo::default(),
      .                                   a,
      .                                   b,
      .                               )
      .                           }
      .                       })
      .                       .enumerate()
    487 ( 0.00%)              .map(|(i, r)| match r {
      .                           Err(TypeError::Sorts(exp_found) | TypeError::ArgumentSorts(exp_found, _)) => {
      .                               Err(TypeError::ArgumentSorts(exp_found, i))
      .                           }
      .                           Err(TypeError::Mutability | TypeError::ArgumentMutability(_)) => {
      .                               Err(TypeError::ArgumentMutability(i))
      .                           }
    814 ( 0.00%)                  r => r,
      .                       });
    645 ( 0.00%)          Ok(ty::FnSig {
      .                       inputs_and_output: tcx.mk_type_list(inputs_and_output)?,
     82 ( 0.00%)              c_variadic: a.c_variadic,
      .                       unsafety,
      .                       abi,
      .                   })
    738 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for ty::BoundConstness {
      .               fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: ty::BoundConstness,
      .                   b: ty::BoundConstness,
      .               ) -> RelateResult<'tcx, ty::BoundConstness> {
-- line 229 ----------------------------------------
-- line 236 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for ast::Unsafety {
      .               fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: ast::Unsafety,
      .                   b: ast::Unsafety,
      .               ) -> RelateResult<'tcx, ast::Unsafety> {
     82 ( 0.00%)          if a != b {
      .                       Err(TypeError::UnsafetyMismatch(expected_found(relation, a, b)))
      .                   } else {
      .                       Ok(a)
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for abi::Abi {
-- line 252 ----------------------------------------
-- line 255 ----------------------------------------
      .                   a: abi::Abi,
      .                   b: abi::Abi,
      .               ) -> RelateResult<'tcx, abi::Abi> {
      .                   if a == b { Ok(a) } else { Err(TypeError::AbiMismatch(expected_found(relation, a, b))) }
      .               }
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for ty::ProjectionTy<'tcx> {
  1,372 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: ty::ProjectionTy<'tcx>,
      .                   b: ty::ProjectionTy<'tcx>,
      .               ) -> RelateResult<'tcx, ty::ProjectionTy<'tcx>> {
    294 ( 0.00%)          if a.item_def_id != b.item_def_id {
      .                       Err(TypeError::ProjectionMismatched(expected_found(
      .                           relation,
      .                           a.item_def_id,
      .                           b.item_def_id,
      .                       )))
      .                   } else {
      .                       let substs = relation.relate(a.substs, b.substs)?;
    392 ( 0.00%)              Ok(ty::ProjectionTy { item_def_id: a.item_def_id, substs: &substs })
      .                   }
    882 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for ty::ExistentialProjection<'tcx> {
      .               fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: ty::ExistentialProjection<'tcx>,
      .                   b: ty::ExistentialProjection<'tcx>,
      .               ) -> RelateResult<'tcx, ty::ExistentialProjection<'tcx>> {
-- line 286 ----------------------------------------
-- line 304 ----------------------------------------
      .                           b.substs,
      .                       )?;
      .                       Ok(ty::ExistentialProjection { item_def_id: a.item_def_id, substs, term })
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for ty::TraitRef<'tcx> {
 55,342 ( 0.01%)      fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: ty::TraitRef<'tcx>,
      .                   b: ty::TraitRef<'tcx>,
      .               ) -> RelateResult<'tcx, ty::TraitRef<'tcx>> {
      .                   // Different traits cannot be related.
 11,841 ( 0.00%)          if a.def_id != b.def_id {
     27 ( 0.00%)              Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))
      .                   } else {
  3,944 ( 0.00%)              let substs = relate_substs(relation, None, a.substs, b.substs)?;
 12,560 ( 0.00%)              Ok(ty::TraitRef { def_id: a.def_id, substs })
      .                   }
 35,577 ( 0.01%)      }
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for ty::ExistentialTraitRef<'tcx> {
      .               fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: ty::ExistentialTraitRef<'tcx>,
      .                   b: ty::ExistentialTraitRef<'tcx>,
      .               ) -> RelateResult<'tcx, ty::ExistentialTraitRef<'tcx>> {
-- line 332 ----------------------------------------
-- line 358 ----------------------------------------
      .           
      .           impl<'tcx> Relate<'tcx> for Ty<'tcx> {
      .               #[inline]
      .               fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: Ty<'tcx>,
      .                   b: Ty<'tcx>,
      .               ) -> RelateResult<'tcx, Ty<'tcx>> {
107,613 ( 0.02%)          relation.tys(a, b)
      .               }
      .           }
      .           
      .           /// The main "type relation" routine. Note that this does not handle
      .           /// inference artifacts, so you should filter those out before calling
      .           /// it.
287,536 ( 0.06%)  pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(
      .               relation: &mut R,
      .               a: Ty<'tcx>,
      .               b: Ty<'tcx>,
      .           ) -> RelateResult<'tcx, Ty<'tcx>> {
      .               let tcx = relation.tcx();
      .               debug!("super_relate_tys: a={:?} b={:?}", a, b);
642,170 ( 0.14%)      match (a.kind(), b.kind()) {
      .                   (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {
      .                       // The caller should handle these cases!
      .                       bug!("var types encountered in super_relate_tys")
      .                   }
      .           
      .                   (ty::Bound(..), _) | (_, ty::Bound(..)) => {
      .                       bug!("bound types encountered in super_relate_tys")
      .                   }
-- line 388 ----------------------------------------
-- line 391 ----------------------------------------
      .           
      .                   (&ty::Never, _)
      .                   | (&ty::Char, _)
      .                   | (&ty::Bool, _)
      .                   | (&ty::Int(_), _)
      .                   | (&ty::Uint(_), _)
      .                   | (&ty::Float(_), _)
      .                   | (&ty::Str, _)
  2,393 ( 0.00%)              if a == b =>
      .                   {
      .                       Ok(a)
      .                   }
      .           
     20 ( 0.00%)          (&ty::Param(ref a_p), &ty::Param(ref b_p)) if a_p.index == b_p.index => Ok(a),
      .           
      .                   (ty::Placeholder(p1), ty::Placeholder(p2)) if p1 == p2 => Ok(a),
      .           
281,306 ( 0.06%)          (&ty::Adt(a_def, a_substs), &ty::Adt(b_def, b_substs)) if a_def == b_def => {
 86,653 ( 0.02%)              let substs = relation.relate_item_substs(a_def.did, a_substs, b_substs)?;
      .                       Ok(tcx.mk_adt(a_def, substs))
      .                   }
      .           
      .                   (&ty::Foreign(a_id), &ty::Foreign(b_id)) if a_id == b_id => Ok(tcx.mk_foreign(a_id)),
      .           
      .                   (&ty::Dynamic(a_obj, a_region), &ty::Dynamic(b_obj, b_region)) => {
      .                       let region_bound = relation.with_cause(Cause::ExistentialRegionBound, |relation| {
      .                           relation.relate_with_variance(
-- line 417 ----------------------------------------
-- line 439 ----------------------------------------
      .                       // inside the binder so we can related them
      .                       let a_types = a_types.map_bound(GeneratorWitness);
      .                       let b_types = b_types.map_bound(GeneratorWitness);
      .                       // Then remove the GeneratorWitness for the result
      .                       let types = relation.relate(a_types, b_types)?.map_bound(|witness| witness.0);
      .                       Ok(tcx.mk_generator_witness(types))
      .                   }
      .           
    440 ( 0.00%)          (&ty::Closure(a_id, a_substs), &ty::Closure(b_id, b_substs)) if a_id == b_id => {
      .                       // All Closure types with the same id represent
      .                       // the (anonymous) type of the same closure expression. So
      .                       // all of their regions should be equated.
    110 ( 0.00%)              let substs = relation.relate(a_substs, b_substs)?;
      .                       Ok(tcx.mk_closure(a_id, &substs))
      .                   }
      .           
     56 ( 0.00%)          (&ty::RawPtr(a_mt), &ty::RawPtr(b_mt)) => {
     20 ( 0.00%)              let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;
      .                       Ok(tcx.mk_ptr(mt))
      .                   }
      .           
 33,050 ( 0.01%)          (&ty::Ref(a_r, a_ty, a_mutbl), &ty::Ref(b_r, b_ty, b_mutbl)) => {
 13,160 ( 0.00%)              let r = relation.relate_with_variance(
      .                           ty::Contravariant,
      .                           ty::VarianceDiagInfo::default(),
      .                           a_r,
      .                           b_r,
      .                       )?;
      .                       let a_mt = ty::TypeAndMut { ty: a_ty, mutbl: a_mutbl };
      .                       let b_mt = ty::TypeAndMut { ty: b_ty, mutbl: b_mutbl };
 22,408 ( 0.00%)              let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;
      .                       Ok(tcx.mk_ref(r, mt))
      .                   }
      .           
  1,424 ( 0.00%)          (&ty::Array(a_t, sz_a), &ty::Array(b_t, sz_b)) => {
      .                       let t = relation.relate(a_t, b_t)?;
    574 ( 0.00%)              match relation.relate(sz_a, sz_b) {
    765 ( 0.00%)                  Ok(sz) => Ok(tcx.mk_ty(ty::Array(t, sz))),
      .                           Err(err) => {
      .                               // Check whether the lengths are both concrete/known values,
      .                               // but are unequal, for better diagnostics.
      .                               //
      .                               // It might seem dubious to eagerly evaluate these constants here,
      .                               // we however cannot end up with errors in `Relate` during both
      .                               // `type_of` and `predicates_of`. This means that evaluating the
      .                               // constants should not cause cycle errors here.
    160 ( 0.00%)                      let sz_a = sz_a.try_eval_usize(tcx, relation.param_env());
     96 ( 0.00%)                      let sz_b = sz_b.try_eval_usize(tcx, relation.param_env());
    192 ( 0.00%)                      match (sz_a, sz_b) {
    128 ( 0.00%)                          (Some(sz_a_val), Some(sz_b_val)) if sz_a_val != sz_b_val => Err(
      .                                       TypeError::FixedArraySize(expected_found(relation, sz_a_val, sz_b_val)),
      .                                   ),
      .                                   _ => Err(err),
      .                               }
      .                           }
      .                       }
      .                   }
      .           
  1,509 ( 0.00%)          (&ty::Slice(a_t), &ty::Slice(b_t)) => {
      .                       let t = relation.relate(a_t, b_t)?;
      .                       Ok(tcx.mk_slice(t))
      .                   }
      .           
    850 ( 0.00%)          (&ty::Tuple(as_), &ty::Tuple(bs)) => {
    850 ( 0.00%)              if as_.len() == bs.len() {
      .                           Ok(tcx.mk_tup(
  2,597 ( 0.00%)                      iter::zip(as_, bs).map(|(a, b)| relation.relate(a.expect_ty(), b.expect_ty())),
      .                           )?)
      .                       } else if !(as_.is_empty() || bs.is_empty()) {
      .                           Err(TypeError::TupleSize(expected_found(relation, as_.len(), bs.len())))
      .                       } else {
      .                           Err(TypeError::Sorts(expected_found(relation, a, b)))
      .                       }
      .                   }
      .           
-- line 513 ----------------------------------------
-- line 514 ----------------------------------------
      .                   (&ty::FnDef(a_def_id, a_substs), &ty::FnDef(b_def_id, b_substs))
      .                       if a_def_id == b_def_id =>
      .                   {
      .                       let substs = relation.relate_item_substs(a_def_id, a_substs, b_substs)?;
      .                       Ok(tcx.mk_fn_def(a_def_id, substs))
      .                   }
      .           
      .                   (&ty::FnPtr(a_fty), &ty::FnPtr(b_fty)) => {
  1,158 ( 0.00%)              let fty = relation.relate(a_fty, b_fty)?;
      .                       Ok(tcx.mk_fn_ptr(fty))
      .                   }
      .           
      .                   // these two are already handled downstream in case of lazy normalization
      .                   (&ty::Projection(a_data), &ty::Projection(b_data)) => {
      .                       let projection_ty = relation.relate(a_data, b_data)?;
      .                       Ok(tcx.mk_projection(projection_ty.item_def_id, projection_ty.substs))
      .                   }
-- line 530 ----------------------------------------
-- line 533 ----------------------------------------
      .                       if a_def_id == b_def_id =>
      .                   {
      .                       let substs = relate_substs(relation, None, a_substs, b_substs)?;
      .                       Ok(tcx.mk_opaque(a_def_id, substs))
      .                   }
      .           
      .                   _ => Err(TypeError::Sorts(expected_found(relation, a, b))),
      .               }
323,478 ( 0.07%)  }
      .           
      .           /// The main "const relation" routine. Note that this does not handle
      .           /// inference artifacts, so you should filter those out before calling
      .           /// it.
  2,840 ( 0.00%)  pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(
      .               relation: &mut R,
      .               a: &'tcx ty::Const<'tcx>,
      .               b: &'tcx ty::Const<'tcx>,
      .           ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
      .               debug!("{}.super_relate_consts(a = {:?}, b = {:?})", relation.tag(), a, b);
      .               let tcx = relation.tcx();
      .           
      .               // FIXME(oli-obk): once const generics can have generic types, this assertion
      .               // will likely get triggered. Move to `normalize_erasing_regions` at that point.
    568 ( 0.00%)      let a_ty = tcx.erase_regions(a.ty);
    568 ( 0.00%)      let b_ty = tcx.erase_regions(b.ty);
    284 ( 0.00%)      if a_ty != b_ty {
      .                   relation.tcx().sess.delay_span_bug(
      .                       DUMMY_SP,
      .                       &format!("cannot relate constants of different types: {} != {}", a_ty, b_ty),
      .                   );
      .               }
      .           
      .               let eagerly_eval = |x: &'tcx ty::Const<'tcx>| x.eval(tcx, relation.param_env());
    284 ( 0.00%)      let a = eagerly_eval(a);
    568 ( 0.00%)      let b = eagerly_eval(b);
      .           
      .               // Currently, the values that can be unified are primitive types,
      .               // and those that derive both `PartialEq` and `Eq`, corresponding
      .               // to structural-match types.
  3,124 ( 0.00%)      let is_match = match (a.val, b.val) {
      .                   (ty::ConstKind::Infer(_), _) | (_, ty::ConstKind::Infer(_)) => {
      .                       // The caller should handle these cases!
      .                       bug!("var types encountered in super_relate_consts: {:?} {:?}", a, b)
      .                   }
      .           
      .                   (ty::ConstKind::Error(_), _) => return Ok(a),
      .                   (_, ty::ConstKind::Error(_)) => return Ok(b),
      .           
-- line 580 ----------------------------------------
-- line 608 ----------------------------------------
      .                               substs,
      .                               promoted: au.promoted,
      .                           }),
      .                           ty: a.ty,
      .                       }));
      .                   }
      .                   _ => false,
      .               };
  1,672 ( 0.00%)      if is_match { Ok(a) } else { Err(TypeError::ConstMismatch(expected_found(relation, a, b))) }
  2,556 ( 0.00%)  }
      .           
      .           fn check_const_value_eq<'tcx, R: TypeRelation<'tcx>>(
      .               relation: &mut R,
      .               a_val: ConstValue<'tcx>,
      .               b_val: ConstValue<'tcx>,
      .               // FIXME(oli-obk): these arguments should go away with valtrees
      .               a: &'tcx ty::Const<'tcx>,
      .               b: &'tcx ty::Const<'tcx>,
      .               // FIXME(oli-obk): this should just be `bool` with valtrees
      .           ) -> RelateResult<'tcx, bool> {
    284 ( 0.00%)      let tcx = relation.tcx();
  3,124 ( 0.00%)      Ok(match (a_val, b_val) {
  6,248 ( 0.00%)          (ConstValue::Scalar(Scalar::Int(a_val)), ConstValue::Scalar(Scalar::Int(b_val))) => {
    284 ( 0.00%)              a_val == b_val
      .                   }
      .                   (
      .                       ConstValue::Scalar(Scalar::Ptr(a_val, _a_size)),
      .                       ConstValue::Scalar(Scalar::Ptr(b_val, _b_size)),
      .                   ) => {
      .                       a_val == b_val
      .                           || match (tcx.global_alloc(a_val.provenance), tcx.global_alloc(b_val.provenance)) {
      .                               (GlobalAlloc::Function(a_instance), GlobalAlloc::Function(b_instance)) => {
-- line 639 ----------------------------------------
-- line 737 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for SubstsRef<'tcx> {
      .               fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: SubstsRef<'tcx>,
      .                   b: SubstsRef<'tcx>,
      .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
    153 ( 0.00%)          relate_substs(relation, None, a, b)
      .               }
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for ty::Region<'tcx> {
      .               fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: ty::Region<'tcx>,
      .                   b: ty::Region<'tcx>,
      .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
 15,811 ( 0.00%)          relation.regions(a, b)
      .               }
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for &'tcx ty::Const<'tcx> {
      .               fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: &'tcx ty::Const<'tcx>,
      .                   b: &'tcx ty::Const<'tcx>,
      .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
    942 ( 0.00%)          relation.consts(a, b)
      .               }
      .           }
      .           
      .           impl<'tcx, T: Relate<'tcx>> Relate<'tcx> for ty::Binder<'tcx, T> {
      .               fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: ty::Binder<'tcx, T>,
      .                   b: ty::Binder<'tcx, T>,
      .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>> {
    297 ( 0.00%)          relation.binders(a, b)
      .               }
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for GenericArg<'tcx> {
183,726 ( 0.04%)      fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: GenericArg<'tcx>,
      .                   b: GenericArg<'tcx>,
      .               ) -> RelateResult<'tcx, GenericArg<'tcx>> {
259,334 ( 0.05%)          match (a.unpack(), b.unpack()) {
      .                       (GenericArgKind::Lifetime(a_lt), GenericArgKind::Lifetime(b_lt)) => {
      .                           Ok(relation.relate(a_lt, b_lt)?.into())
      .                       }
      .                       (GenericArgKind::Type(a_ty), GenericArgKind::Type(b_ty)) => {
    295 ( 0.00%)                  Ok(relation.relate(a_ty, b_ty)?.into())
      .                       }
      .                       (GenericArgKind::Const(a_ct), GenericArgKind::Const(b_ct)) => {
      .                           Ok(relation.relate(a_ct, b_ct)?.into())
      .                       }
      .                       (GenericArgKind::Lifetime(unpacked), x) => {
      .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
      .                       }
      .                       (GenericArgKind::Type(unpacked), x) => {
      .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
      .                       }
      .                       (GenericArgKind::Const(unpacked), x) => {
      .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
      .                       }
      .                   }
212,350 ( 0.04%)      }
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for ty::ImplPolarity {
      .               fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: ty::ImplPolarity,
      .                   b: ty::ImplPolarity,
      .               ) -> RelateResult<'tcx, ty::ImplPolarity> {
-- line 813 ----------------------------------------
-- line 815 ----------------------------------------
      .                       Err(TypeError::PolarityMismatch(expected_found(relation, a, b)))
      .                   } else {
      .                       Ok(a)
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for ty::TraitPredicate<'tcx> {
    121 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: ty::TraitPredicate<'tcx>,
      .                   b: ty::TraitPredicate<'tcx>,
      .               ) -> RelateResult<'tcx, ty::TraitPredicate<'tcx>> {
      .                   Ok(ty::TraitPredicate {
     55 ( 0.00%)              trait_ref: relation.relate(a.trait_ref, b.trait_ref)?,
      .                       constness: relation.relate(a.constness, b.constness)?,
      .                       polarity: relation.relate(a.polarity, b.polarity)?,
      .                   })
     99 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Relate<'tcx> for ty::Term<'tcx> {
      .               fn relate<R: TypeRelation<'tcx>>(
      .                   relation: &mut R,
      .                   a: Self,
      .                   b: Self,
      .               ) -> RelateResult<'tcx, Self> {
-- line 841 ----------------------------------------
-- line 862 ----------------------------------------
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // Error handling
      .           
      .           pub fn expected_found<'tcx, R, T>(relation: &mut R, a: T, b: T) -> ExpectedFound<T>
      .           where
      .               R: TypeRelation<'tcx>,
      .           {
     18 ( 0.00%)      ExpectedFound::new(relation.a_is_expected(), a, b)
      .           }

741,901 ( 0.16%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .                   #[inline]
        .                   pub fn $fn_name(
        .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
        .                       mut value: $int_ty,
        .                   ) -> &[u8] {
        .                       let mut i = 0;
        .           
        .                       loop {
   70,388 ( 0.01%)                  if value < 0x80 {
        .                               unsafe {
   35,476 ( 0.01%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
        .                               }
        .           
   47,236 ( 0.01%)                      i += 1;
        .                               break;
        .                           } else {
        .                               unsafe {
   30,748 ( 0.01%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
        .                               }
        .           
   13,747 ( 0.00%)                      value >>= 7;
        .                               i += 1;
        .                           }
        .                       }
        .           
        .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
        .                   }
        .               };
        .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
        .           macro_rules! impl_read_unsigned_leb128 {
        .               ($fn_name:ident, $int_ty:ty) => {
        .                   #[inline]
        .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
        .                       // The first iteration of this loop is unpeeled. This is a
        .                       // performance win because this code is hot and integer values less
        .                       // than 128 are very common, typically occurring 50-80% or more of
        .                       // the time, even for u64 and u128.
1,519,344 ( 0.32%)              let byte = slice[*position];
  759,672 ( 0.16%)              *position += 1;
  759,672 ( 0.16%)              if (byte & 0x80) == 0 {
    2,314 ( 0.00%)                  return byte as $int_ty;
        .                       }
    1,166 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
        .                       let mut shift = 7;
        .                       loop {
  532,851 ( 0.11%)                  let byte = slice[*position];
  347,916 ( 0.07%)                  *position += 1;
  355,234 ( 0.07%)                  if (byte & 0x80) == 0 {
  284,194 ( 0.06%)                      result |= (byte as $int_ty) << shift;
        .                               return result;
        .                           } else {
        .                               result |= ((byte & 0x7F) as $int_ty) << shift;
        .                           }
        .                           shift += 7;
        .                       }
        .                   }
        .               };
-- line 80 ----------------------------------------

  577,586 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                 

-- line 186 ----------------------------------------
        .           /// // use the values stored in map
        .           /// ```
        .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
        .               pub(crate) hash_builder: S,
        .               pub(crate) table: RawTable<(K, V), A>,
        .           }
        .           
        .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
      208 ( 0.00%)      fn clone(&self) -> Self {
      274 ( 0.00%)          HashMap {
        .                       hash_builder: self.hash_builder.clone(),
       42 ( 0.00%)              table: self.table.clone(),
        .                   }
      234 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   self.table.clone_from(&source.table);
        .           
        .                   // Update hash_builder only if we successfully cloned all elements.
        .                   self.hash_builder.clone_from(&source.hash_builder);
        .               }
        .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash,
        .               S: BuildHasher,
        .           {
   30,770 ( 0.01%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
   74,685 ( 0.02%)      move |x| k.eq(x.0.borrow())
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
   74,934 ( 0.02%)      move |x| k.eq(x.borrow())
        .           }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
        .               use core::hash::Hasher;
        .               let mut state = hash_builder.build_hasher();
        .               val.hash(&mut state);
        .               state.finish()
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           #[cfg_attr(feature = "inline-more", inline)]
        4 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
        .               S: BuildHasher,
        .           {
        .               hash_builder.hash_one(val)
        8 ( 0.00%)  }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
        .           where
        .               K: Hash,
        .               S: BuildHasher,
        .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               ///
        .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub const fn with_hasher(hash_builder: S) -> Self {
   33,718 ( 0.01%)          Self {
        .                       hash_builder,
        .                       table: RawTable::new(),
        .                   }
        .               }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys.
        .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
        .               /// use hashbrown::hash_map::DefaultHashBuilder;
        .               ///
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
       76 ( 0.00%)          Self {
        .                       hash_builder,
        .                       table: RawTable::new_in(alloc),
        .                   }
        .               }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys. It will be allocated with the given allocator.
        .               ///
-- line 453 ----------------------------------------
-- line 663 ----------------------------------------
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert_eq!(a.len(), 0);
        .               /// a.insert(1, "a");
        .               /// assert_eq!(a.len(), 1);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn len(&self) -> usize {
    2,915 ( 0.00%)          self.table.len()
        .               }
        .           
        .               /// Returns `true` if the map contains no elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert!(a.is_empty());
        .               /// a.insert(1, "a");
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn is_empty(&self) -> bool {
   15,735 ( 0.00%)          self.len() == 0
        .               }
        .           
        .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
        .               /// allocated memory for reuse.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// a.insert(1, "a");
        .               /// a.clear();
        .               /// assert!(a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        6 ( 0.00%)      pub fn clear(&mut self) {
        .                   self.table.clear();
        6 ( 0.00%)      }
        .           
        .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
        .               /// The map cannot be used after calling this.
        .               /// The iterator element type is `K`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
        .               /// }
        .               ///
        .               /// assert_eq!(letters[&'s'], 2);
        .               /// assert_eq!(letters[&'t'], 3);
        .               /// assert_eq!(letters[&'u'], 1);
        .               /// assert_eq!(letters.get(&'y'), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
       64 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
        .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
       10 ( 0.00%)              Entry::Occupied(OccupiedEntry {
        .                           hash,
        .                           key: Some(key),
        .                           elem,
        .                           table: self,
        .                       })
        .                   } else {
       70 ( 0.00%)              Entry::Vacant(VacantEntry {
        .                           hash,
        .                           key,
        .                           table: self,
        .                       })
        .                   }
       80 ( 0.00%)      }
        .           
        .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
        .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  115,418 ( 0.02%)          match self.get_inner(k) {
        .                       Some(&(_, ref v)) => Some(v),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
  175,236 ( 0.04%)          if self.table.is_empty() {
        .                       None
        .                   } else {
        2 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
        .                       self.table.get(hash, equivalent_key(k))
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.contains_key(&1), true);
        .               /// assert_eq!(map.contains_key(&2), false);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
  139,983 ( 0.03%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   self.get_inner(k).is_some()
  166,874 ( 0.04%)      }
        .           
        .               /// Returns a mutable reference to the value corresponding to the key.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
        .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// if let Some(x) = map.get_mut(&1) {
        .               ///     *x = "b";
        .               /// }
        .               /// assert_eq!(map[&1], "b");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      109 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      327 ( 0.00%)          match self.get_inner_mut(k) {
        .                       Some(&mut (_, ref mut v)) => Some(v),
        .                       None => None,
        .                   }
      218 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
      109 ( 0.00%)          if self.table.is_empty() {
        .                       None
        .                   } else {
        .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
        .                       self.table.get_mut(hash, equivalent_key(k))
        .                   }
        .               }
        .           
        .               /// Attempts to get mutable references to `N` values in the map at once.
-- line 1219 ----------------------------------------
-- line 1495 ----------------------------------------
        .               /// assert_eq!(map.insert(37, "a"), None);
        .               /// assert_eq!(map.is_empty(), false);
        .               ///
        .               /// map.insert(37, "b");
        .               /// assert_eq!(map.insert(37, "c"), Some("b"));
        .               /// assert_eq!(map[&37], "c");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
1,249,623 ( 0.26%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
      140 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
       48 ( 0.00%)              Some(mem::replace(item, v))
        .                   } else {
  662,784 ( 0.14%)              self.table
  778,965 ( 0.16%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
   69,994 ( 0.01%)              None
        .                   }
1,177,562 ( 0.25%)      }
        .           
        .               /// Insert a key-value pair into the map without checking
        .               /// if the key already exists in the map.
        .               ///
        .               /// Returns a reference to the key and value just inserted.
        .               ///
        .               /// This operation is safe if a key does not exist in the map.
        .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.remove(&1), Some("a"));
        .               /// assert_eq!(map.remove(&1), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
    9,734 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  178,862 ( 0.04%)          match self.remove_entry(k) {
    6,363 ( 0.00%)              Some((_, v)) => Some(v),
    7,880 ( 0.00%)              None => None,
        .                   }
   22,016 ( 0.00%)      }
        .           
        .               /// Removes a key from the map, returning the stored key and value if the
        .               /// key was previously in the map.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
   56,262 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
        .               }
        .           }
        .           
        .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
        .               /// Creates a raw entry builder for the HashMap.
        .               ///
        .               /// Raw entries provide the lowest level of control for searching and
        .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
        .               /// Creates a `RawEntryMut` from the given key and its hash.
        .               #[inline]
        .               #[allow(clippy::wrong_self_convention)]
        .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
  629,240 ( 0.13%)          self.from_hash(hash, equivalent(k))
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
        .               /// Creates a `RawEntryMut` from the given hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
1,539,615 ( 0.32%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
        .                   self.search(hash, is_match)
1,692,160 ( 0.36%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
  191,236 ( 0.04%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
1,020,145 ( 0.21%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
        .                           elem,
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
   80,202 ( 0.02%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
        .                   self.from_key_hashed_nocheck(hash, k)
        .               }
        .           
        .               /// Access an entry by a key and its hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
  300,352 ( 0.06%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
  349,642 ( 0.07%)          self.from_hash(hash, equivalent(k))
  516,282 ( 0.11%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
        .               where
        .                   F: FnMut(&K) -> bool,
        .               {
  422,986 ( 0.09%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
        .                       Some(&(ref key, ref value)) => Some((key, value)),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Access an entry by hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
        .               /// and returns a mutable reference to it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::shadow_unrelated)]
        .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
        .               where
        .                   K: Hash,
        .                   S: BuildHasher,
        .               {
  131,159 ( 0.03%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
        .                       hash,
        .                       (key, value),
        .                       make_hasher::<K, _, V, S>(self.hash_builder),
        .                   );
        .                   (k, v)
        .               }
        .           
        .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
        .               /// map.insert("a", 1);
        .               /// map.insert("b", 2);
        .               /// map.insert("c", 3);
        .               ///
        .               /// // Not possible with .iter()
        .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      568 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
   11,042 ( 0.00%)          IntoIter {
    6,236 ( 0.00%)              inner: self.table.into_iter(),
        .                   }
    1,704 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
        .               type Item = (&'a K, &'a V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
   20,540 ( 0.00%)          match self.inner.next() {
        .                       Some(x) => unsafe {
        .                           let r = x.as_ref();
      176 ( 0.00%)                  Some((&r.0, &r.1))
        .                       },
        .                       None => None,
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
-- line 3006 ----------------------------------------
-- line 3051 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
        .               type Item = (K, V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(K, V)> {
      456 ( 0.00%)          self.inner.next()
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
        .                   f.debug_list().entries(self.iter()).finish()
        .               }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
        .               type Item = &'a K;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
       31 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match self.inner.next() {
        .                       Some((k, _)) => Some(k),
        .                       None => None,
        .                   }
       62 ( 0.00%)      }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 4557 ----------------------------------------
        .           /// keys with new values returned from the iterator.
        .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
        .           where
        .               K: Eq + Hash,
        .               S: BuildHasher,
        .               A: Allocator + Clone,
        .           {
        .               #[cfg_attr(feature = "inline-more", inline)]
   35,458 ( 0.01%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
        .                   // Keys may be already present or show multiple times in the iterator.
        .                   // Reserve the entire hint lower bound if the map is empty.
        .                   // Otherwise reserve half the hint (rounded up), so the map
        .                   // will only resize twice in the worst case.
   28,926 ( 0.01%)          let iter = iter.into_iter();
    7,060 ( 0.00%)          let reserve = if self.is_empty() {
        .                       iter.size_hint().0
        .                   } else {
      423 ( 0.00%)              (iter.size_hint().0 + 1) / 2
        .                   };
        .                   self.reserve(reserve);
        .                   iter.for_each(move |(k, v)| {
  211,685 ( 0.04%)              self.insert(k, v);
        .                   });
   28,858 ( 0.01%)      }
        .           
        .               #[inline]
        .               #[cfg(feature = "nightly")]
        .               fn extend_one(&mut self, (k, v): (K, V)) {
        .                   self.insert(k, v);
        .               }
        .           
        .               #[inline]
-- line 4588 ----------------------------------------

  592,533 ( 0.12%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sharded.rs
--------------------------------------------------------------------------------
Ir               

-- line 31 ----------------------------------------
      .               fn default() -> Self {
      .                   Self::new(T::default)
      .               }
      .           }
      .           
      .           impl<T> Sharded<T> {
      .               #[inline]
      .               pub fn new(mut value: impl FnMut() -> T) -> Self {
      2 ( 0.00%)          Sharded { shards: [(); SHARDS].map(|()| CacheAligned(Lock::new(value()))) }
      .               }
      .           
      .               /// The shard is selected by hashing `val` with `FxHasher`.
      .               #[inline]
      .               pub fn get_shard_by_value<K: Hash + ?Sized>(&self, val: &K) -> &Lock<T> {
      .                   if SHARDS == 1 { &self.shards[0].0 } else { self.get_shard_by_hash(make_hash(val)) }
      .               }
      .           
      .               #[inline]
      .               pub fn get_shard_by_hash(&self, hash: u64) -> &Lock<T> {
      .                   &self.shards[get_shard_index_by_hash(hash)].0
      .               }
      .           
      .               #[inline]
      .               pub fn get_shard_by_index(&self, i: usize) -> &Lock<T> {
 52,862 ( 0.01%)          &self.shards[i].0
      .               }
      .           
      .               pub fn lock_shards(&self) -> Vec<LockGuard<'_, T>> {
      .                   (0..SHARDS).map(|i| self.shards[i].0.lock()).collect()
      .               }
      .           
      .               pub fn try_lock_shards(&self) -> Option<Vec<LockGuard<'_, T>>> {
      .                   (0..SHARDS).map(|i| self.shards[i].0.try_lock()).collect()
-- line 63 ----------------------------------------
-- line 79 ----------------------------------------
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   let hash = make_hash(value);
      .                   let mut shard = self.get_shard_by_hash(hash).lock();
      .                   let entry = shard.raw_entry_mut().from_key_hashed_nocheck(hash, value);
      .           
      .                   match entry {
 84,090 ( 0.02%)              RawEntryMut::Occupied(e) => *e.key(),
      .                       RawEntryMut::Vacant(e) => {
      .                           let v = make();
      .                           e.insert_hashed_nocheck(hash, v, ());
      .                           v
      .                       }
      .                   }
      .               }
      .           
-- line 95 ----------------------------------------
-- line 99 ----------------------------------------
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   let hash = make_hash(&value);
      .                   let mut shard = self.get_shard_by_hash(hash).lock();
      .                   let entry = shard.raw_entry_mut().from_key_hashed_nocheck(hash, &value);
      .           
      .                   match entry {
114,155 ( 0.02%)              RawEntryMut::Occupied(e) => *e.key(),
      .                       RawEntryMut::Vacant(e) => {
 75,044 ( 0.02%)                  let v = make(value);
      .                           e.insert_hashed_nocheck(hash, v, ());
      .                           v
      .                       }
      .                   }
     18 ( 0.00%)      }
      .           }
      .           
      .           pub trait IntoPointer {
      .               /// Returns a pointer which outlives `self`.
      .               fn into_pointer(&self) -> *const ();
      .           }
      .           
      .           impl<K: Eq + Hash + Copy + IntoPointer> ShardedHashMap<K, ()> {
-- line 122 ----------------------------------------
-- line 125 ----------------------------------------
      .                   let shard = self.get_shard_by_hash(hash).lock();
      .                   let value = value.into_pointer();
      .                   shard.raw_entry().from_hash(hash, |entry| entry.into_pointer() == value).is_some()
      .               }
      .           }
      .           
      .           #[inline]
      .           fn make_hash<K: Hash + ?Sized>(val: &K) -> u64 {
385,733 ( 0.08%)      let mut state = FxHasher::default();
 95,503 ( 0.02%)      val.hash(&mut state);
      .               state.finish()
      .           }
      .           
      .           /// Get a shard with a pre-computed hash value. If `get_shard_by_value` is
      .           /// ever used in combination with `get_shard_by_hash` on a single `Sharded`
      .           /// instance, then `hash` must be computed with `FxHasher`. Otherwise,
      .           /// `hash` can be computed with any hasher, so long as that hasher is used
      .           /// consistently for each `Sharded` instance.
-- line 142 ----------------------------------------

196,811 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sharded.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs
--------------------------------------------------------------------------------
Ir                 

-- line 46 ----------------------------------------
        .           ///
        .           /// To implement this conveniently, use the derive macro located in `rustc_macros`.
        .           pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {
        .               /// Consumers may find this more convenient to use with infallible folders than
        .               /// [`try_super_fold_with`][`TypeFoldable::try_super_fold_with`], to which the
        .               /// provided default definition delegates.  Implementors **should not** override
        .               /// this provided default definition, to ensure that the two methods are coherent
        .               /// (provide a definition of `try_super_fold_with` instead).
  646,687 ( 0.14%)      fn super_fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
   13,790 ( 0.00%)          self.try_super_fold_with(folder).into_ok()
  659,967 ( 0.14%)      }
        .               /// Consumers may find this more convenient to use with infallible folders than
        .               /// [`try_fold_with`][`TypeFoldable::try_fold_with`], to which the provided
        .               /// default definition delegates.  Implementors **should not** override this
        .               /// provided default definition, to ensure that the two methods are coherent
        .               /// (provide a definition of `try_fold_with` instead).
   36,893 ( 0.01%)      fn fold_with<F: TypeFolder<'tcx, Error = !>>(self, folder: &mut F) -> Self {
   17,468 ( 0.00%)          self.try_fold_with(folder).into_ok()
   34,137 ( 0.01%)      }
        .           
        .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error>;
        .           
1,022,562 ( 0.22%)      fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
  252,003 ( 0.05%)          self.try_super_fold_with(folder)
  994,388 ( 0.21%)      }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;
  118,619 ( 0.02%)      fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
   91,153 ( 0.02%)          self.super_visit_with(visitor)
   42,946 ( 0.01%)      }
        .           
        .               /// Returns `true` if `self` has any late-bound regions that are either
        .               /// bound by `binder` or bound by some binder outside of `binder`.
        .               /// If `binder` is `ty::INNERMOST`, this indicates whether
        .               /// there are any late-bound regions that appear free.
        .               fn has_vars_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {
   43,164 ( 0.01%)          self.visit_with(&mut HasEscapingVarsVisitor { outer_index: binder }).is_break()
        .               }
        .           
        .               /// Returns `true` if this `self` has any regions that escape `binder` (and
        .               /// hence are not bound by it).
        .               fn has_vars_bound_above(&self, binder: ty::DebruijnIndex) -> bool {
       33 ( 0.00%)          self.has_vars_bound_at_or_above(binder.shifted_in(1))
        .               }
        .           
  130,802 ( 0.03%)      fn has_escaping_bound_vars(&self) -> bool {
   48,862 ( 0.01%)          self.has_vars_bound_at_or_above(ty::INNERMOST)
  131,365 ( 0.03%)      }
        .           
   11,414 ( 0.00%)      #[instrument(level = "trace")]
        .               fn has_type_flags(&self, flags: TypeFlags) -> bool {
   13,750 ( 0.00%)          self.visit_with(&mut HasTypeFlagsVisitor { flags }).break_value() == Some(FoundFlags)
        .               }
        .               fn has_projections(&self) -> bool {
      996 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_PROJECTION)
        .               }
        .               fn has_opaque_types(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_TY_OPAQUE)
        .               }
    2,848 ( 0.00%)      fn references_error(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_ERROR)
    2,848 ( 0.00%)      }
        .               fn has_param_types_or_consts(&self) -> bool {
        9 ( 0.00%)          self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)
        .               }
        .               fn has_infer_regions(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_RE_INFER)
        .               }
        .               fn has_infer_types(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_TY_INFER)
        .               }
        .               fn has_infer_types_or_consts(&self) -> bool {
   39,858 ( 0.01%)          self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_CT_INFER)
        .               }
    9,571 ( 0.00%)      fn needs_infer(&self) -> bool {
   36,562 ( 0.01%)          self.has_type_flags(TypeFlags::NEEDS_INFER)
    9,674 ( 0.00%)      }
        .               fn has_placeholders(&self) -> bool {
        .                   self.has_type_flags(
        .                       TypeFlags::HAS_RE_PLACEHOLDER
        .                           | TypeFlags::HAS_TY_PLACEHOLDER
        .                           | TypeFlags::HAS_CT_PLACEHOLDER,
        .                   )
        .               }
        .               fn needs_subst(&self) -> bool {
-- line 133 ----------------------------------------
-- line 147 ----------------------------------------
        .               fn has_erasable_regions(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_FREE_REGIONS)
        .               }
        .           
        .               /// Indicates whether this value references only 'global'
        .               /// generic parameters that are the same regardless of what fn we are
        .               /// in. This is used for caching.
        .               fn is_global(&self) -> bool {
   13,401 ( 0.00%)          !self.has_type_flags(TypeFlags::HAS_FREE_LOCAL_NAMES)
        .               }
        .           
        .               /// True if there are any late-bound regions
        .               fn has_late_bound_regions(&self) -> bool {
        .                   self.has_type_flags(TypeFlags::HAS_RE_LATE_BOUND)
        .               }
        .           
        .               /// Indicates whether this value still has parameters/placeholders/inference variables
-- line 163 ----------------------------------------
-- line 194 ----------------------------------------
        .           
        .               fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;
        .           
        .               fn fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
  144,558 ( 0.03%)          t.super_fold_with(self)
        .               }
        .           
        .               fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
   36,461 ( 0.01%)          t.super_fold_with(self)
        .               }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
        .                   r.super_fold_with(self)
        .               }
        .           
        .               fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
    1,011 ( 0.00%)          c.super_fold_with(self)
        .               }
        .           
        .               fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
    1,510 ( 0.00%)          p.super_fold_with(self)
        .               }
        .           
        .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx>
        .               where
        .                   Self: TypeFolder<'tcx, Error = !>,
        .               {
        .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
        .               }
-- line 238 ----------------------------------------
-- line 247 ----------------------------------------
        .           /// A blanket implementation of this trait (that defers to the relevant
        .           /// method of [`TypeFolder`]) is provided for all infallible folders in
        .           /// order to ensure the two APIs are coherent.
        .           pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {
        .               fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
      410 ( 0.00%)          t.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
        .                   t.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
        .                   r.try_super_fold_with(self)
-- line 263 ----------------------------------------
-- line 269 ----------------------------------------
        .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
        .                   c.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_predicate(
        .                   &mut self,
        .                   p: ty::Predicate<'tcx>,
        .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
      207 ( 0.00%)          p.try_super_fold_with(self)
        .               }
        .           
        .               fn try_fold_mir_const(
        .                   &mut self,
        .                   c: mir::ConstantKind<'tcx>,
        .               ) -> Result<mir::ConstantKind<'tcx>, Self::Error> {
        .                   bug!("most type folders should not be folding MIR datastructures: {:?}", c)
        .               }
-- line 285 ----------------------------------------
-- line 286 ----------------------------------------
        .           }
        .           
        .           // Blanket implementation of fallible trait for infallible folders
        .           // delegates to infallible methods to prevent incoherence
        .           impl<'tcx, F> FallibleTypeFolder<'tcx> for F
        .           where
        .               F: TypeFolder<'tcx, Error = !>,
        .           {
   64,742 ( 0.01%)      fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  115,070 ( 0.02%)          Ok(self.fold_binder(t))
   95,830 ( 0.02%)      }
        .           
    9,664 ( 0.00%)      fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {
  330,173 ( 0.07%)          Ok(self.fold_ty(t))
    5,844 ( 0.00%)      }
        .           
    1,828 ( 0.00%)      fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, Self::Error> {
   36,626 ( 0.01%)          Ok(self.fold_region(r))
    1,828 ( 0.00%)      }
        .           
    1,015 ( 0.00%)      fn try_fold_const(
        .                   &mut self,
        .                   c: &'tcx ty::Const<'tcx>,
        .               ) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {
    4,049 ( 0.00%)          Ok(self.fold_const(c))
      670 ( 0.00%)      }
        .           
        .               fn try_fold_predicate(
        .                   &mut self,
        .                   p: ty::Predicate<'tcx>,
        .               ) -> Result<ty::Predicate<'tcx>, Self::Error> {
        .                   Ok(self.fold_predicate(p))
        .               }
        .           
-- line 322 ----------------------------------------
-- line 341 ----------------------------------------
        .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   t.super_visit_with(self)
        .               }
        .           
        .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   r.super_visit_with(self)
        .               }
        .           
       24 ( 0.00%)      fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   c.super_visit_with(self)
       21 ( 0.00%)      }
        .           
        .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   uv.super_visit_with(self)
        .               }
        .           
        .               fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   p.super_visit_with(self)
        .               }
-- line 359 ----------------------------------------
-- line 380 ----------------------------------------
        .               G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,
        .               H: FnMut(&'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx>,
        .           {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        .                   self.tcx
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
      531 ( 0.00%)          let t = ty.super_fold_with(self);
        .                   (self.ty_op)(t)
        .               }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
        .                   let r = r.super_fold_with(self);
        .                   (self.lt_op)(r)
        .               }
        .           
-- line 396 ----------------------------------------
-- line 415 ----------------------------------------
        .               ) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   value.fold_with(&mut RegionFolder::new(self, skipped_regions, &mut f))
        .               }
        .           
        .               /// Invoke `callback` on every region appearing free in `value`.
      432 ( 0.00%)      pub fn for_each_free_region(
        .                   self,
        .                   value: &impl TypeFoldable<'tcx>,
        .                   mut callback: impl FnMut(ty::Region<'tcx>),
        .               ) {
        .                   self.any_free_region_meets(value, |r| {
    3,644 ( 0.00%)              callback(r);
        .                       false
        .                   });
      378 ( 0.00%)      }
        .           
        .               /// Returns `true` if `callback` returns true for every region appearing free in `value`.
        .               pub fn all_free_regions_meet(
        .                   self,
        .                   value: &impl TypeFoldable<'tcx>,
        .                   mut callback: impl FnMut(ty::Region<'tcx>) -> bool,
        .               ) -> bool {
      809 ( 0.00%)          !self.any_free_region_meets(value, |r| !callback(r))
        .               }
        .           
        .               /// Returns `true` if `callback` returns true for some region appearing free in `value`.
        .               pub fn any_free_region_meets(
        .                   self,
        .                   value: &impl TypeFoldable<'tcx>,
        .                   callback: impl FnMut(ty::Region<'tcx>) -> bool,
        .               ) -> bool {
-- line 448 ----------------------------------------
-- line 479 ----------------------------------------
        .                           t: &Binder<'tcx, T>,
        .                       ) -> ControlFlow<Self::BreakTy> {
        .                           self.outer_index.shift_in(1);
        .                           let result = t.as_ref().skip_binder().visit_with(self);
        .                           self.outer_index.shift_out(1);
        .                           result
        .                       }
        .           
    3,670 ( 0.00%)              fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
    6,111 ( 0.00%)                  match *r {
        .                               ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {
        .                                   ControlFlow::CONTINUE
        .                               }
        .                               _ => {
        .                                   if (self.callback)(r) {
        .                                       ControlFlow::BREAK
        .                                   } else {
        .                                       ControlFlow::CONTINUE
        .                                   }
        .                               }
        .                           }
    5,138 ( 0.00%)              }
        .           
        .                       fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                           // We're only interested in types involving regions
    4,032 ( 0.00%)                  if ty.flags().intersects(TypeFlags::HAS_FREE_REGIONS) {
    5,531 ( 0.00%)                      ty.super_visit_with(self)
        .                           } else {
        .                               ControlFlow::CONTINUE
        .                           }
        .                       }
        .                   }
        .           
    8,778 ( 0.00%)          value.visit_with(&mut RegionVisitor { outer_index: ty::INNERMOST, callback }).is_break()
        .               }
        .           }
        .           
        .           /// Folds over the substructure of a type, visiting its component
        .           /// types and all regions that occur *free* within it.
        .           ///
        .           /// That is, `Ty` can contain function or method types that bind
        .           /// regions at the call site (`ReLateBound`), and occurrences of
-- line 520 ----------------------------------------
-- line 540 ----------------------------------------
        .           
        .           impl<'a, 'tcx> RegionFolder<'a, 'tcx> {
        .               #[inline]
        .               pub fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   skipped_regions: &'a mut bool,
        .                   fold_region_fn: &'a mut dyn FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,
        .               ) -> RegionFolder<'a, 'tcx> {
   21,926 ( 0.00%)          RegionFolder { tcx, skipped_regions, current_index: ty::INNERMOST, fold_region_fn }
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   21,170 ( 0.00%)          self.tcx
   21,170 ( 0.00%)      }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
      478 ( 0.00%)          self.current_index.shift_in(1);
        .                   let t = t.super_fold_with(self);
      423 ( 0.00%)          self.current_index.shift_out(1);
        .                   t
        .               }
        .           
      388 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
    3,604 ( 0.00%)          match *r {
      388 ( 0.00%)              ty::ReLateBound(debruijn, _) if debruijn < self.current_index => {
        .                           debug!(?self.current_index, "skipped bound region");
      388 ( 0.00%)                  *self.skipped_regions = true;
        .                           r
        .                       }
        .                       _ => {
        .                           debug!(?self.current_index, "folding free region");
    9,648 ( 0.00%)                  (self.fold_region_fn)(r, self.current_index)
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Bound vars replacer
        .           
-- line 585 ----------------------------------------
-- line 592 ----------------------------------------
        .               current_index: ty::DebruijnIndex,
        .           
        .               fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
        .               fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
        .               fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
        .           }
        .           
        .           impl<'a, 'tcx> BoundVarReplacer<'a, 'tcx> {
   10,504 ( 0.00%)      fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   fld_r: Option<&'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a)>,
        .                   fld_t: Option<&'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a)>,
        .                   fld_c: Option<&'a mut (dyn FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx> + 'a)>,
        .               ) -> Self {
   36,997 ( 0.01%)          BoundVarReplacer { tcx, current_index: ty::INNERMOST, fld_r, fld_t, fld_c }
    5,252 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for BoundVarReplacer<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
    7,086 ( 0.00%)          self.tcx
    2,164 ( 0.00%)      }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
    5,346 ( 0.00%)          self.current_index.shift_in(1);
    1,250 ( 0.00%)          let t = t.super_fold_with(self);
    4,110 ( 0.00%)          self.current_index.shift_out(1);
        .                   t
        .               }
        .           
   27,220 ( 0.01%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
   19,786 ( 0.00%)          match *t.kind() {
      315 ( 0.00%)              ty::Bound(debruijn, bound_ty) if debruijn == self.current_index => {
       63 ( 0.00%)                  if let Some(fld_t) = self.fld_t.as_mut() {
        .                               let ty = fld_t(bound_ty);
       63 ( 0.00%)                      return ty::fold::shift_vars(self.tcx, &ty, self.current_index.as_u32());
        .                           }
        .                       }
   19,660 ( 0.00%)              _ if t.has_vars_bound_at_or_above(self.current_index) => {
   28,347 ( 0.01%)                  return t.super_fold_with(self);
        .                       }
        .                       _ => {}
        .                   }
        .                   t
   13,758 ( 0.00%)      }
        .           
   15,096 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
   14,750 ( 0.00%)          match *r {
   14,750 ( 0.00%)              ty::ReLateBound(debruijn, br) if debruijn == self.current_index => {
    7,375 ( 0.00%)                  if let Some(fld_r) = self.fld_r.as_mut() {
        .                               let region = fld_r(br);
   14,978 ( 0.00%)                      return if let ty::ReLateBound(debruijn1, br) = *region {
        .                                   // If the callback returns a late-bound region,
        .                                   // that region should always use the INNERMOST
        .                                   // debruijn index. Then we adjust it to the
        .                                   // correct depth.
      114 ( 0.00%)                          assert_eq!(debruijn1, ty::INNERMOST);
    1,140 ( 0.00%)                          self.tcx.mk_region(ty::ReLateBound(debruijn, br))
        .                               } else {
        .                                   region
        .                               };
        .                           }
        .                       }
        .                       _ => {}
        .                   }
        .                   r
   15,096 ( 0.00%)      }
        .           
        .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
        .                   match *ct {
        .                       ty::Const { val: ty::ConstKind::Bound(debruijn, bound_const), ty }
        .                           if debruijn == self.current_index =>
        .                       {
        .                           if let Some(fld_c) = self.fld_c.as_mut() {
        .                               let ct = fld_c(bound_const, ty);
-- line 669 ----------------------------------------
-- line 697 ----------------------------------------
        .                   mut fld_r: F,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let mut region_map = BTreeMap::new();
        .                   let mut real_fld_r =
   27,840 ( 0.01%)              |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
      688 ( 0.00%)          let value = value.skip_binder();
    4,687 ( 0.00%)          let value = if !value.has_escaping_bound_vars() {
    7,356 ( 0.00%)              value
        .                   } else {
    4,337 ( 0.00%)              let mut replacer = BoundVarReplacer::new(self, Some(&mut real_fld_r), None, None);
    1,100 ( 0.00%)              value.fold_with(&mut replacer)
        .                   };
   17,828 ( 0.00%)          (value, region_map)
        .               }
        .           
        .               /// Replaces all escaping bound vars. The `fld_r` closure replaces escaping
        .               /// bound regions; the `fld_t` closure replaces escaping bound types and the `fld_c`
        .               /// closure replaces escaping bound consts.
   31,040 ( 0.01%)      pub fn replace_escaping_bound_vars<T, F, G, H>(
        .                   self,
        .                   value: T,
        .                   mut fld_r: F,
        .                   mut fld_t: G,
        .                   mut fld_c: H,
        .               ) -> T
        .               where
        .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
        .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
        .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
        .                   T: TypeFoldable<'tcx>,
        .               {
    8,223 ( 0.00%)          if !value.has_escaping_bound_vars() {
   20,472 ( 0.00%)              value
        .                   } else {
        .                       let mut replacer =
   56,147 ( 0.01%)                  BoundVarReplacer::new(self, Some(&mut fld_r), Some(&mut fld_t), Some(&mut fld_c));
    3,382 ( 0.00%)              value.fold_with(&mut replacer)
        .                   }
   21,282 ( 0.00%)      }
        .           
        .               /// Replaces all types or regions bound by the given `Binder`. The `fld_r`
        .               /// closure replaces bound regions while the `fld_t` closure replaces bound
        .               /// types.
   60,509 ( 0.01%)      pub fn replace_bound_vars<T, F, G, H>(
        .                   self,
        .                   value: Binder<'tcx, T>,
        .                   mut fld_r: F,
        .                   fld_t: G,
        .                   fld_c: H,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,
        .                   G: FnMut(ty::BoundTy) -> Ty<'tcx>,
        .                   H: FnMut(ty::BoundVar, Ty<'tcx>) -> &'tcx ty::Const<'tcx>,
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let mut region_map = BTreeMap::new();
   25,960 ( 0.01%)          let real_fld_r = |br: ty::BoundRegion| *region_map.entry(br).or_insert_with(|| fld_r(br));
   61,320 ( 0.01%)          let value = self.replace_escaping_bound_vars(value.skip_binder(), real_fld_r, fld_t, fld_c);
   63,117 ( 0.01%)          (value, region_map)
   40,187 ( 0.01%)      }
        .           
        .               /// Replaces any late-bound regions bound in `value` with
        .               /// free variants attached to `all_outlive_scope`.
    3,619 ( 0.00%)      pub fn liberate_late_bound_regions<T>(
        .                   self,
        .                   all_outlive_scope: DefId,
        .                   value: ty::Binder<'tcx, T>,
        .               ) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.replace_late_bound_regions(value, |br| {
    7,033 ( 0.00%)              self.mk_region(ty::ReFree(ty::FreeRegion {
    1,082 ( 0.00%)                  scope: all_outlive_scope,
        .                           bound_region: br.kind,
        .                       }))
        .                   })
        .                   .0
    1,974 ( 0.00%)      }
        .           
        .               pub fn shift_bound_var_indices<T>(self, bound_vars: usize, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.replace_escaping_bound_vars(
    8,565 ( 0.00%)              value,
        .                       |r| {
        .                           self.mk_region(ty::ReLateBound(
        .                               ty::INNERMOST,
        .                               ty::BoundRegion {
        .                                   var: ty::BoundVar::from_usize(r.var.as_usize() + bound_vars),
        .                                   kind: r.kind,
        .                               },
        .                           ))
-- line 795 ----------------------------------------
-- line 843 ----------------------------------------
        .               fn collect_late_bound_regions<T>(
        .                   self,
        .                   value: &Binder<'tcx, T>,
        .                   just_constraint: bool,
        .               ) -> FxHashSet<ty::BoundRegionKind>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
      350 ( 0.00%)          let mut collector = LateBoundRegionsCollector::new(just_constraint);
        .                   let result = value.as_ref().skip_binder().visit_with(&mut collector);
        .                   assert!(result.is_continue()); // should never have stopped early
      696 ( 0.00%)          collector.regions
        .               }
        .           
        .               /// Replaces any late-bound regions bound in `value` with `'erased`. Useful in codegen but also
        .               /// method lookup and a few other places where precise region relationships are not required.
        .               pub fn erase_late_bound_regions<T>(self, value: Binder<'tcx, T>) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
      820 ( 0.00%)          self.replace_late_bound_regions(value, |_| self.lifetimes.re_erased).0
        .               }
        .           
        .               /// Rewrite any late-bound regions so that they are anonymous. Region numbers are
        .               /// assigned starting at 0 and increasing monotonically in the order traversed
        .               /// by the fold operation.
        .               ///
        .               /// The chief purpose of this function is to canonicalize regions so that two
        .               /// `FnSig`s or `TraitRef`s which are equivalent up to region naming will become
        .               /// structurally identical. For example, `for<'a, 'b> fn(&'a isize, &'b isize)` and
        .               /// `for<'a, 'b> fn(&'b isize, &'a isize)` will become identical after anonymization.
    9,269 ( 0.00%)      pub fn anonymize_late_bound_regions<T>(self, sig: Binder<'tcx, T>) -> Binder<'tcx, T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
    6,700 ( 0.00%)          let mut counter = 0;
      297 ( 0.00%)          let inner = self
        .                       .replace_late_bound_regions(sig, |_| {
        .                           let br = ty::BoundRegion {
      228 ( 0.00%)                      var: ty::BoundVar::from_u32(counter),
        .                               kind: ty::BrAnon(counter),
        .                           };
      912 ( 0.00%)                  let r = self.mk_region(ty::ReLateBound(ty::INNERMOST, br));
      570 ( 0.00%)                  counter += 1;
        .                           r
        .                       })
        .                       .0;
    1,340 ( 0.00%)          let bound_vars = self.mk_bound_variable_kinds(
    4,020 ( 0.00%)              (0..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i))),
        .                   );
    7,968 ( 0.00%)          Binder::bind_with_vars(inner, bound_vars)
    7,941 ( 0.00%)      }
        .           }
        .           
        .           pub struct ValidateBoundVars<'tcx> {
        .               bound_vars: &'tcx ty::List<ty::BoundVariableKind>,
        .               binder_index: ty::DebruijnIndex,
        .               // We may encounter the same variable at different levels of binding, so
        .               // this can't just be `Ty`
        .               visited: SsoHashSet<(ty::DebruijnIndex, Ty<'tcx>)>,
-- line 902 ----------------------------------------
-- line 1004 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               current_index: ty::DebruijnIndex,
        .               amount: u32,
        .           }
        .           
        .           impl<'tcx> Shifter<'tcx> {
        .               pub fn new(tcx: TyCtxt<'tcx>, amount: u32) -> Self {
        .                   Shifter { tcx, current_index: ty::INNERMOST, amount }
      134 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
       12 ( 0.00%)          self.tcx
        .               }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
        .                   self.current_index.shift_in(1);
        .                   let t = t.super_fold_with(self);
        .                   self.current_index.shift_out(1);
        .                   t
        .               }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
        8 ( 0.00%)          match *r {
        .                       ty::ReLateBound(debruijn, br) => {
       16 ( 0.00%)                  if self.amount == 0 || debruijn < self.current_index {
        .                               r
        .                           } else {
        4 ( 0.00%)                      let debruijn = debruijn.shifted_in(self.amount);
        .                               let shifted = ty::ReLateBound(debruijn, br);
       40 ( 0.00%)                      self.tcx.mk_region(shifted)
        .                           }
        .                       }
        .                       _ => r,
        .                   }
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
      166 ( 0.00%)          match *ty.kind() {
        .                       ty::Bound(debruijn, bound_ty) => {
        .                           if self.amount == 0 || debruijn < self.current_index {
        .                               ty
        .                           } else {
        .                               let debruijn = debruijn.shifted_in(self.amount);
        .                               self.tcx.mk_ty(ty::Bound(debruijn, bound_ty))
        .                           }
        .                       }
        .           
      253 ( 0.00%)              _ => ty.super_fold_with(self),
        .                   }
        .               }
        .           
        .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
        8 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Bound(debruijn, bound_ct), ty } = *ct {
        .                       if self.amount == 0 || debruijn < self.current_index {
        .                           ct
        .                       } else {
        .                           let debruijn = debruijn.shifted_in(self.amount);
        .                           self.tcx.mk_const(ty::Const { val: ty::ConstKind::Bound(debruijn, bound_ct), ty })
        .                       }
        .                   } else {
       12 ( 0.00%)              ct.super_fold_with(self)
        .                   }
        .               }
        .           }
        .           
        .           pub fn shift_region<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               region: ty::Region<'tcx>,
        .               amount: u32,
-- line 1077 ----------------------------------------
-- line 1085 ----------------------------------------
        .           }
        .           
        .           pub fn shift_vars<'tcx, T>(tcx: TyCtxt<'tcx>, value: T, amount: u32) -> T
        .           where
        .               T: TypeFoldable<'tcx>,
        .           {
        .               debug!("shift_vars(value={:?}, amount={})", value, amount);
        .           
      134 ( 0.00%)      value.fold_with(&mut Shifter::new(tcx, amount))
        .           }
        .           
        .           #[derive(Debug, PartialEq, Eq, Copy, Clone)]
        .           struct FoundEscapingVars;
        .           
        .           /// An "escaping var" is a bound var whose binder is not part of `t`. A bound var can be a
        .           /// bound region or a bound type.
        .           ///
-- line 1101 ----------------------------------------
-- line 1128 ----------------------------------------
        .           
        .           impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {
        .               type BreakTy = FoundEscapingVars;
        .           
        .               fn visit_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: &Binder<'tcx, T>,
        .               ) -> ControlFlow<Self::BreakTy> {
    2,106 ( 0.00%)          self.outer_index.shift_in(1);
        .                   let result = t.super_visit_with(self);
    2,590 ( 0.00%)          self.outer_index.shift_out(1);
        .                   result
        .               }
        .           
        .               #[inline]
        .               fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // If the outer-exclusive-binder is *strictly greater* than
        .                   // `outer_index`, that means that `t` contains some content
        .                   // bound at `outer_index` or above (because
-- line 1146 ----------------------------------------
-- line 1160 ----------------------------------------
        .                   // visited.
        .                   if r.bound_at_or_above_binder(self.outer_index) {
        .                       ControlFlow::Break(FoundEscapingVars)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
       14 ( 0.00%)      fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // we don't have a `visit_infer_const` callback, so we have to
        .                   // hook in here to catch this case (annoying...), but
        .                   // otherwise we do want to remember to visit the rest of the
        .                   // const, as it has types/regions embedded in a lot of other
        .                   // places.
       23 ( 0.00%)          match ct.val {
        .                       ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => {
        .                           ControlFlow::Break(FoundEscapingVars)
        .                       }
        3 ( 0.00%)              _ => ct.super_visit_with(self),
        .                   }
       14 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   if predicate.inner.outer_exclusive_binder > self.outer_index {
        .                       ControlFlow::Break(FoundEscapingVars)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
-- line 1188 ----------------------------------------
-- line 1210 ----------------------------------------
        .               #[instrument(level = "trace")]
        .               fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<Self::BreakTy> {
        .                   debug!(
        .                       "HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}",
        .                       t,
        .                       t.flags(),
        .                       self.flags
        .                   );
   65,192 ( 0.01%)          if t.flags().intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        .               #[inline]
        .               #[instrument(skip(self), level = "trace")]
        .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
    1,512 ( 0.00%)          let flags = r.type_flags();
        .                   trace!(r.flags=?flags);
        .                   if flags.intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        .               #[inline]
        .               #[instrument(level = "trace")]
        .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
    2,945 ( 0.00%)          let flags = FlagComputation::for_const(c);
        .                   trace!(r.flags=?flags);
      592 ( 0.00%)          if flags.intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
        .               #[inline]
        .               #[instrument(level = "trace")]
        .               fn visit_unevaluated_const(&mut self, uv: ty::Unevaluated<'tcx>) -> ControlFlow<Self::BreakTy> {
    4,441 ( 0.00%)          let flags = FlagComputation::for_unevaluated_const(uv);
        .                   trace!(r.flags=?flags);
        .                   if flags.intersects(self.flags) {
        .                       ControlFlow::Break(FoundFlags)
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
        .               }
        .           
-- line 1260 ----------------------------------------
-- line 1285 ----------------------------------------
        .               /// them constraints `'a == 'b`. But if you have `<&'a u32 as
        .               /// Trait>::Foo` and `<&'b u32 as Trait>::Foo`, normalizing those
        .               /// types may mean that `'a` and `'b` don't appear in the results,
        .               /// so they are not considered *constrained*.
        .               just_constrained: bool,
        .           }
        .           
        .           impl LateBoundRegionsCollector {
      174 ( 0.00%)      fn new(just_constrained: bool) -> Self {
    1,218 ( 0.00%)          LateBoundRegionsCollector {
        .                       current_index: ty::INNERMOST,
        .                       regions: Default::default(),
        .                       just_constrained,
        .                   }
      174 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {
        .               fn visit_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: &Binder<'tcx, T>,
        .               ) -> ControlFlow<Self::BreakTy> {
        .                   self.current_index.shift_in(1);
        .                   let result = t.super_visit_with(self);
        .                   self.current_index.shift_out(1);
        .                   result
        .               }
        .           
      621 ( 0.00%)      fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // if we are only looking for "constrained" region, we have to
        .                   // ignore the inputs to a projection, as they may not appear
        .                   // in the normalized form
      646 ( 0.00%)          if self.just_constrained {
      778 ( 0.00%)              if let ty::Projection(..) | ty::Opaque(..) = t.kind() {
        .                           return ControlFlow::CONTINUE;
        .                       }
        .                   }
        .           
      635 ( 0.00%)          t.super_visit_with(self)
      416 ( 0.00%)      }
        .           
        .               fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   // if we are only looking for "constrained" region, we have to
        .                   // ignore the inputs of an unevaluated const, as they may not appear
        .                   // in the normalized form
        2 ( 0.00%)          if self.just_constrained {
        2 ( 0.00%)              if let ty::ConstKind::Unevaluated(..) = c.val {
        .                           return ControlFlow::CONTINUE;
        .                       }
        .                   }
        .           
        .                   c.super_visit_with(self)
        .               }
        .           
        .               fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {
      700 ( 0.00%)          if let ty::ReLateBound(debruijn, br) = *r {
      140 ( 0.00%)              if debruijn == self.current_index {
        .                           self.regions.insert(br.kind);
        .                       }
        .                   }
        .                   ControlFlow::CONTINUE
        .               }
        .           }

   40,450 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fold.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs
--------------------------------------------------------------------------------
Ir               

-- line 63 ----------------------------------------
      .           /// assert!(iter.next().is_none());
      .           /// ```
      .           #[stable(feature = "iter_zip", since = "1.59.0")]
      .           pub fn zip<A, B>(a: A, b: B) -> Zip<A::IntoIter, B::IntoIter>
      .           where
      .               A: IntoIterator,
      .               B: IntoIterator,
      .           {
  4,394 ( 0.00%)      ZipImpl::new(a.into_iter(), b.into_iter())
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<A, B> Iterator for Zip<A, B>
      .           where
      .               A: Iterator,
      .               B: Iterator,
      .           {
-- line 79 ----------------------------------------
-- line 147 ----------------------------------------
      .                           index: 0, // unused
      .                           len: 0,   // unused
      .                           a_len: 0, // unused
      .                       }
      .                   }
      .           
      .                   #[inline]
      .                   default fn next(&mut self) -> Option<(A::Item, B::Item)> {
 16,858 ( 0.00%)              let x = self.a.next()?;
 14,630 ( 0.00%)              let y = self.b.next()?;
  1,956 ( 0.00%)              Some((x, y))
    622 ( 0.00%)          }
      .           
      .                   #[inline]
      .                   default fn nth(&mut self, n: usize) -> Option<Self::Item> {
      .                       self.super_nth(n)
      .                   }
      .           
      .                   #[inline]
      .                   default fn next_back(&mut self) -> Option<(A::Item, B::Item)>
-- line 166 ----------------------------------------
-- line 203 ----------------------------------------
      .               B: Iterator,
      .           {
      .               type Item = (A::Item, B::Item);
      .           
      .               zip_impl_general_defaults! {}
      .           
      .               #[inline]
      .               default fn size_hint(&self) -> (usize, Option<usize>) {
     28 ( 0.00%)          let (a_lower, a_upper) = self.a.size_hint();
     11 ( 0.00%)          let (b_lower, b_upper) = self.b.size_hint();
      .           
      .                   let lower = cmp::min(a_lower, b_lower);
      .           
      .                   let upper = match (a_upper, b_upper) {
      .                       (Some(x), Some(y)) => Some(cmp::min(x, y)),
      .                       (Some(x), None) => Some(x),
      .                       (None, Some(y)) => Some(y),
      .                       (None, None) => None,
-- line 220 ----------------------------------------
-- line 242 ----------------------------------------
      .               #[inline]
      .               default fn size_hint(&self) -> (usize, Option<usize>) {
      .                   let size = cmp::min(self.a.size(), self.b.size());
      .                   (size, Some(size))
      .               }
      .           
      .               #[inline]
      .               unsafe fn get_unchecked(&mut self, idx: usize) -> <Self as Iterator>::Item {
     44 ( 0.00%)          let idx = self.index + idx;
      .                   // SAFETY: the caller must uphold the contract for
      .                   // `Iterator::__iterator_get_unchecked`.
      .                   unsafe { (self.a.__iterator_get_unchecked(idx), self.b.__iterator_get_unchecked(idx)) }
      .               }
      .           }
      .           
      .           #[doc(hidden)]
      .           impl<A, B> ZipImpl<A, B> for Zip<A, B>
-- line 258 ----------------------------------------
-- line 263 ----------------------------------------
      .               fn new(a: A, b: B) -> Self {
      .                   let a_len = a.size();
      .                   let len = cmp::min(a_len, b.size());
      .                   Zip { a, b, index: 0, len, a_len }
      .               }
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<(A::Item, B::Item)> {
789,350 ( 0.17%)          if self.index < self.len {
      .                       let i = self.index;
      .                       // since get_unchecked executes code which can panic we increment the counters beforehand
      .                       // so that the same index won't be accessed twice, as required by TrustedRandomAccess
228,863 ( 0.05%)              self.index += 1;
      .                       // SAFETY: `i` is smaller than `self.len`, thus smaller than `self.a.len()` and `self.b.len()`
      .                       unsafe {
      .                           Some((self.a.__iterator_get_unchecked(i), self.b.__iterator_get_unchecked(i)))
      .                       }
      .                   } else if A::MAY_HAVE_SIDE_EFFECT && self.index < self.a_len {
      .                       let i = self.index;
      .                       // as above, increment before executing code that may panic
      .                       self.index += 1;
-- line 283 ----------------------------------------
-- line 290 ----------------------------------------
      .                       None
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
 99,549 ( 0.02%)          let len = self.len - self.index;
      .                   (len, Some(len))
      .               }
      .           
      .               #[inline]
      .               fn nth(&mut self, n: usize) -> Option<Self::Item> {
      .                   let delta = cmp::min(n, self.len - self.index);
      .                   let end = self.index + delta;
      .                   while self.index < end {
-- line 306 ----------------------------------------
-- line 535 ----------------------------------------
      .           #[unstable(feature = "trusted_random_access", issue = "none")]
      .           #[rustc_specialization_trait]
      .           pub unsafe trait TrustedRandomAccessNoCoerce: Sized {
      .               // Convenience method.
      .               fn size(&self) -> usize
      .               where
      .                   Self: Iterator,
      .               {
    406 ( 0.00%)          self.size_hint().0
      .               }
      .               /// `true` if getting an iterator element may have side effects.
      .               /// Remember to take inner iterators into account.
      .               const MAY_HAVE_SIDE_EFFECT: bool;
      .           }
      .           
      .           /// Like `Iterator::__iterator_get_unchecked`, but doesn't require the compiler to
      .           /// know that `U: TrustedRandomAccess`.
-- line 551 ----------------------------------------
-- line 555 ----------------------------------------
      .           /// Same requirements calling `get_unchecked` directly.
      .           #[doc(hidden)]
      .           pub(in crate::iter::adapters) unsafe fn try_get_unchecked<I>(it: &mut I, idx: usize) -> I::Item
      .           where
      .               I: Iterator,
      .           {
      .               // SAFETY: the caller must uphold the contract for
      .               // `Iterator::__iterator_get_unchecked`.
    729 ( 0.00%)      unsafe { it.try_get_unchecked(idx) }
      .           }
      .           
      .           unsafe trait SpecTrustedRandomAccess: Iterator {
      .               /// If `Self: TrustedRandomAccess`, it must be safe to call
      .               /// `Iterator::__iterator_get_unchecked(self, index)`.
      .               unsafe fn try_get_unchecked(&mut self, index: usize) -> Self::Item;
      .           }
      .           
-- line 571 ----------------------------------------

222,163 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 111 ----------------------------------------
        .           const EMPTY: u8 = 0b1111_1111;
        .           
        .           /// Control byte value for a deleted bucket.
        .           const DELETED: u8 = 0b1000_0000;
        .           
        .           /// Checks whether a control byte represents a full bucket (top bit is clear).
        .           #[inline]
        .           fn is_full(ctrl: u8) -> bool {
  703,707 ( 0.15%)      ctrl & 0x80 == 0
        .           }
        .           
        .           /// Checks whether a control byte represents a special value (top bit is set).
        .           #[inline]
        .           fn is_special(ctrl: u8) -> bool {
        .               ctrl & 0x80 != 0
        .           }
        .           
        .           /// Checks whether a special control value is EMPTY (just check 1 bit).
        .           #[inline]
        .           fn special_is_empty(ctrl: u8) -> bool {
        .               debug_assert!(is_special(ctrl));
   43,623 ( 0.01%)      ctrl & 0x01 != 0
        .           }
        .           
        .           /// Primary hash function, used to select the initial bucket to probe from.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h1(hash: u64) -> usize {
        .               // On 32-bit platforms we simply ignore the higher hash bits.
        .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
        .           /// Secondary hash function, saved in the low 7 bits of the control byte.
        .           #[inline]
        .           #[allow(clippy::cast_possible_truncation)]
        .           fn h2(hash: u64) -> u8 {
        .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
        .               // value, some hash functions (such as FxHash) produce a usize result
        .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
        .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
9,329,451 ( 1.97%)      let top7 = hash >> (hash_len * 8 - 7);
        .               (top7 & 0x7f) as u8 // truncation
        .           }
        .           
        .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
        .           /// table size is a power of two) to visit every group of elements exactly once.
        .           ///
        .           /// A triangular probe has us jump by 1 more group every time. So first we
        .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
        .               #[inline]
        .               fn move_next(&mut self, bucket_mask: usize) {
        .                   // We should have found an empty bucket by now and ended the probe.
        .                   debug_assert!(
        .                       self.stride <= bucket_mask,
        .                       "Went past end of probe sequence"
        .                   );
        .           
  111,296 ( 0.02%)          self.stride += Group::WIDTH;
  111,296 ( 0.02%)          self.pos += self.stride;
   90,836 ( 0.02%)          self.pos &= bucket_mask;
        .               }
        .           }
        .           
        .           /// Returns the number of buckets needed to hold the given number of items,
        .           /// taking the maximum load factor into account.
        .           ///
        .           /// Returns `None` if an overflow occurs.
        .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
        .           #[cfg_attr(target_os = "emscripten", inline(never))]
        .           #[cfg_attr(not(target_os = "emscripten"), inline)]
        .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
        .               debug_assert_ne!(cap, 0);
        .           
        .               // For small tables we require at least 1 empty bucket so that lookups are
        .               // guaranteed to terminate if an element doesn't exist in the table.
   49,306 ( 0.01%)      if cap < 8 {
        .                   // We don't bother with a table size of 2 buckets since that can only
        .                   // hold a single element. Instead we skip directly to a 4 bucket table
        .                   // which can hold 3 elements.
   82,505 ( 0.02%)          return Some(if cap < 4 { 4 } else { 8 });
        .               }
        .           
        .               // Otherwise require 1/8 buckets to be empty (87.5% load)
        .               //
        .               // Be careful when modifying this, calculate_layout relies on the
        .               // overflow check here.
   48,912 ( 0.01%)      let adjusted_cap = cap.checked_mul(8)? / 7;
        .           
        .               // Any overflows will have been caught by the checked_mul. Also, any
        .               // rounding errors from the division above will be cleaned up by
        .               // next_power_of_two (which can't overflow because of the previous division).
        .               Some(adjusted_cap.next_power_of_two())
        .           }
        .           
        .           /// Returns the maximum effective capacity for the given bucket mask, taking
        .           /// the maximum load factor into account.
        .           #[inline]
        .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
  134,705 ( 0.03%)      if bucket_mask < 8 {
        .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
        .                   // Keep in mind that the bucket mask is one less than the bucket count.
        .                   bucket_mask
        .               } else {
        .                   // For larger tables we reserve 12.5% of the slots as empty.
   48,540 ( 0.01%)          ((bucket_mask + 1) / 8) * 7
        .               }
        .           }
        .           
        .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
        .           /// while keeping the rest of `calculate_layout_for` independent of `T`
        .           #[derive(Copy, Clone)]
        .           struct TableLayout {
        .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
        .           
        .               #[inline]
        .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   let TableLayout { size, ctrl_align } = self;
        .                   // Manual layout calculation since Layout methods are not yet stable.
        .                   let ctrl_offset =
   88,541 ( 0.02%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
  128,998 ( 0.03%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
        .           
        .                   Some((
        .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
        .                       ctrl_offset,
        .                   ))
        .               }
        .           }
        .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub unsafe fn drop(&self) {
        .                   self.as_ptr().drop_in_place();
        .               }
        .               #[inline]
        .               pub unsafe fn read(&self) -> T {
      226 ( 0.00%)          self.as_ptr().read()
        .               }
        .               #[inline]
        .               pub unsafe fn write(&self, val: T) {
        .                   self.as_ptr().write(val);
        .               }
        .               #[inline]
        .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
        .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
        .               /// Creates a new empty hash table without allocating any memory, using the
        .               /// given allocator.
        .               ///
        .               /// In effect this returns a table with exactly 1 bucket. However we can
        .               /// leave the data pointer dangling since that bucket is never written to
        .               /// due to our load factor forcing us to always have at least 1 free bucket.
        .               #[inline]
        .               pub fn new_in(alloc: A) -> Self {
      123 ( 0.00%)          Self {
        .                       table: RawTableInner::new_in(alloc),
        .                       marker: PhantomData,
        .                   }
        .               }
        .           
        .               /// Allocates a new hash table with the given number of buckets.
        .               ///
        .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
        .               unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   Ok(Self {
      140 ( 0.00%)              table: RawTableInner::new_uninitialized(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           buckets,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
        .               /// Attempts to allocate a new hash table with at least enough capacity
        .               /// for inserting the given number of elements without reallocating.
        .               fn fallible_with_capacity(
        .                   alloc: A,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   Ok(Self {
    3,523 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
        .                           alloc,
        .                           TableLayout::new::<T>(),
        .                           capacity,
        .                           fallibility,
        .                       )?,
        .                       marker: PhantomData,
        .                   })
        .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
        .                   debug_assert_ne!(self.table.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               /// Erases an element from the table without dropping it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    8,421 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    8,421 ( 0.00%)          let index = self.bucket_index(item);
        .                   self.table.erase(index);
   16,842 ( 0.00%)      }
        .           
        .               /// Erases an element from the table, dropping it in place.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
        .                   // Erase the element from the table first since drop might panic.
    2,036 ( 0.00%)          self.erase_no_drop(&item);
        .                   item.drop();
        .               }
        .           
        .               /// Finds and erases an element from the table, dropping it in place.
        .               /// Returns true if an element was found.
        .               #[cfg(feature = "raw")]
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::needless_pass_by_value)]
        .               #[allow(deprecated)]
        .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
   14,806 ( 0.00%)          self.erase_no_drop(&item);
       42 ( 0.00%)          item.read()
        .               }
        .           
        .               /// Finds and removes an element from the table, returning it.
        .               #[cfg_attr(feature = "inline-more", inline)]
  184,876 ( 0.04%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      106 ( 0.00%)          match self.find(hash, eq) {
    1,605 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
   19,367 ( 0.00%)              None => None,
        .                   }
  245,752 ( 0.05%)      }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear_no_drop(&mut self) {
        .                   self.table.clear_no_drop();
        .               }
        .           
        .               /// Removes all elements from the table without freeing the backing memory.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn clear(&mut self) {
        .                   // Ensure that the table is reset even if one of the drops panic
        .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
        .                   unsafe {
        1 ( 0.00%)              self_.drop_elements();
        .                   }
        .               }
        .           
        7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    7,950 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
        .                       for item in self.iter() {
        .                           item.drop();
        .                       }
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
        .                   // Calculate the minimal number of elements that we need to reserve
        .                   // space for.
        .                   let min_size = usize::max(self.table.items, min_size);
        .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Ensures that at least `additional` items can be inserted into the table
        .               /// without reallocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
  124,734 ( 0.03%)          if additional > self.table.growth_left {
        .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   80,447 ( 0.02%)              if self
        .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
        .                           .is_err()
        .                       {
        .                           unsafe { hint::unreachable_unchecked() }
        .                       }
        .                   }
        .               }
        .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
        .                   } else {
        .                       Ok(())
        .                   }
        .               }
        .           
        .               /// Out-of-line slow path for `reserve` and `try_reserve`.
        .               #[cold]
        .               #[inline(never)]
  196,298 ( 0.04%)      fn reserve_rehash(
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
        .               ) -> Result<(), TryReserveError> {
        .                   unsafe {
        .                       self.table.reserve_rehash_inner(
        .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
        .                           TableLayout::new::<T>(),
        .                           if mem::needs_drop::<T>() {
        .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
        .                           } else {
        .                               None
        .                           },
        .                       )
        .                   }
  129,632 ( 0.03%)      }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
        .               /// current table into it.
        .               fn resize(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: impl Fn(&T) -> u64,
        .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
        .                       )
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns its raw bucket.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
1,304,272 ( 0.27%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
        .                   unsafe {
        .                       let mut index = self.table.find_insert_slot(hash);
        .           
        .                       // We can avoid growing the table once we have reached our load
        .                       // factor if we are replacing a tombstone. This works since the
        .                       // number of EMPTY slots does not change in this case.
    2,968 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
  750,713 ( 0.16%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
        .                           self.reserve(1, hasher);
        .                           index = self.table.find_insert_slot(hash);
        .                       }
        .           
        .                       self.table.record_item_insert_at(index, old_ctrl, hash);
        .           
        .                       let bucket = self.bucket(index);
        2 ( 0.00%)              bucket.write(value);
        .                       bucket
        .                   }
  965,423 ( 0.20%)      }
        .           
        .               /// Attempts to insert a new element without growing the table and return its raw bucket.
        .               ///
        .               /// Returns an `Err` containing the given element if inserting it would require growing the
        .               /// table.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Inserts a new element into the table, and returns a mutable reference to it.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
  187,032 ( 0.04%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
       30 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
  140,274 ( 0.03%)      }
        .           
        .               /// Inserts a new element into the table, without growing the table.
        .               ///
        .               /// There must be enough space in the table to insert the new element.
        .               ///
        .               /// This does not check if the given element already exists in the table.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
      229 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
  123,773 ( 0.03%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    1,937 ( 0.00%)          let bucket = self.table.bucket(index);
        .           
        .                   // If we are replacing a DELETED entry then we don't need to update
        .                   // the load counter.
  256,997 ( 0.05%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
        .           
        .                   bucket.write(value);
  205,897 ( 0.04%)          self.table.items += 1;
        .                   bucket
      448 ( 0.00%)      }
        .           
        .               /// Temporary removes a bucket, applying the given function to the removed
        .               /// element and optionally put back the returned value in the same bucket.
        .               ///
        .               /// Returns `true` if the bucket still contains an element
        .               ///
        .               /// This does not check if the given bucket is actually occupied.
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// Searches for an element in the table.
        .               #[inline]
    1,120 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
    1,190 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    5,094 ( 0.00%)              eq(self.bucket(index).as_ref())
      214 ( 0.00%)          });
        .           
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match result {
      127 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
        .                       None => None,
        .                   }
    1,120 ( 0.00%)      }
        .           
        .               /// Gets a reference to an element in the table.
        .               #[inline]
        .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    2,621 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Gets a mutable reference to an element in the table.
        .               #[inline]
        .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      975 ( 0.00%)          match self.find(hash, eq) {
        .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Attempts to get mutable references to `N` entries in the table at once.
        .               ///
        .               /// Returns an array of length `N` with the results of each query.
-- line 855 ----------------------------------------
-- line 920 ----------------------------------------
        .               #[inline]
        .               pub fn len(&self) -> usize {
        .                   self.table.items
        .               }
        .           
        .               /// Returns `true` if the table contains no elements.
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
  182,775 ( 0.04%)          self.len() == 0
        .               }
        .           
        .               /// Returns the number of buckets in the table.
        .               #[inline]
        .               pub fn buckets(&self) -> usize {
        .                   self.table.bucket_mask + 1
        .               }
        .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
        .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
        .               /// Because we cannot make the `next` method unsafe on the `RawIter`
        .               /// struct, we have to make the `iter` method unsafe.
        .               #[inline]
        .               pub unsafe fn iter(&self) -> RawIter<T> {
        .                   let data = Bucket::from_base_index(self.data_end(), 0);
        .                   RawIter {
        .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
   20,363 ( 0.00%)              items: self.table.items,
        .                   }
        .               }
        .           
        .               /// Returns an iterator over occupied buckets that could match a given hash.
        .               ///
        .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
        .               /// return items that have a hash value different than the one provided. You
        .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
        .               /// Iteration starts at the provided iterator's current location.
        .               ///
        .               /// It is up to the caller to ensure that the iterator is valid for this
        .               /// `RawTable` and covers all items that remain in the table.
        .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
        .                   debug_assert_eq!(iter.len(), self.len());
        .           
        .                   let alloc = self.table.alloc.clone();
    2,884 ( 0.00%)          let allocation = self.into_allocation();
    2,163 ( 0.00%)          RawIntoIter {
    3,605 ( 0.00%)              iter,
        .                       allocation,
        .                       marker: PhantomData,
        .                       alloc,
        .                   }
        .               }
        .           
        .               /// Converts the table into a raw allocation. The contents of the table
        .               /// should be dropped using a `RawIter` before freeing the allocation.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
    1,289 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
        .                       None
        .                   } else {
        .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
        .                           Some(lco) => lco,
        .                           None => unsafe { hint::unreachable_unchecked() },
        .                       };
        .                       Some((
      281 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
        .                           layout,
        .                       ))
        .                   };
        .                   mem::forget(self);
        .                   alloc
        .               }
        .           }
        .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<A> RawTableInner<A> {
        .               #[inline]
        .               const fn new_in(alloc: A) -> Self {
  189,157 ( 0.04%)          Self {
        .                       // Be careful to cast the entire slice to a raw pointer.
        .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
        .                       bucket_mask: 0,
        .                       items: 0,
        .                       growth_left: 0,
        .                       alloc,
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Allocator + Clone> RawTableInner<A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
  150,775 ( 0.03%)      unsafe fn new_uninitialized(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   buckets: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
        .                   debug_assert!(buckets.is_power_of_two());
        .           
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
        .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
        .                   // such allocations will never succeed anyways.
        .                   //
        .                   // This mirrors what Vec does in the standard library.
        .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
        .                       return Err(fallibility.capacity_overflow());
        .                   }
        .           
   34,058 ( 0.01%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
        .                       Ok(block) => block.cast(),
        .                       Err(_) => return Err(fallibility.alloc_err(layout)),
        .                   };
        .           
        .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   83,946 ( 0.02%)          Ok(Self {
        .                       ctrl,
   38,672 ( 0.01%)              bucket_mask: buckets - 1,
        .                       items: 0,
        .                       growth_left: bucket_mask_to_capacity(buckets - 1),
        .                       alloc,
        .                   })
  109,844 ( 0.02%)      }
        .           
        .               #[inline]
    9,725 ( 0.00%)      fn fallible_with_capacity(
        .                   alloc: A,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<Self, TryReserveError> {
    2,504 ( 0.00%)          if capacity == 0 {
    1,554 ( 0.00%)              Ok(Self::new_in(alloc))
        .                   } else {
        .                       unsafe {
        .                           let buckets =
        .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
        .           
   68,676 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
        .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
        .           
    5,533 ( 0.00%)                  Ok(result)
        .                       }
        .                   }
    9,725 ( 0.00%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element and sets the hash for that slot.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
   43,404 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
        .                   let index = self.find_insert_slot(hash);
   43,404 ( 0.01%)          let old_ctrl = *self.ctrl(index);
        .                   self.set_ctrl_h2(index, hash);
        .                   (index, old_ctrl)
   86,808 ( 0.02%)      }
        .           
        .               /// Searches for an empty or deleted bucket which is suitable for inserting
        .               /// a new element.
        .               ///
        .               /// There must be at least 1 empty bucket in the table.
        .               #[inline]
        .               fn find_insert_slot(&self, hash: u64) -> usize {
        .                   let mut probe_seq = self.probe_seq(hash);
        .                   loop {
        .                       unsafe {
        .                           let group = Group::load(self.ctrl(probe_seq.pos));
  467,855 ( 0.10%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
1,355,488 ( 0.29%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
        .           
        .                               // In tables smaller than the group width, trailing control
        .                               // bytes outside the range of the table are filled with
        .                               // EMPTY entries. These will unfortunately trigger a
        .                               // match, but once masked may point to a full bucket that
        .                               // is already occupied. We detect this situation here and
        .                               // perform a second scan starting at the beginning of the
        .                               // table. This second scan is guaranteed to find an empty
        .                               // slot (due to the load factor) before hitting the trailing
        .                               // control bytes (containing EMPTY).
  639,394 ( 0.13%)                      if unlikely(is_full(*self.ctrl(result))) {
        .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
        .                                   debug_assert_ne!(probe_seq.pos, 0);
        .                                   return Group::load_aligned(self.ctrl(0))
        .                                       .match_empty_or_deleted()
        .                                       .lowest_set_bit_nonzero();
        .                               }
        .           
        .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
        .           
        .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
        .               /// code generated, but it is eliminated by LLVM optimizations.
        .               #[inline]
        .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
        .                   let h2_hash = h2(hash);
        .                   let mut probe_seq = self.probe_seq(hash);
        .           
   15,872 ( 0.00%)          loop {
        .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
        .           
1,006,523 ( 0.21%)              for bit in group.match_byte(h2_hash) {
1,821,134 ( 0.38%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
        .           
1,129,075 ( 0.24%)                  if likely(eq(index)) {
        .                               return Some(index);
        .                           }
        .                       }
        .           
  368,049 ( 0.08%)              if likely(group.match_empty().any_bit_set()) {
        .                           return None;
        .                       }
        .           
        .                       probe_seq.move_next(self.bucket_mask);
        .                   }
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
        .                   Bucket::from_base_index(self.data_end(), index)
        .               }
        .           
        .               #[inline]
        .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
        .                   debug_assert_ne!(self.bucket_mask, 0);
        .                   debug_assert!(index < self.buckets());
        .                   let base: *mut u8 = self.data_end().as_ptr();
1,637,616 ( 0.34%)          base.sub((index + 1) * size_of)
        .               }
        .           
        .               #[inline]
        .               unsafe fn data_end<T>(&self) -> NonNull<T> {
        .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
        .               }
        .           
        .               /// Returns an iterator-like object for a probe sequence on the table.
        .               ///
        .               /// This iterator never terminates, but is guaranteed to visit each bucket
        .               /// group exactly once. The loop using `probe_seq` must terminate upon
        .               /// reaching a group containing an empty bucket.
        .               #[inline]
        .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
        .                   ProbeSeq {
6,612,277 ( 1.39%)              pos: h1(hash) & self.bucket_mask,
        .                       stride: 0,
        .                   }
        .               }
        .           
        .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
        .               /// in the table, otherwise returns error
        .               #[cfg(feature = "raw")]
        .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
        .                   } else {
        .                       self.record_item_insert_at(index, old_ctrl, hash);
        .                       Ok(index)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
  938,235 ( 0.20%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
        .                   self.set_ctrl_h2(index, hash);
  750,588 ( 0.16%)          self.items += 1;
        .               }
        .           
        .               #[inline]
        .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
        .                   let probe_seq_pos = self.probe_seq(hash).pos;
        .                   let probe_index =
        .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
        .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
        .                   // replicate the buckets at the end of the trailing group. For example
        .                   // with 2 buckets and a group size of 4, the control bytes will look
        .                   // like this:
        .                   //
        .                   //     Real    |             Replicated
        .                   // ---------------------------------------------
        .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
        .                   // ---------------------------------------------
1,307,916 ( 0.28%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
        .           
  435,972 ( 0.09%)          *self.ctrl(index) = ctrl;
  435,981 ( 0.09%)          *self.ctrl(index2) = ctrl;
        .               }
        .           
        .               /// Returns a pointer to a control byte.
        .               #[inline]
        .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
        .                   debug_assert!(index < self.num_ctrl_bytes());
        .                   self.ctrl.as_ptr().add(index)
        .               }
        .           
        .               #[inline]
        .               fn buckets(&self) -> usize {
   87,416 ( 0.02%)          self.bucket_mask + 1
        .               }
        .           
        .               #[inline]
        .               fn num_ctrl_bytes(&self) -> usize {
   81,687 ( 0.02%)          self.bucket_mask + 1 + Group::WIDTH
        .               }
        .           
        .               #[inline]
        .               fn is_empty_singleton(&self) -> bool {
  367,420 ( 0.08%)          self.bucket_mask == 0
        .               }
        .           
        .               #[allow(clippy::mut_mut)]
        .               #[inline]
        .               unsafe fn prepare_resize(
        .                   &self,
        .                   table_layout: TableLayout,
        .                   capacity: usize,
        .                   fallibility: Fallibility,
        .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
        .                   debug_assert!(self.items <= capacity);
        .           
        .                   // Allocate and initialize the new table.
    1,041 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
        .                       self.alloc.clone(),
        .                       table_layout,
        .                       capacity,
        .                       fallibility,
        .                   )?;
   52,587 ( 0.01%)          new_table.growth_left -= self.items;
        .                   new_table.items = self.items;
        .           
        .                   // The hash function may panic, in which case we simply free the new
        .                   // table without dropping any elements that may have been copied into
        .                   // it.
        .                   //
        .                   // This guard is also used to free the old table on success, see
        .                   // the comment at the bottom of this function.
        .                   Ok(guard(new_table, move |self_| {
   24,076 ( 0.01%)              if !self_.is_empty_singleton() {
        .                           self_.free_buckets(table_layout);
        .                       }
        .                   }))
        .               }
        .           
        .               /// Reserves or rehashes to make room for `additional` more elements.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
        .                   &mut self,
        .                   additional: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .                   drop: Option<fn(*mut u8)>,
        .               ) -> Result<(), TryReserveError> {
        .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
   48,152 ( 0.01%)          let new_items = match self.items.checked_add(additional) {
        .                       Some(new_items) => new_items,
        .                       None => return Err(fallibility.capacity_overflow()),
        .                   };
   48,152 ( 0.01%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
  105,527 ( 0.02%)          if new_items <= full_capacity / 2 {
        .                       // Rehash in-place without re-allocating if we have plenty of spare
        .                       // capacity that is locked up due to DELETED entries.
        .                       self.rehash_in_place(hasher, layout.size, drop);
        .                       Ok(())
        .                   } else {
        .                       // Otherwise, conservatively resize to at least the next size up
        .                       // to avoid churning deletes into frequent rehashes.
        .                       self.resize_inner(
   24,076 ( 0.01%)                  usize::max(new_items, full_capacity + 1),
        .                           hasher,
        .                           fallibility,
        .                           layout,
        .                       )
        .                   }
        .               }
        .           
        .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
        .               #[inline(always)]
        .               unsafe fn resize_inner(
        .                   &mut self,
        .                   capacity: usize,
        .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
        .                   fallibility: Fallibility,
        .                   layout: TableLayout,
        .               ) -> Result<(), TryReserveError> {
    2,546 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
        .           
        .                   // Copy all elements to the new table.
        .                   for i in 0..self.buckets() {
  251,960 ( 0.05%)              if !is_full(*self.ctrl(i)) {
        .                           continue;
        .                       }
        .           
        .                       // This may panic.
        .                       let hash = hasher(self, i);
        .           
        .                       // We can use a simpler version of insert() here since:
        .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
        .                   }
        .           
        .                   // We successfully copied all elements without panicking. Now replace
        .                   // self with the new table. The old table will have its memory freed but
        .                   // the items will not be dropped (since they have been moved into the
        .                   // new table).
        .                   mem::swap(self, &mut new_table);
        .           
   24,076 ( 0.01%)          Ok(())
        .               }
        .           
        .               /// Rehashes the contents of the table in place (i.e. without changing the
        .               /// allocation).
        .               ///
        .               /// If `hasher` panics then some the table's contents may be lost.
        .               ///
        .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
        .               #[inline]
        .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
        .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
        .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
        .                       Some(lco) => lco,
        .                       None => hint::unreachable_unchecked(),
        .                   };
        .                   self.alloc.deallocate(
   15,439 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
        .                       layout,
        .                   );
        .               }
        .           
        .               /// Marks all table buckets as empty without dropping their contents.
        .               #[inline]
        .               fn clear_no_drop(&mut self) {
    1,958 ( 0.00%)          if !self.is_empty_singleton() {
        .                       unsafe {
        .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
        .                       }
        .                   }
    2,246 ( 0.00%)          self.items = 0;
    1,958 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
        .               }
        .           
        .               #[inline]
        .               unsafe fn erase(&mut self, index: usize) {
        .                   debug_assert!(is_full(*self.ctrl(index)));
   36,669 ( 0.01%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
        .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
        .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
        .           
        .                   // If we are inside a continuous block of Group::WIDTH full or deleted
        .                   // cells then a probe window may have seen a full block when trying to
        .                   // insert. We therefore need to keep that block non-empty so that
        .                   // lookups will continue searching to the next probe window.
        .                   //
        .                   // Note that in this context `leading_zeros` refers to the bytes at the
        .                   // end of a group, while `trailing_zeros` refers to the bytes at the
        .                   // beginning of a group.
  146,676 ( 0.03%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
        .                       DELETED
        .                   } else {
  178,290 ( 0.04%)              self.growth_left += 1;
        .                       EMPTY
        .                   };
        .                   self.set_ctrl(index, ctrl);
  146,676 ( 0.03%)          self.items -= 1;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
      344 ( 0.00%)      fn clone(&self) -> Self {
       69 ( 0.00%)          if self.table.is_empty_singleton() {
        .                       Self::new_in(self.table.alloc.clone())
        .                   } else {
        .                       unsafe {
        .                           let mut new_table = ManuallyDrop::new(
        .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
        .                               match Self::new_uninitialized(
        .                                   self.table.alloc.clone(),
        .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
        .                               // We need to free the memory allocated for the new table.
        .                               new_table.free_buckets();
        .                           });
        .           
        .                           // Return the newly created table.
        .                           ManuallyDrop::into_inner(new_table)
        .                       }
        .                   }
      387 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   if source.table.is_empty_singleton() {
        .                       *self = Self::new_in(self.table.alloc.clone());
        .                   } else {
        .                       unsafe {
        .                           // First, drop all our elements without clearing the control bytes.
        .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
        .                       .table
        .                       .ctrl(0)
        .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
        .                   source
        .                       .data_start()
        .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
        .           
        .                   self.table.items = source.table.items;
       56 ( 0.00%)          self.table.growth_left = source.table.growth_left;
        .               }
        .           }
        .           
        .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
        .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
        .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
        .               fn default() -> Self {
        .                   Self::new_in(Default::default())
        .               }
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
  182,294 ( 0.04%)      fn drop(&mut self) {
  154,064 ( 0.03%)          if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
        .                           self.free_buckets();
        .                       }
        .                   }
  179,298 ( 0.04%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   if !self.table.is_empty_singleton() {
        .                       unsafe {
        .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
        .               type Item = T;
        .               type IntoIter = RawIntoIter<T, A>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    2,884 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
        .                   unsafe {
        .                       let iter = self.iter();
        .                       self.into_iter_from(iter)
        .                   }
    3,605 ( 0.00%)      }
        .           }
        .           
        .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
        .           /// not track an item count.
        .           pub(crate) struct RawIterRange<T> {
        .               // Mask of full buckets in the current group. Bits are cleared from this
        .               // mask as each element is processed.
        .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
        .           
        .           impl<T> Iterator for RawIterRange<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<Bucket<T>> {
        .                   unsafe {
        .                       loop {
   88,160 ( 0.02%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    5,984 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    9,125 ( 0.00%)                      return Some(self.data.next_n(index));
        .                           }
        .           
   54,114 ( 0.01%)                  if self.next_ctrl >= self.end {
        .                               return None;
        .                           }
        .           
        .                           // We might read past self.end up to the next group boundary,
        .                           // but this is fine because it only occurs on tables smaller
        .                           // than the group size where the trailing control bytes are all
        .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
        .                           // to the group size (since tables are power-of-two sized).
    1,321 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
      502 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    3,064 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
        .                       }
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // We don't have an item count, so just guess based on the range size.
        .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
        .                           }
        .                       } else {
        .                           // We must have already iterated past the removed item.
        .                       }
        .                   }
        .               }
        .           
        .               unsafe fn drop_elements(&mut self) {
      714 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
        .                       for item in self {
        .                           item.drop();
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T> Iterator for RawIter<T> {
        .               type Item = Bucket<T>;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
    7,219 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
   16,532 ( 0.00%)          if let Some(b) = self.iter.next() {
  122,709 ( 0.03%)              self.items -= 1;
        .                       Some(b)
        .                   } else {
        .                       // We don't check against items == 0 here to allow the
        .                       // compiler to optimize away the item count entirely if the
        .                       // iterator length is never queried.
        .                       debug_assert_eq!(self.items, 0);
        .                       None
        .                   }
   14,438 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.items, Some(self.items))
        .               }
        .           }
        .           
        .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
    1,574 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
        .           
        .                       // Free the table
    5,988 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
        .                           self.alloc.deallocate(ptr, layout);
        .                       }
        .                   }
      178 ( 0.00%)      }
        .           }
        .           #[cfg(not(feature = "nightly"))]
        .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements
        .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
      230 ( 0.00%)      fn next(&mut self) -> Option<T> {
       84 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
      460 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        3 ( 0.00%)          self.iter.size_hint()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
        .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
        .           
        .           /// Iterator which consumes elements without freeing the table storage.
        .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
        .           where
        .               T: Sync,
        .               A: Sync,
        .           {
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
      112 ( 0.00%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // Drop all remaining elements. Note that this may panic.
        .                       self.iter.drop_elements();
        .           
        .                       // Reset the contents of the table now that all elements have been
        .                       // dropped.
        .                       self.table.clear_no_drop();
        .           
        .                       // Move the now empty table back to its original location.
       14 ( 0.00%)              self.orig_table
        .                           .as_ptr()
        .                           .copy_from_nonoverlapping(&*self.table, 1);
        .                   }
      112 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
        .               type Item = T;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<T> {
        .                   unsafe {
-- line 2289 ----------------------------------------

3,741,055 ( 0.79%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                 

-- line 23 ----------------------------------------
        .           use std::cmp::Ordering;
        .           use std::marker::PhantomData;
        .           use std::ops::Range;
        .           use ty::util::IntTypeExt;
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct TypeAndMut<'tcx> {
       64 ( 0.00%)      pub ty: Ty<'tcx>,
      320 ( 0.00%)      pub mutbl: hir::Mutability,
        .           }
        .           
        .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        .           #[derive(HashStable)]
        .           /// A "free" region `fr` can be interpreted as "some region
        .           /// at least as big as the scope `fr.scope`".
        .           pub struct FreeRegion {
    5,381 ( 0.00%)      pub scope: DefId,
   11,737 ( 0.00%)      pub bound_region: BoundRegionKind,
        .           }
        .           
   56,281 ( 0.01%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        .           #[derive(HashStable)]
        .           pub enum BoundRegionKind {
        .               /// An anonymous region parameter for a given fn (&T)
    2,896 ( 0.00%)      BrAnon(u32),
        .           
        .               /// Named region parameters for functions (a in &'a T)
        .               ///
        .               /// The `DefId` is needed to distinguish free regions in
        .               /// the event of shadowing.
        .               BrNamed(DefId, Symbol),
        .           
        .               /// Anonymous region for the implicit env pointer parameter
        .               /// to a closure
        .               BrEnv,
        .           }
        .           
      396 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           #[derive(HashStable)]
        .           pub struct BoundRegion {
   10,203 ( 0.00%)      pub var: BoundVar,
    8,239 ( 0.00%)      pub kind: BoundRegionKind,
        .           }
        .           
        .           impl BoundRegionKind {
        .               pub fn is_named(&self) -> bool {
        .                   match *self {
        .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
        .                       _ => false,
        .                   }
        .               }
        .           }
        .           
        .           /// Defines the kinds of types.
        .           ///
        .           /// N.B., if you change this, you'll probably want to change the corresponding
        .           /// AST structure in `rustc_ast/src/ast.rs` as well.
2,398,351 ( 0.51%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
        .           #[derive(HashStable)]
        .           #[rustc_diagnostic_item = "TyKind"]
        .           pub enum TyKind<'tcx> {
        .               /// The primitive boolean type. Written as `bool`.
        .               Bool,
        .           
        .               /// The primitive character type; holds a Unicode scalar value
        .               /// (a non-surrogate code point). Written as `char`.
-- line 89 ----------------------------------------
-- line 99 ----------------------------------------
        .               Float(ty::FloatTy),
        .           
        .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
        .               ///
        .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
        .               /// That is, even after substitution it is possible that there are type
        .               /// variables. This happens when the `Adt` corresponds to an ADT
        .               /// definition and not a concrete use of it.
  437,714 ( 0.09%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
        .           
        .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
        .               Foreign(DefId),
        .           
        .               /// The pointee of a string slice. Written as `str`.
        .               Str,
        .           
        .               /// An array with the given length. Written as `[T; n]`.
    5,775 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
        .           
        .               /// The pointee of an array slice. Written as `[T]`.
        .               Slice(Ty<'tcx>),
        .           
        .               /// A raw pointer. Written as `*mut T` or `*const T`
        .               RawPtr(TypeAndMut<'tcx>),
        .           
        .               /// A reference; a pointer with an associated lifetime. Written as
        .               /// `&'a mut T` or `&'a T`.
  163,957 ( 0.03%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
        .           
        .               /// The anonymous type of a function declaration/definition. Each
        .               /// function has a unique type, which is output (for a function
        .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
        .               ///
        .               /// For example the type of `bar` here:
        .               ///
        .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .               ///
        .               /// ```rust
        .               /// fn foo() -> i32 { 1 }
        .               /// let bar: fn() -> i32 = foo;
        .               /// ```
        .               FnPtr(PolyFnSig<'tcx>),
        .           
        .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
       22 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
        .           
        .               /// The anonymous type of a closure. Used to represent the type of
        .               /// `|a| a`.
        .               Closure(DefId, SubstsRef<'tcx>),
        .           
        .               /// The anonymous type of a generator. Used to represent the type of
        .               /// `|a| yield a`.
        .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
        .               /// The substitutions are for the generics of the function in question.
        .               /// After typeck, the concrete type can be found in the `types` map.
        .               Opaque(DefId, SubstsRef<'tcx>),
        .           
        .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
        .               Param(ParamTy),
        .           
        .               /// Bound type variable, used only when preparing a trait query.
      265 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
        .           
        .               /// A placeholder type - universally quantified higher-ranked type.
        .               Placeholder(ty::PlaceholderType),
        .           
        .               /// A type variable used during type checking.
        .               Infer(InferTy),
        .           
        .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
        .               pub closure_kind_ty: T,
        .               pub closure_sig_as_fn_ptr_ty: T,
        .               pub tupled_upvars_ty: T,
        .           }
        .           
        .           impl<'tcx> ClosureSubsts<'tcx> {
        .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
        .               /// for the closure parent, alongside additional closure-specific components.
       11 ( 0.00%)      pub fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
        .               ) -> ClosureSubsts<'tcx> {
        .                   ClosureSubsts {
        .                       substs: tcx.mk_substs(
       22 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
       44 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
        .                                   .iter()
        .                                   .map(|&ty| ty.into()),
        .                           ),
        .                       ),
        .                   }
       22 ( 0.00%)      }
        .           
        .               /// Divides the closure substs into their respective components.
        .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
      286 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
        .                   match self.substs[..] {
    1,968 ( 0.00%)              [
      590 ( 0.00%)                  ref parent_substs @ ..,
      592 ( 0.00%)                  closure_kind_ty,
      240 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
      438 ( 0.00%)                  tupled_upvars_ty,
    1,144 ( 0.00%)              ] => ClosureSubstsParts {
        .                           parent_substs,
        .                           closure_kind_ty,
        .                           closure_sig_as_fn_ptr_ty,
        .                           tupled_upvars_ty,
        .                       },
        .                       _ => bug!("closure substs missing synthetics"),
        .                   }
      858 ( 0.00%)      }
        .           
        .               /// Returns `true` only if enough of the synthetic types are known to
        .               /// allow using all of the methods on `ClosureSubsts` without panicking.
        .               ///
        .               /// Used primarily by `ty::print::pretty` to be able to handle closure
        .               /// types that haven't had their synthetic types substituted in.
        .               pub fn is_valid(self) -> bool {
        .                   self.substs.len() >= 3
-- line 378 ----------------------------------------
-- line 383 ----------------------------------------
        .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
        .                   self.split().parent_substs
        .               }
        .           
        .               /// Returns an iterator over the list of types of captured paths by the closure.
        .               /// In case there was a type error in figuring out the types of the captured path, an
        .               /// empty iterator is returned.
        .               #[inline]
      132 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
      132 ( 0.00%)          match self.tupled_upvars_ty().kind() {
        .                       TyKind::Error(_) => None,
       88 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
        .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
        .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
        .                   }
        .                   .into_iter()
        .                   .flatten()
       88 ( 0.00%)      }
        .           
        .               /// Returns the tuple type representing the upvars for this closure.
        .               #[inline]
        .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
    1,254 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
        .               }
        .           
        .               /// Returns the closure kind for this closure; may return a type
        .               /// variable during inference. To get the closure kind during
        .               /// inference, use `infcx.closure_kind(substs)`.
      121 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
        .                   self.split().closure_kind_ty.expect_ty()
      242 ( 0.00%)      }
        .           
        .               /// Returns the `fn` pointer type representing the closure signature for this
        .               /// closure.
        .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
        .               // type is known at the time of the creation of `ClosureSubsts`,
        .               // see `rustc_typeck::check::closure`.
        .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
        .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
        .               }
        .           
        .               /// Returns the closure kind for this closure; only usable outside
        .               /// of an inference context, because in that context we know that
        .               /// there are no type variables.
        .               ///
        .               /// If you have an inference context, use `infcx.closure_kind()`.
       11 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
       11 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
       22 ( 0.00%)      }
        .           
        .               /// Extracts the signature from the closure.
       88 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
        .                   let ty = self.sig_as_fn_ptr_ty();
      176 ( 0.00%)          match ty.kind() {
      352 ( 0.00%)              ty::FnPtr(sig) => *sig,
        .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
        .                   }
      264 ( 0.00%)      }
        .           }
        .           
        .           /// Similar to `ClosureSubsts`; see the above documentation for more.
        .           #[derive(Copy, Clone, Debug, TypeFoldable)]
        .           pub struct GeneratorSubsts<'tcx> {
        .               pub substs: SubstsRef<'tcx>,
        .           }
        .           
-- line 448 ----------------------------------------
-- line 676 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> UpvarSubsts<'tcx> {
        .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
        .               /// In case there was a type error in figuring out the types of the captured path, an
        .               /// empty iterator is returned.
        .               #[inline]
        .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       44 ( 0.00%)          let tupled_tys = match self {
       55 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
        .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
        .                   };
        .           
       88 ( 0.00%)          match tupled_tys.kind() {
        .                       TyKind::Error(_) => None,
       77 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
        .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
        .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
        .                   }
        .                   .into_iter()
        .                   .flatten()
        .               }
        .           
        .               #[inline]
        .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
       66 ( 0.00%)          match self {
       88 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
        .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
        .                   }
        .               }
        .           }
        .           
        .           /// An inline const is modeled like
        .           ///
        .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
-- line 710 ----------------------------------------
-- line 760 ----------------------------------------
        .               }
        .           
        .               /// Returns the type of this inline const.
        .               pub fn ty(self) -> Ty<'tcx> {
        .                   self.split().ty.expect_ty()
        .               }
        .           }
        .           
      188 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable)]
        .           pub enum ExistentialPredicate<'tcx> {
        .               /// E.g., `Iterator`.
        .               Trait(ExistentialTraitRef<'tcx>),
        .               /// E.g., `Iterator::Item = T`.
        .               Projection(ExistentialProjection<'tcx>),
        .               /// E.g., `Send`.
        6 ( 0.00%)      AutoTrait(DefId),
        .           }
        .           
        .           impl<'tcx> ExistentialPredicate<'tcx> {
        .               /// Compares via an ordering that will not change if modules are reordered or other changes are
        .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
       30 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
        .                   use self::ExistentialPredicate::*;
       32 ( 0.00%)          match (*self, *other) {
        .                       (Trait(_), Trait(_)) => Ordering::Equal,
        .                       (Projection(ref a), Projection(ref b)) => {
        .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
        .                       }
        .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
        .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
        .                       }
        .                       (Trait(_), _) => Ordering::Less,
        .                       (Projection(_), Trait(_)) => Ordering::Greater,
        .                       (Projection(_), _) => Ordering::Less,
        .                       (AutoTrait(_), _) => Ordering::Greater,
        .                   }
       36 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
        .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
        .                   use crate::ty::ToPredicate;
        .                   match self.skip_binder() {
        .                       ExistentialPredicate::Trait(tr) => {
        .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
-- line 805 ----------------------------------------
-- line 840 ----------------------------------------
        .               ///
        .               /// It is also possible to have a "trivial" trait object that
        .               /// consists only of auto traits, with no principal - for example,
        .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
        .               /// is `{Send, Sync}`, while there is no principal. These trait objects
        .               /// have a "trivial" vtable consisting of just the size, alignment,
        .               /// and destructor.
        .               pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
        6 ( 0.00%)          self[0]
        6 ( 0.00%)              .map_bound(|this| match this {
        .                           ExistentialPredicate::Trait(tr) => Some(tr),
        .                           _ => None,
        .                       })
        .                       .transpose()
        .               }
        .           
        .               pub fn principal_def_id(&self) -> Option<DefId> {
        .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
-- line 857 ----------------------------------------
-- line 886 ----------------------------------------
        .           ///     T: Foo<U>
        .           ///
        .           /// This would be represented by a trait-reference where the `DefId` is the
        .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
        .           /// and `U` as parameter 1.
        .           ///
        .           /// Trait references also appear in object types like `Foo<U>`, but in
        .           /// that case the `Self` parameter is absent from the substitutions.
   10,989 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
  254,545 ( 0.05%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct TraitRef<'tcx> {
   23,606 ( 0.00%)      pub def_id: DefId,
  237,662 ( 0.05%)      pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> TraitRef<'tcx> {
      549 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
        .                   TraitRef { def_id, substs }
    2,196 ( 0.00%)      }
        .           
        .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
        .               /// are the parameters defined on trait.
      270 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
      120 ( 0.00%)          ty::Binder::dummy(TraitRef {
        .                       def_id,
      180 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
        .                   })
      240 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn self_ty(&self) -> Ty<'tcx> {
        .                   self.substs.type_at(0)
        .               }
        .           
      352 ( 0.00%)      pub fn from_method(
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_id: DefId,
        .                   substs: SubstsRef<'tcx>,
        .               ) -> ty::TraitRef<'tcx> {
        .                   let defs = tcx.generics_of(trait_id);
        .           
       44 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
      484 ( 0.00%)      }
        .           }
        .           
        .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
        .           
        .           impl<'tcx> PolyTraitRef<'tcx> {
        .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
        .                   self.map_bound_ref(|tr| tr.self_ty())
        .               }
        .           
        .               pub fn def_id(&self) -> DefId {
      177 ( 0.00%)          self.skip_binder().def_id
       59 ( 0.00%)      }
        .           
    1,509 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
    3,018 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
        .                       trait_ref,
        .                       constness: ty::BoundConstness::NotConst,
        .                       polarity: ty::ImplPolarity::Positive,
        .                   })
    1,509 ( 0.00%)      }
        .           }
        .           
        .           /// An existential reference to a trait, where `Self` is erased.
        .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
        .           ///
        .           ///     exists T. T: Trait<'a, 'b, X, Y>
        .           ///
        .           /// The substitutions don't include the erased `Self`, only trait
        .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
       28 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable)]
        .           pub struct ExistentialTraitRef<'tcx> {
        6 ( 0.00%)      pub def_id: DefId,
       12 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> ExistentialTraitRef<'tcx> {
        .               pub fn erase_self_ty(
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_ref: ty::TraitRef<'tcx>,
        .               ) -> ty::ExistentialTraitRef<'tcx> {
        .                   // Assert there is a Self.
-- line 970 ----------------------------------------
-- line 999 ----------------------------------------
        .               /// we convert the principal trait-ref into a normal trait-ref,
        .               /// you must give *some* self type. A common choice is `mk_err()`
        .               /// or some placeholder type.
        .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
        .                   self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
        .               }
        .           }
        .           
    8,263 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum BoundVariableKind {
        .               Ty(BoundTyKind),
        .               Region(BoundRegionKind),
        .               Const,
        .           }
        .           
        .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
-- line 1015 ----------------------------------------
-- line 1016 ----------------------------------------
        .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
        .           /// (which would be represented by the type `PolyTraitRef ==
        .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
        .           /// erase, or otherwise "discharge" these bound vars, we change the
        .           /// type from `Binder<'tcx, T>` to just `T` (see
        .           /// e.g., `liberate_late_bound_regions`).
        .           ///
        .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
      388 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
   92,988 ( 0.02%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
        .           
        .           impl<'tcx, T> Binder<'tcx, T>
        .           where
        .               T: TypeFoldable<'tcx>,
        .           {
        .               /// Wraps `value` in a binder, asserting that `value` does not
        .               /// contain any bound vars that would be bound by the
        .               /// binder. This is commonly used to 'inject' a value T into a
        .               /// different binding level.
    6,080 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
   15,622 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
   44,269 ( 0.01%)          Binder(value, ty::List::empty())
    6,080 ( 0.00%)      }
        .           
        .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(vars);
        .                       value.visit_with(&mut validator);
        .                   }
    5,130 ( 0.00%)          Binder(value, vars)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Binder<'tcx, T> {
        .               /// Skips the binder and returns the "bound" value. This is a
        .               /// risky thing to do because it's easy to get confused about
        .               /// De Bruijn indices and the like. It is usually better to
        .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
        .               /// accounting.
        .               ///
        .               /// Some examples where `skip_binder` is reasonable:
        .               ///
        .               /// - extracting the `DefId` from a PolyTraitRef;
        .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
        .               ///   a type parameter `X`, since the type `X` does not reference any regions
        .               pub fn skip_binder(self) -> T {
  227,316 ( 0.05%)          self.0
        .               }
        .           
        .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
      571 ( 0.00%)          self.1
        .               }
        .           
        .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
      217 ( 0.00%)          Binder(&self.0, self.1)
        .               }
        .           
        .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(&T) -> U,
        .               {
        .                   let value = f(&self.0);
        .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
        .           
        .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(&T) -> U,
        .               {
        .                   self.as_ref().map_bound(f)
        .               }
        .           
       88 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(T) -> U,
        .               {
   18,442 ( 0.00%)          let value = f(self.0);
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
   30,066 ( 0.01%)          Binder(value, self.1)
       88 ( 0.00%)      }
        .           
        .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
        .               where
        .                   F: FnOnce(T) -> Result<U, E>,
        .               {
        .                   let value = f(self.0)?;
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
      150 ( 0.00%)          Ok(Binder(value, self.1))
        .               }
        .           
        .               /// Wraps a `value` in a binder, using the same bound variables as the
        .               /// current `Binder`. This should not be used if the new value *changes*
        .               /// the bound variables. Note: the (old or new) value itself does not
        .               /// necessarily need to *name* all the bound variables.
        .               ///
        .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
        .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
        .               where
        .                   U: TypeFoldable<'tcx>,
        .               {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
        .                       value.visit_with(&mut validator);
        .                   }
    2,372 ( 0.00%)          Binder(value, self.1)
        .               }
        .           
        .               /// Unwraps and returns the value within, but only if it contains
        .               /// no bound vars at all. (In other words, if this binder --
        .               /// and indeed any enclosing binder -- doesn't bind anything at
        .               /// all.) Otherwise, returns `None`.
        .               ///
        .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
        .               /// binder, but permits late-bound vars bound by enclosing
        .               /// binders, but that would require adjusting the debruijn
        .               /// indices, and given the shallow binding structure we often use,
        .               /// would not be that useful.)
        .               pub fn no_bound_vars(self) -> Option<T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
   34,543 ( 0.01%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
        .               }
        .           
        .               /// Splits the contents into two things that share the same binder
        .               /// level as the original, returning two distinct binders.
        .               ///
        .               /// `f` should consider bound regions at depth 1 to be free, and
        .               /// anything it produces with bound regions at depth 1 will be
        .               /// bound in the resulting return values.
-- line 1159 ----------------------------------------
-- line 1170 ----------------------------------------
        .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
        .                   let bound_vars = self.1;
        .                   self.0.map(|v| Binder(v, bound_vars))
        .               }
        .           }
        .           
        .           /// Represents the projection of an associated type. In explicit UFCS
        .           /// form this would be written `<T as Trait<..>>::N`.
      657 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
   11,116 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ProjectionTy<'tcx> {
        .               /// The parameters of the associated item.
   16,172 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .           
        .               /// The `DefId` of the `TraitItem` for the associated type `N`.
        .               ///
        .               /// Note that this is not the `DefId` of the `TraitRef` containing this
        .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
   11,192 ( 0.00%)      pub item_def_id: DefId,
        .           }
        .           
        .           impl<'tcx> ProjectionTy<'tcx> {
   10,192 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
    2,912 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
   11,648 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference and own substs from this projection.
        .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
        .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
    1,918 ( 0.00%)      pub fn trait_ref_and_own_substs(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
      822 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
        .                   let trait_generics = tcx.generics_of(def_id);
    1,370 ( 0.00%)          (
        .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
        .                       &self.substs[trait_generics.count()..],
        .                   )
    2,466 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference from this projection.
        .               /// For example, if this is a projection of `<T as Iterator>::Item`,
        .               /// then this function would return a `T: Iterator` trait reference.
        .               ///
        .               /// WARNING: This will drop the substs for generic associated types
        .               /// consider calling [Self::trait_ref_and_own_substs] to get those
        .               /// as well.
   13,005 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
    1,445 ( 0.00%)          let def_id = self.trait_def_id(tcx);
    1,445 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
   15,895 ( 0.00%)      }
        .           
    2,868 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
    8,604 ( 0.00%)          self.substs.type_at(0)
    5,736 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Copy, Clone, Debug, TypeFoldable)]
        .           pub struct GenSig<'tcx> {
        .               pub resume_ty: Ty<'tcx>,
        .               pub yield_ty: Ty<'tcx>,
        .               pub return_ty: Ty<'tcx>,
        .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
        .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
        .           
        .           /// Signature of a function type, which we have arbitrarily
        .           /// decided to use to refer to the input/output types.
        .           ///
        .           /// - `inputs`: is the list of arguments and their modes.
        .           /// - `output`: is the return type.
        .           /// - `c_variadic`: indicates whether this is a C-variadic function.
    6,486 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    4,609 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct FnSig<'tcx> {
      305 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
    4,936 ( 0.00%)      pub c_variadic: bool,
      986 ( 0.00%)      pub unsafety: hir::Unsafety,
    5,225 ( 0.00%)      pub abi: abi::Abi,
        .           }
        .           
        .           impl<'tcx> FnSig<'tcx> {
    3,479 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
   15,179 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
    6,958 ( 0.00%)      }
        .           
    2,363 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
   17,579 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
    4,726 ( 0.00%)      }
        .           
        .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
        .               // method.
        .               fn fake() -> FnSig<'tcx> {
        .                   FnSig {
        .                       inputs_and_output: List::empty(),
        .                       c_variadic: false,
        .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
        .               }
        .           }
        .           
        .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
        .           
        .           impl<'tcx> PolyFnSig<'tcx> {
        .               #[inline]
        .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
      537 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
        .               }
        .               #[inline]
        .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
      147 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
        .               }
        .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
        .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
       97 ( 0.00%)      }
        .               #[inline]
        .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
      398 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
        .               }
        .               pub fn c_variadic(&self) -> bool {
      194 ( 0.00%)          self.skip_binder().c_variadic
       97 ( 0.00%)      }
        .               pub fn unsafety(&self) -> hir::Unsafety {
      592 ( 0.00%)          self.skip_binder().unsafety
      296 ( 0.00%)      }
        .               pub fn abi(&self) -> abi::Abi {
      620 ( 0.00%)          self.skip_binder().abi
      155 ( 0.00%)      }
        .           }
        .           
        .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
        .           
        4 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct ParamTy {
        .               pub index: u32,
        .               pub name: Symbol,
        .           }
        .           
        .           impl<'tcx> ParamTy {
        2 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
        .                   ParamTy { index, name }
        1 ( 0.00%)      }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
        .                   ParamTy::new(def.index, def.name)
        .               }
        .           
        .               #[inline]
        .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
        .                   tcx.mk_ty_param(self.index, self.name)
        .               }
        .           }
        .           
        .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
        .           #[derive(HashStable)]
        .           pub struct ParamConst {
       78 ( 0.00%)      pub index: u32,
       78 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           impl ParamConst {
        .               pub fn new(index: u32, name: Symbol) -> ParamConst {
        .                   ParamConst { index, name }
        .               }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
        .           /// the inference variable is supposed to satisfy the relation
        .           /// *for every value of the placeholder region*. To ensure that doesn't
        .           /// happen, you can use `leak_check`. This is more clearly explained
        .           /// by the [rustc dev guide].
        .           ///
        .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
        .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
        .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
  518,622 ( 0.11%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
       22 ( 0.00%)  pub enum RegionKind {
        .               /// Region bound in a type or fn declaration which will be
        .               /// substituted 'early' -- that is, at the same time when type
        .               /// parameters are substituted.
        .               ReEarlyBound(EarlyBoundRegion),
        .           
        .               /// Region bound in a function scope, which will be substituted when the
        .               /// function is called.
   16,490 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
        .           
        .               /// When checking a function body, the types of all arguments and so forth
        .               /// that refer to bound region parameters are modified to refer to free
        .               /// region parameters.
        .               ReFree(FreeRegion),
        .           
        .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
        .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
        .               /// regions visible from `U`, but not less than regions not visible
        .               /// from `U`.
        .               ReEmpty(ty::UniverseIndex),
        .           
        .               /// Erased region, used by trait selection, in MIR and during codegen.
        .               ReErased,
        .           }
        .           
    9,768 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           pub struct EarlyBoundRegion {
       28 ( 0.00%)      pub def_id: DefId,
    4,133 ( 0.00%)      pub index: u32,
    2,556 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           /// A **`const`** **v**ariable **ID**.
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           pub struct ConstVid<'tcx> {
      468 ( 0.00%)      pub index: u32,
      316 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
        .           }
        .           
        .           rustc_index::newtype_index! {
        .               /// A **region** (lifetime) **v**ariable **ID**.
        .               pub struct RegionVid {
        .                   DEBUG_FORMAT = custom,
        .               }
        .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
        .           rustc_index::newtype_index! {
        .               pub struct BoundVar { .. }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct BoundTy {
        .               pub var: BoundVar,
      265 ( 0.00%)      pub kind: BoundTyKind,
        .           }
        .           
    4,535 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum BoundTyKind {
        .               Anon,
        .               Param(Symbol),
        .           }
        .           
        .           impl From<BoundVar> for BoundTy {
        .               fn from(var: BoundVar) -> Self {
-- line 1532 ----------------------------------------
-- line 1616 ----------------------------------------
        .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
        .                       RegionKind::ReEmpty(_) => false,
        .                       RegionKind::ReErased => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_late_bound(&self) -> bool {
      240 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_placeholder(&self) -> bool {
        .                   matches!(*self, ty::RePlaceholder(..))
        .               }
        .           
        .               #[inline]
        .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
    9,760 ( 0.00%)          match *self {
        .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               pub fn type_flags(&self) -> TypeFlags {
        .                   let mut flags = TypeFlags::empty();
        .           
   22,120 ( 0.00%)          match *self {
        .                       ty::ReVar(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
        .                           flags = flags | TypeFlags::HAS_RE_INFER;
        .                       }
        .                       ty::RePlaceholder(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
        .                       ty::ReErased => {
        .                           flags = flags | TypeFlags::HAS_RE_ERASED;
        .                       }
        .                   }
        .           
        .                   debug!("type_flags({:?}) = {:?}", self, flags);
        .           
        .                   flags
      756 ( 0.00%)      }
        .           
        .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
        .               /// For example, consider the regions in this snippet of code:
        .               ///
        .               /// ```
        .               /// impl<'a> Foo {
        .               ///      ^^ -- early bound, declared on an impl
        .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
        .           
        .               #[inline(always)]
        .               pub fn flags(&self) -> TypeFlags {
        .                   self.flags
        .               }
        .           
        .               #[inline]
        .               pub fn is_unit(&self) -> bool {
      546 ( 0.00%)          match self.kind() {
      215 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_never(&self) -> bool {
    3,904 ( 0.00%)          matches!(self.kind(), Never)
        .               }
        .           
        .               #[inline]
        .               pub fn is_primitive(&self) -> bool {
        .                   self.kind().is_primitive()
        .               }
        .           
        .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_ref(&self) -> bool {
        .                   matches!(self.kind(), Ref(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_var(&self) -> bool {
    6,728 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
   13,868 ( 0.00%)          match self.kind() {
      959 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_infer(&self) -> bool {
       33 ( 0.00%)          matches!(self.kind(), Infer(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_phantom_data(&self) -> bool {
        .                   if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
        .               }
        .           
        .               #[inline]
        .               pub fn is_bool(&self) -> bool {
       30 ( 0.00%)          *self.kind() == Bool
        .               }
        .           
        .               /// Returns `true` if this type is a `str`.
        .               #[inline]
        .               pub fn is_str(&self) -> bool {
        .                   *self.kind() == Str
        .               }
        .           
-- line 1780 ----------------------------------------
-- line 1791 ----------------------------------------
        .                   match self.kind() {
        .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_array(&self) -> bool {
       51 ( 0.00%)          matches!(self.kind(), Array(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_simd(&self) -> bool {
        .                   match self.kind() {
        .                       Adt(def, _) => def.repr.simd(),
        .                       _ => false,
        .                   }
-- line 1807 ----------------------------------------
-- line 1838 ----------------------------------------
        .                           }
        .                       }
        .                       _ => bug!("`simd_size_and_type` called on invalid type"),
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_region_ptr(&self) -> bool {
        2 ( 0.00%)          matches!(self.kind(), Ref(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_mutable_ptr(&self) -> bool {
        6 ( 0.00%)          matches!(
        4 ( 0.00%)              self.kind(),
        .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
        .                           | Ref(_, _, hir::Mutability::Mut)
        .                   )
        .               }
        .           
        .               /// Get the mutability of the reference or `None` when not a reference
        .               #[inline]
        .               pub fn ref_mutability(&self) -> Option<hir::Mutability> {
-- line 1860 ----------------------------------------
-- line 1861 ----------------------------------------
        .                   match self.kind() {
        .                       Ref(_, _, mutability) => Some(*mutability),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_unsafe_ptr(&self) -> bool {
      554 ( 0.00%)          matches!(self.kind(), RawPtr(_))
        .               }
        .           
        .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
        .               #[inline]
        .               pub fn is_any_ptr(&self) -> bool {
        .                   self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
        .               }
        .           
        .               #[inline]
        .               pub fn is_box(&self) -> bool {
    9,154 ( 0.00%)          match self.kind() {
    3,010 ( 0.00%)              Adt(def, _) => def.is_box(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               /// Panics if called on any type other than `Box<T>`.
        .               pub fn boxed_ty(&self) -> Ty<'tcx> {
        .                   match self.kind() {
        .                       Adt(def, substs) if def.is_box() => substs.type_at(0),
-- line 1889 ----------------------------------------
-- line 1891 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
        .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
        .               /// contents are abstract to rustc.)
        .               #[inline]
        .               pub fn is_scalar(&self) -> bool {
       67 ( 0.00%)          matches!(
      136 ( 0.00%)              self.kind(),
        .                       Bool | Char
        .                           | Int(_)
        .                           | Float(_)
        .                           | Uint(_)
        .                           | FnDef(..)
        .                           | FnPtr(_)
        .                           | RawPtr(_)
        .                           | Infer(IntVar(_) | FloatVar(_))
-- line 1908 ----------------------------------------
-- line 1922 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_enum(&self) -> bool {
        .                   matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
        .               }
        .           
        .               #[inline]
        .               pub fn is_union(&self) -> bool {
    1,100 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
        .               }
        .           
        .               #[inline]
        .               pub fn is_closure(&self) -> bool {
      306 ( 0.00%)          matches!(self.kind(), Closure(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_generator(&self) -> bool {
      381 ( 0.00%)          matches!(self.kind(), Generator(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_integral(&self) -> bool {
    2,714 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh_ty(&self) -> bool {
        .                   matches!(self.kind(), Infer(FreshTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh(&self) -> bool {
    1,027 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_char(&self) -> bool {
        .                   matches!(self.kind(), Char)
        .               }
        .           
        .               #[inline]
        .               pub fn is_numeric(&self) -> bool {
        .                   self.is_integral() || self.is_floating_point()
        .               }
        .           
        .               #[inline]
        .               pub fn is_signed(&self) -> bool {
        2 ( 0.00%)          matches!(self.kind(), Int(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ptr_sized_integral(&self) -> bool {
      204 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
        .               }
        .           
        .               #[inline]
        .               pub fn has_concrete_skeleton(&self) -> bool {
        .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
        .               }
        .           
        .               /// Returns the type and mutability of `*ty`.
        .               ///
        .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
        .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
    1,629 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
    8,992 ( 0.00%)          match self.kind() {
      200 ( 0.00%)              Adt(def, _) if def.is_box() => {
        .                           Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
        .                       }
    5,390 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
       40 ( 0.00%)              RawPtr(mt) if explicit => Some(*mt),
        .                       _ => None,
        .                   }
    3,258 ( 0.00%)      }
        .           
        .               /// Returns the type of `ty[i]`.
        .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
      437 ( 0.00%)          match self.kind() {
        .                       Array(ty, _) | Slice(ty) => Some(ty),
        .                       _ => None,
        .                   }
       68 ( 0.00%)      }
        .           
    5,328 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
    2,664 ( 0.00%)          match self.kind() {
    1,998 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
        .                       FnPtr(f) => *f,
        .                       Error(_) => {
        .                           // ignore errors (#54954)
        .                           ty::Binder::dummy(FnSig::fake())
        .                       }
        .                       Closure(..) => bug!(
        .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
        .                       ),
        .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
        .                   }
    5,994 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn is_fn(&self) -> bool {
        .                   matches!(self.kind(), FnDef(..) | FnPtr(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fn_ptr(&self) -> bool {
-- line 2027 ----------------------------------------
-- line 2030 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_impl_trait(&self) -> bool {
        .                   matches!(self.kind(), Opaque(..))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
    1,563 ( 0.00%)          match self.kind() {
        .                       Adt(adt, _) => Some(adt),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Iterates over tuple fields.
        .               /// Panics when called on anything but a tuple.
       67 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
      286 ( 0.00%)          match self.kind() {
      323 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
        .                       _ => bug!("tuple_fields called on non-tuple"),
        .                   }
      134 ( 0.00%)      }
        .           
        .               /// Get the `i`-th element of a tuple.
        .               /// Panics when called on anything but a tuple.
       66 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
      132 ( 0.00%)          match self.kind() {
      132 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
        .                       _ => bug!("tuple_fields called on non-tuple"),
        .                   }
      132 ( 0.00%)      }
        .           
        .               /// If the type contains variants, returns the valid range of variant indices.
        .               //
        .               // FIXME: This requires the optimized MIR in the case of generators.
        .               #[inline]
        .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
        .                   match self.kind() {
        .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2095 ----------------------------------------
        .                       TyKind::Generator(def_id, substs, _) => {
        .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
        .                       }
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Returns the type of the discriminant of this type.
      300 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
      150 ( 0.00%)          match self.kind() {
      240 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
        .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
        .           
        .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
        .                           let assoc_items = tcx.associated_item_def_ids(
        .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
        .                           );
        .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
        .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
        .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
        .           
        .                       ty::Bound(..)
        .                       | ty::Placeholder(_)
        .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
        .                       }
        .                   }
      240 ( 0.00%)      }
        .           
        .               /// Returns the type of metadata for (potentially fat) pointers to this type.
        .               pub fn ptr_metadata_ty(
        .                   &'tcx self,
        .                   tcx: TyCtxt<'tcx>,
        .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
        .               ) -> Ty<'tcx> {
        .                   let tail = tcx.struct_tail_with_normalize(self, normalize);
-- line 2151 ----------------------------------------
-- line 2200 ----------------------------------------
        .               /// function converts such a special type into the closure
        .               /// kind. To go the other way, use
        .               /// `tcx.closure_kind_ty(closure_kind)`.
        .               ///
        .               /// Note that during type checking, we use an inference variable
        .               /// to represent the closure kind, because it has not yet been
        .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
        .               /// is complete, that type variable will be unified.
      308 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
      616 ( 0.00%)          match self.kind() {
      616 ( 0.00%)              Int(int_ty) => match int_ty {
        .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
        .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
        .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
        .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
        .                       },
        .           
        .                       // "Bound" types appear in canonical queries when the
        .                       // closure type is not yet known
        .                       Bound(..) | Infer(_) => None,
        .           
        .                       Error(_) => Some(ty::ClosureKind::Fn),
        .           
        .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
        .                   }
      308 ( 0.00%)      }
        .           
        .               /// Fast path helper for testing if a type is `Sized`.
        .               ///
        .               /// Returning true means the type is known to be sized. Returning
        .               /// `false` means nothing -- could be sized, might not be.
        .               ///
        .               /// Note that we could never rely on the fact that a type such as `[_]` is
        .               /// trivially `!Sized` because we could be in a type environment with a
        .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
        .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
        .               /// this method doesn't return `Option<bool>`.
   17,910 ( 0.00%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
   11,940 ( 0.00%)          match self.kind() {
        .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
        .                       | ty::Uint(_)
        .                       | ty::Int(_)
        .                       | ty::Bool
        .                       | ty::Float(_)
        .                       | ty::FnDef(..)
        .                       | ty::FnPtr(_)
        .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
        .                       | ty::GeneratorWitness(..)
        .                       | ty::Array(..)
        .                       | ty::Closure(..)
        .                       | ty::Never
        .                       | ty::Error(_) => true,
        .           
        .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
        .           
      323 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
        .           
      822 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
        .           
        .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
        .           
        .                       ty::Infer(ty::TyVar(_)) => false,
        .           
        .                       ty::Bound(..)
        .                       | ty::Placeholder(..)
        .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
        .                       }
        .                   }
   17,910 ( 0.00%)      }
        .           }
        .           
        .           /// Extra information about why we ended up with a particular variance.
        .           /// This is only used to add more information to error messages, and
        .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
        .           /// may lead to confusing notes in error messages, it will never cause
        .           /// a miscompilation or unsoundness.
        .           ///
-- line 2280 ----------------------------------------
-- line 2295 ----------------------------------------
        .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
        .                   param_index: u32,
        .               },
        .           }
        .           
        .           impl<'tcx> VarianceDiagInfo<'tcx> {
        .               /// Mirrors `Variance::xform` - used to 'combine' the existing
        .               /// and new `VarianceDiagInfo`s when our variance changes.
    6,084 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
        .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
    9,126 ( 0.00%)          match self {
        .                       VarianceDiagInfo::None => other,
        .                       VarianceDiagInfo::Invariant { .. } => self,
        .                   }
    3,042 ( 0.00%)      }
        .           }

2,591,336 ( 0.55%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs
--------------------------------------------------------------------------------
Ir               

-- line 24 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {
      .               fn tag(&self) -> &'static str {
      .                   "Equate"
      .               }
      .           
      .               fn tcx(&self) -> TyCtxt<'tcx> {
  6,380 ( 0.00%)          self.fields.tcx()
  3,926 ( 0.00%)      }
      .           
      .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
    316 ( 0.00%)          self.fields.param_env
      .               }
      .           
      .               fn a_is_expected(&self) -> bool {
  5,846 ( 0.00%)          self.a_is_expected
      .               }
      .           
 12,110 ( 0.00%)      fn relate_item_substs(
      .                   &mut self,
      .                   _item_def_id: DefId,
      .                   a_subst: SubstsRef<'tcx>,
      .                   b_subst: SubstsRef<'tcx>,
      .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
      .                   // N.B., once we are equating types, we don't care about
      .                   // variance, so don't try to lookup the variance here. This
      .                   // also avoids some cycles (e.g., #41849) since looking up
      .                   // variance requires computing types which can require
      .                   // performing trait matching (which then performs equality
      .                   // unification).
      .           
  2,422 ( 0.00%)          relate::relate_substs(self, None, a_subst, b_subst)
 14,532 ( 0.00%)      }
      .           
      .               fn relate_with_variance<T: Relate<'tcx>>(
      .                   &mut self,
      .                   _: ty::Variance,
      .                   _info: ty::VarianceDiagInfo<'tcx>,
      .                   a: T,
      .                   b: T,
      .               ) -> RelateResult<'tcx, T> {
      .                   self.relate(a, b)
      .               }
      .           
166,914 ( 0.04%)      fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {
      .                   debug!("{}.tys({:?}, {:?})", self.tag(), a, b);
 18,546 ( 0.00%)          if a == b {
      .                       return Ok(a);
      .                   }
      .           
 20,248 ( 0.00%)          let infcx = self.fields.infcx;
 20,248 ( 0.00%)          let a = infcx.inner.borrow_mut().type_variables().replace_if_possible(a);
 20,248 ( 0.00%)          let b = infcx.inner.borrow_mut().type_variables().replace_if_possible(b);
      .           
      .                   debug!("{}.tys: replacements ({:?}, {:?})", self.tag(), a, b);
      .           
 65,228 ( 0.01%)          match (a.kind(), b.kind()) {
      .                       (&ty::Infer(TyVar(a_id)), &ty::Infer(TyVar(b_id))) => {
      .                           infcx.inner.borrow_mut().type_variables().equate(a_id, b_id);
      .                       }
      .           
    131 ( 0.00%)              (&ty::Infer(TyVar(a_id)), _) => {
    524 ( 0.00%)                  self.fields.instantiate(b, RelationDir::EqTo, a_id, self.a_is_expected)?;
      .                       }
      .           
  5,290 ( 0.00%)              (_, &ty::Infer(TyVar(b_id))) => {
 26,450 ( 0.01%)                  self.fields.instantiate(a, RelationDir::EqTo, b_id, self.a_is_expected)?;
      .                       }
      .           
      .                       _ => {
 31,780 ( 0.01%)                  self.fields.infcx.super_combine_tys(self, a, b)?;
      .                       }
      .                   }
      .           
      .                   Ok(a)
166,914 ( 0.04%)      }
      .           
 15,462 ( 0.00%)      fn regions(
      .                   &mut self,
      .                   a: ty::Region<'tcx>,
      .                   b: ty::Region<'tcx>,
      .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
      .                   debug!("{}.regions({:?}, {:?})", self.tag(), a, b);
  5,154 ( 0.00%)          let origin = Subtype(Box::new(self.fields.trace.clone()));
 10,308 ( 0.00%)          self.fields
      .                       .infcx
      .                       .inner
      .                       .borrow_mut()
      .                       .unwrap_region_constraints()
 10,308 ( 0.00%)              .make_eqregion(origin, a, b);
  3,436 ( 0.00%)          Ok(a)
 15,462 ( 0.00%)      }
      .           
      .               fn consts(
      .                   &mut self,
      .                   a: &'tcx ty::Const<'tcx>,
      .                   b: &'tcx ty::Const<'tcx>,
      .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
    679 ( 0.00%)          self.fields.infcx.super_combine_consts(self, a, b)
      .               }
      .           
      .               fn binders<T>(
      .                   &mut self,
      .                   a: ty::Binder<'tcx, T>,
      .                   b: ty::Binder<'tcx, T>,
      .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>
      .               where
-- line 131 ----------------------------------------

 72,343 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/equate.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 294 ----------------------------------------
      .           #[allow(deprecated)]
      .           impl From<LayoutErr> for CollectionAllocErr {
      .               fn from(_: LayoutErr) -> Self {
      .                   CollectionAllocErr::CapacityOverflow
      .               }
      .           }
      .           
      .           fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
 27,293 ( 0.01%)      match result {
      .                   Ok(x) => x,
      .                   Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
      .                   Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
      .               }
      .           }
      .           
      .           /// FIXME: use `Layout::array` when we require a Rust version where it’s stable
      .           /// https://github.com/rust-lang/rust/issues/55724
-- line 310 ----------------------------------------
-- line 422 ----------------------------------------
      .           #[cfg(feature = "union")]
      .           impl<A: Array> SmallVecData<A> {
      .               #[inline]
      .               unsafe fn inline(&self) -> *const A::Item {
      .                   self.inline.as_ptr() as *const A::Item
      .               }
      .               #[inline]
      .               unsafe fn inline_mut(&mut self) -> *mut A::Item {
 16,716 ( 0.00%)          self.inline.as_mut_ptr() as *mut A::Item
      .               }
      .               #[inline]
      .               fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
      .                   SmallVecData {
      .                       inline: core::mem::ManuallyDrop::new(inline),
      .                   }
      .               }
      .               #[inline]
      .               unsafe fn into_inline(self) -> MaybeUninit<A> {
      .                   core::mem::ManuallyDrop::into_inner(self.inline)
      .               }
      .               #[inline]
      .               unsafe fn heap(&self) -> (*mut A::Item, usize) {
    739 ( 0.00%)          self.heap
      .               }
      .               #[inline]
      .               unsafe fn heap_mut(&mut self) -> &mut (*mut A::Item, usize) {
      .                   &mut self.heap
      .               }
      .               #[inline]
      .               fn from_heap(ptr: *mut A::Item, len: usize) -> SmallVecData<A> {
      .                   SmallVecData { heap: (ptr, len) }
-- line 452 ----------------------------------------
-- line 557 ----------------------------------------
      .               #[inline]
      .               pub fn new() -> SmallVec<A> {
      .                   // Try to detect invalid custom implementations of `Array`. Hopefully,
      .                   // this check should be optimized away entirely for valid ones.
      .                   assert!(
      .                       mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
      .                           && mem::align_of::<A>() >= mem::align_of::<A::Item>()
      .                   );
 68,781 ( 0.01%)          SmallVec {
      .                       capacity: 0,
      .                       data: SmallVecData::from_inline(MaybeUninit::uninit()),
      .                   }
      .               }
      .           
      .               /// Construct an empty vector with enough capacity pre-allocated to store at least `n`
      .               /// elements.
      .               ///
-- line 573 ----------------------------------------
-- line 635 ----------------------------------------
      .               /// let small_vec: SmallVec<_> = SmallVec::from_buf(buf);
      .               ///
      .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
      .               /// ```
      .               #[inline]
      .               pub fn from_buf(buf: A) -> SmallVec<A> {
      .                   SmallVec {
      .                       capacity: A::size(),
  1,113 ( 0.00%)              data: SmallVecData::from_inline(MaybeUninit::new(buf)),
      .                   }
      .               }
      .           
      .               /// Constructs a new `SmallVec` on the stack from an `A` without
      .               /// copying elements. Also sets the length, which must be less or
      .               /// equal to the size of `buf`.
      .               ///
      .               /// ```rust
-- line 651 ----------------------------------------
-- line 653 ----------------------------------------
      .               ///
      .               /// let buf = [1, 2, 3, 4, 5, 0, 0, 0];
      .               /// let small_vec: SmallVec<_> = SmallVec::from_buf_and_len(buf, 5);
      .               ///
      .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
      .               /// ```
      .               #[inline]
      .               pub fn from_buf_and_len(buf: A, len: usize) -> SmallVec<A> {
     12 ( 0.00%)          assert!(len <= A::size());
     36 ( 0.00%)          unsafe { SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), len) }
      .               }
      .           
      .               /// Constructs a new `SmallVec` on the stack from an `A` without
      .               /// copying elements. Also sets the length. The user is responsible
      .               /// for ensuring that `len <= A::size()`.
      .               ///
      .               /// ```rust
      .               /// use smallvec::SmallVec;
-- line 670 ----------------------------------------
-- line 674 ----------------------------------------
      .               /// let small_vec: SmallVec<_> = unsafe {
      .               ///     SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), 5)
      .               /// };
      .               ///
      .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
      .               /// ```
      .               #[inline]
      .               pub unsafe fn from_buf_and_len_unchecked(buf: MaybeUninit<A>, len: usize) -> SmallVec<A> {
      6 ( 0.00%)          SmallVec {
      .                       capacity: len,
      .                       data: SmallVecData::from_inline(buf),
      .                   }
      .               }
      .           
      .               /// Sets the length of a vector.
      .               ///
      .               /// This will explicitly set the size of the vector, without actually
      .               /// modifying its buffers, so it is up to the caller to ensure that the
      .               /// vector is actually the specified size.
      .               pub unsafe fn set_len(&mut self, new_len: usize) {
      .                   let (_, len_ptr, _) = self.triple_mut();
 19,190 ( 0.00%)          *len_ptr = new_len;
      .               }
      .           
      .               /// The maximum number of elements this vector can hold inline
      .               #[inline]
      .               fn inline_capacity() -> usize {
      .                   if mem::size_of::<A::Item>() > 0 {
      .                       A::size()
      .                   } else {
-- line 703 ----------------------------------------
-- line 725 ----------------------------------------
      .               #[inline]
      .               pub fn len(&self) -> usize {
      .                   self.triple().1
      .               }
      .           
      .               /// Returns `true` if the vector is empty
      .               #[inline]
      .               pub fn is_empty(&self) -> bool {
  8,698 ( 0.00%)          self.len() == 0
      .               }
      .           
      .               /// The number of items the vector can hold without reallocating
      .               #[inline]
      .               pub fn capacity(&self) -> usize {
      .                   self.triple().2
      .               }
      .           
      .               /// Returns a tuple with (data ptr, len, capacity)
      .               /// Useful to get all SmallVec properties with a single check of the current storage variant.
      .               #[inline]
      .               fn triple(&self) -> (*const A::Item, usize, usize) {
      .                   unsafe {
503,468 ( 0.11%)              if self.spilled() {
      .                           let (ptr, len) = self.data.heap();
      .                           (ptr, len, self.capacity)
      .                       } else {
      .                           (self.data.inline(), self.capacity, Self::inline_capacity())
      .                       }
      .                   }
      .               }
      .           
      .               /// Returns a tuple with (data ptr, len ptr, capacity)
      .               #[inline]
      .               fn triple_mut(&mut self) -> (*mut A::Item, &mut usize, usize) {
      .                   unsafe {
835,624 ( 0.18%)              if self.spilled() {
  1,646 ( 0.00%)                  let &mut (ptr, ref mut len_ptr) = self.data.heap_mut();
      .                           (ptr, len_ptr, self.capacity)
      .                       } else {
      .                           (
      .                               self.data.inline_mut(),
      .                               &mut self.capacity,
      .                               Self::inline_capacity(),
      .                           )
      .                       }
      .                   }
      .               }
      .           
      .               /// Returns `true` if the data has spilled into a separate heap-allocated buffer.
      .               #[inline]
      .               pub fn spilled(&self) -> bool {
826,212 ( 0.17%)          self.capacity > Self::inline_capacity()
      .               }
      .           
      .               /// Creates a draining iterator that removes the specified range in the vector
      .               /// and yields the removed items.
      .               ///
      .               /// Note 1: The element range is removed even if the iterator is only
      .               /// partially consumed or not consumed at all.
      .               ///
-- line 784 ----------------------------------------
-- line 821 ----------------------------------------
      .                           iter: range_slice.iter(),
      .                           vec: NonNull::from(self),
      .                       }
      .                   }
      .               }
      .           
      .               /// Append an item to the vector.
      .               #[inline]
 21,990 ( 0.00%)      pub fn push(&mut self, value: A::Item) {
      .                   unsafe {
      .                       let (mut ptr, mut len, cap) = self.triple_mut();
 86,147 ( 0.02%)              if *len == cap {
     31 ( 0.00%)                  self.reserve(1);
    353 ( 0.00%)                  let &mut (heap_ptr, ref mut heap_len) = self.data.heap_mut();
      .                           ptr = heap_ptr;
      .                           len = heap_len;
      .                       }
    390 ( 0.00%)              ptr::write(ptr.add(*len), value);
164,074 ( 0.03%)              *len += 1;
      .                   }
 17,592 ( 0.00%)      }
      .           
      .               /// Remove an item from the end of the vector and return it, or None if empty.
      .               #[inline]
      .               pub fn pop(&mut self) -> Option<A::Item> {
      .                   unsafe {
      .                       let (ptr, len_ptr, _) = self.triple_mut();
 48,970 ( 0.01%)              if *len_ptr == 0 {
      .                           return None;
      .                       }
 18,958 ( 0.00%)              let last_index = *len_ptr - 1;
 19,058 ( 0.00%)              *len_ptr = last_index;
 17,847 ( 0.00%)              Some(ptr::read(ptr.add(last_index)))
      .                   }
      2 ( 0.00%)      }
      .           
      .               /// Moves all the elements of `other` into `self`, leaving `other` empty.
      .               ///
      .               /// # Example
      .               ///
      .               /// ```
      .               /// # use smallvec::{SmallVec, smallvec};
      .               /// let mut v0: SmallVec<[u8; 16]> = smallvec![1, 2, 3];
-- line 863 ----------------------------------------
-- line 879 ----------------------------------------
      .               /// or if the capacity computation overflows `usize`.
      .               pub fn grow(&mut self, new_cap: usize) {
      .                   infallible(self.try_grow(new_cap))
      .               }
      .           
      .               /// Re-allocate to set the capacity to `max(new_cap, inline_size())`.
      .               ///
      .               /// Panics if `new_cap` is less than the vector's length
  3,321 ( 0.00%)      pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
      .                   unsafe {
     15 ( 0.00%)              let (ptr, &mut len, cap) = self.triple_mut();
      .                       let unspilled = !self.spilled();
  1,452 ( 0.00%)              assert!(new_cap >= len);
  1,452 ( 0.00%)              if new_cap <= self.inline_size() {
      .                           if unspilled {
      .                               return Ok(());
      .                           }
      .                           self.data = SmallVecData::from_inline(MaybeUninit::uninit());
      .                           ptr::copy_nonoverlapping(ptr, self.data.inline_mut(), len);
      .                           self.capacity = len;
      .                           deallocate(ptr, cap);
  1,452 ( 0.00%)              } else if new_cap != cap {
  1,373 ( 0.00%)                  let layout = layout_array::<A::Item>(new_cap)?;
      .                           debug_assert!(layout.size() > 0);
      .                           let new_alloc;
    726 ( 0.00%)                  if unspilled {
      .                               new_alloc = NonNull::new(alloc::alloc::alloc(layout))
      .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
      .                                   .cast()
      .                                   .as_ptr();
      .                               ptr::copy_nonoverlapping(ptr, new_alloc, len);
      .                           } else {
      .                               // This should never fail since the same succeeded
      .                               // when previously allocating `ptr`.
    183 ( 0.00%)                      let old_layout = layout_array::<A::Item>(cap)?;
      .           
      .                               let new_ptr = alloc::alloc::realloc(ptr as *mut u8, old_layout, layout.size());
      .                               new_alloc = NonNull::new(new_ptr)
      .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
      .                                   .cast()
      .                                   .as_ptr();
      .                           }
  1,452 ( 0.00%)                  self.data = SmallVecData::from_heap(new_alloc, len);
  2,426 ( 0.00%)                  self.capacity = new_cap;
      .                       }
      .                       Ok(())
      .                   }
  3,336 ( 0.00%)      }
      .           
      .               /// Reserve capacity for `additional` more elements to be inserted.
      .               ///
      .               /// May reserve more space to avoid frequent reallocations.
      .               ///
      .               /// Panics if the capacity computation overflows `usize`.
      .               #[inline]
 18,451 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
 29,155 ( 0.01%)          infallible(self.try_reserve(additional))
 21,064 ( 0.00%)      }
      .           
      .               /// Reserve capacity for `additional` more elements to be inserted.
      .               ///
      .               /// May reserve more space to avoid frequent reallocations.
110,911 ( 0.02%)      pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
      .                   // prefer triple_mut() even if triple() would work
      .                   // so that the optimizer removes duplicated calls to it
      .                   // from callers like insert()
  1,797 ( 0.00%)          let (_, &mut len, cap) = self.triple_mut();
192,538 ( 0.04%)          if cap - len >= additional {
      .                       return Ok(());
      .                   }
      .                   let new_cap = len
      .                       .checked_add(additional)
      .                       .and_then(usize::checked_next_power_of_two)
      .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
    834 ( 0.00%)          self.try_grow(new_cap)
121,359 ( 0.03%)      }
      .           
      .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
      .               ///
      .               /// Panics if the new capacity overflows `usize`.
      .               pub fn reserve_exact(&mut self, additional: usize) {
      .                   infallible(self.try_reserve_exact(additional))
      .               }
      .           
      .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
      .               pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
      .                   let (_, &mut len, cap) = self.triple_mut();
 18,612 ( 0.00%)          if cap - len >= additional {
      .                       return Ok(());
      .                   }
      .                   let new_cap = len
      .                       .checked_add(additional)
      .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
      .                   self.try_grow(new_cap)
      .               }
      .           
-- line 974 ----------------------------------------
-- line 999 ----------------------------------------
      .               /// If `len` is greater than or equal to the vector's current length, this has no
      .               /// effect.
      .               ///
      .               /// This does not re-allocate.  If you want the vector's capacity to shrink, call
      .               /// `shrink_to_fit` after truncating.
      .               pub fn truncate(&mut self, len: usize) {
      .                   unsafe {
      .                       let (ptr, len_ptr, _) = self.triple_mut();
 23,574 ( 0.00%)              while len < *len_ptr {
      .                           let last_index = *len_ptr - 1;
      .                           *len_ptr = last_index;
      .                           ptr::drop_in_place(ptr.add(last_index));
      .                       }
      .                   }
      .               }
      .           
      .               /// Extracts a slice containing the entire vector.
-- line 1015 ----------------------------------------
-- line 1047 ----------------------------------------
      .           
      .               /// Remove and return the element at position `index`, shifting all elements after it to the
      .               /// left.
      .               ///
      .               /// Panics if `index` is out of bounds.
      .               pub fn remove(&mut self, index: usize) -> A::Item {
      .                   unsafe {
      .                       let (mut ptr, len_ptr, _) = self.triple_mut();
    379 ( 0.00%)              let len = *len_ptr;
  1,227 ( 0.00%)              assert!(index < len);
  1,862 ( 0.00%)              *len_ptr = len - 1;
      .                       ptr = ptr.add(index);
      .                       let item = ptr::read(ptr);
    818 ( 0.00%)              ptr::copy(ptr.add(1), ptr, len - index - 1);
      .                       item
      .                   }
      .               }
      .           
      .               /// Insert an element at position `index`, shifting all elements after it to the right.
      .               ///
      .               /// Panics if `index` is out of bounds.
  5,542 ( 0.00%)      pub fn insert(&mut self, index: usize, element: A::Item) {
      .                   self.reserve(1);
      .           
      .                   unsafe {
      .                       let (mut ptr, len_ptr, _) = self.triple_mut();
    530 ( 0.00%)              let len = *len_ptr;
  1,034 ( 0.00%)              assert!(index <= len);
  2,068 ( 0.00%)              *len_ptr = len + 1;
      .                       ptr = ptr.add(index);
  1,034 ( 0.00%)              ptr::copy(ptr, ptr.add(1), len - index);
      .                       ptr::write(ptr, element);
      .                   }
  3,529 ( 0.00%)      }
      .           
      .               /// Insert multiple elements at position `index`, shifting all following elements toward the
      .               /// back.
      .               pub fn insert_many<I: IntoIterator<Item = A::Item>>(&mut self, index: usize, iterable: I) {
      .                   let mut iter = iterable.into_iter();
      .                   if index == self.len() {
      .                       return self.extend(iter);
      .                   }
-- line 1088 ----------------------------------------
-- line 1201 ----------------------------------------
      .                   }
      .               }
      .           
      .               /// Retains only the elements specified by the predicate.
      .               ///
      .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
      .               /// This method operates in place and preserves the order of the retained
      .               /// elements.
 87,138 ( 0.02%)      pub fn retain<F: FnMut(&mut A::Item) -> bool>(&mut self, mut f: F) {
      .                   let mut del = 0;
      .                   let len = self.len();
      .                   for i in 0..len {
 69,620 ( 0.01%)              if !f(&mut self[i]) {
  6,784 ( 0.00%)                  del += 1;
 15,982 ( 0.00%)              } else if del > 0 {
 10,176 ( 0.00%)                  self.swap(i - del, i);
      .                       }
      .                   }
 19,364 ( 0.00%)          self.truncate(len - del);
 77,456 ( 0.02%)      }
      .           
      .               /// Removes consecutive duplicate elements.
      .               pub fn dedup(&mut self)
      .               where
      .                   A::Item: PartialEq<A::Item>,
      .               {
      .                   self.dedup_by(|a, b| a == b);
      .               }
-- line 1228 ----------------------------------------
-- line 1418 ----------------------------------------
      .                           capacity: len,
      .                           data: SmallVecData::from_inline(unsafe {
      .                               let mut data: MaybeUninit<A> = MaybeUninit::uninit();
      .                               ptr::copy_nonoverlapping(
      .                                   slice.as_ptr(),
      .                                   data.as_mut_ptr() as *mut A::Item,
      .                                   len,
      .                               );
    209 ( 0.00%)                      data
      .                           }),
      .                       }
      .                   } else {
      .                       let mut b = slice.to_vec();
      .                       let (ptr, cap) = (b.as_mut_ptr(), b.capacity());
      .                       mem::forget(b);
      .                       SmallVec {
      .                           capacity: cap,
-- line 1434 ----------------------------------------
-- line 1436 ----------------------------------------
      .                       }
      .                   }
      .               }
      .           
      .               /// Copy elements from a slice into the vector at position `index`, shifting any following
      .               /// elements toward the back.
      .               ///
      .               /// For slices of `Copy` types, this is more efficient than `insert`.
 40,329 ( 0.01%)      pub fn insert_from_slice(&mut self, index: usize, slice: &[A::Item]) {
      .                   self.reserve(slice.len());
      .           
      .                   let len = self.len();
 12,618 ( 0.00%)          assert!(index <= len);
      .           
      .                   unsafe {
      .                       let slice_ptr = slice.as_ptr();
      .                       let ptr = self.as_mut_ptr().add(index);
      .                       ptr::copy(ptr, ptr.add(slice.len()), len - index);
      .                       ptr::copy_nonoverlapping(slice_ptr, ptr, slice.len());
  8,412 ( 0.00%)              self.set_len(len + slice.len());
      .                   }
 33,648 ( 0.01%)      }
      .           
      .               /// Copy elements from a slice and append them to the vector.
      .               ///
      .               /// For slices of `Copy` types, this is more efficient than `extend`.
      .               #[inline]
      .               pub fn extend_from_slice(&mut self, slice: &[A::Item]) {
      .                   let len = self.len();
  9,710 ( 0.00%)          self.insert_from_slice(len, slice);
      .               }
      .           }
      .           
      .           impl<A: Array> SmallVec<A>
      .           where
      .               A::Item: Clone,
      .           {
      .               /// Resizes the vector so that its length is equal to `len`.
-- line 1473 ----------------------------------------
-- line 1522 ----------------------------------------
      .                   }
      .               }
      .           }
      .           
      .           impl<A: Array> ops::DerefMut for SmallVec<A> {
      .               #[inline]
      .               fn deref_mut(&mut self) -> &mut [A::Item] {
      .                   unsafe {
  6,512 ( 0.00%)              let (ptr, &mut len, _) = self.triple_mut();
      .                       slice::from_raw_parts_mut(ptr, len)
      .                   }
      .               }
      .           }
      .           
      .           impl<A: Array> AsRef<[A::Item]> for SmallVec<A> {
      .               #[inline]
      .               fn as_ref(&self) -> &[A::Item] {
-- line 1538 ----------------------------------------
-- line 1716 ----------------------------------------
      .                   SmallVec::extend_from_slice(self, other)
      .               }
      .           }
      .           
      .           impl<A: Array> FromIterator<A::Item> for SmallVec<A> {
      .               #[inline]
      .               fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
      .                   let mut v = SmallVec::new();
 78,069 ( 0.02%)          v.extend(iterable);
      .                   v
      .               }
      .           }
      .           
      .           impl<A: Array> Extend<A::Item> for SmallVec<A> {
288,508 ( 0.06%)      fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
 65,905 ( 0.01%)          let mut iter = iterable.into_iter();
      .                   let (lower_size_bound, _) = iter.size_hint();
  4,112 ( 0.00%)          self.reserve(lower_size_bound);
      .           
      .                   unsafe {
      .                       let (ptr, len_ptr, cap) = self.triple_mut();
      .                       let mut len = SetLenOnDrop::new(len_ptr);
180,422 ( 0.04%)              while len.get() < cap {
 91,132 ( 0.02%)                  if let Some(out) = iter.next() {
      .                               ptr::write(ptr.add(len.get()), out);
      .                               len.increment_len(1);
      .                           } else {
      .                               return;
      .                           }
      .                       }
      .                   }
      .           
 11,844 ( 0.00%)          for elem in iter {
    152 ( 0.00%)              self.push(elem);
      .                   }
268,952 ( 0.06%)      }
      .           }
      .           
      .           impl<A: Array> fmt::Debug for SmallVec<A>
      .           where
      .               A::Item: fmt::Debug,
      .           {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   f.debug_list().entries(self.iter()).finish()
-- line 1759 ----------------------------------------
-- line 1764 ----------------------------------------
      .               #[inline]
      .               fn default() -> SmallVec<A> {
      .                   SmallVec::new()
      .               }
      .           }
      .           
      .           #[cfg(feature = "may_dangle")]
      .           unsafe impl<#[may_dangle] A: Array> Drop for SmallVec<A> {
 47,728 ( 0.01%)      fn drop(&mut self) {
      .                   unsafe {
180,773 ( 0.04%)              if self.spilled() {
      .                           let (ptr, len) = self.data.heap();
      .                           Vec::from_raw_parts(ptr, len, self.capacity);
      .                       } else {
      .                           ptr::drop_in_place(&mut self[..]);
      .                       }
      .                   }
 51,882 ( 0.01%)      }
      .           }
      .           
      .           #[cfg(not(feature = "may_dangle"))]
      .           impl<A: Array> Drop for SmallVec<A> {
      .               fn drop(&mut self) {
      .                   unsafe {
      .                       if self.spilled() {
      .                           let (ptr, len) = self.data.heap();
-- line 1789 ----------------------------------------
-- line 1888 ----------------------------------------
      .               A::Item: Clone,
      .           {
      .               fn clone(&self) -> IntoIter<A> {
      .                   SmallVec::from(self.as_slice()).into_iter()
      .               }
      .           }
      .           
      .           impl<A: Array> Drop for IntoIter<A> {
  1,038 ( 0.00%)      fn drop(&mut self) {
  7,217 ( 0.00%)          for _ in self {}
  1,008 ( 0.00%)      }
      .           }
      .           
      .           impl<A: Array> Iterator for IntoIter<A> {
      .               type Item = A::Item;
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A::Item> {
107,118 ( 0.02%)          if self.current == self.end {
    195 ( 0.00%)              None
      .                   } else {
      .                       unsafe {
      .                           let current = self.current;
 51,711 ( 0.01%)                  self.current += 1;
  8,192 ( 0.00%)                  Some(ptr::read(self.data.as_ptr().add(current)))
      .                       }
      .                   }
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
  1,557 ( 0.00%)          let size = self.end - self.current;
      .                   (size, Some(size))
      .               }
      .           }
      .           
      .           impl<A: Array> DoubleEndedIterator for IntoIter<A> {
      .               #[inline]
      .               fn next_back(&mut self) -> Option<A::Item> {
      .                   if self.current == self.end {
-- line 1927 ----------------------------------------
-- line 1955 ----------------------------------------
      .           impl<A: Array> IntoIterator for SmallVec<A> {
      .               type IntoIter = IntoIter<A>;
      .               type Item = A::Item;
      .               fn into_iter(mut self) -> Self::IntoIter {
      .                   unsafe {
      .                       // Set SmallVec len to zero as `IntoIter` drop handles dropping of the elements
      .                       let len = self.len();
      .                       self.set_len(0);
 20,596 ( 0.00%)              IntoIter {
 70,349 ( 0.01%)                  data: self,
      .                           current: 0,
      .                           end: len,
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, A: Array> IntoIterator for &'a SmallVec<A> {
-- line 1972 ----------------------------------------
-- line 2000 ----------------------------------------
      .               len: &'a mut usize,
      .               local_len: usize,
      .           }
      .           
      .           impl<'a> SetLenOnDrop<'a> {
      .               #[inline]
      .               fn new(len: &'a mut usize) -> Self {
      .                   SetLenOnDrop {
 35,193 ( 0.01%)              local_len: *len,
      .                       len,
      .                   }
      .               }
      .           
      .               #[inline]
      .               fn get(&self) -> usize {
      .                   self.local_len
      .               }
      .           
      .               #[inline]
      .               fn increment_len(&mut self, increment: usize) {
 42,413 ( 0.01%)          self.local_len += increment;
      .               }
      .           }
      .           
      .           impl<'a> Drop for SetLenOnDrop<'a> {
      .               #[inline]
      .               fn drop(&mut self) {
 42,686 ( 0.01%)          *self.len = self.local_len;
      .               }
      .           }
      .           
      .           #[cfg(feature = "const_new")]
      .           impl<T, const N: usize> SmallVec<[T; N]> {
      .               /// Construct an empty vector.
      .               ///
      .               /// This is a `const` version of [`SmallVec::new`] that is enabled by the feature `const_new`, with the limitation that it only works for arrays.
-- line 2035 ----------------------------------------

626,683 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 141 ----------------------------------------
      .               /// ```
      .               /// let a = [1, 2, 3];
      .               /// assert!(!a.is_empty());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
      .               #[inline]
      .               pub const fn is_empty(&self) -> bool {
145,582 ( 0.03%)          self.len() == 0
      .               }
      .           
      .               /// Returns the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.first());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn first(&self) -> Option<&T> {
  1,101 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
      .               ///     *first = 5;
      .               /// }
      .               /// assert_eq!(x, &[5, 1, 2]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
      .               #[inline]
      .               pub const fn first_mut(&mut self) -> Option<&mut T> {
    120 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
      .               }
      .           
      .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 237 ----------------------------------------
      .               ///     assert_eq!(last, &2);
      .               ///     assert_eq!(elements, &[0, 1]);
      .               /// }
      .               /// ```
      .               #[stable(feature = "slice_splits", since = "1.5.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
  4,341 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
      .               }
      .           
      .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
      .               ///
      .               /// let w: &[i32] = &[];
      .               /// assert_eq!(None, w.last());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
      .               #[inline]
      .               pub const fn last(&self) -> Option<&T> {
 51,107 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a mutable pointer to the last item in the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
      .               ///     *last = 10;
      .               /// }
      .               /// assert_eq!(x, &[0, 1, 10]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
      .               #[inline]
      .               pub const fn last_mut(&mut self) -> Option<&mut T> {
 75,362 ( 0.02%)          if let [.., last] = self { Some(last) } else { None }
      .               }
      .           
      .               /// Returns a reference to an element or subslice depending on the type of
      .               /// index.
      .               ///
      .               /// - If given a position, returns a reference to the element at that
      .               ///   position or `None` if out of bounds.
      .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
      .               /// }
      .               /// ```
      .               ///
      .               /// [`as_mut_ptr`]: slice::as_mut_ptr
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
      .               #[inline]
      .               pub const fn as_ptr(&self) -> *const T {
172,705 ( 0.04%)          self as *const [T] as *const T
      .               }
      .           
      .               /// Returns an unsafe mutable pointer to the slice's buffer.
      .               ///
      .               /// The caller must ensure that the slice outlives the pointer this
      .               /// function returns, or else it will end up pointing to garbage.
      .               ///
      .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
      .               ///     }
      .               /// }
      .               /// assert_eq!(x, &[3, 4, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
      .               #[inline]
      .               pub const fn as_mut_ptr(&mut self) -> *mut T {
      3 ( 0.00%)          self as *mut [T] as *mut T
      .               }
      .           
      .               /// Returns the two raw pointers spanning the slice.
      .               ///
      .               /// The returned range is half-open, which means that the end pointer
      .               /// points *one past* the last element of the slice. This way, an empty
      .               /// slice is represented by two equal pointers, and the difference between
      .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 582 ----------------------------------------
      .               /// v.swap(2, 4);
      .               /// assert!(v == ["a", "b", "e", "d", "c"]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
      .               #[inline]
      .               #[track_caller]
      .               pub const fn swap(&mut self, a: usize, b: usize) {
  7,068 ( 0.00%)          let _ = &self[a];
 10,288 ( 0.00%)          let _ = &self[b];
      .           
      .                   // SAFETY: we just checked that both `a` and `b` are in bounds
      .                   unsafe { self.swap_unchecked(a, b) }
      .               }
      .           
      .               /// Swaps two elements in the slice, without doing bounds checking.
      .               ///
      .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
      .           
      .                       // Because this function is first compiled in isolation,
      .                       // this check tells LLVM that the indexing below is
      .                       // in-bounds.  Then after inlining -- once the actual
      .                       // lengths of the slices are known -- it's removed.
      .                       let (a, b) = (&mut a[..n], &mut b[..n]);
      .           
      .                       for i in 0..n {
    163 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
      .                       }
      .                   }
      .               }
      .           
      .               /// Returns an iterator over the slice.
      .               ///
      .               /// # Examples
      .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
      .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
      .               ///     assert_eq!(right, []);
      .               /// }
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
     42 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_unchecked(mid) }
      .               }
      .           
      .               /// Divides one mutable slice into two at an index.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
      .               /// left[1] = 2;
      .               /// right[1] = 4;
      .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               #[track_caller]
      .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
  9,556 ( 0.00%)          assert!(mid <= self.len());
      .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
      .                   // fulfills the requirements of `from_raw_parts_mut`.
      .                   unsafe { self.split_at_mut_unchecked(mid) }
      .               }
      .           
      .               /// Divides one slice into two at an index, without doing bounds checking.
      .               ///
      .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
      .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
      .                   let len = self.len();
      .                   let ptr = self.as_mut_ptr();
      .           
      .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
      .                   //
      .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
      .                   // is fine.
  1,121 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
      .               }
      .           
      .               /// Divides one slice into an array and a remainder slice at an index.
      .               ///
      .               /// The array will contain all indices from `[0, N)` (excluding
      .               /// the index `N` itself) and the slice will contain all
      .               /// indices from `[N, len)` (excluding the index `len` itself).
      .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
      .               /// assert!(!v.iter().any(|e| e == "hi"));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               pub fn contains(&self, x: &T) -> bool
      .               where
      .                   T: PartialEq,
      .               {
     46 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
      .               }
      .           
      .               /// Returns `true` if `needle` is a prefix of the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
      .               /// assert!(v.starts_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn starts_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let n = needle.len();
  7,606 ( 0.00%)          self.len() >= n && needle == &self[..n]
      .               }
      .           
      .               /// Returns `true` if `needle` is a suffix of the slice.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
      .               /// assert!(v.ends_with(&[]));
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn ends_with(&self, needle: &[T]) -> bool
      .               where
      .                   T: PartialEq,
      .               {
      .                   let (m, n) = (self.len(), needle.len());
  4,300 ( 0.00%)          m >= n && needle == &self[m - n..]
      .               }
      .           
      .               /// Returns a subslice with the prefix removed.
      .               ///
      .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
      .               /// If `prefix` is empty, simply returns the original slice.
      .               ///
      .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
      .               /// s.insert(idx, num);
      .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
      .               where
      .                   T: Ord,
      .               {
      3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
      .               }
      .           
      .               /// Binary searches this sorted slice with a comparator function.
      .               ///
      .               /// The comparator function should implement an order consistent
      .               /// with the sort order of the underlying slice, returning an
      .               /// order code that indicates whether its argument is `Less`,
      .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
      .               #[inline]
      .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
      .               where
      .                   F: FnMut(&'a T) -> Ordering,
      .               {
      .                   let mut size = self.len();
      .                   let mut left = 0;
      .                   let mut right = size;
324,818 ( 0.07%)          while left < right {
424,466 ( 0.09%)              let mid = left + size / 2;
      .           
      .                       // SAFETY: the call is made safe by the following invariants:
      .                       // - `mid >= 0`
      .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
104,731 ( 0.02%)              let cmp = f(unsafe { self.get_unchecked(mid) });
      .           
      .                       // The reason why we use if/else control flow rather than match
      .                       // is because match reorders comparison operations, which is perf sensitive.
      .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
123,791 ( 0.03%)              if cmp == Less {
167,902 ( 0.04%)                  left = mid + 1;
 57,145 ( 0.01%)              } else if cmp == Greater {
      .                           right = mid;
      .                       } else {
      .                           // SAFETY: same as the `get_unchecked` above
      .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
      .                           return Ok(mid);
      .                       }
      .           
379,448 ( 0.08%)              size = right - left;
      .                   }
      .                   Err(left)
      .               }
      .           
      .               /// Binary searches this sorted slice with a key extraction function.
      .               ///
      .               /// Assumes that the slice is sorted by the key, for instance with
      .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
      .                   #[track_caller]
      .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
      .                       panic!(
      .                           "source slice length ({}) does not match destination slice length ({})",
      .                           src_len, dst_len,
      .                       );
      .                   }
      .           
 10,432 ( 0.00%)          if self.len() != src.len() {
      .                       len_mismatch_fail(self.len(), src.len());
      .                   }
      .           
      .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
      .                   // checked to have the same length. The slices cannot overlap because
      .                   // mutable references are exclusive.
      .                   unsafe {
      .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3382 ----------------------------------------
      .                   }
      .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
      .                   let ts: usize = mem::size_of::<U>() / gcd;
      .                   let us: usize = mem::size_of::<T>() / gcd;
      .           
      .                   // Armed with this knowledge, we can find how many `U`s we can fit!
      .                   let us_len = self.len() / ts * us;
      .                   // And how many `T`s will be in the trailing slice!
  1,300 ( 0.00%)          let ts_len = self.len() % ts;
      .                   (us_len, ts_len)
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
      .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
      .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
      .                       return (self, &[], &[]);
      .                   }
      .           
      .                   // First, find at what point do we split between the first and 2nd slice. Easy with
      .                   // ptr.align_offset.
      .                   let ptr = self.as_ptr();
      .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
      .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
  1,300 ( 0.00%)          if offset > self.len() {
      .                       (self, &[], &[])
      .                   } else {
      .                       let (left, rest) = self.split_at(offset);
      .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
      .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
      .                       // since the caller guarantees that we can transmute `T` to `U` safely.
      .                       unsafe {
      .                           (
      .                               left,
      .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
  1,300 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
      .                           )
      .                       }
      .                   }
      .               }
      .           
      .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
      .               /// maintained.
      .               ///
-- line 3456 ----------------------------------------

308,166 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 36 ----------------------------------------
      .           use rustc_session::parse::ParseSess;
      .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
      .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
      .           use tracing::debug;
      .           
      .           use std::ops::Range;
      .           use std::{cmp, mem, slice};
      .           
  1,668 ( 0.00%)  bitflags::bitflags! {
      .               struct Restrictions: u8 {
      .                   const STMT_EXPR         = 1 << 0;
      .                   const NO_STRUCT_LITERAL = 1 << 1;
      .                   const CONST_EXPR        = 1 << 2;
      .               }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
      .                               $self.bump();
      .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
      .                           }
      .                       }
      .                   }
      .               };
      .           }
      .           
  2,394 ( 0.00%)  #[derive(Clone)]
      .           pub struct Parser<'a> {
     90 ( 0.00%)      pub sess: &'a ParseSess,
      .               /// The current token.
     72 ( 0.00%)      pub token: Token,
      .               /// The spacing for the current token
     41 ( 0.00%)      pub token_spacing: Spacing,
      .               /// The previous token.
    108 ( 0.00%)      pub prev_token: Token,
     46 ( 0.00%)      pub capture_cfg: bool,
     97 ( 0.00%)      restrictions: Restrictions,
     82 ( 0.00%)      expected_tokens: Vec<TokenType>,
      .               // Important: This must only be advanced from `next_tok`
      .               // to ensure that `token_cursor.num_next_calls` is updated properly
      .               token_cursor: TokenCursor,
     82 ( 0.00%)      desugar_doc_comments: bool,
      .               /// This field is used to keep track of how many left angle brackets we have seen. This is
      .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
      .               /// appropriately.
      .               ///
      .               /// See the comments in the `parse_path_segment` function for more details.
     82 ( 0.00%)      unmatched_angle_bracket_count: u32,
    123 ( 0.00%)      max_angle_bracket_count: u32,
      .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
      .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
      .               /// error.
     41 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
      .               last_unexpected_token_span: Option<Span>,
      .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
      .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
      .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
      .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
      .               subparser_name: Option<&'static str>,
      .               capture_state: CaptureState,
      .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
      .           /// the first macro inner attribute to invoke a proc-macro).
      .           /// When create a `TokenStream`, the inner attributes get inserted
      .           /// into the proper place in the token stream.
      .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
      .           
      .           /// Controls how we capture tokens. Capturing can be expensive,
      .           /// so we try to avoid performing capturing in cases where
      .           /// we will never need an `AttrAnnotatedTokenStream`
     41 ( 0.00%)  #[derive(Copy, Clone)]
      .           pub enum Capturing {
      .               /// We aren't performing any capturing - this is the default mode.
      .               No,
      .               /// We are capturing tokens
      .               Yes,
      .           }
      .           
    177 ( 0.00%)  #[derive(Clone)]
      .           struct CaptureState {
    164 ( 0.00%)      capturing: Capturing,
     41 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
      .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
      .           }
      .           
      .           impl<'a> Drop for Parser<'a> {
      .               fn drop(&mut self) {
    753 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
      .               }
      .           }
      .           
 20,252 ( 0.00%)  #[derive(Clone)]
      .           struct TokenCursor {
      .               frame: TokenCursorFrame,
  4,573 ( 0.00%)      stack: Vec<TokenCursorFrame>,
      .               desugar_doc_comments: bool,
      .               // Counts the number of calls to `next` or `next_desugared`,
      .               // depending on whether `desugar_doc_comments` is set.
  1,469 ( 0.00%)      num_next_calls: usize,
      .               // During parsing, we may sometimes need to 'unglue' a
      .               // glued token into two component tokens
      .               // (e.g. '>>' into '>' and '>), so that the parser
      .               // can consume them one at a time. This process
      .               // bypasses the normal capturing mechanism
      .               // (e.g. `num_next_calls` will not be incremented),
      .               // since the 'unglued' tokens due not exist in
      .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
      .               // in `Option<Vec<u8>>` requires us to unglue
      .               // the trailing `>>` token. The `break_last_token`
      .               // field is used to track this token - it gets
      .               // appended to the captured stream when
      .               // we evaluate a `LazyTokenStream`
      .               break_last_token: bool,
      .           }
      .           
  9,140 ( 0.00%)  #[derive(Clone)]
      .           struct TokenCursorFrame {
  2,225 ( 0.00%)      delim: token::DelimToken,
      .               span: DelimSpan,
      .               open_delim: bool,
  4,450 ( 0.00%)      tree_cursor: tokenstream::Cursor,
      .               close_delim: bool,
      .           }
      .           
      .           impl TokenCursorFrame {
      .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
    850 ( 0.00%)          TokenCursorFrame {
      .                       delim,
      .                       span,
      .                       open_delim: false,
  1,584 ( 0.00%)              tree_cursor: tts.into_trees(),
      .                       close_delim: false,
      .                   }
      .               }
      .           }
      .           
      .           impl TokenCursor {
111,948 ( 0.02%)      fn next(&mut self) -> (Token, Spacing) {
      .                   loop {
 55,121 ( 0.01%)              let (tree, spacing) = if !self.frame.open_delim {
  1,244 ( 0.00%)                  self.frame.open_delim = true;
  6,220 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
108,215 ( 0.02%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
      .                           tree
  4,934 ( 0.00%)              } else if !self.frame.close_delim {
  1,128 ( 0.00%)                  self.frame.close_delim = true;
  5,640 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
  2,256 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
 14,664 ( 0.00%)                  self.frame = frame;
      .                           continue;
      .                       } else {
  3,798 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
      .                       };
      .           
 21,146 ( 0.00%)              match tree {
      .                           TokenTree::Token(token) => {
 74,632 ( 0.02%)                      return (token, spacing);
      .                           }
      .                           TokenTree::Delimited(sp, delim, tts) => {
      .                               let frame = TokenCursorFrame::new(sp, delim, tts);
      .                               self.stack.push(mem::replace(&mut self.frame, frame));
      .                           }
      .                       }
      .                   }
 74,632 ( 0.02%)      }
      .           
 15,520 ( 0.00%)      fn next_desugared(&mut self) -> (Token, Spacing) {
  4,656 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
      .                       (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
      .                           (data, attr_style, span)
      .                       }
  7,760 ( 0.00%)              tok => return tok,
      .                   };
      .           
      .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
      .                   // required to wrap the text.
      .                   let mut num_of_hashes = 0;
      .                   let mut count = 0;
      .                   for ch in data.as_str().chars() {
      .                       count = match ch {
-- line 298 ----------------------------------------
-- line 332 ----------------------------------------
      .                                   .iter()
      .                                   .cloned()
      .                                   .collect::<TokenStream>()
      .                           },
      .                       ),
      .                   ));
      .           
      .                   self.next()
 13,968 ( 0.00%)      }
      .           }
      .           
  4,930 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
      .           enum TokenType {
  3,944 ( 0.00%)      Token(TokenKind),
      .               Keyword(Symbol),
      .               Operator,
      .               Lifetime,
      .               Ident,
      .               Path,
      .               Type,
      .               Const,
      .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
      .               /// The separator token.
      .               sep: Option<TokenKind>,
      .               /// `true` if a trailing separator is allowed.
      .               trailing_sep_allowed: bool,
      .           }
      .           
      .           impl SeqSep {
      .               fn trailing_allowed(t: TokenKind) -> SeqSep {
     33 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
      .               }
      .           
      .               fn none() -> SeqSep {
      .                   SeqSep { sep: None, trailing_sep_allowed: false }
      .               }
      .           }
      .           
      .           pub enum FollowedByType {
      .               Yes,
      .               No,
      .           }
      .           
      .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
    108 ( 0.00%)      Some(match token.kind {
    216 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
    216 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
    216 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
      .                   token::DocComment(..) => "doc comment",
      .                   _ => return None,
      .               })
      .           }
      .           
    378 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
    108 ( 0.00%)      let token_str = pprust::token_to_string(token);
      .               match token_descr_opt(token) {
      .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
    378 ( 0.00%)          _ => format!("`{}`", token_str),
      .               }
    270 ( 0.00%)  }
      .           
      .           impl<'a> Parser<'a> {
  2,380 ( 0.00%)      pub fn new(
      .                   sess: &'a ParseSess,
      .                   tokens: TokenStream,
      .                   desugar_doc_comments: bool,
      .                   subparser_name: Option<&'static str>,
      .               ) -> Self {
    170 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
    340 ( 0.00%)          start_frame.open_delim = true;
      .                   start_frame.close_delim = true;
      .           
  5,270 ( 0.00%)          let mut parser = Parser {
      .                       sess,
    170 ( 0.00%)              token: Token::dummy(),
      .                       token_spacing: Spacing::Alone,
    170 ( 0.00%)              prev_token: Token::dummy(),
      .                       capture_cfg: false,
      .                       restrictions: Restrictions::empty(),
      .                       expected_tokens: Vec::new(),
      .                       token_cursor: TokenCursor {
  1,020 ( 0.00%)                  frame: start_frame,
      .                           stack: Vec::new(),
      .                           num_next_calls: 0,
      .                           desugar_doc_comments,
      .                           break_last_token: false,
      .                       },
      .                       desugar_doc_comments,
      .                       unmatched_angle_bracket_count: 0,
      .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
      .                           capturing: Capturing::No,
      .                           replace_ranges: Vec::new(),
      .                           inner_attr_ranges: Default::default(),
      .                       },
      .                       current_closure: None,
      .                   };
      .           
      .                   // Make parser point to the first token.
    340 ( 0.00%)          parser.bump();
      .           
      .                   parser
  1,530 ( 0.00%)      }
      .           
      .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
      .                   loop {
 52,134 ( 0.01%)              let (mut next, spacing) = if self.desugar_doc_comments {
  6,208 ( 0.00%)                  self.token_cursor.next_desugared()
      .                       } else {
 21,411 ( 0.00%)                  self.token_cursor.next()
      .                       };
 34,756 ( 0.01%)              self.token_cursor.num_next_calls += 1;
      .                       // We've retrieved an token from the underlying
      .                       // cursor, so we no longer need to worry about
      .                       // an unglued token. See `break_and_eat` for more details
  8,689 ( 0.00%)              self.token_cursor.break_last_token = false;
 34,756 ( 0.01%)              if next.span.is_dummy() {
      .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
    708 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
      .                       }
 29,451 ( 0.01%)              if matches!(
 17,378 ( 0.00%)                  next.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
 34,756 ( 0.01%)              return (next, spacing);
      .                   }
      .               }
      .           
      .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
      .                   match self.expect_one_of(&[], &[]) {
      .                       Err(e) => Err(e),
      .                       // We can get `Ok(true)` from `recover_closing_delimiter`
      .                       // which is called in `expected_one_of_not_found`.
      .                       Ok(_) => FatalError.raise(),
      .                   }
      .               }
      .           
      .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
  7,623 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
    847 ( 0.00%)          if self.expected_tokens.is_empty() {
    438 ( 0.00%)              if self.token == *t {
    365 ( 0.00%)                  self.bump();
      .                           Ok(false)
      .                       } else {
      .                           self.unexpected_try_recover(t)
      .                       }
      .                   } else {
  9,288 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
      .                   }
 12,705 ( 0.00%)      }
      .           
      .               /// Expect next token to be edible or inedible token.  If edible,
      .               /// then consume it; if inedible, then return without consuming
      .               /// anything.  Signal a fatal error if next token is unexpected.
 10,980 ( 0.00%)      pub fn expect_one_of(
      .                   &mut self,
      .                   edible: &[TokenKind],
      .                   inedible: &[TokenKind],
      .               ) -> PResult<'a, bool /* recovered */> {
  1,830 ( 0.00%)          if edible.contains(&self.token.kind) {
  2,361 ( 0.00%)              self.bump();
      .                       Ok(false)
      .                   } else if inedible.contains(&self.token.kind) {
      .                       // leave it in the input
      .                       Ok(false)
      .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
      .                       FatalError.raise();
      .                   } else {
      .                       self.expected_one_of_not_found(edible, inedible)
      .                   }
 13,725 ( 0.00%)      }
      .           
      .               // Public for rustfmt usage.
      .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
  6,028 ( 0.00%)          self.parse_ident_common(true)
      .               }
      .           
      .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
  4,539 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
      .                       TokenKind::DocComment(..) => {
      .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
      .                       }
      .                       _ => self.expected_ident_found(),
      .                   })
      .               }
      .           
 10,493 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
  1,499 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
  8,994 ( 0.00%)          if !is_raw && ident.is_reserved() {
      .                       let mut err = self.expected_ident_found();
      .                       if recover {
      .                           err.emit();
      .                       } else {
      .                           return Err(err);
      .                       }
      .                   }
  5,996 ( 0.00%)          self.bump();
      .                   Ok(ident)
 14,990 ( 0.00%)      }
      .           
      .               /// Checks if the next token is `tok`, and returns `true` if so.
      .               ///
      .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
      .               /// encountered.
127,575 ( 0.03%)      fn check(&mut self, tok: &TokenKind) -> bool {
 55,591 ( 0.01%)          let is_present = self.token == *tok;
 37,430 ( 0.01%)          if !is_present {
 80,069 ( 0.02%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
      .                   }
      .                   is_present
127,575 ( 0.03%)      }
      .           
      .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
    120 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
 28,247 ( 0.01%)          let is_present = self.check(tok);
 18,504 ( 0.00%)          if is_present {
  3,838 ( 0.00%)              self.bump()
      .                   }
      .                   is_present
    150 ( 0.00%)      }
      .           
      .               /// If the next token is the given keyword, returns `true` without eating it.
      .               /// An expectation is also added for diagnostics purposes.
  6,830 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
  1,802 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
 47,349 ( 0.01%)          self.token.is_keyword(kw)
      .               }
      .           
      .               /// If the next token is the given keyword, eats it and returns `true`.
      .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
      .               // Public for rustfmt usage.
  9,195 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
  9,016 ( 0.00%)          if self.check_keyword(kw) {
  1,290 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
  9,195 ( 0.00%)      }
      .           
      .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
  1,746 ( 0.00%)          if self.token.is_keyword(kw) {
    435 ( 0.00%)              self.bump();
      .                       true
      .                   } else {
      .                       false
      .                   }
      .               }
      .           
      .               /// If the given word is not a keyword, signals an error.
      .               /// If the next token is not the given word, signals an error.
      .               /// Otherwise, eats it.
    585 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
      .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
    468 ( 0.00%)      }
      .           
      .               /// Is the given keyword `kw` followed by a non-reserved identifier?
  5,048 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
  2,524 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
  5,679 ( 0.00%)      }
      .           
  8,154 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
  3,020 ( 0.00%)          if ok {
      .                       true
      .                   } else {
  1,908 ( 0.00%)              self.expected_tokens.push(typ);
      .                       false
      .                   }
  8,154 ( 0.00%)      }
      .           
      .               fn check_ident(&mut self) -> bool {
  1,267 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
      .               }
      .           
  2,912 ( 0.00%)      fn check_path(&mut self) -> bool {
  5,984 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
  3,640 ( 0.00%)      }
      .           
      .               fn check_type(&mut self) -> bool {
    384 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
      .               }
      .           
      .               fn check_const_arg(&mut self) -> bool {
    384 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
      .               }
      .           
  1,260 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
    700 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
      .                       && self.look_ahead(dist + 1, |t| match t.kind {
      .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
      .                           token::OpenDelim(DelimToken::Brace) => true,
      .                           _ => false,
      .                       })
  1,260 ( 0.00%)      }
      .           
      .               /// Checks to see if the next token is either `+` or `+=`.
      .               /// Otherwise returns `false`.
      .               fn check_plus(&mut self) -> bool {
  1,572 ( 0.00%)          self.check_or_expected(
    786 ( 0.00%)              self.token.is_like_plus(),
    786 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
      .                   )
      .               }
      .           
      .               /// Eats the expected token if it's present possibly breaking
      .               /// compound tokens like multi-character operators in process.
      .               /// Returns `true` if the token was eaten.
 12,552 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
  7,322 ( 0.00%)          if self.token.kind == expected {
    462 ( 0.00%)              self.bump();
      .                       return true;
      .                   }
  4,075 ( 0.00%)          match self.token.kind.break_two_token_op() {
      .                       Some((first, second)) if first == expected => {
      .                           let first_span = self.sess.source_map().start_point(self.token.span);
      .                           let second_span = self.token.span.with_lo(first_span.hi());
      .                           self.token = Token::new(first, first_span);
      .                           // Keep track of this token - if we end token capturing now,
      .                           // we'll want to append this token to the captured stream.
      .                           //
      .                           // If we consume any additional tokens, then this token
-- line 682 ----------------------------------------
-- line 684 ----------------------------------------
      .                           // and `next_tok` will set this field to `None`
      .                           self.token_cursor.break_last_token = true;
      .                           // Use the spacing of the glued token as the spacing
      .                           // of the unglued second token.
      .                           self.bump_with((Token::new(second, second_span), self.token_spacing));
      .                           true
      .                       }
      .                       _ => {
  2,445 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
      .                           false
      .                       }
      .                   }
 12,674 ( 0.00%)      }
      .           
      .               /// Eats `+` possibly breaking tokens like `+=` in process.
      .               fn eat_plus(&mut self) -> bool {
      4 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
      .               }
      .           
      .               /// Eats `&` possibly breaking tokens like `&&` in process.
      .               /// Signals an error if `&` is not eaten.
      .               fn expect_and(&mut self) -> PResult<'a, ()> {
    468 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `|` possibly breaking tokens like `||` in process.
      .               /// Signals an error if `|` was not eaten.
      .               fn expect_or(&mut self) -> PResult<'a, ()> {
     66 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
    870 ( 0.00%)      fn eat_lt(&mut self) -> bool {
  2,859 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
  1,841 ( 0.00%)          if ate {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
    284 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
    285 ( 0.00%)              self.max_angle_bracket_count += 1;
      .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
      .                   }
      .                   ate
    870 ( 0.00%)      }
      .           
      .               /// Eats `<` possibly breaking tokens like `<<` in process.
      .               /// Signals an error if `<` was not eaten.
      .               fn expect_lt(&mut self) -> PResult<'a, ()> {
      .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
      .               }
      .           
      .               /// Eats `>` possibly breaking tokens like `>>` in process.
      .               /// Signals an error if `>` was not eaten.
      .               fn expect_gt(&mut self) -> PResult<'a, ()> {
    426 ( 0.00%)          if self.break_and_eat(token::Gt) {
      .                       // See doc comment for `unmatched_angle_bracket_count`.
    213 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
    142 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
      .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
      .                       }
      .                       Ok(())
      .                   } else {
      .                       self.unexpected()
      .                   }
      .               }
      .           
      .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
      .                   kets.iter().any(|k| match expect {
  1,404 ( 0.00%)              TokenExpectType::Expect => self.check(k),
    165 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
      .                   })
      .               }
      .           
      .               fn parse_seq_to_before_tokens<T>(
      .                   &mut self,
      .                   kets: &[&TokenKind],
      .                   sep: SeqSep,
      .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
      .                   let mut first = true;
      .                   let mut recovered = false;
      .                   let mut trailing = false;
      .                   let mut v = vec![];
      .                   let unclosed_delims = !self.unclosed_delims.is_empty();
      .           
      .                   while !self.expect_any_with_type(kets, expect) {
  1,347 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
      .                           break;
      .                       }
    980 ( 0.00%)              if let Some(ref t) = sep.sep {
  1,325 ( 0.00%)                  if first {
      .                               first = false;
      .                           } else {
    567 ( 0.00%)                      match self.expect(t) {
      .                                   Ok(false) => {
      .                                       self.current_closure.take();
      .                                   }
      .                                   Ok(true) => {
      .                                       self.current_closure.take();
      .                                       recovered = true;
      .                                       break;
      .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
      .                                               e.cancel();
      .                                               break;
      .                                           }
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
    488 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
      .                           trailing = true;
      .                           break;
      .                       }
      .           
    523 ( 0.00%)              let t = f(self)?;
    555 ( 0.00%)              v.push(t);
      .                   }
      .           
  1,028 ( 0.00%)          Ok((v, trailing, recovered))
      .               }
      .           
      .               fn recover_missing_braces_around_closure_body(
      .                   &mut self,
      .                   closure_spans: ClosureSpans,
      .                   mut expect_err: DiagnosticBuilder<'_>,
      .               ) -> PResult<'a, ()> {
      .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_seq_to_before_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
  1,183 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
      .               }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
  1,610 ( 0.00%)      fn parse_seq_to_end<T>(
      .                   &mut self,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
    657 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
    327 ( 0.00%)          if !recovered {
      .                       self.eat(ket);
      .                   }
  1,775 ( 0.00%)          Ok((val, trailing))
  1,288 ( 0.00%)      }
      .           
      .               /// Parses a sequence, including the closing delimiter. The function
      .               /// `f` must consume tokens until reaching the next separator or
      .               /// closing bracket.
      .               fn parse_unspanned_seq<T>(
      .                   &mut self,
      .                   bra: &TokenKind,
      .                   ket: &TokenKind,
      .                   sep: SeqSep,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
    574 ( 0.00%)          self.expect(bra)?;
  1,288 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
      .               }
      .           
      .               fn parse_delim_comma_seq<T>(
      .                   &mut self,
      .                   delim: DelimToken,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_unspanned_seq(
    242 ( 0.00%)              &token::OpenDelim(delim),
    323 ( 0.00%)              &token::CloseDelim(delim),
      .                       SeqSep::trailing_allowed(token::Comma),
      .                       f,
      .                   )
      .               }
      .           
      .               fn parse_paren_comma_seq<T>(
      .                   &mut self,
      .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
      .               ) -> PResult<'a, (Vec<T>, bool)> {
      .                   self.parse_delim_comma_seq(token::Paren, f)
      .               }
      .           
      .               /// Advance the parser by one token using provided token as the next one.
112,957 ( 0.02%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
      .                   // Bumping after EOF is a bad sign, usually an infinite loop.
 52,134 ( 0.01%)          if self.prev_token.kind == TokenKind::Eof {
      .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
      .                       self.span_bug(self.token.span, msg);
      .                   }
      .           
      .                   // Update the current and previous tokens.
 34,756 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
  8,689 ( 0.00%)          self.token_spacing = next_spacing;
      .           
      .                   // Diagnostics.
  8,689 ( 0.00%)          self.expected_tokens.clear();
      .               }
      .           
      .               /// Advance the parser by one token.
 69,512 ( 0.01%)      pub fn bump(&mut self) {
 34,756 ( 0.01%)          let next_token = self.next_tok(self.token.span);
 52,134 ( 0.01%)          self.bump_with(next_token);
 69,512 ( 0.01%)      }
      .           
      .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
      .               /// When `dist == 0` then the current token is looked at.
      .               pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
    912 ( 0.00%)          if dist == 0 {
    308 ( 0.00%)              return looker(&self.token);
      .                   }
      .           
  2,365 ( 0.00%)          let frame = &self.token_cursor.frame;
  2,487 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
      .                       let all_normal = (0..dist).all(|i| {
  5,917 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
  7,794 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
      .                       });
      .                       if all_normal {
  9,518 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
  3,305 ( 0.00%)                      Some(tree) => match tree {
  1,514 ( 0.00%)                          TokenTree::Token(token) => looker(token),
      .                                   TokenTree::Delimited(dspan, delim, _) => {
    982 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
      .                                   }
      .                               },
  1,414 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
      .                           };
      .                       }
      .                   }
      .           
      .                   let mut cursor = self.token_cursor.clone();
      .                   let mut i = 0;
    650 ( 0.00%)          let mut token = Token::dummy();
      .                   while i < dist {
  4,492 ( 0.00%)              token = cursor.next().0;
  2,154 ( 0.00%)              if matches!(
  1,280 ( 0.00%)                  token.kind,
      .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
      .                       ) {
      .                           continue;
      .                       }
      .                       i += 1;
      .                   }
     12 ( 0.00%)          return looker(&token);
      .               }
      .           
      .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
  2,934 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
    819 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
  2,934 ( 0.00%)      }
      .           
      .               /// Parses asyncness: `async` or nothing.
      .               fn parse_asyncness(&mut self) -> Async {
      .                   if self.eat_keyword(kw::Async) {
      .                       let span = self.prev_token.uninterpolated_span();
      .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
      .                   } else {
      .                       Async::No
      .                   }
      .               }
      .           
      .               /// Parses unsafety: `unsafe` or nothing.
    372 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
      .                   if self.eat_keyword(kw::Unsafe) {
      .                       Unsafe::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Unsafe::No
      .                   }
  1,488 ( 0.00%)      }
      .           
      .               /// Parses constness: `const` or nothing.
  3,440 ( 0.00%)      fn parse_constness(&mut self) -> Const {
      .                   // Avoid const blocks to be parsed as const items
  1,147 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
      .                       && self.eat_keyword(kw::Const)
      .                   {
     20 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
      .                   } else {
      .                       Const::No
      .                   }
  6,020 ( 0.00%)      }
      .           
      .               /// Parses inline const expressions.
      .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
      .                   if pat {
      .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
      .                   } else {
      .                       self.sess.gated_spans.gate(sym::inline_const, span);
      .                   }
-- line 1104 ----------------------------------------
-- line 1110 ----------------------------------------
      .                   };
      .                   let blk_span = anon_const.value.span;
      .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
      .               }
      .           
      .               /// Parses mutability (`mut` or nothing).
      .               fn parse_mutability(&mut self) -> Mutability {
      .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
    156 ( 0.00%)      }
      .           
      .               /// Possibly parses mutability (`const` or `mut`).
     12 ( 0.00%)      fn parse_const_or_mut(&mut self) -> Option<Mutability> {
      .                   if self.eat_keyword(kw::Mut) {
      .                       Some(Mutability::Mut)
      .                   } else if self.eat_keyword(kw::Const) {
      .                       Some(Mutability::Not)
      .                   } else {
      .                       None
      .                   }
     12 ( 0.00%)      }
      .           
      .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
     26 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
      .                   {
      .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
      .                       self.bump();
      .                       Ok(Ident::new(symbol, self.prev_token.span))
      .                   } else {
     39 ( 0.00%)              self.parse_ident_common(true)
      .                   }
      .               }
      .           
      .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    154 ( 0.00%)          self.parse_mac_args_common(true).map(P)
      .               }
      .           
      .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
    444 ( 0.00%)          self.parse_mac_args_common(false)
      .               }
      .           
  1,800 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
  1,600 ( 0.00%)          Ok(
  1,460 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
    345 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
    345 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
      .                       {
    348 ( 0.00%)                  match self.parse_token_tree() {
    435 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
      .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
      .                               {
    174 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
      .                               }
      .                               _ => unreachable!(),
      .                           }
    226 ( 0.00%)              } else if !delimited_only {
      .                           if self.eat(&token::Eq) {
     65 ( 0.00%)                      let eq_span = self.prev_token.span;
      .           
      .                               // Collect tokens because they are used during lowering to HIR.
     65 ( 0.00%)                      let expr = self.parse_expr_force_collect()?;
     65 ( 0.00%)                      let span = expr.span;
      .           
    325 ( 0.00%)                      let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
    585 ( 0.00%)                      MacArgs::Eq(eq_span, Token::new(token_kind, span))
      .                           } else {
      .                               MacArgs::Empty
      .                           }
      .                       } else {
      .                           return self.unexpected();
      .                       },
      .                   )
  1,400 ( 0.00%)      }
      .           
      .               fn parse_or_use_outer_attributes(
      .                   &mut self,
      .                   already_parsed_attrs: Option<AttrWrapper>,
      .               ) -> PResult<'a, AttrWrapper> {
  1,625 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
      .                       Ok(attrs)
      .                   } else {
    914 ( 0.00%)              self.parse_outer_attributes()
      .                   }
      .               }
      .           
      .               /// Parses a single token tree from the input.
    936 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
    379 ( 0.00%)          match self.token.kind {
      .                       token::OpenDelim(..) => {
      .                           let depth = self.token_cursor.stack.len();
      .           
      .                           // We keep advancing the token cursor until we hit
      .                           // the matching `CloseDelim` token.
  7,168 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
      .                               && matches!(self.token.kind, token::CloseDelim(_)))
      .                           {
      .                               // Advance one token at a time, so `TokenCursor::next()`
      .                               // can capture these tokens if necessary.
  5,600 ( 0.00%)                      self.bump();
      .                           }
      .                           // We are still inside the frame corresponding
      .                           // to the delimited stream we captured, so grab
      .                           // the tokens from this frame.
      .                           let frame = &self.token_cursor.frame;
    220 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
    220 ( 0.00%)                  let span = frame.span;
    110 ( 0.00%)                  let delim = frame.delim;
      .                           // Consume close delimiter
    220 ( 0.00%)                  self.bump();
    550 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
      .                       }
      .                       token::CloseDelim(_) | token::Eof => unreachable!(),
      .                       _ => {
     14 ( 0.00%)                  self.bump();
     35 ( 0.00%)                  TokenTree::Token(self.prev_token.clone())
      .                       }
      .                   }
    819 ( 0.00%)      }
      .           
      .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
      .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
      .                   let mut tts = Vec::new();
      .                   while self.token != token::Eof {
      .                       tts.push(self.parse_token_tree());
      .                   }
      .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
      .                   }
      .                   TokenStream::new(result)
      .               }
      .           
      .               /// Evaluates the closure with restrictions in place.
      .               ///
      .               /// Afters the closure is evaluated, restrictions are reset.
      .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
    648 ( 0.00%)          let old = self.restrictions;
    864 ( 0.00%)          self.restrictions = res;
      .                   let res = f(self);
    773 ( 0.00%)          self.restrictions = old;
      .                   res
      .               }
      .           
  3,592 ( 0.00%)      fn is_crate_vis(&self) -> bool {
  2,245 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
  4,041 ( 0.00%)      }
      .           
      .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
      .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
      .               /// If the following element can't be a tuple (i.e., it's a function definition), then
      .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
      .               /// so emit a proper diagnostic.
      .               // Public for rustfmt usage.
  3,360 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
    672 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
      .           
    336 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
  1,344 ( 0.00%)          if self.is_crate_vis() {
      .                       self.bump(); // `crate`
      .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
      .                       return Ok(Visibility {
      .                           span: self.prev_token.span,
      .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
      .                           tokens: None,
      .                       });
      .                   }
      .           
      .                   if !self.eat_keyword(kw::Pub) {
      .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
      .                       // keyword to grab a span from for inherited visibility; an empty span at the
      .                       // beginning of the current token would seem to be the "Schelling span".
    304 ( 0.00%)              return Ok(Visibility {
    912 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
      .                           kind: VisibilityKind::Inherited,
      .                           tokens: None,
      .                       });
      .                   }
     32 ( 0.00%)          let lo = self.prev_token.span;
      .           
    160 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
      .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
      .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
      .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
      .                       // by the following tokens.
     36 ( 0.00%)              if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
      .                       // account for `pub(crate::foo)`
      .                       {
      .                           // Parse `pub(crate)`.
     12 ( 0.00%)                  self.bump(); // `(`
      8 ( 0.00%)                  self.bump(); // `crate`
     12 ( 0.00%)                  self.expect(&token::CloseDelim(token::Paren))?; // `)`
      4 ( 0.00%)                  let vis = VisibilityKind::Crate(CrateSugar::PubCrate);
      .                           return Ok(Visibility {
     12 ( 0.00%)                      span: lo.to(self.prev_token.span),
      .                               kind: vis,
      .                               tokens: None,
      .                           });
      .                       } else if self.is_keyword_ahead(1, &[kw::In]) {
      .                           // Parse `pub(in path)`.
      .                           self.bump(); // `(`
      .                           self.bump(); // `in`
      .                           let path = self.parse_path(PathStyle::Mod)?; // `path`
-- line 1317 ----------------------------------------
-- line 1338 ----------------------------------------
      .                       } else if let FollowedByType::No = fbt {
      .                           // Provide this diagnostic if a type cannot follow;
      .                           // in particular, if this is not a tuple struct.
      .                           self.recover_incorrect_vis_restriction()?;
      .                           // Emit diagnostic, but continue with public visibility.
      .                       }
      .                   }
      .           
     84 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
  3,024 ( 0.00%)      }
      .           
      .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
      .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
      .                   self.bump(); // `(`
      .                   let path = self.parse_path(PathStyle::Mod)?;
      .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
      .           
      .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
      .                       )
      .                       .emit();
      .           
      .                   Ok(())
      .               }
      .           
      .               /// Parses `extern string_literal?`.
      .               fn parse_extern(&mut self) -> Extern {
     71 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
      .               }
      .           
      .               /// Parses a string literal as an ABI spec.
      .               fn parse_abi(&mut self) -> Option<StrLit> {
      .                   match self.parse_str_lit() {
      .                       Ok(str_lit) => Some(str_lit),
      .                       Err(Some(lit)) => match lit.kind {
      .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1395 ----------------------------------------
      .                                   .emit();
      .                               None
      .                           }
      .                       },
      .                       Err(None) => None,
      .                   }
      .               }
      .           
    890 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
      .                   &mut self,
      .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
      .               ) -> PResult<'a, R> {
      .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
      .                   // `ForceCollect::Yes`
      .                   self.collect_tokens_trailing_token(
      .                       AttrWrapper::empty(),
      .                       ForceCollect::Yes,
     89 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
      .                   )
    890 ( 0.00%)      }
      .           
      .               /// `::{` or `::*`
  9,472 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
  4,736 ( 0.00%)          self.check(&token::ModSep)
      .                       && self.look_ahead(1, |t| {
  1,484 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
      .                       })
  9,909 ( 0.00%)      }
      .           
      .               pub fn clear_expected_tokens(&mut self) {
      .                   self.expected_tokens.clear();
      .               }
      .           }
      .           
      .           crate fn make_unclosed_delims_error(
      .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
      .                   err.span_label(sp, "closing delimiter possibly meant for this");
      .               }
      .               if let Some(sp) = unmatched.unclosed_span {
      .                   err.span_label(sp, "unclosed delimiter");
      .               }
      .               Some(err)
      .           }
      .           
  1,688 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
    844 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
      .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
    844 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
      .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
      .                       e.emit();
      .                   }
      .               }
  1,688 ( 0.00%)  }
      .           
      .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
      .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
      .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
      .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
      .           /// `AttrAnnotatedTokenTree::Delimited` tokens
      .           #[derive(Debug, Clone)]
      .           pub enum FlatToken {
-- line 1474 ----------------------------------------

 52,698 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs
--------------------------------------------------------------------------------
Ir               

-- line 44 ----------------------------------------
      .           /// Convert from a specific kind of undo to the more general UndoLog
      .           impl<'tcx> From<Instantiate> for UndoLog<'tcx> {
      .               fn from(l: Instantiate) -> Self {
      .                   UndoLog::Values(sv::UndoLog::Other(l))
      .               }
      .           }
      .           
      .           impl<'tcx> Rollback<UndoLog<'tcx>> for TypeVariableStorage<'tcx> {
 17,761 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
 74,735 ( 0.02%)          match undo {
 14,070 ( 0.00%)              UndoLog::EqRelation(undo) => self.eq_relations.reverse(undo),
  7,542 ( 0.00%)              UndoLog::SubRelation(undo) => self.sub_relations.reverse(undo),
 13,910 ( 0.00%)              UndoLog::Values(undo) => self.values.reverse(undo),
      .                   }
 35,522 ( 0.01%)      }
      .           }
      .           
      .           pub struct TypeVariableStorage<'tcx> {
      .               values: sv::SnapshotVecStorage<Delegate>,
      .           
      .               /// Two variables are unified in `eq_relations` when we have a
      .               /// constraint `?X == ?Y`. This table also stores, for each key,
      .               /// the known value.
-- line 66 ----------------------------------------
-- line 136 ----------------------------------------
      .               DynReturnFn,
      .               LatticeVariable,
      .           }
      .           
      .           pub(crate) struct TypeVariableData {
      .               origin: TypeVariableOrigin,
      .           }
      .           
109,258 ( 0.02%)  #[derive(Copy, Clone, Debug)]
      .           pub enum TypeVariableValue<'tcx> {
      .               Known { value: Ty<'tcx> },
      .               Unknown { universe: ty::UniverseIndex },
      .           }
      .           
      .           impl<'tcx> TypeVariableValue<'tcx> {
      .               /// If this value is known, returns the type it is known to be.
      .               /// Otherwise, `None`.
      .               pub fn known(&self) -> Option<Ty<'tcx>> {
 62,386 ( 0.01%)          match *self {
      .                       TypeVariableValue::Unknown { .. } => None,
      .                       TypeVariableValue::Known { value } => Some(value),
      .                   }
      .               }
      .           
      .               pub fn is_unknown(&self) -> bool {
      .                   match *self {
      .                       TypeVariableValue::Unknown { .. } => true,
-- line 162 ----------------------------------------
-- line 166 ----------------------------------------
      .           }
      .           
      .           pub(crate) struct Instantiate;
      .           
      .           pub(crate) struct Delegate;
      .           
      .           impl<'tcx> TypeVariableStorage<'tcx> {
      .               pub fn new() -> TypeVariableStorage<'tcx> {
  9,579 ( 0.00%)          TypeVariableStorage {
      .                       values: sv::SnapshotVecStorage::new(),
      .                       eq_relations: ut::UnificationTableStorage::new(),
      .                       sub_relations: ut::UnificationTableStorage::new(),
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub(crate) fn with_log<'a>(
-- line 182 ----------------------------------------
-- line 188 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> TypeVariableTable<'_, 'tcx> {
      .               /// Returns the origin that was given when `vid` was created.
      .               ///
      .               /// Note that this function does not return care whether
      .               /// `vid` has been unified with something else or not.
      .               pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin {
    136 ( 0.00%)          &self.storage.values.get(vid.as_usize()).origin
      .               }
      .           
      .               /// Records that `a == b`, depending on `dir`.
      .               ///
      .               /// Precondition: neither `a` nor `b` are known.
      .               pub fn equate(&mut self, a: ty::TyVid, b: ty::TyVid) {
      .                   debug_assert!(self.probe(a).is_unknown());
      .                   debug_assert!(self.probe(b).is_unknown());
  1,141 ( 0.00%)          self.eq_relations().union(a, b);
    978 ( 0.00%)          self.sub_relations().union(a, b);
      .               }
      .           
      .               /// Records that `a <: b`, depending on `dir`.
      .               ///
      .               /// Precondition: neither `a` nor `b` are known.
      .               pub fn sub(&mut self, a: ty::TyVid, b: ty::TyVid) {
      .                   debug_assert!(self.probe(a).is_unknown());
      .                   debug_assert!(self.probe(b).is_unknown());
    308 ( 0.00%)          self.sub_relations().union(a, b);
      .               }
      .           
      .               /// Instantiates `vid` with the type `ty`.
      .               ///
      .               /// Precondition: `vid` must not have been previously instantiated.
 31,670 ( 0.01%)      pub fn instantiate(&mut self, vid: ty::TyVid, ty: Ty<'tcx>) {
      .                   let vid = self.root_var(vid);
      .                   debug_assert!(self.probe(vid).is_unknown());
      .                   debug_assert!(
      .                       self.eq_relations().probe_value(vid).is_unknown(),
      .                       "instantiating type variable `{:?}` twice: new-value = {:?}, old-value={:?}",
      .                       vid,
      .                       ty,
      .                       self.eq_relations().probe_value(vid)
      .                   );
 44,338 ( 0.01%)          self.eq_relations().union_value(vid, TypeVariableValue::Known { value: ty });
      .           
      .                   // Hack: we only need this so that `types_escaping_snapshot`
      .                   // can see what has been unified; see the Delegate impl for
      .                   // more details.
      .                   self.undo_log.push(Instantiate);
 31,670 ( 0.01%)      }
      .           
      .               /// Creates a new type variable.
      .               ///
      .               /// - `diverging`: indicates if this is a "diverging" type
      .               ///   variable, e.g.,  one created as the type of a `return`
      .               ///   expression. The code in this module doesn't care if a
      .               ///   variable is diverging, but the main Rust type-checker will
      .               ///   sometimes "unify" such variables with the `!` or `()` types.
      .               /// - `origin`: indicates *why* the type variable was created.
      .               ///   The code in this module doesn't care, but it can be useful
      .               ///   for improving error messages.
 41,118 ( 0.01%)      pub fn new_var(
      .                   &mut self,
      .                   universe: ty::UniverseIndex,
      .                   origin: TypeVariableOrigin,
      .               ) -> ty::TyVid {
 61,677 ( 0.01%)          let eq_key = self.eq_relations().new_key(TypeVariableValue::Unknown { universe });
      .           
 34,265 ( 0.01%)          let sub_key = self.sub_relations().new_key(());
  6,853 ( 0.00%)          assert_eq!(eq_key.vid, sub_key);
      .           
 61,677 ( 0.01%)          let index = self.values().push(TypeVariableData { origin });
 27,412 ( 0.01%)          assert_eq!(eq_key.vid.as_u32(), index as u32);
      .           
      .                   debug!("new_var(index={:?}, universe={:?}, origin={:?}", eq_key.vid, universe, origin,);
      .           
      .                   eq_key.vid
 47,971 ( 0.01%)      }
      .           
      .               /// Returns the number of type variables created thus far.
      .               pub fn num_vars(&self) -> usize {
    184 ( 0.00%)          self.storage.values.len()
      .               }
      .           
      .               /// Returns the "root" variable of `vid` in the `eq_relations`
      .               /// equivalence table. All type variables that have been equated
      .               /// will yield the same root variable (per the union-find
      .               /// algorithm), so `root_var(a) == root_var(b)` implies that `a ==
      .               /// b` (transitively).
      .               pub fn root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
 21,831 ( 0.00%)          self.eq_relations().find(vid).vid
      .               }
      .           
      .               /// Returns the "root" variable of `vid` in the `sub_relations`
      .               /// equivalence table. All type variables that have been are
      .               /// related via equality or subtyping will yield the same root
      .               /// variable (per the union-find algorithm), so `sub_root_var(a)
      .               /// == sub_root_var(b)` implies that:
      .               ///
      .               ///     exists X. (a <: X || X <: a) && (b <: X || X <: b)
     22 ( 0.00%)      pub fn sub_root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
 19,218 ( 0.00%)          self.sub_relations().find(vid)
     44 ( 0.00%)      }
      .           
      .               /// Returns `true` if `a` and `b` have same "sub-root" (i.e., exists some
      .               /// type X such that `forall i in {a, b}. (i <: X || X <: i)`.
      .               pub fn sub_unified(&mut self, a: ty::TyVid, b: ty::TyVid) -> bool {
      .                   self.sub_root_var(a) == self.sub_root_var(b)
      .               }
      .           
      .               /// Retrieves the type to which `vid` has been instantiated, if
      .               /// any.
239,955 ( 0.05%)      pub fn probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
      .                   self.inlined_probe(vid)
239,955 ( 0.05%)      }
      .           
      .               /// An always-inlined variant of `probe`, for very hot call sites.
      .               #[inline(always)]
      .               pub fn inlined_probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
106,738 ( 0.02%)          self.eq_relations().inlined_probe_value(vid)
      .               }
      .           
      .               /// If `t` is a type-inference variable, and it has been
      .               /// instantiated, then return the with which it was
      .               /// instantiated. Otherwise, returns `t`.
      .               pub fn replace_if_possible(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
 65,434 ( 0.01%)          match *t.kind() {
 43,170 ( 0.01%)              ty::Infer(ty::TyVar(v)) => match self.probe(v) {
      .                           TypeVariableValue::Unknown { .. } => t,
      .                           TypeVariableValue::Known { value } => value,
      .                       },
      .                       _ => t,
      .                   }
      .               }
      .           
      .               #[inline]
-- line 323 ----------------------------------------
-- line 324 ----------------------------------------
      .               fn values(
      .                   &mut self,
      .               ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {
      .                   self.storage.values.with_log(self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn eq_relations(&mut self) -> super::UnificationTable<'_, 'tcx, TyVidEqKey<'tcx>> {
190,018 ( 0.04%)          self.storage.eq_relations.with_log(self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn sub_relations(&mut self) -> super::UnificationTable<'_, 'tcx, ty::TyVid> {
 13,599 ( 0.00%)          self.storage.sub_relations.with_log(self.undo_log)
      .               }
      .           
      .               /// Returns a range of the type variables created during the snapshot.
    920 ( 0.00%)      pub fn vars_since_snapshot(
      .                   &mut self,
      .                   value_count: usize,
      .               ) -> (Range<TyVid>, Vec<TypeVariableOrigin>) {
      .                   let range = TyVid::from_usize(value_count)..TyVid::from_usize(self.num_vars());
  1,104 ( 0.00%)          (
      .                       range.start..range.end,
      .                       (range.start.as_usize()..range.end.as_usize())
      .                           .map(|index| self.storage.values.get(index).origin)
      .                           .collect(),
      .                   )
  1,104 ( 0.00%)      }
      .           
      .               /// Returns indices of all variables that are not yet
      .               /// instantiated.
      .               pub fn unsolved_variables(&mut self) -> Vec<ty::TyVid> {
      .                   (0..self.storage.values.len())
      .                       .filter_map(|i| {
      .                           let vid = ty::TyVid::from_usize(i);
 12,120 ( 0.00%)                  match self.probe(vid) {
      .                               TypeVariableValue::Unknown { .. } => Some(vid),
      .                               TypeVariableValue::Known { .. } => None,
      .                           }
      .                       })
      .                       .collect()
      .               }
      .           }
      .           
-- line 368 ----------------------------------------
-- line 391 ----------------------------------------
      .           /// These structs (a newtyped TyVid) are used as the unification key
      .           /// for the `eq_relations`; they carry a `TypeVariableValue` along
      .           /// with them.
      .           #[derive(Copy, Clone, Debug, PartialEq, Eq)]
      .           pub(crate) struct TyVidEqKey<'tcx> {
      .               vid: ty::TyVid,
      .           
      .               // in the table, we map each ty-vid to one of these:
 82,395 ( 0.02%)      phantom: PhantomData<TypeVariableValue<'tcx>>,
      .           }
      .           
      .           impl<'tcx> From<ty::TyVid> for TyVidEqKey<'tcx> {
      .               #[inline] // make this function eligible for inlining - it is quite hot.
      .               fn from(vid: ty::TyVid) -> Self {
      .                   TyVidEqKey { vid, phantom: PhantomData }
      .               }
      .           }
-- line 407 ----------------------------------------
-- line 419 ----------------------------------------
      .                   "TyVidEqKey"
      .               }
      .           }
      .           
      .           impl<'tcx> ut::UnifyValue for TypeVariableValue<'tcx> {
      .               type Error = ut::NoError;
      .           
      .               fn unify_values(value1: &Self, value2: &Self) -> Result<Self, ut::NoError> {
 26,151 ( 0.01%)          match (value1, value2) {
      .                       // We never equate two type variables, both of which
      .                       // have known types.  Instead, we recursively equate
      .                       // those types.
      .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Known { .. }) => {
      .                           bug!("equating two type variables, both of which have known types")
      .                       }
      .           
      .                       // If one side is known, prefer that one.
      .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Unknown { .. }) => Ok(*value1),
      .                       (&TypeVariableValue::Unknown { .. }, &TypeVariableValue::Known { .. }) => Ok(*value2),
      .           
      .                       // If both sides are *unknown*, it hardly matters, does it?
      .                       (
    163 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe1 },
    163 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe2 },
      .                       ) => {
      .                           // If we unify two unbound variables, ?T and ?U, then whatever
      .                           // value they wind up taking (which must be the same value) must
      .                           // be nameable by both universes. Therefore, the resulting
      .                           // universe is the minimum of the two universes, because that is
      .                           // the one which contains the fewest names in scope.
      .                           let universe = cmp::min(universe1, universe2);
    652 ( 0.00%)                  Ok(TypeVariableValue::Unknown { universe })
      .                       }
      .                   }
      .               }
      .           }

 12,370 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/walk.rs
--------------------------------------------------------------------------------
Ir               

-- line 20 ----------------------------------------
      .           ///
      .           /// It's very easy to produce a deeply
      .           /// nested type tree with a lot of
      .           /// identical subtrees. In order to work efficiently
      .           /// in this situation walker only visits each type once.
      .           /// It maintains a set of visited types and
      .           /// skips any types that are already there.
      .           impl<'tcx> TypeWalker<'tcx> {
  3,221 ( 0.00%)      pub fn new(root: GenericArg<'tcx>) -> Self {
 12,884 ( 0.00%)          Self { stack: smallvec![root], last_subtree: 1, visited: SsoHashSet::new() }
  3,221 ( 0.00%)      }
      .           
      .               /// Skips the subtree corresponding to the last type
      .               /// returned by `next()`.
      .               ///
      .               /// Example: Imagine you are walking `Foo<Bar<i32>, usize>`.
      .               ///
      .               /// ```
      .               /// let mut iter: TypeWalker = ...;
      .               /// iter.next(); // yields Foo
      .               /// iter.next(); // yields Bar<i32>
      .               /// iter.skip_current_subtree(); // skips i32
      .               /// iter.next(); // yields usize
      .               /// ```
      .               pub fn skip_current_subtree(&mut self) {
     66 ( 0.00%)          self.stack.truncate(self.last_subtree);
     33 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Iterator for TypeWalker<'tcx> {
      .               type Item = GenericArg<'tcx>;
      .           
158,526 ( 0.03%)      fn next(&mut self) -> Option<GenericArg<'tcx>> {
      .                   debug!("next(): stack={:?}", self.stack);
      .                   loop {
 35,694 ( 0.01%)              let next = self.stack.pop()?;
 17,847 ( 0.00%)              self.last_subtree = self.stack.len();
 35,694 ( 0.01%)              if self.visited.insert(next) {
 43,179 ( 0.01%)                  push_inner(&mut self.stack, next);
      .                           debug!("next: stack={:?}", self.stack);
      .                           return Some(next);
      .                       }
      .                   }
123,298 ( 0.03%)      }
      .           }
      .           
      .           impl<'tcx> GenericArg<'tcx> {
      .               /// Iterator that walks `self` and any types reachable from
      .               /// `self`, in depth-first order. Note that just walks the types
      .               /// that appear in `self`, it does not descend into the fields of
      .               /// structs or variants. For example:
      .               ///
      .               /// ```text
      .               /// isize => { isize }
      .               /// Foo<Bar<isize>> => { Foo<Bar<isize>>, Bar<isize>, isize }
      .               /// [isize] => { [isize], isize }
      .               /// ```
  3,944 ( 0.00%)      pub fn walk(self) -> TypeWalker<'tcx> {
  1,972 ( 0.00%)          TypeWalker::new(self)
  5,916 ( 0.00%)      }
      .           
      .               /// Iterator that walks the immediate children of `self`. Hence
      .               /// `Foo<Bar<i32>, u32>` yields the sequence `[Bar<i32>, u32]`
      .               /// (but not `i32`, like `walk`).
      .               ///
      .               /// Iterator only walks items once.
      .               /// It accepts visited set, updates it with all visited types
      .               /// and skips any types that are already there.
 48,410 ( 0.01%)      pub fn walk_shallow(
      .                   self,
      .                   visited: &mut SsoHashSet<GenericArg<'tcx>>,
      .               ) -> impl Iterator<Item = GenericArg<'tcx>> {
      .                   let mut stack = SmallVec::new();
  9,682 ( 0.00%)          push_inner(&mut stack, self);
 19,364 ( 0.00%)          stack.retain(|a| visited.insert(*a));
106,502 ( 0.02%)          stack.into_iter()
 48,410 ( 0.01%)      }
      .           }
      .           
      .           impl<'tcx> super::TyS<'tcx> {
      .               /// Iterator that walks `self` and any types reachable from
      .               /// `self`, in depth-first order. Note that just walks the types
      .               /// that appear in `self`, it does not descend into the fields of
      .               /// structs or variants. For example:
      .               ///
      .               /// ```text
      .               /// isize => { isize }
      .               /// Foo<Bar<isize>> => { Foo<Bar<isize>>, Bar<isize>, isize }
      .               /// [isize] => { [isize], isize }
      .               /// ```
  2,498 ( 0.00%)      pub fn walk(&'tcx self) -> TypeWalker<'tcx> {
  1,249 ( 0.00%)          TypeWalker::new(self.into())
  3,747 ( 0.00%)      }
      .           }
      .           
      .           /// We push `GenericArg`s on the stack in reverse order so as to
      .           /// maintain a pre-order traversal. As of the time of this
      .           /// writing, the fact that the traversal is pre-order is not
      .           /// known to be significant to any code, but it seems like the
      .           /// natural order one would expect (basically, the order of the
      .           /// types as they are written).
144,450 ( 0.03%)  fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>) {
      .               match parent.unpack() {
112,815 ( 0.02%)          GenericArgKind::Type(parent_ty) => match *parent_ty.kind() {
      .                       ty::Bool
      .                       | ty::Char
      .                       | ty::Int(_)
      .                       | ty::Uint(_)
      .                       | ty::Float(_)
      .                       | ty::Str
      .                       | ty::Infer(_)
      .                       | ty::Param(_)
      .                       | ty::Never
      .                       | ty::Error(_)
      .                       | ty::Placeholder(..)
      .                       | ty::Bound(..)
      .                       | ty::Foreign(..) => {}
      .           
    234 ( 0.00%)              ty::Array(ty, len) => {
    351 ( 0.00%)                  stack.push(len.into());
      .                           stack.push(ty.into());
      .                       }
      .                       ty::Slice(ty) => {
      .                           stack.push(ty.into());
      .                       }
      .                       ty::RawPtr(mt) => {
      .                           stack.push(mt.ty.into());
      .                       }
  2,862 ( 0.00%)              ty::Ref(lt, ty, _) => {
  2,862 ( 0.00%)                  stack.push(ty.into());
      .                           stack.push(lt.into());
      .                       }
      .                       ty::Projection(data) => {
      .                           stack.extend(data.substs.iter().rev());
      .                       }
      .                       ty::Dynamic(obj, lt) => {
      .                           stack.push(lt.into());
      .                           stack.extend(obj.iter().rev().flat_map(|predicate| {
-- line 157 ----------------------------------------
-- line 170 ----------------------------------------
      .                                   ty::Term::Const(ct) => ct.into(),
      .                               }))
      .                           }));
      .                       }
      .                       ty::Adt(_, substs)
      .                       | ty::Opaque(_, substs)
      .                       | ty::Closure(_, substs)
      .                       | ty::Generator(_, substs, _)
    492 ( 0.00%)              | ty::Tuple(substs)
      .                       | ty::FnDef(_, substs) => {
      .                           stack.extend(substs.iter().rev());
      .                       }
      .                       ty::GeneratorWitness(ts) => {
      .                           stack.extend(ts.skip_binder().iter().rev().map(|ty| ty.into()));
      .                       }
    692 ( 0.00%)              ty::FnPtr(sig) => {
  2,422 ( 0.00%)                  stack.push(sig.skip_binder().output().into());
  2,768 ( 0.00%)                  stack.extend(sig.skip_binder().inputs().iter().copied().rev().map(|ty| ty.into()));
      .                       }
      .                   },
      .                   GenericArgKind::Lifetime(_) => {}
      .                   GenericArgKind::Const(parent_ct) => {
      .                       stack.push(parent_ct.ty.into());
    238 ( 0.00%)              match parent_ct.val {
      .                           ty::ConstKind::Infer(_)
      .                           | ty::ConstKind::Param(_)
      .                           | ty::ConstKind::Placeholder(_)
      .                           | ty::ConstKind::Bound(..)
      .                           | ty::ConstKind::Value(_)
      .                           | ty::ConstKind::Error(_) => {}
      .           
     17 ( 0.00%)                  ty::ConstKind::Unevaluated(ct) => {
      .                               stack.extend(ct.substs.iter().rev());
      .                           }
      .                       }
      .                   }
      .               }
 28,040 ( 0.01%)  }

235,261 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/walk.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 121 ----------------------------------------
      .           #[derive(Debug)]
      .           pub enum ProcessResult<O, E> {
      .               Unchanged,
      .               Changed(Vec<O>),
      .               Error(E),
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
  8,890 ( 0.00%)  struct ObligationTreeId(usize);
      .           
      .           type ObligationTreeIdGenerator =
      .               std::iter::Map<std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;
      .           
      .           pub struct ObligationForest<O: ForestObligation> {
      .               /// The list of obligations. In between calls to `process_obligations`,
      .               /// this list only contains nodes in the `Pending` or `Waiting` state.
      .               ///
-- line 137 ----------------------------------------
-- line 181 ----------------------------------------
      .               has_parent: bool,
      .           
      .               /// Identifier of the obligation tree to which this node belongs.
      .               obligation_tree_id: ObligationTreeId,
      .           }
      .           
      .           impl<O> Node<O> {
      .               fn new(parent: Option<usize>, obligation: O, obligation_tree_id: ObligationTreeId) -> Node<O> {
135,280 ( 0.03%)          Node {
      .                       obligation,
      .                       state: Cell::new(NodeState::Pending),
 20,485 ( 0.00%)              dependents: if let Some(parent_index) = parent { vec![parent_index] } else { vec![] },
      .                       has_parent: parent.is_some(),
      .                       obligation_tree_id,
      .                   }
      .               }
      .           }
      .           
      .           /// The state of one node in some tree within the forest. This represents the
      .           /// current state of processing for the obligation (of type `O`) associated
-- line 200 ----------------------------------------
-- line 223 ----------------------------------------
      .           ///  |     compress()
      .           ///  v
      .           /// (Removed)
      .           /// ```
      .           /// The `Error` state can be introduced in several places, via `error_at()`.
      .           ///
      .           /// Outside of `ObligationForest` methods, nodes should be either `Pending` or
      .           /// `Waiting`.
 59,453 ( 0.01%)  #[derive(Debug, Copy, Clone, PartialEq, Eq)]
      .           enum NodeState {
      .               /// This obligation has not yet been selected successfully. Cannot have
      .               /// subobligations.
      .               Pending,
      .           
      .               /// This obligation was selected successfully, but may or may not have
      .               /// subobligations.
      .               Success,
-- line 239 ----------------------------------------
-- line 279 ----------------------------------------
      .               pub stalled: bool,
      .           }
      .           
      .           impl<O, E> OutcomeTrait for Outcome<O, E> {
      .               type Error = Error<O, E>;
      .               type Obligation = O;
      .           
      .               fn new() -> Self {
 14,598 ( 0.00%)          Self { stalled: true, errors: vec![] }
      .               }
      .           
      .               fn mark_not_stalled(&mut self) {
  8,421 ( 0.00%)          self.stalled = false;
      .               }
      .           
      .               fn is_stalled(&self) -> bool {
  2,092 ( 0.00%)          self.stalled
      .               }
      .           
      .               fn record_completed(&mut self, _outcome: &Self::Obligation) {
      .                   // do nothing
      .               }
      .           
      .               fn record_error(&mut self, error: Self::Error) {
      .                   self.errors.push(error)
-- line 303 ----------------------------------------
-- line 306 ----------------------------------------
      .           
      .           #[derive(Debug, PartialEq, Eq)]
      .           pub struct Error<O, E> {
      .               pub error: E,
      .               pub backtrace: Vec<O>,
      .           }
      .           
      .           impl<O: ForestObligation> ObligationForest<O> {
  2,434 ( 0.00%)      pub fn new() -> ObligationForest<O> {
 29,208 ( 0.01%)          ObligationForest {
      .                       nodes: vec![],
      .                       done_cache: Default::default(),
      .                       active_cache: Default::default(),
      .                       reused_node_vec: vec![],
      .                       obligation_tree_id_generator: (0..).map(ObligationTreeId),
      .                       error_cache: Default::default(),
      .                   }
  2,434 ( 0.00%)      }
      .           
      .               /// Returns the total number of nodes in the forest that have not
      .               /// yet been fully resolved.
      .               pub fn len(&self) -> usize {
      .                   self.nodes.len()
      .               }
      .           
      .               /// Registers an obligation.
      .               pub fn register_obligation(&mut self, obligation: O) {
      .                   // Ignore errors here - there is no guarantee of success.
 96,343 ( 0.02%)          let _ = self.register_obligation_at(obligation, None);
      .               }
      .           
      .               // Returns Err(()) if we already know this obligation failed.
201,894 ( 0.04%)      fn register_obligation_at(&mut self, obligation: O, parent: Option<usize>) -> Result<(), ()> {
 36,708 ( 0.01%)          let cache_key = obligation.as_cache_key();
 36,708 ( 0.01%)          if self.done_cache.contains(&cache_key) {
      .                       debug!("register_obligation_at: ignoring already done obligation: {:?}", obligation);
      .                       return Ok(());
      .                   }
      .           
 75,852 ( 0.02%)          match self.active_cache.entry(cache_key) {
      .                       Entry::Occupied(o) => {
  8,374 ( 0.00%)                  let node = &mut self.nodes[*o.get()];
  8,374 ( 0.00%)                  if let Some(parent_index) = parent {
      .                               // If the node is already in `active_cache`, it has already
      .                               // had its chance to be marked with a parent. So if it's
      .                               // not already present, just dump `parent` into the
      .                               // dependents as a non-parent.
  8,298 ( 0.00%)                      if !node.dependents.contains(&parent_index) {
      .                                   node.dependents.push(parent_index);
      .                               }
      .                           }
 12,561 ( 0.00%)                  if let NodeState::Error = node.state.get() { Err(()) } else { Ok(()) }
      .                       }
 25,365 ( 0.01%)              Entry::Vacant(v) => {
 50,730 ( 0.01%)                  let obligation_tree_id = match parent {
  8,020 ( 0.00%)                      Some(parent_index) => self.nodes[parent_index].obligation_tree_id,
      .                               None => self.obligation_tree_id_generator.next().unwrap(),
      .                           };
      .           
      .                           let already_failed = parent.is_some()
      .                               && self
      .                                   .error_cache
      .                                   .get(&obligation_tree_id)
      .                                   .map_or(false, |errors| errors.contains(v.key()));
      .           
      .                           if already_failed {
      .                               Err(())
      .                           } else {
  8,455 ( 0.00%)                      let new_index = self.nodes.len();
      .                               v.insert(new_index);
      .                               self.nodes.push(Node::new(parent, obligation, obligation_tree_id));
      .                               Ok(())
      .                           }
      .                       }
      .                   }
165,186 ( 0.03%)      }
      .           
      .               /// Converts all remaining obligations to the given error.
 28,637 ( 0.01%)      pub fn to_errors<E: Clone>(&mut self, error: E) -> Vec<Error<O, E>> {
      .                   let errors = self
      .                       .nodes
      .                       .iter()
      .                       .enumerate()
      .                       .filter(|(_index, node)| node.state.get() == NodeState::Pending)
      .                       .map(|(index, _node)| Error { error: error.clone(), backtrace: self.error_at(index) })
      .                       .collect();
      .           
  8,182 ( 0.00%)          self.compress(|_| assert!(false));
      .                   errors
 24,546 ( 0.01%)      }
      .           
      .               /// Returns the set of obligations that are in a pending state.
      .               pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>
      .               where
      .                   F: Fn(&O) -> P,
      .               {
     89 ( 0.00%)          self.nodes
      .                       .iter()
      .                       .filter(|node| node.state.get() == NodeState::Pending)
      .                       .map(|node| f(&node.obligation))
      .                       .collect()
      .               }
      .           
      .               fn insert_into_error_cache(&mut self, index: usize) {
      .                   let node = &self.nodes[index];
-- line 410 ----------------------------------------
-- line 414 ----------------------------------------
      .                       .insert(node.obligation.as_cache_key());
      .               }
      .           
      .               /// Performs a pass through the obligation list. This must
      .               /// be called in a loop until `outcome.stalled` is false.
      .               ///
      .               /// This _cannot_ be unrolled (presently, at least).
      .               #[inline(never)]
 65,691 ( 0.01%)      pub fn process_obligations<P, OUT>(&mut self, processor: &mut P) -> OUT
      .               where
      .                   P: ObligationProcessor<Obligation = O>,
      .                   OUT: OutcomeTrait<Obligation = O, Error = Error<O, P::Error>>,
      .               {
      .                   let mut outcome = OUT::new();
      .           
      .                   // Note that the loop body can append new nodes, and those new nodes
      .                   // will then be processed by subsequent iterations of the loop.
      .                   //
      .                   // We can't use an iterator for the loop because `self.nodes` is
      .                   // appended to and the borrow checker would complain. We also can't use
      .                   // `for index in 0..self.nodes.len() { ... }` because the range would
      .                   // be computed with the initial length, and we would miss the appended
      .                   // nodes. Therefore we use a `while` loop.
      .                   let mut index = 0;
 21,799 ( 0.00%)          while let Some(node) = self.nodes.get_mut(index) {
      .                       // `processor.process_obligation` can modify the predicate within
      .                       // `node.obligation`, and that predicate is the key used for
      .                       // `self.active_cache`. This means that `self.active_cache` can get
      .                       // out of sync with `nodes`. It's not very common, but it does
      .                       // happen, and code in `compress` has to allow for it.
 29,000 ( 0.01%)              if node.state.get() != NodeState::Pending {
    665 ( 0.00%)                  index += 1;
      .                           continue;
      .                       }
      .           
 44,697 ( 0.01%)              match processor.process_obligation(&mut node.obligation) {
      .                           ProcessResult::Unchanged => {
      .                               // No change in state.
      .                           }
 33,684 ( 0.01%)                  ProcessResult::Changed(children) => {
      .                               // We are not (yet) stalled.
      .                               outcome.mark_not_stalled();
      .                               node.state.set(NodeState::Success);
      .           
 55,570 ( 0.01%)                      for child in children {
186,031 ( 0.04%)                          let st = self.register_obligation_at(child, Some(index));
 21,886 ( 0.00%)                          if let Err(()) = st {
      .                                       // Error already reported - propagate it
      .                                       // to our node.
      .                                       self.error_at(index);
      .                                   }
      .                               }
      .                           }
      .                           ProcessResult::Error(err) => {
      .                               outcome.mark_not_stalled();
      .                               outcome.record_error(Error { error: err, backtrace: self.error_at(index) });
      .                           }
      .                       }
 27,670 ( 0.01%)              index += 1;
      .                   }
      .           
      .                   // There's no need to perform marking, cycle processing and compression when nothing
      .                   // changed.
  2,092 ( 0.00%)          if !outcome.is_stalled() {
      .                       self.mark_successes();
      .                       self.process_cycles(processor);
  2,500 ( 0.00%)              self.compress(|obl| outcome.record_completed(obl));
      .                   }
      .           
      .                   outcome
 65,691 ( 0.01%)      }
      .           
      .               /// Returns a vector of obligations for `p` and all of its
      .               /// ancestors, putting them into the error state in the process.
      .               fn error_at(&self, mut index: usize) -> Vec<O> {
      .                   let mut error_stack: Vec<usize> = vec![];
      .                   let mut trace = vec![];
      .           
      .                   loop {
-- line 492 ----------------------------------------
-- line 516 ----------------------------------------
      .                   trace
      .               }
      .           
      .               /// Mark all `Waiting` nodes as `Success`, except those that depend on a
      .               /// pending node.
      .               fn mark_successes(&self) {
      .                   // Convert all `Waiting` nodes to `Success`.
      .                   for node in &self.nodes {
 26,153 ( 0.01%)              if node.state.get() == NodeState::Waiting {
      .                           node.state.set(NodeState::Success);
      .                       }
      .                   }
      .           
      .                   // Convert `Success` nodes that depend on a pending node back to
      .                   // `Waiting`.
      .                   for node in &self.nodes {
 10,386 ( 0.00%)              if node.state.get() == NodeState::Pending {
      .                           // This call site is hot.
      .                           self.inlined_mark_dependents_as_waiting(node);
      .                       }
      .                   }
      .               }
      .           
      .               // This always-inlined function is for the hot call site.
      .               #[inline(always)]
      .               fn inlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
    367 ( 0.00%)          for &index in node.dependents.iter() {
      .                       let node = &self.nodes[index];
    367 ( 0.00%)              let state = node.state.get();
    367 ( 0.00%)              if state == NodeState::Success {
      .                           // This call site is cold.
    675 ( 0.00%)                  self.uninlined_mark_dependents_as_waiting(node);
      .                       } else {
      .                           debug_assert!(state == NodeState::Waiting || state == NodeState::Error)
      .                       }
      .                   }
      .               }
      .           
      .               // This never-inlined function is for the cold call site.
      .               #[inline(never)]
  1,575 ( 0.00%)      fn uninlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
      .                   // Mark node Waiting in the cold uninlined code instead of the hot inlined
      .                   node.state.set(NodeState::Waiting);
      .                   self.inlined_mark_dependents_as_waiting(node)
  1,800 ( 0.00%)      }
      .           
      .               /// Report cycles between all `Success` nodes, and convert all `Success`
      .               /// nodes to `Done`. This must be called after `mark_successes`.
      .               fn process_cycles<P>(&mut self, processor: &mut P)
      .               where
      .                   P: ObligationProcessor<Obligation = O>,
      .               {
  1,250 ( 0.00%)          let mut stack = std::mem::take(&mut self.reused_node_vec);
      .                   for (index, node) in self.nodes.iter().enumerate() {
      .                       // For some benchmarks this state test is extremely hot. It's a win
      .                       // to handle the no-op cases immediately to avoid the cost of the
      .                       // function call.
 10,386 ( 0.00%)              if node.state.get() == NodeState::Success {
 41,840 ( 0.01%)                  self.find_cycles_from_node(&mut stack, processor, index);
      .                       }
      .                   }
      .           
      .                   debug_assert!(stack.is_empty());
 10,000 ( 0.00%)          self.reused_node_vec = stack;
      .               }
      .           
119,565 ( 0.03%)      fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)
      .               where
      .                   P: ObligationProcessor<Obligation = O>,
      .               {
      .                   let node = &self.nodes[index];
 26,570 ( 0.01%)          if node.state.get() == NodeState::Success {
    106 ( 0.00%)              match stack.iter().rposition(|&n| n == index) {
      .                           None => {
      .                               stack.push(index);
  4,917 ( 0.00%)                      for &dep_index in node.dependents.iter() {
 19,668 ( 0.00%)                          self.find_cycles_from_node(stack, processor, dep_index);
      .                               }
      .                               stack.pop();
      .                               node.state.set(NodeState::Done);
      .                           }
      .                           Some(rpos) => {
      .                               // Cycle detected.
      .                               processor.process_backedge(
      .                                   stack[rpos..].iter().map(|&i| &self.nodes[i].obligation),
      .                                   PhantomData,
      .                               );
      .                           }
      .                       }
      .                   }
106,280 ( 0.02%)      }
      .           
      .               /// Compresses the vector, removing all popped nodes. This adjusts the
      .               /// indices and hence invalidates any outstanding indices. `process_cycles`
      .               /// must be run beforehand to remove any cycles on `Success` nodes.
      .               #[inline(never)]
 38,637 ( 0.01%)      fn compress(&mut self, mut outcome_cb: impl FnMut(&O)) {
  5,341 ( 0.00%)          let orig_nodes_len = self.nodes.len();
      .                   let mut node_rewrites: Vec<_> = std::mem::take(&mut self.reused_node_vec);
      .                   debug_assert!(node_rewrites.is_empty());
      .                   node_rewrites.extend(0..orig_nodes_len);
      .                   let mut dead_nodes = 0;
      .           
      .                   // Move removable nodes to the end, preserving the order of the
      .                   // remaining nodes.
      .                   //
      .                   // LOOP INVARIANT:
      .                   //     self.nodes[0..index - dead_nodes] are the first remaining nodes
      .                   //     self.nodes[index - dead_nodes..index] are all dead
      .                   //     self.nodes[index..] are unchanged
      .                   for index in 0..orig_nodes_len {
      .                       let node = &self.nodes[index];
 56,930 ( 0.01%)              match node.state.get() {
      .                           NodeState::Pending | NodeState::Waiting => {
  3,930 ( 0.00%)                      if dead_nodes > 0 {
  2,769 ( 0.00%)                          self.nodes.swap(index, index - dead_nodes);
  4,615 ( 0.00%)                          node_rewrites[index] -= dead_nodes;
      .                               }
      .                           }
      .                           NodeState::Done => {
      .                               // This lookup can fail because the contents of
      .                               // `self.active_cache` are not guaranteed to match those of
      .                               // `self.nodes`. See the comment in `process_obligation`
      .                               // for more details.
 32,666 ( 0.01%)                      if let Some((predicate, _)) =
 25,263 ( 0.01%)                          self.active_cache.remove_entry(&node.obligation.as_cache_key())
      .                               {
      .                                   self.done_cache.insert(predicate);
      .                               } else {
      .                                   self.done_cache.insert(node.obligation.as_cache_key().clone());
      .                               }
      .                               // Extract the success stories.
      .                               outcome_cb(&node.obligation);
 16,842 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
 16,842 ( 0.00%)                      dead_nodes += 1;
      .                           }
      .                           NodeState::Error => {
      .                               // We *intentionally* remove the node from the cache at this point. Otherwise
      .                               // tests must come up with a different type on every type error they
      .                               // check against.
      .                               self.active_cache.remove(&node.obligation.as_cache_key());
      .                               self.insert_into_error_cache(index);
      .                               node_rewrites[index] = orig_nodes_len;
-- line 658 ----------------------------------------
-- line 659 ----------------------------------------
      .                               dead_nodes += 1;
      .                           }
      .                           NodeState::Success => unreachable!(),
      .                       }
      .                   }
      .           
      .                   if dead_nodes > 0 {
      .                       // Remove the dead nodes and rewrite indices.
  2,462 ( 0.00%)              self.nodes.truncate(orig_nodes_len - dead_nodes);
  1,231 ( 0.00%)              self.apply_rewrites(&node_rewrites);
      .                   }
      .           
      .                   node_rewrites.truncate(0);
 21,364 ( 0.00%)          self.reused_node_vec = node_rewrites;
 42,728 ( 0.01%)      }
      .           
      .               #[inline(never)]
 11,079 ( 0.00%)      fn apply_rewrites(&mut self, node_rewrites: &[usize]) {
      .                   let orig_nodes_len = node_rewrites.len();
      .           
      .                   for node in &mut self.nodes {
      .                       let mut i = 0;
  2,122 ( 0.00%)              while let Some(dependent) = node.dependents.get_mut(i) {
  1,284 ( 0.00%)                  let new_index = node_rewrites[*dependent];
    642 ( 0.00%)                  if new_index >= orig_nodes_len {
      .                               node.dependents.swap_remove(i);
      .                               if i == 0 && node.has_parent {
      .                                   // We just removed the parent.
      .                                   node.has_parent = false;
      .                               }
      .                           } else {
    321 ( 0.00%)                      *dependent = new_index;
    642 ( 0.00%)                      i += 1;
      .                           }
      .                       }
      .                   }
      .           
      .                   // This updating of `self.active_cache` is necessary because the
      .                   // removal of nodes within `compress` can fail. See above.
      .                   self.active_cache.retain(|_predicate, index| {
 11,276 ( 0.00%)              let new_index = node_rewrites[*index];
  5,638 ( 0.00%)              if new_index >= orig_nodes_len {
      .                           false
      .                       } else {
  1,801 ( 0.00%)                  *index = new_index;
      .                           true
      .                       }
      .                   });
  9,848 ( 0.00%)      }
      .           }

161,637 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir               

-- line 5 ----------------------------------------
      .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
      .           unsafe impl GlobalAlloc for System {
      .               #[inline]
      .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
      .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
      .                   // So only rely on MIN_ALIGN if size >= align.
      .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
      .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
693,360 ( 0.15%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
520,020 ( 0.11%)              libc::malloc(layout.size()) as *mut u8
      .                   } else {
      .                       #[cfg(target_os = "macos")]
      .                       {
      .                           if layout.align() > (1 << 31) {
      .                               return ptr::null_mut();
      .                           }
      .                       }
      .                       aligned_malloc(&layout)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
      .                   // See the comment above in `alloc` for why this check looks the way it does.
 18,288 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 27,432 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
      .                   } else {
      .                       let ptr = self.alloc(layout);
      .                       if !ptr.is_null() {
      .                           ptr::write_bytes(ptr, 0, layout.size());
      .                       }
      .                       ptr
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
177,901 ( 0.04%)          libc::free(ptr as *mut libc::c_void)
      .               }
      .           
      .               #[inline]
      .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 67,552 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
135,104 ( 0.03%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
      .                   } else {
      .                       realloc_fallback(self, ptr, layout, new_size)
      .                   }
      .               }
      .           }
      .           
      .           cfg_if::cfg_if! {
      .               if #[cfg(any(
-- line 56 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sso/map.rs
--------------------------------------------------------------------------------
Ir               

-- line 70 ----------------------------------------
      .               Array(ArrayVec<(K, V), SSO_ARRAY_SIZE>),
      .               Map(FxHashMap<K, V>),
      .           }
      .           
      .           impl<K, V> SsoHashMap<K, V> {
      .               /// Creates an empty `SsoHashMap`.
      .               #[inline]
      .               pub fn new() -> Self {
  6,433 ( 0.00%)          SsoHashMap::Array(ArrayVec::new())
      .               }
      .           
      .               /// Creates an empty `SsoHashMap` with the specified capacity.
      .               pub fn with_capacity(cap: usize) -> Self {
      .                   if cap <= SSO_ARRAY_SIZE {
      .                       Self::new()
      .                   } else {
      .                       SsoHashMap::Map(FxHashMap::with_capacity_and_hasher(cap, Default::default()))
-- line 86 ----------------------------------------
-- line 226 ----------------------------------------
      .               /// Inserts a key-value pair into the map.
      .               ///
      .               /// If the map did not have this key present, [`None`] is returned.
      .               ///
      .               /// If the map did have this key present, the value is updated, and the old
      .               /// value is returned. The key is not updated, though; this matters for
      .               /// types that can be `==` without being identical. See the [module-level
      .               /// documentation] for more.
676,220 ( 0.14%)      pub fn insert(&mut self, key: K, value: V) -> Option<V> {
176,574 ( 0.04%)          match self {
      .                       SsoHashMap::Array(array) => {
131,006 ( 0.03%)                  for (k, v) in array.iter_mut() {
156,814 ( 0.03%)                      if *k == key {
      .                                   let old_value = std::mem::replace(v, value);
      .                                   return Some(old_value);
      .                               }
      .                           }
 70,252 ( 0.01%)                  if let Err(error) = array.try_push((key, value)) {
      .                               let mut map: FxHashMap<K, V> = array.drain(..).collect();
      .                               let (key, value) = error.element();
      .                               map.insert(key, value);
 32,033 ( 0.01%)                      *self = SsoHashMap::Map(map);
      .                           }
 25,700 ( 0.01%)                  None
      .                       }
      .                       SsoHashMap::Map(map) => map.insert(key, value),
      .                   }
624,205 ( 0.13%)      }
      .           
      .               /// Removes a key from the map, returning the value at the key if the key
      .               /// was previously in the map.
      .               pub fn remove(&mut self, key: &K) -> Option<V> {
      .                   match self {
      .                       SsoHashMap::Array(array) => {
      .                           if let Some(index) = array.iter().position(|(k, _v)| k == key) {
      .                               Some(array.swap_remove(index).1)
-- line 261 ----------------------------------------
-- line 278 ----------------------------------------
      .                               None
      .                           }
      .                       }
      .                       SsoHashMap::Map(map) => map.remove_entry(key),
      .                   }
      .               }
      .           
      .               /// Returns a reference to the value corresponding to the key.
 39,086 ( 0.01%)      pub fn get(&self, key: &K) -> Option<&V> {
 78,172 ( 0.02%)          match self {
      .                       SsoHashMap::Array(array) => {
182,322 ( 0.04%)                  for (k, v) in array {
128,271 ( 0.03%)                      if k == key {
      .                                   return Some(v);
      .                               }
      .                           }
      .                           None
      .                       }
      .                       SsoHashMap::Map(map) => map.get(key),
      .                   }
 78,172 ( 0.02%)      }
      .           
      .               /// Returns a mutable reference to the value corresponding to the key.
      .               pub fn get_mut(&mut self, key: &K) -> Option<&mut V> {
      .                   match self {
      .                       SsoHashMap::Array(array) => {
      .                           for (k, v) in array {
      .                               if k == key {
      .                                   return Some(v);
-- line 306 ----------------------------------------
-- line 409 ----------------------------------------
      .           impl<K, V> IntoIterator for SsoHashMap<K, V> {
      .               type IntoIter = EitherIter<
      .                   <ArrayVec<(K, V), 8> as IntoIterator>::IntoIter,
      .                   <FxHashMap<K, V> as IntoIterator>::IntoIter,
      .               >;
      .               type Item = <Self::IntoIter as Iterator>::Item;
      .           
      .               fn into_iter(self) -> Self::IntoIter {
  1,230 ( 0.00%)          match self {
  7,380 ( 0.00%)              SsoHashMap::Array(array) => EitherIter::Left(array.into_iter()),
      .                       SsoHashMap::Map(map) => EitherIter::Right(map.into_iter()),
      .                   }
      .               }
      .           }
      .           
      .           /// adapts Item of array reference iterator to Item of hashmap reference iterator.
      .           #[inline(always)]
      .           fn adapt_array_ref_it<K, V>(pair: &(K, V)) -> (&K, &V) {
-- line 426 ----------------------------------------

 97,483 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sso/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs
--------------------------------------------------------------------------------
Ir               

-- line 176 ----------------------------------------
      .               }
      .               fn sess(self) -> Option<&'tcx Session> {
      .                   None
      .               }
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   None
      .               }
      .           
  5,604 ( 0.00%)      fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {
  1,868 ( 0.00%)          let tcx = self.tcx();
410,181 ( 0.09%)          DecodeContext {
 40,014 ( 0.01%)              opaque: opaque::Decoder::new(self.blob(), pos),
  1,868 ( 0.00%)              cdata: self.cdata(),
      .                       blob: self.blob(),
 10,804 ( 0.00%)              sess: self.sess().or(tcx.map(|tcx| tcx.sess)),
      .                       tcx,
      .                       last_source_file_index: 0,
      .                       lazy_state: LazyState::NoNode,
      .                       alloc_decoding_session: self
      .                           .cdata()
 30,591 ( 0.01%)                  .map(|cdata| cdata.cdata.alloc_decoding_state.new_decoding_session()),
      .                   }
  5,604 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob {
      .               #[inline]
      .               fn blob(self) -> &'a MetadataBlob {
      .                   self
      .               }
      .           }
-- line 206 ----------------------------------------
-- line 255 ----------------------------------------
      .               }
      .               #[inline]
      .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
      .                   Some(self.1)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<T> {
 38,151 ( 0.01%)      fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {
 23,734 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
106,988 ( 0.02%)          dcx.lazy_state = LazyState::NodeStart(self.position);
 52,103 ( 0.01%)          T::decode(&mut dcx)
 48,656 ( 0.01%)      }
      .           }
      .           
      .           impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<[T]> {
      .               fn decode<M: Metadata<'a, 'tcx>>(
      .                   self,
      .                   metadata: M,
      .               ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {
     70 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
     20 ( 0.00%)          dcx.lazy_state = LazyState::NodeStart(self.position);
  7,165 ( 0.00%)          (0..self.meta).map(move |_| T::decode(&mut dcx))
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> DecodeContext<'a, 'tcx> {
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   debug_assert!(self.tcx.is_some(), "missing TyCtxt in DecodeContext");
      .                   self.tcx.unwrap()
-- line 285 ----------------------------------------
-- line 292 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn cdata(&self) -> CrateMetadataRef<'a> {
      .                   debug_assert!(self.cdata.is_some(), "missing CrateMetadata in DecodeContext");
      .                   self.cdata.unwrap()
      .               }
      .           
      .               fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {
 93,190 ( 0.02%)          if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }
      .               }
      .           
 35,591 ( 0.01%)      fn read_lazy_with_meta<T: ?Sized + LazyMeta>(&mut self, meta: T::Meta) -> Lazy<T> {
      .                   let distance = self.read_usize();
 34,089 ( 0.01%)          let position = match self.lazy_state {
      .                       LazyState::NoNode => bug!("read_lazy_with_meta: outside of a metadata node"),
  5,068 ( 0.00%)              LazyState::NodeStart(start) => {
      .                           let start = start.get();
 10,136 ( 0.00%)                  assert!(distance <= start);
      .                           start - distance
      .                       }
 11,331 ( 0.00%)              LazyState::Previous(last_pos) => last_pos.get() + distance,
      .                   };
 17,690 ( 0.00%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(position).unwrap());
      .                   Lazy::from_position_and_meta(NonZeroUsize::new(position).unwrap(), meta)
 35,591 ( 0.01%)      }
      .           
      .               #[inline]
      .               pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {
      .                   self.opaque.read_raw_bytes(len)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {
-- line 324 ----------------------------------------
-- line 326 ----------------------------------------
      .           
      .               #[inline]
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      .                   self.tcx.expect("missing TyCtxt in DecodeContext")
      .               }
      .           
      .               #[inline]
      .               fn peek_byte(&self) -> u8 {
 77,935 ( 0.02%)          self.opaque.data[self.opaque.position()]
      .               }
      .           
      .               #[inline]
      .               fn position(&self) -> usize {
      .                   self.opaque.position()
      .               }
      .           
 60,550 ( 0.01%)      fn cached_ty_for_shorthand<F>(&mut self, shorthand: usize, or_insert_with: F) -> Ty<'tcx>
      .               where
      .                   F: FnOnce(&mut Self) -> Ty<'tcx>,
      .               {
  8,650 ( 0.00%)          let tcx = self.tcx();
      .           
  8,650 ( 0.00%)          let key = ty::CReaderCacheKey { cnum: Some(self.cdata().cnum), pos: shorthand };
      .           
 23,668 ( 0.00%)          if let Some(&ty) = tcx.ty_rcache.borrow().get(&key) {
      .                       return ty;
      .                   }
      .           
  2,733 ( 0.00%)          let ty = or_insert_with(self);
      .                   tcx.ty_rcache.borrow_mut().insert(key, ty);
      .                   ty
 77,850 ( 0.02%)      }
      .           
      .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
      .               where
      .                   F: FnOnce(&mut Self) -> R,
      .               {
      .                   let new_opaque = opaque::Decoder::new(self.opaque.data, pos);
      .                   let old_opaque = mem::replace(&mut self.opaque, new_opaque);
      .                   let old_state = mem::replace(&mut self.lazy_state, LazyState::NoNode);
      .                   let r = f(self);
 14,640 ( 0.00%)          self.opaque = old_opaque;
  2,928 ( 0.00%)          self.lazy_state = old_state;
      .                   r
      .               }
      .           
      .               fn decode_alloc_id(&mut self) -> rustc_middle::mir::interpret::AllocId {
      .                   if let Some(alloc_decoding_session) = self.alloc_decoding_session {
      .                       alloc_decoding_session.decode_alloc_id(self)
      .                   } else {
      .                       bug!("Attempting to decode interpret::AllocId without CrateMetadata")
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for CrateNum {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> CrateNum {
 49,587 ( 0.01%)          let cnum = CrateNum::from_u32(d.read_u32());
      .                   d.map_encoded_cnum_to_current(cnum)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefIndex {
     77 ( 0.00%)      fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefIndex {
103,187 ( 0.02%)          DefIndex::from_u32(d.read_u32())
    154 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnIndex {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> ExpnIndex {
      .                   ExpnIndex::from_u32(d.read_u32())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {
 69,048 ( 0.01%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {
 17,262 ( 0.00%)          let cdata = decoder.cdata();
 17,262 ( 0.00%)          let sess = decoder.sess.unwrap();
 34,524 ( 0.01%)          let cname = cdata.root.name;
      .                   rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {
      .                       debug!("SpecializedDecoder<SyntaxContext>: decoding {}", id);
    380 ( 0.00%)              cdata
      .                           .root
      .                           .syntax_contexts
      .                           .get(cdata, id)
      .                           .unwrap_or_else(|| panic!("Missing SyntaxContext {:?} for crate {:?}", id, cname))
      .                           .decode((cdata, sess))
      .                   })
 86,310 ( 0.02%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {
  3,122 ( 0.00%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {
    446 ( 0.00%)          let local_cdata = decoder.cdata();
    446 ( 0.00%)          let sess = decoder.sess.unwrap();
      .           
      .                   let cnum = CrateNum::decode(decoder);
      .                   let index = u32::decode(decoder);
      .           
      .                   let expn_id = rustc_span::hygiene::decode_expn_id(cnum, index, |expn_id| {
      .                       let ExpnId { krate: cnum, local_id: index } = expn_id;
      .                       // Lookup local `ExpnData`s in our own crate data. Foreign `ExpnData`s
      .                       // are stored in the owning crate, to avoid duplication.
      .                       debug_assert_ne!(cnum, LOCAL_CRATE);
    107 ( 0.00%)              let crate_data = if cnum == local_cdata.cnum {
      .                           local_cdata
      .                       } else {
      .                           local_cdata.cstore.get_crate_data(cnum)
      .                       };
    535 ( 0.00%)              let expn_data = crate_data
      .                           .root
      .                           .expn_data
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
    535 ( 0.00%)              let expn_hash = crate_data
      .                           .root
      .                           .expn_hashes
      .                           .get(crate_data, index)
      .                           .unwrap()
      .                           .decode((crate_data, sess));
  1,070 ( 0.00%)              (expn_data, expn_hash)
      .                   });
      .                   expn_id
  3,568 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {
135,816 ( 0.03%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Span {
 16,977 ( 0.00%)          let ctxt = SyntaxContext::decode(decoder);
      .                   let tag = u8::decode(decoder);
      .           
 33,954 ( 0.01%)          if tag == TAG_PARTIAL_SPAN {
      .                       return DUMMY_SP.with_ctxt(ctxt);
      .                   }
      .           
      .                   debug_assert!(tag == TAG_VALID_SPAN_LOCAL || tag == TAG_VALID_SPAN_FOREIGN);
      .           
      .                   let lo = BytePos::decode(decoder);
      .                   let len = BytePos::decode(decoder);
      .                   let hi = lo + len;
      .           
 50,901 ( 0.01%)          let Some(sess) = decoder.sess else {
      .                       bug!("Cannot decode Span without Session.")
      .                   };
      .           
      .                   // There are two possibilities here:
      .                   // 1. This is a 'local span', which is located inside a `SourceFile`
      .                   // that came from this crate. In this case, we use the source map data
      .                   // encoded in this crate. This branch should be taken nearly all of the time.
      .                   // 2. This is a 'foreign span', which is located inside a `SourceFile`
-- line 476 ----------------------------------------
-- line 492 ----------------------------------------
      .                   // a transitive dependency.
      .                   //
      .                   // When we encode a foreign span, we adjust its 'lo' and 'high' values
      .                   // to be based on the *foreign* crate (e.g. crate C), not the crate
      .                   // we are writing metadata for (e.g. crate B). This allows us to
      .                   // treat the 'local' and 'foreign' cases almost identically during deserialization:
      .                   // we can call `imported_source_files` for the proper crate, and binary search
      .                   // through the returned slice using our span.
 42,509 ( 0.01%)          let imported_source_files = if tag == TAG_VALID_SPAN_LOCAL {
      .                       decoder.cdata().imported_source_files(sess)
      .                   } else {
      .                       // When we encode a proc-macro crate, all `Span`s should be encoded
      .                       // with `TAG_VALID_SPAN_LOCAL`
      6 ( 0.00%)              if decoder.cdata().root.is_proc_macro_crate() {
      .                           // Decode `CrateNum` as u32 - using `CrateNum::decode` will ICE
      .                           // since we don't have `cnum_map` populated.
      .                           let cnum = u32::decode(decoder);
      .                           panic!(
      .                               "Decoding of crate {:?} tried to access proc-macro dep {:?}",
      .                               decoder.cdata().root.name,
      .                               cnum
      .                           );
-- line 513 ----------------------------------------
-- line 518 ----------------------------------------
      .                           "SpecializedDecoder<Span>::specialized_decode: loading source files from cnum {:?}",
      .                           cnum
      .                       );
      .           
      .                       // Decoding 'foreign' spans should be rare enough that it's
      .                       // not worth it to maintain a per-CrateNum cache for `last_source_file_index`.
      .                       // We just set it to 0, to ensure that we don't try to access something out
      .                       // of bounds for our initial 'guess'
     12 ( 0.00%)              decoder.last_source_file_index = 0;
      .           
      6 ( 0.00%)              let foreign_data = decoder.cdata().cstore.get_crate_data(cnum);
      .                       foreign_data.imported_source_files(sess)
      .                   };
      .           
      .                   let source_file = {
      .                       // Optimize for the case that most spans within a translated item
      .                       // originate from the same source_file.
 50,901 ( 0.01%)              let last_source_file = &imported_source_files[decoder.last_source_file_index];
      .           
 67,756 ( 0.01%)              if lo >= last_source_file.original_start_pos && lo <= last_source_file.original_end_pos
      .                       {
      .                           last_source_file
      .                       } else {
      .                           let index = imported_source_files
      .                               .binary_search_by_key(&lo, |source_file| source_file.original_start_pos)
 17,148 ( 0.00%)                      .unwrap_or_else(|index| index - 1);
      .           
      .                           // Don't try to cache the index for foreign spans,
      .                           // as this would require a map from CrateNums to indices
  8,575 ( 0.00%)                  if tag == TAG_VALID_SPAN_LOCAL {
  8,569 ( 0.00%)                      decoder.last_source_file_index = index;
      .                           }
 17,150 ( 0.00%)                  &imported_source_files[index]
      .                       }
      .                   };
      .           
      .                   // Make sure our binary search above is correct.
      .                   debug_assert!(
      .                       lo >= source_file.original_start_pos && lo <= source_file.original_end_pos,
      .                       "Bad binary search: lo={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       lo,
-- line 558 ----------------------------------------
-- line 565 ----------------------------------------
      .                       hi >= source_file.original_start_pos && hi <= source_file.original_end_pos,
      .                       "Bad binary search: hi={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
      .                       hi,
      .                       source_file.original_start_pos,
      .                       source_file.original_end_pos
      .                   );
      .           
      .                   let lo =
 67,868 ( 0.01%)              (lo + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .                   let hi =
      .                       (hi + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
      .           
      .                   // Do not try to decode parent for foreign spans.
      .                   Span::new(lo, hi, ctxt, None)
152,793 ( 0.03%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [thir::abstract_const::Node<'tcx>] {
      .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
-- line 587 ----------------------------------------
-- line 590 ----------------------------------------
      .                   ty::codec::RefDecodable::decode(d)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<T>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
  8,798 ( 0.00%)          decoder.read_lazy_with_meta(())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<[T]>
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 14,653 ( 0.00%)          if len == 0 { Lazy::empty() } else { decoder.read_lazy_with_meta(len) }
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, I: Idx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
      .               for Lazy<Table<I, T>>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
      .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
      .                   let len = decoder.read_usize();
 13,182 ( 0.00%)          decoder.read_lazy_with_meta(len)
      .               }
      .           }
      .           
      .           implement_ty_decoder!(DecodeContext<'a, 'tcx>);
      .           
      .           impl<'tcx> MetadataBlob {
      .               crate fn new(metadata_ref: MetadataRef) -> MetadataBlob {
      .                   MetadataBlob(Lrc::new(metadata_ref))
-- line 626 ----------------------------------------
-- line 630 ----------------------------------------
      .                   self.blob().starts_with(METADATA_HEADER)
      .               }
      .           
      .               crate fn get_rustc_version(&self) -> String {
      .                   Lazy::<String>::from_position(NonZeroUsize::new(METADATA_HEADER.len() + 4).unwrap())
      .                       .decode(self)
      .               }
      .           
    234 ( 0.00%)      crate fn get_root(&self) -> CrateRoot<'tcx> {
     78 ( 0.00%)          let slice = &self.blob()[..];
      .                   let offset = METADATA_HEADER.len();
    390 ( 0.00%)          let pos = (((slice[offset + 0] as u32) << 24)
    156 ( 0.00%)              | ((slice[offset + 1] as u32) << 16)
    312 ( 0.00%)              | ((slice[offset + 2] as u32) << 8)
    234 ( 0.00%)              | ((slice[offset + 3] as u32) << 0)) as usize;
      .                   Lazy::<CrateRoot<'tcx>>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)
    390 ( 0.00%)      }
      .           
      .               crate fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {
      .                   let root = self.get_root();
      .                   writeln!(out, "Crate info:")?;
      .                   writeln!(out, "name {}{}", root.name, root.extra_filename)?;
      .                   writeln!(out, "hash {} stable_crate_id {:?}", root.hash, root.stable_crate_id)?;
      .                   writeln!(out, "proc_macro {:?}", root.proc_macro_data.is_some())?;
      .                   writeln!(out, "=External Dependencies=")?;
-- line 654 ----------------------------------------
-- line 666 ----------------------------------------
      .                   }
      .                   write!(out, "\n")?;
      .                   Ok(())
      .               }
      .           }
      .           
      .           impl CrateRoot<'_> {
      .               crate fn is_proc_macro_crate(&self) -> bool {
     52 ( 0.00%)          self.proc_macro_data.is_some()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
      8 ( 0.00%)          self.name
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
     26 ( 0.00%)          self.hash
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
     52 ( 0.00%)          self.stable_crate_id
      .               }
      .           
      .               crate fn triple(&self) -> &TargetTriple {
      .                   &self.triple
      .               }
      .           
      .               crate fn decode_crate_deps<'a>(
      .                   &self,
      .                   metadata: &'a MetadataBlob,
      .               ) -> impl ExactSizeIterator<Item = CrateDep> + Captures<'a> {
     52 ( 0.00%)          self.crate_deps.decode(metadata)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> CrateMetadataRef<'a> {
      .               fn raw_proc_macro(self, id: DefIndex) -> &'a ProcMacro {
      .                   // DefIndex's in root.proc_macro_data have a one-to-one correspondence
      .                   // with items in 'raw_proc_macros'.
      .                   let pos = self
-- line 705 ----------------------------------------
-- line 709 ----------------------------------------
      .                       .unwrap()
      .                       .macros
      .                       .decode(self)
      .                       .position(|i| i == id)
      .                       .unwrap();
      .                   &self.raw_proc_macros.unwrap()[pos]
      .               }
      .           
 51,359 ( 0.01%)      fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {
 37,742 ( 0.01%)          let name = self.def_key(item_index).disambiguated_data.data.get_opt_name()?;
 30,660 ( 0.01%)          let span = match self.root.tables.ident_span.get(self, item_index) {
      .                       Some(lazy_span) => lazy_span.decode((self, sess)),
      .                       None => {
      .                           // FIXME: this weird case of a name with no span is specific to `extern crate`
      .                           // items, which are supposed to be treated like `use` items and only be encoded
      .                           // to metadata as `Export`s, return `None` because that's what all the callers
      .                           // expect in this case.
     90 ( 0.00%)                  assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);
      .                           return None;
      .                       }
      .                   };
      .                   Some(Ident::new(name, span))
 65,522 ( 0.01%)      }
      .           
     75 ( 0.00%)      fn item_ident(self, item_index: DefIndex, sess: &Session) -> Ident {
  3,701 ( 0.00%)          self.opt_item_ident(item_index, sess).expect("no encoded ident for item")
    150 ( 0.00%)      }
      .           
      .               fn maybe_kind(self, item_id: DefIndex) -> Option<EntryKind> {
  8,930 ( 0.00%)          self.root.tables.kind.get(self, item_id).map(|k| k.decode(self))
      .               }
      .           
 35,720 ( 0.01%)      fn kind(self, item_id: DefIndex) -> EntryKind {
      .                   self.maybe_kind(item_id).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
 26,790 ( 0.01%)      }
      .           
 29,022 ( 0.01%)      fn def_kind(self, item_id: DefIndex) -> DefKind {
 18,174 ( 0.00%)          self.root.tables.def_kind.get(self, item_id).map(|k| k.decode(self)).unwrap_or_else(|| {
      .                       bug!(
      .                           "CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}",
      .                           item_id,
      .                           self.root.name,
      .                           self.cnum,
      .                       )
      .                   })
 16,584 ( 0.00%)      }
      .           
    675 ( 0.00%)      fn get_span(self, index: DefIndex, sess: &Session) -> Span {
  9,069 ( 0.00%)          self.root
      .                       .tables
      .                       .span
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing span for {:?}", index))
      .                       .decode((self, sess))
    375 ( 0.00%)      }
      .           
      .               fn load_proc_macro(self, id: DefIndex, sess: &Session) -> SyntaxExtension {
      .                   let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {
      .                       ProcMacro::CustomDerive { trait_name, attributes, client } => {
      .                           let helper_attrs =
      .                               attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();
      .                           (
      .                               trait_name,
-- line 778 ----------------------------------------
-- line 795 ----------------------------------------
      .                       self.get_span(id, sess),
      .                       helper_attrs,
      .                       self.root.edition,
      .                       Symbol::intern(name),
      .                       &attrs,
      .                   )
      .               }
      .           
    546 ( 0.00%)      fn get_trait_def(self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {
    168 ( 0.00%)          match self.kind(item_id) {
     42 ( 0.00%)              EntryKind::Trait(data) => {
    252 ( 0.00%)                  let data = data.decode((self, sess));
    672 ( 0.00%)                  ty::TraitDef::new(
      .                               self.local_def_id(item_id),
     84 ( 0.00%)                      data.unsafety,
     84 ( 0.00%)                      data.paren_sugar,
     84 ( 0.00%)                      data.has_auto_impl,
     84 ( 0.00%)                      data.is_marker,
     42 ( 0.00%)                      data.skip_array_during_method_dispatch,
     42 ( 0.00%)                      data.specialization_kind,
    168 ( 0.00%)                      self.def_path_hash(item_id),
     42 ( 0.00%)                      data.must_implement_one_of,
      .                           )
      .                       }
      .                       EntryKind::TraitAlias => ty::TraitDef::new(
      .                           self.local_def_id(item_id),
      .                           hir::Unsafety::Normal,
      .                           false,
      .                           false,
      .                           false,
      .                           false,
      .                           ty::trait_def::TraitSpecializationKind::None,
      .                           self.def_path_hash(item_id),
      .                           None,
      .                       ),
      .                       _ => bug!("def-index does not refer to trait or trait alias"),
      .                   }
    378 ( 0.00%)      }
      .           
    252 ( 0.00%)      fn get_variant(
      .                   self,
      .                   kind: &EntryKind,
      .                   index: DefIndex,
      .                   parent_did: DefId,
      .                   sess: &Session,
      .               ) -> ty::VariantDef {
    112 ( 0.00%)          let data = match kind {
      .                       EntryKind::Variant(data) | EntryKind::Struct(data, _) | EntryKind::Union(data, _) => {
    140 ( 0.00%)                  data.decode(self)
      .                       }
      .                       _ => bug!(),
      .                   };
      .           
     98 ( 0.00%)          let adt_kind = match kind {
      .                       EntryKind::Variant(_) => ty::AdtKind::Enum,
      .                       EntryKind::Struct(..) => ty::AdtKind::Struct,
      .                       EntryKind::Union(..) => ty::AdtKind::Union,
      .                       _ => bug!(),
      .                   };
      .           
      .                   let variant_did =
      .                       if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };
     56 ( 0.00%)          let ctor_did = data.ctor.map(|index| self.local_def_id(index));
      .           
    616 ( 0.00%)          ty::VariantDef::new(
      .                       self.item_ident(index, sess).name,
      .                       variant_did,
      .                       ctor_did,
    112 ( 0.00%)              data.discr,
    168 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, index)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
      .                           .map(|index| ty::FieldDef {
     35 ( 0.00%)                      did: self.local_def_id(index),
     70 ( 0.00%)                      name: self.item_ident(index, sess).name,
     70 ( 0.00%)                      vis: self.get_visibility(index),
      .                           })
      .                           .collect(),
      .                       data.ctor_kind,
      .                       adt_kind,
      .                       parent_did,
      .                       false,
     28 ( 0.00%)              data.is_non_exhaustive,
      .                   )
    252 ( 0.00%)      }
      .           
    360 ( 0.00%)      fn get_adt_def(self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {
     96 ( 0.00%)          let kind = self.kind(item_id);
     48 ( 0.00%)          let did = self.local_def_id(item_id);
      .           
    114 ( 0.00%)          let (adt_kind, repr) = match kind {
      .                       EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),
      .                       EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),
      .                       EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),
      .                       _ => bug!("get_adt_def called on a non-ADT {:?}", did),
      .                   };
      .           
      .                   let variants = if let ty::AdtKind::Enum = adt_kind {
     15 ( 0.00%)              self.root
      .                           .tables
      .                           .children
      .                           .get(self, item_id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
    119 ( 0.00%)                  .map(|index| self.get_variant(&self.kind(index), index, did, tcx.sess))
      .                           .collect()
      .                   } else {
    168 ( 0.00%)              std::iter::once(self.get_variant(&kind, item_id, did, tcx.sess)).collect()
      .                   };
      .           
    351 ( 0.00%)          tcx.alloc_adt_def(did, adt_kind, variants, repr)
    168 ( 0.00%)      }
      .           
      .               fn get_explicit_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
  1,265 ( 0.00%)          self.root.tables.explicit_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_inferred_outlives(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
  1,265 ( 0.00%)          self.root
      .                       .tables
      .                       .inferred_outlives
      .                       .get(self, item_id)
     24 ( 0.00%)              .map(|predicates| tcx.arena.alloc_from_iter(predicates.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_super_predicates(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> ty::GenericPredicates<'tcx> {
    140 ( 0.00%)          self.root.tables.super_predicates.get(self, item_id).unwrap().decode((self, tcx))
      .               }
      .           
      .               fn get_explicit_item_bounds(
      .                   self,
      .                   item_id: DefIndex,
      .                   tcx: TyCtxt<'tcx>,
      .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
     20 ( 0.00%)          self.root
      .                       .tables
      .                       .explicit_item_bounds
      .                       .get(self, item_id)
     16 ( 0.00%)              .map(|bounds| tcx.arena.alloc_from_iter(bounds.decode((self, tcx))))
      .                       .unwrap_or_default()
      .               }
      .           
      .               fn get_generics(self, item_id: DefIndex, sess: &Session) -> ty::Generics {
  3,787 ( 0.00%)          self.root.tables.generics.get(self, item_id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_type(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
  7,480 ( 0.00%)          self.root
      .                       .tables
      .                       .ty
      .                       .get(self, id)
      .                       .unwrap_or_else(|| panic!("Not a type: {:?}", id))
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_stability(self, id: DefIndex) -> Option<attr::Stability> {
    185 ( 0.00%)          self.root.tables.stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_const_stability(self, id: DefIndex) -> Option<attr::ConstStability> {
     15 ( 0.00%)          self.root.tables.const_stability.get(self, id).map(|stab| stab.decode(self))
      .               }
      .           
      .               fn get_deprecation(self, id: DefIndex) -> Option<attr::Deprecation> {
    310 ( 0.00%)          self.root.tables.deprecation.get(self, id).map(|depr| depr.decode(self))
      .               }
      .           
     12 ( 0.00%)      fn get_visibility(self, id: DefIndex) -> ty::Visibility {
 10,620 ( 0.00%)          self.root.tables.visibility.get(self, id).unwrap().decode(self)
      8 ( 0.00%)      }
      .           
      .               fn get_impl_data(self, id: DefIndex) -> ImplData {
 19,728 ( 0.00%)          match self.kind(id) {
 16,440 ( 0.00%)              EntryKind::Impl(data) => data.decode(self),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_parent_impl(self, id: DefIndex) -> Option<DefId> {
  9,465 ( 0.00%)          self.get_impl_data(id).parent_impl
      .               }
      .           
      .               fn get_impl_polarity(self, id: DefIndex) -> ty::ImplPolarity {
    126 ( 0.00%)          self.get_impl_data(id).polarity
      .               }
      .           
      .               fn get_impl_defaultness(self, id: DefIndex) -> hir::Defaultness {
      7 ( 0.00%)          self.get_impl_data(id).defaultness
      .               }
      .           
      .               fn get_impl_constness(self, id: DefIndex) -> hir::Constness {
      .                   self.get_impl_data(id).constness
      .               }
      .           
      .               fn get_trait_item_def_id(self, id: DefIndex) -> Option<DefId> {
  3,365 ( 0.00%)          self.root.tables.trait_item_def_id.get(self, id).map(|d| d.decode(self))
      .               }
      .           
      .               fn get_coerce_unsized_info(self, id: DefIndex) -> Option<ty::adjustment::CoerceUnsizedInfo> {
      .                   self.get_impl_data(id).coerce_unsized_info
      .               }
      .           
      .               fn get_impl_trait(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {
 42,433 ( 0.01%)          self.root.tables.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))
      .               }
      .           
      .               fn get_expn_that_defined(self, id: DefIndex, sess: &Session) -> ExpnId {
  1,220 ( 0.00%)          self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))
      .               }
      .           
      .               fn get_const_param_default(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> rustc_middle::ty::Const<'tcx> {
      .                   self.root.tables.const_defaults.get(self, id).unwrap().decode((self, tcx))
-- line 1026 ----------------------------------------
-- line 1028 ----------------------------------------
      .           
      .               /// Iterates over all the stability attributes in the given crate.
      .               fn get_lib_features(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {
      .                   tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))
      .               }
      .           
      .               /// Iterates over the language items in the given crate.
      .               fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {
     78 ( 0.00%)          tcx.arena.alloc_from_iter(
     52 ( 0.00%)              self.root
      .                           .lang_items
      .                           .decode(self)
    564 ( 0.00%)                  .map(|(def_index, index)| (self.local_def_id(def_index), index)),
      .                   )
      .               }
      .           
      .               /// Iterates over the diagnostic items in the given crate.
      .               fn get_diagnostic_items(self) -> DiagnosticItems {
      .                   let mut id_to_name = FxHashMap::default();
     52 ( 0.00%)          let name_to_id = self
      .                       .root
      .                       .diagnostic_items
      .                       .decode(self)
      .                       .map(|(name, def_index)| {
    130 ( 0.00%)                  let id = self.local_def_id(def_index);
    130 ( 0.00%)                  id_to_name.insert(id, name);
      .                           (name, id)
      .                       })
      .                       .collect();
    234 ( 0.00%)          DiagnosticItems { id_to_name, name_to_id }
      .               }
      .           
      .               /// Iterates over all named children of the given module,
      .               /// including both proper items and reexports.
      .               /// Module here is understood in name resolution sense - it can be a `mod` item,
      .               /// or a crate root, or an enum, or a trait.
      .               fn for_each_module_child(
      .                   self,
      .                   id: DefIndex,
      .                   mut callback: impl FnMut(ModChild),
      .                   sess: &Session,
      .               ) {
    216 ( 0.00%)          if let Some(data) = &self.root.proc_macro_data {
      .                       // If we are loading as a proc macro, we want to return
      .                       // the view of this crate as a proc macro crate.
      .                       if id == CRATE_DEF_INDEX {
      .                           for def_index in data.macros.decode(self) {
      .                               let raw_macro = self.raw_proc_macro(def_index);
      .                               let res = Res::Def(
      .                                   DefKind::Macro(macro_kind(raw_macro)),
      .                                   self.local_def_id(def_index),
-- line 1078 ----------------------------------------
-- line 1085 ----------------------------------------
      .                                   span: ident.span,
      .                               });
      .                           }
      .                       }
      .                       return;
      .                   }
      .           
      .                   // Iterate over all children.
    432 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    864 ( 0.00%)              for child_index in children.decode((self, sess)) {
 23,778 ( 0.01%)                  if let Some(ident) = self.opt_item_ident(child_index, sess) {
 10,875 ( 0.00%)                      let kind = self.def_kind(child_index);
  7,250 ( 0.00%)                      if matches!(kind, DefKind::Macro(..)) {
      .                                   // FIXME: Macros are currently encoded twice, once as items and once as
      .                                   // reexports. We ignore the items here and only use the reexports.
      .                                   continue;
      .                               }
      .                               let def_id = self.local_def_id(child_index);
      .                               let res = Res::Def(kind, def_id);
      .                               let vis = self.get_visibility(child_index);
      .                               let span = self.get_span(child_index, sess);
      .           
      .                               callback(ModChild { ident, res, vis, span });
      .           
      .                               // For non-re-export structs and variants add their constructors to children.
      .                               // Re-export lists automatically contain constructors when necessary.
 14,454 ( 0.00%)                      match kind {
      .                                   DefKind::Struct => {
     17 ( 0.00%)                              if let Some((ctor_def_id, ctor_kind)) =
      .                                           self.get_ctor_def_id_and_kind(child_index)
      .                                       {
      .                                           let ctor_res =
      .                                               Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
      .                                           let vis = self.get_visibility(ctor_def_id.index);
      .                                           callback(ModChild { ident, res: ctor_res, vis, span });
      .                                       }
      .                                   }
      .                                   DefKind::Variant => {
      .                                       // Braced variants, unlike structs, generate unusable names in
      .                                       // value namespace, they are reserved for possible future use.
      .                                       // It's ok to use the variant's id as a ctor id since an
      .                                       // error will be reported on any use of such resolution anyway.
     15 ( 0.00%)                              let (ctor_def_id, ctor_kind) = self
      .                                           .get_ctor_def_id_and_kind(child_index)
      .                                           .unwrap_or((def_id, CtorKind::Fictive));
      .                                       let ctor_res =
      .                                           Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id);
      .                                       let mut vis = self.get_visibility(ctor_def_id.index);
      5 ( 0.00%)                              if ctor_def_id == def_id && vis.is_public() {
      .                                           // For non-exhaustive variants lower the constructor visibility to
      .                                           // within the crate. We only need this for fictive constructors,
      .                                           // for other constructors correct visibilities
      .                                           // were already encoded in metadata.
      .                                           let mut attrs = self.get_item_attrs(def_id.index, sess);
      .                                           if attrs.any(|item| item.has_name(sym::non_exhaustive)) {
      .                                               let crate_def_id = self.local_def_id(CRATE_DEF_INDEX);
      .                                               vis = ty::Visibility::Restricted(crate_def_id);
-- line 1141 ----------------------------------------
-- line 1144 ----------------------------------------
      .                                       callback(ModChild { ident, res: ctor_res, vis, span });
      .                                   }
      .                                   _ => {}
      .                               }
      .                           }
      .                       }
      .                   }
      .           
    556 ( 0.00%)          match self.kind(id) {
     30 ( 0.00%)              EntryKind::Mod(exports) => {
    628 ( 0.00%)                  for exp in exports.decode((self, sess)) {
      .                               callback(exp);
      .                           }
      .                       }
      .                       EntryKind::Enum(..) | EntryKind::Trait(..) => {}
      .                       _ => bug!("`for_each_module_child` is called on a non-module: {:?}", self.def_kind(id)),
      .                   }
      .               }
      .           
      .               fn is_ctfe_mir_available(self, id: DefIndex) -> bool {
    148 ( 0.00%)          self.root.tables.mir_for_ctfe.get(self, id).is_some()
      .               }
      .           
      .               fn is_item_mir_available(self, id: DefIndex) -> bool {
      .                   self.root.tables.mir.get(self, id).is_some()
      .               }
      .           
      .               fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {
  1,526 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::Mod(_) | EntryKind::Enum(_) | EntryKind::Trait(_) => {
      .                           self.get_expn_that_defined(id, sess)
      .                       }
      .                       _ => panic!("Expected module, found {:?}", self.local_def_id(id)),
      .                   }
      .               }
      .           
      .               fn get_optimized_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
-- line 1180 ----------------------------------------
-- line 1184 ----------------------------------------
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_optimized_mir: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_mir_for_ctfe(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
    185 ( 0.00%)          self.root
      .                       .tables
      .                       .mir_for_ctfe
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           bug!("get_mir_for_ctfe: missing MIR for `{:?}`", self.local_def_id(id))
      .                       })
      .                       .decode((self, tcx))
      .               }
      .           
      .               fn get_thir_abstract_const(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> Result<Option<&'tcx [thir::abstract_const::Node<'tcx>]>, ErrorReported> {
     15 ( 0.00%)          self.root
      .                       .tables
      .                       .thir_abstract_consts
      .                       .get(self, id)
      .                       .map_or(Ok(None), |v| Ok(Some(v.decode((self, tcx)))))
      .               }
      .           
      .               fn get_unused_generic_params(self, id: DefIndex) -> FiniteBitSet<u32> {
      .                   self.root
-- line 1215 ----------------------------------------
-- line 1242 ----------------------------------------
      .                           qualif,
      .                           _,
      .                       ) => qualif,
      .                       _ => bug!("mir_const_qualif: unexpected kind"),
      .                   }
      .               }
      .           
      .               fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {
    630 ( 0.00%)          match self.kind(id) {
    504 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).has_self,
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn get_associated_item_def_ids(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [DefId] {
    588 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    252 ( 0.00%)              tcx.arena.alloc_from_iter(
     84 ( 0.00%)                  children.decode((self, tcx.sess)).map(|child_index| self.local_def_id(child_index)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
      .               }
      .           
  6,720 ( 0.00%)      fn get_associated_item(self, id: DefIndex, sess: &Session) -> ty::AssocItem {
  3,920 ( 0.00%)          let def_key = self.def_key(id);
      .                   let parent = self.local_def_id(def_key.parent.unwrap());
      .                   let ident = self.item_ident(id, sess);
      .           
  4,040 ( 0.00%)          let (kind, container, has_self) = match self.kind(id) {
     12 ( 0.00%)              EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),
    503 ( 0.00%)              EntryKind::AssocFn(data) => {
      .                           let data = data.decode(self);
  3,521 ( 0.00%)                  (ty::AssocKind::Fn, data.container, data.has_self)
      .                       }
    108 ( 0.00%)              EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),
      .                       _ => bug!("cannot get associated-item of `{:?}`", def_key),
      .                   };
      .           
 10,080 ( 0.00%)          ty::AssocItem {
      .                       name: ident.name,
      .                       kind,
      .                       vis: self.get_visibility(id),
      .                       defaultness: container.defaultness(),
      .                       def_id: self.local_def_id(id),
      .                       trait_item_def_id: self.get_trait_item_def_id(id),
      .                       container: container.with_def_id(parent),
      .                       fn_has_self_parameter: has_self,
      .                   }
  5,040 ( 0.00%)      }
      .           
      .               fn get_item_variances(self, id: DefIndex) -> impl Iterator<Item = ty::Variance> + 'a {
     80 ( 0.00%)          self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self)
      .               }
      .           
      .               fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {
    539 ( 0.00%)          match self.kind(node_id) {
      .                       EntryKind::Struct(data, _) | EntryKind::Variant(data) => {
    232 ( 0.00%)                  let vdata = data.decode(self);
    146 ( 0.00%)                  vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))
      .                       }
      .                       _ => None,
      .                   }
    270 ( 0.00%)      }
      .           
    168 ( 0.00%)      fn get_item_attrs(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = ast::Attribute> + 'a {
    408 ( 0.00%)          self.root
      .                       .tables
      .                       .attributes
      .                       .get(self, id)
      .                       .unwrap_or_else(|| {
      .                           // Structure and variant constructors don't have any attributes encoded for them,
      .                           // but we assume that someone passing a constructor ID actually wants to look at
      .                           // the attributes on the corresponding struct or variant.
      .                           let def_key = self.def_key(id);
-- line 1320 ----------------------------------------
-- line 1322 ----------------------------------------
      .                           let parent_id = def_key.parent.expect("no parent for a constructor");
      .                           self.root
      .                               .tables
      .                               .attributes
      .                               .get(self, parent_id)
      .                               .expect("no encoded attributes for a structure or variant")
      .                       })
      .                       .decode((self, sess))
    126 ( 0.00%)      }
      .           
      .               fn get_struct_field_names(
      .                   self,
      .                   id: DefIndex,
      .                   sess: &'a Session,
      .               ) -> impl Iterator<Item = Spanned<Symbol>> + 'a {
    240 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
    750 ( 0.00%)              .map(move |index| respan(self.get_span(index, sess), self.item_ident(index, sess).name))
      .               }
      .           
      .               fn get_struct_field_visibilities(self, id: DefIndex) -> impl Iterator<Item = Visibility> + 'a {
     55 ( 0.00%)          self.root
      .                       .tables
      .                       .children
      .                       .get(self, id)
      .                       .unwrap_or_else(Lazy::empty)
      .                       .decode(self)
      4 ( 0.00%)              .map(move |field_index| self.get_visibility(field_index))
      .               }
      .           
      .               fn get_inherent_implementations_for_type(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   id: DefIndex,
      .               ) -> &'tcx [DefId] {
     24 ( 0.00%)          tcx.arena.alloc_from_iter(
     30 ( 0.00%)              self.root
      .                           .tables
      .                           .inherent_impls
      .                           .get(self, id)
      .                           .unwrap_or_else(Lazy::empty)
      .                           .decode(self)
    567 ( 0.00%)                  .map(|index| self.local_def_id(index)),
      .                   )
      .               }
      .           
      .               fn get_traits(self) -> impl Iterator<Item = DefId> + 'a {
      .                   self.root.traits.decode(self).map(move |index| self.local_def_id(index))
      .               }
      .           
      .               fn get_trait_impls(self) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + 'a {
-- line 1376 ----------------------------------------
-- line 1380 ----------------------------------------
      .                           index: *trait_index,
      .                       };
      .                       impls.decode(self).map(move |(impl_index, simplified_self_ty)| {
      .                           (trait_def_id, self.local_def_id(impl_index), simplified_self_ty)
      .                       })
      .                   })
      .               }
      .           
 12,168 ( 0.00%)      fn get_implementations_of_trait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_def_id: DefId,
      .               ) -> &'tcx [(DefId, Option<SimplifiedType>)] {
  1,352 ( 0.00%)          if self.trait_impls.is_empty() {
      .                       return &[];
      .                   }
      .           
      .                   // Do a reverse lookup beforehand to avoid touching the crate_num
      .                   // hash map in the loop below.
  1,454 ( 0.00%)          let key = match self.reverse_translate_def_id(trait_def_id) {
      .                       Some(def_id) => (def_id.krate.as_u32(), def_id.index),
      .                       None => return &[],
      .                   };
      .           
      .                   if let Some(impls) = self.trait_impls.get(&key) {
    788 ( 0.00%)              tcx.arena.alloc_from_iter(
    394 ( 0.00%)                  impls
      .                               .decode(self)
  6,897 ( 0.00%)                      .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty)),
      .                       )
      .                   } else {
      .                       &[]
      .                   }
 10,816 ( 0.00%)      }
      .           
      .               fn get_trait_of_item(self, id: DefIndex) -> Option<DefId> {
    244 ( 0.00%)          let def_key = self.def_key(id);
    305 ( 0.00%)          match def_key.disambiguated_data.data {
      .                       DefPathData::TypeNs(..) | DefPathData::ValueNs(..) => (),
      .                       // Not an associated item
      .                       _ => return None,
      .                   }
    234 ( 0.00%)          def_key.parent.and_then(|parent_index| match self.kind(parent_index) {
      .                       EntryKind::Trait(_) | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn get_native_libraries(self, sess: &'a Session) -> impl Iterator<Item = NativeLib> + 'a {
     52 ( 0.00%)          self.root.native_libraries.decode((self, sess))
      .               }
      .           
      .               fn get_proc_macro_quoted_span(self, index: usize, sess: &Session) -> Span {
      .                   self.root
      .                       .tables
      .                       .proc_macro_quoted_spans
      .                       .get(self, index)
      .                       .unwrap_or_else(|| panic!("Missing proc macro quoted span: {:?}", index))
-- line 1437 ----------------------------------------
-- line 1450 ----------------------------------------
      .                       self.root.dylib_dependency_formats.decode(self).enumerate().flat_map(|(i, link)| {
      .                           let cnum = CrateNum::new(i + 1);
      .                           link.map(|link| (self.cnum_map[cnum], link))
      .                       }),
      .                   )
      .               }
      .           
      .               fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {
    130 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))
      .               }
      .           
      .               fn get_fn_param_names(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {
      .                   let param_names = match self.kind(id) {
      .                       EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,
      .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,
      .                       _ => Lazy::empty(),
      .                   };
-- line 1466 ----------------------------------------
-- line 1479 ----------------------------------------
      .                       EntryKind::AnonConst(_, data)
      .                       | EntryKind::Const(_, data)
      .                       | EntryKind::AssocConst(_, _, data) => data.decode(self).0,
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {
     48 ( 0.00%)          match self.kind(id) {
      8 ( 0.00%)              EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),
      .                       _ => bug!(),
      .                   }
      .               }
      .           
      .               // This replicates some of the logic of the crate-local `is_const_fn_raw` query, because we
      .               // don't serialize constness for tuple variant and tuple struct constructors.
      .               fn is_const_fn_raw(self, id: DefIndex) -> bool {
     54 ( 0.00%)          let constness = match self.kind(id) {
     10 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).fn_data.constness,
      6 ( 0.00%)              EntryKind::Fn(data) => data.decode(self).constness,
      .                       EntryKind::ForeignFn(data) => data.decode(self).constness,
      .                       EntryKind::Variant(..) | EntryKind::Struct(..) => hir::Constness::Const,
      .                       _ => hir::Constness::NotConst,
      .                   };
      .                   constness == hir::Constness::Const
      .               }
      .           
      .               fn asyncness(self, id: DefIndex) -> hir::IsAsync {
-- line 1506 ----------------------------------------
-- line 1517 ----------------------------------------
      .                       EntryKind::ForeignImmStatic | EntryKind::ForeignMutStatic | EntryKind::ForeignFn(_) => {
      .                           true
      .                       }
      .                       _ => false,
      .                   }
      .               }
      .           
      .               fn static_mutability(self, id: DefIndex) -> Option<hir::Mutability> {
    396 ( 0.00%)          match self.kind(id) {
      .                       EntryKind::ImmStatic | EntryKind::ForeignImmStatic => Some(hir::Mutability::Not),
      .                       EntryKind::MutStatic | EntryKind::ForeignMutStatic => Some(hir::Mutability::Mut),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn generator_kind(self, id: DefIndex) -> Option<hir::GeneratorKind> {
      .                   match self.kind(id) {
      .                       EntryKind::Generator(data) => Some(data),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               fn fn_sig(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {
    220 ( 0.00%)          self.root.tables.fn_sig.get(self, id).unwrap().decode((self, tcx))
      .               }
      .           
      .               #[inline]
 41,538 ( 0.01%)      fn def_key(self, index: DefIndex) -> DefKey {
 11,868 ( 0.00%)          *self
      .                       .def_key_cache
      .                       .lock()
      .                       .entry(index)
 23,285 ( 0.00%)              .or_insert_with(|| self.root.tables.def_keys.get(self, index).unwrap().decode(self))
 47,472 ( 0.01%)      }
      .           
      .               // Returns the path leading to the thing with this `id`.
      .               fn def_path(self, id: DefIndex) -> DefPath {
      .                   debug!("def_path(cnum={:?}, id={:?})", self.cnum, id);
      .                   DefPath::make(self.cnum, id, |parent| self.def_key(parent))
      .               }
      .           
      .               fn def_path_hash_unlocked(
      .                   self,
      .                   index: DefIndex,
      .                   def_path_hashes: &mut FxHashMap<DefIndex, DefPathHash>,
      .               ) -> DefPathHash {
  3,810 ( 0.00%)          *def_path_hashes.entry(index).or_insert_with(|| {
    535 ( 0.00%)              self.root.tables.def_path_hashes.get(self, index).unwrap().decode(self)
      .                   })
      .               }
      .           
      .               #[inline]
 13,335 ( 0.00%)      fn def_path_hash(self, index: DefIndex) -> DefPathHash {
      .                   let mut def_path_hashes = self.def_path_hash_cache.lock();
      .                   self.def_path_hash_unlocked(index, &mut def_path_hashes)
 15,240 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn def_path_hash_to_def_index(self, hash: DefPathHash) -> DefIndex {
      .                   self.def_path_hash_map.def_path_hash_to_def_index(&hash)
      .               }
      .           
      .               fn expn_hash_to_expn_id(self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {
      .                   debug_assert_eq!(ExpnId::from_hash(hash), None);
-- line 1580 ----------------------------------------
-- line 1635 ----------------------------------------
      .               /// Proc macro crates don't currently export spans, so this function does not have
      .               /// to work for them.
      .               fn imported_source_files(self, sess: &Session) -> &'a [ImportedSourceFile] {
      .                   // Translate the virtual `/rustc/$hash` prefix back to a real directory
      .                   // that should hold actual sources, where possible.
      .                   //
      .                   // NOTE: if you update this, you might need to also update bootstrap's code for generating
      .                   // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.
 33,934 ( 0.01%)          let virtual_rust_source_base_dir = option_env!("CFG_VIRTUAL_RUST_SOURCE_BASE_DIR")
      .                       .map(Path::new)
      .                       .filter(|_| {
      .                           // Only spend time on further checks if we have what to translate *to*.
      .                           sess.opts.real_rust_source_base_dir.is_some()
      .                       })
      .                       .filter(|virtual_dir| {
      .                           // Don't translate away `/rustc/$hash` if we're still remapping to it,
      .                           // since that means we're still building `std`/`rustc` that need it,
      .                           // and we don't want the real path to leak into codegen/debuginfo.
      .                           !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)
      .                       });
 33,934 ( 0.01%)          let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {
      .                       debug!(
      .                           "try_to_translate_virtual_to_real(name={:?}): \
      .                            virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}",
      .                           name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,
      .                       );
      .           
  2,915 ( 0.00%)              if let Some(virtual_dir) = virtual_rust_source_base_dir {
      .                           if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                               if let rustc_span::FileName::Real(old_name) = name {
      .                                   if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } =
      .                                       old_name
      .                                   {
      .                                       if let Ok(rest) = virtual_name.strip_prefix(virtual_dir) {
      .                                           let virtual_name = virtual_name.clone();
      .           
-- line 1670 ----------------------------------------
-- line 1709 ----------------------------------------
      .                                           *old_name = new_name;
      .                                       }
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   };
      .           
 33,928 ( 0.01%)          self.cdata.source_map_import_info.get_or_init(|| {
     39 ( 0.00%)              let external_source_map = self.root.source_map.decode(self);
      .           
      .                       external_source_map
      .                           .map(|source_file_to_import| {
      .                               // We can't reuse an existing SourceFile, so allocate a new one
      .                               // containing the information we need.
      .                               let rustc_span::SourceFile {
 12,243 ( 0.00%)                          mut name,
  3,498 ( 0.00%)                          src_hash,
    583 ( 0.00%)                          start_pos,
  1,166 ( 0.00%)                          end_pos,
  2,915 ( 0.00%)                          mut lines,
  2,915 ( 0.00%)                          mut multibyte_chars,
  3,498 ( 0.00%)                          mut non_narrow_chars,
  2,915 ( 0.00%)                          mut normalized_pos,
  3,498 ( 0.00%)                          name_hash,
      .                                   ..
      .                               } = source_file_to_import;
      .           
      .                               // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped
      .                               // during rust bootstrapping by `remap-debuginfo = true`, and the user
      .                               // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,
      .                               // then we change `name` to a similar state as if the rust was bootstrapped
      .                               // with `remap-debuginfo = true`.
      .                               // This is useful for testing so that tests about the effects of
      .                               // `try_to_translate_virtual_to_real` don't have to worry about how the
      .                               // compiler is bootstrapped.
  1,166 ( 0.00%)                      if let Some(virtual_dir) =
      .                                   &sess.opts.debugging_opts.simulate_remapped_rust_src_base
      .                               {
      .                                   if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
      .                                       if let rustc_span::FileName::Real(ref mut old_name) = name {
      .                                           if let rustc_span::RealFileName::LocalPath(local) = old_name {
      .                                               if let Ok(rest) = local.strip_prefix(real_dir) {
      .                                                   *old_name = rustc_span::RealFileName::Remapped {
      .                                                       local_path: None,
-- line 1753 ----------------------------------------
-- line 1767 ----------------------------------------
      .                               let source_length = (end_pos - start_pos).to_usize();
      .           
      .                               // Translate line-start positions and multibyte character
      .                               // position into frame of reference local to file.
      .                               // `SourceMap::new_imported_source_file()` will then translate those
      .                               // coordinates to their new global frame of reference when the
      .                               // offset of the SourceFile is known.
      .                               for pos in &mut lines {
743,866 ( 0.16%)                          *pos = *pos - start_pos;
      .                               }
      .                               for mbc in &mut multibyte_chars {
  1,594 ( 0.00%)                          mbc.pos = mbc.pos - start_pos;
      .                               }
      .                               for swc in &mut non_narrow_chars {
    924 ( 0.00%)                          *swc = *swc - start_pos;
      .                               }
      .                               for np in &mut normalized_pos {
  3,806 ( 0.00%)                          np.pos = np.pos - start_pos;
      .                               }
      .           
 10,494 ( 0.00%)                      let local_version = sess.source_map().new_imported_source_file(
  7,579 ( 0.00%)                          name,
  4,081 ( 0.00%)                          src_hash,
      .                                   name_hash,
      .                                   source_length,
  1,166 ( 0.00%)                          self.cnum,
  2,915 ( 0.00%)                          lines,
  3,498 ( 0.00%)                          multibyte_chars,
  2,915 ( 0.00%)                          non_narrow_chars,
  2,332 ( 0.00%)                          normalized_pos,
      .                                   start_pos,
      .                                   end_pos,
      .                               );
      .                               debug!(
      .                                   "CrateMetaData::imported_source_files alloc \
      .                                    source_file {:?} original (start_pos {:?} end_pos {:?}) \
      .                                    translated (start_pos {:?} end_pos {:?})",
      .                                   local_version.name,
-- line 1804 ----------------------------------------
-- line 1808 ----------------------------------------
      .                                   local_version.end_pos
      .                               );
      .           
      .                               ImportedSourceFile {
      .                                   original_start_pos: start_pos,
      .                                   original_end_pos: end_pos,
      .                                   translated_source_file: local_version,
      .                               }
  1,749 ( 0.00%)                  })
      .                           .collect()
      .                   })
      .               }
      .           }
      .           
      .           impl CrateMetadata {
    312 ( 0.00%)      crate fn new(
      .                   sess: &Session,
      .                   blob: MetadataBlob,
      .                   root: CrateRoot<'static>,
      .                   raw_proc_macros: Option<&'static [ProcMacro]>,
      .                   cnum: CrateNum,
      .                   cnum_map: CrateNumMap,
      .                   dep_kind: CrateDepKind,
      .                   source: CrateSource,
      .                   private_dep: bool,
      .                   host_hash: Option<Svh>,
      .               ) -> CrateMetadata {
     78 ( 0.00%)          let trait_impls = root
      .                       .impls
      .                       .decode((&blob, sess))
      .                       .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))
      .                       .collect();
      .                   let alloc_decoding_state =
     78 ( 0.00%)              AllocDecodingState::new(root.interpret_alloc_index.decode(&blob).collect());
      .                   let dependencies = Lock::new(cnum_map.iter().cloned().collect());
      .           
      .                   // Pre-decode the DefPathHash->DefIndex table. This is a cheap operation
      .                   // that does not copy any data. It just does some data verification.
     26 ( 0.00%)          let def_path_hash_map = root.def_path_hash_map.decode(&blob);
      .           
    598 ( 0.00%)          CrateMetadata {
     26 ( 0.00%)              blob,
     78 ( 0.00%)              root,
    104 ( 0.00%)              trait_impls,
      .                       raw_proc_macros,
      .                       source_map_import_info: OnceCell::new(),
    104 ( 0.00%)              def_path_hash_map,
      .                       expn_hash_map: Default::default(),
    182 ( 0.00%)              alloc_decoding_state,
      .                       cnum,
    104 ( 0.00%)              cnum_map,
    130 ( 0.00%)              dependencies,
      .                       dep_kind: Lock::new(dep_kind),
    312 ( 0.00%)              source,
      .                       private_dep,
      .                       host_hash,
      .                       extern_crate: Lock::new(None),
      .                       hygiene_context: Default::default(),
      .                       def_key_cache: Default::default(),
      .                       def_path_hash_cache: Default::default(),
      .                   }
    234 ( 0.00%)      }
      .           
      .               crate fn dependencies(&self) -> LockGuard<'_, Vec<CrateNum>> {
      .                   self.dependencies.borrow()
      .               }
      .           
      .               crate fn add_dependency(&self, cnum: CrateNum) {
      .                   self.dependencies.borrow_mut().push(cnum);
      .               }
      .           
      .               crate fn update_extern_crate(&self, new_extern_crate: ExternCrate) -> bool {
      .                   let mut extern_crate = self.extern_crate.borrow_mut();
      .                   let update = Some(new_extern_crate.rank()) > extern_crate.as_ref().map(ExternCrate::rank);
      .                   if update {
    130 ( 0.00%)              *extern_crate = Some(new_extern_crate);
      .                   }
      .                   update
      .               }
      .           
      .               crate fn source(&self) -> &CrateSource {
    156 ( 0.00%)          &self.source
      .               }
      .           
      .               crate fn dep_kind(&self) -> CrateDepKind {
      .                   *self.dep_kind.lock()
      .               }
      .           
      .               crate fn update_dep_kind(&self, f: impl FnOnce(CrateDepKind) -> CrateDepKind) {
    167 ( 0.00%)          self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))
      .               }
      .           
      .               crate fn panic_strategy(&self) -> PanicStrategy {
      .                   self.root.panic_strategy
      .               }
      .           
      .               crate fn needs_panic_runtime(&self) -> bool {
      .                   self.root.needs_panic_runtime
-- line 1905 ----------------------------------------
-- line 1909 ----------------------------------------
      .                   self.root.panic_runtime
      .               }
      .           
      .               crate fn is_profiler_runtime(&self) -> bool {
      .                   self.root.profiler_runtime
      .               }
      .           
      .               crate fn needs_allocator(&self) -> bool {
      5 ( 0.00%)          self.root.needs_allocator
      .               }
      .           
      .               crate fn has_global_allocator(&self) -> bool {
      .                   self.root.has_global_allocator
      .               }
      .           
      .               crate fn has_default_lib_allocator(&self) -> bool {
      .                   self.root.has_default_lib_allocator
      .               }
      .           
      .               crate fn is_proc_macro_crate(&self) -> bool {
      .                   self.root.is_proc_macro_crate()
      .               }
      .           
      .               crate fn name(&self) -> Symbol {
    183 ( 0.00%)          self.root.name
      .               }
      .           
      .               crate fn stable_crate_id(&self) -> StableCrateId {
      .                   self.root.stable_crate_id
      .               }
      .           
      .               crate fn hash(&self) -> Svh {
      .                   self.root.hash
      .               }
      .           
      .               fn num_def_ids(&self) -> usize {
      .                   self.root.tables.def_keys.size()
      .               }
      .           
      .               fn local_def_id(&self, index: DefIndex) -> DefId {
 27,726 ( 0.01%)          DefId { krate: self.cnum, index }
      .               }
      .           
      .               // Translate a DefId from the current compilation environment to a DefId
      .               // for an external crate.
      .               fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> {
      .                   for (local, &global) in self.cnum_map.iter_enumerated() {
  7,315 ( 0.00%)              if global == did.krate {
      .                           return Some(DefId { krate: local, index: did.index });
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           }
      .           
-- line 1964 ----------------------------------------

448,760 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
  183,527 ( 0.04%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       17 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,152 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    2,943 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
        6 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
       24 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    2,344 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
        4 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        3 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
        3 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    6,123 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    6,986 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        2 ( 0.00%)      QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
        .               MacroExpansion(u64),
        .               ProcMacroSourceCode(u64),
        .               /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.
        .               CfgSpec(u64),
-- line 285 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       21 ( 0.00%)      fn from(p: PathBuf) -> Self {
        6 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       18 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       21 ( 0.00%)      }
        .           }
        .           
        2 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
       12 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
       18 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
       18 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
       15 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
        .                   match self.inner {
        .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        .               }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,130 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
-- line 353 ----------------------------------------
-- line 357 ----------------------------------------
        .               }
        .           
        .               pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
        .               }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        3 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
        6 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 383 ----------------------------------------
        .               }
        .           
        .               pub fn proc_macro_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::ProcMacroSourceCode(hasher.finish())
        .               }
        .           
       10 ( 0.00%)      pub fn cfg_spec_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        4 ( 0.00%)          FileName::QuoteExpansion(hasher.finish())
       10 ( 0.00%)      }
        .           
        .               pub fn cli_crate_attr_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::CliCrateAttr(hasher.finish())
        .               }
        .           
        .               pub fn doc_test_source_code(path: PathBuf, line: isize) -> FileName {
-- line 403 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
        1 ( 0.00%)      pub lo: BytePos,
        1 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
        3 ( 0.00%)      pub ctxt: SyntaxContext,
        1 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
   45,163 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
       51 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
   10,848 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
    8,136 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
   10,848 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
    9,648 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
    6,432 ( 0.00%)      }
        .               #[inline]
    1,532 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
    1,532 ( 0.00%)      }
        .               #[inline]
    5,616 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
    3,744 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
    1,175 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
      705 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
        9 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
        6 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
      153 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
      102 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 671 ----------------------------------------
        .               pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
        .                   while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
        .               }
        .           
        .               /// Edition of the crate from which this span came.
    3,438 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
    2,292 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
      794 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
      372 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
      413 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
       15 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
        3 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
       12 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
    1,141 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
      978 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
      815 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
       10 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
       12 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
        8 ( 0.00%)      pub fn allows_unsafe(self) -> bool {
        2 ( 0.00%)          self.ctxt().outer_expn_data().allow_internal_unsafe
        8 ( 0.00%)      }
        .           
        .               pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
        .                   let mut prev_span = DUMMY_SP;
        .                   std::iter::from_fn(move || {
        .                       loop {
        .                           let expn_data = self.ctxt().outer_expn_data();
        .                           if expn_data.is_root() {
        .                               return None;
-- line 752 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
   59,191 ( 0.01%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
   10,470 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
      292 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
      292 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
   35,819 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
   48,429 ( 0.01%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
    1,243 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
      791 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
      904 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
      605 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
      110 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
      385 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
      495 ( 0.00%)      }
        .           
        .               pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
        .               }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
      166 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
        2 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
    1,008 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
      588 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
   43,245 ( 0.01%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.remove_mark();
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
-- line 897 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
    8,109 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
    5,406 ( 0.00%)          let mut span = self.data();
    4,269 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
    8,109 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
    8,774 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
-- line 922 ----------------------------------------
-- line 929 ----------------------------------------
        .               ) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
    9,752 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
    8,533 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
      295 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
        .                   MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
       54 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        .               }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
-- line 1079 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
      295 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
      295 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
        .               fn from(spans: Vec<Span>) -> MultiSpan {
        .                   MultiSpan::from_spans(spans)
        .               }
        .           }
        .           
-- line 1157 ----------------------------------------
-- line 1160 ----------------------------------------
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      308 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      154 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      462 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
        9 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
       22 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,166 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       18 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,332 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        .                   let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
       15 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
       15 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      174 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        3 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        3 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        3 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
       12 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
        6 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
        6 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
        9 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       33 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    5,247 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      583 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  907,590 ( 0.19%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,166 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    6,413 ( 0.00%)              SourceFile {
    4,664 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,332 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,332 ( 0.00%)                  lines,
    2,332 ( 0.00%)                  multibyte_chars,
    2,332 ( 0.00%)                  non_narrow_chars,
    2,332 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    5,247 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
       55 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       15 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
       10 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
       10 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       15 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
       60 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
       10 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
       85 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
       55 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       20 ( 0.00%)              lines,
       20 ( 0.00%)              multibyte_chars,
       20 ( 0.00%)              non_narrow_chars,
       20 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
       45 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
    1,477 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
      211 ( 0.00%)          if matches!(
      422 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        .                       let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        .                       if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
      211 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
    1,899 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      565 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
    3,512 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
    2,717 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
    7,842 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
    5,544 ( 0.00%)          assert!(line_index < self.lines.len());
    7,650 ( 0.00%)          if line_index == (self.lines.len() - 1) {
       28 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
    5,078 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
        2 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
        6 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
        .                       if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
       12 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
       10 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
        4 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
        7 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
        2 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
        .                   match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
        1 ( 0.00%)                  let linebpos = self.lines[a];
        2 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
        1 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
        8 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
        3 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
        2 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
        1 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
        5 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
        7 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
       50 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
       45 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        5 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        5 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
    7,791 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
      302 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
    6,155 ( 0.00%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,604,168 ( 0.34%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
  936,420 ( 0.20%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
  110,700 ( 0.02%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
   99,274 ( 0.02%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
   20,970 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
   78,304 ( 0.02%)          let span = self.data_untracked();
   22,182 ( 0.00%)          span.ctxt.hash_stable(ctx, hasher);
   42,546 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
   28,599 ( 0.01%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
   27,894 ( 0.01%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
   55,788 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
   27,894 ( 0.01%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
   13,947 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
   13,947 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
  113,456 ( 0.02%)      }
        .           }

1,385,990 ( 0.29%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .               /// }
      .               ///
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
635,707 ( 0.13%)      pub fn rustc_entry(&mut self, key: K) -> RustcEntry<'_, K, V, A> {
      .                   let hash = make_insert_hash(&self.hash_builder, &key);
    380 ( 0.00%)          if let Some(elem) = self.table.find(hash, |q| q.0.eq(&key)) {
 44,533 ( 0.01%)              RustcEntry::Occupied(RustcOccupiedEntry {
 69,239 ( 0.01%)                  key: Some(key),
      .                           elem,
      .                           table: &mut self.table,
      .                       })
      .                   } else {
      .                       // Ideally we would put this in VacantEntry::insert, but Entry is not
      .                       // generic over the BuildHasher and adding a generic parameter would be
      .                       // a breaking change.
      .                       self.reserve(1);
      .           
146,217 ( 0.03%)              RustcEntry::Vacant(RustcVacantEntry {
      .                           hash,
 35,301 ( 0.01%)                  key,
      .                           table: &mut self.table,
      .                       })
      .                   }
465,730 ( 0.10%)      }
      .           }
      .           
      .           /// A view into a single entry in a map, which may either be vacant or occupied.
      .           ///
      .           /// This `enum` is constructed from the [`entry`] method on [`HashMap`].
      .           ///
      .           /// [`HashMap`]: struct.HashMap.html
      .           /// [`entry`]: struct.HashMap.html#method.rustc_entry
-- line 62 ----------------------------------------
-- line 405 ----------------------------------------
      .               /// if let RustcEntry::Occupied(o) = map.rustc_entry("poneyland") {
      .               ///     *o.into_mut() += 10;
      .               /// }
      .               ///
      .               /// assert_eq!(map["poneyland"], 22);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
      .               pub fn into_mut(self) -> &'a mut V {
  2,066 ( 0.00%)          unsafe { &mut self.elem.as_mut().1 }
      .               }
      .           
      .               /// Sets the value of the entry, and returns the entry's old value.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 421 ----------------------------------------
-- line 568 ----------------------------------------
      .               /// let mut map: HashMap<&str, u32> = HashMap::new();
      .               ///
      .               /// if let RustcEntry::Vacant(o) = map.rustc_entry("poneyland") {
      .               ///     o.insert(37);
      .               /// }
      .               /// assert_eq!(map["poneyland"], 37);
      .               /// ```
      .               #[cfg_attr(feature = "inline-more", inline)]
  3,566 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
      .                   unsafe {
 17,603 ( 0.00%)              let bucket = self.table.insert_no_grow(self.hash, (self.key, value));
  1,947 ( 0.00%)              &mut bucket.as_mut().1
      .                   }
  4,652 ( 0.00%)      }
      .           
      .               /// Sets the value of the entry with the RustcVacantEntry's key,
      .               /// and returns a RustcOccupiedEntry.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use hashbrown::HashMap;
-- line 589 ----------------------------------------

124,634 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/function.rs
--------------------------------------------------------------------------------
Ir               

-- line 62 ----------------------------------------
      .               message = "expected a `{Fn}<{Args}>` closure, found `{Self}`",
      .               label = "expected an `Fn<{Args}>` closure, found `{Self}`"
      .           )]
      .           #[fundamental] // so that regex can rely that `&str: !FnMut`
      .           #[must_use = "closures are lazy and do nothing unless called"]
      .           pub trait Fn<Args>: FnMut<Args> {
      .               /// Performs the call operation.
      .               #[unstable(feature = "fn_traits", issue = "29625")]
    151 ( 0.00%)      extern "rust-call" fn call(&self, args: Args) -> Self::Output;
      .           }
      .           
      .           /// The version of the call operator that takes a mutable receiver.
      .           ///
      .           /// Instances of `FnMut` can be called repeatedly and may mutate state.
      .           ///
      .           /// `FnMut` is implemented automatically by closures which take mutable
      .           /// references to captured variables, as well as all types that implement
-- line 78 ----------------------------------------
-- line 142 ----------------------------------------
      .               message = "expected a `{FnMut}<{Args}>` closure, found `{Self}`",
      .               label = "expected an `FnMut<{Args}>` closure, found `{Self}`"
      .           )]
      .           #[fundamental] // so that regex can rely that `&str: !FnMut`
      .           #[must_use = "closures are lazy and do nothing unless called"]
      .           pub trait FnMut<Args>: FnOnce<Args> {
      .               /// Performs the call operation.
      .               #[unstable(feature = "fn_traits", issue = "29625")]
 15,795 ( 0.00%)      extern "rust-call" fn call_mut(&mut self, args: Args) -> Self::Output;
      .           }
      .           
      .           /// The version of the call operator that takes a by-value receiver.
      .           ///
      .           /// Instances of `FnOnce` can be called, but might not be callable multiple
      .           /// times. Because of this, if the only thing known about a type is that it
      .           /// implements `FnOnce`, it can only be called once.
      .           ///
-- line 158 ----------------------------------------
-- line 219 ----------------------------------------
      .           pub trait FnOnce<Args> {
      .               /// The returned type after the call operator is used.
      .               #[lang = "fn_once_output"]
      .               #[stable(feature = "fn_once_output", since = "1.12.0")]
      .               type Output;
      .           
      .               /// Performs the call operation.
      .               #[unstable(feature = "fn_traits", issue = "29625")]
278,207 ( 0.06%)      extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
      .           }
      .           
      .           mod impls {
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A, F: ?Sized> Fn<A> for &F
      .               where
      .                   F: Fn<A>,
      .               {
      .                   extern "rust-call" fn call(&self, args: A) -> F::Output {
      4 ( 0.00%)              (**self).call(args)
      .                   }
      .               }
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A, F: ?Sized> FnMut<A> for &F
      .               where
      .                   F: Fn<A>,
      .               {
-- line 245 ----------------------------------------
-- line 251 ----------------------------------------
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A, F: ?Sized> FnOnce<A> for &F
      .               where
      .                   F: Fn<A>,
      .               {
      .                   type Output = F::Output;
      .           
      .                   extern "rust-call" fn call_once(self, args: A) -> F::Output {
      2 ( 0.00%)              (*self).call(args)
      .                   }
      .               }
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A, F: ?Sized> FnMut<A> for &mut F
      .               where
      .                   F: FnMut<A>,
      .               {
  4,951 ( 0.00%)          extern "rust-call" fn call_mut(&mut self, args: A) -> F::Output {
 65,204 ( 0.01%)              (*self).call_mut(args)
  5,520 ( 0.00%)          }
      .               }
      .           
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               impl<A, F: ?Sized> FnOnce<A> for &mut F
      .               where
      .                   F: FnMut<A>,
      .               {
      .                   type Output = F::Output;
491,468 ( 0.10%)          extern "rust-call" fn call_once(self, args: A) -> F::Output {
 28,191 ( 0.01%)              (*self).call_mut(args)
409,813 ( 0.09%)          }
      .               }
      .           }

  7,320 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/function.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir               

-- line 27 ----------------------------------------
      .           impl CacheEntry {
      .               #[inline]
      .               fn update(
      .                   &mut self,
      .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
      .                   pos: BytePos,
      .                   time_stamp: usize,
      .               ) {
  3,246 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
  1,661 ( 0.00%)              self.file = file;
  2,746 ( 0.00%)              self.file_index = file_idx;
      .                   }
      .           
  1,081 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
      .                   let line_bounds = self.file.line_bounds(line_index);
  5,100 ( 0.00%)          self.line_number = line_index + 1;
  7,398 ( 0.00%)          self.line = line_bounds;
      .                   self.touch(time_stamp);
      .               }
      .           
      .               #[inline]
      .               fn touch(&mut self, time_stamp: usize) {
 25,536 ( 0.01%)          self.time_stamp = time_stamp;
      .               }
      .           }
      .           
      .           #[derive(Clone)]
      .           pub struct CachingSourceMapView<'sm> {
      .               source_map: &'sm SourceMap,
      .               line_cache: [CacheEntry; 3],
      .               time_stamp: usize,
      .           }
      .           
      .           impl<'sm> CachingSourceMapView<'sm> {
  1,112 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
      .                   let files = source_map.files();
    556 ( 0.00%)          let first_file = files[0].clone();
      .                   let entry = CacheEntry {
      .                       time_stamp: 0,
      .                       line_number: 0,
      .                       line: BytePos(0)..BytePos(0),
      .                       file: first_file,
      .                       file_index: 0,
      .                   };
      .           
  2,780 ( 0.00%)          CachingSourceMapView {
      .                       source_map,
  3,892 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
      .                       time_stamp: 0,
      .                   }
  2,224 ( 0.00%)      }
      .           
      .               pub fn byte_pos_to_line_and_col(
      .                   &mut self,
      .                   pos: BytePos,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
      .                   self.time_stamp += 1;
      .           
      .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
      .                   };
      .           
      .                   let cache_entry = &mut self.line_cache[oldest];
      .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
      .           
      .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
      .               }
      .           
 97,629 ( 0.02%)      pub fn span_data_to_lines_and_cols(
      .                   &mut self,
      .                   span_data: &SpanData,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
 55,788 ( 0.01%)          self.time_stamp += 1;
      .           
      .                   // Check if lo and hi are in the cached lines.
 13,947 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
 13,947 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
      .           
 23,182 ( 0.00%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
      .                       // Cache hit for span lo and hi. Check if they belong to the same file.
      .                       let result = {
 23,178 ( 0.00%)                  let lo = &self.line_cache[lo_cache_idx as usize];
      .                           let hi = &self.line_cache[hi_cache_idx as usize];
      .           
 69,534 ( 0.01%)                  if lo.file_index != hi.file_index {
      .                               return None;
      .                           }
      .           
      .                           (
 23,178 ( 0.00%)                      lo.file.clone(),
      .                               lo.line_number,
      .                               span_data.lo - lo.line.start,
 11,589 ( 0.00%)                      hi.line_number,
      .                               span_data.hi - hi.line.start,
      .                           )
      .                       };
      .           
 11,589 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
 11,589 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
      .           
 46,356 ( 0.01%)              return Some(result);
      .                   }
      .           
      .                   // No cache hit or cache hit for only one of span lo and hi.
  4,712 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
      .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
      .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
      .                   } else {
      .                       self.oldest_cache_entry_index()
      .                   };
      .           
      .                   // If the entry doesn't point to the correct file, get the new file and index.
      .                   // Return early if the file containing beginning of span doesn't contain end of span.
 18,396 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
  6,385 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
  7,662 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
      .                           return None;
      .                       }
      .           
  5,108 ( 0.00%)              Some(new_file_and_idx)
      .                   } else {
      .                       let file = &self.line_cache[oldest].file;
  3,243 ( 0.00%)              if !file_contains(&file, span_data.hi) {
      .                           return None;
      .                       }
      .           
  3,243 ( 0.00%)              None
      .                   };
      .           
      .                   // Update the cache entries.
 11,790 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, -1) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      .           
  5,736 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
      .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
      .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
      .                               let hi = &mut self.line_cache[next_oldest];
      .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
      .                               (oldest, next_oldest)
      .                           } else {
      .                               (oldest, oldest)
      .                           }
      .                       }
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, _) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      4 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
      6 ( 0.00%)                  hi.touch(self.time_stamp);
      .                           (oldest, hi_cache_idx as usize)
      .                       }
      .                       // Oldest cache entry is for span_data.hi line.
      .                       (_, -1) => {
      .                           let hi = &mut self.line_cache[oldest];
    444 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
    888 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
  1,776 ( 0.00%)                  lo.touch(self.time_stamp);
      .                           (lo_cache_idx as usize, oldest)
      .                       }
      .                       _ => {
      .                           panic!();
      .                       }
      .                   };
      .           
      .                   let lo = &self.line_cache[lo_idx];
      .                   let hi = &self.line_cache[hi_idx];
      .           
      .                   // Span lo and hi may equal line end when last line doesn't
      .                   // end in newline, hence the inclusive upper bounds below.
  4,716 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
  2,358 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
  4,716 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
  2,358 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
 11,790 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
  7,074 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
  7,074 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
      .           
  7,074 ( 0.00%)          Some((
  2,358 ( 0.00%)              lo.file.clone(),
      .                       lo.line_number,
      .                       span_data.lo - lo.line.start,
  2,358 ( 0.00%)              hi.line_number,
      .                       span_data.hi - hi.line.start,
      .                   ))
125,523 ( 0.03%)      }
      .           
      .               fn cache_entry_index(&self, pos: BytePos) -> isize {
      .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
140,169 ( 0.03%)              if cache_entry.line.contains(&pos) {
      .                           return idx as isize;
      .                       }
      .                   }
      .           
      .                   -1
      .               }
      .           
      .               fn oldest_cache_entry_index(&self) -> usize {
      .                   let mut oldest = 0;
      .           
      .                   for idx in 1..self.line_cache.len() {
 11,472 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
      .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
      .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
      .           
      .                   for idx in 0..self.line_cache.len() {
  3,738 ( 0.00%)              if idx != avoid_idx
  1,959 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
      .                       {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
  6,385 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
  1,277 ( 0.00%)          if !self.source_map.files().is_empty() {
  2,554 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
      .                       let file = &self.source_map.files()[file_idx];
      .           
 10,216 ( 0.00%)              if file_contains(file, pos) {
      .                           return Some((file.clone(), file_idx));
      .                       }
      .                   }
      .           
      .                   None
  6,385 ( 0.00%)      }
      .           }
      .           
      .           #[inline]
      .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
      .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
      .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
      .               // purposes of converting a byte position to a line and column number, we can't come up with a
      .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

196,726 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 108 ----------------------------------------
      .                   suppress_errors: bool,
      .               },
      .           }
      .           
      .           impl RegionckMode {
      .               /// Indicates that the MIR borrowck will repeat these region
      .               /// checks, so we should ignore errors if NLL is (unconditionally)
      .               /// enabled.
     97 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
      .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
      .                   // this always `true` and then proceed to eliminate the dead code.
     97 ( 0.00%)          match tcx.borrowck_mode() {
      .                       // If we're on Migrate mode, report AST region errors
      .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
      .           
      .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
      .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
      .                   }
    194 ( 0.00%)      }
      .           }
      .           
      .           /// This type contains all the things within `InferCtxt` that sit within a
      .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
      .           /// operations are hot enough that we want only one call to `borrow_mut` per
      .           /// call to `start_snapshot` and `rollback_to`.
      .           pub struct InferCtxtInner<'tcx> {
      .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
      .               /// type instantiations (`ty::Infer`) to the actual opaque
      .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
      .               /// opaque type inference variables to their corresponding
      .               /// opaque type.
      .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
      .           }
      .           
      .           impl<'tcx> InferCtxtInner<'tcx> {
 15,965 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
108,562 ( 0.02%)          InferCtxtInner {
      .                       projection_cache: Default::default(),
      .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
      .                       undo_log: InferCtxtUndoLogs::default(),
      .                       const_unification_storage: ut::UnificationTableStorage::new(),
      .                       int_unification_storage: ut::UnificationTableStorage::new(),
      .                       float_unification_storage: ut::UnificationTableStorage::new(),
  9,579 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
      .                       region_obligations: vec![],
      .                       opaque_types: Default::default(),
      .                       opaque_types_vars: Default::default(),
      .                   }
 19,158 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
      .                   &self.region_obligations
      .               }
      .           
      .               #[inline]
      .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
  3,548 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
 79,280 ( 0.02%)          self.type_variable_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn int_unification_table(
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::IntVid,
      .                       &mut ut::UnificationStorage<ty::IntVid>,
      .                       &mut InferCtxtUndoLogs<'tcx>,
      .                   >,
      .               > {
  1,327 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               fn float_unification_table(
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
      .                   &mut self,
      .               ) -> ut::UnificationTable<
      .                   ut::InPlace<
      .                       ty::ConstVid<'tcx>,
      .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
      .                       &mut InferCtxtUndoLogs<'tcx>,
      .                   >,
      .               > {
    956 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
      .               }
      .           
      .               #[inline]
      .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
 12,472 ( 0.00%)          self.region_constraint_storage
      .                       .as_mut()
      .                       .expect("region constraints already solved")
 15,433 ( 0.00%)              .with_log(&mut self.undo_log)
      .               }
      .           }
      .           
      .           pub struct InferCtxt<'a, 'tcx> {
      .               pub tcx: TyCtxt<'tcx>,
      .           
      .               /// The `DefId` of the item in whose context we are performing inference or typeck.
      .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
      .               /// item we are type-checking, and just consider those names as
      .               /// part of the root universe. So this would only get incremented
      .               /// when we enter into a higher-ranked (`for<..>`) type or trait
      .               /// bound.
      .               universe: Cell<ty::UniverseIndex>,
      .           }
      .           
      .           /// See the `error_reporting` module for more details.
 21,472 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
      .           pub enum ValuePairs<'tcx> {
      .               Types(ExpectedFound<Ty<'tcx>>),
      .               Regions(ExpectedFound<ty::Region<'tcx>>),
      .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
      .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
      .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
      .           }
      .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
      .           pub struct TypeTrace<'tcx> {
      .               cause: ObligationCause<'tcx>,
      .               values: ValuePairs<'tcx>,
      .           }
      .           
      .           /// The origin of a `r1 <= r2` constraint.
      .           ///
      .           /// See `error_reporting` module for more details
 14,071 ( 0.00%)  #[derive(Clone, Debug)]
      .           pub enum SubregionOrigin<'tcx> {
      .               /// Arose from a subtyping relation
    863 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
      .           
      .               /// When casting `&'a T` to an `&'b Trait` object,
      .               /// relating `'a` to `'b`
      .               RelateObjectBound(Span),
      .           
      .               /// Some type parameter was instantiated with the given type,
      .               /// and that type must outlive some region.
     50 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
      .           
      .               /// The given region parameter was instantiated with a region
      .               /// that must outlive some other region.
      .               RelateRegionParamBound(Span),
      .           
      .               /// Creating a pointer `b` to contents of another reference
      .               Reborrow(Span),
      .           
      .               /// Creating a pointer `b` to contents of an upvar
      .               ReborrowUpvar(Span, ty::UpvarId),
      .           
      .               /// Data with type `Ty<'tcx>` was borrowed
     60 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
      .           
      .               /// (&'a &'b T) where a >= b
     72 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
      .           
      .               /// Comparing the signature and requirements of an impl method against
      .               /// the containing trait.
      .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
      .           
      .               /// Comparing the signature and requirements of an impl associated type
      .               /// against the containing trait
      .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
      .               defining_use_anchor: Option<LocalDefId>,
      .           }
      .           
      .           pub trait TyCtxtInferExt<'tcx> {
      .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
      .           }
      .           
      .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
  3,193 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
  9,579 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
  3,193 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> InferCtxtBuilder<'tcx> {
      .               /// Used only by `rustc_typeck` during body type-checking/inference,
      .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
      .               /// Will also change the scope for opaque type defining use checks to the given owner.
  3,276 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
  4,004 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
  1,820 ( 0.00%)          self.with_opaque_type_inference(table_owner)
  2,548 ( 0.00%)      }
      .           
      .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
      .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
      .               ///
      .               /// It is only meant to be called in two places, for typeck
      .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
      .               /// in mir borrowck.
    216 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
    108 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
    944 ( 0.00%)          self
    324 ( 0.00%)      }
      .           
      .               /// Given a canonical value `C` as a starting point, create an
      .               /// inference context that contains each of the bound values
      .               /// within instantiated as a fresh variable. The `f` closure is
      .               /// invoked with the new infcx, along with the instantiated value
      .               /// `V` and a substitution `S`. This substitution `S` maps from
      .               /// the bound values in `C` to their instantiated values in `V`
      .               /// (in other words, `S(C) = V`).
  6,323 ( 0.00%)      pub fn enter_with_canonical<T, R>(
      .                   &mut self,
      .                   span: Span,
      .                   canonical: &Canonical<'tcx, T>,
      .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
      .               ) -> R
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   self.enter(|infcx| {
  8,102 ( 0.00%)              let (value, subst) =
    386 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
 12,403 ( 0.00%)              f(infcx, value, subst)
      .                   })
  6,914 ( 0.00%)      }
      .           
 16,218 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
  8,962 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
      .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
135,973 ( 0.03%)          f(InferCtxt {
      .                       tcx,
      .                       defining_use_anchor,
      .                       in_progress_typeck_results,
  3,193 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
      .                       lexical_region_resolutions: RefCell::new(None),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      .                       reported_trait_errors: Default::default(),
      .                       reported_closure_mismatch: Default::default(),
      .                       tainted_by_errors_flag: Cell::new(false),
  3,193 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
      .                       in_snapshot: Cell::new(false),
      .                       skip_leak_check: Cell::new(false),
      .                       universe: Cell::new(ty::UniverseIndex::ROOT),
      .                   })
 17,194 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, T> InferOk<'tcx, T> {
      .               pub fn unit(self) -> InferOk<'tcx, ()> {
      .                   InferOk { value: (), obligations: self.obligations }
      .               }
      .           
      .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
      .               pub fn into_value_registering_obligations(
      .                   self,
      .                   infcx: &InferCtxt<'_, 'tcx>,
      .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
      .               ) -> T {
     10 ( 0.00%)          let InferOk { value, obligations } = self;
     40 ( 0.00%)          for obligation in obligations {
      .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
      .                   }
      .                   value
      .               }
      .           }
      .           
      .           impl<'tcx> InferOk<'tcx, ()> {
  2,480 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
  9,920 ( 0.00%)          self.obligations
  2,480 ( 0.00%)      }
      .           }
      .           
      .           #[must_use = "once you start a snapshot, you should always consume it"]
      .           pub struct CombinedSnapshot<'a, 'tcx> {
      .               undo_snapshot: Snapshot<'tcx>,
      .               region_constraints_snapshot: RegionSnapshot,
      .               universe: ty::UniverseIndex,
      .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
      .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
      .                   debug!("canonical consts: {:?}", &canonical.value);
      .           
      .                   self.tcx.try_unify_abstract_consts(canonical.value)
      .               }
      .           
      .               pub fn is_in_snapshot(&self) -> bool {
      .                   self.in_snapshot.get()
  7,411 ( 0.00%)      }
      .           
 31,848 ( 0.01%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
 35,829 ( 0.01%)          t.fold_with(&mut self.freshener())
 35,829 ( 0.01%)      }
      .           
      .               /// Returns the origin of the type variable identified by `vid`, or `None`
      .               /// if this is not a type variable.
      .               ///
      .               /// No attempt is made to resolve `ty`.
    208 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
    416 ( 0.00%)          match *ty.kind() {
    104 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
    416 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
      .                       }
      .                       _ => None,
      .                   }
    416 ( 0.00%)      }
      .           
  3,981 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
      .                   freshen::TypeFreshener::new(self, false)
  3,981 ( 0.00%)      }
      .           
      .               /// Like `freshener`, but does not replace `'static` regions.
 20,595 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
      .                   freshen::TypeFreshener::new(self, true)
 20,595 ( 0.00%)      }
      .           
    492 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
    246 ( 0.00%)          let mut inner = self.inner.borrow_mut();
    246 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
      .                       .type_variables()
      .                       .unsolved_variables()
      .                       .into_iter()
    208 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
      .                       .collect();
      .                   vars.extend(
      .                       (0..inner.int_unification_table().len())
      .                           .map(|i| ty::IntVid { index: i as u32 })
    110 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
      .                           .map(|v| self.tcx.mk_int_var(v)),
      .                   );
      .                   vars.extend(
      .                       (0..inner.float_unification_table().len())
      .                           .map(|i| ty::FloatVid { index: i as u32 })
      .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
      .                           .map(|v| self.tcx.mk_float_var(v)),
      .                   );
      .                   vars
    861 ( 0.00%)      }
      .           
  7,921 ( 0.00%)      fn combine_fields(
      .                   &'a self,
      .                   trace: TypeTrace<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .               ) -> CombineFields<'a, 'tcx> {
 31,692 ( 0.01%)          CombineFields {
      .                       infcx: self,
 79,230 ( 0.02%)              trace,
      .                       cause: None,
      .                       param_env,
      .                       obligations: PredicateObligations::new(),
      .                   }
  7,921 ( 0.00%)      }
      .           
      .               /// Clear the "currently in a snapshot" flag, invoke the closure,
      .               /// then restore the flag to its original value. This flag is a
      .               /// debugging measure designed to detect cases where we start a
      .               /// snapshot, create type variables, and register obligations
      .               /// which may involve those type variables in the fulfillment cx,
      .               /// potentially leaving "dangling type variables" behind.
      .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 760 ----------------------------------------
      .               /// before we return, this is not a problem, as there won't be any
      .               /// escaping obligations in the main cx. In those cases, you can
      .               /// use this function.
      .               pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
      .               where
      .                   F: FnOnce(&Self) -> R,
      .               {
      .                   let flag = self.in_snapshot.replace(false);
  1,104 ( 0.00%)          let result = func(self);
      .                   self.in_snapshot.set(flag);
      .                   result
      .               }
      .           
 41,936 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
      .                   debug!("start_snapshot()");
      .           
      .                   let in_snapshot = self.in_snapshot.replace(true);
      .           
      .                   let mut inner = self.inner.borrow_mut();
      .           
125,808 ( 0.03%)          CombinedSnapshot {
      .                       undo_snapshot: inner.undo_log.start_snapshot(),
      .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
      .                       universe: self.universe(),
      .                       was_in_snapshot: in_snapshot,
      .                       // Borrow typeck results "in progress" (i.e., during typeck)
      .                       // to ban writes from within a snapshot to them.
 20,968 ( 0.00%)              _in_progress_typeck_results: self
      .                           .in_progress_typeck_results
      .                           .map(|typeck_results| typeck_results.borrow()),
      .                   }
 83,872 ( 0.02%)      }
      .           
 78,925 ( 0.02%)      #[instrument(skip(self, snapshot), level = "debug")]
      .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
      .                   let CombinedSnapshot {
  7,175 ( 0.00%)              undo_snapshot,
  7,175 ( 0.00%)              region_constraints_snapshot,
  7,175 ( 0.00%)              universe,
  7,175 ( 0.00%)              was_in_snapshot,
 14,350 ( 0.00%)              _in_progress_typeck_results,
      .                   } = snapshot;
      .           
      .                   self.in_snapshot.set(was_in_snapshot);
      .                   self.universe.set(universe);
      .           
      .                   let mut inner = self.inner.borrow_mut();
  7,175 ( 0.00%)          inner.rollback_to(undo_snapshot);
      .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
      .               }
      .           
206,895 ( 0.04%)      #[instrument(skip(self, snapshot), level = "debug")]
      .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
      .                   let CombinedSnapshot {
 13,793 ( 0.00%)              undo_snapshot,
      .                       region_constraints_snapshot: _,
      .                       universe: _,
 13,793 ( 0.00%)              was_in_snapshot,
 27,586 ( 0.01%)              _in_progress_typeck_results,
      .                   } = snapshot;
      .           
      .                   self.in_snapshot.set(was_in_snapshot);
      .           
      .                   self.inner.borrow_mut().commit(undo_snapshot);
      .               }
      .           
      .               /// Executes `f` and commit the bindings.
 21,516 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
 26,367 ( 0.01%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
  2,397 ( 0.00%)          let snapshot = self.start_snapshot();
  7,476 ( 0.00%)          let r = f(&snapshot);
 16,779 ( 0.00%)          self.commit_from(snapshot);
 14,325 ( 0.00%)          r
      .               }
      .           
      .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
 89,400 ( 0.02%)      #[instrument(skip(self, f), level = "debug")]
110,074 ( 0.02%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
      .               {
 15,449 ( 0.00%)          let snapshot = self.start_snapshot();
 52,117 ( 0.01%)          let r = f(&snapshot);
      .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
 14,697 ( 0.00%)          match r {
      .                       Ok(_) => {
 82,751 ( 0.02%)                  self.commit_from(snapshot);
      .                       }
      .                       Err(_) => {
 20,798 ( 0.00%)                  self.rollback_to("commit_if_ok -- error", snapshot);
      .                       }
      .                   }
 72,408 ( 0.02%)          r
      .               }
      .           
      .               /// Execute `f` then unroll any bindings it creates.
 36,338 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
 42,682 ( 0.01%)      pub fn probe<R, F>(&self, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
  9,939 ( 0.00%)          let snapshot = self.start_snapshot();
 16,300 ( 0.00%)          let r = f(&snapshot);
 45,828 ( 0.01%)          self.rollback_to("probe", snapshot);
  4,082 ( 0.00%)          r
      .               }
      .           
      .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
      .               #[instrument(skip(self, f), level = "debug")]
      .               pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
      .               where
      .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
      .               {
-- line 875 ----------------------------------------
-- line 884 ----------------------------------------
      .                   r
      .               }
      .           
      .               /// Scan the constraints produced since `snapshot` began and returns:
      .               ///
      .               /// - `None` -- if none of them involve "region outlives" constraints
      .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
      .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
  2,910 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
      .                   &self,
      .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
      .               ) -> Option<bool> {
  5,820 ( 0.00%)          self.inner
      .                       .borrow_mut()
      .                       .unwrap_region_constraints()
      .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
  4,365 ( 0.00%)      }
      .           
      .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
      .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
      .               }
      .           
     48 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
      .               where
      .                   T: at::ToTrace<'tcx>,
      .               {
      .                   let origin = &ObligationCause::dummy();
      .                   self.probe(|_| {
      .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
      .                           // Ignore obligations, since we are unrolling
      .                           // everything anyway.
      .                       })
      .                   })
     36 ( 0.00%)      }
      .           
  1,512 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
      .               where
      .                   T: at::ToTrace<'tcx>,
      .               {
      .                   let origin = &ObligationCause::dummy();
      .                   self.probe(|_| {
      .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
      .                           // Ignore obligations, since we are unrolling
      .                           // everything anyway.
      .                       })
      .                   })
  1,134 ( 0.00%)      }
      .           
  6,100 ( 0.00%)      #[instrument(skip(self), level = "debug")]
      .               pub fn sub_regions(
      .                   &self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   a: ty::Region<'tcx>,
      .                   b: ty::Region<'tcx>,
      .               ) {
  5,490 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
      .               }
      .           
      .               /// Require that the region `r` be equal to one of the regions in
      .               /// the set `regions`.
      .               #[instrument(skip(self), level = "debug")]
      .               pub fn member_constraint(
      .                   &self,
      .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 983 ----------------------------------------
      .                   let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
      .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
      .                       a: p.a,
      .                       b: p.b,
      .                   });
      .                   self.subtype_predicate(cause, param_env, subtype_predicate)
      .               }
      .           
    468 ( 0.00%)      pub fn subtype_predicate(
      .                   &self,
      .                   cause: &ObligationCause<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   predicate: ty::PolySubtypePredicate<'tcx>,
      .               ) -> Option<InferResult<'tcx, ()>> {
      .                   // Check for two unresolved inference variables, in which case we can
      .                   // make no progress. This is partly a micro-optimization, but it's
      .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
      .                   // earlier that they are sub-unified).
      .                   //
      .                   // Note that we can just skip the binders here because
      .                   // type variables can't (at present, at
      .                   // least) capture any of the things bound by this binder.
      .                   //
      .                   // Note that this sub here is not just for diagnostics - it has semantic
      .                   // effects as well.
     39 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
     39 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
    302 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
     74 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
      .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
     74 ( 0.00%)                  return None;
      .                       }
      .                       _ => {}
      .                   }
      .           
      .                   Some(self.commit_if_ok(|_snapshot| {
      2 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
      .                           self.replace_bound_vars_with_placeholders(predicate);
      .           
      4 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
      .           
      .                       Ok(ok.unit())
      .                   }))
    351 ( 0.00%)      }
      .           
    996 ( 0.00%)      pub fn region_outlives_predicate(
      .                   &self,
      .                   cause: &traits::ObligationCause<'tcx>,
      .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
      .               ) -> UnitResult<'tcx> {
      .                   self.commit_if_ok(|_snapshot| {
      .                       let ty::OutlivesPredicate(r_a, r_b) =
      .                           self.replace_bound_vars_with_placeholders(predicate);
      .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
      .                           RelateRegionParamBound(cause.span)
      .                       });
    830 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
      .                       Ok(())
      .                   })
    664 ( 0.00%)      }
      .           
      .               /// Number of type variables created so far.
     26 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
      .                   self.inner.borrow_mut().type_variables().num_vars()
     52 ( 0.00%)      }
      .           
  2,246 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
 11,230 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
  3,369 ( 0.00%)      }
      .           
  2,040 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
  7,758 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
  3,060 ( 0.00%)      }
      .           
    114 ( 0.00%)      pub fn next_ty_var_in_universe(
      .                   &self,
      .                   origin: TypeVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> Ty<'tcx> {
    627 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
     57 ( 0.00%)          self.tcx.mk_ty_var(vid)
    171 ( 0.00%)      }
      .           
      .               pub fn next_const_var(
      .                   &self,
      .                   ty: Ty<'tcx>,
      .                   origin: ConstVariableOrigin,
      .               ) -> &'tcx ty::Const<'tcx> {
      .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
      .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
      .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
      .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
      .                       origin,
      .                       val: ConstVariableValue::Unknown { universe: self.universe() },
      .                   })
      .               }
      .           
      .               fn next_int_var_id(&self) -> IntVid {
    160 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
      .               }
      .           
     96 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
      .                   self.tcx.mk_int_var(self.next_int_var_id())
    128 ( 0.00%)      }
      .           
      .               fn next_float_var_id(&self) -> FloatVid {
      .                   self.inner.borrow_mut().float_unification_table().new_key(None)
      .               }
      .           
      .               pub fn next_float_var(&self) -> Ty<'tcx> {
      .                   self.tcx.mk_float_var(self.next_float_var_id())
      .               }
      .           
      .               /// Creates a fresh region variable with the next available index.
      .               /// The variable will be created in the maximum universe created
      .               /// thus far, allowing it to name any region created thus far.
  1,273 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
 27,293 ( 0.01%)          self.next_region_var_in_universe(origin, self.universe())
  2,546 ( 0.00%)      }
      .           
      .               /// Creates a fresh region variable with the next available index
      .               /// in the given universe; typically, you can use
      .               /// `next_region_var` and just use the maximal universe.
 10,996 ( 0.00%)      pub fn next_region_var_in_universe(
      .                   &self,
      .                   origin: RegionVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> ty::Region<'tcx> {
      .                   let region_var =
 71,474 ( 0.02%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
 27,490 ( 0.01%)          self.tcx.mk_region(ty::ReVar(region_var))
 16,494 ( 0.00%)      }
      .           
      .               /// Return the universe that the region `r` was created in.  For
      .               /// most regions (e.g., `'static`, named regions from the user,
      .               /// etc) this is the root universe U0. For inference variables or
      .               /// placeholders, however, it will return the universe which which
      .               /// they are associated.
  1,174 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
      .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
  1,761 ( 0.00%)      }
      .           
      .               /// Number of region variables created so far.
    886 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
      .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
  1,329 ( 0.00%)      }
      .           
      .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
  2,082 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
      .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
  4,164 ( 0.00%)      }
      .           
      .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
     33 ( 0.00%)      pub fn next_nll_region_var_in_universe(
      .                   &self,
      .                   origin: NllRegionVariableOrigin,
      .                   universe: ty::UniverseIndex,
      .               ) -> ty::Region<'tcx> {
    231 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
     66 ( 0.00%)      }
      .           
 55,344 ( 0.01%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
 32,234 ( 0.01%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
      .                           // Create a region inference variable for the given
      .                           // region parameter definition.
  1,178 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
      .                       }
      .                       GenericParamDefKind::Type { .. } => {
      .                           // Create a type inference variable for the given
      .                           // type parameter definition. The substitutions are
      .                           // for actual parameters that may be referred to by
      .                           // the default of this type parameter, if it exists.
      .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
      .                           // used in a path such as `Foo::<T, U>::new()` will
      .                           // use an inference variable for `C` with `[T, U]`
      .                           // as the substitutions for the default, `(T, U)`.
 22,564 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
      .                               self.universe(),
 28,205 ( 0.01%)                      TypeVariableOrigin {
      .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
  5,641 ( 0.00%)                              param.name,
  5,641 ( 0.00%)                              Some(param.def_id),
      .                                   ),
      .                                   span,
      .                               },
      .                           );
      .           
  5,641 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
      .                       }
      .                       GenericParamDefKind::Const { .. } => {
      .                           let origin = ConstVariableOrigin {
      .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
      .                                   param.name,
      .                                   param.def_id,
      .                               ),
      .                               span,
      .                           };
      .                           let const_var_id =
  1,089 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
      .                                   origin,
      .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
      .                               });
     99 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
      .                       }
      .                   }
    792 ( 0.00%)      }
      .           
      .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
      .               /// type/region parameter to a fresh inference variable.
 12,213 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
 58,646 ( 0.01%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
  8,142 ( 0.00%)      }
      .           
      .               /// Returns `true` if errors have been reported since this infcx was
      .               /// created. This is sometimes used as a heuristic to skip
      .               /// reporting errors that often occur as a result of earlier
      .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
      .               /// inference variables, regionck errors).
    402 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
      .                   debug!(
      .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
      .                        tainted_by_errors_flag={})",
      .                       self.tcx.sess.err_count(),
      .                       self.err_count_on_creation,
      .                       self.tainted_by_errors_flag.get()
      .                   );
      .           
 10,131 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
      .                       return true; // errors reported since this infcx was made
      .                   }
      .                   self.tainted_by_errors_flag.get()
    603 ( 0.00%)      }
      .           
      .               /// Set the "tainted by errors" flag to true. We call this when we
      .               /// observe an error from a prior pass.
      .               pub fn set_tainted_by_errors(&self) {
      .                   debug!("set_tainted_by_errors()");
      .                   self.tainted_by_errors_flag.set(true)
      .               }
      .           
      .               /// Process the region constraints and return any any errors that
      .               /// result. After this, no more unification operations should be
      .               /// done -- or the compiler will panic -- but it is legal to use
      .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
 10,178 ( 0.00%)      pub fn resolve_regions(
      .                   &self,
      .                   region_context: DefId,
      .                   outlives_env: &OutlivesEnvironment<'tcx>,
      .                   mode: RegionckMode,
      .               ) -> Vec<RegionResolutionError<'tcx>> {
 27,626 ( 0.01%)          let (var_infos, data) = {
      .                       let mut inner = self.inner.borrow_mut();
      .                       let inner = &mut *inner;
  1,454 ( 0.00%)              assert!(
  4,362 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
      .                           "region_obligations not empty: {:#?}",
      .                           inner.region_obligations
      .                       );
      .                       inner
      .                           .region_constraint_storage
      .                           .take()
      .                           .expect("regions already resolved")
      .                           .with_log(&mut inner.undo_log)
      .                           .into_infos_and_data()
  1,454 ( 0.00%)          };
      .           
      .                   let region_rels =
  1,454 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
      .           
 13,086 ( 0.00%)          let (lexical_region_resolutions, errors) =
 34,896 ( 0.01%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
      .           
  5,816 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
  1,454 ( 0.00%)          assert!(old_value.is_none());
      .           
      .                   errors
 13,086 ( 0.00%)      }
      .           
      .               /// Process the region constraints and report any errors that
      .               /// result. After this, no more unification operations should be
      .               /// done -- or the compiler will panic -- but it is legal to use
      .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
 14,540 ( 0.00%)      pub fn resolve_regions_and_report_errors(
      .                   &self,
      .                   region_context: DefId,
      .                   outlives_env: &OutlivesEnvironment<'tcx>,
      .                   mode: RegionckMode,
      .               ) {
  2,908 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
      .           
  4,362 ( 0.00%)          if !self.is_tainted_by_errors() {
      .                       // As a heuristic, just skip reporting region errors
      .                       // altogether if other errors have been reported while
      .                       // this infcx was in use.  This is totally hokey but
      .                       // otherwise we have a hard time separating legit region
      .                       // errors from silly ones.
  2,908 ( 0.00%)              self.report_region_errors(&errors);
      .                   }
  7,270 ( 0.00%)      }
      .           
      .               /// Obtains (and clears) the current set of region
      .               /// constraints. The inference context is still usable: further
      .               /// unifications will simply add new constraints.
      .               ///
      .               /// This method is not meant to be used with normal lexical region
      .               /// resolution. Rather, it is used in the NLL mode as a kind of
      .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
      .               }
      .           
      .               /// Gives temporary access to the region constraint data.
      .               pub fn with_region_constraints<R>(
      .                   &self,
      .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
      .               ) -> R {
      .                   let mut inner = self.inner.borrow_mut();
  2,344 ( 0.00%)          op(inner.unwrap_region_constraints().data())
      .               }
      .           
      .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
      .                   let mut inner = self.inner.borrow_mut();
      .                   let inner = &mut *inner;
      .                   inner
      .                       .region_constraint_storage
      .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
      .                       .var_origin(vid)
      .               }
      .           
      .               /// Takes ownership of the list of variable regions. This implies
      .               /// that all the region constraints have already been taken, and
      .               /// hence that `resolve_regions_and_report_errors` can never be
      .               /// called. This is used only during NLL processing to "hand off" ownership
      .               /// of the set of region variables into the NLL region context.
    540 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
      .                   let mut inner = self.inner.borrow_mut();
  2,052 ( 0.00%)          let (var_infos, data) = inner
      .                       .region_constraint_storage
      .                       .take()
      .                       .expect("regions already resolved")
      .                       .with_log(&mut inner.undo_log)
    108 ( 0.00%)              .into_infos_and_data();
    108 ( 0.00%)          assert!(data.is_empty());
      .                   var_infos
    864 ( 0.00%)      }
      .           
      .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
      .                   self.resolve_vars_if_possible(t).to_string()
      .               }
      .           
      .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
      .               /// universe index of `TyVar(vid)`.
    722 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
      .                   use self::type_variable::TypeVariableValue;
      .           
  2,166 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
      .                       TypeVariableValue::Known { value } => Ok(value),
      .                       TypeVariableValue::Unknown { universe } => Err(universe),
      .                   }
  2,527 ( 0.00%)      }
      .           
      .               /// Resolve any type variables found in `value` -- but only one
      .               /// level.  So, if the variable `?X` is bound to some type
      .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
      .               /// itself be bound to a type).
      .               ///
      .               /// Useful when you only need to inspect the outermost level of
      .               /// the type and don't care about nested types (or perhaps you
      .               /// will be resolving them as well, e.g. in a loop).
      .               pub fn shallow_resolve<T>(&self, value: T) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 30,839 ( 0.01%)          value.fold_with(&mut ShallowResolver { infcx: self })
      .               }
      .           
  1,742 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
      .                   self.inner.borrow_mut().type_variables().root_var(var)
  2,613 ( 0.00%)      }
      .           
      .               /// Where possible, replaces type/const variables in
      .               /// `value` with their final value. Note that region variables
      .               /// are unaffected. If a type/const variable has not been unified, it
      .               /// is left as is. This is an idempotent operation that does
      .               /// not affect inference state in any way and so you can do it
      .               /// at will.
    256 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 49,765 ( 0.01%)          if !value.needs_infer() {
 75,385 ( 0.02%)              return value; // Avoid duplicated subst-folding.
      .                   }
 33,707 ( 0.01%)          let mut r = resolve::OpportunisticVarResolver::new(self);
 32,870 ( 0.01%)          value.fold_with(&mut r)
    320 ( 0.00%)      }
      .           
      .               /// Returns the first unresolved variable contained in `T`. In the
      .               /// process of visiting `T`, this will resolve (where possible)
      .               /// type variables in `T`, but it never constructs the final,
      .               /// resolved type, so it's more efficient than
      .               /// `resolve_vars_if_possible()`.
      .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
      .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
      .                   expected: &'tcx ty::Const<'tcx>,
      .                   actual: &'tcx ty::Const<'tcx>,
      .                   err: TypeError<'tcx>,
      .               ) -> DiagnosticBuilder<'tcx> {
      .                   let trace = TypeTrace::consts(cause, true, expected, actual);
      .                   self.report_and_explain_type_error(trace, &err)
      .               }
      .           
  2,484 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
      .                   &self,
      .                   span: Span,
      .                   lbrct: LateBoundRegionConversionTime,
      .                   value: ty::Binder<'tcx, T>,
      .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   let fld_r =
 15,997 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
      .                   let fld_t = |_| {
      .                       self.next_ty_var(TypeVariableOrigin {
      .                           kind: TypeVariableOriginKind::MiscVariable,
      .                           span,
      .                       })
      .                   };
      .                   let fld_c = |_, ty| {
      .                       self.next_const_var(
      .                           ty,
      .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
      .                       )
      .                   };
 12,862 ( 0.00%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
  1,656 ( 0.00%)      }
      .           
      .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
      .               pub fn verify_generic_bound(
      .                   &self,
      .                   origin: SubregionOrigin<'tcx>,
      .                   kind: GenericKind<'tcx>,
      .                   a: ty::Region<'tcx>,
      .                   bound: VerifyBound<'tcx>,
-- line 1530 ----------------------------------------
-- line 1535 ----------------------------------------
      .                       .borrow_mut()
      .                       .unwrap_region_constraints()
      .                       .verify_generic_bound(origin, kind, a, bound);
      .               }
      .           
      .               /// Obtains the latest type of the given closure; this may be a
      .               /// closure in the current function, in which case its
      .               /// `ClosureKind` may not yet be known.
    242 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
    484 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
      .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
    363 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
      .               }
      .           
      .               /// Clears the selection, evaluation, and projection caches. This is useful when
      .               /// repeatedly attempting to select an `Obligation` while changing only
      .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
      .               pub fn clear_caches(&self) {
      .                   self.selection_cache.clear();
      .                   self.evaluation_cache.clear();
      .                   self.inner.borrow_mut().projection_cache().clear();
      .               }
      .           
      .               pub fn universe(&self) -> ty::UniverseIndex {
 54,226 ( 0.01%)          self.universe.get()
 15,718 ( 0.00%)      }
      .           
      .               /// Creates and return a fresh universe that extends all previous
      .               /// universes. Updates `self.universe` to that new universe.
    160 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
    160 ( 0.00%)          let u = self.universe.get().next_universe();
      .                   self.universe.set(u);
      .                   u
    160 ( 0.00%)      }
      .           
      .               /// Resolves and evaluates a constant.
      .               ///
      .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
      .               /// substitutions and environment are used to resolve the constant. Alternatively if the
      .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
      .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
      .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
      .               /// too generic for the constant to be evaluated then `Err(ErrorHandled::TooGeneric)` is
      .               /// returned.
      .               ///
      .               /// This handles inferences variables within both `param_env` and `substs` by
      .               /// performing the operation on their respective canonical forms.
     13 ( 0.00%)      pub fn const_eval_resolve(
      .                   &self,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   unevaluated: ty::Unevaluated<'tcx>,
      .                   span: Option<Span>,
      .               ) -> EvalToConstValueResult<'tcx> {
      1 ( 0.00%)          let substs = self.resolve_vars_if_possible(unevaluated.substs);
      .           
      .                   // Postpone the evaluation of constants whose substs depend on inference
      .                   // variables
      .                   if substs.has_infer_types_or_consts() {
      .                       return Err(ErrorHandled::TooGeneric);
      .                   }
      .           
      1 ( 0.00%)          let param_env_erased = self.tcx.erase_regions(param_env);
      3 ( 0.00%)          let substs_erased = self.tcx.erase_regions(substs);
      .           
      .                   let unevaluated = ty::Unevaluated {
      .                       def: unevaluated.def,
      .                       substs: substs_erased,
      2 ( 0.00%)              promoted: unevaluated.promoted,
      .                   };
      .           
      .                   // The return value is the evaluated value which doesn't contain any reference to inference
      .                   // variables, thus we don't need to substitute back the original values.
     12 ( 0.00%)          self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
      9 ( 0.00%)      }
      .           
      .               /// If `typ` is a type variable of some kind, resolve it one level
      .               /// (but do not resolve types found in the result). If `typ` is
      .               /// not a type variable, just return it unmodified.
      .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
398,664 ( 0.08%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
233,295 ( 0.05%)          match *typ.kind() {
      .                       ty::Infer(ty::TyVar(v)) => {
      .                           // Not entirely obvious: if `typ` is a type variable,
      .                           // it can be resolved to an int/float variable, which
      .                           // can then be recursively resolved, hence the
      .                           // recursion. Note though that we prevent type
      .                           // variables from unifying to other type variables
      .                           // directly (though they may be embedded
      .                           // structurally), and we prevent cycles in any case,
      .                           // so this recursion should always be of very limited
      .                           // depth.
      .                           //
      .                           // Note: if these two lines are combined into one we get
      .                           // dynamic borrow errors on `self.inner`.
115,164 ( 0.02%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
      .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
      .                       }
      .           
  2,076 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
      .                           .inner
      .                           .borrow_mut()
      .                           .int_unification_table()
      .                           .probe_value(v)
    648 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
      .                           .unwrap_or(typ),
      .           
      .                       ty::Infer(ty::FloatVar(v)) => self
      .                           .inner
      .                           .borrow_mut()
      .                           .float_unification_table()
      .                           .probe_value(v)
      .                           .map(|v| v.to_type(self.tcx))
      .                           .unwrap_or(typ),
      .           
      .                       _ => typ,
      .                   }
448,497 ( 0.09%)      }
      .           
      .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
      .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
      .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
      .               ///
      .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
      .               /// inlined, despite being large, because it has only two call sites that
      .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
      .               #[inline(always)]
      .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
      .                   match infer_var {
      .                       TyOrConstInferVar::Ty(v) => {
      .                           use self::type_variable::TypeVariableValue;
      .           
      .                           // If `inlined_probe` returns a `Known` value, it never equals
      .                           // `ty::Infer(ty::TyVar(v))`.
 27,710 ( 0.01%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
      .                               TypeVariableValue::Unknown { .. } => false,
      .                               TypeVariableValue::Known { .. } => true,
      .                           }
      .                       }
      .           
      .                       TyOrConstInferVar::TyInt(v) => {
      .                           // If `inlined_probe_value` returns a value it's always a
      .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
      .                           // `ty::Infer(_)`.
     60 ( 0.00%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
      .                       }
      .           
      .                       TyOrConstInferVar::TyFloat(v) => {
      .                           // If `probe_value` returns a value it's always a
      .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
      .                           //
      .                           // Not `inlined_probe_value(v)` because this call site is colder.
      .                           self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
-- line 1688 ----------------------------------------
-- line 1716 ----------------------------------------
      .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
      .               Const(ConstVid<'tcx>),
      .           }
      .           
      .           impl<'tcx> TyOrConstInferVar<'tcx> {
      .               /// Tries to extract an inference variable from a type or a constant, returns `None`
      .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
      .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
    838 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
      .                   match arg.unpack() {
      .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
      .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
      .                       GenericArgKind::Lifetime(_) => None,
      .                   }
    838 ( 0.00%)      }
      .           
      .               /// Tries to extract an inference variable from a type, returns `None`
      .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
     72 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
  8,170 ( 0.00%)          match *ty.kind() {
  1,800 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
     20 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
      .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
      .                       _ => None,
      .                   }
     72 ( 0.00%)      }
      .           
      .               /// Tries to extract an inference variable from a constant, returns `None`
      .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
      .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
      .                   match ct.val {
      .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
      .                       _ => None,
      .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
      .           }
      .           
      .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
      .                   self.infcx.tcx
      .               }
      .           
      .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
 72,628 ( 0.02%)          self.infcx.shallow_resolve_ty(ty)
      .               }
      .           
    520 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    520 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
    650 ( 0.00%)              self.infcx
      .                           .inner
      .                           .borrow_mut()
      .                           .const_unification_table()
    390 ( 0.00%)                  .probe_value(*vid)
      .                           .val
      .                           .known()
      .                           .unwrap_or(ct)
      .                   } else {
      .                       ct
      .                   }
    650 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TypeTrace<'tcx> {
      .               pub fn span(&self) -> Span {
      .                   self.cause.span
      .               }
      .           
      .               pub fn types(
-- line 1787 ----------------------------------------
-- line 1818 ----------------------------------------
      .                       CompareImplTypeObligation { span, .. } => span,
      .                   }
      .               }
      .           
      .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
      .               where
      .                   F: FnOnce() -> Self,
      .               {
  3,911 ( 0.00%)          match *cause.code() {
    865 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
  4,325 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
      .                       }
      .           
      .                       traits::ObligationCauseCode::CompareImplMethodObligation {
      .                           impl_item_def_id,
      .                           trait_item_def_id,
      .                       } => SubregionOrigin::CompareImplMethodObligation {
      .                           span: cause.span,
      .                           impl_item_def_id,
-- line 1836 ----------------------------------------

325,585 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs
--------------------------------------------------------------------------------
Ir                 

-- line 267 ----------------------------------------
        .           macro_rules! bitor_impl {
        .               ($($t:ty)*) => ($(
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
        .                   impl const BitOr for $t {
        .                       type Output = $t;
        .           
        .                       #[inline]
      420 ( 0.00%)              fn bitor(self, rhs: $t) -> $t { self | rhs }
        .                   }
        .           
        .                   forward_ref_binop! { impl const BitOr, bitor for $t, $t }
        .               )*)
        .           }
        .           
        .           bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
        .           
-- line 283 ----------------------------------------
-- line 368 ----------------------------------------
        .           macro_rules! bitxor_impl {
        .               ($($t:ty)*) => ($(
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
        .                   impl const BitXor for $t {
        .                       type Output = $t;
        .           
        .                       #[inline]
1,668,625 ( 0.35%)              fn bitxor(self, other: $t) -> $t { self ^ other }
        .                   }
        .           
        .                   forward_ref_binop! { impl const BitXor, bitxor for $t, $t }
        .               )*)
        .           }
        .           
        .           bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
        .           
-- line 384 ----------------------------------------

  296,160 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fast_reject.rs
--------------------------------------------------------------------------------
Ir               

-- line 12 ----------------------------------------
      .           pub type SimplifiedType = SimplifiedTypeGen<DefId>;
      .           
      .           /// See `simplify_type`
      .           ///
      .           /// Note that we keep this type generic over the type of identifier it uses
      .           /// because we sometimes need to use SimplifiedTypeGen values as stable sorting
      .           /// keys (in which case we use a DefPathHash as id-type) but in the general case
      .           /// the non-stable but fast to construct DefId-version is the better choice.
206,577 ( 0.04%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]
      .           pub enum SimplifiedTypeGen<D>
      .           where
      .               D: Copy + Debug + Eq,
      .           {
      .               BoolSimplifiedType,
      .               CharSimplifiedType,
      .               IntSimplifiedType(ty::IntTy),
      .               UintSimplifiedType(ty::UintTy),
-- line 28 ----------------------------------------
-- line 78 ----------------------------------------
      .           ///
      .           /// ¹ meaning that if two outermost layers are different, then the whole types are also different.
      .           /// ² FIXME(@lcnr): this seems like it can actually end up being unsound with the way it's used during
      .           ///   candidate selection. We do not consider non blanket impls for `<_ as Trait>::Assoc` even
      .           ///   though `_` can be inferred to a concrete type later at which point a concrete impl
      .           ///   could actually apply. After experimenting for about an hour I wasn't able to cause any issues
      .           ///   this way so I am not going to change this until we actually find an issue as I am really
      .           ///   interesting in getting an actual test for this.
 74,184 ( 0.02%)  pub fn simplify_type(
      .               tcx: TyCtxt<'_>,
      .               ty: Ty<'_>,
      .               can_simplify_params: SimplifyParams,
      .               strip_references: StripReferences,
      .           ) -> Option<SimplifiedType> {
111,276 ( 0.02%)      match *ty.kind() {
      .                   ty::Bool => Some(BoolSimplifiedType),
      .                   ty::Char => Some(CharSimplifiedType),
    504 ( 0.00%)          ty::Int(int_type) => Some(IntSimplifiedType(int_type)),
  3,040 ( 0.00%)          ty::Uint(uint_type) => Some(UintSimplifiedType(uint_type)),
     88 ( 0.00%)          ty::Float(float_type) => Some(FloatSimplifiedType(float_type)),
119,180 ( 0.03%)          ty::Adt(def, _) => Some(AdtSimplifiedType(def.did)),
      .                   ty::Str => Some(StrSimplifiedType),
      .                   ty::Array(..) => Some(ArraySimplifiedType),
      .                   ty::Slice(..) => Some(SliceSimplifiedType),
    296 ( 0.00%)          ty::RawPtr(ptr) => Some(PtrSimplifiedType(ptr.mutbl)),
     12 ( 0.00%)          ty::Dynamic(ref trait_info, ..) => match trait_info.principal_def_id() {
     15 ( 0.00%)              Some(principal_def_id) if !tcx.trait_is_auto(principal_def_id) => {
     27 ( 0.00%)                  Some(TraitSimplifiedType(principal_def_id))
      .                       }
      .                       _ => Some(MarkerTraitObjectSimplifiedType),
      .                   },
  7,724 ( 0.00%)          ty::Ref(_, ty, mutbl) => {
  3,862 ( 0.00%)              if strip_references == StripReferences::Yes {
      .                           // For diagnostics, when recommending similar impls we want to
      .                           // recommend impls even when there is a reference mismatch,
      .                           // so we treat &T and T equivalently in that case.
      .                           simplify_type(tcx, ty, can_simplify_params, strip_references)
      .                       } else {
      .                           Some(RefSimplifiedType(mutbl))
      .                       }
      .                   }
    385 ( 0.00%)          ty::FnDef(def_id, _) | ty::Closure(def_id, _) => Some(ClosureSimplifiedType(def_id)),
      .                   ty::Generator(def_id, _, _) => Some(GeneratorSimplifiedType(def_id)),
      .                   ty::GeneratorWitness(ref tys) => {
      .                       Some(GeneratorWitnessSimplifiedType(tys.skip_binder().len()))
      .                   }
      .                   ty::Never => Some(NeverSimplifiedType),
    378 ( 0.00%)          ty::Tuple(ref tys) => Some(TupleSimplifiedType(tys.len())),
    456 ( 0.00%)          ty::FnPtr(ref f) => Some(FunctionSimplifiedType(f.skip_binder().inputs().len())),
      .                   ty::Projection(_) | ty::Param(_) => {
  4,416 ( 0.00%)              if can_simplify_params == SimplifyParams::Yes {
      .                           // In normalized types, projections don't unify with
      .                           // anything. when lazy normalization happens, this
      .                           // will change. It would still be nice to have a way
      .                           // to deal with known-not-to-unify-with-anything
      .                           // projections (e.g., the likes of <__S as Encoder>::Error).
      .                           Some(ParameterSimplifiedType)
      .                       } else {
      .                           None
      .                       }
      .                   }
      .                   ty::Opaque(def_id, _) => Some(OpaqueSimplifiedType(def_id)),
      .                   ty::Foreign(def_id) => Some(ForeignSimplifiedType(def_id)),
      .                   ty::Placeholder(..) | ty::Bound(..) | ty::Infer(_) | ty::Error(_) => None,
      .               }
166,914 ( 0.04%)  }
      .           
      .           impl<D: Copy + Debug + Ord + Eq> SimplifiedTypeGen<D> {
      .               pub fn def(self) -> Option<D> {
      .                   match self {
      .                       AdtSimplifiedType(d)
      .                       | ForeignSimplifiedType(d)
      .                       | TraitSimplifiedType(d)
      .                       | ClosureSimplifiedType(d)
-- line 151 ----------------------------------------

260,731 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/fast_reject.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 42 ----------------------------------------
      .           /// `stack_size` bytes.
      .           ///
      .           /// The closure `f` is guaranteed to run on a stack with at least `red_zone` bytes, and it will be
      .           /// run on the current stack if there's space available.
      .           #[inline(always)]
      .           pub fn maybe_grow<R, F: FnOnce() -> R>(red_zone: usize, stack_size: usize, callback: F) -> R {
      .               // if we can't guess the remaining stack (unsupported on some platforms) we immediately grow
      .               // the stack and then cache the new stack size (which we do know now because we allocated it.
141,756 ( 0.03%)      let enough_space = match remaining_stack() {
      .                   Some(remaining) => remaining >= red_zone,
      .                   None => false,
      .               };
197,154 ( 0.04%)      if enough_space {
 12,864 ( 0.00%)          callback()
      .               } else {
      .                   grow(stack_size, callback)
      .               }
      .           }
      .           
      .           /// Always creates a new stack for the passed closure to run on.
      .           /// The closure will still be on the same thread as the caller of `grow`.
      .           /// This will allocate a new stack with at least `stack_size` bytes.
-- line 63 ----------------------------------------
-- line 82 ----------------------------------------
      .               _grow(stack_size, dyn_callback);
      .               ret.unwrap()
      .           }
      .           
      .           /// Queries the amount of remaining stack as interpreted by this library.
      .           ///
      .           /// This function will return the amount of stack space left which will be used
      .           /// to determine whether a stack switch should be made or not.
131,436 ( 0.03%)  pub fn remaining_stack() -> Option<usize> {
      .               let current_ptr = current_stack_ptr();
131,436 ( 0.03%)      get_stack_limit().map(|limit| current_ptr - limit)
262,872 ( 0.06%)  }
      .           
      .           psm_stack_information! (
      .               yes {
      .                   fn current_stack_ptr() -> usize {
131,436 ( 0.03%)              psm::stack_pointer() as usize
      .                   }
      .               }
      .               no {
      .                   #[inline(always)]
      .                   fn current_stack_ptr() -> usize {
      .                       unsafe {
      .                           let mut x = std::mem::MaybeUninit::<u8>::uninit();
      .                           // Unlikely to be ever exercised. As a fallback we execute a volatile read to a
-- line 106 ----------------------------------------
-- line 111 ----------------------------------------
      .                           x.as_ptr() as usize
      .                       }
      .                   }
      .               }
      .           );
      .           
      .           thread_local! {
      .               static STACK_LIMIT: Cell<Option<usize>> = Cell::new(unsafe {
      1 ( 0.00%)          guess_os_stack_limit()
      .               })
      .           }
      .           
      .           #[inline(always)]
      .           fn get_stack_limit() -> Option<usize> {
      .               STACK_LIMIT.with(|s| s.get())
      .           }
      .           
-- line 127 ----------------------------------------
-- line 403 ----------------------------------------
      .                       VirtualQuery(
      .                           psm::stack_pointer() as *const _,
      .                           mi.as_mut_ptr(),
      .                           std::mem::size_of::<QueryT>() as SIZE_T,
      .                       );
      .                       Some(mi.assume_init().AllocationBase as usize + get_thread_stack_guarantee() + 0x1000)
      .                   }
      .               } else if #[cfg(any(target_os = "linux", target_os="solaris", target_os = "netbsd"))] {
      2 ( 0.00%)          unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      7 ( 0.00%)              assert_eq!(libc::pthread_getattr_np(libc::pthread_self(),
      .                                                           attr.as_mut_ptr()), 0);
      1 ( 0.00%)              let mut stackaddr = std::ptr::null_mut();
      4 ( 0.00%)              let mut stacksize = 0;
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_getstack(
      .                           attr.as_ptr(), &mut stackaddr, &mut stacksize
      .                       ), 0);
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_destroy(attr.as_mut_ptr()), 0);
      1 ( 0.00%)              Some(stackaddr as usize)
      3 ( 0.00%)          }
      .               } else if #[cfg(any(target_os = "freebsd", target_os = "dragonfly"))] {
      .                   unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      .                       assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      .                       assert_eq!(libc::pthread_attr_get_np(libc::pthread_self(), attr.as_mut_ptr()), 0);
      .                       let mut stackaddr = std::ptr::null_mut();
      .                       let mut stacksize = 0;
      .                       assert_eq!(libc::pthread_attr_getstack(
-- line 431 ----------------------------------------

 89,535 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 168 ----------------------------------------
      .               pub self_ty: Ty<'tcx>,
      .               pub trait_ref: Option<TraitRef<'tcx>>,
      .               pub predicates: Vec<Predicate<'tcx>>,
      .           }
      .           
      .           #[derive(
      .               Copy,
      .               Clone,
 36,539 ( 0.01%)      PartialEq,
      .               Eq,
      .               Hash,
      .               TyEncodable,
  7,036 ( 0.00%)      TyDecodable,
      .               HashStable,
      .               Debug,
      .               TypeFoldable
      .           )]
      .           pub enum ImplPolarity {
      .               /// `impl Trait for Type`
      .               Positive,
      .               /// `impl !Trait for Type`
-- line 188 ----------------------------------------
-- line 210 ----------------------------------------
      .                   match self {
      .                       Self::Positive => f.write_str("positive"),
      .                       Self::Negative => f.write_str("negative"),
      .                       Self::Reservation => f.write_str("reservation"),
      .                   }
      .               }
      .           }
      .           
142,377 ( 0.03%)  #[derive(Clone, Debug, PartialEq, Eq, Copy, Hash, TyEncodable, TyDecodable, HashStable)]
      .           pub enum Visibility {
      .               /// Visible everywhere (including in other crates).
      .               Public,
      .               /// Visible only in the given crate-local module.
      .               Restricted(DefId),
      .               /// Not visible anywhere in the local crate. This is the visibility of private external items.
      .               Invisible,
      .           }
      .           
 33,046 ( 0.01%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]
      .           pub enum BoundConstness {
      .               /// `T: Trait`
      .               NotConst,
      .               /// `T: ~const Trait`
      .               ///
      .               /// Requires resolving to const only when we are in a const context.
      .               ConstIfConst,
      .           }
      .           
      .           impl BoundConstness {
      .               /// Reduce `self` and `constness` to two possible combined states instead of four.
 16,252 ( 0.00%)      pub fn and(&mut self, constness: hir::Constness) -> hir::Constness {
 24,378 ( 0.01%)          match (constness, self) {
      .                       (hir::Constness::Const, BoundConstness::ConstIfConst) => hir::Constness::Const,
      .                       (_, this) => {
 15,826 ( 0.00%)                  *this = BoundConstness::NotConst;
      .                           hir::Constness::NotConst
      .                       }
      .                   }
  8,126 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Display for BoundConstness {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   match self {
      .                       Self::NotConst => f.write_str("normal"),
      .                       Self::ConstIfConst => f.write_str("`~const`"),
      .                   }
-- line 256 ----------------------------------------
-- line 275 ----------------------------------------
      .               /// Tuple containing the types of closure captures after the feature `capture_disjoint_fields`
      .               pub after_feature_tys: Ty<'tcx>,
      .           }
      .           
      .           pub trait DefIdTree: Copy {
      .               fn parent(self, id: DefId) -> Option<DefId>;
      .           
      .               fn is_descendant_of(self, mut descendant: DefId, ancestor: DefId) -> bool {
      2 ( 0.00%)          if descendant.krate != ancestor.krate {
      .                       return false;
      .                   }
      .           
  2,218 ( 0.00%)          while descendant != ancestor {
  2,240 ( 0.00%)              match self.parent(descendant) {
      .                           Some(parent) => descendant = parent,
      .                           None => return false,
      .                       }
      .                   }
      .                   true
      .               }
      .           }
      .           
      .           impl<'tcx> DefIdTree for TyCtxt<'tcx> {
  1,306 ( 0.00%)      fn parent(self, id: DefId) -> Option<DefId> {
      .                   self.def_key(id).parent.map(|index| DefId { index, ..id })
  1,959 ( 0.00%)      }
      .           }
      .           
      .           impl Visibility {
     60 ( 0.00%)      pub fn from_hir(visibility: &hir::Visibility<'_>, id: hir::HirId, tcx: TyCtxt<'_>) -> Self {
    180 ( 0.00%)          match visibility.node {
      .                       hir::VisibilityKind::Public => Visibility::Public,
      .                       hir::VisibilityKind::Crate(_) => Visibility::Restricted(DefId::local(CRATE_DEF_INDEX)),
      .                       hir::VisibilityKind::Restricted { ref path, .. } => match path.res {
      .                           // If there is no resolution, `resolve` will have already reported an error, so
      .                           // assume that the visibility is public to avoid reporting more privacy errors.
      .                           Res::Err => Visibility::Public,
      .                           def => Visibility::Restricted(def.def_id()),
      .                       },
      .                       hir::VisibilityKind::Inherited => {
    112 ( 0.00%)                  Visibility::Restricted(tcx.parent_module(id).to_def_id())
      .                       }
      .                   }
     60 ( 0.00%)      }
      .           
      .               /// Returns `true` if an item with this visibility is accessible from the given block.
 10,458 ( 0.00%)      pub fn is_accessible_from<T: DefIdTree>(self, module: DefId, tree: T) -> bool {
 82,560 ( 0.02%)          let restriction = match self {
      .                       // Public items are visible everywhere.
      .                       Visibility::Public => return true,
      .                       // Private items from other crates are visible nowhere.
      .                       Visibility::Invisible => return false,
      .                       // Restricted items are visible in an arbitrary local module.
    951 ( 0.00%)              Visibility::Restricted(other) if other.krate != module.krate => return false,
      .                       Visibility::Restricted(module) => module,
      .                   };
      .           
      .                   tree.is_descendant_of(module, restriction)
 10,458 ( 0.00%)      }
      .           
      .               /// Returns `true` if this visibility is at least as accessible as the given visibility
    882 ( 0.00%)      pub fn is_at_least<T: DefIdTree>(self, vis: Visibility, tree: T) -> bool {
  5,266 ( 0.00%)          let vis_restriction = match vis {
      .                       Visibility::Public => return self == Visibility::Public,
      .                       Visibility::Invisible => return true,
      .                       Visibility::Restricted(module) => module,
      .                   };
      .           
      .                   self.is_accessible_from(vis_restriction, tree)
    882 ( 0.00%)      }
      .           
      .               // Returns `true` if this item is visible anywhere in the local crate.
      .               pub fn is_visible_locally(self) -> bool {
      .                   match self {
      .                       Visibility::Public => true,
      .                       Visibility::Restricted(def_id) => def_id.is_local(),
      .                       Visibility::Invisible => false,
      .                   }
      .               }
      .           
      .               pub fn is_public(self) -> bool {
  1,684 ( 0.00%)          matches!(self, Visibility::Public)
    842 ( 0.00%)      }
      .           }
      .           
      .           /// The crate variances map is computed during typeck and contains the
      .           /// variance of every item in the local crate. You should not use it
      .           /// directly, because to do so will make your pass dependent on the
      .           /// HIR of every item in the local crate. Instead, use
      .           /// `tcx.variances_of()` to get the variance for a *particular*
      .           /// item.
-- line 365 ----------------------------------------
-- line 509 ----------------------------------------
      .           #[derive(Clone, Copy, Lift)]
      .           pub struct Predicate<'tcx> {
      .               inner: &'tcx PredicateInner<'tcx>,
      .           }
      .           
      .           impl<'tcx> PartialEq for Predicate<'tcx> {
      .               fn eq(&self, other: &Self) -> bool {
      .                   // `self.kind` is always interned.
 47,400 ( 0.01%)          ptr::eq(self.inner, other.inner)
 47,287 ( 0.01%)      }
      .           }
      .           
      .           impl Hash for Predicate<'_> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   (self.inner as *const PredicateInner<'_>).hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Predicate<'tcx> {}
      .           
      .           impl<'tcx> Predicate<'tcx> {
      .               /// Gets the inner `Binder<'tcx, PredicateKind<'tcx>>`.
      .               #[inline]
      .               pub fn kind(self) -> Binder<'tcx, PredicateKind<'tcx>> {
207,071 ( 0.04%)          self.inner.kind
      .               }
      .           
      .               /// Flips the polarity of a Predicate.
      .               ///
      .               /// Given `T: Trait` predicate it returns `T: !Trait` and given `T: !Trait` returns `T: Trait`.
      .               pub fn flip_polarity(&self, tcx: TyCtxt<'tcx>) -> Option<Predicate<'tcx>> {
      .                   let kind = self
      .                       .inner
-- line 541 ----------------------------------------
-- line 567 ----------------------------------------
      .                       flags: _,
      .                       outer_exclusive_binder: _,
      .                   } = self.inner;
      .           
      .                   kind.hash_stable(hcx, hasher);
      .               }
      .           }
      .           
968,850 ( 0.20%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
646,673 ( 0.14%)  #[derive(HashStable, TypeFoldable)]
      .           pub enum PredicateKind<'tcx> {
      .               /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be
      .               /// the `Self` type of the trait reference and `A`, `B`, and `C`
      .               /// would be the type parameters.
      .               Trait(TraitPredicate<'tcx>),
      .           
      .               /// `where 'a: 'b`
      .               RegionOutlives(RegionOutlivesPredicate<'tcx>),
-- line 584 ----------------------------------------
-- line 594 ----------------------------------------
      .               WellFormed(GenericArg<'tcx>),
      .           
      .               /// Trait must be object-safe.
      .               ObjectSafe(DefId),
      .           
      .               /// No direct syntax. May be thought of as `where T: FnFoo<...>`
      .               /// for some substitutions `...` and `T` being a closure type.
      .               /// Satisfied (or refuted) once we know the closure's kind.
    165 ( 0.00%)      ClosureKind(DefId, SubstsRef<'tcx>, ClosureKind),
      .           
      .               /// `T1 <: T2`
      .               ///
      .               /// This obligation is created most often when we have two
      .               /// unresolved type variables and hence don't have enough
      .               /// information to process the subtyping obligation yet.
     73 ( 0.00%)      Subtype(SubtypePredicate<'tcx>),
      .           
      .               /// `T1` coerced to `T2`
      .               ///
      .               /// Like a subtyping obligation, this is created most often
      .               /// when we have two unresolved type variables and hence
      .               /// don't have enough information to process the coercion
      .               /// obligation yet. At the moment, we actually process coercions
      .               /// very much like subtyping and don't handle the full coercion
-- line 617 ----------------------------------------
-- line 645 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> Predicate<'tcx> {
      .               /// Performs a substitution suitable for going from a
      .               /// poly-trait-ref to supertraits that must hold if that
      .               /// poly-trait-ref holds. This is slightly different from a normal
      .               /// substitution in terms of what happens with bound regions. See
      .               /// lengthy comment below for details.
  5,139 ( 0.00%)      pub fn subst_supertrait(
      .                   self,
      .                   tcx: TyCtxt<'tcx>,
      .                   trait_ref: &ty::PolyTraitRef<'tcx>,
      .               ) -> Predicate<'tcx> {
      .                   // The interaction between HRTB and supertraits is not entirely
      .                   // obvious. Let me walk you (and myself) through an example.
      .                   //
      .                   // Let's start with an easy case. Consider two traits:
-- line 661 ----------------------------------------
-- line 731 ----------------------------------------
      .                   //    ['x, 'b]
      .                   let bound_pred = self.kind();
      .                   let pred_bound_vars = bound_pred.bound_vars();
      .                   let trait_bound_vars = trait_ref.bound_vars();
      .                   // 1) Self: Bar1<'a, '^0.0> -> Self: Bar1<'a, '^0.1>
      .                   let shifted_pred =
      .                       tcx.shift_bound_var_indices(trait_bound_vars.len(), bound_pred.skip_binder());
      .                   // 2) Self: Bar1<'a, '^0.1> -> T: Bar1<'^0.0, '^0.1>
    571 ( 0.00%)          let new = shifted_pred.subst(tcx, trait_ref.skip_binder().substs);
      .                   // 3) ['x] + ['b] -> ['x, 'b]
      .                   let bound_vars =
      .                       tcx.mk_bound_variable_kinds(trait_bound_vars.iter().chain(pred_bound_vars));
  5,139 ( 0.00%)          tcx.reuse_or_mk_predicate(self, ty::Binder::bind_with_vars(new, bound_vars))
  3,997 ( 0.00%)      }
      .           }
      .           
     86 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
 56,389 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct TraitPredicate<'tcx> {
      .               pub trait_ref: TraitRef<'tcx>,
      .           
118,508 ( 0.02%)      pub constness: BoundConstness,
      .           
 82,450 ( 0.02%)      pub polarity: ImplPolarity,
      .           }
      .           
      .           pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;
      .           
      .           impl<'tcx> TraitPredicate<'tcx> {
 61,600 ( 0.01%)      pub fn remap_constness(&mut self, tcx: TyCtxt<'tcx>, param_env: &mut ParamEnv<'tcx>) {
 53,900 ( 0.01%)          if unlikely!(Some(self.trait_ref.def_id) == tcx.lang_items().drop_trait()) {
      .                       // remap without changing constness of this predicate.
      .                       // this is because `T: ~const Drop` has a different meaning to `T: Drop`
      .                       param_env.remap_constness_with(self.constness)
      .                   } else {
  7,700 ( 0.00%)              *param_env = param_env.with_constness(self.constness.and(param_env.constness()))
      .                   }
 46,200 ( 0.01%)      }
      .           
      .               /// Remap the constness of this predicate before emitting it for diagnostics.
      .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
      .                   // this is different to `remap_constness` that callees want to print this predicate
      .                   // in case of selection errors. `T: ~const Drop` bounds cannot end up here when the
      .                   // param_env is not const because we it is always satisfied in non-const contexts.
      .                   if let hir::Constness::NotConst = param_env.constness() {
      .                       self.constness = ty::BoundConstness::NotConst;
      .                   }
      .               }
      .           
      .               pub fn def_id(self) -> DefId {
  7,616 ( 0.00%)          self.trait_ref.def_id
  3,808 ( 0.00%)      }
      .           
 11,224 ( 0.00%)      pub fn self_ty(self) -> Ty<'tcx> {
 33,672 ( 0.01%)          self.trait_ref.self_ty()
 22,448 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> PolyTraitPredicate<'tcx> {
      .               pub fn def_id(self) -> DefId {
      .                   // Ok to skip binder since trait `DefId` does not care about regions.
      .                   self.skip_binder().def_id()
  5,739 ( 0.00%)      }
      .           
      .               pub fn self_ty(self) -> ty::Binder<'tcx, Ty<'tcx>> {
      .                   self.map_bound(|trait_ref| trait_ref.self_ty())
      .               }
      .           
      .               /// Remap the constness of this predicate before emitting it for diagnostics.
      .               pub fn remap_constness_diag(&mut self, param_env: ParamEnv<'tcx>) {
      .                   *self = self.map_bound(|mut p| {
      .                       p.remap_constness_diag(param_env);
      .                       p
      .                   });
      .               }
      .           }
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
  5,076 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
  5,443 ( 0.00%)  pub struct OutlivesPredicate<A, B>(pub A, pub B); // `A: B`
      .           pub type RegionOutlivesPredicate<'tcx> = OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>;
      .           pub type TypeOutlivesPredicate<'tcx> = OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>;
      .           pub type PolyRegionOutlivesPredicate<'tcx> = ty::Binder<'tcx, RegionOutlivesPredicate<'tcx>>;
      .           pub type PolyTypeOutlivesPredicate<'tcx> = ty::Binder<'tcx, TypeOutlivesPredicate<'tcx>>;
      .           
      .           /// Encodes that `a` must be a subtype of `b`. The `a_is_expected` flag indicates
      .           /// whether the `a` type is the type that we should label as "expected" when
      .           /// presenting user diagnostics.
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
    277 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct SubtypePredicate<'tcx> {
    464 ( 0.00%)      pub a_is_expected: bool,
      .               pub a: Ty<'tcx>,
      .               pub b: Ty<'tcx>,
      .           }
      .           pub type PolySubtypePredicate<'tcx> = ty::Binder<'tcx, SubtypePredicate<'tcx>>;
      .           
      .           /// Encodes that we have to coerce *from* the `a` type to the `b` type.
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]
      .           #[derive(HashStable, TypeFoldable)]
      .           pub struct CoercePredicate<'tcx> {
      .               pub a: Ty<'tcx>,
      .               pub b: Ty<'tcx>,
      .           }
      .           pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;
      .           
  3,368 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]
  3,500 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub enum Term<'tcx> {
      .               Ty(Ty<'tcx>),
      .               Const(&'tcx Const<'tcx>),
      .           }
      .           
      .           impl<'tcx> From<Ty<'tcx>> for Term<'tcx> {
      .               fn from(ty: Ty<'tcx>) -> Self {
      .                   Term::Ty(ty)
    441 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> From<&'tcx Const<'tcx>> for Term<'tcx> {
      .               fn from(c: &'tcx Const<'tcx>) -> Self {
      .                   Term::Const(c)
      .               }
      .           }
      .           
      .           impl<'tcx> Term<'tcx> {
      .               pub fn ty(&self) -> Option<Ty<'tcx>> {
    578 ( 0.00%)          if let Term::Ty(ty) = self { Some(ty) } else { None }
    289 ( 0.00%)      }
      .           }
      .           
      .           /// This kind of predicate has no *direct* correspondent in the
      .           /// syntax, but it roughly corresponds to the syntactic forms:
      .           ///
      .           /// 1. `T: TraitRef<..., Item = Type>`
      .           /// 2. `<T as TraitRef<...>>::Item == Type` (NYI)
      .           ///
      .           /// In particular, form #1 is "desugared" to the combination of a
      .           /// normal trait predicate (`T: TraitRef<...>`) and one of these
      .           /// predicates. Form #2 is a broader form in that it also permits
      .           /// equality between arbitrary types. Processing an instance of
      .           /// Form #2 eventually yields one of these `ProjectionPredicate`
      .           /// instances to normalize the LHS.
      7 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    694 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
      .           pub struct ProjectionPredicate<'tcx> {
      .               pub projection_ty: ProjectionTy<'tcx>,
  1,885 ( 0.00%)      pub term: Term<'tcx>,
      .           }
      .           
      .           pub type PolyProjectionPredicate<'tcx> = Binder<'tcx, ProjectionPredicate<'tcx>>;
      .           
      .           impl<'tcx> PolyProjectionPredicate<'tcx> {
      .               /// Returns the `DefId` of the trait of the associated item being projected.
      .               #[inline]
      .               pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
     44 ( 0.00%)          self.skip_binder().projection_ty.trait_def_id(tcx)
      .               }
      .           
      .               /// Get the [PolyTraitRef] required for this projection to be well formed.
      .               /// Note that for generic associated types the predicates of the associated
      .               /// type also need to be checked.
      .               #[inline]
      .               pub fn required_poly_trait_ref(&self, tcx: TyCtxt<'tcx>) -> PolyTraitRef<'tcx> {
      .                   // Note: unlike with `TraitRef::to_poly_trait_ref()`,
      .                   // `self.0.trait_ref` is permitted to have escaping regions.
      .                   // This is because here `self` has a `Binder` and so does our
      .                   // return value, so we are preserving the number of binding
      .                   // levels.
     22 ( 0.00%)          self.map_bound(|predicate| predicate.projection_ty.trait_ref(tcx))
      .               }
      .           
      .               pub fn term(&self) -> Binder<'tcx, Term<'tcx>> {
      .                   self.map_bound(|predicate| predicate.term)
      .               }
      .           
      .               /// The `DefId` of the `TraitItem` for the associated type.
      .               ///
      .               /// Note that this is not the `DefId` of the `TraitRef` containing this
      .               /// associated type, which is in `tcx.associated_item(projection_def_id()).container`.
      .               pub fn projection_def_id(&self) -> DefId {
      .                   // Ok to skip binder since trait `DefId` does not care about regions.
    106 ( 0.00%)          self.skip_binder().projection_ty.item_def_id
     53 ( 0.00%)      }
      .           }
      .           
      .           pub trait ToPolyTraitRef<'tcx> {
      .               fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;
      .           }
      .           
      .           impl<'tcx> ToPolyTraitRef<'tcx> for PolyTraitPredicate<'tcx> {
    120 ( 0.00%)      fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx> {
    120 ( 0.00%)          self.map_bound_ref(|trait_pred| trait_pred.trait_ref)
    120 ( 0.00%)      }
      .           }
      .           
      .           pub trait ToPredicate<'tcx> {
      .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {
      .               #[inline(always)]
      .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
      .                   tcx.mk_predicate(self)
      .               }
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for PolyTraitPredicate<'tcx> {
  1,929 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
  9,645 ( 0.00%)          self.map_bound(PredicateKind::Trait).to_predicate(tcx)
  3,858 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for PolyRegionOutlivesPredicate<'tcx> {
      .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
      .                   self.map_bound(PredicateKind::RegionOutlives).to_predicate(tcx)
      .               }
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for PolyTypeOutlivesPredicate<'tcx> {
      .               fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
      .                   self.map_bound(PredicateKind::TypeOutlives).to_predicate(tcx)
      .               }
      .           }
      .           
      .           impl<'tcx> ToPredicate<'tcx> for PolyProjectionPredicate<'tcx> {
    124 ( 0.00%)      fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {
    620 ( 0.00%)          self.map_bound(PredicateKind::Projection).to_predicate(tcx)
    248 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Predicate<'tcx> {
    986 ( 0.00%)      pub fn to_opt_poly_trait_pred(self) -> Option<PolyTraitPredicate<'tcx>> {
      .                   let predicate = self.kind();
  2,958 ( 0.00%)          match predicate.skip_binder() {
  1,970 ( 0.00%)              PredicateKind::Trait(t) => Some(predicate.rebind(t)),
      .                       PredicateKind::Projection(..)
      .                       | PredicateKind::Subtype(..)
      .                       | PredicateKind::Coerce(..)
      .                       | PredicateKind::RegionOutlives(..)
      .                       | PredicateKind::WellFormed(..)
      .                       | PredicateKind::ObjectSafe(..)
      .                       | PredicateKind::ClosureKind(..)
      .                       | PredicateKind::TypeOutlives(..)
      .                       | PredicateKind::ConstEvaluatable(..)
      .                       | PredicateKind::ConstEquate(..)
     99 ( 0.00%)              | PredicateKind::TypeWellFormedFromEnv(..) => None,
      .                   }
    986 ( 0.00%)      }
      .           
      .               pub fn to_opt_type_outlives(self) -> Option<PolyTypeOutlivesPredicate<'tcx>> {
      .                   let predicate = self.kind();
      .                   match predicate.skip_binder() {
      .                       PredicateKind::TypeOutlives(data) => Some(predicate.rebind(data)),
      .                       PredicateKind::Trait(..)
      .                       | PredicateKind::Projection(..)
      .                       | PredicateKind::Subtype(..)
-- line 987 ----------------------------------------
-- line 1011 ----------------------------------------
      .           /// Example:
      .           ///
      .           ///     struct Foo<T, U: Bar<T>> { ... }
      .           ///
      .           /// Here, the `GenericPredicates` for `Foo` would contain a list of bounds like
      .           /// `[[], [U:Bar<T>]]`. Now if there were some particular reference
      .           /// like `Foo<isize,usize>`, then the `InstantiatedPredicates` would be `[[],
      .           /// [usize:Bar<isize>]]`.
 12,494 ( 0.00%)  #[derive(Clone, Debug, TypeFoldable)]
      .           pub struct InstantiatedPredicates<'tcx> {
      .               pub predicates: Vec<Predicate<'tcx>>,
      .               pub spans: Vec<Span>,
      .           }
      .           
      .           impl<'tcx> InstantiatedPredicates<'tcx> {
      2 ( 0.00%)      pub fn empty() -> InstantiatedPredicates<'tcx> {
 13,172 ( 0.00%)          InstantiatedPredicates { predicates: vec![], spans: vec![] }
      2 ( 0.00%)      }
      .           
      .               pub fn is_empty(&self) -> bool {
      .                   self.predicates.is_empty()
     35 ( 0.00%)      }
      .           }
      .           
      .           #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, TyEncodable, TyDecodable, TypeFoldable)]
      .           pub struct OpaqueTypeKey<'tcx> {
      .               pub def_id: DefId,
      .               pub substs: SubstsRef<'tcx>,
      .           }
      .           
-- line 1040 ----------------------------------------
-- line 1091 ----------------------------------------
      .               /// ```
      .               /// for<'a> fn(&'a u32)
      .               /// ```
      .               ///
      .               /// Once we "enter" into this `for<'a>` quantifier, we are in a
      .               /// new universe that extends `U` -- in this new universe, we can
      .               /// name the region `'a`, but that region was not nameable from
      .               /// `U` because it was not in scope there.
  4,378 ( 0.00%)      pub fn next_universe(self) -> UniverseIndex {
      .                   UniverseIndex::from_u32(self.private.checked_add(1).unwrap())
 13,134 ( 0.00%)      }
      .           
      .               /// Returns `true` if `self` can name a name from `other` -- in other words,
      .               /// if the set of names in `self` is a superset of those in
      .               /// `other` (`self >= other`).
      .               pub fn can_name(self, other: UniverseIndex) -> bool {
  7,860 ( 0.00%)          self.private >= other.private
  3,930 ( 0.00%)      }
      .           
      .               /// Returns `true` if `self` cannot name some names from `other` -- in other
      .               /// words, if the set of names in `self` is a strict subset of
      .               /// those in `other` (`self < other`).
      .               pub fn cannot_name(self, other: UniverseIndex) -> bool {
     74 ( 0.00%)          self.private < other.private
     37 ( 0.00%)      }
      .           }
      .           
      .           /// The "placeholder index" fully defines a placeholder region, type, or const. Placeholders are
      .           /// identified by both a universe, as well as a name residing within that universe. Distinct bound
      .           /// regions/types/consts within the same universe simply have an unknown relationship to one
      .           /// another.
      .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, PartialOrd, Ord)]
      .           pub struct Placeholder<T> {
    565 ( 0.00%)      pub universe: UniverseIndex,
    388 ( 0.00%)      pub name: T,
      .           }
      .           
      .           impl<'a, T> HashStable<StableHashingContext<'a>> for Placeholder<T>
      .           where
      .               T: HashStable<StableHashingContext<'a>>,
      .           {
      .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
      .                   self.universe.hash_stable(hcx, hasher);
-- line 1133 ----------------------------------------
-- line 1194 ----------------------------------------
      .           /// aren't allowed to call that query: it is equal to `type_of(const_param)` which is
      .           /// trivial to compute.
      .           ///
      .           /// If we now want to use that constant in a place which potentionally needs its type
      .           /// we also pass the type of its `const_param`. This is the point of `WithOptConstParam`,
      .           /// except that instead of a `Ty` we bundle the `DefId` of the const parameter.
      .           /// Meaning that we need to use `type_of(const_param_did)` if `const_param_did` is `Some`
      .           /// to get the type of `did`.
  1,590 ( 0.00%)  #[derive(Copy, Clone, Debug, TypeFoldable, Lift, TyEncodable, TyDecodable)]
      .           #[derive(PartialEq, Eq, PartialOrd, Ord)]
      .           #[derive(Hash, HashStable)]
      .           pub struct WithOptConstParam<T> {
  1,077 ( 0.00%)      pub did: T,
      .               /// The `DefId` of the corresponding generic parameter in case `did` is
      .               /// a const argument.
      .               ///
      .               /// Note that even if `did` is a const argument, this may still be `None`.
      .               /// All queries taking `WithOptConstParam` start by calling `tcx.opt_const_param_of(def.did)`
      .               /// to potentially update `param_did` in the case it is `None`.
  3,335 ( 0.00%)      pub const_param_did: Option<DefId>,
      .           }
      .           
      .           impl<T> WithOptConstParam<T> {
      .               /// Creates a new `WithOptConstParam` setting `const_param_did` to `None`.
      .               #[inline(always)]
      .               pub fn unknown(did: T) -> WithOptConstParam<T> {
      .                   WithOptConstParam { did, const_param_did: None }
  2,415 ( 0.00%)      }
      .           }
      .           
      .           impl WithOptConstParam<LocalDefId> {
      .               /// Returns `Some((did, param_did))` if `def_id` is a const argument,
      .               /// `None` otherwise.
      .               #[inline(always)]
      .               pub fn try_lookup(did: LocalDefId, tcx: TyCtxt<'_>) -> Option<(LocalDefId, DefId)> {
      .                   tcx.opt_const_param_of(did).map(|param_did| (did, param_did))
      .               }
      .           
      .               /// In case `self` is unknown but `self.did` is a const argument, this returns
      .               /// a `WithOptConstParam` with the correct `const_param_did`.
      .               #[inline(always)]
      .               pub fn try_upgrade(self, tcx: TyCtxt<'_>) -> Option<WithOptConstParam<LocalDefId>> {
    335 ( 0.00%)          if self.const_param_did.is_none() {
    551 ( 0.00%)              if let const_param_did @ Some(_) = tcx.opt_const_param_of(self.did) {
      .                           return Some(WithOptConstParam { did: self.did, const_param_did });
      .                       }
      .                   }
      .           
      .                   None
      .               }
      .           
      .               pub fn to_global(self) -> WithOptConstParam<DefId> {
      .                   WithOptConstParam { did: self.did.to_def_id(), const_param_did: self.const_param_did }
     22 ( 0.00%)      }
      .           
     44 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
     69 ( 0.00%)          if let Some(did) = self.const_param_did { did } else { self.did.to_def_id() }
     11 ( 0.00%)      }
      .           }
      .           
      .           impl WithOptConstParam<DefId> {
    310 ( 0.00%)      pub fn as_local(self) -> Option<WithOptConstParam<LocalDefId>> {
      .                   self.did
      .                       .as_local()
      .                       .map(|did| WithOptConstParam { did, const_param_did: self.const_param_did })
    310 ( 0.00%)      }
      .           
      .               pub fn as_const_arg(self) -> Option<(LocalDefId, DefId)> {
    819 ( 0.00%)          if let Some(param_did) = self.const_param_did {
    329 ( 0.00%)              if let Some(did) = self.did.as_local() {
      .                           return Some((did, param_did));
      .                       }
      .                   }
      .           
      .                   None
    384 ( 0.00%)      }
      .           
      .               pub fn is_local(self) -> bool {
      .                   self.did.is_local()
      .               }
      .           
     90 ( 0.00%)      pub fn def_id_for_type_of(self) -> DefId {
      .                   self.const_param_did.unwrap_or(self.did)
     90 ( 0.00%)      }
      .           }
      .           
      .           /// When type checking, we use the `ParamEnv` to track
      .           /// details about the set of where-clauses that are in scope at this
      .           /// particular point.
      .           #[derive(Copy, Clone, Hash, PartialEq, Eq)]
      .           pub struct ParamEnv<'tcx> {
      .               /// This packs both caller bounds and the reveal enum into one pointer.
-- line 1285 ----------------------------------------
-- line 1302 ----------------------------------------
      .               reveal: traits::Reveal,
      .               constness: hir::Constness,
      .           }
      .           
      .           unsafe impl rustc_data_structures::tagged_ptr::Tag for ParamTag {
      .               const BITS: usize = 2;
      .               #[inline]
      .               fn into_usize(self) -> usize {
 33,187 ( 0.01%)          match self {
      .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst } => 0,
      .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst } => 1,
      .                       Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const } => 2,
      .                       Self { reveal: traits::Reveal::All, constness: hir::Constness::Const } => 3,
      .                   }
      .               }
      .               #[inline]
      .               unsafe fn from_usize(ptr: usize) -> Self {
176,337 ( 0.04%)          match ptr {
      .                       0 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::NotConst },
      .                       1 => Self { reveal: traits::Reveal::All, constness: hir::Constness::NotConst },
      .                       2 => Self { reveal: traits::Reveal::UserFacing, constness: hir::Constness::Const },
      .                       3 => Self { reveal: traits::Reveal::All, constness: hir::Constness::Const },
      .                       _ => std::hint::unreachable_unchecked(),
      .                   }
      .               }
      .           }
-- line 1327 ----------------------------------------
-- line 1405 ----------------------------------------
      .               pub fn new(
      .                   caller_bounds: &'tcx List<Predicate<'tcx>>,
      .                   reveal: Reveal,
      .                   constness: hir::Constness,
      .               ) -> Self {
      .                   ty::ParamEnv { packed: CopyTaggedPtr::new(caller_bounds, ParamTag { reveal, constness }) }
      .               }
      .           
     46 ( 0.00%)      pub fn with_user_facing(mut self) -> Self {
      .                   self.packed.set_tag(ParamTag { reveal: Reveal::UserFacing, ..self.packed.tag() });
      .                   self
     46 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn with_constness(mut self, constness: hir::Constness) -> Self {
      .                   self.packed.set_tag(ParamTag { constness, ..self.packed.tag() });
      .                   self
      .               }
      .           
      .               #[inline]
-- line 1424 ----------------------------------------
-- line 1430 ----------------------------------------
      .               #[inline]
      .               pub fn without_const(mut self) -> Self {
      .                   self.packed.set_tag(ParamTag { constness: hir::Constness::NotConst, ..self.packed.tag() });
      .                   self
      .               }
      .           
      .               #[inline]
      .               pub fn remap_constness_with(&mut self, mut constness: ty::BoundConstness) {
  1,972 ( 0.00%)          *self = self.with_constness(constness.and(self.constness()))
      .               }
      .           
      .               /// Returns a new parameter environment with the same clauses, but
      .               /// which "reveals" the true results of projections in all cases
      .               /// (even for associated types that are specializable). This is
      .               /// the desired behavior during codegen and certain other special
      .               /// contexts; normally though we want to use `Reveal::UserFacing`,
      .               /// which is the default.
      .               /// All opaque types in the caller_bounds of the `ParamEnv`
      .               /// will be normalized to their underlying types.
      .               /// See PR #65989 and issue #65918 for more details
  1,552 ( 0.00%)      pub fn with_reveal_all_normalized(self, tcx: TyCtxt<'tcx>) -> Self {
      .                   if self.packed.tag().reveal == traits::Reveal::All {
      .                       return self;
      .                   }
      .           
      .                   ParamEnv::new(
      .                       tcx.normalize_opaque_types(self.caller_bounds()),
      .                       Reveal::All,
      .                       self.constness(),
      .                   )
  1,746 ( 0.00%)      }
      .           
      .               /// Returns this same environment but with no caller bounds.
      .               #[inline]
      .               pub fn without_caller_bounds(self) -> Self {
      .                   Self::new(List::empty(), self.reveal(), self.constness())
      .               }
      .           
      .               /// Creates a suitable environment in which to perform trait
-- line 1468 ----------------------------------------
-- line 1472 ----------------------------------------
      .               /// pair it with the empty environment. This improves caching and is generally
      .               /// invisible.
      .               ///
      .               /// N.B., we preserve the environment when type-checking because it
      .               /// is possible for the user to have wacky where-clauses like
      .               /// `where Box<u32>: Copy`, which are clearly never
      .               /// satisfiable. We generally want to behave as if they were true,
      .               /// although the surrounding function is never reachable.
 14,928 ( 0.00%)      pub fn and<T: TypeFoldable<'tcx>>(self, value: T) -> ParamEnvAnd<'tcx, T> {
      .                   match self.reveal() {
      .                       Reveal::UserFacing => ParamEnvAnd { param_env: self, value },
      .           
      .                       Reveal::All => {
    394 ( 0.00%)                  if value.is_global() {
      .                               ParamEnvAnd { param_env: self.without_caller_bounds(), value }
      .                           } else {
      .                               ParamEnvAnd { param_env: self, value }
      .                           }
      .                       }
      .                   }
 14,148 ( 0.00%)      }
      .           }
      .           
      .           // FIXME(ecstaticmorse): Audit all occurrences of `without_const().to_predicate(tcx)` to ensure that
      .           // the constness of trait bounds is being propagated correctly.
      .           impl<'tcx> PolyTraitRef<'tcx> {
      .               #[inline]
      .               pub fn with_constness(self, constness: BoundConstness) -> PolyTraitPredicate<'tcx> {
     70 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
      .                       trait_ref,
      .                       constness,
      .                       polarity: ty::ImplPolarity::Positive,
      .                   })
      .               }
      .               #[inline]
      .               pub fn without_const(self) -> PolyTraitPredicate<'tcx> {
      .                   self.with_constness(BoundConstness::NotConst)
      .               }
      .           }
      .           
    388 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]
      .           pub struct ParamEnvAnd<'tcx, T> {
  7,571 ( 0.00%)      pub param_env: ParamEnv<'tcx>,
152,639 ( 0.03%)      pub value: T,
      .           }
      .           
      .           impl<'tcx, T> ParamEnvAnd<'tcx, T> {
      .               pub fn into_parts(self) -> (ParamEnv<'tcx>, T) {
      .                   (self.param_env, self.value)
      .               }
      .           
      .               #[inline]
      .               pub fn without_const(mut self) -> Self {
      .                   self.param_env = self.param_env.without_const();
  1,192 ( 0.00%)          self
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T> HashStable<StableHashingContext<'a>> for ParamEnvAnd<'tcx, T>
      .           where
      .               T: HashStable<StableHashingContext<'a>>,
      .           {
      .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
-- line 1534 ----------------------------------------
-- line 1542 ----------------------------------------
      .           #[derive(Copy, Clone, Debug, HashStable)]
      .           pub struct Destructor {
      .               /// The `DefId` of the destructor method
      .               pub did: DefId,
      .               /// The constness of the destructor method
      .               pub constness: hir::Constness,
      .           }
      .           
    202 ( 0.00%)  bitflags! {
  1,026 ( 0.00%)      #[derive(HashStable, TyEncodable, TyDecodable)]
      .               pub struct VariantFlags: u32 {
      .                   const NO_VARIANT_FLAGS        = 0;
      .                   /// Indicates whether the field list of this variant is `#[non_exhaustive]`.
      .                   const IS_FIELD_LIST_NON_EXHAUSTIVE = 1 << 0;
      .                   /// Indicates whether this variant was obtained as part of recovering from
      .                   /// a syntactic error. May be incomplete or bogus.
      .                   const IS_RECOVERED = 1 << 1;
      .               }
      .           }
      .           
      .           /// Definition of a variant -- a struct's fields or an enum variant.
121,658 ( 0.03%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
      .           pub struct VariantDef {
      .               /// `DefId` that identifies the variant itself.
      .               /// If this variant belongs to a struct or union, then this is a copy of its `DefId`.
      .               pub def_id: DefId,
      .               /// `DefId` that identifies the variant's constructor.
      .               /// If this variant is a struct variant, then this is `None`.
      .               pub ctor_def_id: Option<DefId>,
      .               /// Variant or struct name.
-- line 1571 ----------------------------------------
-- line 1592 ----------------------------------------
      .               /// `parent_did` is the `DefId` of the `AdtDef` representing the enum or struct that
      .               /// owns this variant. It is used for checking if a struct has `#[non_exhaustive]` w/out having
      .               /// to go through the redirect of checking the ctor's attributes - but compiling a small crate
      .               /// requires loading the `AdtDef`s for all the structs in the universe (e.g., coherence for any
      .               /// built-in trait), and we do not want to load attributes twice.
      .               ///
      .               /// If someone speeds up attribute loading to not be a performance concern, they can
      .               /// remove this hack and use the constructor `DefId` everywhere.
    336 ( 0.00%)      pub fn new(
      .                   name: Symbol,
      .                   variant_did: Option<DefId>,
      .                   ctor_def_id: Option<DefId>,
      .                   discr: VariantDiscr,
      .                   fields: Vec<FieldDef>,
      .                   ctor_kind: CtorKind,
      .                   adt_kind: AdtKind,
      .                   parent_did: DefId,
-- line 1608 ----------------------------------------
-- line 1611 ----------------------------------------
      .               ) -> Self {
      .                   debug!(
      .                       "VariantDef::new(name = {:?}, variant_did = {:?}, ctor_def_id = {:?}, discr = {:?},
      .                        fields = {:?}, ctor_kind = {:?}, adt_kind = {:?}, parent_did = {:?})",
      .                       name, variant_did, ctor_def_id, discr, fields, ctor_kind, adt_kind, parent_did,
      .                   );
      .           
      .                   let mut flags = VariantFlags::NO_VARIANT_FLAGS;
     42 ( 0.00%)          if is_field_list_non_exhaustive {
      .                       flags |= VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE;
      .                   }
      .           
    126 ( 0.00%)          if recovered {
      .                       flags |= VariantFlags::IS_RECOVERED;
      .                   }
      .           
    378 ( 0.00%)          VariantDef {
      .                       def_id: variant_did.unwrap_or(parent_did),
      .                       ctor_def_id,
      .                       name,
      .                       discr,
    168 ( 0.00%)              fields,
      .                       ctor_kind,
      .                       flags,
      .                   }
    168 ( 0.00%)      }
      .           
      .               /// Is this field list non-exhaustive?
      .               #[inline]
      .               pub fn is_field_list_non_exhaustive(&self) -> bool {
      .                   self.flags.intersects(VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE)
      .               }
      .           
      .               /// Was this variant obtained as part of recovering from a syntactic error?
      .               #[inline]
      .               pub fn is_recovered(&self) -> bool {
      .                   self.flags.intersects(VariantFlags::IS_RECOVERED)
      .               }
      .           
      .               /// Computes the `Ident` of this variant by looking up the `Span`
     21 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
     12 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.def_id).unwrap())
     27 ( 0.00%)      }
      .           }
      .           
 62,820 ( 0.01%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]
      .           pub enum VariantDiscr {
      .               /// Explicit value for this variant, i.e., `X = 123`.
      .               /// The `DefId` corresponds to the embedded constant.
      .               Explicit(DefId),
      .           
      .               /// The previous variant's discriminant plus one.
      .               /// For efficiency reasons, the distance from the
      .               /// last `Explicit` discriminant is being stored,
      .               /// or `0` for the first variant, if it has none.
      .               Relative(u32),
      .           }
      .           
170,568 ( 0.04%)  #[derive(Debug, HashStable, TyEncodable, TyDecodable)]
      .           pub struct FieldDef {
      .               pub did: DefId,
      .               pub name: Symbol,
      .               pub vis: Visibility,
      .           }
      .           
     45 ( 0.00%)  bitflags! {
      .               #[derive(TyEncodable, TyDecodable, Default, HashStable)]
      .               pub struct ReprFlags: u8 {
      .                   const IS_C               = 1 << 0;
      .                   const IS_SIMD            = 1 << 1;
      .                   const IS_TRANSPARENT     = 1 << 2;
      .                   // Internal only for now. If true, don't reorder fields.
      .                   const IS_LINEAR          = 1 << 3;
      .                   // If true, don't expose any niche to type's context.
-- line 1684 ----------------------------------------
-- line 1689 ----------------------------------------
      .                   // Any of these flags being set prevent field reordering optimisation.
      .                   const IS_UNOPTIMISABLE   = ReprFlags::IS_C.bits
      .                                            | ReprFlags::IS_SIMD.bits
      .                                            | ReprFlags::IS_LINEAR.bits;
      .               }
      .           }
      .           
      .           /// Represents the repr options provided by the user,
 91,980 ( 0.02%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, TyEncodable, TyDecodable, Default, HashStable)]
      .           pub struct ReprOptions {
      .               pub int: Option<attr::IntType>,
      .               pub align: Option<Align>,
      .               pub pack: Option<Align>,
      .               pub flags: ReprFlags,
      .               /// The seed to be used for randomizing a type's layout
      .               ///
      .               /// Note: This could technically be a `[u8; 16]` (a `u128`) which would
-- line 1705 ----------------------------------------
-- line 1706 ----------------------------------------
      .               /// be the "most accurate" hash as it'd encompass the item and crate
      .               /// hash without loss, but it does pay the price of being larger.
      .               /// Everything's a tradeoff, a `u64` seed should be sufficient for our
      .               /// purposes (primarily `-Z randomize-layout`)
      .               pub field_shuffle_seed: u64,
      .           }
      .           
      .           impl ReprOptions {
    182 ( 0.00%)      pub fn new(tcx: TyCtxt<'_>, did: DefId) -> ReprOptions {
      .                   let mut flags = ReprFlags::empty();
      .                   let mut size = None;
      .                   let mut max_align: Option<Align> = None;
      .                   let mut min_pack: Option<Align> = None;
      .           
      .                   // Generate a deterministically-derived seed from the item's path hash
      .                   // to allow for cross-crate compilation to actually work
      .                   let mut field_shuffle_seed = tcx.def_path_hash(did).0.to_smaller_hash();
      .           
      .                   // If the user defined a custom seed for layout randomization, xor the item's
      .                   // path hash with the user defined seed, this will allowing determinism while
      .                   // still allowing users to further randomize layout generation for e.g. fuzzing
     42 ( 0.00%)          if let Some(user_seed) = tcx.sess.opts.debugging_opts.layout_seed {
      .                       field_shuffle_seed ^= user_seed;
      .                   }
      .           
     56 ( 0.00%)          for attr in tcx.get_attrs(did).iter() {
    260 ( 0.00%)              for r in attr::find_repr_attrs(&tcx.sess, attr) {
      .                           flags.insert(match r {
      .                               attr::ReprC => ReprFlags::IS_C,
      .                               attr::ReprPacked(pack) => {
      .                                   let pack = Align::from_bytes(pack as u64).unwrap();
      .                                   min_pack = Some(if let Some(min_pack) = min_pack {
      .                                       min_pack.min(pack)
      .                                   } else {
      .                                       pack
-- line 1740 ----------------------------------------
-- line 1753 ----------------------------------------
      .                                   ReprFlags::empty()
      .                               }
      .                           });
      .                       }
      .                   }
      .           
      .                   // If `-Z randomize-layout` was enabled for the type definition then we can
      .                   // consider performing layout randomization
    112 ( 0.00%)          if tcx.sess.opts.debugging_opts.randomize_layout {
      .                       flags.insert(ReprFlags::RANDOMIZE_LAYOUT);
      .                   }
      .           
      .                   // This is here instead of layout because the choice must make it into metadata.
     84 ( 0.00%)          if !tcx.consider_optimizing(|| format!("Reorder fields of {:?}", tcx.def_path_str(did))) {
      .                       flags.insert(ReprFlags::IS_LINEAR);
      .                   }
      .           
     28 ( 0.00%)          Self { int: size, align: max_align, pack: min_pack, flags, field_shuffle_seed }
    392 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn simd(&self) -> bool {
      .                   self.flags.contains(ReprFlags::IS_SIMD)
      .               }
      .           
      .               #[inline]
      .               pub fn c(&self) -> bool {
-- line 1779 ----------------------------------------
-- line 1798 ----------------------------------------
      .               #[inline]
      .               pub fn hide_niche(&self) -> bool {
      .                   self.flags.contains(ReprFlags::HIDE_NICHE)
      .               }
      .           
      .               /// Returns the discriminant type, given these `repr` options.
      .               /// This must only be called on enums!
      .               pub fn discr_type(&self) -> attr::IntType {
     90 ( 0.00%)          self.int.unwrap_or(attr::SignedInt(ast::IntTy::Isize))
     60 ( 0.00%)      }
      .           
      .               /// Returns `true` if this `#[repr()]` should inhabit "smart enum
      .               /// layout" optimizations, such as representing `Foo<&T>` as a
      .               /// single pointer.
      .               pub fn inhibit_enum_layout_opt(&self) -> bool {
      .                   self.c() || self.int.is_some()
      .               }
      .           
      .               /// Returns `true` if this `#[repr()]` should inhibit struct field reordering
      .               /// optimizations, such as with `repr(C)`, `repr(packed(1))`, or `repr(<int>)`.
      .               pub fn inhibit_struct_field_reordering_opt(&self) -> bool {
      6 ( 0.00%)          if let Some(pack) = self.pack {
      .                       if pack.bytes() == 1 {
      .                           return true;
      .                       }
      .                   }
      .           
     12 ( 0.00%)          self.flags.intersects(ReprFlags::IS_UNOPTIMISABLE) || self.int.is_some()
      .               }
      .           
      .               /// Returns `true` if this type is valid for reordering and `-Z randomize-layout`
      .               /// was enabled for its declaration crate
      .               pub fn can_randomize_type_layout(&self) -> bool {
      3 ( 0.00%)          !self.inhibit_struct_field_reordering_opt()
      .                       && self.flags.contains(ReprFlags::RANDOMIZE_LAYOUT)
      .               }
      .           
      .               /// Returns `true` if this `#[repr()]` should inhibit union ABI optimisations.
      .               pub fn inhibit_union_abi_opt(&self) -> bool {
      .                   self.c()
      .               }
      .           }
      .           
      .           impl<'tcx> FieldDef {
      .               /// Returns the type of this field. The resulting type is not normalized. The `subst` is
      .               /// typically obtained via the second field of [`TyKind::Adt`].
  3,108 ( 0.00%)      pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {
    888 ( 0.00%)          tcx.type_of(self.did).subst(tcx, subst)
  3,552 ( 0.00%)      }
      .           
      .               /// Computes the `Ident` of this variant by looking up the `Span`
  1,092 ( 0.00%)      pub fn ident(&self, tcx: TyCtxt<'_>) -> Ident {
    624 ( 0.00%)          Ident::new(self.name, tcx.def_ident_span(self.did).unwrap())
  1,404 ( 0.00%)      }
      .           }
      .           
      .           pub type Attributes<'tcx> = &'tcx [ast::Attribute];
      .           
      .           #[derive(Debug, PartialEq, Eq)]
      .           pub enum ImplOverlapKind {
      .               /// These impls are always allowed to overlap.
      .               Permitted {
-- line 1859 ----------------------------------------
-- line 1891 ----------------------------------------
      .               /// marker traits.
      .               /// 4. Neither of the impls can have any where-clauses.
      .               ///
      .               /// Once `traitobject` 0.1.0 is no longer an active concern, this hack can be removed.
      .               Issue33140,
      .           }
      .           
      .           impl<'tcx> TyCtxt<'tcx> {
  4,888 ( 0.00%)      pub fn typeck_body(self, body: hir::BodyId) -> &'tcx TypeckResults<'tcx> {
  1,222 ( 0.00%)          self.typeck(self.hir().body_owner_def_id(body))
  4,888 ( 0.00%)      }
      .           
      .               pub fn provided_trait_methods(self, id: DefId) -> impl 'tcx + Iterator<Item = &'tcx AssocItem> {
      .                   self.associated_items(id)
      .                       .in_definition_order()
      .                       .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())
      .               }
      .           
      .               fn item_name_from_hir(self, def_id: DefId) -> Option<Ident> {
-- line 1909 ----------------------------------------
-- line 1947 ----------------------------------------
      .               ///
      .               /// See [`item_name`][Self::item_name] for more information.
      .               pub fn opt_item_name(self, def_id: DefId) -> Option<Ident> {
      .                   // Look at the HIR first so the span will be correct if this is a local item.
      .                   self.item_name_from_hir(def_id)
      .                       .or_else(|| self.item_name_from_def_id(def_id).map(Ident::with_dummy_span))
      .               }
      .           
151,520 ( 0.03%)      pub fn opt_associated_item(self, def_id: DefId) -> Option<&'tcx AssocItem> {
 60,608 ( 0.01%)          if let DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy = self.def_kind(def_id) {
      .                       Some(self.associated_item(def_id))
      .                   } else {
      .                       None
      .                   }
136,368 ( 0.03%)      }
      .           
    270 ( 0.00%)      pub fn field_index(self, hir_id: hir::HirId, typeck_results: &TypeckResults<'_>) -> usize {
      .                   typeck_results.field_indices().get(hir_id).cloned().expect("no index for a field")
    540 ( 0.00%)      }
      .           
      .               pub fn find_field_index(self, ident: Ident, variant: &VariantDef) -> Option<usize> {
      .                   variant
      .                       .fields
      .                       .iter()
      .                       .position(|field| self.hygienic_eq(ident, field.ident(self), variant.def_id))
      .               }
      .           
      .               /// Returns `true` if the impls are the same polarity and the trait either
      .               /// has no items or is annotated `#[marker]` and prevents item overrides.
  1,120 ( 0.00%)      pub fn impls_are_allowed_to_overlap(
      .                   self,
      .                   def_id1: DefId,
      .                   def_id2: DefId,
      .               ) -> Option<ImplOverlapKind> {
      .                   // If either trait impl references an error, they're allowed to overlap,
      .                   // as one of them essentially doesn't exist.
      .                   if self.impl_trait_ref(def_id1).map_or(false, |tr| tr.references_error())
    224 ( 0.00%)              || self.impl_trait_ref(def_id2).map_or(false, |tr| tr.references_error())
      .                   {
      .                       return Some(ImplOverlapKind::Permitted { marker: false });
      .                   }
      .           
  1,120 ( 0.00%)          match (self.impl_polarity(def_id1), self.impl_polarity(def_id2)) {
      .                       (ImplPolarity::Reservation, _) | (_, ImplPolarity::Reservation) => {
      .                           // `#[rustc_reservation_impl]` impls don't overlap with anything
      .                           debug!(
      .                               "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (reservations)",
      .                               def_id1, def_id2
      .                           );
      .                           return Some(ImplOverlapKind::Permitted { marker: false });
      .                       }
-- line 1997 ----------------------------------------
-- line 2004 ----------------------------------------
      .                           );
      .                           return None;
      .                       }
      .                       (ImplPolarity::Positive, ImplPolarity::Positive)
      .                       | (ImplPolarity::Negative, ImplPolarity::Negative) => {}
      .                   };
      .           
      .                   let is_marker_overlap = {
  1,120 ( 0.00%)              let is_marker_impl = |def_id: DefId| -> bool {
    336 ( 0.00%)                  let trait_ref = self.impl_trait_ref(def_id);
    336 ( 0.00%)                  trait_ref.map_or(false, |tr| self.trait_def(tr.def_id).is_marker)
    896 ( 0.00%)              };
    448 ( 0.00%)              is_marker_impl(def_id1) && is_marker_impl(def_id2)
      .                   };
      .           
      .                   if is_marker_overlap {
      .                       debug!(
      .                           "impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) (marker overlap)",
      .                           def_id1, def_id2
      .                       );
      .                       Some(ImplOverlapKind::Permitted { marker: true })
      .                   } else {
    448 ( 0.00%)              if let Some(self_ty1) = self.issue33140_self_ty(def_id1) {
      .                           if let Some(self_ty2) = self.issue33140_self_ty(def_id2) {
      .                               if self_ty1 == self_ty2 {
      .                                   debug!(
      .                                       "impls_are_allowed_to_overlap({:?}, {:?}) - issue #33140 HACK",
      .                                       def_id1, def_id2
      .                                   );
      .                                   return Some(ImplOverlapKind::Issue33140);
      .                               } else {
-- line 2034 ----------------------------------------
-- line 2038 ----------------------------------------
      .                                   );
      .                               }
      .                           }
      .                       }
      .           
      .                       debug!("impls_are_allowed_to_overlap({:?}, {:?}) = None", def_id1, def_id2);
      .                       None
      .                   }
    896 ( 0.00%)      }
      .           
      .               /// Returns `ty::VariantDef` if `res` refers to a struct,
      .               /// or variant or their constructors, panics otherwise.
      .               pub fn expect_variant_res(self, res: Res) -> &'tcx VariantDef {
      .                   match res {
      .                       Res::Def(DefKind::Variant, did) => {
      .                           let enum_did = self.parent(did).unwrap();
      .                           self.adt_def(enum_did).variant_with_id(did)
-- line 2054 ----------------------------------------
-- line 2091 ----------------------------------------
      .                       | ty::InstanceDef::Virtual(..)
      .                       | ty::InstanceDef::ClosureOnceShim { .. }
      .                       | ty::InstanceDef::DropGlue(..)
      .                       | ty::InstanceDef::CloneShim(..) => self.mir_shims(instance),
      .                   }
      .               }
      .           
      .               /// Gets the attributes of a definition.
 31,770 ( 0.01%)      pub fn get_attrs(self, did: DefId) -> Attributes<'tcx> {
  9,531 ( 0.00%)          if let Some(did) = did.as_local() {
  8,991 ( 0.00%)              self.hir().attrs(self.hir().local_def_id_to_hir_id(did))
      .                   } else {
      .                       self.item_attrs(did)
      .                   }
 25,416 ( 0.01%)      }
      .           
      .               /// Determines whether an item is annotated with an attribute.
  3,912 ( 0.00%)      pub fn has_attr(self, did: DefId, attr: Symbol) -> bool {
 11,925 ( 0.00%)          self.sess.contains_name(&self.get_attrs(did), attr)
      .               }
      .           
      .               /// Determines whether an item is annotated with `doc(hidden)`.
     21 ( 0.00%)      pub fn is_doc_hidden(self, did: DefId) -> bool {
      3 ( 0.00%)          self.get_attrs(did)
      .                       .iter()
      .                       .filter_map(|attr| if attr.has_name(sym::doc) { attr.meta_item_list() } else { None })
      .                       .any(|items| items.iter().any(|item| item.has_name(sym::hidden)))
     24 ( 0.00%)      }
      .           
      .               /// Returns `true` if this is an `auto trait`.
  2,856 ( 0.00%)      pub fn trait_is_auto(self, trait_def_id: DefId) -> bool {
    408 ( 0.00%)          self.trait_def(trait_def_id).has_auto_impl
  3,264 ( 0.00%)      }
      .           
      .               /// Returns layout of a generator. Layout might be unavailable if the
      .               /// generator is tainted by errors.
      .               pub fn generator_layout(self, def_id: DefId) -> Option<&'tcx GeneratorLayout<'tcx>> {
      .                   self.optimized_mir(def_id).generator_layout()
      .               }
      .           
      .               /// Given the `DefId` of an impl, returns the `DefId` of the trait it implements.
      .               /// If it implements no trait, returns `None`.
  9,254 ( 0.00%)      pub fn trait_id_of_impl(self, def_id: DefId) -> Option<DefId> {
      .                   self.impl_trait_ref(def_id).map(|tr| tr.def_id)
 11,898 ( 0.00%)      }
      .           
      .               /// If the given defid describes a method belonging to an impl, returns the
      .               /// `DefId` of the impl that the method belongs to; otherwise, returns `None`.
    121 ( 0.00%)      pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {
    484 ( 0.00%)          self.opt_associated_item(def_id).and_then(|trait_item| match trait_item.container {
      .                       TraitContainer(_) => None,
      .                       ImplContainer(def_id) => Some(def_id),
      .                   })
    242 ( 0.00%)      }
      .           
      .               /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`
      .               /// with the name of the crate containing the impl.
      .               pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> {
      .                   if let Some(impl_did) = impl_did.as_local() {
      .                       Ok(self.def_span(impl_did))
      .                   } else {
      .                       Err(self.crate_name(impl_did.krate))
      .                   }
      .               }
      .           
      .               /// Hygienically compares a use-site name (`use_name`) for a field or an associated item with
      .               /// its supposed definition name (`def_name`). The method also needs `DefId` of the supposed
      .               /// definition's parent/scope to perform comparison.
  2,944 ( 0.00%)      pub fn hygienic_eq(self, use_name: Ident, def_name: Ident, def_parent_def_id: DefId) -> bool {
      .                   // We could use `Ident::eq` here, but we deliberately don't. The name
      .                   // comparison fails frequently, and we want to avoid the expensive
      .                   // `normalize_to_macros_2_0()` calls required for the span comparison whenever possible.
    368 ( 0.00%)          use_name.name == def_name.name
  1,104 ( 0.00%)              && use_name
      .                           .span
      .                           .ctxt()
      .                           .hygienic_eq(def_name.span.ctxt(), self.expn_that_defined(def_parent_def_id))
  2,944 ( 0.00%)      }
      .           
    630 ( 0.00%)      pub fn adjust_ident(self, mut ident: Ident, scope: DefId) -> Ident {
    140 ( 0.00%)          ident.span.normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope));
    140 ( 0.00%)          ident
    560 ( 0.00%)      }
      .           
  2,367 ( 0.00%)      pub fn adjust_ident_and_get_scope(
      .                   self,
      .                   mut ident: Ident,
      .                   scope: DefId,
      .                   block: hir::HirId,
      .               ) -> (Ident, DefId) {
    263 ( 0.00%)          let scope = ident
      .                       .span
      .                       .normalize_to_macros_2_0_and_adjust(self.expn_that_defined(scope))
      .                       .and_then(|actual_expansion| actual_expansion.expn_data().parent_module)
  1,052 ( 0.00%)              .unwrap_or_else(|| self.parent_module(block).to_def_id());
  1,578 ( 0.00%)          (ident, scope)
  2,367 ( 0.00%)      }
      .           
      .               pub fn is_object_safe(self, key: DefId) -> bool {
      .                   self.object_safety_violations(key).is_empty()
      .               }
      .           }
      .           
      .           /// Yields the parent function's `LocalDefId` if `def_id` is an `impl Trait` definition.
  1,209 ( 0.00%)  pub fn is_impl_trait_defn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<LocalDefId> {
  1,209 ( 0.00%)      let def_id = def_id.as_local()?;
  1,360 ( 0.00%)      if let Node::Item(item) = tcx.hir().get_by_def_id(def_id) {
    402 ( 0.00%)          if let hir::ItemKind::OpaqueTy(ref opaque_ty) = item.kind {
      .                       return match opaque_ty.origin {
      .                           hir::OpaqueTyOrigin::FnReturn(parent) | hir::OpaqueTyOrigin::AsyncFn(parent) => {
      .                               Some(parent)
      .                           }
      .                           hir::OpaqueTyOrigin::TyAlias => None,
      .                       };
      .                   }
      .               }
      .               None
  1,612 ( 0.00%)  }
      .           
      .           pub fn int_ty(ity: ast::IntTy) -> IntTy {
      .               match ity {
      .                   ast::IntTy::Isize => IntTy::Isize,
      .                   ast::IntTy::I8 => IntTy::I8,
      .                   ast::IntTy::I16 => IntTy::I16,
      .                   ast::IntTy::I32 => IntTy::I32,
      .                   ast::IntTy::I64 => IntTy::I64,
-- line 2216 ----------------------------------------
-- line 2231 ----------------------------------------
      .           
      .           pub fn float_ty(fty: ast::FloatTy) -> FloatTy {
      .               match fty {
      .                   ast::FloatTy::F32 => FloatTy::F32,
      .                   ast::FloatTy::F64 => FloatTy::F64,
      .               }
      .           }
      .           
     27 ( 0.00%)  pub fn ast_int_ty(ity: IntTy) -> ast::IntTy {
      .               match ity {
      .                   IntTy::Isize => ast::IntTy::Isize,
      .                   IntTy::I8 => ast::IntTy::I8,
      .                   IntTy::I16 => ast::IntTy::I16,
      .                   IntTy::I32 => ast::IntTy::I32,
      .                   IntTy::I64 => ast::IntTy::I64,
      .                   IntTy::I128 => ast::IntTy::I128,
      .               }
     27 ( 0.00%)  }
      .           
      .           pub fn ast_uint_ty(uty: UintTy) -> ast::UintTy {
      .               match uty {
      .                   UintTy::Usize => ast::UintTy::Usize,
      .                   UintTy::U8 => ast::UintTy::U8,
      .                   UintTy::U16 => ast::UintTy::U16,
      .                   UintTy::U32 => ast::UintTy::U32,
      .                   UintTy::U64 => ast::UintTy::U64,
-- line 2256 ----------------------------------------
-- line 2262 ----------------------------------------
      .               closure::provide(providers);
      .               context::provide(providers);
      .               erase_regions::provide(providers);
      .               layout::provide(providers);
      .               util::provide(providers);
      .               print::provide(providers);
      .               super::util::bug::provide(providers);
      .               super::middle::provide(providers);
      8 ( 0.00%)      *providers = ty::query::Providers {
      .                   trait_impls_of: trait_def::trait_impls_of_provider,
      .                   type_uninhabited_from: inhabitedness::type_uninhabited_from,
      .                   const_param_default: consts::const_param_default,
      .                   vtable_allocation: vtable::vtable_allocation_provider,
      .                   ..*providers
      .               };
      1 ( 0.00%)  }
      .           
      .           /// A map for the local crate mapping each type to a vector of its
      .           /// inherent impls. This is not meant to be used outside of coherence;
      .           /// rather, you should request the vector for a specific type via
      .           /// `tcx.inherent_impls(def_id)` so as to minimize your dependencies
      .           /// (constructing this map requires touching the entire crate).
      .           #[derive(Clone, Debug, Default, HashStable)]
      .           pub struct CrateInherentImpls {
-- line 2285 ----------------------------------------
-- line 2288 ----------------------------------------
      .           
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, HashStable)]
      .           pub struct SymbolName<'tcx> {
      .               /// `&str` gives a consistent ordering, which ensures reproducible builds.
      .               pub name: &'tcx str,
      .           }
      .           
      .           impl<'tcx> SymbolName<'tcx> {
      6 ( 0.00%)      pub fn new(tcx: TyCtxt<'tcx>, name: &str) -> SymbolName<'tcx> {
      .                   SymbolName {
      .                       name: unsafe { str::from_utf8_unchecked(tcx.arena.alloc_slice(name.as_bytes())) },
      .                   }
      8 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> fmt::Display for SymbolName<'tcx> {
      .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Display::fmt(&self.name, fmt)
      .               }
      .           }
      .           
-- line 2308 ----------------------------------------

800,343 ( 0.17%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 57 ----------------------------------------
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
       78 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
       39 ( 0.00%)              from_str_radix(src, radix)
      117 ( 0.00%)          }
        .           
        .                   /// Returns the number of ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[doc(alias = "popcount")]
        .                   #[doc(alias = "popcnt")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn count_ones(self) -> u32 {
   22,050 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of zeros in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
        .                   /// assert_eq!(n.leading_zeros(), 2);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn leading_zeros(self) -> u32 {
  146,836 ( 0.03%)              intrinsics::ctlz(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of trailing zeros in the binary representation
        .                   /// of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
        .                   /// assert_eq!(n.trailing_zeros(), 3);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn trailing_zeros(self) -> u32 {
  116,872 ( 0.02%)              intrinsics::cttz(self) as u32
        .                   }
        .           
        .                   /// Returns the number of leading ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn rotate_left(self, n: u32) -> Self {
3,275,492 ( 0.69%)              intrinsics::rotate_left(self, n as $SelfT)
        .                   }
        .           
        .                   /// Shifts the bits to the right by a specified amount, `n`,
        .                   /// wrapping the truncated bits to the beginning of the resulting
        .                   /// integer.
        .                   ///
        .                   /// Please note this isn't the same operation as the `>>` shifting operator!
        .                   ///
-- line 220 ----------------------------------------
-- line 456 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_add`.
  325,604 ( 0.07%)              unsafe { intrinsics::unchecked_add(self, rhs) }
        .                   }
        .           
        .                   /// Checked addition with a signed integer. Computes `self + rhs`,
        .                   /// returning `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_sub`.
   10,070 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
        .                   }
        .           
        .                   /// Checked integer multiplication. Computes `self * rhs`, returning
        .                   /// `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 1035 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   26,232 ( 0.01%)              intrinsics::saturating_add(self, rhs)
        .                   }
        .           
        .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
    4,764 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
        .                   }
        .           
        .                   /// Saturating integer multiplication. Computes `self * rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
1,139,422 ( 0.24%)              intrinsics::wrapping_add(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) addition with a signed integer. Computes
        .                   /// `self + rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
  593,948 ( 0.13%)              intrinsics::wrapping_sub(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) multiplication. Computes `self *
        .                   /// rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
        .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
2,548,226 ( 0.54%)              intrinsics::wrapping_mul(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) division. Computes `self / rhs`.
        .                   /// Wrapped division on unsigned types is just normal division.
        .                   /// There's no way wrapping could ever happen.
        .                   /// This function exists, so that all operations
        .                   /// are accounted for in the wrapping operations.
        .                   ///
-- line 1256 ----------------------------------------
-- line 1492 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
  225,529 ( 0.05%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self + rhs + carry` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
        .                   /// additional bit of overflow. This allows for chaining together multiple additions
        .                   /// to create "big integers" which represent larger values.
-- line 1508 ----------------------------------------
-- line 1587 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_sub(2), (3, false));")]
        .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
      528 ( 0.00%)          pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   69,309 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
    1,056 ( 0.00%)          }
        .           
        .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
        .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
        .                   /// to create "big integers" which represent larger values.
        .                   ///
        .                   /// # Examples
-- line 1606 ----------------------------------------
-- line 1673 ----------------------------------------
        .                   /// assert_eq!(5u32.overflowing_mul(2), (10, false));
        .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                     without modifying the original"]
        .                   #[inline(always)]
       10 ( 0.00%)          pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
  396,928 ( 0.08%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        5 ( 0.00%)          }
        .           
        .                   /// Calculates the divisor when `self` is divided by `rhs`.
        .                   ///
        .                   /// Returns a tuple of the divisor along with a boolean indicating
        .                   /// whether an arithmetic overflow would occur. Note that for unsigned
        .                   /// integers overflow never occurs, so the second value is always
        .                   /// `false`.
        .                   ///
-- line 1692 ----------------------------------------
-- line 2132 ----------------------------------------
        .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
        .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
        .                   /// ```
        .                   #[must_use]
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
        .                   #[inline(always)]
        .                   pub const fn is_power_of_two(self) -> bool {
      192 ( 0.00%)              self.count_ones() == 1
        .                   }
        .           
        .                   // Returns one less than next power of two.
        .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
        .                   //
        .                   // 8u8.one_less_than_next_power_of_two() == 7
        .                   // 6u8.one_less_than_next_power_of_two() == 7
        .                   //
        .                   // This method cannot overflow, as in the `next_power_of_two`
        .                   // overflow cases it instead ends up returning the maximum value
        .                   // of the type, and can return 0 for 0.
        .                   #[inline]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   const fn one_less_than_next_power_of_two(self) -> Self {
    1,464 ( 0.00%)              if self <= 1 { return 0; }
        .           
    9,772 ( 0.00%)              let p = self - 1;
        .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
        .                       // That means the shift is always in-bounds, and some processors
        .                       // (such as intel pre-haswell) have more efficient ctlz
        .                       // intrinsics when the argument is non-zero.
   29,272 ( 0.01%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    9,760 ( 0.00%)              <$SelfT>::MAX >> z
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `self`.
        .                   ///
        .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
        .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
        .                   /// release mode (the only situation in which method can return 0).
        .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   #[rustc_inherit_overflow_checks]
        .                   pub const fn next_power_of_two(self) -> Self {
   18,052 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `n`. If
        .                   /// the next power of two is greater than the type's maximum value,
        .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 2195 ----------------------------------------

   40,356 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir               

-- line 91 ----------------------------------------
      .           // maximum of number bytes needed to fill an 8-byte-sized element on which
      .           // SipHash operates. Note that for variable-sized copies which are known to be
      .           // less than 8 bytes, this function will perform more work than necessary unless
      .           // the compiler is able to optimize the extra work away.
      .           #[inline]
      .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
      .               debug_assert!(count <= 8);
      .           
 13,350 ( 0.00%)      if count == 8 {
      .                   ptr::copy_nonoverlapping(src, dst, 8);
      .                   return;
      .               }
      .           
      .               let mut i = 0;
 19,314 ( 0.00%)      if i + 3 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
      .                   i += 4;
      .               }
      .           
 41,829 ( 0.01%)      if i + 1 < count {
      .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
  5,367 ( 0.00%)          i += 2
      .               }
      .           
 19,314 ( 0.00%)      if i < count {
 11,287 ( 0.00%)          *dst.add(i) = *src.add(i);
      .                   i += 1;
      .               }
      .           
      .               debug_assert_eq!(i, count);
      .           }
      .           
      .           // # Implementation
      .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
      .           
      .                   hasher
      .               }
      .           
      .               // A specialized write function for values with size <= 8.
      .               #[inline]
      .               fn short_write<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
125,486 ( 0.03%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
863,725 ( 0.18%)          if nbuf + size < BUFFER_SIZE {
      .                       unsafe {
      .                           // The memcpy call is optimized away because the size is known.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .                       }
      .           
268,564 ( 0.06%)              self.nbuf = nbuf + size;
      .           
      .                       return;
      .                   }
      .           
 46,589 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
      .               }
      .           
      .               // A specialized write function for values with size <= 8 that should only
      .               // be called when the write would cause the buffer to fill.
      .               //
      .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
      .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
      .               // overflow) if it wasn't already.
      .               #[inline(never)]
 13,849 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
      .                   let size = mem::size_of::<T>();
 13,849 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(size <= 8);
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
      .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
      .           
      .                   // Copy first part of input into end of buffer, possibly into spill
      .                   // element. The memcpy call is optimized away because the size is known.
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
      .           
      .                   // Process buffer.
      .                   for i in 0..BUFFER_CAPACITY {
138,490 ( 0.03%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
110,792 ( 0.02%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
124,641 ( 0.03%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer by copying size - 1
      .                   // elements from spill (at most size - 1 bytes could have overflowed
      .                   // into the spill). The memcpy call is optimized away because the size
      .                   // is known. And the whole copy is optimized away for size == 1.
      .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
      .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
      .           
      .                   // This function should only be called when the write fills the buffer.
      .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
      .                   // is statically known, so the branch is optimized away.
 65,441 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
 55,396 ( 0.01%)          self.processed += BUFFER_SIZE;
 27,698 ( 0.01%)      }
      .           
      .               // A write function for byte slices.
      .               #[inline]
      .               fn slice_write(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
  7,370 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .           
 57,498 ( 0.01%)          if nbuf + length < BUFFER_SIZE {
      .                       unsafe {
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .           
 21,120 ( 0.00%)                  if length <= 8 {
      .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
      .                           } else {
      .                               // This memcpy is *not* optimized away.
      .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
      .                           }
      .                       }
      .           
 10,641 ( 0.00%)              self.nbuf = nbuf + length;
      .           
      .                       return;
      .                   }
      .           
  5,637 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
      .               }
      .           
      .               // A write function for byte slices that should only be called when the
      .               // write would cause the buffer to fill.
      .               //
      .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
      .               // and `msg` must contain enough bytes to initialize the rest of the element
      .               // containing the byte offset `self.nbuf`.
      .               #[inline(never)]
  4,370 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
      .                   let length = msg.len();
    874 ( 0.00%)          let nbuf = self.nbuf;
      .                   debug_assert!(nbuf < BUFFER_SIZE);
      .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
      .           
      .                   // Always copy first part of input into current element of buffer.
      .                   // This function should only be called when the write fills the buffer,
      .                   // so we know that there is enough input to fill the current element.
  2,622 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    874 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
      .           
      .                   let src = msg.as_ptr();
      .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
      .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
      .           
      .                   // Process buffer.
      .           
      .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
      .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
      .                   // We know that is true, because last step ensured we have a full
      .                   // element in the buffer.
  1,748 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
      .           
      .                   for i in 0..last {
  6,675 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  7,549 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
 13,350 ( 0.00%)              self.state.v0 ^= elem;
      .                   }
      .           
      .                   // Process the remaining element-sized chunks of input.
      .                   let mut processed = needed_in_elem;
  1,748 ( 0.00%)          let input_left = length - processed;
    723 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
      .                   let extra_bytes_left = input_left % ELEM_SIZE;
      .           
      .                   for _ in 0..elems_left {
    433 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    433 ( 0.00%)              self.state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut self.state);
    433 ( 0.00%)              self.state.v0 ^= elem;
    866 ( 0.00%)              processed += ELEM_SIZE;
      .                   }
      .           
      .                   // Copy remaining input into start of buffer.
      .                   let src = msg.as_ptr().add(processed);
      .                   let dst = self.buf.as_mut_ptr() as *mut u8;
      .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
      .           
    874 ( 0.00%)          self.nbuf = extra_bytes_left;
  4,370 ( 0.00%)          self.processed += nbuf + processed;
  5,244 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn finish128(mut self) -> (u64, u64) {
      .                   debug_assert!(self.nbuf < BUFFER_SIZE);
      .           
      .                   // Process full elements in buffer.
  7,455 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
      .           
      .                   // Since we're consuming self, avoid updating members for a potential
      .                   // performance gain.
  9,940 ( 0.00%)          let mut state = self.state;
      .           
      .                   for i in 0..last {
  6,770 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
  6,770 ( 0.00%)              state.v3 ^= elem;
      .                       Sip24Rounds::c_rounds(&mut state);
  6,770 ( 0.00%)              state.v0 ^= elem;
      .                   }
      .           
      .                   // Get remaining partial element.
  4,970 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
      .                       unsafe {
      .                           // Ensure element is initialized by writing zero bytes. At most
      .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
      .                           // to write this many because we have the spill and we maintain
      .                           // `self.nbuf` such that this write will start before the spill.
      .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
      .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
  2,022 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
      .                       }
      .                   } else {
      .                       0
      .                   };
      .           
      .                   // Finalize the hash.
  6,992 ( 0.00%)          let length = self.processed + self.nbuf;
  4,968 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
      .           
  2,484 ( 0.00%)          state.v3 ^= b;
      .                   Sip24Rounds::c_rounds(&mut state);
  2,484 ( 0.00%)          state.v0 ^= b;
      .           
  2,484 ( 0.00%)          state.v2 ^= 0xee;
      .                   Sip24Rounds::d_rounds(&mut state);
  7,666 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
  2,696 ( 0.00%)          state.v1 ^= 0xdd;
      .                   Sip24Rounds::d_rounds(&mut state);
  2,696 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
      .           
      .                   (_0, _1)
      .               }
      .           }
      .           
      .           impl Hasher for SipHasher128 {
      .               #[inline]
      .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
      .           }
      .           
      .           #[derive(Debug, Clone, Default)]
      .           struct Sip24Rounds;
      .           
      .           impl Sip24Rounds {
      .               #[inline]
      .               fn c_rounds(state: &mut State) {
525,087 ( 0.11%)          compress!(state);
570,188 ( 0.12%)          compress!(state);
      .               }
      .           
      .               #[inline]
      .               fn d_rounds(state: &mut State) {
 15,328 ( 0.00%)          compress!(state);
 15,328 ( 0.00%)          compress!(state);
 15,328 ( 0.00%)          compress!(state);
 12,845 ( 0.00%)          compress!(state);
      .               }
      .           }

 89,625 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 70 ----------------------------------------
        .           
        .                   impl<'a, T> $name<'a, T> {
        .                       // Helper function for creating a slice from the iterator.
        .                       #[inline(always)]
        .                       fn make_slice(&self) -> &'a [T] {
        .                           // SAFETY: the iterator was created from a slice with pointer
        .                           // `self.ptr` and length `len!(self)`. This guarantees that all
        .                           // the prerequisites for `from_raw_parts` are fulfilled.
    4,601 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
        .                       }
        .           
        .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
        .                       // returning the old start.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
        .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               let old = self.ptr.as_ptr();
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
   49,757 ( 0.01%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
        .                               old
        .                           }
        .                       }
        .           
        .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
        .                       // returning the new end.
        .                       // Unsafe because the offset must not exceed `self.len()`.
        .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
        .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
        .                           if mem::size_of::<T>() == 0 {
        .                               zst_shrink!(self, offset);
        .                               self.ptr.as_ptr()
        .                           } else {
        .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
        .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
        .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
       26 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
        .                               self.end
        .                           }
        .                       }
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<T> ExactSizeIterator for $name<'_, T> {
        .                       #[inline(always)]
        .                       fn len(&self) -> usize {
   44,201 ( 0.01%)                  len!(self)
        .                       }
        .           
        .                       #[inline(always)]
        .                       fn is_empty(&self) -> bool {
        .                           is_empty!(self)
        .                       }
        .                   }
        .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
        .                       fn next(&mut self) -> Option<$elem> {
        .                           // could be implemented with slices, but this avoids bounds checks
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer
        .                           // must be non-null, and slices over non-ZSTs must also have a
        .                           // non-null end pointer. The call to `next_unchecked!` is safe
        .                           // since we check if the iterator is empty first.
        .                           unsafe {
   31,164 ( 0.01%)                      assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
    5,005 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
8,491,124 ( 1.79%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        2 ( 0.00%)                          Some(next_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
        .                       fn size_hint(&self) -> (usize, Option<usize>) {
  243,507 ( 0.05%)                  let exact = len!(self);
        .                           (exact, Some(exact))
        .                       }
        .           
        .                       #[inline]
        .                       fn count(self) -> usize {
        .                           len!(self)
        .                       }
        .           
        .                       #[inline]
        .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    9,588 ( 0.00%)                  if n >= len!(self) {
        .                               // This iterator is now empty.
        .                               if mem::size_of::<T>() == 0 {
        .                                   // We have to do it this way as `ptr` may never be 0, but `end`
        .                                   // could be (due to wrapping).
        .                                   self.end = self.ptr.as_ptr();
        .                               } else {
        .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
        .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
        .                       // faster to compile.
        .                       #[inline]
        .                       fn for_each<F>(mut self, mut f: F)
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item),
        .                       {
        .                           while let Some(x) = self.next() {
      952 ( 0.00%)                      f(x);
        .                           }
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn all<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
       84 ( 0.00%)                  while let Some(x) = self.next() {
    4,162 ( 0.00%)                      if !f(x) {
        .                                   return false;
        .                               }
        .                           }
        .                           true
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn any<F>(&mut self, mut f: F) -> bool
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> bool,
        .                       {
   59,593 ( 0.01%)                  while let Some(x) = self.next() {
  131,321 ( 0.03%)                      if f(x) {
        .                                   return true;
        .                               }
        .                           }
        .                           false
        .                       }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
        .                       where
        .                           Self: Sized,
        .                           P: FnMut(&Self::Item) -> bool,
        .                       {
    3,240 ( 0.00%)                  while let Some(x) = self.next() {
   14,705 ( 0.00%)                      if predicate(&x) {
       39 ( 0.00%)                          return Some(x);
        .                               }
        .                           }
        .                           None
    1,792 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile.
        .                       #[inline]
        .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
        .                       where
        .                           Self: Sized,
        .                           F: FnMut(Self::Item) -> Option<B>,
        .                       {
    8,244 ( 0.00%)                  while let Some(x) = self.next() {
   34,009 ( 0.01%)                      if let Some(y) = f(x) {
    2,951 ( 0.00%)                          return Some(y);
        .                               }
        .                           }
        .                           None
    1,610 ( 0.00%)              }
        .           
        .                       // We override the default implementation, which uses `try_fold`,
        .                       // because this simple implementation generates less LLVM IR and is
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       #[rustc_inherit_overflow_checks]
        .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           Self: Sized,
        .                           P: FnMut(Self::Item) -> bool,
        .                       {
        .                           let n = len!(self);
        .                           let mut i = 0;
        .                           while let Some(x) = self.next() {
   35,404 ( 0.01%)                      if predicate(x) {
        .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
        .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                               i += 1;
        .                           }
        .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
        .                       // faster to compile. Also, the `assume` avoids a bounds check.
        .                       #[inline]
        .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
        .                           P: FnMut(Self::Item) -> bool,
        .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
        .                       {
        .                           let n = len!(self);
        .                           let mut i = n;
    2,374 ( 0.00%)                  while let Some(x) = self.next_back() {
   28,641 ( 0.01%)                      i -= 1;
   24,448 ( 0.01%)                      if predicate(x) {
        .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
        .                                   // and is only decreasing.
        .                                   unsafe { assume(i < n) };
        .                                   return Some(i);
        .                               }
        .                           }
        .                           None
        .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
        .                           // the returned references is guaranteed to refer to an element
        .                           // of the slice and thus guaranteed to be valid.
        .                           //
        .                           // Also note that the caller also guarantees that we're never
        .                           // called with the same index again, and that no other methods
        .                           // that will access this subslice are called, so it is valid
        .                           // for the returned reference to be mutable in the case of
        .                           // `IterMut`
   50,182 ( 0.01%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
        .                       }
        .           
        .                       $($extra)*
        .                   }
        .           
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
        .                       #[inline]
-- line 348 ----------------------------------------
-- line 351 ----------------------------------------
        .           
        .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
        .                           // and slices over non-ZSTs must also have a non-null end pointer.
        .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
        .                           // empty first.
        .                           unsafe {
        .                               assume(!self.ptr.as_ptr().is_null());
        .                               if mem::size_of::<T>() != 0 {
       27 ( 0.00%)                          assume(!self.end.is_null());
        .                               }
  186,799 ( 0.04%)                      if is_empty!(self) {
        .                                   None
        .                               } else {
        .                                   Some(next_back_unchecked!(self))
        .                               }
        .                           }
        .                       }
        .           
        .                       #[inline]
-- line 369 ----------------------------------------

1,062,915 ( 0.22%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs
--------------------------------------------------------------------------------
Ir               

-- line 28 ----------------------------------------
      .               PushRegionObligation,
      .           }
      .           
      .           macro_rules! impl_from {
      .               ($($ctor: ident ($ty: ty),)*) => {
      .                   $(
      .                   impl<'tcx> From<$ty> for UndoLog<'tcx> {
      .                       fn from(x: $ty) -> Self {
  1,660 ( 0.00%)                  UndoLog::$ctor(x.into())
      .                       }
      .                   }
      .                   )*
      .               }
      .           }
      .           
      .           // Upcast from a single kind of "undoable action" to the general enum
      .           impl_from! {
-- line 44 ----------------------------------------
-- line 57 ----------------------------------------
      .               ConstUnificationTable(sv::UndoLog<ut::Delegate<ty::ConstVid<'tcx>>>),
      .           
      .               RegionUnificationTable(sv::UndoLog<ut::Delegate<RegionVidKey<'tcx>>>),
      .               ProjectionCache(traits::UndoLog<'tcx>),
      .           }
      .           
      .           /// The Rollback trait defines how to rollback a particular action.
      .           impl<'tcx> Rollback<UndoLog<'tcx>> for InferCtxtInner<'tcx> {
 70,686 ( 0.01%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
117,810 ( 0.02%)          match undo {
177,610 ( 0.04%)              UndoLog::TypeVariables(undo) => self.type_variable_storage.reverse(undo),
    170 ( 0.00%)              UndoLog::ConstUnificationTable(undo) => self.const_unification_storage.reverse(undo),
    208 ( 0.00%)              UndoLog::IntUnificationTable(undo) => self.int_unification_storage.reverse(undo),
      .                       UndoLog::FloatUnificationTable(undo) => self.float_unification_storage.reverse(undo),
      .                       UndoLog::RegionConstraintCollector(undo) => {
 20,153 ( 0.00%)                  self.region_constraint_storage.as_mut().unwrap().reverse(undo)
      .                       }
      .                       UndoLog::RegionUnificationTable(undo) => {
  4,422 ( 0.00%)                  self.region_constraint_storage.as_mut().unwrap().unification_table.reverse(undo)
      .                       }
      .                       UndoLog::ProjectionCache(undo) => self.projection_cache.reverse(undo),
      .                       UndoLog::PushRegionObligation => {
      .                           self.region_obligations.pop();
      .                       }
      .                   }
 94,248 ( 0.02%)      }
      .           }
      .           
      .           /// The combined undo log for all the various unification tables. For each change to the storage
      .           /// for any kind of inference variable, we record an UndoLog entry in the vector here.
      .           pub(crate) struct InferCtxtUndoLogs<'tcx> {
      .               logs: Vec<UndoLog<'tcx>>,
      .               num_open_snapshots: usize,
      .           }
      .           
      .           impl Default for InferCtxtUndoLogs<'_> {
      .               fn default() -> Self {
  6,386 ( 0.00%)          Self { logs: Default::default(), num_open_snapshots: Default::default() }
      .               }
      .           }
      .           
      .           /// The UndoLogs trait defines how we undo a particular kind of action (of type T). We can undo any
      .           /// action that is convertable into an UndoLog (per the From impls above).
      .           impl<'tcx, T> UndoLogs<T> for InferCtxtUndoLogs<'tcx>
      .           where
      .               UndoLog<'tcx>: From<T>,
-- line 102 ----------------------------------------
-- line 103 ----------------------------------------
      .           {
      .               #[inline]
      .               fn num_open_snapshots(&self) -> usize {
      .                   self.num_open_snapshots
      .               }
      .           
      .               #[inline]
      .               fn push(&mut self, undo: T) {
 19,322 ( 0.00%)          if self.in_snapshot() {
 13,280 ( 0.00%)              self.logs.push(undo.into())
      .                   }
      .               }
      .           
      .               fn clear(&mut self) {
      .                   self.logs.clear();
      .                   self.num_open_snapshots = 0;
      .               }
      .           
-- line 120 ----------------------------------------
-- line 125 ----------------------------------------
      .               {
      .                   if self.in_snapshot() {
      .                       self.logs.extend(undos.into_iter().map(UndoLog::from))
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> InferCtxtInner<'tcx> {
 43,050 ( 0.01%)      pub fn rollback_to(&mut self, snapshot: Snapshot<'tcx>) {
      .                   debug!("rollback_to({})", snapshot.undo_len);
      .                   self.undo_log.assert_open_snapshot(&snapshot);
      .           
 85,036 ( 0.02%)          while self.undo_log.logs.len() > snapshot.undo_len {
      .                       let undo = self.undo_log.logs.pop().unwrap();
282,744 ( 0.06%)              self.reverse(undo);
      .                   }
      .           
 17,337 ( 0.00%)          if self.undo_log.num_open_snapshots == 1 {
      .                       // The root snapshot. It's safe to clear the undo log because
      .                       // there's no snapshot further out that we might need to roll back
      .                       // to.
  3,306 ( 0.00%)              assert!(snapshot.undo_len == 0);
      .                       self.undo_log.logs.clear();
      .                   }
      .           
 23,178 ( 0.00%)          self.undo_log.num_open_snapshots -= 1;
 50,225 ( 0.01%)      }
      .           
      .               pub fn commit(&mut self, snapshot: Snapshot<'tcx>) {
      .                   debug!("commit({})", snapshot.undo_len);
      .           
 41,379 ( 0.01%)          if self.undo_log.num_open_snapshots == 1 {
      .                       // The root snapshot. It's safe to clear the undo log because
      .                       // there's no snapshot further out that we might need to roll back
      .                       // to.
  8,284 ( 0.00%)              assert!(snapshot.undo_len == 0);
      .                       self.undo_log.logs.clear();
      .                   }
      .           
 45,521 ( 0.01%)          self.undo_log.num_open_snapshots -= 1;
      .               }
      .           }
      .           
      .           impl<'tcx> InferCtxtUndoLogs<'tcx> {
      .               pub fn start_snapshot(&mut self) -> Snapshot<'tcx> {
 83,872 ( 0.02%)          self.num_open_snapshots += 1;
      .                   Snapshot { undo_len: self.logs.len(), _marker: PhantomData }
      .               }
      .           
      .               pub(crate) fn region_constraints_in_snapshot(
      .                   &self,
      .                   s: &Snapshot<'tcx>,
      .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
 13,553 ( 0.00%)          self.logs[s.undo_len..].iter().filter_map(|log| match log {
      .                       UndoLog::RegionConstraintCollector(log) => Some(log),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               pub(crate) fn region_constraints(
      .                   &self,
      .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
      5 ( 0.00%)          self.logs.iter().filter_map(|log| match log {
      .                       UndoLog::RegionConstraintCollector(log) => Some(log),
      .                       _ => None,
      .                   })
      .               }
      .           
      .               fn assert_open_snapshot(&self, snapshot: &Snapshot<'tcx>) {
      .                   // Failures here may indicate a failure to follow a stack discipline.
 21,525 ( 0.00%)          assert!(self.logs.len() >= snapshot.undo_len);
 21,525 ( 0.00%)          assert!(self.num_open_snapshots > 0);
      .               }
      .           }
      .           
      .           impl<'tcx> std::ops::Index<usize> for InferCtxtUndoLogs<'tcx> {
      .               type Output = UndoLog<'tcx>;
      .           
      .               fn index(&self, key: usize) -> &Self::Output {
      .                   &self.logs[key]
-- line 204 ----------------------------------------

 31,410 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs
--------------------------------------------------------------------------------
Ir               

-- line 504 ----------------------------------------
      .           use crate::panicking::{panic, panic_str};
      .           use crate::pin::Pin;
      .           use crate::{
      .               convert, hint, mem,
      .               ops::{self, ControlFlow, Deref, DerefMut},
      .           };
      .           
      .           /// The `Option` type. See [the module level documentation](self) for more.
665,475 ( 0.14%)  #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
      .           #[rustc_diagnostic_item = "Option"]
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           pub enum Option<T> {
      .               /// No value.
      .               #[lang = "None"]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               None,
      .               /// Some value of type `T`.
      .               #[lang = "Some"]
      .               #[stable(feature = "rust1", since = "1.0.0")]
    556 ( 0.00%)      Some(#[stable(feature = "rust1", since = "1.0.0")] T),
      .           }
      .           
      .           /////////////////////////////////////////////////////////////////////////////
      .           // Type implementation
      .           /////////////////////////////////////////////////////////////////////////////
      .           
      .           impl<T> Option<T> {
      .               /////////////////////////////////////////////////////////////////////////
-- line 531 ----------------------------------------
-- line 543 ----------------------------------------
      .               /// let x: Option<u32> = None;
      .               /// assert_eq!(x.is_some(), false);
      .               /// ```
      .               #[must_use = "if you intended to assert that this has a value, consider `.unwrap()` instead"]
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
      .               pub const fn is_some(&self) -> bool {
373,551 ( 0.08%)          matches!(*self, Some(_))
      .               }
      .           
      .               /// Returns `true` if the option is a [`Some`] wrapping a value matching the predicate.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// #![feature(is_some_with)]
-- line 559 ----------------------------------------
-- line 616 ----------------------------------------
      .               /// // then consume *that* with `map`, leaving `text` on the stack.
      .               /// let text_length: Option<usize> = text.as_ref().map(|s| s.len());
      .               /// println!("still can print text: {:?}", text);
      .               /// ```
      .               #[inline]
      .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub const fn as_ref(&self) -> Option<&T> {
719,770 ( 0.15%)          match *self {
      .                       Some(ref x) => Some(x),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Converts from `&mut Option<T>` to `Option<&mut T>`.
      .               ///
      .               /// # Examples
-- line 632 ----------------------------------------
-- line 638 ----------------------------------------
      .               ///     None => {},
      .               /// }
      .               /// assert_eq!(x, Some(42));
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
      .               pub const fn as_mut(&mut self) -> Option<&mut T> {
128,490 ( 0.03%)          match *self {
      .                       Some(ref mut x) => Some(x),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Converts from <code>[Pin]<[&]Option\<T>></code> to <code>Option<[Pin]<[&]T>></code>.
      .               ///
      .               /// [&]: reference "shared reference"
-- line 654 ----------------------------------------
-- line 705 ----------------------------------------
      .               /// let x: Option<&str> = None;
      .               /// x.expect("fruits are healthy"); // panics with `fruits are healthy`
      .               /// ```
      .               #[inline]
      .               #[track_caller]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
      .               pub const fn expect(self, msg: &str) -> T {
195,339 ( 0.04%)          match self {
 44,957 ( 0.01%)              Some(val) => val,
      .                       None => expect_failed(msg),
      .                   }
      .               }
      .           
      .               /// Returns the contained [`Some`] value, consuming the `self` value.
      .               ///
      .               /// Because this function may panic, its use is generally discouraged.
      .               /// Instead, prefer to use pattern matching and handle the [`None`]
-- line 722 ----------------------------------------
-- line 742 ----------------------------------------
      .               /// let x: Option<&str> = None;
      .               /// assert_eq!(x.unwrap(), "air"); // fails
      .               /// ```
      .               #[inline]
      .               #[track_caller]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
      .               pub const fn unwrap(self) -> T {
649,845 ( 0.14%)          match self {
230,577 ( 0.05%)              Some(val) => val,
      .                       None => panic("called `Option::unwrap()` on a `None` value"),
      .                   }
      .               }
      .           
      .               /// Returns the contained [`Some`] value or a provided default.
      .               ///
      .               /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing
      .               /// the result of a function call, it is recommended to use [`unwrap_or_else`],
-- line 759 ----------------------------------------
-- line 769 ----------------------------------------
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
      .               pub const fn unwrap_or(self, default: T) -> T
      .               where
      .                   T: ~const Drop,
      .               {
129,480 ( 0.03%)          match self {
      .                       Some(x) => x,
    948 ( 0.00%)              None => default,
      .                   }
    327 ( 0.00%)      }
      .           
      .               /// Returns the contained [`Some`] value or computes it from a closure.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let k = 10;
      .               /// assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4);
      .               /// assert_eq!(None.unwrap_or_else(|| 2 * k), 20);
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
     43 ( 0.00%)      pub const fn unwrap_or_else<F>(self, f: F) -> T
      .               where
      .                   F: ~const FnOnce() -> T,
      .                   F: ~const Drop,
      .               {
171,197 ( 0.04%)          match self {
 27,228 ( 0.01%)              Some(x) => x,
    700 ( 0.00%)              None => f(),
      .                   }
     89 ( 0.00%)      }
      .           
      .               /// Returns the contained [`Some`] value or a default.
      .               ///
      .               /// Consumes the `self` argument then, if [`Some`], returns the contained
      .               /// value, otherwise if [`None`], returns the [default value] for that
      .               /// type.
      .               ///
      .               /// # Examples
-- line 812 ----------------------------------------
-- line 831 ----------------------------------------
      .               /// [`FromStr`]: crate::str::FromStr
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
      .               pub const fn unwrap_or_default(self) -> T
      .               where
      .                   T: ~const Default,
      .               {
  1,262 ( 0.00%)          match self {
  1,078 ( 0.00%)              Some(x) => x,
      .                       None => Default::default(),
      .                   }
      .               }
      .           
      .               /// Returns the contained [`Some`] value, consuming the `self` value,
      .               /// without checking that the value is not [`None`].
      .               ///
      .               /// # Safety
-- line 848 ----------------------------------------
-- line 892 ----------------------------------------
      .               /// // `Option::map` takes self *by value*, consuming `maybe_some_string`
      .               /// let maybe_some_len = maybe_some_string.map(|s| s.len());
      .               ///
      .               /// assert_eq!(maybe_some_len, Some(13));
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
  1,029 ( 0.00%)      pub const fn map<U, F>(self, f: F) -> Option<U>
      .               where
      .                   F: ~const FnOnce(T) -> U,
      .                   F: ~const Drop,
      .               {
477,662 ( 0.10%)          match self {
756,851 ( 0.16%)              Some(x) => Some(f(x)),
 14,266 ( 0.00%)              None => None,
      .                   }
 25,306 ( 0.01%)      }
      .           
      .               /// Calls the provided closure with a reference to the contained value (if [`Some`]).
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// #![feature(result_option_inspect)]
      .               ///
-- line 917 ----------------------------------------
-- line 960 ----------------------------------------
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
      .               pub const fn map_or<U, F>(self, default: U, f: F) -> U
      .               where
      .                   F: ~const FnOnce(T) -> U,
      .                   F: ~const Drop,
      .                   U: ~const Drop,
      .               {
124,380 ( 0.03%)          match self {
  5,148 ( 0.00%)              Some(t) => f(t),
    922 ( 0.00%)              None => default,
      .                   }
      .               }
      .           
      .               /// Computes a default function result (if none), or
      .               /// applies a different function to the contained value (if any).
      .               ///
      .               /// # Examples
      .               ///
-- line 978 ----------------------------------------
-- line 990 ----------------------------------------
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
      .               pub const fn map_or_else<U, D, F>(self, default: D, f: F) -> U
      .               where
      .                   D: ~const FnOnce() -> U,
      .                   D: ~const Drop,
      .                   F: ~const FnOnce(T) -> U,
      .                   F: ~const Drop,
      .               {
  2,092 ( 0.00%)          match self {
    116 ( 0.00%)              Some(t) => f(t),
      .                       None => default(),
      .                   }
      .               }
      .           
      .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
      .               /// [`Ok(v)`] and [`None`] to [`Err(err)`].
      .               ///
      .               /// Arguments passed to `ok_or` are eagerly evaluated; if you are passing the
-- line 1007 ----------------------------------------
-- line 1024 ----------------------------------------
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
      .               pub const fn ok_or<E>(self, err: E) -> Result<T, E>
      .               where
      .                   E: ~const Drop,
      .               {
 67,284 ( 0.01%)          match self {
    844 ( 0.00%)              Some(v) => Ok(v),
    422 ( 0.00%)              None => Err(err),
      .                   }
      .               }
      .           
      .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
      .               /// [`Ok(v)`] and [`None`] to [`Err(err())`].
      .               ///
      .               /// [`Ok(v)`]: Ok
      .               /// [`Err(err())`]: Err
-- line 1042 ----------------------------------------
-- line 1054 ----------------------------------------
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
      .               pub const fn ok_or_else<E, F>(self, err: F) -> Result<T, E>
      .               where
      .                   F: ~const FnOnce() -> E,
      .                   F: ~const Drop,
      .               {
  7,906 ( 0.00%)          match self {
  7,427 ( 0.00%)              Some(v) => Ok(v),
  2,369 ( 0.00%)              None => Err(err()),
      .                   }
      .               }
      .           
      .               /// Converts from `Option<T>` (or `&Option<T>`) to `Option<&T::Target>`.
      .               ///
      .               /// Leaves the original Option in-place, creating a new one with a reference
      .               /// to the original one, additionally coercing the contents via [`Deref`].
      .               ///
-- line 1072 ----------------------------------------
-- line 1080 ----------------------------------------
      .               /// assert_eq!(x.as_deref(), None);
      .               /// ```
      .               #[stable(feature = "option_deref", since = "1.40.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
      .               pub const fn as_deref(&self) -> Option<&T::Target>
      .               where
      .                   T: ~const Deref,
      .               {
  9,574 ( 0.00%)          match self.as_ref() {
      .                       Some(t) => Some(t.deref()),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Converts from `Option<T>` (or `&mut Option<T>`) to `Option<&mut T::Target>`.
      .               ///
      .               /// Leaves the original `Option` in-place, creating a new one containing a mutable reference to
-- line 1096 ----------------------------------------
-- line 1213 ----------------------------------------
      .               /// assert_eq!(Some(2).and_then(sq).and_then(sq), Some(16));
      .               /// assert_eq!(Some(2).and_then(sq).and_then(nope), None);
      .               /// assert_eq!(Some(2).and_then(nope).and_then(sq), None);
      .               /// assert_eq!(None.and_then(sq).and_then(sq), None);
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
     80 ( 0.00%)      pub const fn and_then<U, F>(self, f: F) -> Option<U>
      .               where
      .                   F: ~const FnOnce(T) -> Option<U>,
      .                   F: ~const Drop,
      .               {
 25,770 ( 0.01%)          match self {
  4,329 ( 0.00%)              Some(x) => f(x),
      .                       None => None,
      .                   }
  4,362 ( 0.00%)      }
      .           
      .               /// Returns [`None`] if the option is [`None`], otherwise calls `predicate`
      .               /// with the wrapped value and returns:
      .               ///
      .               /// - [`Some(t)`] if `predicate` returns `true` (where `t` is the wrapped
      .               ///   value), and
      .               /// - [`None`] if `predicate` returns `false`.
      .               ///
-- line 1238 ----------------------------------------
-- line 1257 ----------------------------------------
      .               #[stable(feature = "option_filter", since = "1.27.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
      .               pub const fn filter<P>(self, predicate: P) -> Self
      .               where
      .                   T: ~const Drop,
      .                   P: ~const FnOnce(&T) -> bool,
      .                   P: ~const Drop,
      .               {
  1,331 ( 0.00%)          if let Some(x) = self {
    333 ( 0.00%)              if predicate(&x) {
      .                           return Some(x);
      .                       }
      .                   }
      .                   None
    138 ( 0.00%)      }
      .           
      .               /// Returns the option if it contains a value, otherwise returns `optb`.
      .               ///
      .               /// Arguments passed to `or` are eagerly evaluated; if you are passing the
      .               /// result of a function call, it is recommended to use [`or_else`], which is
      .               /// lazily evaluated.
      .               ///
      .               /// [`or_else`]: Option::or_else
-- line 1279 ----------------------------------------
-- line 1299 ----------------------------------------
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
      .               pub const fn or(self, optb: Option<T>) -> Option<T>
      .               where
      .                   T: ~const Drop,
      .               {
  1,144 ( 0.00%)          match self {
     91 ( 0.00%)              Some(x) => Some(x),
      .                       None => optb,
      .                   }
      .               }
      .           
      .               /// Returns the option if it contains a value, otherwise calls `f` and
      .               /// returns the result.
      .               ///
      .               /// # Examples
-- line 1316 ----------------------------------------
-- line 1326 ----------------------------------------
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
      .               pub const fn or_else<F>(self, f: F) -> Option<T>
      .               where
      .                   F: ~const FnOnce() -> Option<T>,
      .                   F: ~const Drop,
      .               {
  4,737 ( 0.00%)          match self {
  2,166 ( 0.00%)              Some(x) => Some(x),
      .                       None => f(),
      .                   }
      .               }
      .           
      .               /// Returns [`Some`] if exactly one of `self`, `optb` is [`Some`], otherwise returns [`None`].
      .               ///
      .               /// # Examples
      .               ///
-- line 1343 ----------------------------------------
-- line 1431 ----------------------------------------
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "option_entry", since = "1.20.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
      .               pub const fn get_or_insert(&mut self, value: T) -> &mut T
      .               where
      .                   T: ~const Drop,
      .               {
  7,371 ( 0.00%)          if let None = *self {
 17,195 ( 0.00%)              *self = Some(value);
      .                   }
      .           
      .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
      .                   // variant in the code above.
      .                   unsafe { self.as_mut().unwrap_unchecked() }
      .               }
      .           
      .               /// Inserts the default value into the option if it is [`None`], then
-- line 1448 ----------------------------------------
-- line 1499 ----------------------------------------
      .               #[inline]
      .               #[stable(feature = "option_entry", since = "1.20.0")]
      .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
      .               pub const fn get_or_insert_with<F>(&mut self, f: F) -> &mut T
      .               where
      .                   F: ~const FnOnce() -> T,
      .                   F: ~const Drop,
      .               {
 47,092 ( 0.01%)          if let None = *self {
      .                       // the compiler isn't smart enough to know that we are not dropping a `T`
      .                       // here and wants us to ensure `T` can be dropped at compile time.
     12 ( 0.00%)              mem::forget(mem::replace(self, Some(f())))
      .                   }
      .           
      .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
      .                   // variant in the code above.
      .                   unsafe { self.as_mut().unwrap_unchecked() }
      .               }
      .           
      .               /////////////////////////////////////////////////////////////////////////
-- line 1518 ----------------------------------------
-- line 1558 ----------------------------------------
      .               /// let old = x.replace(3);
      .               /// assert_eq!(x, Some(3));
      .               /// assert_eq!(old, None);
      .               /// ```
      .               #[inline]
      .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
      .               #[stable(feature = "option_replace", since = "1.31.0")]
      .               pub const fn replace(&mut self, value: T) -> Option<T> {
    516 ( 0.00%)          mem::replace(self, Some(value))
      .               }
      .           
      .               /// Returns `true` if the option is a [`Some`] value containing the given value.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// #![feature(option_result_contains)]
-- line 1574 ----------------------------------------
-- line 1712 ----------------------------------------
      .               #[stable(feature = "copied", since = "1.35.0")]
      .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
      .               pub const fn copied(self) -> Option<T>
      .               where
      .                   T: Copy,
      .               {
      .                   // FIXME: this implementation, which sidesteps using `Option::map` since it's not const
      .                   // ready yet, should be reverted when possible to avoid code repetition
 11,081 ( 0.00%)          match self {
 95,018 ( 0.02%)              Some(&v) => Some(v),
    540 ( 0.00%)              None => None,
      .                   }
     12 ( 0.00%)      }
      .           
      .               /// Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the
      .               /// option.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let x = 12;
-- line 1732 ----------------------------------------
-- line 1733 ----------------------------------------
      .               /// let opt_x = Some(&x);
      .               /// assert_eq!(opt_x, Some(&12));
      .               /// let cloned = opt_x.cloned();
      .               /// assert_eq!(cloned, Some(12));
      .               /// ```
      .               #[must_use = "`self` will be dropped if the result is not used"]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_unstable(feature = "const_option_cloned", issue = "91582")]
  2,884 ( 0.00%)      pub const fn cloned(self) -> Option<T>
      .               where
      .                   T: ~const Clone,
      .               {
 27,158 ( 0.01%)          match self {
 54,836 ( 0.01%)              Some(t) => Some(t.clone()),
  2,287 ( 0.00%)              None => None,
      .                   }
  6,790 ( 0.00%)      }
      .           }
      .           
      .           impl<T> Option<&mut T> {
      .               /// Maps an `Option<&mut T>` to an `Option<T>` by copying the contents of the
      .               /// option.
      .               ///
      .               /// # Examples
      .               ///
-- line 1757 ----------------------------------------
-- line 1843 ----------------------------------------
      .           /////////////////////////////////////////////////////////////////////////////
      .           // Trait implementations
      .           /////////////////////////////////////////////////////////////////////////////
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<T: Clone> Clone for Option<T> {
      .               #[inline]
      .               fn clone(&self) -> Self {
663,161 ( 0.14%)          match self {
  9,308 ( 0.00%)              Some(x) => Some(x.clone()),
    233 ( 0.00%)              None => None,
      .                   }
182,703 ( 0.04%)      }
      .           
      .               #[inline]
      .               fn clone_from(&mut self, source: &Self) {
      .                   match (self, source) {
      .                       (Some(to), Some(from)) => to.clone_from(from),
      .                       (to, from) => *to = from.clone(),
      .                   }
      .               }
-- line 1863 ----------------------------------------
-- line 2006 ----------------------------------------
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
      .                   self.opt.take()
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
  3,084 ( 0.00%)          match self.opt {
      .                       Some(_) => (1, Some(1)),
      .                       None => (0, Some(0)),
      .                   }
      .               }
      .           }
      .           
      .           impl<A> DoubleEndedIterator for Item<A> {
      .               #[inline]
-- line 2022 ----------------------------------------
-- line 2136 ----------------------------------------
      .               type Item = A;
      .           
      .               #[inline]
      .               fn next(&mut self) -> Option<A> {
      .                   self.inner.next()
      .               }
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
     11 ( 0.00%)          self.inner.size_hint()
      .               }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<A> DoubleEndedIterator for IntoIter<A> {
      .               #[inline]
      .               fn next_back(&mut self) -> Option<A> {
      .                   self.inner.next_back()
-- line 2152 ----------------------------------------
-- line 2241 ----------------------------------------
      .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
      .           impl<T> const ops::Try for Option<T> {
      .               type Output = T;
      .               type Residual = Option<convert::Infallible>;
      .           
      .               #[inline]
      .               fn from_output(output: Self::Output) -> Self {
      .                   Some(output)
    645 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
 96,315 ( 0.02%)          match self {
 15,658 ( 0.00%)              Some(v) => ControlFlow::Continue(v),
      .                       None => ControlFlow::Break(None),
      .                   }
      .               }
      .           }
      .           
      .           #[unstable(feature = "try_trait_v2", issue = "84277")]
      .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
      .           impl<T> const ops::FromResidual for Option<T> {
      .               #[inline]
      .               fn from_residual(residual: Option<convert::Infallible>) -> Self {
      .                   match residual {
 13,630 ( 0.00%)              None => None,
      .                   }
      .               }
      .           }
      .           
      .           #[unstable(feature = "try_trait_v2_residual", issue = "91285")]
      .           impl<T> ops::Residual<T> for Option<convert::Infallible> {
      .               type TryType = Option<T>;
      .           }
-- line 2274 ----------------------------------------

708,066 ( 0.15%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir               

-- line 118 ----------------------------------------
      .               stability: InternedSet<'tcx, attr::Stability>,
      .           
      .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
      .               const_stability: InternedSet<'tcx, attr::ConstStability>,
      .           }
      .           
      .           impl<'tcx> CtxtInterners<'tcx> {
      .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
     17 ( 0.00%)          CtxtInterners {
      .                       arena,
      .                       type_: Default::default(),
      .                       type_list: Default::default(),
      .                       substs: Default::default(),
      .                       region: Default::default(),
      .                       poly_existential_predicates: Default::default(),
      .                       canonical_var_infos: Default::default(),
      .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
      .                       stability: Default::default(),
      .                       const_stability: Default::default(),
      .                   }
      .               }
      .           
      .               /// Interns a type.
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline(never)]
630,264 ( 0.13%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
      .                   self.type_
393,915 ( 0.08%)              .intern(kind, |kind| {
 16,252 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
      .           
      .                           let ty_struct = TyS {
 32,504 ( 0.01%)                      kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(ty_struct))
      .                       })
      .                       .0
709,047 ( 0.15%)      }
      .           
      .               #[inline(never)]
264,520 ( 0.06%)      fn intern_predicate(
      .                   &self,
      .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> &'tcx PredicateInner<'tcx> {
      .                   self.predicate
231,455 ( 0.05%)              .intern(kind, |kind| {
 26,544 ( 0.01%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
      .           
      .                           let predicate_struct = PredicateInner {
      .                               kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(predicate_struct))
      .                       })
      .                       .0
297,585 ( 0.06%)      }
      .           }
      .           
      .           pub struct CommonTypes<'tcx> {
      .               pub unit: Ty<'tcx>,
      .               pub bool: Ty<'tcx>,
      .               pub char: Ty<'tcx>,
      .               pub isize: Ty<'tcx>,
      .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
      .           /// safely used as a key in the maps of a TypeckResults. For that to be
      .           /// the case, the HirId must have the same `owner` as all the other IDs in
      .           /// this table (signified by `hir_owner`). Otherwise the HirId
      .           /// would be in a different frame of reference and using its `local_id`
      .           /// would result in lookup errors, or worse, in silently wrong data being
      .           /// stored/returned.
      .           #[inline]
      .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
 34,456 ( 0.01%)      if hir_id.owner != hir_owner {
      .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
      .               }
      .           }
      .           
      .           #[cold]
      .           #[inline(never)]
      .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
      .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
      .           }
      .           
      .           impl<'a, V> LocalTableInContext<'a, V> {
      .               pub fn contains_key(&self, id: hir::HirId) -> bool {
      .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.data.contains_key(&id.local_id)
      .               }
      .           
 25,215 ( 0.01%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
  5,108 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
  5,108 ( 0.00%)          self.data.get(&id.local_id)
 20,204 ( 0.00%)      }
      .           
      .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
      .                   self.data.iter()
      .               }
      .           }
      .           
      .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
      .               type Output = V;
      .           
    582 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
      .                   self.get(key).expect("LocalTableInContext: key not found")
    388 ( 0.00%)      }
      .           }
      .           
      .           pub struct LocalTableInContextMut<'a, V> {
      .               hir_owner: LocalDefId,
      .               data: &'a mut ItemLocalMap<V>,
      .           }
      .           
      .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
      .               pub treat_byte_string_as_slice: ItemLocalSet,
      .           
      .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
      .               /// on closure size.
      .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
      .           }
      .           
      .           impl<'tcx> TypeckResults<'tcx> {
  2,766 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
 32,731 ( 0.01%)          TypeckResults {
      .                       hir_owner,
      .                       type_dependent_defs: Default::default(),
      .                       field_indices: Default::default(),
      .                       user_provided_types: Default::default(),
      .                       user_provided_sigs: Default::default(),
      .                       node_types: Default::default(),
      .                       node_substs: Default::default(),
      .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
      .                       tainted_by_errors: None,
      .                       concrete_opaque_types: Default::default(),
      .                       closure_min_captures: Default::default(),
      .                       closure_fake_reads: Default::default(),
      .                       generator_interior_types: ty::Binder::dummy(Default::default()),
      .                       treat_byte_string_as_slice: Default::default(),
      .                       closure_size_eval: Default::default(),
      .                   }
  2,766 ( 0.00%)      }
      .           
      .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
  4,938 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
  3,292 ( 0.00%)          match *qpath {
  8,208 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
      .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
      .                           .type_dependent_def(id)
  1,668 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
      .                   }
  8,230 ( 0.00%)      }
      .           
      3 ( 0.00%)      pub fn type_dependent_defs(
      .                   &self,
      .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    413 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
      3 ( 0.00%)      }
      .           
    516 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
  1,226 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
  1,032 ( 0.00%)      }
      .           
  1,728 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
      .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
  1,728 ( 0.00%)      }
      .           
  2,317 ( 0.00%)      pub fn type_dependent_defs_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
  2,317 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
  2,317 ( 0.00%)      }
      .           
      .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
    418 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
     74 ( 0.00%)      }
      .           
      .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    678 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
    339 ( 0.00%)      }
      .           
      .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    934 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    467 ( 0.00%)      }
      .           
      .               pub fn user_provided_types_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
      4 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
      2 ( 0.00%)      }
      .           
      .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
  4,932 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
  2,466 ( 0.00%)      }
      .           
      .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
  7,874 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
  3,937 ( 0.00%)      }
      .           
 34,380 ( 0.01%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
  5,730 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
      .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
      .                   })
 28,650 ( 0.01%)      }
      .           
  7,563 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
  7,563 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_types.get(&id.local_id).cloned()
 15,126 ( 0.00%)      }
      .           
      .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    916 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    458 ( 0.00%)      }
      .           
  2,515 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
  2,515 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
  5,030 ( 0.00%)      }
      .           
  1,739 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
  1,739 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned()
  3,478 ( 0.00%)      }
      .           
      .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
      .               // doesn't provide type parameter substitutions.
      .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
  1,148 ( 0.00%)          self.node_type(pat.hir_id)
      .               }
      .           
      .               // Returns the type of an expression as a monotype.
      .               //
      .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
      .               // some cases, we insert `Adjustment` annotations such as auto-deref or
      .               // auto-ref.  The type returned by this function does not consider such
      .               // adjustments.  See `expr_ty_adjusted()` instead.
      .               //
      .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
      .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
      .               // instead of "fn(ty) -> T with T = isize".
      .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
  6,767 ( 0.00%)          self.node_type(expr.hir_id)
      .               }
      .           
      .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
  6,913 ( 0.00%)          self.node_type_opt(expr.hir_id)
      .               }
      .           
      .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  3,196 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
  1,598 ( 0.00%)      }
      .           
      .               pub fn adjustments_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  5,658 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
  2,829 ( 0.00%)      }
      .           
  3,054 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
  6,108 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
      .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
  6,108 ( 0.00%)      }
      .           
      .               /// Returns the type of `expr`, considering any `Adjustment`
      .               /// entry recorded for that expression.
    565 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
    113 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
    272 ( 0.00%)      }
      .           
    695 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
    139 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
    416 ( 0.00%)      }
      .           
    410 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
      .                   // Only paths and method calls/overloaded operators have
      .                   // entries in type_dependent_defs, ignore the former here.
    820 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
      .                       return false;
      .                   }
      .           
  1,248 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    820 ( 0.00%)      }
      .           
  2,118 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
      .                   self.pat_binding_modes().get(id).copied().or_else(|| {
      .                       s.delay_span_bug(sp, "missing binding mode");
      .                       None
      .                   })
  2,824 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
  1,788 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    541 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    928 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    464 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
  1,806 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    903 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    562 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
    281 ( 0.00%)      }
      .           
      .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
      .               /// by the closure.
    696 ( 0.00%)      pub fn closure_min_captures_flattened(
      .                   &self,
      .                   closure_def_id: DefId,
      .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
      .                   self.closure_min_captures
      .                       .get(&closure_def_id)
      .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
      .                       .into_iter()
      .                       .flatten()
    870 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
    194 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
     97 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
      .               }
      .           
      .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    582 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
    291 ( 0.00%)      }
      .           
      .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
    388 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
    194 ( 0.00%)      }
      .           
      .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    194 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
     97 ( 0.00%)      }
      .           
      .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
      .               }
      .           
      6 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
      2 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
      .                   self.coercion_casts.contains(&hir_id.local_id)
      4 ( 0.00%)      }
      .           
      .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
      .                   self.coercion_casts.insert(id);
      .               }
      .           
      .               pub fn coercion_casts(&self) -> &ItemLocalSet {
     97 ( 0.00%)          &self.coercion_casts
     97 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
      .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
      .                   let ty::TypeckResults {
      .                       hir_owner,
      .                       ref type_dependent_defs,
      .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 823 ----------------------------------------
      .           /// Mapping of type annotation indices to canonical user type annotations.
      .           pub type CanonicalUserTypeAnnotations<'tcx> =
      .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
      .           
      .           #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
      .           pub struct CanonicalUserTypeAnnotation<'tcx> {
      .               pub user_ty: CanonicalUserType<'tcx>,
      .               pub span: Span,
      2 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
      .           }
      .           
      .           /// Canonicalized user type annotation.
      .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
      .           
      .           impl<'tcx> CanonicalUserType<'tcx> {
      .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
      .               /// i.e., each thing is mapped to a canonical variable with the same index.
     97 ( 0.00%)      pub fn is_identity(&self) -> bool {
    194 ( 0.00%)          match self.value {
      .                       UserType::Ty(_) => false,
      .                       UserType::TypeOf(_, user_substs) => {
     97 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
      .                               return false;
      .                           }
      .           
      .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
      .                               match kind.unpack() {
    204 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
      .                                       ty::Bound(debruijn, b) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
    102 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
      .                                           cvar == b.var
      .                                       }
      .                                       _ => false,
      .                                   },
      .           
      .                                   GenericArgKind::Lifetime(r) => match r {
      .                                       ty::ReLateBound(debruijn, br) => {
      .                                           // We only allow a `ty::INNERMOST` index in substitutions.
-- line 861 ----------------------------------------
-- line 872 ----------------------------------------
      .                                           cvar == b
      .                                       }
      .                                       _ => false,
      .                                   },
      .                               }
      .                           })
      .                       }
      .                   }
    194 ( 0.00%)      }
      .           }
      .           
      .           /// A user-given type annotation attached to a constant. These arise
      .           /// from constants that are named via paths, like `Foo::<A>::new` and
      .           /// so forth.
     12 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
    897 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
      .           pub enum UserType<'tcx> {
      .               Ty(Ty<'tcx>),
      .           
      .               /// The canonical type is the result of `type_of(def_id)` with the
      .               /// given substitutions applied.
      .               TypeOf(DefId, UserSubsts<'tcx>),
      .           }
      .           
      .           impl<'tcx> CommonTypes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
    111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
      .           
      .                   CommonTypes {
      .                       unit: mk(Tuple(List::empty())),
      .                       bool: mk(Bool),
      .                       char: mk(Char),
      .                       never: mk(Never),
      .                       isize: mk(Int(ty::IntTy::Isize)),
      .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
      .           
      .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonLifetimes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
     67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
      .           
      .                   CommonLifetimes {
      5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
      5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
      5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonConsts<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
      6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
      .           
      .                   CommonConsts {
      .                       unit: mk_const(ty::Const {
      .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
      .                           ty: types.unit,
      .                       }),
      .                   }
      .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
      .           
      .               /// Stores memory for globals (statics/consts).
      .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
      .           
      .               output_filenames: Arc<OutputFilenames>,
      .           }
      .           
      .           impl<'tcx> TyCtxt<'tcx> {
  4,520 ( 0.00%)      pub fn typeck_opt_const_arg(
      .                   self,
      .                   def: ty::WithOptConstParam<LocalDefId>,
      .               ) -> &'tcx TypeckResults<'tcx> {
  1,808 ( 0.00%)          if let Some(param_did) = def.const_param_did {
      .                       self.typeck_const_arg((def.did, param_did))
      .                   } else {
      .                       self.typeck(def.did)
      .                   }
  3,616 ( 0.00%)      }
      .           
    324 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
    108 ( 0.00%)          self.arena.alloc(Steal::new(thir))
    432 ( 0.00%)      }
      .           
  1,675 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
    335 ( 0.00%)          self.arena.alloc(Steal::new(mir))
  2,345 ( 0.00%)      }
      .           
    432 ( 0.00%)      pub fn alloc_steal_promoted(
      .                   self,
      .                   promoted: IndexVec<Promoted, Body<'tcx>>,
      .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
    108 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    540 ( 0.00%)      }
      .           
    342 ( 0.00%)      pub fn alloc_adt_def(
      .                   self,
      .                   did: DefId,
      .                   kind: AdtKind,
      .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
      .                   repr: ReprOptions,
      .               ) -> &'tcx ty::AdtDef {
    608 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
    152 ( 0.00%)      }
      .           
      .               /// Allocates a read-only byte or string literal for `mir::interpret`.
      .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
      .                   // Create an allocation that just contains these bytes.
      .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
      .                   let alloc = self.intern_const_alloc(alloc);
      .                   self.create_memory_alloc(alloc)
      .               }
      .           
      .               /// Returns a range of the start/end indices specified with the
      .               /// `rustc_layout_scalar_valid_range` attribute.
      .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
    800 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    400 ( 0.00%)          let attrs = self.get_attrs(def_id);
  1,700 ( 0.00%)          let get = |name| {
    400 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
      .                           Some(attr) => attr,
      .                           None => return Bound::Unbounded,
      .                       };
      .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
      .                       if let Some(
      .                           &[
      .                               ast::NestedMetaItem::Literal(ast::Lit {
      .                                   kind: ast::LitKind::Int(a, _), ..
-- line 1111 ----------------------------------------
-- line 1114 ----------------------------------------
      .                       ) = attr.meta_item_list().as_deref()
      .                       {
      .                           Bound::Included(a)
      .                       } else {
      .                           self.sess
      .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
      .                           Bound::Unbounded
      .                       }
  2,000 ( 0.00%)          };
    600 ( 0.00%)          (
    600 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    300 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
      .                   )
    800 ( 0.00%)      }
      .           
      .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
      .                   value.lift_to_tcx(self)
      .               }
      .           
      .               /// Creates a type context and call the closure with a `TyCtxt` reference
      .               /// to the context. The closure enforces that the type context and any interned
      .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
      .               /// reference to the context, to allow formatting values that need it.
     23 ( 0.00%)      pub fn create_global_ctxt(
      .                   s: &'tcx Session,
      .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
      .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
      .                   resolutions: ty::ResolverOutputs,
      .                   krate: &'tcx hir::Crate<'tcx>,
      .                   dep_graph: DepGraph,
      .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
      .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
      .                   query_kinds: &'tcx [DepKindStruct],
      .                   crate_name: &str,
      .                   output_filenames: OutputFilenames,
      .               ) -> GlobalCtxt<'tcx> {
      1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
      .                       s.fatal(&err);
      .                   });
      .                   let interners = CtxtInterners::new(arena);
      .                   let common_types = CommonTypes::new(&interners);
      .                   let common_lifetimes = CommonLifetimes::new(&interners);
      .                   let common_consts = CommonConsts::new(&interners, &common_types);
      .           
    127 ( 0.00%)          GlobalCtxt {
      .                       sess: s,
      6 ( 0.00%)              lint_store,
      .                       arena,
      2 ( 0.00%)              interners,
      5 ( 0.00%)              dep_graph,
      4 ( 0.00%)              untracked_resolutions: resolutions,
      2 ( 0.00%)              prof: s.prof.clone(),
      .                       types: common_types,
      .                       lifetimes: common_lifetimes,
      .                       consts: common_consts,
      .                       untracked_crate: krate,
      .                       on_disk_cache,
      .                       queries,
      .                       query_caches: query::QueryCaches::default(),
      .                       query_kinds,
      .                       ty_rcache: Default::default(),
      .                       pred_rcache: Default::default(),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
      .                       data_layout,
      .                       alloc_map: Lock::new(interpret::AllocMap::new()),
      .                       output_filenames: Arc::new(output_filenames),
      .                   }
      9 ( 0.00%)      }
      .           
      .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
      .                   &self.query_kinds[k as usize]
      .               }
      .           
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
      .                   ty: Ty<'tcx>,
      .                   span: S,
      .                   msg: &str,
      .               ) -> &'tcx Const<'tcx> {
      .                   self.sess.delay_span_bug(span, msg);
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
      .               }
      .           
     98 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
     14 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
    112 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
    112 ( 0.00%)      }
      .           
      .               /// Obtain all lang items of this crate and all dependencies (recursively)
133,035 ( 0.03%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
      .                   self.get_lang_items(())
171,045 ( 0.04%)      }
      .           
      .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
      .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
     91 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
      .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
    104 ( 0.00%)      }
      .           
      .               /// Obtain the diagnostic item's name
  1,596 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
      .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
  1,824 ( 0.00%)      }
      .           
      .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
  3,283 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
      .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
  3,752 ( 0.00%)      }
      .           
  2,114 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
      .                   self.stability_index(())
  2,718 ( 0.00%)      }
      .           
 52,304 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
      .                   self.features_query(())
 59,776 ( 0.01%)      }
      .           
      .               pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
      .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
  2,926 ( 0.00%)          if let Some(id) = id.as_local() {
      .                       self.untracked_resolutions.definitions.def_key(id)
      .                   } else {
    470 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
      .                   }
      .               }
      .           
      .               /// Converts a `DefId` into its fully expanded `DefPath` (every
      .               /// `DefId` is really just an interned `DefPath`).
      .               ///
      .               /// Note that if `id` is not local to this crate, the result will
      .               ///  be a non-local `DefPath`.
-- line 1272 ----------------------------------------
-- line 1277 ----------------------------------------
      .                   } else {
      .                       self.untracked_resolutions.cstore.def_path(id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
      .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
  1,351 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
      .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
      .                   } else {
    164 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
      .                   if crate_num == LOCAL_CRATE {
      .                       self.sess.local_stable_crate_id()
      .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
      .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
      .                       self.def_path(def_id).to_string_no_crate_verbose()
      .                   )
      .               }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
 25,656 ( 0.01%)          &*self.untracked_resolutions.cstore
 12,828 ( 0.00%)      }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
      .                   &self.untracked_resolutions.definitions
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      5 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
     24 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      .                   let resolutions = &self.gcx.untracked_resolutions;
      .                   StableHashingContext::ignore_spans(
      .                       self.sess,
      .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
      .               /// If `true`, we should use the MIR-based borrowck, but also
      .               /// fall back on the AST borrowck if the MIR-based one errors.
      .               pub fn migrate_borrowck(self) -> bool {
      .                   self.borrowck_mode().migrate()
      .               }
      .           
      .               /// What mode(s) of borrowck should we run? AST? MIR? both?
      .               /// (Also considers the `#![feature(nll)]` setting.)
    194 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
      .                   // Here are the main constraints we need to deal with:
      .                   //
      .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
      .                   //    synonymous with no `-Z borrowck=...` flag at all.
      .                   //
      .                   // 2. We want to allow developers on the Nightly channel
      .                   //    to opt back into the "hard error" mode for NLL,
      .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
      .                   //   errors. (To simplify the code here, it now even overrides
      .                   //   a user's attempt to specify `-Z borrowck=compare`, which
      .                   //   we arguably do not need anymore and should remove.)
      .                   //
      .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
      .                   //
      .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
      .           
    291 ( 0.00%)          if self.features().nll {
      .                       return BorrowckMode::Mir;
      .                   }
      .           
     97 ( 0.00%)          self.sess.opts.borrowck_mode
    388 ( 0.00%)      }
      .           
      .               /// If `true`, we should use lazy normalization for constants, otherwise
      .               /// we still evaluate them eagerly.
      .               #[inline]
      .               pub fn lazy_normalization(self) -> bool {
    122 ( 0.00%)          let features = self.features();
      .                   // Note: We only use lazy normalization for generic const expressions.
    108 ( 0.00%)          features.generic_const_exprs
      .               }
      .           
      .               #[inline]
      .               pub fn local_crate_exports_generics(self) -> bool {
      .                   debug_assert!(self.sess.opts.share_generics());
      .           
      .                   self.sess.crate_types().iter().any(|crate_type| {
      .                       match crate_type {
-- line 1442 ----------------------------------------
-- line 1554 ----------------------------------------
      .                   self.mk_imm_ref(
      .                       self.lifetimes.re_static,
      .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
      .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
      .                   )
      .               }
      .           
      .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    418 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
    304 ( 0.00%)          match self.def_kind(def_id) {
      .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
      .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
      .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
      .                       },
    684 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
      .                   }
    342 ( 0.00%)      }
      .           
      .               pub fn type_length_limit(self) -> Limit {
      .                   self.limits(()).type_length_limit
      .               }
      .           
 62,209 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
      .                   self.limits(()).recursion_limit
 71,096 ( 0.01%)      }
      .           
      .               pub fn move_size_limit(self) -> Limit {
      .                   self.limits(()).move_size_limit
      .               }
      .           
    644 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
      .                   self.limits(()).const_eval_limit
    736 ( 0.00%)      }
      .           
      .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
      .                   iter::once(LOCAL_CRATE)
      .                       .chain(self.crates(()).iter().copied())
      .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
      .               }
      .           }
      .           
-- line 1594 ----------------------------------------
-- line 1684 ----------------------------------------
      .               /// This is the implicit state of rustc. It contains the current
      .               /// `TyCtxt` and query. It is updated when creating a local interner or
      .               /// executing a new query. Whenever there's a `TyCtxt` value available
      .               /// you should also have access to an `ImplicitCtxt` through the functions
      .               /// in this module.
      .               #[derive(Clone)]
      .               pub struct ImplicitCtxt<'a, 'tcx> {
      .                   /// The current `TyCtxt`.
      1 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
      .           
      .                   /// The current query job, if any. This is updated by `JobOwner::start` in
      .                   /// `ty::query::plumbing` when executing a query.
      .                   pub query: Option<query::QueryJobId<DepKind>>,
      .           
      .                   /// Where to store diagnostics for the current query job, if any.
      .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
      .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
      .                   pub layout_depth: usize,
      .           
      .                   /// The current dep graph task. This is used to add dependencies to queries
      .                   /// when executing them.
      .                   pub task_deps: TaskDepsRef<'a>,
      .               }
      .           
      .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
      5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
      .                       let tcx = TyCtxt { gcx };
     25 ( 0.00%)              ImplicitCtxt {
      .                           tcx,
      .                           query: None,
      .                           diagnostics: None,
      .                           layout_depth: 0,
      .                           task_deps: TaskDepsRef::Ignore,
      .                       }
      5 ( 0.00%)          }
      .               }
      .           
      .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
      .               /// to `value` during the call to `f`. It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(parallel_compiler)]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
      .           
      .               /// Sets TLV to `value` during the call to `f`.
      .               /// It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
      .                   let old = get_tlv();
 26,129 ( 0.01%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
      .                   TLV.with(|tlv| tlv.set(value));
      .                   f()
      .               }
      .           
      .               /// Gets the pointer to the current `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
      .               }
      .           
      .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
      .               #[inline]
      .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
      .               {
      1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
      .               }
      .           
      .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
      .               #[inline]
      .               pub fn with_context_opt<F, R>(f: F) -> R
      .               where
      .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
      .               {
      .                   let context = get_tlv();
106,724 ( 0.02%)          if context == 0 {
      .                       f(None)
      .                   } else {
      .                       // We could get an `ImplicitCtxt` pointer from another thread.
      .                       // Ensure that `ImplicitCtxt` is `Sync`.
      .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
      .           
      .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
      .                   }
-- line 1789 ----------------------------------------
-- line 1805 ----------------------------------------
      .               /// This will panic if you pass it a `TyCtxt` which is different from the current
      .               /// `ImplicitCtxt`'s `tcx` field.
      .               #[inline]
      .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
      .               {
      .                   with_context(|context| unsafe {
 52,875 ( 0.01%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
      .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
 52,862 ( 0.01%)              f(context)
      .                   })
      .               }
      .           
      .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
      .               /// Panics if there is no `ImplicitCtxt` available.
      .               #[inline]
      .               pub fn with<F, R>(f: F) -> R
      .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
      .               fn into_pointer(&self) -> *const () {
      .                   self.0 as *const _ as *const ()
      .               }
      .           }
      .           
      .           #[allow(rustc::usage_of_ty_tykind)]
      .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
 72,630 ( 0.02%)          &self.0.kind()
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
 42,996 ( 0.01%)          self.0.kind().hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
 29,313 ( 0.01%)          &self.0.kind
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  7,164 ( 0.00%)          self.0.kind.hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
      .               fn borrow<'a>(&'a self) -> &'a [T] {
 86,496 ( 0.02%)          &self.0[..]
      .               }
      .           }
      .           
      .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
      .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
      .           
      .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
 16,352 ( 0.00%)          self.0[..].hash(s)
      .               }
      .           }
      .           
      .           macro_rules! direct_interners {
      .               ($($name:ident: $method:ident($ty:ty),)+) => {
      .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
      .                       fn borrow<'a>(&'a self) -> &'a $ty {
 15,032 ( 0.00%)                  &self.0
      .                       }
      .                   }
      .           
      .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
      .                       fn eq(&self, other: &Self) -> bool {
      .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
      .                           // equals `x == y`.
      .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
      .                   }
      .           
      .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
      .           
      .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
      .                       fn hash<H: Hasher>(&self, s: &mut H) {
      .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
      .                           // x.hash(s)`.
  7,143 ( 0.00%)                  self.0.hash(s)
      .                       }
      .                   }
      .           
      .                   impl<'tcx> TyCtxt<'tcx> {
134,314 ( 0.03%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
 71,515 ( 0.02%)                  self.interners.$name.intern(v, |v| {
  1,919 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
      .                           }).0
150,984 ( 0.03%)              }
      .                   })+
      .               }
      .           }
      .           
      .           direct_interners! {
      .               region: mk_region(RegionKind),
      .               const_: mk_const(Const<'tcx>),
      .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
      .               adt_def: intern_adt_def(AdtDef),
      .               stability: intern_stability(attr::Stability),
      .               const_stability: intern_const_stability(attr::ConstStability),
      .           }
      .           
      .           macro_rules! slice_interners {
      .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
      .                   impl<'tcx> TyCtxt<'tcx> {
934,060 ( 0.20%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
      .                           self.interners.$field.intern_ref(v, || {
      .                               Interned(List::from_arena(&*self.arena, v))
      .                           }).0
836,964 ( 0.18%)              })+
      .                   }
      .               );
      .           }
      .           
      .           slice_interners!(
      .               type_list: _intern_type_list(Ty<'tcx>),
      .               substs: _intern_substs(GenericArg<'tcx>),
      .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2188 ----------------------------------------
      .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
      .                   })
      .               }
      .           
      .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
      .               /// `*r == kind`.
      .               #[inline]
      .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
 15,556 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
      .               }
      .           
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline]
      .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
486,339 ( 0.10%)          self.interners.intern_ty(st)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
360,719 ( 0.08%)          let inner = self.interners.intern_predicate(binder);
      .                   Predicate { inner }
      .               }
      .           
      .               #[inline]
257,608 ( 0.05%)      pub fn reuse_or_mk_predicate(
      .                   self,
      .                   pred: Predicate<'tcx>,
      .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> Predicate<'tcx> {
  5,631 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
257,608 ( 0.05%)      }
      .           
      .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
     48 ( 0.00%)          match tm {
      .                       IntTy::Isize => self.types.isize,
      .                       IntTy::I8 => self.types.i8,
      .                       IntTy::I16 => self.types.i16,
      .                       IntTy::I32 => self.types.i32,
      .                       IntTy::I64 => self.types.i64,
      .                       IntTy::I128 => self.types.i128,
      .                   }
     48 ( 0.00%)      }
      .           
      .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
    113 ( 0.00%)          match tm {
      .                       UintTy::Usize => self.types.usize,
      .                       UintTy::U8 => self.types.u8,
      .                       UintTy::U16 => self.types.u16,
      .                       UintTy::U32 => self.types.u32,
      .                       UintTy::U64 => self.types.u64,
      .                       UintTy::U128 => self.types.u128,
      .                   }
    113 ( 0.00%)      }
      .           
      .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
      .                   match tm {
      .                       FloatTy::F32 => self.types.f32,
      .                       FloatTy::F64 => self.types.f64,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn mk_static_str(self) -> Ty<'tcx> {
     44 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   // Take a copy of substs so that we own the vectors inside.
      .                   self.mk_ty(Adt(def, substs))
      .               }
      .           
-- line 2259 ----------------------------------------
-- line 2340 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Slice(ty))
      .               }
      .           
      .               #[inline]
      .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
    148 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
    266 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
      .               }
      .           
      .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
  1,516 ( 0.00%)          iter.intern_with(|ts| {
    492 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
  2,244 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
  1,359 ( 0.00%)          })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_unit(self) -> Ty<'tcx> {
    196 ( 0.00%)          self.types.unit
      .               }
      .           
      .               #[inline]
      .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
      .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(FnDef(def_id, substs))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
    208 ( 0.00%)          self.mk_ty(FnPtr(fty))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_dynamic(
      .                   self,
      .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   reg: ty::Region<'tcx>,
      .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
      .                   self.mk_ty_infer(TyVar(v))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
    594 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
      .                   self.mk_ty_infer(IntVar(v))
      .               }
      .           
      .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
      .                   self.mk_ty(Param(ParamTy { index, name }))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
      .               }
      .           
    336 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
    240 ( 0.00%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
      .                           self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
      .                       }
     96 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
      .                       GenericParamDefKind::Const { .. } => {
      .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
      .                       }
      .                   }
    336 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Opaque(def_id, substs))
      .               }
      .           
     32 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
     32 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
     64 ( 0.00%)      }
      .           
      .               pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Deref)
      .               }
      .           
      .               pub fn mk_place_downcast(
      .                   self,
      .                   place: Place<'tcx>,
-- line 2480 ----------------------------------------
-- line 2497 ----------------------------------------
      .           
      .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Index(index))
      .               }
      .           
      .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
      .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
      .               /// flight.
    288 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
      .                   let mut projection = place.projection.to_vec();
      .                   projection.push(elem);
      .           
      .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
    320 ( 0.00%)      }
      .           
     49 ( 0.00%)      pub fn intern_poly_existential_predicates(
      .                   self,
      .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
      7 ( 0.00%)          assert!(!eps.is_empty());
      .                   assert!(
      .                       eps.array_windows()
     30 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
      .                               != Ordering::Greater)
      .                   );
     28 ( 0.00%)          self._intern_poly_existential_predicates(eps)
     56 ( 0.00%)      }
      .           
      .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
      .                   // FIXME consider asking the input slice to be sorted to avoid
      .                   // re-interning permutations, in which case that would be asserted
      .                   // here.
  1,987 ( 0.00%)          if preds.is_empty() {
      .                       // The macro-generated method below asserts we don't intern an empty slice.
      .                       List::empty()
      .                   } else {
    127 ( 0.00%)              self._intern_predicates(preds)
      .                   }
  3,720 ( 0.00%)      }
      .           
      .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
  7,727 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
     90 ( 0.00%)      }
      .           
      .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
173,303 ( 0.04%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
 24,484 ( 0.01%)      }
      .           
      .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
      .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
      .               }
      .           
      .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
  5,757 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
  4,494 ( 0.00%)      }
      .           
      .               pub fn intern_canonical_var_infos(
      .                   self,
      .                   ts: &[CanonicalVarInfo<'tcx>],
      .               ) -> CanonicalVarInfos<'tcx> {
  4,726 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
    100 ( 0.00%)      }
      .           
      .               pub fn intern_bound_variable_kinds(
      .                   self,
      .                   ts: &[ty::BoundVariableKind],
      .               ) -> &'tcx List<ty::BoundVariableKind> {
  2,245 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
  3,280 ( 0.00%)      }
      .           
      .               pub fn mk_fn_sig<I>(
      .                   self,
      .                   inputs: I,
      .                   output: I::Item,
      .                   c_variadic: bool,
      .                   unsafety: hir::Unsafety,
      .                   abi: abi::Abi,
      .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
      .               where
      .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
      .               {
      .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    772 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
    131 ( 0.00%)              c_variadic,
    181 ( 0.00%)              unsafety,
    162 ( 0.00%)              abi,
    110 ( 0.00%)          })
      .               }
      .           
      .               pub fn mk_poly_existential_predicates<
      .                   I: InternAs<
      .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   >,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
     21 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
      .               }
      .           
      .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
      .                   iter.intern_with(|xs| self.intern_predicates(xs))
      .               }
      .           
      .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    940 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
      .               }
      .           
      .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
180,818 ( 0.04%)          iter.intern_with(|xs| self.intern_substs(xs))
      .               }
      .           
      .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
 45,466 ( 0.01%)          iter.intern_with(|xs| self.intern_place_elems(xs))
      .               }
      .           
  2,733 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
      .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
  5,466 ( 0.00%)      }
      .           
      .               pub fn mk_bound_variable_kinds<
      .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
 11,986 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
      .               }
      .           
      .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
      .               /// It stops at `bound` and just returns it if reached.
 19,922 ( 0.00%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
 19,922 ( 0.00%)          let hir = self.hir();
      .                   loop {
 34,812 ( 0.01%)              if id == bound {
      .                           return bound;
      .                       }
      .           
 44,014 ( 0.01%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
      .                           return id;
      .                       }
      .                       let next = hir.get_parent_node(id);
 26,274 ( 0.01%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
 28,460 ( 0.01%)      }
      .           
  1,744 ( 0.00%)      pub fn lint_level_at_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   mut id: hir::HirId,
      .               ) -> (Level, LintLevelSource) {
      .                   let sets = self.lint_levels(());
      .                   loop {
  5,464 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
      .                           return pair;
      .                       }
    268 ( 0.00%)              let next = self.hir().get_parent_node(id);
    804 ( 0.00%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
  1,744 ( 0.00%)      }
      .           
      .               pub fn struct_span_lint_hir(
      .                   self,
      .                   lint: &'static Lint,
      .                   hir_id: HirId,
      .                   span: impl Into<MultiSpan>,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
     24 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
      6 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
      .               }
      .           
      .               pub fn struct_lint_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   id: HirId,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
      .                   let (level, src) = self.lint_level_at_node(lint, id);
      .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
      .               }
      .           
    945 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
    270 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
      .                   let candidates = map.get(&id.local_id)?;
    270 ( 0.00%)          Some(&*candidates)
  1,080 ( 0.00%)      }
      .           
  2,653 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
      .                   debug!(?id, "named_region");
      .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
  3,411 ( 0.00%)      }
      .           
      .               pub fn is_late_bound(self, id: HirId) -> bool {
      .                   self.is_late_bound_map(id.owner)
      .                       .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
      .               }
      .           
  2,485 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
      .                   self.object_lifetime_defaults_map(id.owner)
  3,195 ( 0.00%)      }
      .           
  2,034 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
      .                   self.mk_bound_variable_kinds(
      .                       self.late_bound_vars_map(id.owner)
      .                           .and_then(|map| map.get(&id.local_id).cloned())
      .                           .unwrap_or_else(|| {
      .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
      .                           })
      .                           .iter(),
      .                   )
  2,034 ( 0.00%)      }
      .           
      .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
      .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
      .               }
      .           
      .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
      .               /// feature gates
     50 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
      5 ( 0.00%)          if self.is_const_fn_raw(def_id) {
      6 ( 0.00%)              match self.lookup_const_stability(def_id) {
     12 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
      .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
      .                               // corresponding feature gate.
      .                               self.features()
      .                                   .declared_lib_features
      .                                   .iter()
      .                                   .any(|&(sym, _)| sym == stability.feature)
      .                           }
      .                           // functions without const stability are either stable user written
      .                           // const fn or the user is using feature gates and we thus don't
      .                           // care what they do
      .                           _ => true,
      .                       }
      .                   } else {
      .                       false
      .                   }
     45 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TyCtxtAt<'tcx> {
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
      .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
      .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
      .           }
      .           
      .           impl<I, T, R, E> InternAs<[T], R> for I
      .           where
      .               E: InternIteratorElement<T, R>,
      .               I: Iterator<Item = E>,
      .           {
      .               type Output = E::Output;
 76,672 ( 0.02%)      fn intern_with<F>(self, f: F) -> Self::Output
      .               where
      .                   F: FnOnce(&[T]) -> R,
      .               {
574,034 ( 0.12%)          E::intern_with(self, f)
 60,111 ( 0.01%)      }
      .           }
      .           
      .           pub trait InternIteratorElement<T, R>: Sized {
      .               type Output;
      .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
      .           }
      .           
      .           impl<T, R> InternIteratorElement<T, R> for T {
      .               type Output = R;
 38,102 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`.
 72,433 ( 0.02%)          match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
      .                           let t0 = iter.next().unwrap();
     12 ( 0.00%)                  assert!(iter.next().is_none());
 13,094 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
      .                           let t0 = iter.next().unwrap();
      .                           let t1 = iter.next().unwrap();
     61 ( 0.00%)                  assert!(iter.next().is_none());
  6,010 ( 0.00%)                  f(&[t0, t1])
      .                       }
    280 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
      .                   }
 36,259 ( 0.01%)      }
      .           }
      .           
      .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
      .           where
      .               T: Clone + 'a,
      .           {
      .               type Output = R;
  1,273 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
      .                   // This code isn't hot.
     44 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
  1,058 ( 0.00%)      }
      .           }
      .           
      .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
      .               type Output = Result<R, E>;
261,105 ( 0.06%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`, unless a failure happens first, in which case the result
      .                   // will be an error anyway.
216,694 ( 0.05%)          Ok(match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
      .                           let t0 = iter.next().unwrap()?;
      .                           assert!(iter.next().is_none());
  2,342 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
     98 ( 0.00%)                  let t0 = iter.next().unwrap()?;
     98 ( 0.00%)                  let t1 = iter.next().unwrap()?;
    147 ( 0.00%)                  assert!(iter.next().is_none());
 38,550 ( 0.01%)                  f(&[t0, t1])
      .                       }
  3,973 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
      .                   })
294,047 ( 0.06%)      }
      .           }
      .           
      .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
      .           // won't work for us.
      .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
 52,875 ( 0.01%)      t as *const () == u as *const ()
      .           }
      .           
      .           pub fn provide(providers: &mut ty::query::Providers) {
      2 ( 0.00%)      providers.in_scope_traits_map =
      .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
      3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
      2 ( 0.00%)      providers.module_reexports =
      .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
      2 ( 0.00%)      providers.crate_name = |tcx, id| {
      1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
      1 ( 0.00%)          tcx.crate_name
      .               };
      2 ( 0.00%)      providers.maybe_unused_trait_import =
      .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
      2 ( 0.00%)      providers.maybe_unused_extern_crates =
      .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
      2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
      .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
      .               };
      .           
     11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_const_stability =
      .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_deprecation_entry =
  2,400 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
      2 ( 0.00%)      providers.extern_mod_stmt_cnum =
      .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
      3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
      3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
      2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
      .                   assert_eq!(cnum, LOCAL_CRATE);
      .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
      .               };
      2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
      .                   assert_eq!(cnum, LOCAL_CRATE);
      .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
      .               };
      2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
      1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
      .                   // We want to check if the panic handler was defined in this crate
      3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
      .               };
      .           }

451,834 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .           pub struct BitMask(pub BitMaskWord);
        .           
        .           #[allow(clippy::use_self)]
        .           impl BitMask {
        .               /// Returns a new `BitMask` with all bits inverted.
        .               #[inline]
        .               #[must_use]
        .               pub fn invert(self) -> Self {
   20,619 ( 0.00%)          BitMask(self.0 ^ BITMASK_MASK)
        .               }
        .           
        .               /// Flip the bit in the mask for the entry at the given index.
        .               ///
        .               /// Returns the bit's previous state.
        .               #[inline]
        .               #[allow(clippy::cast_ptr_alignment)]
        .               #[cfg(feature = "raw")]
-- line 33 ----------------------------------------
-- line 38 ----------------------------------------
        .                   // The bit was set if the bit is now 0.
        .                   self.0 & mask == 0
        .               }
        .           
        .               /// Returns a new `BitMask` with the lowest bit removed.
        .               #[inline]
        .               #[must_use]
        .               pub fn remove_lowest_bit(self) -> Self {
   16,749 ( 0.00%)          BitMask(self.0 & (self.0 - 1))
        .               }
        .               /// Returns whether the `BitMask` has at least one set bit.
        .               #[inline]
        .               pub fn any_bit_set(self) -> bool {
  381,456 ( 0.08%)          self.0 != 0
        .               }
        .           
        .               /// Returns the first set bit in the `BitMask`, if there is one.
        .               #[inline]
        .               pub fn lowest_set_bit(self) -> Option<usize> {
4,387,904 ( 0.92%)          if self.0 == 0 {
        .                       None
        .                   } else {
        .                       Some(unsafe { self.lowest_set_bit_nonzero() })
        .                   }
        .               }
        .           
        .               /// Returns the first set bit in the `BitMask`, if there is one. The
        .               /// bitmask must not be empty.
        .               #[inline]
        .               #[cfg(feature = "nightly")]
        .               pub unsafe fn lowest_set_bit_nonzero(self) -> usize {
   11,309 ( 0.00%)          intrinsics::cttz_nonzero(self.0) as usize / BITMASK_STRIDE
        .               }
        .               #[inline]
        .               #[cfg(not(feature = "nightly"))]
        .               pub unsafe fn lowest_set_bit_nonzero(self) -> usize {
        .                   self.trailing_zeros()
        .               }
        .           
        .               /// Returns the number of trailing zeroes in the `BitMask`.
-- line 77 ----------------------------------------
-- line 110 ----------------------------------------
        .           /// bits.
        .           pub struct BitMaskIter(BitMask);
        .           
        .           impl Iterator for BitMaskIter {
        .               type Item = usize;
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<usize> {
  964,788 ( 0.20%)          let bit = self.0.lowest_set_bit()?;
        .                   self.0 = self.0.remove_lowest_bit();
        .                   Some(bit)
        .               }
        .           }

   28,822 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/strcmp.S

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
196,423,775 (41.38%)  events annotated

