--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name language_tags --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 -C metadata=aaee50e6aad6f6d4 -C extra-filename=-aaee50e6aad6f6d4 --out-dir /usr/home/liquid/tmp/.tmp6B3QFv/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmp6B3QFv/target/debug/deps -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-language-tags-0.3.2-Check-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
3,937,161,001 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
120,808,669 ( 3.07%)  ./malloc/malloc.c:_int_malloc
102,788,097 ( 2.61%)  ./malloc/malloc.c:_int_free
 81,576,303 ( 2.07%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 66,340,086 ( 1.68%)  ./malloc/malloc.c:malloc
 40,189,611 ( 1.02%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs:<rustc_index::bit_set::BitSet<rustc_borrowck::dataflow::BorrowIndex>>::union::<rustc_index::bit_set::BitSet<rustc_borrowck::dataflow::BorrowIndex>>
 28,636,536 ( 0.73%)  ./malloc/malloc.c:free
 23,985,114 ( 0.61%)  ./malloc/malloc.c:malloc_consolidate
 19,814,826 ( 0.50%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs:<rustc_index::bit_set::BitSet<rustc_mir_dataflow::move_paths::MovePathIndex>>::union::<rustc_index::bit_set::BitSet<rustc_mir_dataflow::move_paths::MovePathIndex>>
 18,127,768 ( 0.46%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/step.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::run
 16,671,744 ( 0.42%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::try_read_immediate
 15,443,647 ( 0.39%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 14,864,912 ( 0.38%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::eval_operand
 14,775,779 ( 0.38%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::on_all_children_bits::is_terminal_path
 14,507,357 ( 0.37%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 13,956,497 ( 0.35%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs:<rustc_parse::lexer::StringReader>::next_token
 13,598,008 ( 0.35%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::run
 12,222,637 ( 0.31%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 12,083,445 ( 0.31%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
 11,958,560 ( 0.30%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_middle::ty::ParamEnvAnd<&rustc_middle::ty::TyS>, (core::result::Result<rustc_target::abi::TyAndLayout<&rustc_middle::ty::TyS>, rustc_middle::ty::layout::LayoutError>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_middle::ty::ParamEnvAnd<&rustc_middle::ty::TyS>>
 11,446,155 ( 0.29%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<std::collections::hash::map::HashMap<rustc_middle::middle::region::Scope, (rustc_middle::middle::region::Scope, u32), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::get::<rustc_middle::middle::region::Scope>
 10,731,429 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::force_allocation_maybe_sized
 10,342,405 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs:<rustc_parse::lexer::tokentrees::TokenTreesReader>::parse_token_tree
 10,305,124 ( 0.26%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 10,274,957 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
 10,065,758 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::copy_op_no_validate
  9,997,020 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs:<rustc_borrowck::MirBorrowckCtxt>::access_place
  9,919,577 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::eval_place
  9,915,777 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_pretty/src/pp/ring.rs:<rustc_ast_pretty::pp::ring::RingBuffer<rustc_ast_pretty::pp::BufEntry>>::pop_first
  9,181,611 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/vec_deque/mod.rs:<alloc::collections::vec_deque::VecDeque<rustc_ast_pretty::pp::BufEntry>>::push_back
  8,653,265 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_pretty/src/pp.rs:<rustc_ast_pretty::pp::Printer>::advance_left
  8,648,877 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs:<rustc_lexer::cursor::Cursor>::advance_token
  8,294,335 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
  8,225,479 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::TokenKind as core::clone::Clone>::clone
  8,199,036 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
  8,198,208 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::attrs
  8,044,114 ( 0.20%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
  7,951,900 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
  7,877,075 ( 0.20%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::symbol::Symbol, usize)>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_span::symbol::Symbol, rustc_span::symbol::Symbol, usize, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
  7,721,981 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
  7,610,013 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::access_local
  7,587,544 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
  7,459,902 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/middle/region.rs:<rustc_middle::middle::region::ScopeTree>::temporary_scope
  7,437,264 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs:<rustc_index::bit_set::BitSet<rustc_borrowck::dataflow::BorrowIndex>>::union::<rustc_index::bit_set::BitSet<rustc_borrowck::dataflow::BorrowIndex>>
  7,391,140 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs:<rustc_resolve::Resolver>::traits_in_scope
  7,112,401 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:<rustc_ast_pretty::pp::Printer>::advance_left
  7,012,179 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs:<rustc_mir_build::thir::cx::Cx>::mirror_expr_inner
  6,881,574 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
  6,839,026 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<rustc_middle::ty::context::TypeckResults>::node_type_opt
  6,686,366 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::TokenKind as core::cmp::PartialEq>::eq
  6,612,273 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:<smallvec::SmallVec<[rustc_mir_dataflow::move_paths::InitIndex; 4]>>::try_reserve
  6,604,702 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs:<rustc_index::bit_set::BitSet<rustc_middle::mir::Local>>::union::<rustc_index::bit_set::BitSet<rustc_middle::mir::Local>>
  6,557,840 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/encoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Encodable<rustc_metadata::rmeta::encoder::EncodeContext>>::encode
  6,345,043 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::HashMap<rustc_hir::hir_id::ItemLocalId, &rustc_middle::ty::TyS, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
  6,332,250 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::maybe_lint_level_root_bounded
  6,279,499 ( 0.16%)  ./malloc/malloc.c:calloc
  6,259,238 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs:<rustc_privacy::DefIdVisitorSkeleton<rustc_privacy::TypePrivacyVisitor> as rustc_middle::ty::fold::TypeVisitor>::visit_ty
  6,155,727 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/terminator.rs:<rustc_middle::mir::terminator::TerminatorKind>::successors
  6,152,350 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/traversal.rs:<rustc_middle::mir::traversal::Postorder>::traverse_successor
  6,147,725 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::drop_flag_effects_for_location::<<rustc_mir_dataflow::impls::MaybeUninitializedPlaces as rustc_mir_dataflow::framework::GenKillAnalysis>::statement_effect<rustc_index::bit_set::BitSet<rustc_mir_dataflow::move_paths::MovePathIndex>>::{closure#0}>
  6,066,780 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::find_parent_node
  5,934,431 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs:<rustc_resolve::Resolver>::resolutions
  5,851,917 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
  5,734,827 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs:<rustc_mir_build::thir::cx::Cx>::make_mirror_unadjusted
  5,686,959 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
  5,641,100 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::drop_flag_effects_for_location::<<rustc_mir_dataflow::impls::MaybeInitializedPlaces as rustc_mir_dataflow::framework::GenKillAnalysis>::statement_effect<rustc_index::bit_set::BitSet<rustc_mir_dataflow::move_paths::MovePathIndex>>::{closure#0}>
  5,533,678 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
  5,493,460 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/allocation.rs:<rustc_middle::mir::interpret::allocation::InitMask>::set_range_inbounds
  5,363,415 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/layout.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter> as rustc_middle::ty::layout::LayoutOf>::layout_of
  5,341,377 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::eval_place_to_op
  5,283,846 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/middle/region.rs:<std::collections::hash::map::HashMap<rustc_middle::middle::region::Scope, (rustc_middle::middle::region::Scope, u32), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::get::<rustc_middle::middle::region::Scope>
  5,201,883 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs:<rustc_ast::tokenstream::Cursor>::next_with_spacing
  5,165,949 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
  5,135,536 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::SubstFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty
  5,131,615 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/regionck.rs:<rustc_typeck::check::regionck::RegionCtxt as rustc_hir::intravisit::Visitor>::visit_expr
  5,084,794 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/eval_context.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::subst_from_frame_and_normalize_erasing_regions::<&rustc_middle::ty::TyS>
  5,007,392 ( 0.13%)  ./malloc/malloc.c:realloc
  4,873,399 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::DefId, (core::option::Option<rustc_middle::ty::Destructor>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::DefId>
  4,865,376 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs:<hashbrown::map::HashMap<rustc_middle::mir::interpret::AllocId, (rustc_const_eval::interpret::memory::MemoryKind<rustc_const_eval::const_eval::machine::MemoryKind>, rustc_middle::mir::interpret::allocation::Allocation), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
  4,854,658 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/levels.rs:<rustc_lint::levels::LintLevelsBuilder>::push
  4,835,679 ( 0.12%)  ./elf/dl-lookup.c:do_lookup_x
  4,829,550 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::DefId, (&rustc_middle::ty::TyS, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::DefId>
  4,779,943 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_resolve::Resolver>::traits_in_scope
  4,768,220 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/writeback.rs:<rustc_typeck::check::writeback::WritebackCx>::visit_node_id
  4,732,284 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/eval_context.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::eval_place
  4,654,816 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::write_immediate_no_validate
  4,636,309 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::place_field
  4,611,492 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs:<rustc_middle::hir::map::Map>::attrs
  4,582,167 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs:<rustc_infer::infer::InferCtxtInner>::rollback_to
  4,564,049 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/build/expr/as_operand.rs:<rustc_mir_build::build::Builder>::as_operand
  4,547,752 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::const_val_to_op
  4,523,275 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/layout.rs:<&rustc_middle::ty::TyS as rustc_target::abi::TyAbiInterface<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>>::ty_and_layout_field
  4,522,973 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/expr.rs:<rustc_parse::parser::Parser>::parse_assoc_expr_with
  4,507,942 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_hir::hir_id::ItemLocalId, ())>>::insert::<hashbrown::map::make_hasher<rustc_hir::hir_id::ItemLocalId, rustc_hir::hir_id::ItemLocalId, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
  4,503,492 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/memory.rs:<rustc_const_eval::interpret::memory::Memory<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::copy_repeatedly
  4,498,775 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/coercion.rs:<rustc_typeck::check::coercion::Coerce>::coerce
  4,439,417 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs:<rustc_parse::lexer::tokentrees::TokenStreamBuilder>::push
  4,432,494 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/into_iter.rs:<alloc::vec::into_iter::IntoIter<rustc_infer::traits::Obligation<rustc_middle::ty::Predicate>> as core::ops::drop::Drop>::drop
  4,403,160 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:<smallvec::SmallVec<[rustc_mir_dataflow::move_paths::InitIndex; 4]> as core::iter::traits::collect::Extend<rustc_mir_dataflow::move_paths::InitIndex>>::extend::<core::iter::adapters::cloned::Cloned<core::slice::iter::Iter<rustc_mir_dataflow::move_paths::InitIndex>>>
  4,403,160 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:<smallvec::SmallVec<[rustc_mir_dataflow::move_paths::MoveOutIndex; 4]> as core::iter::traits::collect::Extend<rustc_mir_dataflow::move_paths::MoveOutIndex>>::extend::<core::iter::adapters::cloned::Cloned<core::slice::iter::Iter<rustc_mir_dataflow::move_paths::MoveOutIndex>>>
  4,372,097 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<alloc::vec::Vec<rustc_parse::parser::TokenType>>::truncate
  4,369,750 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/query/type_op/mod.rs:<rustc_middle::ty::ParamEnvAnd<rustc_middle::traits::query::type_op::Normalize<&rustc_middle::ty::TyS>> as rustc_trait_selection::traits::query::type_op::TypeOp>::fully_perform
  4,360,953 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/expr.rs:<rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args
  4,338,784 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::lang_items
  4,256,098 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::try_read_immediate
  4,249,869 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/expr.rs:<rustc_parse::parser::Parser>::collect_tokens_for_expr::<<rustc_parse::parser::Parser>::parse_dot_or_call_expr::{closure#0}>::{closure#0}
  4,141,271 ( 0.11%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
  4,137,753 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/vec_deque/mod.rs:<rustc_ast_pretty::pp::Printer>::advance_left
  4,122,884 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_pretty/src/pp.rs:<rustc_ast_pretty::pp::Printer>::scan_string
  4,071,839 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/../../stdarch/crates/core_arch/src/x86/sse2.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
  4,055,155 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/index.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::run
  4,046,229 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/layout.rs:<&rustc_middle::ty::TyS as rustc_target::abi::TyAbiInterface<_>>::ty_and_layout_field::field_ty_or_layout::<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>
  4,021,002 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_hir::hir_id::ItemLocalId, ())>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_hir::hir_id::ItemLocalId, rustc_hir::hir_id::ItemLocalId, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
  4,002,453 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/memory.rs:<rustc_const_eval::interpret::memory::Memory<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::get_size_and_align
  4,000,388 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::run
  3,999,989 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token>::ident
  3,956,093 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Encodable<rustc_metadata::rmeta::encoder::EncodeContext>>::encode
  3,946,416 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/type_check/mod.rs:<rustc_borrowck::type_check::TypeChecker>::typeck_mir
  3,943,167 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/impls/mod.rs:<rustc_mir_dataflow::framework::direction::Forward as rustc_mir_dataflow::framework::direction::Direction>::apply_effects_in_block::<rustc_mir_dataflow::impls::MaybeInitializedPlaces>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/impls/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 65 ----------------------------------------
        .           /// places that would require a dynamic drop-flag at that statement.
        .           pub struct MaybeInitializedPlaces<'a, 'tcx> {
        .               tcx: TyCtxt<'tcx>,
        .               body: &'a Body<'tcx>,
        .               mdpe: &'a MoveDataParamEnv<'tcx>,
        .           }
        .           
        .           impl<'a, 'tcx> MaybeInitializedPlaces<'a, 'tcx> {
      416 ( 0.00%)      pub fn new(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, mdpe: &'a MoveDataParamEnv<'tcx>) -> Self {
    1,248 ( 0.00%)          MaybeInitializedPlaces { tcx, body, mdpe }
      416 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> HasMoveData<'tcx> for MaybeInitializedPlaces<'a, 'tcx> {
        .               fn move_data(&self) -> &MoveData<'tcx> {
      780 ( 0.00%)          &self.mdpe.move_data
        .               }
        .           }
        .           
        .           /// `MaybeUninitializedPlaces` tracks all places that might be
        .           /// uninitialized upon reaching a particular point in the control flow
        .           /// for a function.
        .           ///
        .           /// For example, in code like the following, we have corresponding
-- line 88 ----------------------------------------
-- line 120 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &'a Body<'tcx>,
        .               mdpe: &'a MoveDataParamEnv<'tcx>,
        .           
        .               mark_inactive_variants_as_uninit: bool,
        .           }
        .           
        .           impl<'a, 'tcx> MaybeUninitializedPlaces<'a, 'tcx> {
      208 ( 0.00%)      pub fn new(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, mdpe: &'a MoveDataParamEnv<'tcx>) -> Self {
      832 ( 0.00%)          MaybeUninitializedPlaces { tcx, body, mdpe, mark_inactive_variants_as_uninit: false }
      208 ( 0.00%)      }
        .           
        .               /// Causes inactive enum variants to be marked as "maybe uninitialized" after a switch on an
        .               /// enum discriminant.
        .               ///
        .               /// This is correct in a vacuum but is not the default because it causes problems in the borrow
        .               /// checker, where this information gets propagated along `FakeEdge`s.
       50 ( 0.00%)      pub fn mark_inactive_variants_as_uninit(mut self) -> Self {
       50 ( 0.00%)          self.mark_inactive_variants_as_uninit = true;
      600 ( 0.00%)          self
       50 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> HasMoveData<'tcx> for MaybeUninitializedPlaces<'a, 'tcx> {
        .               fn move_data(&self) -> &MoveData<'tcx> {
   41,130 ( 0.00%)          &self.mdpe.move_data
   40,500 ( 0.00%)      }
        .           }
        .           
        .           /// `DefinitelyInitializedPlaces` tracks all places that are definitely
        .           /// initialized upon reaching a particular point in the control flow
        .           /// for a function.
        .           ///
        .           /// For example, in code like the following, we have corresponding
        .           /// dataflow information shown in the right-hand comments.
-- line 154 ----------------------------------------
-- line 189 ----------------------------------------
        .           impl<'a, 'tcx> DefinitelyInitializedPlaces<'a, 'tcx> {
        .               pub fn new(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, mdpe: &'a MoveDataParamEnv<'tcx>) -> Self {
        .                   DefinitelyInitializedPlaces { tcx, body, mdpe }
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> HasMoveData<'tcx> for DefinitelyInitializedPlaces<'a, 'tcx> {
        .               fn move_data(&self) -> &MoveData<'tcx> {
  209,375 ( 0.01%)          &self.mdpe.move_data
  209,375 ( 0.01%)      }
        .           }
        .           
        .           /// `EverInitializedPlaces` tracks all places that might have ever been
        .           /// initialized upon reaching a particular point in the control flow
        .           /// for a function, without an intervening `StorageDead`.
        .           ///
        .           /// This dataflow is used to determine if an immutable local variable may
        .           /// be assigned to.
-- line 206 ----------------------------------------
-- line 237 ----------------------------------------
        .           impl<'a, 'tcx> EverInitializedPlaces<'a, 'tcx> {
        .               pub fn new(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, mdpe: &'a MoveDataParamEnv<'tcx>) -> Self {
        .                   EverInitializedPlaces { tcx, body, mdpe }
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> HasMoveData<'tcx> for EverInitializedPlaces<'a, 'tcx> {
        .               fn move_data(&self) -> &MoveData<'tcx> {
      480 ( 0.00%)          &self.mdpe.move_data
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> MaybeInitializedPlaces<'a, 'tcx> {
        .               fn update_bits(
        .                   trans: &mut impl GenKill<MovePathIndex>,
        .                   path: MovePathIndex,
        .                   state: DropFlagState,
-- line 253 ----------------------------------------
-- line 284 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> AnalysisDomain<'tcx> for MaybeInitializedPlaces<'_, 'tcx> {
        .               type Domain = BitSet<MovePathIndex>;
        .               const NAME: &'static str = "maybe_init";
        .           
    3,900 ( 0.00%)      fn bottom_value(&self, _: &mir::Body<'tcx>) -> Self::Domain {
        .                   // bottom = uninitialized
        .                   BitSet::new_empty(self.move_data().move_paths.len())
    5,460 ( 0.00%)      }
        .           
      258 ( 0.00%)      fn initialize_start_block(&self, _: &mir::Body<'tcx>, state: &mut Self::Domain) {
    1,290 ( 0.00%)          drop_flag_effects_for_function_entry(self.tcx, self.body, self.mdpe, |path, s| {
        .                       assert!(s == DropFlagState::Present);
      173 ( 0.00%)              state.insert(path);
        .                   });
        .               }
        .           }
        .           
        .           impl<'tcx> GenKillAnalysis<'tcx> for MaybeInitializedPlaces<'_, 'tcx> {
        .               type Idx = MovePathIndex;
        .           
        .               fn statement_effect(
        .                   &self,
        .                   trans: &mut impl GenKill<Self::Idx>,
        .                   statement: &mir::Statement<'tcx>,
        .                   location: Location,
        .               ) {
1,358,836 ( 0.03%)          drop_flag_effects_for_location(self.tcx, self.body, self.mdpe, location, |path, s| {
  162,095 ( 0.00%)              Self::update_bits(trans, path, s)
        .                   });
        .           
  487,878 ( 0.01%)          if !self.tcx.sess.opts.debugging_opts.precise_enum_drop_elaboration {
        .                       return;
        .                   }
        .           
        .                   // Mark all places as "maybe init" if they are mutably borrowed. See #90752.
        .                   for_each_mut_borrow(statement, location, |place| {
      875 ( 0.00%)              let LookupResult::Exact(mpi) = self.move_data().rev_lookup.find(place.as_ref()) else { return };
      511 ( 0.00%)              on_all_children_bits(self.tcx, self.body, self.move_data(), mpi, |child| {
   30,366 ( 0.00%)                  trans.gen(child);
        .                       })
        .                   })
        .               }
        .           
        .               fn terminator_effect(
        .                   &self,
        .                   trans: &mut impl GenKill<Self::Idx>,
        .                   terminator: &mir::Terminator<'tcx>,
        .                   location: Location,
        .               ) {
  324,957 ( 0.01%)          drop_flag_effects_for_location(self.tcx, self.body, self.mdpe, location, |path, s| {
        .                       Self::update_bits(trans, path, s)
        .                   });
        .           
   94,089 ( 0.00%)          if !self.tcx.sess.opts.debugging_opts.precise_enum_drop_elaboration {
        .                       return;
        .                   }
        .           
        .                   for_each_mut_borrow(terminator, location, |place| {
        .                       let LookupResult::Exact(mpi) = self.move_data().rev_lookup.find(place.as_ref()) else { return };
        .                       on_all_children_bits(self.tcx, self.body, self.move_data(), mpi, |child| {
        .                           trans.gen(child);
        .                       })
-- line 349 ----------------------------------------
-- line 351 ----------------------------------------
        .               }
        .           
        .               fn call_return_effect(
        .                   &self,
        .                   trans: &mut impl GenKill<Self::Idx>,
        .                   _block: mir::BasicBlock,
        .                   return_places: CallReturnPlaces<'_, 'tcx>,
        .               ) {
   52,255 ( 0.00%)          return_places.for_each(|place| {
        .                       // when a call returns successfully, that means we need to set
        .                       // the bits for that dest_place to 1 (initialized).
        .                       on_lookup_result_bits(
   60,586 ( 0.00%)                  self.tcx,
   30,293 ( 0.00%)                  self.body,
  121,172 ( 0.00%)                  self.move_data(),
  121,172 ( 0.00%)                  self.move_data().rev_lookup.find(place.as_ref()),
        .                           |mpi| {
        .                               trans.gen(mpi);
        .                           },
        .                       );
        .                   });
        .               }
        .           
        .               fn switch_int_edge_effects<G: GenKill<Self::Idx>>(
        .                   &self,
        .                   block: mir::BasicBlock,
        .                   discr: &mir::Operand<'tcx>,
        .                   edge_effects: &mut impl SwitchIntEdgeEffects<G>,
        .               ) {
      992 ( 0.00%)          if !self.tcx.sess.opts.debugging_opts.precise_enum_drop_elaboration {
        .                       return;
        .                   }
        .           
      496 ( 0.00%)          let enum_ = discr.place().and_then(|discr| {
      976 ( 0.00%)              switch_on_enum_discriminant(self.tcx, &self.body, &self.body[block], discr)
        .                   });
        .           
      882 ( 0.00%)          let (enum_place, enum_def) = match enum_ {
      150 ( 0.00%)              Some(x) => x,
        .                       None => return,
        .                   };
        .           
        .                   let mut discriminants = enum_def.discriminants(self.tcx);
      525 ( 0.00%)          edge_effects.apply(|trans, edge| {
        .                       let value = match edge.value {
        .                           Some(x) => x,
        .                           None => return,
        .                       };
        .           
        .                       // MIR building adds discriminants to the `values` array in the same order as they
        .                       // are yielded by `AdtDef::discriminants`. We rely on this to match each
        .                       // discriminant in `values` to its corresponding variant in linear time.
        .                       let (variant, _) = discriminants
    1,076 ( 0.00%)                  .find(|&(_, discr)| discr.val == value)
        .                           .expect("Order of `AdtDef::discriminants` differed from `SwitchInt::values`");
        .           
        .                       // Kill all move paths that correspond to variants we know to be inactive along this
        .                       // particular outgoing edge of a `SwitchInt`.
      994 ( 0.00%)              drop_flag_effects::on_all_inactive_variants(
      142 ( 0.00%)                  self.tcx,
      142 ( 0.00%)                  self.body,
      426 ( 0.00%)                  self.move_data(),
      284 ( 0.00%)                  enum_place,
        .                           variant,
        .                           |mpi| trans.kill(mpi),
        .                       );
        .                   });
        .               }
        .           }
        .           
        .           impl<'tcx> AnalysisDomain<'tcx> for MaybeUninitializedPlaces<'_, 'tcx> {
        .               type Domain = BitSet<MovePathIndex>;
        .           
        .               const NAME: &'static str = "maybe_uninit";
        .           
    3,150 ( 0.00%)      fn bottom_value(&self, _: &mir::Body<'tcx>) -> Self::Domain {
        .                   // bottom = initialized (start_block_effect counters this at outset)
        .                   BitSet::new_empty(self.move_data().move_paths.len())
    4,410 ( 0.00%)      }
        .           
        .               // sets on_entry bits for Arg places
    1,040 ( 0.00%)      fn initialize_start_block(&self, _: &mir::Body<'tcx>, state: &mut Self::Domain) {
        .                   // set all bits to 1 (uninit) before gathering counterevidence
        .                   state.insert_all();
        .           
    1,664 ( 0.00%)          drop_flag_effects_for_function_entry(self.tcx, self.body, self.mdpe, |path, s| {
        .                       assert!(s == DropFlagState::Present);
      170 ( 0.00%)              state.remove(path);
        .                   });
        .               }
        .           }
        .           
        .           impl<'tcx> GenKillAnalysis<'tcx> for MaybeUninitializedPlaces<'_, 'tcx> {
        .               type Idx = MovePathIndex;
        .           
        .               fn statement_effect(
        .                   &self,
        .                   trans: &mut impl GenKill<Self::Idx>,
        .                   _statement: &mir::Statement<'tcx>,
        .                   location: Location,
        .               ) {
1,115,879 ( 0.03%)          drop_flag_effects_for_location(self.tcx, self.body, self.mdpe, location, |path, s| {
  166,643 ( 0.00%)              Self::update_bits(trans, path, s)
        .                   });
        .           
        .                   // Unlike in `MaybeInitializedPlaces` above, we don't need to change the state when a
        .                   // mutable borrow occurs. Places cannot become uninitialized through a mutable reference.
        .               }
        .           
        .               fn terminator_effect(
        .                   &self,
        .                   trans: &mut impl GenKill<Self::Idx>,
        .                   _terminator: &mir::Terminator<'tcx>,
        .                   location: Location,
        .               ) {
  123,976 ( 0.00%)          drop_flag_effects_for_location(self.tcx, self.body, self.mdpe, location, |path, s| {
        .                       Self::update_bits(trans, path, s)
        .                   });
        .               }
        .           
        .               fn call_return_effect(
        .                   &self,
        .                   trans: &mut impl GenKill<Self::Idx>,
        .                   _block: mir::BasicBlock,
        .                   return_places: CallReturnPlaces<'_, 'tcx>,
        .               ) {
   51,645 ( 0.00%)          return_places.for_each(|place| {
        .                       // when a call returns successfully, that means we need to set
        .                       // the bits for that dest_place to 0 (initialized).
        .                       on_lookup_result_bits(
   40,500 ( 0.00%)                  self.tcx,
   20,250 ( 0.00%)                  self.body,
   81,000 ( 0.00%)                  self.move_data(),
   81,000 ( 0.00%)                  self.move_data().rev_lookup.find(place.as_ref()),
        .                           |mpi| {
   20,250 ( 0.00%)                      trans.kill(mpi);
        .                           },
        .                       );
        .                   });
        .               }
        .           
        .               fn switch_int_edge_effects<G: GenKill<Self::Idx>>(
        .                   &self,
        .                   block: mir::BasicBlock,
        .                   discr: &mir::Operand<'tcx>,
        .                   edge_effects: &mut impl SwitchIntEdgeEffects<G>,
        .               ) {
      716 ( 0.00%)          if !self.tcx.sess.opts.debugging_opts.precise_enum_drop_elaboration {
        .                       return;
        .                   }
        .           
      358 ( 0.00%)          if !self.mark_inactive_variants_as_uninit {
        .                       return;
        .                   }
        .           
        .                   let enum_ = discr.place().and_then(|discr| {
        .                       switch_on_enum_discriminant(self.tcx, &self.body, &self.body[block], discr)
        .                   });
        .           
        .                   let (enum_place, enum_def) = match enum_ {
-- line 510 ----------------------------------------
-- line 609 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> AnalysisDomain<'tcx> for EverInitializedPlaces<'_, 'tcx> {
        .               type Domain = BitSet<InitIndex>;
        .           
        .               const NAME: &'static str = "ever_init";
        .           
    2,400 ( 0.00%)      fn bottom_value(&self, _: &mir::Body<'tcx>) -> Self::Domain {
        .                   // bottom = no initialized variables by default
        .                   BitSet::new_empty(self.move_data().inits.len())
    3,360 ( 0.00%)      }
        .           
      158 ( 0.00%)      fn initialize_start_block(&self, body: &mir::Body<'tcx>, state: &mut Self::Domain) {
      158 ( 0.00%)          for arg_init in 0..body.arg_count {
        .                       state.insert(InitIndex::new(arg_init));
        .                   }
      316 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> GenKillAnalysis<'tcx> for EverInitializedPlaces<'_, 'tcx> {
        .               type Idx = InitIndex;
        .           
   45,638 ( 0.00%)      #[instrument(skip(self, trans), level = "debug")]
        .               fn statement_effect(
        .                   &self,
        .                   trans: &mut impl GenKill<Self::Idx>,
        .                   stmt: &mir::Statement<'tcx>,
        .                   location: Location,
        .               ) {
  115,244 ( 0.00%)          let move_data = self.move_data();
        .                   let init_path_map = &move_data.init_path_map;
        .                   let init_loc_map = &move_data.init_loc_map;
        .                   let rev_lookup = &move_data.rev_lookup;
        .           
        .                   debug!("initializes move_indexes {:?}", &init_loc_map[location]);
        .                   trans.gen_all(init_loc_map[location].iter().copied());
        .           
  275,522 ( 0.01%)          if let mir::StatementKind::StorageDead(local) = stmt.kind {
        .                       // End inits for StorageDead, so that an immutable variable can
        .                       // be reinitialized on the next iteration of the loop.
   45,034 ( 0.00%)              let move_path_index = rev_lookup.find_local(local);
        .                       debug!("clears the ever initialized status of {:?}", init_path_map[move_path_index]);
        .                       trans.kill_all(init_path_map[move_path_index].iter().copied());
        .                   }
        .               }
        .           
   10,134 ( 0.00%)      #[instrument(skip(self, trans, _terminator), level = "debug")]
        .               fn terminator_effect(
        .                   &self,
        .                   trans: &mut impl GenKill<Self::Idx>,
        .                   _terminator: &mir::Terminator<'tcx>,
        .                   location: Location,
        .               ) {
   45,456 ( 0.00%)          let (body, move_data) = (self.body, self.move_data());
        .                   let term = body[location.block].terminator();
        .                   let init_loc_map = &move_data.init_loc_map;
        .                   debug!(?term);
        .                   debug!("initializes move_indexes {:?}", init_loc_map[location]);
        .                   trans.gen_all(
        .                       init_loc_map[location]
        .                           .iter()
        .                           .filter(|init_index| {
   41,316 ( 0.00%)                      move_data.inits[**init_index].kind != InitKind::NonPanicPathOnly
        .                           })
        .                           .copied(),
        .                   );
        .               }
        .           
        .               fn call_return_effect(
        .                   &self,
        .                   trans: &mut impl GenKill<Self::Idx>,
        .                   block: mir::BasicBlock,
        .                   _return_places: CallReturnPlaces<'_, 'tcx>,
        .               ) {
   10,451 ( 0.00%)          let move_data = self.move_data();
        .                   let init_loc_map = &move_data.init_loc_map;
        .           
   10,451 ( 0.00%)          let call_loc = self.body.terminator_loc(block);
        .                   for init_index in &init_loc_map[call_loc] {
   10,451 ( 0.00%)              trans.gen(*init_index);
        .                   }
        .               }
        .           }
        .           
        .           /// Inspect a `SwitchInt`-terminated basic block to see if the condition of that `SwitchInt` is
        .           /// an enum discriminant.
        .           ///
        .           /// We expect such blocks to have a call to `discriminant` as their last statement like so:
-- line 697 ----------------------------------------
-- line 699 ----------------------------------------
        .           /// ```text
        .           /// ...
        .           /// _42 = discriminant(_1)
        .           /// SwitchInt(_42, ..)
        .           /// ```
        .           ///
        .           /// If the basic block matches this pattern, this function returns the place corresponding to the
        .           /// enum (`_1` in the example above) as well as the `AdtDef` of that enum.
    1,952 ( 0.00%)  fn switch_on_enum_discriminant<'mir, 'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &'mir mir::Body<'tcx>,
        .               block: &'mir mir::BasicBlockData<'tcx>,
        .               switch_on: mir::Place<'tcx>,
        .           ) -> Option<(mir::Place<'tcx>, &'tcx ty::AdtDef)> {
    1,189 ( 0.00%)      match block.statements.last().map(|stmt| &stmt.kind) {
        .                   Some(mir::StatementKind::Assign(box (lhs, mir::Rvalue::Discriminant(discriminated))))
      225 ( 0.00%)              if *lhs == switch_on =>
        .                   {
      300 ( 0.00%)              match &discriminated.ty(body, tcx).ty.kind() {
      525 ( 0.00%)                  ty::Adt(def, _) => Some((*discriminated, def)),
        .           
        .                           // `Rvalue::Discriminant` is also used to get the active yield point for a
        .                           // generator, but we do not need edge-specific effects in that case. This may
        .                           // change in the future.
        .                           ty::Generator(..) => None,
        .           
        .                           t => bug!("`discriminant` called on unexpected type {:?}", t),
        .                       }
        .                   }
        .           
        .                   _ => None,
        .               }
    2,196 ( 0.00%)  }
        .           
        .           struct OnMutBorrow<F>(F);
        .           
        .           impl<F> Visitor<'_> for OnMutBorrow<F>
        .           where
        .               F: FnMut(&mir::Place<'_>),
        .           {
        .               fn visit_rvalue(&mut self, rvalue: &mir::Rvalue<'_>, location: Location) {
        .                   // FIXME: Does `&raw const foo` allow mutation? See #90413.
  175,235 ( 0.00%)          match rvalue {
      250 ( 0.00%)              mir::Rvalue::Ref(_, mir::BorrowKind::Mut { .. }, place)
        .                       | mir::Rvalue::AddressOf(_, place) => (self.0)(place),
        .           
        .                       _ => {}
        .                   }
        .           
        .                   self.super_rvalue(rvalue, location)
        .               }
        .           }
-- line 750 ----------------------------------------
-- line 754 ----------------------------------------
        .           /// This DOES NOT call `f` for a shared borrow of a type with interior mutability.  That's okay for
        .           /// initializedness, because we cannot move from an `UnsafeCell` (outside of `core::cell`), but
        .           /// other analyses will likely need to check for `!Freeze`.
        .           fn for_each_mut_borrow<'tcx>(
        .               mir: &impl MirVisitable<'tcx>,
        .               location: Location,
        .               f: impl FnMut(&mir::Place<'_>),
        .           ) {
  388,184 ( 0.01%)      let mut vis = OnMutBorrow(f);
        .           
1,295,160 ( 0.03%)      mir.apply(location, &mut vis);
        .           }

  524,384 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/impls/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs
--------------------------------------------------------------------------------
Ir                 

-- line 48 ----------------------------------------
        .           //
        .           // FIXME: we have to do something for moving slice patterns.
        .           fn place_contents_drop_state_cannot_differ<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               place: mir::Place<'tcx>,
        .           ) -> bool {
        .               let ty = place.ty(body, tcx).ty;
2,637,190 ( 0.07%)      match ty.kind() {
        .                   ty::Array(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} => false",
        .                           place, ty
        .                       );
        .                       false
        .                   }
        .                   ty::Slice(..) | ty::Ref(..) | ty::RawPtr(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} refd => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
1,805,013 ( 0.05%)          ty::Adt(def, _) if (def.has_dtor(tcx) && !def.is_box()) || def.is_union() => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} Drop => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
        .                   _ => false,
        .               }
-- line 79 ----------------------------------------
-- line 83 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               lookup_result: LookupResult,
        .               each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
  121,616 ( 0.00%)      match lookup_result {
        .                   LookupResult::Parent(..) => {
        .                       // access to untracked value - do not touch children
        .                   }
        .                   LookupResult::Exact(e) => on_all_children_bits(tcx, body, move_data, e, each_child),
        .               }
        .           }
        .           
        .           pub fn on_all_children_bits<'tcx, F>(
-- line 99 ----------------------------------------
-- line 100 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               move_path_index: MovePathIndex,
        .               mut each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
3,536,160 ( 0.09%)      fn is_terminal_path<'tcx>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   path: MovePathIndex,
        .               ) -> bool {
  884,040 ( 0.02%)          place_contents_drop_state_cannot_differ(tcx, body, move_data.move_paths[path].place)
3,536,160 ( 0.09%)      }
        .           
4,003,614 ( 0.10%)      fn on_all_children_bits<'tcx, F>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   move_path_index: MovePathIndex,
        .                   each_child: &mut F,
        .               ) where
        .                   F: FnMut(MovePathIndex),
        .               {
   81,505 ( 0.00%)          each_child(move_path_index);
        .           
3,094,140 ( 0.08%)          if is_terminal_path(tcx, body, move_data, move_path_index) {
        .                       return;
        .                   }
        .           
  434,491 ( 0.01%)          let mut next_child_index = move_data.move_paths[move_path_index].first_child;
  869,305 ( 0.02%)          while let Some(child_index) = next_child_index {
      642 ( 0.00%)              on_all_children_bits(tcx, body, move_data, child_index, each_child);
      107 ( 0.00%)              next_child_index = move_data.move_paths[child_index].next_sibling;
        .                   }
3,411,514 ( 0.09%)      }
2,685,816 ( 0.07%)      on_all_children_bits(tcx, body, move_data, move_path_index, &mut each_child);
        .           }
        .           
        .           pub fn on_all_drop_children_bits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               path: MovePathIndex,
        .               mut each_child: F,
-- line 146 ----------------------------------------
-- line 156 ----------------------------------------
        .                   if erased_ty.needs_drop(tcx, ctxt.param_env) {
        .                       each_child(child);
        .                   } else {
        .                       debug!("on_all_drop_children_bits - skipping")
        .                   }
        .               })
        .           }
        .           
    5,726 ( 0.00%)  pub fn drop_flag_effects_for_function_entry<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
      516 ( 0.00%)      for arg in body.args_iter() {
      688 ( 0.00%)          let place = mir::Place::from(arg);
    1,032 ( 0.00%)          let lookup_result = move_data.rev_lookup.find(place.as_ref());
        .                   on_lookup_result_bits(tcx, body, move_data, lookup_result, |mpi| {
      346 ( 0.00%)              callback(mpi, DropFlagState::Present)
        .                   });
        .               }
    4,128 ( 0.00%)  }
        .           
4,732,092 ( 0.12%)  pub fn drop_flag_effects_for_location<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
        .               debug!("drop_flag_effects_for_location({:?})", loc);
        .           
        .               // first, move out of the RHS
  207,201 ( 0.01%)      for mi in &move_data.loc_map[loc] {
1,157,016 ( 0.03%)          let path = mi.move_path_index(move_data);
        .                   debug!("moving out of path {:?}", move_data.move_paths[path]);
        .           
  299,632 ( 0.01%)          on_all_children_bits(tcx, body, move_data, path, |mpi| callback(mpi, DropFlagState::Absent))
        .               }
        .           
        .               debug!("drop_flag_effects: assignment for location({:?})", loc);
        .           
   81,505 ( 0.00%)      for_location_inits(tcx, body, move_data, loc, |mpi| callback(mpi, DropFlagState::Present));
3,653,768 ( 0.09%)  }
        .           
        .           pub fn for_location_inits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
  207,201 ( 0.01%)      for ii in &move_data.init_loc_map[loc] {
  608,384 ( 0.02%)          let init = move_data.inits[*ii];
  445,578 ( 0.01%)          match init.kind {
        .                       InitKind::Deep => {
        .                           let path = init.path;
        .           
        .                           on_all_children_bits(tcx, body, move_data, path, &mut callback)
        .                       }
        .                       InitKind::Shallow => {
        .                           let mpi = init.path;
        .                           callback(mpi);
-- line 226 ----------------------------------------
-- line 230 ----------------------------------------
        .               }
        .           }
        .           
        .           /// Calls `handle_inactive_variant` for each descendant move path of `enum_place` that contains a
        .           /// `Downcast` to a variant besides the `active_variant`.
        .           ///
        .           /// NOTE: If there are no move paths corresponding to an inactive variant,
        .           /// `handle_inactive_variant` will not be called for that variant.
    1,704 ( 0.00%)  pub(crate) fn on_all_inactive_variants<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &mir::Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               enum_place: mir::Place<'tcx>,
        .               active_variant: VariantIdx,
        .               mut handle_inactive_variant: impl FnMut(MovePathIndex),
        .           ) {
      710 ( 0.00%)      let enum_mpi = match move_data.rev_lookup.find(enum_place.as_ref()) {
        .                   LookupResult::Exact(mpi) => mpi,
        .                   LookupResult::Parent(_) => return,
        .               };
        .           
        .               let enum_path = &move_data.move_paths[enum_mpi];
      219 ( 0.00%)      for (variant_mpi, variant_path) in enum_path.children(&move_data.move_paths) {
        .                   // Because of the way we build the `MoveData` tree, each child should have exactly one more
        .                   // projection than `enum_place`. This additional projection must be a downcast since the
        .                   // base is an enum.
        .                   let (downcast, base_proj) = variant_path.place.projection.split_last().unwrap();
        .                   assert_eq!(enum_place.projection.len(), base_proj.len());
        .           
        .                   let variant_idx = match *downcast {
        .                       mir::ProjectionElem::Downcast(_, idx) => idx,
-- line 260 ----------------------------------------
-- line 262 ----------------------------------------
        .                   };
        .           
        .                   if variant_idx != active_variant {
        .                       on_all_children_bits(tcx, body, move_data, variant_mpi, |mpi| {
        .                           handle_inactive_variant(mpi)
        .                       });
        .                   }
        .               }
    1,136 ( 0.00%)  }

3,218,808 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs
--------------------------------------------------------------------------------
Ir                 

-- line 32 ----------------------------------------
        .           ///
        .           /// If the syntax extension is an MBE macro, it will attempt to match its
        .           /// LHS token tree against the provided token tree, and if it finds a
        .           /// match, will transcribe the RHS token tree, splicing in any captured
        .           /// `macro_parser::matched_nonterminals` into the `SubstNt`s it finds.
        .           ///
        .           /// The RHS of an MBE macro is the only place `SubstNt`s are substituted.
        .           /// Nothing special happens to misnamed or misplaced `SubstNt`s.
1,071,223 ( 0.03%)  #[derive(Debug, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
        .           pub enum TokenTree {
        .               /// A single token.
  387,372 ( 0.01%)      Token(Token),
        .               /// A delimited sequence of token trees.
   43,320 ( 0.00%)      Delimited(DelimSpan, DelimToken, TokenStream),
        .           }
        .           
        .           #[derive(Copy, Clone)]
        .           pub enum CanSynthesizeMissingTokens {
        .               Yes,
        .               No,
        .           }
        .           
-- line 53 ----------------------------------------
-- line 72 ----------------------------------------
        .                       }
        .                       _ => false,
        .                   }
        .               }
        .           
        .               /// Retrieves the `TokenTree`'s span.
        .               pub fn span(&self) -> Span {
        .                   match self {
       79 ( 0.00%)              TokenTree::Token(token) => token.span,
        .                       TokenTree::Delimited(sp, ..) => sp.entire(),
        .                   }
        .               }
        .           
        .               /// Modify the `TokenTree`'s span in-place.
        .               pub fn set_span(&mut self, span: Span) {
        .                   match self {
        .                       TokenTree::Token(token) => token.span = span,
        .                       TokenTree::Delimited(dspan, ..) => *dspan = DelimSpan::from_single(span),
        .                   }
        .               }
        .           
        .               pub fn token(kind: TokenKind, span: Span) -> TokenTree {
  172,724 ( 0.00%)          TokenTree::Token(Token::new(kind, span))
        .               }
        .           
        .               /// Returns the opening delimiter as a token tree.
   21,606 ( 0.00%)      pub fn open_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
   64,818 ( 0.00%)          TokenTree::token(token::OpenDelim(delim), span.open)
   21,606 ( 0.00%)      }
        .           
        .               /// Returns the closing delimiter as a token tree.
   21,575 ( 0.00%)      pub fn close_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
   64,725 ( 0.00%)          TokenTree::token(token::CloseDelim(delim), span.close)
   21,575 ( 0.00%)      }
        .           
      768 ( 0.00%)      pub fn uninterpolate(self) -> TokenTree {
      512 ( 0.00%)          match self {
    2,304 ( 0.00%)              TokenTree::Token(token) => TokenTree::Token(token.uninterpolate().into_owned()),
        .                       tt => tt,
        .                   }
    1,024 ( 0.00%)      }
        .           }
        .           
        .           impl<CTX> HashStable<CTX> for TokenStream
        .           where
        .               CTX: crate::HashStableContext,
        .           {
      423 ( 0.00%)      fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
    1,142 ( 0.00%)          for sub_tt in self.trees() {
        .                       sub_tt.hash_stable(hcx, hasher);
        .                   }
      376 ( 0.00%)      }
        .           }
        .           
        .           pub trait CreateTokenStream: sync::Send + sync::Sync {
        .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream;
        .           }
        .           
        .           impl CreateTokenStream for AttrAnnotatedTokenStream {
        .               fn create_token_stream(&self) -> AttrAnnotatedTokenStream {
-- line 131 ----------------------------------------
-- line 188 ----------------------------------------
        .               Delimited(DelimSpan, DelimToken, AttrAnnotatedTokenStream),
        .               /// Stores the attributes for an attribute target,
        .               /// along with the tokens for that attribute target.
        .               /// See `AttributesData` for more information
        .               Attributes(AttributesData),
        .           }
        .           
        .           impl AttrAnnotatedTokenStream {
   43,090 ( 0.00%)      pub fn new(tokens: Vec<(AttrAnnotatedTokenTree, Spacing)>) -> AttrAnnotatedTokenStream {
        .                   AttrAnnotatedTokenStream(Lrc::new(tokens))
   43,090 ( 0.00%)      }
        .           
        .               /// Converts this `AttrAnnotatedTokenStream` to a plain `TokenStream
        .               /// During conversion, `AttrAnnotatedTokenTree::Attributes` get 'flattened'
        .               /// back to a `TokenStream` of the form `outer_attr attr_target`.
        .               /// If there are inner attributes, they are inserted into the proper
        .               /// place in the attribute target tokens.
        .               pub fn to_tokenstream(&self) -> TokenStream {
        .                   let trees: Vec<_> = self
-- line 206 ----------------------------------------
-- line 316 ----------------------------------------
        .           pub struct TokenStream(pub(crate) Lrc<Vec<TreeAndSpacing>>);
        .           
        .           pub type TreeAndSpacing = (TokenTree, Spacing);
        .           
        .           // `TokenStream` is used a lot. Make sure it doesn't unintentionally get bigger.
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           rustc_data_structures::static_assert_size!(TokenStream, 8);
        .           
  121,737 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Encodable, Decodable)]
        .           pub enum Spacing {
        .               Alone,
        .               Joint,
        .           }
        .           
        .           impl TokenStream {
        .               /// Given a `TokenStream` with a `Stream` of only two arguments, return a new `TokenStream`
        .               /// separating the two arguments with a comma for diagnostic suggestions.
-- line 332 ----------------------------------------
-- line 371 ----------------------------------------
        .           impl From<(AttrAnnotatedTokenTree, Spacing)> for AttrAnnotatedTokenStream {
        .               fn from((tree, spacing): (AttrAnnotatedTokenTree, Spacing)) -> AttrAnnotatedTokenStream {
        .                   AttrAnnotatedTokenStream::new(vec![(tree, spacing)])
        .               }
        .           }
        .           
        .           impl From<TokenTree> for TokenStream {
        .               fn from(tree: TokenTree) -> TokenStream {
      120 ( 0.00%)          TokenStream::new(vec![(tree, Spacing::Alone)])
        .               }
        .           }
        .           
        .           impl From<TokenTree> for TreeAndSpacing {
        .               fn from(tree: TokenTree) -> TreeAndSpacing {
   64,902 ( 0.00%)          (tree, Spacing::Alone)
        .               }
        .           }
        .           
        .           impl iter::FromIterator<TokenTree> for TokenStream {
        .               fn from_iter<I: IntoIterator<Item = TokenTree>>(iter: I) -> Self {
        .                   TokenStream::new(iter.into_iter().map(Into::into).collect::<Vec<TreeAndSpacing>>())
        .               }
        .           }
-- line 393 ----------------------------------------
-- line 401 ----------------------------------------
        .           }
        .           
        .           impl TokenStream {
        .               pub fn new(streams: Vec<TreeAndSpacing>) -> TokenStream {
        .                   TokenStream(Lrc::new(streams))
        .               }
        .           
        .               pub fn is_empty(&self) -> bool {
   21,545 ( 0.00%)          self.0.is_empty()
   21,545 ( 0.00%)      }
        .           
        .               pub fn len(&self) -> usize {
  162,197 ( 0.00%)          self.0.len()
        .               }
        .           
        .               pub fn from_streams(mut streams: SmallVec<[TokenStream; 2]>) -> TokenStream {
        .                   match streams.len() {
        .                       0 => TokenStream::default(),
        .                       1 => streams.pop().unwrap(),
        .                       _ => {
        .                           // We are going to extend the first stream in `streams` with
-- line 421 ----------------------------------------
-- line 448 ----------------------------------------
        .           
        .                           // Create the final `TokenStream`.
        .                           TokenStream(first_stream_lrc)
        .                       }
        .                   }
        .               }
        .           
        .               pub fn trees(&self) -> Cursor {
      147 ( 0.00%)          self.clone().into_trees()
      294 ( 0.00%)      }
        .           
   21,647 ( 0.00%)      pub fn into_trees(self) -> Cursor {
        .                   Cursor::new(self)
   43,294 ( 0.00%)      }
        .           
        .               /// Compares two `TokenStream`s, checking equality without regarding span information.
        .               pub fn eq_unspanned(&self, other: &TokenStream) -> bool {
        .                   let mut t1 = self.trees();
        .                   let mut t2 = other.trees();
        .                   for (t1, t2) in iter::zip(&mut t1, &mut t2) {
        .                       if !t1.eq_unspanned(&t2) {
        .                           return false;
-- line 469 ----------------------------------------
-- line 572 ----------------------------------------
        .           pub struct Cursor {
        .               pub stream: TokenStream,
        .               index: usize,
        .           }
        .           
        .           impl Iterator for Cursor {
        .               type Item = TokenTree;
        .           
    1,080 ( 0.00%)      fn next(&mut self) -> Option<TokenTree> {
    4,692 ( 0.00%)          self.next_with_spacing().map(|(tree, _)| tree)
    1,440 ( 0.00%)      }
        .           }
        .           
        .           impl Cursor {
        .               fn new(stream: TokenStream) -> Self {
        .                   Cursor { stream, index: 0 }
        .               }
        .           
  809,185 ( 0.02%)      pub fn next_with_spacing(&mut self) -> Option<TreeAndSpacing> {
  486,591 ( 0.01%)          if self.index < self.stream.len() {
  236,958 ( 0.01%)              self.index += 1;
  827,876 ( 0.02%)              Some(self.stream.0[self.index - 1].clone())
        .                   } else {
   87,138 ( 0.00%)              None
        .                   }
  971,022 ( 0.02%)      }
        .           
        .               pub fn index(&self) -> usize {
        .                   self.index
        .               }
        .           
        .               pub fn append(&mut self, new_stream: TokenStream) {
        .                   if new_stream.is_empty() {
        .                       return;
        .                   }
        .                   let index = self.index;
        .                   let stream = mem::take(&mut self.stream);
        .                   *self = TokenStream::from_streams(smallvec![stream, new_stream]).into_trees();
        .                   self.index = index;
        .               }
        .           
  167,999 ( 0.00%)      pub fn look_ahead(&self, n: usize) -> Option<&TokenTree> {
  335,998 ( 0.01%)          self.stream.0[self.index..].get(n).map(|(tree, _)| tree)
  335,998 ( 0.01%)      }
        .           }
        .           
   46,061 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
        .           pub struct DelimSpan {
        .               pub open: Span,
        .               pub close: Span,
        .           }
        .           
        .           impl DelimSpan {
        .               pub fn from_single(sp: Span) -> Self {
        .                   DelimSpan { open: sp, close: sp }
        .               }
        .           
   43,086 ( 0.00%)      pub fn from_pair(open: Span, close: Span) -> Self {
        .                   DelimSpan { open, close }
   21,543 ( 0.00%)      }
        .           
        .               pub fn dummy() -> Self {
        .                   Self::from_single(DUMMY_SP)
      183 ( 0.00%)      }
        .           
       64 ( 0.00%)      pub fn entire(self) -> Span {
        .                   self.open.with_hi(self.close.hi())
       48 ( 0.00%)      }
        .           }

    2,219 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs
--------------------------------------------------------------------------------
Ir                 

-- line 22 ----------------------------------------
        .           
        .           /// An entity in the Rust type system, which can be one of
        .           /// several kinds (types, lifetimes, and consts).
        .           /// To reduce memory usage, a `GenericArg` is an interned pointer,
        .           /// with the lowest 2 bits being reserved for a tag to
        .           /// indicate the type (`Ty`, `Region`, or `Const`) it points to.
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
        .           pub struct GenericArg<'tcx> {
  257,891 ( 0.01%)      ptr: NonZeroUsize,
  648,128 ( 0.02%)      marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, &'tcx ty::Const<'tcx>)>,
        .           }
        .           
        .           const TAG_MASK: usize = 0b11;
        .           const TYPE_TAG: usize = 0b00;
        .           const REGION_TAG: usize = 0b01;
        .           const CONST_TAG: usize = 0b10;
        .           
   46,280 ( 0.00%)  #[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]
        .           pub enum GenericArgKind<'tcx> {
        .               Lifetime(ty::Region<'tcx>),
        .               Type(Ty<'tcx>),
        .               Const(&'tcx ty::Const<'tcx>),
        .           }
        .           
        .           impl<'tcx> GenericArgKind<'tcx> {
   12,305 ( 0.00%)      fn pack(self) -> GenericArg<'tcx> {
   12,305 ( 0.00%)          let (tag, ptr) = match self {
        .                       GenericArgKind::Lifetime(lt) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(lt) & TAG_MASK, 0);
        .                           (REGION_TAG, lt as *const _ as usize)
        .                       }
        .                       GenericArgKind::Type(ty) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(ty) & TAG_MASK, 0);
-- line 56 ----------------------------------------
-- line 58 ----------------------------------------
        .                       }
        .                       GenericArgKind::Const(ct) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(ct) & TAG_MASK, 0);
        .                           (CONST_TAG, ct as *const _ as usize)
        .                       }
        .                   };
        .           
   55,364 ( 0.00%)          GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }
   12,305 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> fmt::Debug for GenericArg<'tcx> {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   match self.unpack() {
        .                       GenericArgKind::Lifetime(lt) => lt.fmt(f),
        .                       GenericArgKind::Type(ty) => ty.fmt(f),
        .                       GenericArgKind::Const(ct) => ct.fmt(f),
-- line 75 ----------------------------------------
-- line 85 ----------------------------------------
        .           
        .           impl<'tcx> PartialOrd for GenericArg<'tcx> {
        .               fn partial_cmp(&self, other: &GenericArg<'_>) -> Option<Ordering> {
        .                   Some(self.cmp(&other))
        .               }
        .           }
        .           
        .           impl<'tcx> From<ty::Region<'tcx>> for GenericArg<'tcx> {
   24,013 ( 0.00%)      fn from(r: ty::Region<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Lifetime(r).pack()
   24,013 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {
  270,977 ( 0.01%)      fn from(ty: Ty<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Type(ty).pack()
  270,977 ( 0.01%)      }
        .           }
        .           
        .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for GenericArg<'tcx> {
      300 ( 0.00%)      fn from(c: &'tcx ty::Const<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Const(c).pack()
      300 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> GenericArg<'tcx> {
        .               #[inline]
        .               pub fn unpack(self) -> GenericArgKind<'tcx> {
        .                   let ptr = self.ptr.get();
        .                   unsafe {
3,399,244 ( 0.09%)              match ptr & TAG_MASK {
   21,022 ( 0.00%)                  REGION_TAG => GenericArgKind::Lifetime(&*((ptr & !TAG_MASK) as *const _)),
  777,441 ( 0.02%)                  TYPE_TAG => GenericArgKind::Type(&*((ptr & !TAG_MASK) as *const _)),
   10,699 ( 0.00%)                  CONST_TAG => GenericArgKind::Const(&*((ptr & !TAG_MASK) as *const _)),
        .                           _ => intrinsics::unreachable(),
        .                       }
        .                   }
        .               }
        .           
        .               /// Unpack the `GenericArg` as a type when it is known certainly to be a type.
        .               /// This is true in cases where `Substs` is used in places where the kinds are known
        .               /// to be limited (e.g. in tuples, where the only parameters are type parameters).
        .               pub fn expect_ty(self) -> Ty<'tcx> {
        .                   match self.unpack() {
        .                       GenericArgKind::Type(ty) => ty,
        .                       _ => bug!("expected a type, but found another kind"),
        .                   }
   30,844 ( 0.00%)      }
        .           
        .               /// Unpack the `GenericArg` as a const when it is known certainly to be a const.
        .               pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {
        .                   match self.unpack() {
        .                       GenericArgKind::Const(c) => c,
        .                       _ => bug!("expected a const, but found another kind"),
        .                   }
        .               }
-- line 140 ----------------------------------------
-- line 170 ----------------------------------------
        .                       GenericArgKind::Type(ty) => ty.visit_with(visitor),
        .                       GenericArgKind::Const(ct) => ct.visit_with(visitor),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for GenericArg<'tcx> {
        .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
      906 ( 0.00%)          self.unpack().encode(e)
        .               }
        .           }
        .           
        .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for GenericArg<'tcx> {
   61,525 ( 0.00%)      fn decode(d: &mut D) -> GenericArg<'tcx> {
   61,525 ( 0.00%)          GenericArgKind::decode(d).pack()
        .               }
        .           }
        .           
        .           /// A substitution mapping generic parameters to new values.
        .           pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;
        .           
        .           pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;
        .           
        .           impl<'a, 'tcx> InternalSubsts<'tcx> {
        .               /// Interpret these substitutions as the substitutions of a closure type.
        .               /// Closure substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the signature and closure kind;
        .               /// see `ty::ClosureSubsts` struct for more comments.
      643 ( 0.00%)      pub fn as_closure(&'a self) -> ClosureSubsts<'a> {
        .                   ClosureSubsts { substs: self }
      643 ( 0.00%)      }
        .           
        .               /// Interpret these substitutions as the substitutions of a generator type.
        .               /// Generator substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the signature and generator kind;
        .               /// see `ty::GeneratorSubsts` struct for more comments.
        .               pub fn as_generator(&'tcx self) -> GeneratorSubsts<'tcx> {
        .                   GeneratorSubsts { substs: self }
        .               }
-- line 208 ----------------------------------------
-- line 211 ----------------------------------------
        .               /// Inline const substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the inferred type;
        .               /// see `ty::InlineConstSubsts` struct for more comments.
        .               pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {
        .                   InlineConstSubsts { substs: self }
        .               }
        .           
        .               /// Creates an `InternalSubsts` that maps each generic parameter to itself.
    5,070 ( 0.00%)      pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {
      524 ( 0.00%)          Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))
    4,563 ( 0.00%)      }
        .           
        .               /// Creates an `InternalSubsts` for generic parameter definitions,
        .               /// by calling closures to obtain each kind.
        .               /// The closures get to observe the `InternalSubsts` as they're
        .               /// being built, which can be used to correctly
        .               /// substitute defaults of generic parameters.
  144,047 ( 0.00%)      pub fn for_item<F>(tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
        .               where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   let defs = tcx.generics_of(def_id);
        .                   let count = defs.count();
        .                   let mut substs = SmallVec::with_capacity(count);
   49,948 ( 0.00%)          Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);
   32,124 ( 0.00%)          tcx.intern_substs(&substs)
  144,558 ( 0.00%)      }
        .           
        .               pub fn extend_to<F>(&self, tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
        .               where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   Self::for_item(tcx, def_id, |param, substs| {
        .                       self.get(param.index as usize).cloned().unwrap_or_else(|| mk_kind(param, substs))
        .                   })
        .               }
        .           
  171,895 ( 0.00%)      pub fn fill_item<F>(
        .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
        .                   tcx: TyCtxt<'tcx>,
        .                   defs: &ty::Generics,
        .                   mk_kind: &mut F,
        .               ) where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
   79,367 ( 0.00%)          if let Some(def_id) = defs.parent {
        .                       let parent_defs = tcx.generics_of(def_id);
    2,938 ( 0.00%)              Self::fill_item(substs, tcx, parent_defs, mk_kind);
        .                   }
        .                   Self::fill_single(substs, defs, mk_kind)
  137,320 ( 0.00%)      }
        .           
       72 ( 0.00%)      pub fn fill_single<F>(
        .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
        .                   defs: &ty::Generics,
        .                   mk_kind: &mut F,
        .               ) where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   substs.reserve(defs.params.len());
        .                   for param in &defs.params {
        .                       let kind = mk_kind(param, substs);
   52,962 ( 0.00%)              assert_eq!(param.index as usize, substs.len());
        .                       substs.push(kind);
        .                   }
       72 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {
        .                   self.iter()
        .                       .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })
        .               }
        .           
        .               #[inline]
-- line 284 ----------------------------------------
-- line 302 ----------------------------------------
        .                   self.iter().filter_map(|k| match k.unpack() {
        .                       GenericArgKind::Lifetime(_) => None,
        .                       generic => Some(generic),
        .                   })
        .               }
        .           
        .               #[inline]
        .               pub fn type_at(&self, i: usize) -> Ty<'tcx> {
  154,515 ( 0.00%)          if let GenericArgKind::Type(ty) = self[i].unpack() {
        .                       ty
        .                   } else {
        .                       bug!("expected type for param #{} in {:?}", i, self);
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {
-- line 318 ----------------------------------------
-- line 350 ----------------------------------------
        .               /// impl<U> X<U> for U { fn f<V>() {} }
        .               /// ```
        .               ///
        .               /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.
        .               /// * If `source_ancestor` is the def_id of the trait.
        .               /// * If `target_substs` is `[U]`, the substs for the impl.
        .               /// * Then we will return `[U, T]`, the subst for `f` in the impl that
        .               ///   are needed for it to match the trait.
    2,667 ( 0.00%)      pub fn rebase_onto(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   source_ancestor: DefId,
        .                   target_substs: SubstsRef<'tcx>,
        .               ) -> SubstsRef<'tcx> {
        .                   let defs = tcx.generics_of(source_ancestor);
      762 ( 0.00%)          tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))
    3,048 ( 0.00%)      }
        .           
        .               pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {
        .                   tcx.mk_substs(self.iter().take(generics.count()))
        .               }
        .           }
        .           
        .           impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {
    5,257 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // The match arms are in order of frequency. The 1, 2, and 0 cases are
        .                   // typically hit in 90--99.99% of cases. When folding doesn't change
        .                   // the substs, it's faster to reuse the existing substs rather than
        .                   // calling `intern_substs`.
  615,134 ( 0.02%)          match self.len() {
        .                       1 => {
   42,997 ( 0.00%)                  let param0 = self[0].try_fold_with(folder)?;
  150,895 ( 0.00%)                  if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }
        .                       }
        .                       2 => {
   80,469 ( 0.00%)                  let param0 = self[0].try_fold_with(folder)?;
  223,529 ( 0.01%)                  let param1 = self[1].try_fold_with(folder)?;
  269,242 ( 0.01%)                  if param0 == self[0] && param1 == self[1] {
        .                               Ok(self)
        .                           } else {
  347,140 ( 0.01%)                      Ok(folder.tcx().intern_substs(&[param0, param1]))
        .                           }
        .                       }
        .                       0 => Ok(self),
        .                       _ => {
        .                           let params: SmallVec<[_; 8]> =
    4,448 ( 0.00%)                      self.iter().map(|k| k.try_fold_with(folder)).collect::<Result<_, _>>()?;
      412 ( 0.00%)                  if params[..] == self[..] {
        .                               Ok(self)
        .                           } else {
    1,014 ( 0.00%)                      Ok(folder.tcx().intern_substs(&params))
        .                           }
        .                       }
        .                   }
   10,688 ( 0.00%)      }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
   44,421 ( 0.00%)          self.iter().try_for_each(|t| t.visit_with(visitor))
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Public trait `Subst`
        .           //
        .           // Just call `foo.subst(tcx, substs)` to perform a substitution across
        .           // `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when
-- line 420 ----------------------------------------
-- line 435 ----------------------------------------
        .           
        .           impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {
        .               fn subst_spanned(
        .                   self,
        .                   tcx: TyCtxt<'tcx>,
        .                   substs: &[GenericArg<'tcx>],
        .                   span: Option<Span>,
        .               ) -> T {
2,581,315 ( 0.07%)          let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };
        .                   self.fold_with(&mut folder)
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // The actual substitution engine itself is a type folder.
        .           
        .           struct SubstFolder<'a, 'tcx> {
-- line 451 ----------------------------------------
-- line 456 ----------------------------------------
        .               span: Option<Span>,
        .           
        .               /// Number of region binders we have passed through while doing the substitution
        .               binders_passed: u32,
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   18,413 ( 0.00%)          self.tcx
        .               }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
  146,496 ( 0.00%)          self.binders_passed += 1;
    5,531 ( 0.00%)          let t = t.super_fold_with(self);
  146,496 ( 0.00%)          self.binders_passed -= 1;
        .                   t
        .               }
        .           
   47,748 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
        .                   // Note: This routine only handles regions that are bound on
        .                   // type declarations and other outer declarations, not those
        .                   // bound in *fn types*. Region substitution of the bound
        .                   // regions that appear in a function signature is done using
        .                   // the specialized routine `ty::replace_late_regions()`.
   15,916 ( 0.00%)          match *r {
   13,414 ( 0.00%)              ty::ReEarlyBound(data) => {
   13,414 ( 0.00%)                  let rk = self.substs.get(data.index as usize).map(|k| k.unpack());
        .                           match rk {
    6,707 ( 0.00%)                      Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),
        .                               _ => {
        .                                   let span = self.span.unwrap_or(DUMMY_SP);
        .                                   let msg = format!(
        .                                       "Region parameter out of range \
        .                                        when substituting in region {} (index={})",
        .                                       data.name, data.index
        .                                   );
        .                                   span_bug!(span, "{}", msg);
        .                               }
        .                           }
        .                       }
        .                       _ => r,
        .                   }
   55,706 ( 0.00%)      }
        .           
1,586,634 ( 0.04%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
  528,878 ( 0.01%)          if !t.needs_subst() {
        .                       return t;
        .                   }
        .           
   57,776 ( 0.00%)          match *t.kind() {
   95,540 ( 0.00%)              ty::Param(p) => self.ty_for_param(p, t),
   58,680 ( 0.00%)              _ => t.super_fold_with(self),
        .                   }
2,595,490 ( 0.07%)      }
        .           
  497,119 ( 0.01%)      fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
  143,564 ( 0.00%)          if let ty::ConstKind::Param(p) = c.val {
        .                       self.const_for_param(p, c)
        .                   } else {
  636,399 ( 0.02%)              c.super_fold_with(self)
        .                   }
    2,448 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {
        .                   c.super_fold_with(self)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> SubstFolder<'a, 'tcx> {
        .               fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   // Look up the type in the substitutions. It really should be in there.
   38,216 ( 0.00%)          let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());
        .                   let ty = match opt_ty {
        .                       Some(GenericArgKind::Type(ty)) => ty,
        .                       Some(kind) => {
        .                           let span = self.span.unwrap_or(DUMMY_SP);
        .                           span_bug!(
        .                               span,
        .                               "expected type for `{:?}` ({:?}/{}) but found {:?} \
        .                                when substituting, substs={:?}",
-- line 539 ----------------------------------------
-- line 562 ----------------------------------------
        .               }
        .           
        .               fn const_for_param(
        .                   &self,
        .                   p: ParamConst,
        .                   source_ct: &'tcx ty::Const<'tcx>,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   // Look up the const in the substitutions. It really should be in there.
      612 ( 0.00%)          let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());
        .                   let ct = match opt_ct {
        .                       Some(GenericArgKind::Const(ct)) => ct,
        .                       Some(kind) => {
        .                           let span = self.span.unwrap_or(DUMMY_SP);
        .                           span_bug!(
        .                               span,
        .                               "expected const for `{:?}` ({:?}/{}) but found {:?} \
        .                                when substituting substs={:?}",
-- line 578 ----------------------------------------
-- line 645 ----------------------------------------
        .               fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {
        .                   debug!(
        .                       "shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})",
        .                       val,
        .                       self.binders_passed,
        .                       val.has_escaping_bound_vars()
        .                   );
        .           
   69,920 ( 0.00%)          if self.binders_passed == 0 || !val.has_escaping_bound_vars() {
        .                       return val;
        .                   }
        .           
        .                   let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);
        .                   debug!("shift_vars: shifted result = {:?}", result);
        .           
        .                   result
        .               }
        .           
        .               fn shift_region_through_binders(&self, region: ty::Region<'tcx>) -> ty::Region<'tcx> {
   16,207 ( 0.00%)          if self.binders_passed == 0 || !region.has_escaping_bound_vars() {
        .                       return region;
        .                   }
        .                   ty::fold::shift_region(self.tcx, region, self.binders_passed)
        .               }
        .           }
        .           
        .           /// Stores the user-given substs to reach some fully qualified path
        .           /// (e.g., `<T>::Item` or `<T as Trait>::Item`).
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    1,022 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct UserSubsts<'tcx> {
        .               /// The substitutions for the item as given by the user.
        .               pub substs: SubstsRef<'tcx>,
        .           
        .               /// The self type, in the case of a `<T>::Item` path (when applied
        .               /// to an inherent impl). See `UserSelfTy` below.
      270 ( 0.00%)      pub user_self_ty: Option<UserSelfTy<'tcx>>,
        .           }
        .           
        .           /// Specifies the user-given self type. In the case of a path that
        .           /// refers to a member in an inherent impl, this self type is
        .           /// sometimes needed to constrain the type parameters on the impl. For
        .           /// example, in this code:
        .           ///
        .           /// ```
-- line 689 ----------------------------------------
-- line 696 ----------------------------------------
        .           /// self type `Foo<u32>`. Then we can instantiate the parameters of
        .           /// the impl (with the substs from `UserSubsts`) and apply those to
        .           /// the self type, giving `Foo<?A>`. Finally, we unify that with
        .           /// the self type here, which contains `?A` to be `&'static u32`
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct UserSelfTy<'tcx> {
        .               pub impl_def_id: DefId,
       90 ( 0.00%)      pub self_ty: Ty<'tcx>,
        .           }

  859,416 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs
--------------------------------------------------------------------------------
Ir                  

-- line 12 ----------------------------------------
         .           use rustc_data_structures::sync::Lrc;
         .           use rustc_macros::HashStable_Generic;
         .           use rustc_span::symbol::{kw, sym};
         .           use rustc_span::symbol::{Ident, Symbol};
         .           use rustc_span::{self, edition::Edition, Span, DUMMY_SP};
         .           use std::borrow::Cow;
         .           use std::{fmt, mem};
         .           
     9,856 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub enum CommentKind {
         .               Line,
         .               Block,
         .           }
         .           
        97 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Hash, Debug, Copy)]
         .           #[derive(HashStable_Generic)]
         .           pub enum BinOpToken {
         .               Plus,
         .               Minus,
         .               Star,
         .               Slash,
         .               Percent,
         .               Caret,
         .               And,
         .               Or,
         .               Shl,
         .               Shr,
         .           }
         .           
         .           /// A delimiter token.
   106,369 ( 0.00%)  #[derive(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Debug, Copy)]
         .           #[derive(HashStable_Generic)]
         .           pub enum DelimToken {
         .               /// A round parenthesis (i.e., `(` or `)`).
         .               Paren,
         .               /// A square bracket (i.e., `[` or `]`).
         .               Bracket,
         .               /// A curly brace (i.e., `{` or `}`).
         .               Brace,
         .               /// An empty delimiter.
         .               NoDelim,
         .           }
         .           
       886 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub enum LitKind {
         .               Bool, // AST only, must never appear in a `Token`
         .               Byte,
         .               Char,
         .               Integer,
         .               Float,
         .               Str,
         .               StrRaw(u16), // raw string delimited by `n` hash symbols
         .               ByteStr,
         .               ByteStrRaw(u16), // raw byte string delimited by `n` hash symbols
         .               Err,
         .           }
         .           
         .           /// A literal token.
    66,217 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub struct Lit {
         .               pub kind: LitKind,
         .               pub symbol: Symbol,
         .               pub suffix: Option<Symbol>,
         .           }
         .           
         .           impl fmt::Display for Lit {
   153,575 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   276,435 ( 0.01%)          let Lit { kind, symbol, suffix } = *self;
         .                   match kind {
         .                       Byte => write!(f, "b'{}'", symbol)?,
    90,315 ( 0.00%)              Char => write!(f, "'{}'", symbol)?,
     1,731 ( 0.00%)              Str => write!(f, "\"{}\"", symbol)?,
         .                       StrRaw(n) => write!(
         .                           f,
         .                           "r{delim}\"{string}\"{delim}",
         .                           delim = "#".repeat(n as usize),
         .                           string = symbol
         .                       )?,
         .                       ByteStr => write!(f, "b\"{}\"", symbol)?,
         .                       ByteStrRaw(n) => write!(
         .                           f,
         .                           "br{delim}\"{string}\"{delim}",
         .                           delim = "#".repeat(n as usize),
         .                           string = symbol
         .                       )?,
        99 ( 0.00%)              Integer | Float | Bool | Err => write!(f, "{}", symbol)?,
         .                   }
         .           
    61,430 ( 0.00%)          if let Some(suffix) = suffix {
         .                       write!(f, "{}", suffix)?;
         .                   }
         .           
         .                   Ok(())
   153,575 ( 0.00%)      }
         .           }
         .           
         .           impl LitKind {
         .               /// An English article for the literal token kind.
         .               pub fn article(self) -> &'static str {
         .                   match self {
         .                       Integer | Err => "an",
         .                       _ => "a",
-- line 113 ----------------------------------------
-- line 130 ----------------------------------------
         .               crate fn may_have_suffix(self) -> bool {
         .                   matches!(self, Integer | Float | Err)
         .               }
         .           }
         .           
         .           impl Lit {
         .               pub fn new(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> Lit {
         .                   Lit { kind, symbol, suffix }
   215,338 ( 0.01%)      }
         .           }
         .           
       160 ( 0.00%)  pub fn ident_can_begin_expr(name: Symbol, span: Span, is_raw: bool) -> bool {
       280 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
         .           
        94 ( 0.00%)      !ident_token.is_reserved_ident()
         .                   || ident_token.is_path_segment_keyword()
         .                   || [
         .                       kw::Async,
         .                       kw::Do,
         .                       kw::Box,
         .                       kw::Break,
         .                       kw::Const,
         .                       kw::Continue,
-- line 152 ----------------------------------------
-- line 161 ----------------------------------------
         .                       kw::True,
         .                       kw::Try,
         .                       kw::Unsafe,
         .                       kw::While,
         .                       kw::Yield,
         .                       kw::Static,
         .                   ]
         .                   .contains(&name)
       200 ( 0.00%)  }
         .           
         .           fn ident_can_begin_type(name: Symbol, span: Span, is_raw: bool) -> bool {
       174 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
         .           
        70 ( 0.00%)      !ident_token.is_reserved_ident()
         .                   || ident_token.is_path_segment_keyword()
         .                   || [kw::Underscore, kw::For, kw::Impl, kw::Fn, kw::Unsafe, kw::Extern, kw::Typeof, kw::Dyn]
         .                       .contains(&name)
         .           }
         .           
14,612,613 ( 0.37%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub enum TokenKind {
         .               /* Expression-operator symbols. */
         .               Eq,
         .               Lt,
         .               Le,
         .               EqEq,
         .               Ne,
         .               Ge,
         .               Gt,
         .               AndAnd,
         .               OrOr,
         .               Not,
         .               Tilde,
    65,730 ( 0.00%)      BinOp(BinOpToken),
        12 ( 0.00%)      BinOpEq(BinOpToken),
         .           
         .               /* Structural symbols */
         .               At,
         .               Dot,
         .               DotDot,
         .               DotDotDot,
         .               DotDotEq,
         .               Comma,
-- line 203 ----------------------------------------
-- line 208 ----------------------------------------
         .               LArrow,
         .               FatArrow,
         .               Pound,
         .               Dollar,
         .               Question,
         .               /// Used by proc macros for representing lifetimes, not generated by lexer right now.
         .               SingleQuote,
         .               /// An opening delimiter (e.g., `{`).
   191,598 ( 0.00%)      OpenDelim(DelimToken),
         .               /// A closing delimiter (e.g., `}`).
   283,830 ( 0.01%)      CloseDelim(DelimToken),
         .           
         .               /* Literals */
    94,379 ( 0.00%)      Literal(Lit),
         .           
         .               /// Identifier token.
         .               /// Do not forget about `NtIdent` when you want to match on identifiers.
         .               /// It's recommended to use `Token::(ident,uninterpolate,uninterpolated_span)` to
         .               /// treat regular and interpolated identifiers in the same way.
    23,390 ( 0.00%)      Ident(Symbol, /* is_raw */ bool),
         .               /// Lifetime identifier token.
         .               /// Do not forget about `NtLifetime` when you want to match on lifetime identifiers.
         .               /// It's recommended to use `Token::(lifetime,uninterpolate,uninterpolated_span)` to
         .               /// treat regular and interpolated lifetime identifiers in the same way.
       156 ( 0.00%)      Lifetime(Symbol),
         .           
         .               Interpolated(Lrc<Nonterminal>),
         .           
         .               /// A doc comment token.
         .               /// `Symbol` is the doc comment's data excluding its "quotes" (`///`, `/**`, etc)
         .               /// similarly to symbols in string literal tokens.
       801 ( 0.00%)      DocComment(CommentKind, ast::AttrStyle, Symbol),
         .           
         .               Eof,
         .           }
         .           
         .           // `TokenKind` is used a lot. Make sure it doesn't unintentionally get bigger.
         .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
         .           rustc_data_structures::static_assert_size!(TokenKind, 16);
         .           
   418,046 ( 0.01%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub struct Token {
     3,608 ( 0.00%)      pub kind: TokenKind,
         .               pub span: Span,
         .           }
         .           
         .           impl TokenKind {
         .               pub fn lit(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> TokenKind {
         .                   Literal(Lit::new(kind, symbol, suffix))
         .               }
         .           
         .               // An approximation to proc-macro-style single-character operators used by rustc parser.
         .               // If the operator token can be broken into two tokens, the first of which is single-character,
         .               // then this function performs that operation, otherwise it returns `None`.
    10,777 ( 0.00%)      pub fn break_two_token_op(&self) -> Option<(TokenKind, TokenKind)> {
    43,117 ( 0.00%)          Some(match *self {
         .                       Le => (Lt, Eq),
         .                       EqEq => (Eq, Eq),
         .                       Ne => (Not, Eq),
         .                       Ge => (Gt, Eq),
         .                       AndAnd => (BinOp(And), BinOp(And)),
         .                       OrOr => (BinOp(Or), BinOp(Or)),
         .                       BinOp(Shl) => (Lt, Lt),
         .                       BinOp(Shr) => (Gt, Gt),
-- line 271 ----------------------------------------
-- line 280 ----------------------------------------
         .                       BinOpEq(Shl) => (Lt, Le),
         .                       BinOpEq(Shr) => (Gt, Ge),
         .                       DotDot => (Dot, Dot),
         .                       DotDotDot => (Dot, DotDot),
         .                       ModSep => (Colon, Colon),
         .                       RArrow => (BinOp(Minus), Gt),
         .                       LArrow => (Lt, BinOp(Minus)),
         .                       FatArrow => (Eq, Gt),
    10,776 ( 0.00%)              _ => return None,
         .                   })
    10,777 ( 0.00%)      }
         .           
         .               /// Returns tokens that are likely to be typed accidentally instead of the current token.
         .               /// Enables better error recovery when the wrong token is found.
         .               pub fn similar_tokens(&self) -> Option<Vec<TokenKind>> {
         .                   match *self {
         .                       Comma => Some(vec![Dot, Lt, Semi]),
         .                       Semi => Some(vec![Colon, Comma]),
         .                       FatArrow => Some(vec![Eq, RArrow]),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               pub fn should_end_const_arg(&self) -> bool {
       166 ( 0.00%)          matches!(self, Gt | Ge | BinOp(Shr) | BinOpEq(Shr))
        40 ( 0.00%)      }
         .           }
         .           
         .           impl Token {
   170,266 ( 0.00%)      pub fn new(kind: TokenKind, span: Span) -> Self {
   511,941 ( 0.01%)          Token { kind, span }
   170,266 ( 0.00%)      }
         .           
         .               /// Some token that will be thrown away later.
       289 ( 0.00%)      pub fn dummy() -> Self {
         .                   Token::new(TokenKind::Question, DUMMY_SP)
       289 ( 0.00%)      }
         .           
         .               /// Recovers a `Token` from an `Ident`. This creates a raw identifier if necessary.
         .               pub fn from_ast_ident(ident: Ident) -> Self {
       608 ( 0.00%)          Token::new(Ident(ident.name, ident.is_raw_guess()), ident.span)
         .               }
         .           
         .               /// Return this token by value and leave a dummy token in its place.
   106,107 ( 0.00%)      pub fn take(&mut self) -> Self {
         .                   mem::replace(self, Token::dummy())
   106,107 ( 0.00%)      }
         .           
         .               /// For interpolated tokens, returns a span of the fragment to which the interpolated
         .               /// token refers. For all other tokens this is just a regular span.
         .               /// It is particularly important to use this for identifiers and lifetimes
         .               /// for which spans affect name resolution and edition checks.
         .               /// Note that keywords are also identifiers, so they should use this
         .               /// if they keep spans or perform edition checks.
         .               pub fn uninterpolated_span(&self) -> Span {
       650 ( 0.00%)          match &self.kind {
         .                       Interpolated(nt) => nt.span(),
       325 ( 0.00%)              _ => self.span,
         .                   }
       325 ( 0.00%)      }
         .           
         .               pub fn is_op(&self) -> bool {
   318,321 ( 0.01%)          !matches!(
   106,107 ( 0.00%)              self.kind,
         .                       OpenDelim(..)
         .                           | CloseDelim(..)
         .                           | Literal(..)
         .                           | DocComment(..)
         .                           | Ident(..)
         .                           | Lifetime(..)
         .                           | Interpolated(..)
         .                           | Eof
         .                   )
   106,107 ( 0.00%)      }
         .           
         .               pub fn is_like_plus(&self) -> bool {
     2,289 ( 0.00%)          matches!(self.kind, BinOp(Plus) | BinOpEq(Plus))
       457 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token can appear at the start of an expression.
        46 ( 0.00%)      pub fn can_begin_expr(&self) -> bool {
       230 ( 0.00%)          match self.uninterpolate().kind {
       360 ( 0.00%)              Ident(name, is_raw)              =>
       120 ( 0.00%)                  ident_can_begin_expr(name, self.span, is_raw), // value name or keyword
         .                       OpenDelim(..)                     | // tuple, array or block
         .                       Literal(..)                       | // literal
         .                       Not                               | // operator not
         .                       BinOp(Minus)                      | // unary minus
         .                       BinOp(Star)                       | // dereference
         .                       BinOp(Or) | OrOr                  | // closure
         .                       BinOp(And)                        | // reference
         .                       AndAnd                            | // double reference
-- line 371 ----------------------------------------
-- line 376 ----------------------------------------
         .                       Lifetime(..)                      | // labeled loop
         .                       Pound                             => true, // expression attributes
         .                       Interpolated(ref nt) => matches!(**nt, NtLiteral(..) |
         .                           NtExpr(..)    |
         .                           NtBlock(..)   |
         .                           NtPath(..)),
         .                       _ => false,
         .                   }
        92 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token can appear at the start of a type.
       232 ( 0.00%)      pub fn can_begin_type(&self) -> bool {
       481 ( 0.00%)          match self.uninterpolate().kind {
       261 ( 0.00%)              Ident(name, is_raw)        =>
        29 ( 0.00%)                  ident_can_begin_type(name, self.span, is_raw), // type name or keyword
         .                       OpenDelim(Paren)            | // tuple
         .                       OpenDelim(Bracket)          | // array
         .                       Not                         | // never
         .                       BinOp(Star)                 | // raw pointer
         .                       BinOp(And)                  | // reference
         .                       AndAnd                      | // double reference
         .                       Question                    | // maybe bound in trait object
         .                       Lifetime(..)                | // lifetime bound in trait object
         .                       Lt | BinOp(Shl)             | // associated path
         .                       ModSep                      => true, // global path
         .                       Interpolated(ref nt) => matches!(**nt, NtTy(..) | NtPath(..)),
         .                       _ => false,
         .                   }
       348 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token can appear at the start of a const param.
         .               pub fn can_begin_const_arg(&self) -> bool {
       255 ( 0.00%)          match self.kind {
         .                       OpenDelim(Brace) => true,
         .                       Interpolated(ref nt) => matches!(**nt, NtExpr(..) | NtBlock(..) | NtLiteral(..)),
        51 ( 0.00%)              _ => self.can_begin_literal_maybe_minus(),
         .                   }
         .               }
         .           
         .               /// Returns `true` if the token can appear at the start of a generic bound.
         .               pub fn can_begin_bound(&self) -> bool {
         .                   self.is_path_start()
         .                       || self.is_lifetime()
         .                       || self.is_keyword(kw::For)
-- line 419 ----------------------------------------
-- line 427 ----------------------------------------
         .               }
         .           
         .               /// Returns `true` if the token is any literal, a minus (which can prefix a literal,
         .               /// for example a '-42', or one of the boolean idents).
         .               ///
         .               /// In other words, would this token be a valid start of `parse_literal_maybe_minus`?
         .               ///
         .               /// Keep this in sync with and `Lit::from_token`, excluding unary negation.
        51 ( 0.00%)      pub fn can_begin_literal_maybe_minus(&self) -> bool {
       460 ( 0.00%)          match self.uninterpolate().kind {
         .                       Literal(..) | BinOp(Minus) => true,
       116 ( 0.00%)              Ident(name, false) if name.is_bool_lit() => true,
         .                       Interpolated(ref nt) => match &**nt {
         .                           NtLiteral(_) => true,
         .                           NtExpr(e) => match &e.kind {
         .                               ast::ExprKind::Lit(_) => true,
         .                               ast::ExprKind::Unary(ast::UnOp::Neg, e) => {
         .                                   matches!(&e.kind, ast::ExprKind::Lit(_))
         .                               }
         .                               _ => false,
         .                           },
         .                           _ => false,
         .                       },
         .                       _ => false,
         .                   }
       102 ( 0.00%)      }
         .           
         .               // A convenience function for matching on identifiers during parsing.
         .               // Turns interpolated identifier (`$i: ident`) or lifetime (`$l: lifetime`) token
         .               // into the regular identifier or lifetime token it refers to,
         .               // otherwise returns the original token.
    52,872 ( 0.00%)      pub fn uninterpolate(&self) -> Cow<'_, Token> {
   774,892 ( 0.02%)          match &self.kind {
         .                       Interpolated(nt) => match **nt {
         .                           NtIdent(ident, is_raw) => {
         .                               Cow::Owned(Token::new(Ident(ident.name, is_raw), ident.span))
         .                           }
         .                           NtLifetime(ident) => Cow::Owned(Token::new(Lifetime(ident.name), ident.span)),
         .                           _ => Cow::Borrowed(self),
         .                       },
         .                       _ => Cow::Borrowed(self),
         .                   }
    52,872 ( 0.00%)      }
         .           
         .               /// Returns an identifier if this token is an identifier.
   199,941 ( 0.01%)      pub fn ident(&self) -> Option<(Ident, /* is_raw */ bool)> {
         .                   let token = self.uninterpolate();
   547,596 ( 0.01%)          match token.kind {
 1,185,285 ( 0.03%)              Ident(name, is_raw) => Some((Ident::new(name, token.span), is_raw)),
         .                       _ => None,
         .                   }
 1,312,751 ( 0.03%)      }
         .           
         .               /// Returns a lifetime identifier if this token is a lifetime.
       193 ( 0.00%)      pub fn lifetime(&self) -> Option<Ident> {
         .                   let token = self.uninterpolate();
       940 ( 0.00%)          match token.kind {
       560 ( 0.00%)              Lifetime(name) => Some(Ident::new(name, token.span)),
         .                       _ => None,
         .                   }
     1,351 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is an identifier.
         .               pub fn is_ident(&self) -> bool {
         .                   self.ident().is_some()
    10,464 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is a lifetime.
       277 ( 0.00%)      pub fn is_lifetime(&self) -> bool {
         .                   self.lifetime().is_some()
       554 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is an identifier whose name is the given
         .               /// string slice.
    10,559 ( 0.00%)      pub fn is_ident_named(&self, name: Symbol) -> bool {
         .                   self.ident().map_or(false, |(ident, _)| ident.name == name)
    21,118 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is an interpolated path.
         .               fn is_path(&self) -> bool {
    44,560 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
         .                       if let NtPath(..) = **nt {
         .                           return true;
         .                       }
         .                   }
         .                   false
         .               }
         .           
         .               /// Would `maybe_whole_expr` in `parser.rs` return `Ok(..)`?
-- line 515 ----------------------------------------
-- line 522 ----------------------------------------
         .                       }
         .                   }
         .           
         .                   false
         .               }
         .           
         .               // Is the token an interpolated block (`$b:block`)?
         .               pub fn is_whole_block(&self) -> bool {
        30 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
         .                       if let NtBlock(..) = **nt {
         .                           return true;
         .                       }
         .                   }
         .                   false
        15 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is either the `mut` or `const` keyword.
         .               pub fn is_mutability(&self) -> bool {
         .                   self.is_keyword(kw::Mut) || self.is_keyword(kw::Const)
         .               }
         .           
       282 ( 0.00%)      pub fn is_qpath_start(&self) -> bool {
    22,562 ( 0.00%)          self == &Lt || self == &BinOp(Shl)
         .               }
         .           
    44,560 ( 0.00%)      pub fn is_path_start(&self) -> bool {
    66,802 ( 0.00%)          self == &ModSep
         .                       || self.is_qpath_start()
         .                       || self.is_path()
         .                       || self.is_path_segment_keyword()
    11,005 ( 0.00%)              || self.is_ident() && !self.is_reserved_ident()
    55,700 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is a given keyword, `kw`.
    24,554 ( 0.00%)      pub fn is_keyword(&self, kw: Symbol) -> bool {
         .                   self.is_non_raw_ident_where(|id| id.name == kw)
    49,108 ( 0.00%)      }
         .           
       189 ( 0.00%)      pub fn is_path_segment_keyword(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_path_segment_keyword)
         .               }
         .           
         .               // Returns true for reserved identifiers used internally for elided lifetimes,
         .               // unnamed method parameters, crate root module, error recovery etc.
        81 ( 0.00%)      pub fn is_special_ident(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_special)
         .               }
         .           
         .               /// Returns `true` if the token is a keyword used in the language.
        81 ( 0.00%)      pub fn is_used_keyword(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_used_keyword)
         .               }
         .           
         .               /// Returns `true` if the token is a keyword reserved for possible future use.
        81 ( 0.00%)      pub fn is_unused_keyword(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_unused_keyword)
         .               }
         .           
         .               /// Returns `true` if the token is either a special identifier or a keyword.
         .               pub fn is_reserved_ident(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_reserved)
         .               }
         .           
         .               /// Returns `true` if the token is the identifier `true` or `false`.
       197 ( 0.00%)      pub fn is_bool_lit(&self) -> bool {
       394 ( 0.00%)          self.is_non_raw_ident_where(|id| id.name.is_bool_lit())
         .               }
         .           
         .               pub fn is_numeric_lit(&self) -> bool {
         .                   matches!(
         .                       self.kind,
         .                       Literal(Lit { kind: LitKind::Integer, .. }) | Literal(Lit { kind: LitKind::Float, .. })
         .                   )
         .               }
         .           
         .               /// Returns `true` if the token is a non-raw identifier for which `pred` holds.
        12 ( 0.00%)      pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(Ident) -> bool) -> bool {
   924,753 ( 0.02%)          match self.ident() {
    10,986 ( 0.00%)              Some((id, false)) => pred(id),
         .                       _ => false,
         .                   }
        15 ( 0.00%)      }
         .           
   413,360 ( 0.01%)      pub fn glue(&self, joint: &Token) -> Option<Token> {
   206,680 ( 0.01%)          let kind = match self.kind {
       236 ( 0.00%)              Eq => match joint.kind {
         .                           Eq => EqEq,
         .                           Gt => FatArrow,
         .                           _ => return None,
         .                       },
        68 ( 0.00%)              Lt => match joint.kind {
         .                           Eq => Le,
         .                           Lt => BinOp(Shl),
         .                           Le => BinOpEq(Shl),
         .                           BinOp(Minus) => LArrow,
         .                           _ => return None,
         .                       },
        41 ( 0.00%)              Gt => match joint.kind {
         .                           Eq => Ge,
         .                           Gt => BinOp(Shr),
         .                           Ge => BinOpEq(Shr),
         .                           _ => return None,
         .                       },
         2 ( 0.00%)              Not => match joint.kind {
         .                           Eq => Ne,
         .                           _ => return None,
         .                       },
       817 ( 0.00%)              BinOp(op) => match joint.kind {
         .                           Eq => BinOpEq(op),
        25 ( 0.00%)                  BinOp(And) if op == And => AndAnd,
        12 ( 0.00%)                  BinOp(Or) if op == Or => OrOr,
        56 ( 0.00%)                  Gt if op == Minus => RArrow,
         .                           _ => return None,
         .                       },
        60 ( 0.00%)              Dot => match joint.kind {
         .                           Dot => DotDot,
         .                           DotDot => DotDotDot,
         .                           _ => return None,
         .                       },
         .                       DotDot => match joint.kind {
         .                           Dot => DotDotDot,
         .                           Eq => DotDotEq,
         .                           _ => return None,
         .                       },
    20,064 ( 0.00%)              Colon => match joint.kind {
         .                           Colon => ModSep,
         .                           _ => return None,
         .                       },
         .                       SingleQuote => match joint.kind {
         .                           Ident(name, false) => Lifetime(Symbol::intern(&format!("'{}", name))),
         .                           _ => return None,
         .                       },
         .           
         .                       Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot
         .                       | DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar
         .                       | Question | OpenDelim(..) | CloseDelim(..) | Literal(..) | Ident(..)
         .                       | Lifetime(..) | Interpolated(..) | DocComment(..) | Eof => return None,
         .                   };
         .           
   132,860 ( 0.00%)          Some(Token::new(kind, self.span.to(joint.span)))
   372,024 ( 0.01%)      }
         .           }
         .           
         .           impl PartialEq<TokenKind> for Token {
         .               fn eq(&self, rhs: &TokenKind) -> bool {
   803,282 ( 0.02%)          self.kind == *rhs
         .               }
         .           }
         .           
         .           #[derive(Clone, Encodable, Decodable)]
         .           /// For interpolation during macro expansion.
         .           pub enum Nonterminal {
         .               NtItem(P<ast::Item>),
         .               NtBlock(P<ast::Block>),
-- line 675 ----------------------------------------
-- line 711 ----------------------------------------
         .               Path,
         .               Vis,
         .               TT,
         .           }
         .           
         .           impl NonterminalKind {
         .               /// The `edition` closure is used to get the edition for the given symbol. Doing
         .               /// `span.edition()` is expensive, so we do it lazily.
        52 ( 0.00%)      pub fn from_symbol(
         .                   symbol: Symbol,
         .                   edition: impl FnOnce() -> Edition,
         .               ) -> Option<NonterminalKind> {
       108 ( 0.00%)          Some(match symbol {
         .                       sym::item => NonterminalKind::Item,
         .                       sym::block => NonterminalKind::Block,
         .                       sym::stmt => NonterminalKind::Stmt,
         .                       sym::pat => match edition() {
         .                           Edition::Edition2015 | Edition::Edition2018 => {
         .                               NonterminalKind::PatParam { inferred: true }
         .                           }
         .                           Edition::Edition2021 => NonterminalKind::PatWithOr,
-- line 731 ----------------------------------------
-- line 737 ----------------------------------------
         .                       sym::lifetime => NonterminalKind::Lifetime,
         .                       sym::literal => NonterminalKind::Literal,
         .                       sym::meta => NonterminalKind::Meta,
         .                       sym::path => NonterminalKind::Path,
         .                       sym::vis => NonterminalKind::Vis,
         .                       sym::tt => NonterminalKind::TT,
         .                       _ => return None,
         .                   })
        52 ( 0.00%)      }
         .               fn symbol(self) -> Symbol {
         .                   match self {
         .                       NonterminalKind::Item => sym::item,
         .                       NonterminalKind::Block => sym::block,
         .                       NonterminalKind::Stmt => sym::stmt,
         .                       NonterminalKind::PatParam { inferred: false } => sym::pat_param,
         .                       NonterminalKind::PatParam { inferred: true } | NonterminalKind::PatWithOr => sym::pat,
         .                       NonterminalKind::Expr => sym::expr,
-- line 753 ----------------------------------------

 5,103,318 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/build/expr/as_operand.rs
--------------------------------------------------------------------------------
Ir                 

-- line 15 ----------------------------------------
        .               /// please do *not* return it from functions to avoid bad
        .               /// miscompiles.
        .               crate fn as_local_operand(
        .                   &mut self,
        .                   block: BasicBlock,
        .                   expr: &Expr<'tcx>,
        .               ) -> BlockAnd<Operand<'tcx>> {
        .                   let local_scope = self.local_scope();
   83,496 ( 0.00%)          self.as_operand(block, Some(local_scope), expr, None)
        .               }
        .           
        .               /// Returns an operand suitable for use until the end of the current scope expression and
        .               /// suitable also to be passed as function arguments.
        .               ///
        .               /// The operand returned from this function will *not be valid* after an ExprKind::Scope is
        .               /// passed, so please do *not* return it from functions to avoid bad miscompiles.  Returns an
        .               /// operand suitable for use as a call argument. This is almost always equivalent to
-- line 31 ----------------------------------------
-- line 72 ----------------------------------------
        .               ///
        .               /// See #68034 for more details.
        .               crate fn as_local_call_operand(
        .                   &mut self,
        .                   block: BasicBlock,
        .                   expr: &Expr<'tcx>,
        .               ) -> BlockAnd<Operand<'tcx>> {
        .                   let local_scope = self.local_scope();
   52,715 ( 0.00%)          self.as_call_operand(block, Some(local_scope), expr)
        .               }
        .           
        .               /// Compile `expr` into a value that can be used as an operand.
        .               /// If `expr` is a place like `x`, this will introduce a
        .               /// temporary `tmp = x`, so that we capture the value of `x` at
        .               /// this time.
        .               ///
        .               /// If we end up needing to create a temporary, then we will use
-- line 88 ----------------------------------------
-- line 89 ----------------------------------------
        .               /// `local_info` as its `LocalInfo`, unless `as_temporary`
        .               /// has already assigned it a non-`None` `LocalInfo`.
        .               /// Normally, you should use `None` for `local_info`
        .               ///
        .               /// The operand is known to be live until the end of `scope`.
        .               ///
        .               /// Like `as_local_call_operand`, except that the argument will
        .               /// not be valid once `scope` ends.
1,150,010 ( 0.03%)      crate fn as_operand(
        .                   &mut self,
        .                   mut block: BasicBlock,
        .                   scope: Option<region::Scope>,
        .                   expr: &Expr<'tcx>,
        .                   local_info: Option<Box<LocalInfo<'tcx>>>,
        .               ) -> BlockAnd<Operand<'tcx>> {
        .                   debug!("as_operand(block={:?}, expr={:?} local_info={:?})", block, expr, local_info);
        .                   let this = self;
        .           
  709,122 ( 0.02%)          if let ExprKind::Scope { region_scope, lint_level, value } = expr.kind {
  104,034 ( 0.00%)              let source_info = this.source_info(expr.span);
        .                       let region_scope = (region_scope, source_info);
        .                       return this.in_scope(region_scope, lint_level, |this| {
  676,221 ( 0.02%)                  this.as_operand(block, scope, &this.thir[value], local_info)
        .                       });
        .                   }
        .           
        .                   let category = Category::of(&expr.kind).unwrap();
        .                   debug!("as_operand: category={:?} for={:?}", category, expr.kind);
        .                   match category {
        .                       Category::Constant => {
  123,759 ( 0.00%)                  let constant = this.as_constant(expr);
        .                           block.and(Operand::Constant(Box::new(constant)))
        .                       }
        .                       Category::Place | Category::Rvalue(..) => {
        .                           let operand = unpack!(block = this.as_temp(block, scope, expr, Mutability::Mut));
   43,462 ( 0.00%)                  if this.local_decls[operand].local_info.is_none() {
   43,462 ( 0.00%)                      this.local_decls[operand].local_info = local_info;
        .                           }
   21,731 ( 0.00%)                  block.and(Operand::Move(Place::from(operand)))
        .                       }
        .                   }
1,056,740 ( 0.03%)      }
        .           
  273,949 ( 0.01%)      crate fn as_call_operand(
        .                   &mut self,
        .                   mut block: BasicBlock,
        .                   scope: Option<region::Scope>,
        .                   expr: &Expr<'tcx>,
        .               ) -> BlockAnd<Operand<'tcx>> {
        .                   debug!("as_call_operand(block={:?}, expr={:?})", block, expr);
        .                   let this = self;
        .           
  136,929 ( 0.00%)          if let ExprKind::Scope { region_scope, lint_level, value } = expr.kind {
   21,060 ( 0.00%)              let source_info = this.source_info(expr.span);
        .                       let region_scope = (region_scope, source_info);
        .                       return this.in_scope(region_scope, lint_level, |this| {
  115,830 ( 0.00%)                  this.as_call_operand(block, scope, &this.thir[value])
        .                       });
        .                   }
        .           
   10,543 ( 0.00%)          let tcx = this.tcx;
        .           
   42,172 ( 0.00%)          if tcx.features().unsized_fn_params {
        .                       let ty = expr.ty;
        .                       let span = expr.span;
        .                       let param_env = this.param_env;
        .           
        .                       if !ty.is_sized(tcx.at(span), param_env) {
        .                           // !sized means !copy, so this is an unsized move
        .                           assert!(!ty.is_copy_modulo_regions(tcx.at(span), param_env));
        .           
-- line 159 ----------------------------------------
-- line 171 ----------------------------------------
        .                                   projection: tcx.intern_place_elems(&[PlaceElem::Deref]),
        .                               };
        .           
        .                               return block.and(Operand::Move(place));
        .                           }
        .                       }
        .                   }
        .           
   94,887 ( 0.00%)          this.as_operand(block, scope, expr, None)
  168,584 ( 0.00%)      }
        .           }

  709,244 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/build/expr/as_operand.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/../../stdarch/crates/core_arch/src/x86/sse2.rs
--------------------------------------------------------------------------------
Ir                  

-- line 94 ----------------------------------------
         .           /// Adds packed 32-bit integers in `a` and `b`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_add_epi32)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(paddd))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_add_epi32(a: __m128i, b: __m128i) -> __m128i {
        17 ( 0.00%)      transmute(simd_add(a.as_i32x4(), b.as_i32x4()))
         .           }
         .           
         .           /// Adds packed 64-bit integers in `a` and `b`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_add_epi64)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(paddq))]
-- line 110 ----------------------------------------
-- line 790 ----------------------------------------
         .           /// Compares packed 8-bit integers in `a` and `b` for equality.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmpeq_epi8)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpeqb))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_cmpeq_epi8(a: __m128i, b: __m128i) -> __m128i {
   583,555 ( 0.01%)      transmute::<i8x16, _>(simd_eq(a.as_i8x16(), b.as_i8x16()))
         .           }
         .           
         .           /// Compares packed 16-bit integers in `a` and `b` for equality.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmpeq_epi16)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpeqw))]
-- line 806 ----------------------------------------
-- line 856 ----------------------------------------
         .           /// Compares packed 8-bit integers in `a` and `b` for less-than.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmplt_epi8)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpgtb))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_cmplt_epi8(a: __m128i, b: __m128i) -> __m128i {
    59,648 ( 0.00%)      transmute::<i8x16, _>(simd_lt(a.as_i8x16(), b.as_i8x16()))
         .           }
         .           
         .           /// Compares packed 16-bit integers in `a` and `b` for less-than.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmplt_epi16)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpgtw))]
-- line 872 ----------------------------------------
-- line 1174 ----------------------------------------
         .           /// `mem_addr` must be aligned on a 16-byte boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_load_si128)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(movaps))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_load_si128(mem_addr: *const __m128i) -> __m128i {
   247,313 ( 0.01%)      *mem_addr
         .           }
         .           
         .           /// Loads 128-bits of integer data from memory into a new vector.
         .           ///
         .           /// `mem_addr` does not need to be aligned on any particular boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_loadu_si128)
         .           #[inline]
-- line 1190 ----------------------------------------
-- line 1237 ----------------------------------------
         .           /// `mem_addr` does not need to be aligned on any particular boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_storeu_si128)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(movups))] // FIXME movdqu expected
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_storeu_si128(mem_addr: *mut __m128i, a: __m128i) {
        16 ( 0.00%)      storeudq(mem_addr as *mut i8, a);
         .           }
         .           
         .           /// Stores the lower 64-bit integer `a` to a memory location.
         .           ///
         .           /// `mem_addr` does not need to be aligned on any particular boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_storel_epi64)
         .           #[inline]
-- line 1253 ----------------------------------------
-- line 1373 ----------------------------------------
         .           /// Returns a mask of the most significant bit of each element in `a`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_movemask_epi8)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pmovmskb))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_movemask_epi8(a: __m128i) -> i32 {
35,885,109 ( 0.91%)      pmovmskb(a.as_i8x16())
         .           }
         .           
         .           /// Shuffles 32-bit integers in `a` using the control in `IMM8`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_shuffle_epi32)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pshufd, IMM8 = 9))]
-- line 1389 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_pretty/src/pp.rs
--------------------------------------------------------------------------------
Ir                 

-- line 166 ----------------------------------------
        .               String(Cow<'static, str>),
        .               Break(BreakToken),
        .               Begin(BeginToken),
        .               End,
        .           }
        .           
        .           impl Token {
        .               pub fn is_hardbreak_tok(&self) -> bool {
   61,338 ( 0.00%)          matches!(self, Token::Break(BreakToken { offset: 0, blank_space: SIZE_INFINITY }))
        .               }
        .           }
        .           
        .           #[derive(Copy, Clone)]
        .           enum PrintFrame {
        .               Fits,
        .               Broken { offset: isize, breaks: Breaks },
        .           }
-- line 182 ----------------------------------------
-- line 213 ----------------------------------------
        .           
        .           #[derive(Clone)]
        .           struct BufEntry {
        .               token: Token,
        .               size: isize,
        .           }
        .           
        .           impl Printer {
      188 ( 0.00%)      pub fn new() -> Self {
        .                   let linewidth = 78;
    3,304 ( 0.00%)          Printer {
        .                       out: String::new(),
        .                       margin: linewidth as isize,
        .                       space: linewidth as isize,
        .                       buf: RingBuffer::new(),
        .                       left_total: 0,
        .                       right_total: 0,
        .                       scan_stack: VecDeque::new(),
        .                       print_stack: Vec::new(),
        .                       pending_indentation: 0,
        .                       last_printed: None,
        .                   }
      235 ( 0.00%)      }
        .           
        .               pub fn last_token(&self) -> Option<&Token> {
        .                   self.last_token_still_buffered().or_else(|| self.last_printed.as_ref())
        .               }
        .           
        .               pub fn last_token_still_buffered(&self) -> Option<&Token> {
        .                   self.buf.last().map(|last| &last.token)
        .               }
        .           
        .               /// Be very careful with this!
        .               pub fn replace_last_token_still_buffered(&mut self, token: Token) {
        .                   self.buf.last_mut().unwrap().token = token;
        .               }
        .           
        .               fn scan_eof(&mut self) {
      146 ( 0.00%)          if !self.scan_stack.is_empty() {
      102 ( 0.00%)              self.check_stack(0);
      102 ( 0.00%)              self.advance_left();
        .                   }
        .               }
        .           
        .               fn scan_begin(&mut self, token: BeginToken) {
  101,968 ( 0.00%)          if self.scan_stack.is_empty() {
      102 ( 0.00%)              self.left_total = 1;
        .                       self.right_total = 1;
        .                       self.buf.clear();
        .                   }
  407,872 ( 0.01%)          let right = self.buf.push(BufEntry { token: Token::Begin(token), size: -self.right_total });
        .                   self.scan_stack.push_back(right);
        .               }
        .           
        .               fn scan_end(&mut self) {
  101,968 ( 0.00%)          if self.scan_stack.is_empty() {
        .                       self.print_end();
        .                   } else {
        .                       let right = self.buf.push(BufEntry { token: Token::End, size: -1 });
        .                       self.scan_stack.push_back(right);
        .                   }
        .               }
        .           
        .               fn scan_break(&mut self, token: BreakToken) {
   30,673 ( 0.00%)          if self.scan_stack.is_empty() {
        2 ( 0.00%)              self.left_total = 1;
        .                       self.right_total = 1;
        .                       self.buf.clear();
        .                   } else {
   61,344 ( 0.00%)              self.check_stack(0);
        .                   }
  122,692 ( 0.00%)          let right = self.buf.push(BufEntry { token: Token::Break(token), size: -self.right_total });
        .                   self.scan_stack.push_back(right);
   92,019 ( 0.00%)          self.right_total += token.blank_space;
        .               }
        .           
1,194,633 ( 0.03%)      fn scan_string(&mut self, string: Cow<'static, str>) {
  132,737 ( 0.00%)          if self.scan_stack.is_empty() {
        .                       self.print_string(&string);
        .                   } else {
        .                       let len = string.len() as isize;
  132,642 ( 0.00%)              self.buf.push(BufEntry { token: Token::String(string), size: len });
  397,926 ( 0.01%)              self.right_total += len;
        .                       self.check_stream();
        .                   }
1,061,136 ( 0.03%)      }
        .           
        .               fn check_stream(&mut self) {
  585,008 ( 0.01%)          while self.right_total - self.left_total > self.space {
   32,667 ( 0.00%)              if *self.scan_stack.front().unwrap() == self.buf.index_of_first() {
        .                           self.scan_stack.pop_front().unwrap();
    5,673 ( 0.00%)                  self.buf.first_mut().unwrap().size = SIZE_INFINITY;
        .                       }
   21,778 ( 0.00%)              self.advance_left();
   10,889 ( 0.00%)              if self.buf.is_empty() {
        .                           break;
        .                       }
        .                   }
        .               }
        .           
  553,231 ( 0.01%)      fn advance_left(&mut self) {
  756,278 ( 0.02%)          while self.buf.first().unwrap().size >= 0 {
1,101,753 ( 0.03%)              let left = self.buf.pop_first().unwrap();
        .           
        .                       match &left.token {
        .                           Token::String(string) => {
  397,926 ( 0.01%)                      self.left_total += string.len() as isize;
        .                               self.print_string(string);
        .                           }
        .                           Token::Break(token) => {
   92,019 ( 0.00%)                      self.left_total += token.blank_space;
        .                               self.print_break(*token, left.size);
        .                           }
      921 ( 0.00%)                  Token::Begin(token) => self.print_begin(*token, left.size),
        .                           Token::End => self.print_end(),
        .                       }
        .           
2,938,008 ( 0.07%)              self.last_printed = Some(left.token);
        .           
  367,251 ( 0.01%)              if self.buf.is_empty() {
        .                           break;
        .                       }
        .                   }
   87,520 ( 0.00%)      }
        .           
  276,507 ( 0.01%)      fn check_stack(&mut self, mut depth: usize) {
  484,763 ( 0.01%)          while let Some(&index) = self.scan_stack.back() {
        .                       let mut entry = &mut self.buf[index];
  973,785 ( 0.02%)              match entry.token {
        .                           Token::Begin(_) => {
  224,940 ( 0.01%)                      if depth == 0 {
        .                                   break;
        .                               }
        .                               self.scan_stack.pop_back().unwrap();
  304,983 ( 0.01%)                      entry.size += self.right_total;
  101,661 ( 0.00%)                      depth -= 1;
        .                           }
        .                           Token::End => {
        .                               // paper says + not =, but that makes no sense.
        .                               self.scan_stack.pop_back().unwrap();
  101,965 ( 0.00%)                      entry.size = 1;
  203,930 ( 0.01%)                      depth += 1;
        .                           }
        .                           _ => {
        .                               self.scan_stack.pop_back().unwrap();
   75,930 ( 0.00%)                      entry.size += self.right_total;
   65,261 ( 0.00%)                      if depth == 0 {
        .                                   break;
        .                               }
        .                           }
        .                       }
        .                   }
  245,784 ( 0.01%)      }
        .           
        .               fn get_top(&self) -> PrintFrame {
   92,019 ( 0.00%)          *self
        .                       .print_stack
        .                       .last()
        .                       .unwrap_or(&PrintFrame::Broken { offset: 0, breaks: Breaks::Inconsistent })
        .               }
        .           
        .               fn print_begin(&mut self, token: BeginToken, size: isize) {
  305,904 ( 0.01%)          if size > self.space {
    1,535 ( 0.00%)              let col = self.margin - self.space + token.offset;
        .                       self.print_stack.push(PrintFrame::Broken { offset: col, breaks: token.breaks });
        .                   } else {
        .                       self.print_stack.push(PrintFrame::Fits);
        .                   }
        .               }
        .           
        .               fn print_end(&mut self) {
        .                   self.print_stack.pop().unwrap();
        .               }
        .           
        .               fn print_break(&mut self, token: BreakToken, size: isize) {
        .                   let break_offset =
  100,326 ( 0.00%)              match self.get_top() {
        .                           PrintFrame::Fits => None,
        .                           PrintFrame::Broken { offset, breaks: Breaks::Consistent } => Some(offset),
        .                           PrintFrame::Broken { offset, breaks: Breaks::Inconsistent } => {
        .                               if size > self.space { Some(offset) } else { None }
        .                           }
        .                       };
        .                   if let Some(offset) = break_offset {
        .                       self.out.push('\n');
   16,089 ( 0.00%)              self.pending_indentation = offset + token.offset;
   21,452 ( 0.00%)              self.space = self.margin - (offset + token.offset);
        .                   } else {
   75,930 ( 0.00%)              self.pending_indentation += token.blank_space;
  101,240 ( 0.00%)              self.space -= token.blank_space;
        .                   }
        .               }
        .           
        .               fn print_string(&mut self, string: &str) {
        .                   // Write the pending indent. A more concise way of doing this would be:
        .                   //
        .                   //   write!(self.out, "{: >n$}", "", n = self.pending_indentation as usize)?;
        .                   //
        .                   // But that is significantly slower. This code is sufficiently hot, and indents can get
        .                   // sufficiently large, that the difference is significant on some workloads.
  132,737 ( 0.00%)          self.out.reserve(self.pending_indentation as usize);
        8 ( 0.00%)          self.out.extend(iter::repeat(' ').take(self.pending_indentation as usize));
  132,737 ( 0.00%)          self.pending_indentation = 0;
        .           
        .                   self.out.push_str(string);
  663,590 ( 0.02%)          self.space -= string.len() as isize;
        .               }
        .           
        .               // Convenience functions to talk to the printer.
        .           
        .               /// "raw box"
  165,880 ( 0.00%)      pub fn rbox(&mut self, indent: usize, breaks: Breaks) {
        .                   self.scan_begin(BeginToken { offset: indent as isize, breaks })
  124,410 ( 0.00%)      }
        .           
        .               /// Inconsistent breaking box
  487,398 ( 0.01%)      pub fn ibox(&mut self, indent: usize) {
        .                   self.rbox(indent, Breaks::Inconsistent)
  406,165 ( 0.01%)      }
        .           
        .               /// Consistent breaking box
        .               pub fn cbox(&mut self, indent: usize) {
        .                   self.rbox(indent, Breaks::Consistent)
        .               }
        .           
  245,384 ( 0.01%)      pub fn break_offset(&mut self, n: usize, off: isize) {
        .                   self.scan_break(BreakToken { offset: off, blank_space: n as isize })
  184,038 ( 0.00%)      }
        .           
  407,872 ( 0.01%)      pub fn end(&mut self) {
        .                   self.scan_end()
  407,872 ( 0.01%)      }
        .           
      730 ( 0.00%)      pub fn eof(mut self) -> String {
        .                   self.scan_eof();
      584 ( 0.00%)          self.out
      730 ( 0.00%)      }
        .           
        .               pub fn word<S: Into<Cow<'static, str>>>(&mut self, wrd: S) {
        .                   let string = wrd.into();
  947,332 ( 0.02%)          self.scan_string(string)
        .               }
        .           
        .               fn spaces(&mut self, n: usize) {
  122,692 ( 0.00%)          self.break_offset(n, 0)
        .               }
        .           
        .               crate fn zerobreak(&mut self) {
        .                   self.spaces(0)
        .               }
        .           
        .               pub fn space(&mut self) {
        .                   self.spaces(1)
        .               }
        .           
        .               pub fn hardbreak(&mut self) {
        .                   self.spaces(SIZE_INFINITY as usize)
        .               }
        .           
        .               pub fn is_beginning_of_line(&self) -> bool {
   61,338 ( 0.00%)          match self.last_token() {
        .                       Some(last_token) => last_token.is_hardbreak_tok(),
        .                       None => true,
        .                   }
        .               }
        .           
        .               pub fn hardbreak_tok_offset(off: isize) -> Token {
        .                   Token::Break(BreakToken { offset: off, blank_space: SIZE_INFINITY })
        .               }
-- line 481 ----------------------------------------

2,081,165 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_pretty/src/pp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 180 ----------------------------------------
         .           /// assert_eq!(v, &[0.into()]);
         .           ///
         .           /// // Ensure that the last item was dropped.
         .           /// assert!(weak.upgrade().is_none());
         .           /// ```
         .           #[stable(feature = "drop_in_place", since = "1.8.0")]
         .           #[lang = "drop_in_place"]
         .           #[allow(unconditional_recursion)]
42,283,433 ( 1.07%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
         .               // Code here does not matter - this is replaced by the
         .               // real drop glue by the compiler.
         .           
         .               // SAFETY: see comment above
         .               unsafe { drop_in_place(to_drop) }
         .           }
         .           
         .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 366 ----------------------------------------
         .               let mut tmp = MaybeUninit::<T>::uninit();
         .           
         .               // Perform the swap
         .               // SAFETY: the caller must guarantee that `x` and `y` are
         .               // valid for writes and properly aligned. `tmp` cannot be
         .               // overlapping either `x` or `y` because `tmp` was just allocated
         .               // on the stack as a separate allocated object.
         .               unsafe {
         8 ( 0.00%)          copy_nonoverlapping(x, tmp.as_mut_ptr(), 1);
         8 ( 0.00%)          copy(y, x, 1); // `x` and `y` may overlap
         .                   copy_nonoverlapping(tmp.as_ptr(), y, 1);
         .               }
         .           }
         .           
         .           /// Swaps `count * size_of::<T>()` bytes between the two regions of memory
         .           /// beginning at `x` and `y`. The two regions must *not* overlap.
         .           ///
         .           /// # Safety
-- line 383 ----------------------------------------
-- line 448 ----------------------------------------
         .                       return;
         .                   }
         .               }
         .           
         .               // Direct swapping, for the cases not going through the block optimization.
         .               // SAFETY: the caller must guarantee that `x` and `y` are valid
         .               // for writes, properly aligned, and non-overlapping.
         .               unsafe {
        14 ( 0.00%)          let z = read(x);
         .                   copy_nonoverlapping(y, x, 1);
         .                   write(y, z);
         .               }
         .           }
         .           
         .           #[inline]
         .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
         .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
-- line 464 ----------------------------------------
-- line 693 ----------------------------------------
         .               let mut tmp = MaybeUninit::<T>::uninit();
         .               // SAFETY: the caller must guarantee that `src` is valid for reads.
         .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
         .               // the stack as a separate allocated object.
         .               //
         .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
         .               // to be properly initialized.
         .               unsafe {
   859,227 ( 0.02%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
 6,213,720 ( 0.16%)          tmp.assume_init()
         .               }
         .           }
         .           
         .           /// Reads the value from `src` without moving it. This leaves the
         .           /// memory in `src` unchanged.
         .           ///
         .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
         .           ///
-- line 710 ----------------------------------------
-- line 884 ----------------------------------------
         .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
         .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
         .               }
         .           
         .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
         .               // `dst` cannot overlap `src` because the caller has mutable access
         .               // to `dst` while `src` is owned by this function.
         .               unsafe {
47,474,028 ( 1.21%)          copy_nonoverlapping(&src as *const T, dst, 1);
         .                   intrinsics::forget(src);
         .               }
         .           }
         .           
         .           /// Overwrites a memory location with the given value without reading or
         .           /// dropping the old value.
         .           ///
         .           /// Unlike [`write()`], the pointer may be unaligned.
-- line 900 ----------------------------------------
-- line 1206 ----------------------------------------
         .               if stride == 1 {
         .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
         .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
         .                   //
         .                   //    round_up_to_next_alignment(p, a) - p
         .                   //
         .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
         .                   // for LLVM to be able to utilize the various optimizations it knows about.
     1,287 ( 0.00%)          return wrapping_sub(
     3,600 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
         .                       p as usize,
         .                   );
         .               }
         .           
         .               let pmoda = p as usize & a_minus_one;
         .               if pmoda == 0 {
         .                   // Already aligned. Yay!
         .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
         .           /// assert!(std::ptr::eq(
         .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
         .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
         .           /// ));
         .           /// ```
         .           #[stable(feature = "ptr_eq", since = "1.17.0")]
         .           #[inline]
         .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
 1,804,499 ( 0.05%)      a == b
         .           }
         .           
         .           /// Hash a raw pointer.
         .           ///
         .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
         .           /// by its address rather than the value it points to
         .           /// (which is what the `Hash for &T` implementation does).
         .           ///
-- line 1364 ----------------------------------------

 7,054,608 ( 0.18%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/layout.rs
--------------------------------------------------------------------------------
Ir                 

-- line 23 ----------------------------------------
        .           use std::iter;
        .           use std::num::NonZeroUsize;
        .           use std::ops::Bound;
        .           
        .           use rand::{seq::SliceRandom, SeedableRng};
        .           use rand_xoshiro::Xoshiro128StarStar;
        .           
        .           pub fn provide(providers: &mut ty::query::Providers) {
        6 ( 0.00%)      *providers =
        .                   ty::query::Providers { layout_of, fn_abi_of_fn_ptr, fn_abi_of_instance, ..*providers };
        .           }
        .           
        .           pub trait IntegerExt {
        .               fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx>, signed: bool) -> Ty<'tcx>;
        .               fn from_attr<C: HasDataLayout>(cx: &C, ity: attr::IntType) -> Integer;
        .               fn from_int_ty<C: HasDataLayout>(cx: &C, ity: ty::IntTy) -> Integer;
        .               fn from_uint_ty<C: HasDataLayout>(cx: &C, uty: ty::UintTy) -> Integer;
-- line 39 ----------------------------------------
-- line 59 ----------------------------------------
        .                       (I16, true) => tcx.types.i16,
        .                       (I32, true) => tcx.types.i32,
        .                       (I64, true) => tcx.types.i64,
        .                       (I128, true) => tcx.types.i128,
        .                   }
        .               }
        .           
        .               /// Gets the Integer type from an attr::IntType.
       12 ( 0.00%)      fn from_attr<C: HasDataLayout>(cx: &C, ity: attr::IntType) -> Integer {
        .                   let dl = cx.data_layout();
        .           
       30 ( 0.00%)          match ity {
        .                       attr::SignedInt(ast::IntTy::I8) | attr::UnsignedInt(ast::UintTy::U8) => I8,
        .                       attr::SignedInt(ast::IntTy::I16) | attr::UnsignedInt(ast::UintTy::U16) => I16,
        .                       attr::SignedInt(ast::IntTy::I32) | attr::UnsignedInt(ast::UintTy::U32) => I32,
        .                       attr::SignedInt(ast::IntTy::I64) | attr::UnsignedInt(ast::UintTy::U64) => I64,
        .                       attr::SignedInt(ast::IntTy::I128) | attr::UnsignedInt(ast::UintTy::U128) => I128,
        .                       attr::SignedInt(ast::IntTy::Isize) | attr::UnsignedInt(ast::UintTy::Usize) => {
        6 ( 0.00%)                  dl.ptr_sized_integer()
        .                       }
        .                   }
       12 ( 0.00%)      }
        .           
        .               fn from_int_ty<C: HasDataLayout>(cx: &C, ity: ty::IntTy) -> Integer {
       10 ( 0.00%)          match ity {
        .                       ty::IntTy::I8 => I8,
        .                       ty::IntTy::I16 => I16,
        .                       ty::IntTy::I32 => I32,
        .                       ty::IntTy::I64 => I64,
        .                       ty::IntTy::I128 => I128,
      431 ( 0.00%)              ty::IntTy::Isize => cx.data_layout().ptr_sized_integer(),
        .                   }
        .               }
        .               fn from_uint_ty<C: HasDataLayout>(cx: &C, ity: ty::UintTy) -> Integer {
        .                   match ity {
        .                       ty::UintTy::U8 => I8,
        .                       ty::UintTy::U16 => I16,
        .                       ty::UintTy::U32 => I32,
        .                       ty::UintTy::U64 => I64,
        .                       ty::UintTy::U128 => I128,
        2 ( 0.00%)              ty::UintTy::Usize => cx.data_layout().ptr_sized_integer(),
        .                   }
        .               }
        .           
        .               /// Finds the appropriate Integer type and signedness for the given
        .               /// signed discriminant range and `#[repr]` attribute.
        .               /// N.B.: `u128` values above `i128::MAX` will be treated as signed, but
        .               /// that shouldn't affect anything, other than maybe debuginfo.
        9 ( 0.00%)      fn repr_discr<'tcx>(
        .                   tcx: TyCtxt<'tcx>,
        .                   ty: Ty<'tcx>,
        .                   repr: &ReprOptions,
        .                   min: i128,
        .                   max: i128,
        .               ) -> (Integer, bool) {
        .                   // Theoretically, negative values could be larger in unsigned representation
        .                   // than the unsigned representation of the signed minimum. However, if there
        .                   // are any negative values, the only valid unsigned representation is u128
        .                   // which can fit all i128 values, so the result remains unaffected.
        .                   let unsigned_fit = Integer::fit_unsigned(cmp::max(min as u128, max as u128));
        .                   let signed_fit = cmp::max(Integer::fit_signed(min), Integer::fit_signed(max));
        .           
        9 ( 0.00%)          if let Some(ity) = repr.int {
        .                       let discr = Integer::from_attr(&tcx, ity);
        .                       let fit = if ity.is_signed() { signed_fit } else { unsigned_fit };
        .                       if discr < fit {
        .                           bug!(
        .                               "Integer::repr_discr: `#[repr]` hint too small for \
        .                                 discriminant range of enum `{}",
        .                               ty
        .                           )
        .                       }
        .                       return (discr, ity.is_signed());
        .                   }
        .           
        6 ( 0.00%)          let at_least = if repr.c() {
        .                       // This is usually I32, however it can be different on some platforms,
        .                       // notably hexagon and arm-none/thumb-none
        .                       tcx.data_layout().c_enum_min_size
        .                   } else {
        .                       // repr(Rust) enums try to be as small as possible
        .                       I8
        .                   };
        .           
        .                   // If there are no negative values, we can use the unsigned fit.
       27 ( 0.00%)          if min >= 0 {
        .                       (cmp::max(unsigned_fit, at_least), false)
        .                   } else {
        .                       (cmp::max(signed_fit, at_least), true)
        .                   }
       18 ( 0.00%)      }
        .           }
        .           
        .           pub trait PrimitiveExt {
        .               fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx>;
        .               fn to_int_ty<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx>;
        .           }
        .           
        .           impl PrimitiveExt for Primitive {
-- line 157 ----------------------------------------
-- line 215 ----------------------------------------
        .                           "unable to determine layout for `{}` because `{}` cannot be normalized",
        .                           t,
        .                           e.get_type_for_failure()
        .                       ),
        .                   }
        .               }
        .           }
        .           
      992 ( 0.00%)  #[instrument(skip(tcx, query), level = "debug")]
        .           fn layout_of<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,
        .           ) -> Result<TyAndLayout<'tcx>, LayoutError<'tcx>> {
        .               ty::tls::with_related_context(tcx, move |icx| {
       62 ( 0.00%)          let (param_env, ty) = query.into_parts();
        .                   debug!(?ty);
        .           
      248 ( 0.00%)          if !tcx.recursion_limit().value_within_limit(icx.layout_depth) {
        .                       tcx.sess.fatal(&format!("overflow representing the type `{}`", ty));
        .                   }
        .           
        .                   // Update the ImplicitCtxt to increase the layout_depth
      558 ( 0.00%)          let icx = ty::tls::ImplicitCtxt { layout_depth: icx.layout_depth + 1, ..icx.clone() };
        .           
        .                   ty::tls::enter_context(&icx, |_| {
      186 ( 0.00%)              let param_env = param_env.with_reveal_all_normalized(tcx);
        .                       let unnormalized_ty = ty;
        .           
        .                       // FIXME: We might want to have two different versions of `layout_of`:
        .                       // One that can be called after typecheck has completed and can use
        .                       // `normalize_erasing_regions` here and another one that can be called
        .                       // before typecheck has completed and uses `try_normalize_erasing_regions`.
        .                       let ty = match tcx.try_normalize_erasing_regions(param_env, ty) {
        .                           Ok(t) => t,
        .                           Err(normalization_error) => {
        .                               return Err(LayoutError::NormalizationFailure(ty, normalization_error));
        .                           }
        .                       };
        .           
       62 ( 0.00%)              if ty != unnormalized_ty {
        .                           // Ensure this layout is also cached for the normalized type.
        .                           return tcx.layout_of(param_env.and(ty));
        .                       }
        .           
      240 ( 0.00%)              let cx = LayoutCx { tcx, param_env };
        .           
      180 ( 0.00%)              let layout = cx.layout_of_uncached(ty)?;
        .                       let layout = TyAndLayout { ty, layout };
        .           
        .                       cx.record_layout_for_printing(layout);
        .           
        .                       // Type-level uninhabitedness should always imply ABI uninhabitedness.
       60 ( 0.00%)              if tcx.conservative_is_privately_uninhabited(param_env.and(ty)) {
        .                           assert!(layout.abi.is_uninhabited());
        .                       }
        .           
      180 ( 0.00%)              Ok(layout)
        .                   })
        .               })
        .           }
        .           
        .           pub struct LayoutCx<'tcx, C> {
        .               pub tcx: C,
        .               pub param_env: ty::ParamEnv<'tcx>,
        .           }
-- line 279 ----------------------------------------
-- line 291 ----------------------------------------
        .           // Invert a bijective mapping, i.e. `invert(map)[y] = x` if `map[x] = y`.
        .           // This is used to go between `memory_index` (source field order to memory order)
        .           // and `inverse_memory_index` (memory order to source field order).
        .           // See also `FieldsShape::Arbitrary::memory_index` for more details.
        .           // FIXME(eddyb) build a better abstraction for permutations, if possible.
        .           fn invert_mapping(map: &[u32]) -> Vec<u32> {
        .               let mut inverse = vec![0; map.len()];
        .               for i in 0..map.len() {
      128 ( 0.00%)          inverse[map[i] as usize] = i as u32;
        .               }
        .               inverse
        .           }
        .           
        .           impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {
       36 ( 0.00%)      fn scalar_pair(&self, a: Scalar, b: Scalar) -> Layout {
        .                   let dl = self.data_layout();
       28 ( 0.00%)          let b_align = b.value.align(dl);
       32 ( 0.00%)          let align = a.value.align(dl).max(b_align).max(dl.aggregate_align);
        .                   let b_offset = a.value.size(dl).align_to(b_align.abi);
        .                   let size = (b_offset + b.value.size(dl)).align_to(align.abi);
        .           
        .                   // HACK(nox): We iter on `b` and then `a` because `max_by_key`
        .                   // returns the last maximum.
       48 ( 0.00%)          let largest_niche = Niche::from_scalar(dl, b_offset, b)
        .                       .into_iter()
       40 ( 0.00%)              .chain(Niche::from_scalar(dl, Size::ZERO, a))
        .                       .max_by_key(|niche| niche.available(dl));
        .           
       76 ( 0.00%)          Layout {
        .                       variants: Variants::Single { index: VariantIdx::new(0) },
        .                       fields: FieldsShape::Arbitrary {
        8 ( 0.00%)                  offsets: vec![Size::ZERO, b_offset],
        8 ( 0.00%)                  memory_index: vec![0, 1],
        .                       },
       52 ( 0.00%)              abi: Abi::ScalarPair(a, b),
       40 ( 0.00%)              largest_niche,
        .                       align,
        .                       size,
        .                   }
       32 ( 0.00%)      }
        .           
      552 ( 0.00%)      fn univariant_uninterned(
        .                   &self,
        .                   ty: Ty<'tcx>,
        .                   fields: &[TyAndLayout<'_>],
        .                   repr: &ReprOptions,
        .                   kind: StructKind,
        .               ) -> Result<Layout, LayoutError<'tcx>> {
        .                   let dl = self.data_layout();
      184 ( 0.00%)          let pack = repr.pack;
       46 ( 0.00%)          if pack.is_some() && repr.align.is_some() {
        .                       self.tcx.sess.delay_span_bug(DUMMY_SP, "struct cannot be packed and aligned");
        .                       return Err(LayoutError::Unknown(ty));
        .                   }
        .           
      184 ( 0.00%)          let mut align = if pack.is_some() { dl.i8_align } else { dl.aggregate_align };
        .           
        .                   let mut inverse_memory_index: Vec<u32> = (0..fields.len() as u32).collect();
        .           
        .                   let optimize = !repr.inhibit_struct_field_reordering_opt();
       46 ( 0.00%)          if optimize {
        .                       let end =
      322 ( 0.00%)                  if let StructKind::MaybeUnsized = kind { fields.len() - 1 } else { fields.len() };
        .                       let optimizing = &mut inverse_memory_index[..end];
       46 ( 0.00%)              let field_align = |f: &TyAndLayout<'_>| {
        .                           if let Some(pack) = pack { f.align.abi.min(pack) } else { f.align.abi }
        .                       };
        .           
        .                       // If `-Z randomize-layout` was enabled for the type definition we can shuffle
        .                       // the field ordering to try and catch some code making assumptions about layouts
        .                       // we don't guarantee
        .                       if repr.can_randomize_type_layout() {
        .                           // `ReprOptions.layout_seed` is a deterministic seed that we can use to
-- line 363 ----------------------------------------
-- line 364 ----------------------------------------
        .                           // randomize field ordering with
        .                           let mut rng = Xoshiro128StarStar::seed_from_u64(repr.field_shuffle_seed);
        .           
        .                           // Shuffle the ordering of the fields
        .                           optimizing.shuffle(&mut rng);
        .           
        .                       // Otherwise we just leave things alone and actually optimize the type's fields
        .                       } else {
       92 ( 0.00%)                  match kind {
        .                               StructKind::AlwaysSized | StructKind::MaybeUnsized => {
      105 ( 0.00%)                          optimizing.sort_by_key(|&x| {
        .                                       // Place ZSTs first to avoid "interesting offsets",
        .                                       // especially with only one or two non-ZST fields.
        .                                       let f = &fields[x as usize];
        .                                       (!f.is_zst(), cmp::Reverse(field_align(f)))
        .                                   });
        .                               }
        .           
        .                               StructKind::Prefixed(..) => {
        .                                   // Sort in ascending alignment so that the layout stays optimal
        .                                   // regardless of the prefix
      125 ( 0.00%)                          optimizing.sort_by_key(|&x| field_align(&fields[x as usize]));
        .                               }
        .                           }
        .           
        .                           // FIXME(Kixiron): We can always shuffle fields within a given alignment class
        .                           //                 regardless of the status of `-Z randomize-layout`
        .                       }
        .                   }
        .           
-- line 393 ----------------------------------------
-- line 399 ----------------------------------------
        .                   // produce `memory_index` (see `invert_mapping`).
        .           
        .                   let mut sized = true;
        .                   let mut offsets = vec![Size::ZERO; fields.len()];
        .                   let mut offset = Size::ZERO;
        .                   let mut largest_niche = None;
        .                   let mut largest_niche_available = 0;
        .           
      138 ( 0.00%)          if let StructKind::Prefixed(prefix_size, prefix_align) = kind {
        .                       let prefix_align =
      175 ( 0.00%)                  if let Some(pack) = pack { prefix_align.min(pack) } else { prefix_align };
        .                       align = align.max(AbiAndPrefAlign::new(prefix_align));
        .                       offset = prefix_size.align_to(prefix_align);
        .                   }
        .           
       32 ( 0.00%)          for &i in &inverse_memory_index {
      412 ( 0.00%)              let field = fields[i as usize];
       64 ( 0.00%)              if !sized {
        .                           self.tcx.sess.delay_span_bug(
        .                               DUMMY_SP,
        .                               &format!(
        .                                   "univariant: field #{} of `{}` comes after unsized field",
        .                                   offsets.len(),
        .                                   ty
        .                               ),
        .                           );
        .                       }
        .           
      160 ( 0.00%)              if field.is_unsized() {
        .                           sized = false;
        .                       }
        .           
        .                       // Invariant: offset < dl.obj_size_bound() <= 1<<61
       64 ( 0.00%)              let field_align = if let Some(pack) = pack {
        .                           field.align.min(AbiAndPrefAlign::new(pack))
        .                       } else {
       96 ( 0.00%)                  field.align
        .                       };
        .                       offset = offset.align_to(field_align.abi);
        .                       align = align.max(field_align);
        .           
        .                       debug!("univariant offset: {:?} field: {:#?}", offset, field);
       64 ( 0.00%)              offsets[i as usize] = offset;
        .           
       32 ( 0.00%)              if !repr.hide_niche() {
      200 ( 0.00%)                  if let Some(mut niche) = field.largest_niche {
        .                               let available = niche.available(dl);
       32 ( 0.00%)                      if available > largest_niche_available {
        .                                   largest_niche_available = available;
        .                                   niche.offset += offset;
       96 ( 0.00%)                          largest_niche = Some(niche);
        .                               }
        .                           }
        .                       }
        .           
       32 ( 0.00%)              offset = offset.checked_add(field.size, dl).ok_or(LayoutError::SizeOverflow(ty))?;
        .                   }
        .           
      112 ( 0.00%)          if let Some(repr_align) = repr.align {
        .                       align = align.max(AbiAndPrefAlign::new(repr_align));
        .                   }
        .           
        .                   debug!("univariant min_size: {:?}", offset);
        .                   let min_size = offset;
        .           
        .                   // As stated above, inverse_memory_index holds field indices by increasing offset.
        .                   // This makes it an already-sorted view of the offsets vec.
        .                   // To invert it, consider:
        .                   // If field 5 has offset 0, offsets[0] is 5, and memory_index[5] should be 0.
        .                   // Field 5 would be the first element, so memory_index is i:
        .                   // Note: if we didn't optimize, it's already right.
        .           
        .                   let memory_index =
       92 ( 0.00%)              if optimize { invert_mapping(&inverse_memory_index) } else { inverse_memory_index };
        .           
        .                   let size = min_size.align_to(align.abi);
       92 ( 0.00%)          let mut abi = Abi::Aggregate { sized };
        .           
        .                   // Unpack newtype ABIs and find scalar pairs.
      184 ( 0.00%)          if sized && size.bytes() > 0 {
        .                       // All other fields must be ZSTs.
        .                       let mut non_zst_fields = fields.iter().enumerate().filter(|&(_, f)| !f.is_zst());
        .           
       24 ( 0.00%)              match (non_zst_fields.next(), non_zst_fields.next(), non_zst_fields.next()) {
        .                           // We have exactly one non-ZST field.
        .                           (Some((i, field)), None, None) => {
        .                               // Field fills the struct and it has a scalar or scalar pair ABI.
       44 ( 0.00%)                      if offsets[i].bytes() == 0 && align.abi == field.align.abi && size == field.size
        .                               {
       36 ( 0.00%)                          match field.abi {
        .                                       // For plain scalars, or vectors of them, we can't unpack
        .                                       // newtypes for `#[repr(C)]`, as that affects C ABIs.
        .                                       Abi::Scalar(_) | Abi::Vector { .. } if optimize => {
        .                                           abi = field.abi;
        .                                       }
        .                                       // But scalar pairs are Rust-specific and get
        .                                       // treated as aggregates by C ABIs anyway.
        .                                       Abi::ScalarPair(..) => {
-- line 496 ----------------------------------------
-- line 528 ----------------------------------------
        .                                   abi = pair.abi;
        .                               }
        .                           }
        .           
        .                           _ => {}
        .                       }
        .                   }
        .           
       32 ( 0.00%)          if fields.iter().any(|f| f.abi.is_uninhabited()) {
        .                       abi = Abi::Uninhabited;
        .                   }
        .           
    1,472 ( 0.00%)          Ok(Layout {
        .                       variants: Variants::Single { index: VariantIdx::new(0) },
      460 ( 0.00%)              fields: FieldsShape::Arbitrary { offsets, memory_index },
        .                       abi,
      506 ( 0.00%)              largest_niche,
        .                       align,
        .                       size,
        .                   })
      460 ( 0.00%)      }
        .           
      600 ( 0.00%)      fn layout_of_uncached(&self, ty: Ty<'tcx>) -> Result<&'tcx Layout, LayoutError<'tcx>> {
      120 ( 0.00%)          let tcx = self.tcx;
       60 ( 0.00%)          let param_env = self.param_env;
        .                   let dl = self.data_layout();
       68 ( 0.00%)          let scalar_unit = |value: Primitive| {
        1 ( 0.00%)              let size = value.size(dl);
       30 ( 0.00%)              assert!(size.bits() <= 128);
       41 ( 0.00%)              Scalar { value, valid_range: WrappingRange { start: 0, end: size.unsigned_int_max() } }
        8 ( 0.00%)          };
        .                   let scalar = |value: Primitive| tcx.intern_layout(Layout::scalar(self, scalar_unit(value)));
        .           
        .                   let univariant = |fields: &[TyAndLayout<'_>], repr: &ReprOptions, kind| {
      315 ( 0.00%)              Ok(tcx.intern_layout(self.univariant_uninterned(ty, fields, repr, kind)?))
        .                   };
        .                   debug_assert!(!ty.has_infer_types_or_consts());
        .           
      466 ( 0.00%)          Ok(match *ty.kind() {
        .                       // Basic scalars.
        .                       ty::Bool => tcx.intern_layout(Layout::scalar(
        .                           self,
       12 ( 0.00%)                  Scalar { value: Int(I8, false), valid_range: WrappingRange { start: 0, end: 1 } },
        .                       )),
        .                       ty::Char => tcx.intern_layout(Layout::scalar(
        .                           self,
       12 ( 0.00%)                  Scalar {
        .                               value: Int(I32, false),
        .                               valid_range: WrappingRange { start: 0, end: 0x10FFFF },
        .                           },
        .                       )),
       15 ( 0.00%)              ty::Int(ity) => scalar(Int(Integer::from_int_ty(dl, ity), true)),
       20 ( 0.00%)              ty::Uint(ity) => scalar(Int(Integer::from_uint_ty(dl, ity), false)),
        .                       ty::Float(fty) => scalar(match fty {
        .                           ty::FloatTy::F32 => F32,
        .                           ty::FloatTy::F64 => F64,
        .                       }),
        .                       ty::FnPtr(_) => {
        .                           let mut ptr = scalar_unit(Pointer);
        .                           ptr.valid_range = ptr.valid_range.with_start(1);
        .                           tcx.intern_layout(Layout::scalar(self, ptr))
-- line 588 ----------------------------------------
-- line 594 ----------------------------------------
        .                           fields: FieldsShape::Primitive,
        .                           abi: Abi::Uninhabited,
        .                           largest_niche: None,
        .                           align: dl.i8_align,
        .                           size: Size::ZERO,
        .                       }),
        .           
        .                       // Potentially-wide pointers.
        4 ( 0.00%)              ty::Ref(_, pointee, _) | ty::RawPtr(ty::TypeAndMut { ty: pointee, .. }) => {
        .                           let mut data_ptr = scalar_unit(Pointer);
        .                           if !ty.is_unsafe_ptr() {
        .                               data_ptr.valid_range = data_ptr.valid_range.with_start(1);
        .                           }
        .           
        .                           let pointee = tcx.normalize_erasing_regions(param_env, pointee);
       32 ( 0.00%)                  if pointee.is_sized(tcx.at(DUMMY_SP), param_env) {
       17 ( 0.00%)                      return Ok(tcx.intern_layout(Layout::scalar(self, data_ptr)));
        .                           }
        .           
       12 ( 0.00%)                  let unsized_part = tcx.struct_tail_erasing_lifetimes(pointee, param_env);
       12 ( 0.00%)                  let metadata = match unsized_part.kind() {
        .                               ty::Foreign(..) => {
        .                                   return Ok(tcx.intern_layout(Layout::scalar(self, data_ptr)));
        .                               }
       16 ( 0.00%)                      ty::Slice(_) | ty::Str => scalar_unit(Int(dl.ptr_sized_integer(), false)),
        .                               ty::Dynamic(..) => {
        2 ( 0.00%)                          let mut vtable = scalar_unit(Pointer);
        2 ( 0.00%)                          vtable.valid_range = vtable.valid_range.with_start(1);
        8 ( 0.00%)                          vtable
        .                               }
        .                               _ => return Err(LayoutError::Unknown(unsized_part)),
        .                           };
        .           
        .                           // Effectively a (ptr, meta) tuple.
       63 ( 0.00%)                  tcx.intern_layout(self.scalar_pair(data_ptr, metadata))
        .                       }
        .           
        .                       // Arrays and slices.
       60 ( 0.00%)              ty::Array(element, mut count) => {
       20 ( 0.00%)                  if count.has_projections() {
        .                               count = tcx.normalize_erasing_regions(param_env, count);
        .                               if count.has_projections() {
        .                                   return Err(LayoutError::Unknown(ty));
        .                               }
        .                           }
        .           
       80 ( 0.00%)                  let count = count.try_eval_usize(tcx, param_env).ok_or(LayoutError::Unknown(ty))?;
      100 ( 0.00%)                  let element = self.layout_of(element)?;
        .                           let size =
      100 ( 0.00%)                      element.size.checked_mul(count, dl).ok_or(LayoutError::SizeOverflow(ty))?;
        .           
        .                           let abi =
      154 ( 0.00%)                      if count != 0 && tcx.conservative_is_privately_uninhabited(param_env.and(ty)) {
        .                                   Abi::Uninhabited
        .                               } else {
        .                                   Abi::Aggregate { sized: true }
        .                               };
        .           
      209 ( 0.00%)                  let largest_niche = if count != 0 { element.largest_niche } else { None };
        .           
      440 ( 0.00%)                  tcx.intern_layout(Layout {
        .                               variants: Variants::Single { index: VariantIdx::new(0) },
       20 ( 0.00%)                      fields: FieldsShape::Array { stride: element.size, count },
        .                               abi,
        .                               largest_niche,
       20 ( 0.00%)                      align: element.align,
        .                               size,
        .                           })
        .                       }
        .                       ty::Slice(element) => {
        .                           let element = self.layout_of(element)?;
        .                           tcx.intern_layout(Layout {
        .                               variants: Variants::Single { index: VariantIdx::new(0) },
        .                               fields: FieldsShape::Array { stride: element.size, count: 0 },
        .                               abi: Abi::Aggregate { sized: false },
        .                               largest_niche: None,
        .                               align: element.align,
        .                               size: Size::ZERO,
        .                           })
        .                       }
        6 ( 0.00%)              ty::Str => tcx.intern_layout(Layout {
        .                           variants: Variants::Single { index: VariantIdx::new(0) },
        .                           fields: FieldsShape::Array { stride: Size::from_bytes(1), count: 0 },
        .                           abi: Abi::Aggregate { sized: false },
        .                           largest_niche: None,
        1 ( 0.00%)                  align: dl.i8_align,
        .                           size: Size::ZERO,
        .                       }),
        .           
        .                       // Odd unit types.
        6 ( 0.00%)              ty::FnDef(..) => univariant(&[], &ReprOptions::default(), StructKind::AlwaysSized)?,
        .                       ty::Dynamic(..) | ty::Foreign(..) => {
        .                           let mut unit = self.univariant_uninterned(
        .                               ty,
        .                               &[],
        .                               &ReprOptions::default(),
        .                               StructKind::AlwaysSized,
        .                           )?;
        .                           match unit.abi {
-- line 692 ----------------------------------------
-- line 702 ----------------------------------------
        .                           let tys = substs.as_closure().upvar_tys();
        .                           univariant(
        .                               &tys.map(|ty| self.layout_of(ty)).collect::<Result<Vec<_>, _>>()?,
        .                               &ReprOptions::default(),
        .                               StructKind::AlwaysSized,
        .                           )?
        .                       }
        .           
       12 ( 0.00%)              ty::Tuple(tys) => {
        .                           let kind =
       36 ( 0.00%)                      if tys.len() == 0 { StructKind::AlwaysSized } else { StructKind::MaybeUnsized };
        .           
       12 ( 0.00%)                  univariant(
       24 ( 0.00%)                      &tys.iter()
        .                                   .map(|k| self.layout_of(k.expect_ty()))
        .                                   .collect::<Result<Vec<_>, _>>()?,
       24 ( 0.00%)                      &ReprOptions::default(),
        .                               kind,
        .                           )?
        .                       }
        .           
        .                       // SIMD vector types.
       18 ( 0.00%)              ty::Adt(def, substs) if def.repr.simd() => {
        .                           if !def.is_struct() {
        .                               // Should have yielded E0517 by now.
        .                               tcx.sess.delay_span_bug(
        .                                   DUMMY_SP,
        .                                   "#[repr(simd)] was applied to an ADT that is not a struct",
        .                               );
        .                               return Err(LayoutError::Unknown(ty));
        .                           }
-- line 732 ----------------------------------------
-- line 833 ----------------------------------------
        .                               abi: Abi::Vector { element: e_abi, count: e_len },
        .                               largest_niche: e_ly.largest_niche,
        .                               size,
        .                               align,
        .                           })
        .                       }
        .           
        .                       // ADTs.
       18 ( 0.00%)              ty::Adt(def, substs) => {
        .                           // Cache the field layouts.
       18 ( 0.00%)                  let variants = def
        .                               .variants
        .                               .iter()
        .                               .map(|v| {
        .                                   v.fields
        .                                       .iter()
       64 ( 0.00%)                              .map(|field| self.layout_of(field.ty(tcx, substs)))
        .                                       .collect::<Result<Vec<_>, _>>()
        .                               })
        .                               .collect::<Result<IndexVec<VariantIdx, _>, _>>()?;
        .           
        9 ( 0.00%)                  if def.is_union() {
        .                               if def.repr.pack.is_some() && def.repr.align.is_some() {
        .                                   self.tcx.sess.delay_span_bug(
        .                                       tcx.def_span(def.did),
        .                                       "union cannot be packed and aligned",
        .                                   );
        .                                   return Err(LayoutError::Unknown(ty));
        .                               }
        .           
-- line 862 ----------------------------------------
-- line 921 ----------------------------------------
        .                           }
        .           
        .                           // A variant is absent if it's uninhabited and only has ZST fields.
        .                           // Present uninhabited variants only require space for their fields,
        .                           // but *not* an encoding of the discriminant (e.g., a tag value).
        .                           // See issue #49298 for more details on the need to leave space
        .                           // for non-ZST uninhabited data (mostly partial initialization).
        .                           let absent = |fields: &[TyAndLayout<'_>]| {
        8 ( 0.00%)                      let uninhabited = fields.iter().any(|f| f.abi.is_uninhabited());
        .                               let is_zst = fields.iter().all(|f| f.is_zst());
       25 ( 0.00%)                      uninhabited && is_zst
       25 ( 0.00%)                  };
        .                           let (present_first, present_second) = {
        .                               let mut present_variants = variants
        .                                   .iter_enumerated()
       48 ( 0.00%)                          .filter_map(|(i, v)| if absent(v) { None } else { Some(i) });
        .                               (present_variants.next(), present_variants.next())
        .                           };
       18 ( 0.00%)                  let present_first = match present_first {
        .                               Some(present_first) => present_first,
        .                               // Uninhabited because it has no variants, or only absent ones.
        .                               None if def.is_enum() => {
        .                                   return Ok(tcx.layout_of(param_env.and(tcx.types.never))?.layout);
        .                               }
        .                               // If it's a struct, still compute a layout so that we can still compute the
        .                               // field offsets.
        .                               None => VariantIdx::new(0),
        .                           };
        .           
        9 ( 0.00%)                  let is_struct = !def.is_enum() ||
        .                               // Only one variant is present.
        3 ( 0.00%)                      (present_second.is_none() &&
        .                               // Representation optimizations are allowed.
        .                               !def.repr.inhibit_enum_layout_opt());
        .                           if is_struct {
        .                               // Struct, or univariant enum equivalent to a struct.
        .                               // (Typechecking will reject discriminant-sizing attrs.)
        .           
        .                               let v = present_first;
        6 ( 0.00%)                      let kind = if def.is_enum() || variants[v].is_empty() {
        .                                   StructKind::AlwaysSized
        .                               } else {
       18 ( 0.00%)                          let param_env = tcx.param_env(def.did);
        6 ( 0.00%)                          let last_field = def.variants[v].fields.last().unwrap();
        .                                   let always_sized =
       36 ( 0.00%)                              tcx.type_of(last_field.did).is_sized(tcx.at(DUMMY_SP), param_env);
       12 ( 0.00%)                          if !always_sized {
        .                                       StructKind::MaybeUnsized
        .                                   } else {
        .                                       StructKind::AlwaysSized
        .                                   }
        .                               };
        .           
       78 ( 0.00%)                      let mut st = self.univariant_uninterned(ty, &variants[v], &def.repr, kind)?;
       30 ( 0.00%)                      st.variants = Variants::Single { index: v };
       42 ( 0.00%)                      let (start, end) = self.tcx.layout_scalar_valid_range(def.did);
       24 ( 0.00%)                      match st.abi {
        .                                   Abi::Scalar(ref mut scalar) | Abi::ScalarPair(ref mut scalar, _) => {
        .                                       // the asserts ensure that we are not using the
        .                                       // `#[rustc_layout_scalar_valid_range(n)]`
        .                                       // attribute to widen the range of anything as that would probably
        .                                       // result in UB somewhere
        .                                       // FIXME(eddyb) the asserts are probably not needed,
        .                                       // as larger validity ranges would result in missed
        .                                       // optimizations, *not* wrongly assuming the inner
-- line 985 ----------------------------------------
-- line 1013 ----------------------------------------
        .                                                       st.largest_niche = Some(niche);
        .                                                   }
        .                                               }
        .                                               None => st.largest_niche = Some(niche),
        .                                           }
        .                                       }
        .                                   }
        .                                   _ => assert!(
       18 ( 0.00%)                              start == Bound::Unbounded && end == Bound::Unbounded,
        .                                       "nonscalar layout for layout_scalar_valid_range type {:?}: {:#?}",
        .                                       def,
        .                                       st,
        .                                   ),
        .                               }
        .           
       54 ( 0.00%)                      return Ok(tcx.intern_layout(st));
        .                           }
        .           
        .                           // At this point, we have handled all unions and
        .                           // structs. (We have also handled univariant enums
        .                           // that allow representation optimization.)
        .                           assert!(def.is_enum());
        .           
        .                           // The current code for niche-filling relies on variant indices
        .                           // instead of actual discriminants, so dataful enums with
        .                           // explicit discriminants (RFC #2363) would misbehave.
        .                           let no_explicit_discriminants = def
        .                               .variants
        .                               .iter_enumerated()
        .                               .all(|(i, v)| v.discr == ty::VariantDiscr::Relative(i.as_u32()));
        .           
        6 ( 0.00%)                  let mut niche_filling_layout = None;
        .           
        .                           // Niche-filling enum optimization.
        6 ( 0.00%)                  if !def.repr.inhibit_enum_layout_opt() && no_explicit_discriminants {
        .                               let mut dataful_variant = None;
        .                               let mut niche_variants = VariantIdx::MAX..=VariantIdx::new(0);
        .           
        .                               // Find one non-ZST variant.
      159 ( 0.00%)                      'variants: for (v, fields) in variants.iter_enumerated() {
       75 ( 0.00%)                          if absent(fields) {
        .                                       continue 'variants;
        .                                   }
       50 ( 0.00%)                          for f in fields {
        .                                       if !f.is_zst() {
        .                                           if dataful_variant.is_none() {
        .                                               dataful_variant = Some(v);
        .                                               continue 'variants;
        .                                           } else {
        .                                               dataful_variant = None;
        .                                               break 'variants;
        .                                           }
        .                                       }
        .                                   }
       92 ( 0.00%)                          niche_variants = *niche_variants.start().min(&v)..=v;
        .                               }
        .           
        6 ( 0.00%)                      if niche_variants.start() > niche_variants.end() {
        .                                   dataful_variant = None;
        .                               }
        .           
        .                               if let Some(i) = dataful_variant {
        .                                   let count = (niche_variants.end().as_u32()
        .                                       - niche_variants.start().as_u32()
        .                                       + 1) as u128;
        .           
-- line 1078 ----------------------------------------
-- line 1151 ----------------------------------------
        .                                           largest_niche,
        .                                           size,
        .                                           align,
        .                                       });
        .                                   }
        .                               }
        .                           }
        .           
       15 ( 0.00%)                  let (mut min, mut max) = (i128::MAX, i128::MIN);
       25 ( 0.00%)                  let discr_type = def.repr.discr_type();
        9 ( 0.00%)                  let bits = Integer::from_attr(self, discr_type).size().bits();
       58 ( 0.00%)                  for (i, discr) in def.discriminants(tcx) {
        2 ( 0.00%)                      if variants[i].iter().any(|f| f.abi.is_uninhabited()) {
        .                                   continue;
        .                               }
        .                               let mut x = discr.val as i128;
       25 ( 0.00%)                      if discr_type.is_signed() {
        .                                   // sign extend the raw representation to be an i128
      475 ( 0.00%)                          x = (x << (128 - bits)) >> (128 - bits);
        .                               }
      100 ( 0.00%)                      if x < min {
       12 ( 0.00%)                          min = x;
        .                               }
      100 ( 0.00%)                      if x > max {
       75 ( 0.00%)                          max = x;
        .                               }
        .                           }
        .                           // We might have no inhabited variants, so pretend there's at least one.
        3 ( 0.00%)                  if (min, max) == (i128::MAX, i128::MIN) {
        .                               min = 0;
        .                               max = 0;
        .                           }
       15 ( 0.00%)                  assert!(min <= max, "discriminant range is {}...{}", min, max);
       27 ( 0.00%)                  let (min_ity, signed) = Integer::repr_discr(tcx, ty, &def.repr, min, max);
        .           
        6 ( 0.00%)                  let mut align = dl.aggregate_align;
        3 ( 0.00%)                  let mut size = Size::ZERO;
        .           
        .                           // We're interested in the smallest alignment, so start large.
        6 ( 0.00%)                  let mut start_align = Align::from_bytes(256).unwrap();
       15 ( 0.00%)                  assert_eq!(Integer::for_align(dl, start_align), None);
        .           
        .                           // repr(C) on an enum tells us to make a (tag, union) layout,
        .                           // so we need to grow the prefix alignment to be at least
        .                           // the alignment of the union. (This value is used both for
        .                           // determining the alignment of the overall enum, and the
        .                           // determining the alignment of the payload after the tag.)
       39 ( 0.00%)                  let mut prefix_align = min_ity.align(dl).abi;
        3 ( 0.00%)                  if def.repr.c() {
        .                               for fields in &variants {
        .                                   for field in fields {
        .                                       prefix_align = prefix_align.max(field.align.abi);
        .                                   }
        .                               }
        .                           }
        .           
        .                           // Create the set of structs that represent each variant.
        6 ( 0.00%)                  let mut layout_variants = variants
        .                               .iter_enumerated()
        .                               .map(|(i, field_layouts)| {
      475 ( 0.00%)                          let mut st = self.univariant_uninterned(
       25 ( 0.00%)                              ty,
        .                                       &field_layouts,
       50 ( 0.00%)                              &def.repr,
      100 ( 0.00%)                              StructKind::Prefixed(min_ity.size(), prefix_align),
        .                                   )?;
       75 ( 0.00%)                          st.variants = Variants::Single { index: i };
        .                                   // Find the first field we can't move later
        .                                   // to make room for a larger discriminant.
        .                                   for field in
      329 ( 0.00%)                              st.fields.index_by_increasing_offset().map(|j| field_layouts[j])
        .                                   {
        .                                       if !field.is_zst() || field.align.abi.bytes() != 1 {
        4 ( 0.00%)                                  start_align = start_align.min(field.align.abi);
        .                                           break;
        .                                       }
        .                                   }
      100 ( 0.00%)                          size = cmp::max(size, st.size);
       75 ( 0.00%)                          align = align.max(st.align);
      150 ( 0.00%)                          Ok(st)
        .                               })
        .                               .collect::<Result<IndexVec<VariantIdx, _>, _>>()?;
        .           
        .                           // Align the maximum variant size to the largest alignment.
       15 ( 0.00%)                  size = size.align_to(align.abi);
        .           
       12 ( 0.00%)                  if size.bytes() >= dl.obj_size_bound() {
        .                               return Err(LayoutError::SizeOverflow(ty));
        .                           }
        .           
       12 ( 0.00%)                  let typeck_ity = Integer::from_attr(dl, def.repr.discr_type());
        9 ( 0.00%)                  if typeck_ity < min_ity {
        .                               // It is a bug if Layout decided on a greater discriminant size than typeck for
        .                               // some reason at this point (based on values discriminant can take on). Mostly
        .                               // because this discriminant will be loaded, and then stored into variable of
        .                               // type calculated by typeck. Consider such case (a bug): typeck decided on
        .                               // byte-sized discriminant, but layout thinks we need a 16-bit to store all
        .                               // discriminant values. That would be a bug, because then, in codegen, in order
        .                               // to store this 16-bit discriminant into 8-bit sized temporary some of the
        .                               // space necessary to represent would have to be discarded (or layout is wrong
-- line 1250 ----------------------------------------
-- line 1263 ----------------------------------------
        .                           // as the alignment of the first field of each variant.
        .                           // We increase the size of the discriminant to avoid LLVM copying
        .                           // padding when it doesn't need to. This normally causes unaligned
        .                           // load/stores and excessive memcpy/memset operations. By using a
        .                           // bigger integer size, LLVM can be sure about its contents and
        .                           // won't be so conservative.
        .           
        .                           // Use the initial field alignment
        9 ( 0.00%)                  let mut ity = if def.repr.c() || def.repr.int.is_some() {
        .                               min_ity
        .                           } else {
        9 ( 0.00%)                      Integer::for_align(dl, start_align).unwrap_or(min_ity)
        .                           };
        .           
        .                           // If the alignment is not larger than the chosen discriminant size,
        .                           // don't use the alignment as the final size.
        3 ( 0.00%)                  if ity <= min_ity {
        .                               ity = min_ity;
        .                           } else {
        .                               // Patch up the variants' first few fields.
        .                               let old_ity_size = min_ity.size();
        .                               let new_ity_size = ity.size();
        .                               for variant in &mut layout_variants {
        .                                   match variant.fields {
        .                                       FieldsShape::Arbitrary { ref mut offsets, .. } => {
-- line 1287 ----------------------------------------
-- line 1296 ----------------------------------------
        .                                               variant.size = new_ity_size;
        .                                           }
        .                                       }
        .                                       _ => bug!(),
        .                                   }
        .                               }
        .                           }
        .           
        3 ( 0.00%)                  let tag_mask = ity.size().unsigned_int_max();
        .                           let tag = Scalar {
        .                               value: Int(ity, signed),
        .                               valid_range: WrappingRange {
       15 ( 0.00%)                          start: (min as u128 & tag_mask),
       12 ( 0.00%)                          end: (max as u128 & tag_mask),
        .                               },
        .                           };
        .                           let mut abi = Abi::Aggregate { sized: true };
       18 ( 0.00%)                  if tag.value.size(dl) == size {
        .                               abi = Abi::Scalar(tag);
        .                           } else {
        .                               // Try to use a ScalarPair for all tagged enums.
        .                               let mut common_prim = None;
        .                               for (field_layouts, layout_variant) in iter::zip(&variants, &layout_variants) {
       14 ( 0.00%)                          let offsets = match layout_variant.fields {
        .                                       FieldsShape::Arbitrary { ref offsets, .. } => offsets,
        .                                       _ => bug!(),
        .                                   };
        .                                   let mut fields =
        .                                       iter::zip(field_layouts, offsets).filter(|p| !p.0.is_zst());
       70 ( 0.00%)                          let (field, offset) = match (fields.next(), fields.next()) {
        .                                       (None, None) => continue,
        .                                       (Some(pair), None) => pair,
        .                                       _ => {
        .                                           common_prim = None;
        .                                           break;
        .                                       }
        .                                   };
        6 ( 0.00%)                          let prim = match field.abi {
        4 ( 0.00%)                              Abi::Scalar(scalar) => scalar.value,
        .                                       _ => {
        .                                           common_prim = None;
        .                                           break;
        .                                       }
        .                                   };
        4 ( 0.00%)                          if let Some(pair) = common_prim {
        .                                       // This is pretty conservative. We could go fancier
        .                                       // by conflating things like i32 and u32, or even
        .                                       // realising that (u8, u8) could just cohabit with
        .                                       // u16 or even u32.
        9 ( 0.00%)                              if pair != (prim, offset) {
        .                                           common_prim = None;
        .                                           break;
        .                                       }
        .                                   } else {
        .                                       common_prim = Some((prim, offset));
        .                                   }
        .                               }
        2 ( 0.00%)                      if let Some((prim, offset)) = common_prim {
       17 ( 0.00%)                          let pair = self.scalar_pair(tag, scalar_unit(prim));
        2 ( 0.00%)                          let pair_offsets = match pair.fields {
        2 ( 0.00%)                              FieldsShape::Arbitrary { ref offsets, ref memory_index } => {
        1 ( 0.00%)                                  assert_eq!(memory_index, &[0, 1]);
        .                                           offsets
        .                                       }
        .                                       _ => bug!(),
        .                                   };
        6 ( 0.00%)                          if pair_offsets[0] == Size::ZERO
        2 ( 0.00%)                              && pair_offsets[1] == *offset
        1 ( 0.00%)                              && align == pair.align
        1 ( 0.00%)                              && size == pair.size
        .                                   {
        .                                       // We can use `ScalarPair` only when it matches our
        .                                       // already computed layout (including `#[repr(C)]`).
       27 ( 0.00%)                              abi = pair.abi;
        .                                   }
        1 ( 0.00%)                      }
        .                           }
        .           
        .                           if layout_variants.iter().all(|v| v.abi.is_uninhabited()) {
        .                               abi = Abi::Uninhabited;
        .                           }
        .           
       48 ( 0.00%)                  let largest_niche = Niche::from_scalar(dl, Size::ZERO, tag);
        .           
        .                           let tagged_layout = Layout {
        .                               variants: Variants::Multiple {
        .                                   tag,
        .                                   tag_encoding: TagEncoding::Direct,
        .                                   tag_field: 0,
        .                                   variants: layout_variants,
        .                               },
        .                               fields: FieldsShape::Arbitrary {
       15 ( 0.00%)                          offsets: vec![Size::ZERO],
       12 ( 0.00%)                          memory_index: vec![0],
        .                               },
        .                               largest_niche,
        .                               abi,
        6 ( 0.00%)                      align,
        3 ( 0.00%)                      size,
        .                           };
        .           
        9 ( 0.00%)                  let best_layout = match (tagged_layout, niche_filling_layout) {
        .                               (tagged_layout, Some(niche_filling_layout)) => {
        .                                   // Pick the smaller layout; otherwise,
        .                                   // pick the layout with the larger niche; otherwise,
        .                                   // pick tagged as it has simpler codegen.
        .                                   cmp::min_by_key(tagged_layout, niche_filling_layout, |layout| {
        .                                       let niche_size = layout.largest_niche.map_or(0, |n| n.available(dl));
        .                                       (layout.size, cmp::Reverse(niche_size))
        .                                   })
        .                               }
      183 ( 0.00%)                      (tagged_layout, None) => tagged_layout,
        .                           };
        .           
       27 ( 0.00%)                  tcx.intern_layout(best_layout)
       18 ( 0.00%)              }
        .           
        .                       // Types with no meaningful known layout.
        .                       ty::Projection(_) | ty::Opaque(..) => {
        .                           // NOTE(eddyb) `layout_of` query should've normalized these away,
        .                           // if that was possible, so there's no reason to try again here.
        .                           return Err(LayoutError::Unknown(ty));
        .                       }
        .           
-- line 1419 ----------------------------------------
-- line 1420 ----------------------------------------
        .                       ty::Placeholder(..) | ty::GeneratorWitness(..) | ty::Infer(_) => {
        .                           bug!("Layout::compute: unexpected type `{}`", ty)
        .                       }
        .           
        .                       ty::Bound(..) | ty::Param(_) | ty::Error(_) => {
        .                           return Err(LayoutError::Unknown(ty));
        .                       }
        .                   })
      480 ( 0.00%)      }
        .           }
        .           
        .           /// Overlap eligibility and variant assignment for each GeneratorSavedLocal.
        .           #[derive(Clone, Debug, PartialEq)]
        .           enum SavedLocalEligibility {
        .               Unassigned,
        .               Assigned(VariantIdx),
        .               // FIXME: Use newtype_index so we aren't wasting bytes
-- line 1436 ----------------------------------------
-- line 1755 ----------------------------------------
        .               }
        .           
        .               /// This is invoked by the `layout_of` query to record the final
        .               /// layout of each type.
        .               #[inline(always)]
        .               fn record_layout_for_printing(&self, layout: TyAndLayout<'tcx>) {
        .                   // If we are running with `-Zprint-type-sizes`, maybe record layouts
        .                   // for dumping later.
      300 ( 0.00%)          if self.tcx.sess.opts.debugging_opts.print_type_sizes {
        .                       self.record_layout_for_printing_outlined(layout)
        .                   }
        .               }
        .           
        .               fn record_layout_for_printing_outlined(&self, layout: TyAndLayout<'tcx>) {
        .                   // Ignore layouts that are done with non-empty environments or
        .                   // non-monomorphic layouts, as the user only wants to see the stuff
        .                   // resulting from the final codegen session.
-- line 1771 ----------------------------------------
-- line 2041 ----------------------------------------
        .           
        .           pub trait HasParamEnv<'tcx> {
        .               fn param_env(&self) -> ty::ParamEnv<'tcx>;
        .           }
        .           
        .           impl<'tcx> HasDataLayout for TyCtxt<'tcx> {
        .               #[inline]
        .               fn data_layout(&self) -> &TargetDataLayout {
  586,558 ( 0.01%)          &self.data_layout
        .               }
        .           }
        .           
        .           impl<'tcx> HasTargetSpec for TyCtxt<'tcx> {
        .               fn target_spec(&self) -> &Target {
        .                   &self.sess.target
        .               }
        .           }
-- line 2057 ----------------------------------------
-- line 2080 ----------------------------------------
        .               #[inline]
        .               fn tcx(&self) -> TyCtxt<'tcx> {
        .                   **self
        .               }
        .           }
        .           
        .           impl<'tcx, C> HasParamEnv<'tcx> for LayoutCx<'tcx, C> {
        .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
       35 ( 0.00%)          self.param_env
        .               }
        .           }
        .           
        .           impl<'tcx, T: HasDataLayout> HasDataLayout for LayoutCx<'tcx, T> {
        .               fn data_layout(&self) -> &TargetDataLayout {
        .                   self.tcx.data_layout()
        .               }
        .           }
-- line 2096 ----------------------------------------
-- line 2098 ----------------------------------------
        .           impl<'tcx, T: HasTargetSpec> HasTargetSpec for LayoutCx<'tcx, T> {
        .               fn target_spec(&self) -> &Target {
        .                   self.tcx.target_spec()
        .               }
        .           }
        .           
        .           impl<'tcx, T: HasTyCtxt<'tcx>> HasTyCtxt<'tcx> for LayoutCx<'tcx, T> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
       35 ( 0.00%)          self.tcx.tcx()
        .               }
        .           }
        .           
        .           pub trait MaybeResult<T> {
        .               type Error;
        .           
        .               fn from(x: Result<T, Self::Error>) -> Self;
        .               fn to_result(self) -> Result<T, Self::Error>;
-- line 2114 ----------------------------------------
-- line 2124 ----------------------------------------
        .                   Ok(self)
        .               }
        .           }
        .           
        .           impl<T, E> MaybeResult<T> for Result<T, E> {
        .               type Error = E;
        .           
        .               fn from(x: Result<T, Self::Error>) -> Self {
  847,445 ( 0.02%)          x
        .               }
        .               fn to_result(self) -> Result<T, Self::Error> {
        .                   self
        .               }
        .           }
        .           
        .           pub type TyAndLayout<'tcx> = rustc_target::abi::TyAndLayout<'tcx, Ty<'tcx>>;
        .           
-- line 2140 ----------------------------------------
-- line 2167 ----------------------------------------
        .               ) -> <Self::LayoutOfResult as MaybeResult<TyAndLayout<'tcx>>>::Error;
        .           }
        .           
        .           /// Blanket extension trait for contexts that can compute layouts of types.
        .           pub trait LayoutOf<'tcx>: LayoutOfHelpers<'tcx> {
        .               /// Computes the layout of a type. Note that this implicitly
        .               /// executes in "reveal all" mode, and will normalize the input type.
        .               #[inline]
2,258,581 ( 0.06%)      fn layout_of(&self, ty: Ty<'tcx>) -> Self::LayoutOfResult {
        .                   self.spanned_layout_of(ty, DUMMY_SP)
2,258,552 ( 0.06%)      }
        .           
        .               /// Computes the layout of a type, at `span`. Note that this implicitly
        .               /// executes in "reveal all" mode, and will normalize the input type.
        .               // FIXME(eddyb) avoid passing information like this, and instead add more
        .               // `TyCtxt::at`-like APIs to be able to do e.g. `cx.at(span).layout_of(ty)`.
        .               #[inline]
        .               fn spanned_layout_of(&self, ty: Ty<'tcx>, span: Span) -> Self::LayoutOfResult {
        .                   let span = if !span.is_dummy() { span } else { self.layout_tcx_at_span() };
-- line 2185 ----------------------------------------
-- line 2268 ----------------------------------------
        .                       Variants::Multiple { ref variants, .. } => &variants[variant_index],
        .                   };
        .           
        .                   assert_eq!(layout.variants, Variants::Single { index: variant_index });
        .           
        .                   TyAndLayout { ty: this.ty, layout }
        .               }
        .           
2,339,625 ( 0.06%)      fn ty_and_layout_field(this: TyAndLayout<'tcx>, cx: &C, i: usize) -> TyAndLayout<'tcx> {
        .                   enum TyMaybeWithLayout<'tcx> {
        .                       Ty(Ty<'tcx>),
        .                       TyAndLayout(TyAndLayout<'tcx>),
        .                   }
        .           
1,871,700 ( 0.05%)          fn field_ty_or_layout<'tcx>(
        .                       this: TyAndLayout<'tcx>,
        .                       cx: &(impl HasTyCtxt<'tcx> + HasParamEnv<'tcx>),
        .                       i: usize,
        .                   ) -> TyMaybeWithLayout<'tcx> {
        .                       let tcx = cx.tcx();
        .                       let tag_layout = |tag: Scalar| -> TyAndLayout<'tcx> {
        .                           let layout = Layout::scalar(cx, tag);
        .                           TyAndLayout { layout: tcx.intern_layout(layout), ty: tag.value.to_ty(tcx) }
        .                       };
        .           
  467,925 ( 0.01%)              match *this.ty.kind() {
        .                           ty::Bool
        .                           | ty::Char
        .                           | ty::Int(_)
        .                           | ty::Uint(_)
        .                           | ty::Float(_)
        .                           | ty::FnPtr(_)
        .                           | ty::Never
        .                           | ty::FnDef(..)
-- line 2301 ----------------------------------------
-- line 2350 ----------------------------------------
        .                                       */
        .                                   }
        .                                   _ => bug!("TyAndLayout::field({:?}): not applicable", this),
        .                               }
        .                           }
        .           
        .                           // Arrays and slices.
        .                           ty::Array(element, _) | ty::Slice(element) => TyMaybeWithLayout::Ty(element),
    2,308 ( 0.00%)                  ty::Str => TyMaybeWithLayout::Ty(tcx.types.u8),
        .           
        .                           // Tuples, generators and closures.
        .                           ty::Closure(_, ref substs) => field_ty_or_layout(
        .                               TyAndLayout { ty: substs.as_closure().tupled_upvars_ty(), ..this },
        .                               cx,
        .                               i,
        .                           ),
        .           
-- line 2366 ----------------------------------------
-- line 2377 ----------------------------------------
        .                               Variants::Multiple { tag, tag_field, .. } => {
        .                                   if i == tag_field {
        .                                       return TyMaybeWithLayout::TyAndLayout(tag_layout(tag));
        .                                   }
        .                                   TyMaybeWithLayout::Ty(substs.as_generator().prefix_tys().nth(i).unwrap())
        .                               }
        .                           },
        .           
   21,000 ( 0.00%)                  ty::Tuple(tys) => TyMaybeWithLayout::Ty(tys[i].expect_ty()),
        .           
        .                           // ADTs.
   29,763 ( 0.00%)                  ty::Adt(def, substs) => {
   59,526 ( 0.00%)                      match this.variants {
   29,763 ( 0.00%)                          Variants::Single { index } => {
  119,052 ( 0.00%)                              TyMaybeWithLayout::Ty(def.variants[index].fields[i].ty(tcx, substs))
        .                                   }
        .           
        .                                   // Discriminant field for enums (where applicable).
        .                                   Variants::Multiple { tag, .. } => {
        .                                       assert_eq!(i, 0);
        .                                       return TyMaybeWithLayout::TyAndLayout(tag_layout(tag));
        .                                   }
        .                               }
-- line 2399 ----------------------------------------
-- line 2402 ----------------------------------------
        .                           ty::Projection(_)
        .                           | ty::Bound(..)
        .                           | ty::Placeholder(..)
        .                           | ty::Opaque(..)
        .                           | ty::Param(_)
        .                           | ty::Infer(_)
        .                           | ty::Error(_) => bug!("TyAndLayout::field: unexpected type `{}`", this.ty),
        .                       }
1,403,775 ( 0.04%)          }
        .           
  623,900 ( 0.02%)          match field_ty_or_layout(this, cx, i) {
  311,950 ( 0.01%)              TyMaybeWithLayout::Ty(field_ty) => {
        .                           cx.tcx().layout_of(cx.param_env().and(field_ty)).unwrap_or_else(|e| {
        .                               bug!(
        .                                   "failed to get layout for `{}`: {},\n\
        .                                    despite it being a field (#{}) of an existing layout: {:#?}",
        .                                   field_ty,
        .                                   e,
        .                                   i,
        .                                   this
        .                               )
        .                           })
        .                       }
        .                       TyMaybeWithLayout::TyAndLayout(field_layout) => field_layout,
        .                   }
1,247,800 ( 0.03%)      }
        .           
        .               fn ty_and_layout_pointee_info_at(
        .                   this: TyAndLayout<'tcx>,
        .                   cx: &C,
        .                   offset: Size,
        .               ) -> Option<PointeeInfo> {
        .                   let tcx = cx.tcx();
        .                   let param_env = cx.param_env();
-- line 2435 ----------------------------------------
-- line 2573 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> ty::Instance<'tcx> {
        .               // NOTE(eddyb) this is private to avoid using it from outside of
        .               // `fn_abi_of_instance` - any other uses are either too high-level
        .               // for `Instance` (e.g. typeck would use `Ty::fn_sig` instead),
        .               // or should go through `FnAbi` instead, to avoid losing any
        .               // adjustments `fn_abi_of_instance` might be performing.
       33 ( 0.00%)      fn fn_sig_for_fn_abi(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .               ) -> ty::PolyFnSig<'tcx> {
       18 ( 0.00%)          let ty = self.ty(tcx, param_env);
        9 ( 0.00%)          match *ty.kind() {
        .                       ty::FnDef(..) => {
        .                           // HACK(davidtwco,eddyb): This is a workaround for polymorphization considering
        .                           // parameters unused if they show up in the signature, but not in the `mir::Body`
        .                           // (i.e. due to being inside a projection that got normalized, see
        .                           // `src/test/ui/polymorphization/normalized_sig_types.rs`), and codegen not keeping
        .                           // track of a polymorphization `ParamEnv` to allow normalizing later.
        6 ( 0.00%)                  let mut sig = match *ty.kind() {
       21 ( 0.00%)                      ty::FnDef(def_id, substs) => tcx
        .                                   .normalize_erasing_regions(tcx.param_env(def_id), tcx.fn_sig(def_id))
        .                                   .subst(tcx, substs),
        .                               _ => unreachable!(),
        .                           };
        .           
        6 ( 0.00%)                  if let ty::InstanceDef::VtableShim(..) = self.def {
        .                               // Modify `fn(self, ...)` to `fn(self: *mut Self, ...)`.
        .                               sig = sig.map_bound(|mut sig| {
        .                                   let mut inputs_and_output = sig.inputs_and_output.to_vec();
        .                                   inputs_and_output[0] = tcx.mk_mut_ptr(inputs_and_output[0]);
        .                                   sig.inputs_and_output = tcx.intern_type_list(&inputs_and_output);
        .                                   sig
        .                               });
        .                           }
       24 ( 0.00%)                  sig
        .                       }
        .                       ty::Closure(def_id, substs) => {
        .                           let sig = substs.as_closure().sig();
        .           
        .                           let bound_vars = tcx.mk_bound_variable_kinds(
        .                               sig.bound_vars()
        .                                   .iter()
        .                                   .chain(iter::once(ty::BoundVariableKind::Region(ty::BrEnv))),
-- line 2618 ----------------------------------------
-- line 2669 ----------------------------------------
        .                                   hir::Unsafety::Normal,
        .                                   rustc_target::spec::abi::Abi::Rust,
        .                               ),
        .                               bound_vars,
        .                           )
        .                       }
        .                       _ => bug!("unexpected type {:?} in Instance::fn_sig", ty),
        .                   }
       27 ( 0.00%)      }
        .           }
        .           
        .           /// Calculates whether a function's ABI can unwind or not.
        .           ///
        .           /// This takes two primary parameters:
        .           ///
        .           /// * `codegen_fn_attr_flags` - these are flags calculated as part of the
        .           ///   codegen attrs for a defined function. For function pointers this set of
-- line 2685 ----------------------------------------
-- line 2725 ----------------------------------------
        .           /// might (from a foreign exception or similar).
        .           #[inline]
        .           pub fn fn_can_unwind<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               codegen_fn_attr_flags: CodegenFnAttrFlags,
        .               abi: SpecAbi,
        .           ) -> bool {
        .               // Special attribute for functions which can't unwind.
        6 ( 0.00%)      if codegen_fn_attr_flags.contains(CodegenFnAttrFlags::NEVER_UNWIND) {
        .                   return false;
        .               }
        .           
        .               // Otherwise if this isn't special then unwinding is generally determined by
        .               // the ABI of the itself. ABIs like `C` have variants which also
        .               // specifically allow unwinding (`C-unwind`), but not all platform-specific
        .               // ABIs have such an option. Otherwise the only other thing here is Rust
        .               // itself, and those ABIs are determined by the panic strategy configured
-- line 2741 ----------------------------------------
-- line 2767 ----------------------------------------
        .               // to `panic=abort`).
        .               //
        .               // Eventually the check against `c_unwind` here will ideally get removed and
        .               // this'll be a little cleaner as it'll be a straightforward check of the
        .               // ABI.
        .               //
        .               // [rfc]: https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md
        .               use SpecAbi::*;
       12 ( 0.00%)      match abi {
        .                   C { unwind } | Stdcall { unwind } | System { unwind } | Thiscall { unwind } => {
        .                       unwind
        .                           || (!tcx.features().c_unwind && tcx.sess.panic_strategy() == PanicStrategy::Unwind)
        .                   }
        .                   Cdecl
        .                   | Fastcall
        .                   | Vectorcall
        .                   | Aapcs
-- line 2783 ----------------------------------------
-- line 2797 ----------------------------------------
        .                   | Unadjusted => false,
        .                   Rust | RustCall => tcx.sess.panic_strategy() == PanicStrategy::Unwind,
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn conv_from_spec_abi(tcx: TyCtxt<'_>, abi: SpecAbi) -> Conv {
        .               use rustc_target::spec::abi::Abi::*;
       30 ( 0.00%)      match tcx.sess.target.adjust_abi(abi) {
        .                   RustIntrinsic | PlatformIntrinsic | Rust | RustCall => Conv::Rust,
        .           
        .                   // It's the ABI's job to select this, not ours.
        .                   System { .. } => bug!("system abi should be selected elsewhere"),
        .                   EfiApi => bug!("eficall abi should be selected elsewhere"),
        .           
        .                   Stdcall { .. } => Conv::X86Stdcall,
        .                   Fastcall => Conv::X86Fastcall,
-- line 2813 ----------------------------------------
-- line 2915 ----------------------------------------
        .               }
        .           
        .               /// Compute a `FnAbi` suitable for declaring/defining an `fn` instance, and for
        .               /// direct calls to an `fn`.
        .               ///
        .               /// NB: that includes virtual calls, which are represented by "direct calls"
        .               /// to an `InstanceDef::Virtual` instance (of `<dyn Trait as Trait>::fn`).
        .               #[inline]
  158,736 ( 0.00%)      fn fn_abi_of_instance(
        .                   &self,
        .                   instance: ty::Instance<'tcx>,
        .                   extra_args: &'tcx ty::List<Ty<'tcx>>,
        .               ) -> Self::FnAbiOfResult {
        .                   // FIXME(eddyb) get a better `span` here.
        .                   let span = self.layout_tcx_at_span();
        .                   let tcx = self.tcx().at(span);
        .           
        .                   MaybeResult::from(
   99,210 ( 0.00%)              tcx.fn_abi_of_instance(self.param_env().and((instance, extra_args))).map_err(|err| {
        .                           // HACK(eddyb) at least for definitions of/calls to `Instance`s,
        .                           // we can get some kind of span even if one wasn't provided.
        .                           // However, we don't do this early in order to avoid calling
        .                           // `def_span` unconditionally (which may have a perf penalty).
        .                           let span = if !span.is_dummy() { span } else { tcx.def_span(instance.def_id()) };
        .                           self.handle_fn_abi_err(err, span, FnAbiRequest::OfInstance { instance, extra_args })
        .                       }),
        .                   )
  158,736 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx, C: FnAbiOfHelpers<'tcx>> FnAbiOf<'tcx> for C {}
        .           
        .           fn fn_abi_of_fn_ptr<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               query: ty::ParamEnvAnd<'tcx, (ty::PolyFnSig<'tcx>, &'tcx ty::List<Ty<'tcx>>)>,
        .           ) -> Result<&'tcx FnAbi<'tcx, Ty<'tcx>>, FnAbiError<'tcx>> {
-- line 2950 ----------------------------------------
-- line 2954 ----------------------------------------
        .                   sig,
        .                   extra_args,
        .                   None,
        .                   CodegenFnAttrFlags::empty(),
        .                   false,
        .               )
        .           }
        .           
       27 ( 0.00%)  fn fn_abi_of_instance<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               query: ty::ParamEnvAnd<'tcx, (ty::Instance<'tcx>, &'tcx ty::List<Ty<'tcx>>)>,
        .           ) -> Result<&'tcx FnAbi<'tcx, Ty<'tcx>>, FnAbiError<'tcx>> {
       24 ( 0.00%)      let (param_env, (instance, extra_args)) = query.into_parts();
        .           
       12 ( 0.00%)      let sig = instance.fn_sig_for_fn_abi(tcx, param_env);
        .           
       15 ( 0.00%)      let caller_location = if instance.def.requires_caller_location(tcx) {
        .                   Some(tcx.caller_location_ty())
        .               } else {
        .                   None
        .               };
        .           
        3 ( 0.00%)      let attrs = tcx.codegen_fn_attrs(instance.def_id()).flags;
        .           
       24 ( 0.00%)      LayoutCx { tcx, param_env }.fn_abi_new_uncached(
       12 ( 0.00%)          sig,
        .                   extra_args,
        .                   caller_location,
        .                   attrs,
       15 ( 0.00%)          matches!(instance.def, ty::InstanceDef::Virtual(..)),
        .               )
       27 ( 0.00%)  }
        .           
        .           impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {
        .               // FIXME(eddyb) perhaps group the signature/type-containing (or all of them?)
        .               // arguments of this method, into a separate `struct`.
       39 ( 0.00%)      fn fn_abi_new_uncached(
        .                   &self,
        .                   sig: ty::PolyFnSig<'tcx>,
        .                   extra_args: &[Ty<'tcx>],
        .                   caller_location: Option<Ty<'tcx>>,
        .                   codegen_fn_attr_flags: CodegenFnAttrFlags,
        .                   // FIXME(eddyb) replace this with something typed, like an `enum`.
        .                   force_thin_self_ptr: bool,
        .               ) -> Result<&'tcx FnAbi<'tcx, Ty<'tcx>>, FnAbiError<'tcx>> {
        .                   debug!("fn_abi_new_uncached({:?}, {:?})", sig, extra_args);
        .           
       45 ( 0.00%)          let sig = self.tcx.normalize_erasing_late_bound_regions(self.param_env, sig);
        .           
        .                   let conv = conv_from_spec_abi(self.tcx(), sig.abi);
        .           
        .                   let mut inputs = sig.inputs();
        .                   let extra_args = if sig.abi == RustCall {
        .                       assert!(!sig.c_variadic && extra_args.is_empty());
        .           
        .                       if let Some(input) = sig.inputs().last() {
-- line 3009 ----------------------------------------
-- line 3018 ----------------------------------------
        .                           }
        .                       } else {
        .                           bug!(
        .                               "argument to function with \"rust-call\" ABI \
        .                                   is not a tuple"
        .                           );
        .                       }
        .                   } else {
       12 ( 0.00%)              assert!(sig.c_variadic || extra_args.is_empty());
        .                       extra_args.to_vec()
        .                   };
        .           
        3 ( 0.00%)          let target = &self.tcx.sess.target;
        9 ( 0.00%)          let target_env_gnu_like = matches!(&target.env[..], "gnu" | "musl" | "uclibc");
        9 ( 0.00%)          let win_x64_gnu = target.os == "windows" && target.arch == "x86_64" && target.env == "gnu";
        .                   let linux_s390x_gnu_like =
       12 ( 0.00%)              target.os == "linux" && target.arch == "s390x" && target_env_gnu_like;
        .                   let linux_sparc64_gnu_like =
       12 ( 0.00%)              target.os == "linux" && target.arch == "sparc64" && target_env_gnu_like;
        .                   let linux_powerpc_gnu_like =
       18 ( 0.00%)              target.os == "linux" && target.arch == "powerpc" && target_env_gnu_like;
        .                   use SpecAbi::*;
       12 ( 0.00%)          let rust_abi = matches!(sig.abi, RustIntrinsic | PlatformIntrinsic | Rust | RustCall);
        .           
        .                   // Handle safe Rust thin and fat pointers.
        3 ( 0.00%)          let adjust_for_rust_scalar = |attrs: &mut ArgAttributes,
        .                                                 scalar: Scalar,
        .                                                 layout: TyAndLayout<'tcx>,
        .                                                 offset: Size,
        .                                                 is_return: bool| {
        .                       // Booleans are always an i1 that needs to be zero-extended.
        .                       if scalar.is_bool() {
        .                           attrs.ext(ArgExtension::Zext);
        .                           return;
-- line 3051 ----------------------------------------
-- line 3100 ----------------------------------------
        .           
        .                               if kind == PointerKind::UniqueBorrowed && !is_return {
        .                                   attrs.set(ArgAttribute::NoAliasMutRef);
        .                               }
        .                           }
        .                       }
        .                   };
        .           
       45 ( 0.00%)          let arg_of = |ty: Ty<'tcx>, arg_idx: Option<usize>| -> Result<_, FnAbiError<'tcx>> {
        9 ( 0.00%)              let is_return = arg_idx.is_none();
        .           
       15 ( 0.00%)              let layout = self.layout_of(ty)?;
        9 ( 0.00%)              let layout = if force_thin_self_ptr && arg_idx == Some(0) {
        .                           // Don't pass the vtable, it's not an argument of the virtual fn.
        .                           // Instead, pass just the data pointer, but give it the type `*const/mut dyn Trait`
        .                           // or `&/&mut dyn Trait` because this is special-cased elsewhere in codegen
        .                           make_thin_self_ptr(self, layout)
        .                       } else {
        .                           layout
        .                       };
        .           
       36 ( 0.00%)              let mut arg = ArgAbi::new(self, layout, |layout, scalar, offset| {
        .                           let mut attrs = ArgAttributes::new();
        .                           adjust_for_rust_scalar(&mut attrs, scalar, *layout, offset, is_return);
        .                           attrs
        .                       });
        .           
        6 ( 0.00%)              if arg.layout.is_zst() {
        .                           // For some forsaken reason, x86_64-pc-windows-gnu
        .                           // doesn't ignore zero-sized struct arguments.
        .                           // The same is true for {s390x,sparc64,powerpc}-unknown-linux-{gnu,musl,uclibc}.
        .                           if is_return
        .                               || rust_abi
        .                               || (!win_x64_gnu
        .                                   && !linux_s390x_gnu_like
        .                                   && !linux_sparc64_gnu_like
        .                                   && !linux_powerpc_gnu_like)
        .                           {
        .                               arg.mode = PassMode::Ignore;
        .                           }
        .                       }
        .           
      129 ( 0.00%)              Ok(arg)
        .                   };
        .           
      123 ( 0.00%)          let mut fn_abi = FnAbi {
        .                       ret: arg_of(sig.output(), None)?,
        6 ( 0.00%)              args: inputs
        .                           .iter()
        .                           .cloned()
        .                           .chain(extra_args)
        .                           .chain(caller_location)
        .                           .enumerate()
        3 ( 0.00%)                  .map(|(i, ty)| arg_of(ty, Some(i)))
        .                           .collect::<Result<_, _>>()?,
        .                       c_variadic: sig.c_variadic,
        .                       fixed_count: inputs.len(),
        .                       conv,
        .                       can_unwind: fn_can_unwind(self.tcx(), codegen_fn_attr_flags, sig.abi),
        .                   };
        .                   self.fn_abi_adjust_for_abi(&mut fn_abi, sig.abi)?;
        .                   debug!("fn_abi_new_uncached = {:?}", fn_abi);
       12 ( 0.00%)          Ok(self.tcx.arena.alloc(fn_abi))
       24 ( 0.00%)      }
        .           
        .               fn fn_abi_adjust_for_abi(
        .                   &self,
        .                   fn_abi: &mut FnAbi<'tcx, Ty<'tcx>>,
        .                   abi: SpecAbi,
        .               ) -> Result<(), FnAbiError<'tcx>> {
        .                   if abi == SpecAbi::Unadjusted {
        .                       return Ok(());
        .                   }
        .           
        .                   if abi == SpecAbi::Rust
        .                       || abi == SpecAbi::RustCall
        .                       || abi == SpecAbi::RustIntrinsic
        .                       || abi == SpecAbi::PlatformIntrinsic
        .                   {
       36 ( 0.00%)              let fixup = |arg: &mut ArgAbi<'tcx, Ty<'tcx>>| {
        6 ( 0.00%)                  if arg.is_ignore() {
        .                               return;
        .                           }
        .           
       36 ( 0.00%)                  match arg.layout.abi {
        .                               Abi::Aggregate { .. } => {}
        .           
        .                               // This is a fun case! The gist of what this is doing is
        .                               // that we want callers and callees to always agree on the
        .                               // ABI of how they pass SIMD arguments. If we were to *not*
        .                               // make these arguments indirect then they'd be immediates
        .                               // in LLVM, which means that they'd used whatever the
        .                               // appropriate ABI is for the callee and the caller. That
-- line 3192 ----------------------------------------
-- line 3211 ----------------------------------------
        .                                   return;
        .                               }
        .           
        .                               _ => return,
        .                           }
        .           
        .                           // Pass and return structures up to 2 pointers in size by value, matching `ScalarPair`.
        .                           // LLVM will usually pass these in 2 registers, which is more efficient than by-ref.
        6 ( 0.00%)                  let max_by_val_size = Pointer.size(self) * 2;
        .                           let size = arg.layout.size;
        .           
       24 ( 0.00%)                  if arg.layout.is_unsized() || size > max_by_val_size {
        .                               arg.make_indirect();
        .                           } else {
        .                               // We want to pass small aggregates as immediates, but using
        .                               // a LLVM aggregate type for this leads to bad optimizations,
        .                               // so we pick an appropriately sized integer type instead.
        .                               arg.cast_to(Reg { kind: RegKind::Integer, size });
        .                           }
       30 ( 0.00%)              };
        3 ( 0.00%)              fixup(&mut fn_abi.ret);
        .                       for arg in &mut fn_abi.args {
       18 ( 0.00%)                  fixup(arg);
        .                       }
        .                   } else {
        .                       fn_abi.adjust_for_foreign_abi(self, abi)?;
        .                   }
        .           
        .                   Ok(())
        .               }
        .           }
-- line 3241 ----------------------------------------

   43,900 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/layout.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs
--------------------------------------------------------------------------------
Ir                 

-- line 28 ----------------------------------------
        .               PushRegionObligation,
        .           }
        .           
        .           macro_rules! impl_from {
        .               ($($ctor: ident ($ty: ty),)*) => {
        .                   $(
        .                   impl<'tcx> From<$ty> for UndoLog<'tcx> {
        .                       fn from(x: $ty) -> Self {
      514 ( 0.00%)                  UndoLog::$ctor(x.into())
        .                       }
        .                   }
        .                   )*
        .               }
        .           }
        .           
        .           // Upcast from a single kind of "undoable action" to the general enum
        .           impl_from! {
-- line 44 ----------------------------------------
-- line 57 ----------------------------------------
        .               ConstUnificationTable(sv::UndoLog<ut::Delegate<ty::ConstVid<'tcx>>>),
        .           
        .               RegionUnificationTable(sv::UndoLog<ut::Delegate<RegionVidKey<'tcx>>>),
        .               ProjectionCache(traits::UndoLog<'tcx>),
        .           }
        .           
        .           /// The Rollback trait defines how to rollback a particular action.
        .           impl<'tcx> Rollback<UndoLog<'tcx>> for InferCtxtInner<'tcx> {
  463,173 ( 0.01%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
  771,955 ( 0.02%)          match undo {
1,355,130 ( 0.03%)              UndoLog::TypeVariables(undo) => self.type_variable_storage.reverse(undo),
      404 ( 0.00%)              UndoLog::ConstUnificationTable(undo) => self.const_unification_storage.reverse(undo),
      734 ( 0.00%)              UndoLog::IntUnificationTable(undo) => self.int_unification_storage.reverse(undo),
        .                       UndoLog::FloatUnificationTable(undo) => self.float_unification_storage.reverse(undo),
        .                       UndoLog::RegionConstraintCollector(undo) => {
   68,180 ( 0.00%)                  self.region_constraint_storage.as_mut().unwrap().reverse(undo)
        .                       }
        .                       UndoLog::RegionUnificationTable(undo) => {
   17,002 ( 0.00%)                  self.region_constraint_storage.as_mut().unwrap().unification_table.reverse(undo)
        .                       }
        .                       UndoLog::ProjectionCache(undo) => self.projection_cache.reverse(undo),
        .                       UndoLog::PushRegionObligation => {
        .                           self.region_obligations.pop();
        .                       }
        .                   }
  617,564 ( 0.02%)      }
        .           }
        .           
        .           /// The combined undo log for all the various unification tables. For each change to the storage
        .           /// for any kind of inference variable, we record an UndoLog entry in the vector here.
        .           pub(crate) struct InferCtxtUndoLogs<'tcx> {
        .               logs: Vec<UndoLog<'tcx>>,
        .               num_open_snapshots: usize,
        .           }
        .           
        .           impl Default for InferCtxtUndoLogs<'_> {
        .               fn default() -> Self {
    6,930 ( 0.00%)          Self { logs: Default::default(), num_open_snapshots: Default::default() }
        .               }
        .           }
        .           
        .           /// The UndoLogs trait defines how we undo a particular kind of action (of type T). We can undo any
        .           /// action that is convertable into an UndoLog (per the From impls above).
        .           impl<'tcx, T> UndoLogs<T> for InferCtxtUndoLogs<'tcx>
        .           where
        .               UndoLog<'tcx>: From<T>,
-- line 102 ----------------------------------------
-- line 103 ----------------------------------------
        .           {
        .               #[inline]
        .               fn num_open_snapshots(&self) -> usize {
        .                   self.num_open_snapshots
        .               }
        .           
        .               #[inline]
        .               fn push(&mut self, undo: T) {
   50,726 ( 0.00%)          if self.in_snapshot() {
    4,112 ( 0.00%)              self.logs.push(undo.into())
        .                   }
        .               }
        .           
        .               fn clear(&mut self) {
        .                   self.logs.clear();
        .                   self.num_open_snapshots = 0;
        .               }
        .           
-- line 120 ----------------------------------------
-- line 125 ----------------------------------------
        .               {
        .                   if self.in_snapshot() {
        .                       self.logs.extend(undos.into_iter().map(UndoLog::from))
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> InferCtxtInner<'tcx> {
  436,524 ( 0.01%)      pub fn rollback_to(&mut self, snapshot: Snapshot<'tcx>) {
        .                   debug!("rollback_to({})", snapshot.undo_len);
        .                   self.undo_log.assert_open_snapshot(&snapshot);
        .           
  608,681 ( 0.02%)          while self.undo_log.logs.len() > snapshot.undo_len {
        .                       let undo = self.undo_log.logs.pop().unwrap();
1,852,692 ( 0.05%)              self.reverse(undo);
        .                   }
        .           
  171,105 ( 0.00%)          if self.undo_log.num_open_snapshots == 1 {
        .                       // The root snapshot. It's safe to clear the undo log because
        .                       // there's no snapshot further out that we might need to roll back
        .                       // to.
   67,470 ( 0.00%)              assert!(snapshot.undo_len == 0);
        .                       self.undo_log.logs.clear();
        .                   }
        .           
  251,997 ( 0.01%)          self.undo_log.num_open_snapshots -= 1;
  509,278 ( 0.01%)      }
        .           
        .               pub fn commit(&mut self, snapshot: Snapshot<'tcx>) {
        .                   debug!("commit({})", snapshot.undo_len);
        .           
  561,804 ( 0.01%)          if self.undo_log.num_open_snapshots == 1 {
        .                       // The root snapshot. It's safe to clear the undo log because
        .                       // there's no snapshot further out that we might need to roll back
        .                       // to.
  116,862 ( 0.00%)              assert!(snapshot.undo_len == 0);
        .                       self.undo_log.logs.clear();
        .                   }
        .           
  620,235 ( 0.02%)          self.undo_log.num_open_snapshots -= 1;
        .               }
        .           }
        .           
        .           impl<'tcx> InferCtxtUndoLogs<'tcx> {
        .               pub fn start_snapshot(&mut self) -> Snapshot<'tcx> {
1,040,088 ( 0.03%)          self.num_open_snapshots += 1;
        .                   Snapshot { undo_len: self.logs.len(), _marker: PhantomData }
        .               }
        .           
        .               pub(crate) fn region_constraints_in_snapshot(
        .                   &self,
        .                   s: &Snapshot<'tcx>,
        .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
    4,530 ( 0.00%)          self.logs[s.undo_len..].iter().filter_map(|log| match log {
        .                       UndoLog::RegionConstraintCollector(log) => Some(log),
        .                       _ => None,
        .                   })
        .               }
        .           
        .               pub(crate) fn region_constraints(
        .                   &self,
        .               ) -> impl Iterator<Item = &'_ region_constraints::UndoLog<'tcx>> + Clone {
-- line 186 ----------------------------------------
-- line 187 ----------------------------------------
        .                   self.logs.iter().filter_map(|log| match log {
        .                       UndoLog::RegionConstraintCollector(log) => Some(log),
        .                       _ => None,
        .                   })
        .               }
        .           
        .               fn assert_open_snapshot(&self, snapshot: &Snapshot<'tcx>) {
        .                   // Failures here may indicate a failure to follow a stack discipline.
  218,262 ( 0.01%)          assert!(self.logs.len() >= snapshot.undo_len);
  218,262 ( 0.01%)          assert!(self.num_open_snapshots > 0);
        .               }
        .           }
        .           
        .           impl<'tcx> std::ops::Index<usize> for InferCtxtUndoLogs<'tcx> {
        .               type Output = UndoLog<'tcx>;
        .           
        .               fn index(&self, key: usize) -> &Self::Output {
        .                   &self.logs[key]
-- line 204 ----------------------------------------

  267,137 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/undo_log.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 26 ----------------------------------------
        .           pub struct UnmatchedBrace {
        .               pub expected_delim: token::DelimToken,
        .               pub found_delim: Option<token::DelimToken>,
        .               pub found_span: Span,
        .               pub unclosed_span: Option<Span>,
        .               pub candidate_span: Option<Span>,
        .           }
        .           
       28 ( 0.00%)  crate fn parse_token_trees<'a>(
        .               sess: &'a ParseSess,
        .               src: &'a str,
        .               start_pos: BytePos,
        .               override_span: Option<Span>,
        .           ) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
        .               StringReader { sess, start_pos, pos: start_pos, end_src_index: src.len(), src, override_span }
        .                   .into_token_trees()
       18 ( 0.00%)  }
        .           
        .           struct StringReader<'a> {
        .               sess: &'a ParseSess,
        .               /// Initial position, read-only.
        .               start_pos: BytePos,
        .               /// The absolute offset within the source_map of the current character.
        .               pos: BytePos,
        .               /// Stop reading src at this index.
-- line 50 ----------------------------------------
-- line 51 ----------------------------------------
        .               end_src_index: usize,
        .               /// Source text to tokenize.
        .               src: &'a str,
        .               override_span: Option<Span>,
        .           }
        .           
        .           impl<'a> StringReader<'a> {
        .               fn mk_sp(&self, lo: BytePos, hi: BytePos) -> Span {
  171,263 ( 0.00%)          self.override_span.unwrap_or_else(|| Span::with_root_ctxt(lo, hi))
        .               }
        .           
        .               /// Returns the next token, and info about preceding whitespace, if any.
1,044,365 ( 0.03%)      fn next_token(&mut self) -> (Spacing, Token) {
        .                   let mut spacing = Spacing::Joint;
        .           
        .                   // Skip `#!` at the start of the file
  298,390 ( 0.01%)          let start_src_index = self.src_index(self.pos);
  447,585 ( 0.01%)          let text: &str = &self.src[start_src_index..self.end_src_index];
        .                   let is_beginning_of_file = self.pos == self.start_pos;
  149,195 ( 0.00%)          if is_beginning_of_file {
        8 ( 0.00%)              if let Some(shebang_len) = rustc_lexer::strip_shebang(text) {
        .                           self.pos = self.pos + BytePos::from_usize(shebang_len);
        .                           spacing = Spacing::Alone;
        .                       }
        .                   }
        .           
        .                   // Skip trivial (whitespace & comments) tokens
        .                   loop {
  218,177 ( 0.01%)              let start_src_index = self.src_index(self.pos);
  551,058 ( 0.01%)              let text: &str = &self.src[start_src_index..self.end_src_index];
        .           
  183,686 ( 0.00%)              if text.is_empty() {
        .                           let span = self.mk_sp(self.pos, self.pos);
       10 ( 0.00%)                  return (spacing, Token::new(token::Eof, span));
        .                       }
        .           
  551,052 ( 0.01%)              let token = rustc_lexer::first_token(text);
        .           
  367,368 ( 0.01%)              let start = self.pos;
  183,684 ( 0.00%)              self.pos = self.pos + BytePos::from_usize(token.len);
        .           
        .                       debug!("next_token: {:?}({:?})", token.kind, self.str_from(start));
        .           
1,470,540 ( 0.04%)              match self.cook_lexer_token(token.kind, start) {
1,193,544 ( 0.03%)                  Some(kind) => {
        .                               let span = self.mk_sp(start, self.pos);
  895,158 ( 0.02%)                      return (spacing, Token::new(kind, span));
        .                           }
        .                           None => spacing = Spacing::Alone,
        .                       }
        .                   }
1,342,755 ( 0.03%)      }
        .           
        .               /// Report a fatal lexical error with a given span.
        .               fn fatal_span(&self, sp: Span, m: &str) -> FatalError {
        .                   self.sess.span_diagnostic.span_fatal(sp, m)
        .               }
        .           
        .               /// Report a lexical error with a given span.
        .               fn err_span(&self, sp: Span, m: &str) {
-- line 110 ----------------------------------------
-- line 130 ----------------------------------------
        .               ) -> DiagnosticBuilder<'a> {
        .                   self.sess
        .                       .span_diagnostic
        .                       .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!("{}: {}", m, escaped_char(c)))
        .               }
        .           
        .               /// Detect usages of Unicode codepoints changing the direction of the text on screen and loudly
        .               /// complain about it.
      294 ( 0.00%)      fn lint_unicode_text_flow(&self, start: BytePos) {
        .                   // Opening delimiter of the length 2 is not included into the comment text.
        .                   let content_start = start + BytePos(2);
        .                   let content = self.str_from(content_start);
        .                   if contains_text_flow_control_chars(content) {
        .                       let span = self.mk_sp(start, self.pos);
        .                       self.sess.buffer_lint_with_diagnostic(
        .                           &TEXT_DIRECTION_CODEPOINT_IN_COMMENT,
        .                           span,
        .                           ast::CRATE_NODE_ID,
        .                           "unicode codepoint changing visible direction of text present in comment",
        .                           BuiltinLintDiagnostics::UnicodeTextFlow(span, content.to_string()),
        .                       );
        .                   }
      336 ( 0.00%)      }
        .           
        .               /// Turns simple `rustc_lexer::TokenKind` enum into a rich
        .               /// `rustc_ast::TokenKind`. This turns strings into interned
        .               /// symbols and runs additional validation.
        .               fn cook_lexer_token(&self, token: rustc_lexer::TokenKind, start: BytePos) -> Option<TokenKind> {
  918,420 ( 0.02%)          Some(match token {
      309 ( 0.00%)              rustc_lexer::TokenKind::LineComment { doc_style } => {
        .                           // Skip non-doc comments
    1,419 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
        .                               doc_style
        .                           } else {
        .                               self.lint_unicode_text_flow(start);
        .                               return None;
        .                           };
        .           
        .                           // Opening delimiter of the length 3 is not included into the symbol.
        .                           let content_start = start + BytePos(3);
        .                           let content = self.str_from(content_start);
    1,335 ( 0.00%)                  self.cook_doc_comment(content_start, content, CommentKind::Line, doc_style)
        .                       }
        .                       rustc_lexer::TokenKind::BlockComment { doc_style, terminated } => {
        .                           if !terminated {
        .                               let msg = match doc_style {
        .                                   Some(_) => "unterminated block doc-comment",
        .                                   None => "unterminated block comment",
        .                               };
        .                               let last_bpos = self.pos;
-- line 179 ----------------------------------------
-- line 198 ----------------------------------------
        .                           let content_end = self.pos - BytePos(if terminated { 2 } else { 0 });
        .                           let content = self.str_from_to(content_start, content_end);
        .                           self.cook_doc_comment(content_start, content, CommentKind::Block, doc_style)
        .                       }
        .                       rustc_lexer::TokenKind::Whitespace => return None,
        .                       rustc_lexer::TokenKind::Ident
        .                       | rustc_lexer::TokenKind::RawIdent
        .                       | rustc_lexer::TokenKind::UnknownPrefix => {
   88,264 ( 0.00%)                  let is_raw_ident = token == rustc_lexer::TokenKind::RawIdent;
  110,330 ( 0.00%)                  let is_unknown_prefix = token == rustc_lexer::TokenKind::UnknownPrefix;
        .                           let mut ident_start = start;
   44,132 ( 0.00%)                  if is_raw_ident {
        .                               ident_start = ident_start + BytePos(2);
        .                           }
   66,198 ( 0.00%)                  if is_unknown_prefix {
        .                               self.report_unknown_prefix(start);
        .                           }
  110,330 ( 0.00%)                  let sym = nfc_normalize(self.str_from(ident_start));
        .                           let span = self.mk_sp(start, self.pos);
   88,264 ( 0.00%)                  self.sess.symbol_gallery.insert(sym, span);
   44,132 ( 0.00%)                  if is_raw_ident {
        .                               if !sym.can_be_raw() {
        .                                   self.err_span(span, &format!("`{}` cannot be a raw identifier", sym));
        .                               }
        .                               self.sess.raw_identifier_spans.borrow_mut().push(span);
        .                           }
  154,462 ( 0.00%)                  token::Ident(sym, is_raw_ident)
        .                       }
        .                       rustc_lexer::TokenKind::InvalidIdent
        .                           // Do not recover an identifier with emoji if the codepoint is a confusable
        .                           // with a recoverable substitution token, like `➖`.
        .                           if UNICODE_ARRAY
        .                               .iter()
        .                               .find(|&&(c, _, _)| {
        .                                   let sym = self.str_from(start);
-- line 232 ----------------------------------------
-- line 234 ----------------------------------------
        .                               })
        .                               .is_none() =>
        .                       {
        .                           let sym = nfc_normalize(self.str_from(start));
        .                           let span = self.mk_sp(start, self.pos);
        .                           self.sess.bad_unicode_identifiers.borrow_mut().entry(sym).or_default().push(span);
        .                           token::Ident(sym, false)
        .                       }
  493,696 ( 0.01%)              rustc_lexer::TokenKind::Literal { kind, suffix_start } => {
        .                           let suffix_start = start + BytePos(suffix_start as u32);
        .                           let (kind, symbol) = self.cook_lexer_literal(start, suffix_start, kind);
   92,568 ( 0.00%)                  let suffix = if suffix_start < self.pos {
        .                               let string = self.str_from(suffix_start);
        .                               if string == "_" {
        .                                   self.sess
        .                                       .span_diagnostic
        .                                       .struct_span_warn(
        .                                           self.mk_sp(suffix_start, self.pos),
        .                                           "underscore literal suffix is not allowed",
        .                                       )
-- line 253 ----------------------------------------
-- line 264 ----------------------------------------
        .                                       .emit();
        .                                   None
        .                               } else {
        .                                   Some(Symbol::intern(string))
        .                               }
        .                           } else {
        .                               None
        .                           };
  246,848 ( 0.01%)                  token::Literal(token::Lit { kind, symbol, suffix })
        .                       }
       76 ( 0.00%)              rustc_lexer::TokenKind::Lifetime { starts_with_number } => {
        .                           // Include the leading `'` in the real identifier, for macro
        .                           // expansion purposes. See #12512 for the gory details of why
        .                           // this is necessary.
        .                           let lifetime_name = self.str_from(start);
       38 ( 0.00%)                  if starts_with_number {
        .                               self.err_span_(start, self.pos, "lifetimes cannot start with a number");
        .                           }
      114 ( 0.00%)                  let ident = Symbol::intern(lifetime_name);
      152 ( 0.00%)                  token::Lifetime(ident)
        .                       }
        .                       rustc_lexer::TokenKind::Semi => token::Semi,
        .                       rustc_lexer::TokenKind::Comma => token::Comma,
        .                       rustc_lexer::TokenKind::Dot => token::Dot,
        .                       rustc_lexer::TokenKind::OpenParen => token::OpenDelim(token::Paren),
        .                       rustc_lexer::TokenKind::CloseParen => token::CloseDelim(token::Paren),
        .                       rustc_lexer::TokenKind::OpenBrace => token::OpenDelim(token::Brace),
        .                       rustc_lexer::TokenKind::CloseBrace => token::CloseDelim(token::Brace),
-- line 291 ----------------------------------------
-- line 324 ----------------------------------------
        .                               err.help("source files must contain UTF-8 encoded text, unexpected null bytes might occur when a different encoding is used");
        .                           }
        .                           err.emit();
        .                           token?
        .                       }
        .                   })
        .               }
        .           
    3,204 ( 0.00%)      fn cook_doc_comment(
        .                   &self,
        .                   content_start: BytePos,
        .                   content: &str,
        .                   comment_kind: CommentKind,
        .                   doc_style: DocStyle,
        .               ) -> TokenKind {
      267 ( 0.00%)          if content.contains('\r') {
        .                       for (idx, _) in content.char_indices().filter(|&(_, c)| c == '\r') {
        .                           self.err_span_(
        .                               content_start + BytePos(idx as u32),
        .                               content_start + BytePos(idx as u32 + 1),
        .                               match comment_kind {
        .                                   CommentKind::Line => "bare CR not allowed in doc-comment",
        .                                   CommentKind::Block => "bare CR not allowed in block doc-comment",
        .                               },
-- line 347 ----------------------------------------
-- line 349 ----------------------------------------
        .                       }
        .                   }
        .           
        .                   let attr_style = match doc_style {
        .                       DocStyle::Outer => AttrStyle::Outer,
        .                       DocStyle::Inner => AttrStyle::Inner,
        .                   };
        .           
      801 ( 0.00%)          token::DocComment(comment_kind, attr_style, Symbol::intern(content))
    4,005 ( 0.00%)      }
        .           
        .               fn cook_lexer_literal(
        .                   &self,
        .                   start: BytePos,
        .                   suffix_start: BytePos,
        .                   kind: rustc_lexer::LiteralKind,
        .               ) -> (token::LitKind, Symbol) {
        .                   // prefix means `"` or `br"` or `r###"`, ...
        .                   let (lit_kind, mode, prefix_len, postfix_len) = match kind {
   30,138 ( 0.00%)              rustc_lexer::LiteralKind::Char { terminated } => {
   30,138 ( 0.00%)                  if !terminated {
        .                               self.sess.span_diagnostic.span_fatal_with_code(
        .                                   self.mk_sp(start, suffix_start),
        .                                   "unterminated character literal",
        .                                   error_code!(E0762),
        .                               )
        .                           }
        .                           (token::Char, Mode::Char, 1, 1) // ' '
        .                       }
        5 ( 0.00%)              rustc_lexer::LiteralKind::Byte { terminated } => {
        5 ( 0.00%)                  if !terminated {
        .                               self.sess.span_diagnostic.span_fatal_with_code(
        .                                   self.mk_sp(start + BytePos(1), suffix_start),
        .                                   "unterminated byte constant",
        .                                   error_code!(E0763),
        .                               )
        .                           }
        .                           (token::Byte, Mode::Byte, 2, 1) // b' '
        .                       }
      616 ( 0.00%)              rustc_lexer::LiteralKind::Str { terminated } => {
      616 ( 0.00%)                  if !terminated {
        .                               self.sess.span_diagnostic.span_fatal_with_code(
        .                                   self.mk_sp(start, suffix_start),
        .                                   "unterminated double quote string",
        .                                   error_code!(E0765),
        .                               )
        .                           }
        .                           (token::Str, Mode::Str, 1, 1) // " "
        .                       }
-- line 397 ----------------------------------------
-- line 410 ----------------------------------------
        .                           let n = u32::from(n_hashes);
        .                           (token::StrRaw(n_hashes), Mode::RawStr, 2 + n, 1 + n) // r##" "##
        .                       }
        .                       rustc_lexer::LiteralKind::RawByteStr { n_hashes, err } => {
        .                           self.report_raw_str_error(start, err);
        .                           let n = u32::from(n_hashes);
        .                           (token::ByteStrRaw(n_hashes), Mode::RawByteStr, 3 + n, 1 + n) // br##" "##
        .                       }
      194 ( 0.00%)              rustc_lexer::LiteralKind::Int { base, empty_int } => {
       97 ( 0.00%)                  return if empty_int {
        .                               self.sess
        .                                   .span_diagnostic
        .                                   .struct_span_err_with_code(
        .                                       self.mk_sp(start, suffix_start),
        .                                       "no valid digits found for number",
        .                                       error_code!(E0768),
        .                                   )
        .                                   .emit();
        .                               (token::Integer, sym::integer(0))
        .                           } else {
        .                               self.validate_int_literal(base, start, suffix_start);
      291 ( 0.00%)                      (token::Integer, self.symbol_from_to(start, suffix_start))
        .                           };
        .                       }
        .                       rustc_lexer::LiteralKind::Float { base, empty_exponent } => {
        .                           if empty_exponent {
        .                               self.err_span_(start, self.pos, "expected at least one digit in exponent");
        .                           }
        .           
        .                           match base {
-- line 439 ----------------------------------------
-- line 452 ----------------------------------------
        .                           }
        .           
        .                           let id = self.symbol_from_to(start, suffix_start);
        .                           return (token::Float, id);
        .                       }
        .                   };
        .                   let content_start = start + BytePos(prefix_len);
        .                   let content_end = suffix_start - BytePos(postfix_len);
   92,277 ( 0.00%)          let id = self.symbol_from_to(content_start, content_end);
        .                   self.validate_literal_escape(mode, content_start, content_end, prefix_len, postfix_len);
        .                   (lit_kind, id)
        .               }
        .           
        .               #[inline]
        .               fn src_index(&self, pos: BytePos) -> usize {
        .                   (pos - self.start_pos).to_usize()
        .               }
        .           
        .               /// Slice of the source text from `start` up to but excluding `self.pos`,
        .               /// meaning the slice does not include the character `self.ch`.
        .               fn str_from(&self, start: BytePos) -> &str {
  135,073 ( 0.00%)          self.str_from_to(start, self.pos)
        .               }
        .           
        .               /// As symbol_from, with an explicit endpoint.
        .               fn symbol_from_to(&self, start: BytePos, end: BytePos) -> Symbol {
        .                   debug!("taking an ident from {:?} to {:?}", start, end);
  369,787 ( 0.01%)          Symbol::intern(self.str_from_to(start, end))
        .               }
        .           
        .               /// Slice of the source text spanning from `start` up to but excluding `end`.
   84,028 ( 0.00%)      fn str_from_to(&self, start: BytePos, end: BytePos) -> &str {
        .                   &self.src[self.src_index(start)..self.src_index(end)]
  336,112 ( 0.01%)      }
        .           
        .               fn report_raw_str_error(&self, start: BytePos, opt_err: Option<RawStrError>) {
        .                   match opt_err {
        .                       Some(RawStrError::InvalidStarter { bad_char }) => {
        .                           self.report_non_started_raw_string(start, bad_char)
        .                       }
        .                       Some(RawStrError::NoTerminator { expected, found, possible_terminator_offset }) => self
        .                           .report_unterminated_raw_string(start, expected, possible_terminator_offset, found),
-- line 493 ----------------------------------------
-- line 609 ----------------------------------------
        .               fn validate_literal_escape(
        .                   &self,
        .                   mode: Mode,
        .                   content_start: BytePos,
        .                   content_end: BytePos,
        .                   prefix_len: u32,
        .                   postfix_len: u32,
        .               ) {
  184,554 ( 0.00%)          let lit_content = self.str_from_to(content_start, content_end);
  948,866 ( 0.02%)          unescape::unescape_literal(lit_content, mode, &mut |range, result| {
        .                       // Here we only check for errors. The actual unescaping is done later.
   68,042 ( 0.00%)              if let Err(err) = result {
        .                           let span_with_quotes = self
        .                               .mk_sp(content_start - BytePos(prefix_len), content_end + BytePos(postfix_len));
        .                           let (start, end) = (range.start as u32, range.end as u32);
        .                           let lo = content_start + BytePos(start);
        .                           let hi = lo + BytePos(end - start);
        .                           let span = self.mk_sp(lo, hi);
        .                           emit_unescape_error(
        .                               &self.sess.span_diagnostic,
-- line 628 ----------------------------------------
-- line 629 ----------------------------------------
        .                               lit_content,
        .                               span_with_quotes,
        .                               span,
        .                               mode,
        .                               range,
        .                               err,
        .                           );
        .                       }
  306,189 ( 0.01%)          });
        .               }
        .           
        .               fn validate_int_literal(&self, base: Base, content_start: BytePos, content_end: BytePos) {
      388 ( 0.00%)          let base = match base {
        .                       Base::Binary => 2,
        .                       Base::Octal => 8,
        .                       _ => return,
        .                   };
        .                   let s = self.str_from_to(content_start + BytePos(2), content_end);
        .                   for (idx, c) in s.char_indices() {
        .                       let idx = idx as u32;
        .                       if c != '_' && c.to_digit(base).is_none() {
-- line 649 ----------------------------------------
-- line 650 ----------------------------------------
        .                           let lo = content_start + BytePos(2 + idx);
        .                           let hi = content_start + BytePos(2 + idx + c.len_utf8() as u32);
        .                           self.err_span_(lo, hi, &format!("invalid digit for a base {} literal", base));
        .                       }
        .                   }
        .               }
        .           }
        .           
  198,594 ( 0.01%)  pub fn nfc_normalize(string: &str) -> Symbol {
        .               use unicode_normalization::{is_nfc_quick, IsNormalized, UnicodeNormalization};
   44,132 ( 0.00%)      match is_nfc_quick(string.chars()) {
  220,660 ( 0.01%)          IsNormalized::Yes => Symbol::intern(string),
        .                   _ => {
        .                       let normalized_str: String = string.chars().nfc().collect();
        .                       Symbol::intern(&normalized_str)
        .                   }
        .               }
        .           }

  907,733 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/vec_deque/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 126 ----------------------------------------
        .                           self.extend(remainder.iter().cloned());
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for VecDeque<T, A> {
    2,282 ( 0.00%)      fn drop(&mut self) {
        .                   /// Runs the destructor for all items in the slice when it gets dropped (normally or
        .                   /// during unwinding).
        .                   struct Dropper<'a, T>(&'a mut [T]);
        .           
        .                   impl<'a, T> Drop for Dropper<'a, T> {
        .                       fn drop(&mut self) {
        .                           unsafe {
        .                               ptr::drop_in_place(self.0);
-- line 142 ----------------------------------------
-- line 146 ----------------------------------------
        .           
        .                   let (front, back) = self.as_mut_slices();
        .                   unsafe {
        .                       let _back_dropper = Dropper(back);
        .                       // use drop for [T]
        .                       ptr::drop_in_place(front);
        .                   }
        .                   // RawVec handles deallocation
    2,608 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> Default for VecDeque<T> {
        .               /// Creates an empty `VecDeque<T>`.
        .               #[inline]
        .               fn default() -> VecDeque<T> {
        .                   VecDeque::new()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> VecDeque<T, A> {
        .               /// Marginally more convenient
        .               #[inline]
        .               fn ptr(&self) -> *mut T {
  735,402 ( 0.02%)          self.buf.ptr()
        .               }
        .           
        .               /// Marginally more convenient
        .               #[inline]
        .               fn cap(&self) -> usize {
        .                   if mem::size_of::<T>() == 0 {
        .                       // For zero sized types, we are always at maximum capacity
        .                       MAXIMUM_ZST_CAPACITY
        .                   } else {
  782,676 ( 0.02%)              self.buf.capacity()
        .                   }
        .               }
        .           
        .               /// Turn ptr into a slice
        .               #[inline]
        .               unsafe fn buffer_as_slice(&self) -> &[T] {
        .                   unsafe { slice::from_raw_parts(self.ptr(), self.cap()) }
        .               }
-- line 188 ----------------------------------------
-- line 191 ----------------------------------------
        .               #[inline]
        .               unsafe fn buffer_as_mut_slice(&mut self) -> &mut [T] {
        .                   unsafe { slice::from_raw_parts_mut(self.ptr(), self.cap()) }
        .               }
        .           
        .               /// Moves an element out of the buffer
        .               #[inline]
        .               unsafe fn buffer_read(&mut self, off: usize) -> T {
  248,749 ( 0.01%)          unsafe { ptr::read(self.ptr().add(off)) }
        .               }
        .           
        .               /// Writes an element into the buffer, moving it.
        .               #[inline]
        .               unsafe fn buffer_write(&mut self, off: usize, value: T) {
        .                   unsafe {
        .                       ptr::write(self.ptr().add(off), value);
        .                   }
        .               }
        .           
        .               /// Returns `true` if the buffer is at full capacity.
        .               #[inline]
        .               fn is_full(&self) -> bool {
2,064,249 ( 0.05%)          self.cap() - self.len() == 1
        .               }
        .           
        .               /// Returns the index in the underlying buffer for a given logical element
        .               /// index.
        .               #[inline]
        .               fn wrap_index(&self, idx: usize) -> usize {
        .                   wrap_index(idx, self.cap())
        .               }
-- line 221 ----------------------------------------
-- line 452 ----------------------------------------
        .                   //   [o o . o o o o o ]
        .                   //          T             H
        .                   // B [. . . o o o o o o o . . . . . . ]
        .                   //              H T
        .                   //   [o o o o o . o o ]
        .                   //              H                 T
        .                   // C [o o o o o . . . . . . . . . o o ]
        .           
      312 ( 0.00%)          if self.tail <= self.head {
        .                       // A
        .                       // Nop
       10 ( 0.00%)          } else if self.head < old_capacity - self.tail {
        .                       // B
        .                       unsafe {
        .                           self.copy_nonoverlapping(old_capacity, 0, self.head);
        .                       }
        4 ( 0.00%)              self.head += old_capacity;
        .                       debug_assert!(self.head > self.tail);
        .                   } else {
        .                       // C
        2 ( 0.00%)              let new_tail = new_capacity - (old_capacity - self.tail);
        .                       unsafe {
        .                           self.copy_nonoverlapping(new_tail, self.tail, old_capacity - self.tail);
        .                       }
        1 ( 0.00%)              self.tail = new_tail;
        .                       debug_assert!(self.head < self.tail);
        .                   }
        .                   debug_assert!(self.head < self.cap());
        .                   debug_assert!(self.tail < self.cap());
        .                   debug_assert!(self.cap().count_ones() == 1);
        .               }
        .           }
        .           
-- line 484 ----------------------------------------
-- line 507 ----------------------------------------
        .               /// use std::collections::VecDeque;
        .               ///
        .               /// let vector: VecDeque<u32> = VecDeque::with_capacity(10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub fn with_capacity(capacity: usize) -> VecDeque<T> {
    1,358 ( 0.00%)          Self::with_capacity_in(capacity, Global)
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> VecDeque<T, A> {
        .               /// Creates an empty `VecDeque`.
        .               ///
        .               /// # Examples
        .               ///
-- line 523 ----------------------------------------
-- line 524 ----------------------------------------
        .               /// ```
        .               /// use std::collections::VecDeque;
        .               ///
        .               /// let vector: VecDeque<u32> = VecDeque::new();
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn new_in(alloc: A) -> VecDeque<T, A> {
      360 ( 0.00%)          VecDeque::with_capacity_in(INITIAL_CAPACITY, alloc)
        .               }
        .           
        .               /// Creates an empty `VecDeque` with space for at least `capacity` elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::collections::VecDeque;
        .               ///
        .               /// let vector: VecDeque<u32> = VecDeque::with_capacity(10);
        .               /// ```
        .               #[unstable(feature = "allocator_api", issue = "32838")]
    3,436 ( 0.00%)      pub fn with_capacity_in(capacity: usize, alloc: A) -> VecDeque<T, A> {
    2,018 ( 0.00%)          assert!(capacity < 1_usize << usize::BITS - 1, "capacity overflow");
        .                   // +1 since the ringbuffer always leaves one space empty
        .                   let cap = cmp::max(capacity + 1, MINIMUM_CAPACITY + 1).next_power_of_two();
        .           
    4,952 ( 0.00%)          VecDeque { tail: 0, head: 0, buf: RawVec::with_capacity_in(cap, alloc) }
    5,154 ( 0.00%)      }
        .           
        .               /// Provides a reference to the element at the given index.
        .               ///
        .               /// Element at index 0 is the front of the queue.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 559 ----------------------------------------
-- line 562 ----------------------------------------
        .               /// let mut buf = VecDeque::new();
        .               /// buf.push_back(3);
        .               /// buf.push_back(4);
        .               /// buf.push_back(5);
        .               /// assert_eq!(buf.get(1), Some(&4));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn get(&self, index: usize) -> Option<&T> {
2,547,750 ( 0.06%)          if index < self.len() {
        .                       let idx = self.wrap_add(self.tail, index);
        .                       unsafe { Some(&*self.ptr().add(idx)) }
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               /// Provides a mutable reference to the element at the given index.
-- line 578 ----------------------------------------
-- line 591 ----------------------------------------
        .               /// if let Some(elem) = buf.get_mut(1) {
        .               ///     *elem = 7;
        .               /// }
        .               ///
        .               /// assert_eq!(buf[1], 7);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn get_mut(&mut self, index: usize) -> Option<&mut T> {
1,461,162 ( 0.04%)          if index < self.len() {
        .                       let idx = self.wrap_add(self.tail, index);
        .                       unsafe { Some(&mut *self.ptr().add(idx)) }
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               /// Swaps elements at indices `i` and `j`.
-- line 607 ----------------------------------------
-- line 924 ----------------------------------------
        .               /// buf.push_back(5);
        .               /// buf.push_back(10);
        .               /// buf.push_back(15);
        .               /// assert_eq!(buf, [5, 10, 15]);
        .               /// buf.truncate(1);
        .               /// assert_eq!(buf, [5]);
        .               /// ```
        .               #[stable(feature = "deque_extras", since = "1.16.0")]
      416 ( 0.00%)      pub fn truncate(&mut self, len: usize) {
        .                   /// Runs the destructor for all items in the slice when it gets dropped (normally or
        .                   /// during unwinding).
        .                   struct Dropper<'a, T>(&'a mut [T]);
        .           
        .                   impl<'a, T> Drop for Dropper<'a, T> {
        .                       fn drop(&mut self) {
        .                           unsafe {
        .                               ptr::drop_in_place(self.0);
-- line 940 ----------------------------------------
-- line 945 ----------------------------------------
        .                   // Safe because:
        .                   //
        .                   // * Any slice passed to `drop_in_place` is valid; the second case has
        .                   //   `len <= front.len()` and returning on `len > self.len()` ensures
        .                   //   `begin <= back.len()` in the first case
        .                   // * The head of the VecDeque is moved before calling `drop_in_place`,
        .                   //   so no value is dropped twice if `drop_in_place` panics
        .                   unsafe {
      104 ( 0.00%)              if len > self.len() {
        .                           return;
        .                       }
        .                       let num_dropped = self.len() - len;
        .                       let (front, back) = self.as_mut_slices();
      104 ( 0.00%)              if len > front.len() {
        .                           let begin = len - front.len();
        .                           let drop_back = back.get_unchecked_mut(begin..) as *mut _;
        .                           self.head = self.wrap_sub(self.head, num_dropped);
        .                           ptr::drop_in_place(drop_back);
        .                       } else {
        .                           let drop_back = back as *mut _;
        .                           let drop_front = front.get_unchecked_mut(len..) as *mut _;
       52 ( 0.00%)                  self.head = self.wrap_sub(self.head, num_dropped);
        .           
        .                           // Make sure the second half is dropped even when a destructor
        .                           // in the first one panics.
        .                           let _back_dropper = Dropper(&mut *drop_back);
        .                           ptr::drop_in_place(drop_front);
        .                       }
        .                   }
      416 ( 0.00%)      }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               #[inline]
        .               pub fn allocator(&self) -> &A {
        .                   self.buf.allocator()
        .               }
        .           
-- line 982 ----------------------------------------
-- line 1085 ----------------------------------------
        .               /// vector.as_mut_slices().0[0] = 42;
        .               /// vector.as_mut_slices().1[0] = 24;
        .               /// assert_eq!(vector.as_slices(), (&[42, 10][..], &[24, 1][..]));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "deque_extras_15", since = "1.5.0")]
        .               pub fn as_mut_slices(&mut self) -> (&mut [T], &mut [T]) {
        .                   unsafe {
    1,484 ( 0.00%)              let head = self.head;
    1,484 ( 0.00%)              let tail = self.tail;
    1,814 ( 0.00%)              let buf = self.buffer_as_mut_slice();
        .                       RingSlices::ring_slices(buf, head, tail)
        .                   }
        .               }
        .           
        .               /// Returns the number of elements in the `VecDeque`.
        .               ///
        .               /// # Examples
        .               ///
-- line 1103 ----------------------------------------
-- line 1106 ----------------------------------------
        .               ///
        .               /// let mut v = VecDeque::new();
        .               /// assert_eq!(v.len(), 0);
        .               /// v.push_back(1);
        .               /// assert_eq!(v.len(), 1);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn len(&self) -> usize {
1,196,317 ( 0.03%)          count(self.tail, self.head, self.cap())
        .               }
        .           
        .               /// Returns `true` if the `VecDeque` is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::collections::VecDeque;
-- line 1122 ----------------------------------------
-- line 1123 ----------------------------------------
        .               ///
        .               /// let mut v = VecDeque::new();
        .               /// assert!(v.is_empty());
        .               /// v.push_front(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
2,559,654 ( 0.07%)          self.tail == self.head
        .               }
        .           
        .               fn range_tail_head<R>(&self, range: R) -> (usize, usize)
        .               where
        .                   R: RangeBounds<usize>,
        .               {
        .                   let Range { start, end } = slice::range(range, ..self.len());
        .                   let tail = self.wrap_add(self.tail, start);
-- line 1139 ----------------------------------------
-- line 1307 ----------------------------------------
        .               /// let mut v = VecDeque::new();
        .               /// v.push_back(1);
        .               /// v.clear();
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn clear(&mut self) {
      105 ( 0.00%)          self.truncate(0);
        .               }
        .           
        .               /// Returns `true` if the `VecDeque` contains an element equal to the
        .               /// given value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1323 ----------------------------------------
-- line 1396 ----------------------------------------
        .               /// assert_eq!(d.back(), None);
        .               ///
        .               /// d.push_back(1);
        .               /// d.push_back(2);
        .               /// assert_eq!(d.back(), Some(&2));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn back(&self) -> Option<&T> {
   30,723 ( 0.00%)          self.get(self.len().wrapping_sub(1))
        .               }
        .           
        .               /// Provides a mutable reference to the back element, or `None` if the
        .               /// `VecDeque` is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1412 ----------------------------------------
-- line 1441 ----------------------------------------
        .               /// d.push_back(2);
        .               ///
        .               /// assert_eq!(d.pop_front(), Some(1));
        .               /// assert_eq!(d.pop_front(), Some(2));
        .               /// assert_eq!(d.pop_front(), None);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop_front(&mut self) -> Option<T> {
  547,834 ( 0.01%)          if self.is_empty() {
        .                       None
        .                   } else {
        .                       let tail = self.tail;
  912,965 ( 0.02%)              self.tail = self.wrap_add(self.tail, 1);
   86,239 ( 0.00%)              unsafe { Some(self.buffer_read(tail)) }
        .                   }
        .               }
        .           
        .               /// Removes the last element from the `VecDeque` and returns it, or `None` if
        .               /// it is empty.
        .               ///
        .               /// # Examples
        .               ///
-- line 1462 ----------------------------------------
-- line 1466 ----------------------------------------
        .               /// let mut buf = VecDeque::new();
        .               /// assert_eq!(buf.pop_back(), None);
        .               /// buf.push_back(1);
        .               /// buf.push_back(3);
        .               /// assert_eq!(buf.pop_back(), Some(3));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop_back(&mut self) -> Option<T> {
  228,936 ( 0.01%)          if self.is_empty() {
        .                       None
        .                   } else {
  355,907 ( 0.01%)              self.head = self.wrap_sub(self.head, 1);
        .                       let head = self.head;
        .                       unsafe { Some(self.buffer_read(head)) }
        .                   }
        .               }
        .           
        .               /// Prepends an element to the `VecDeque`.
        .               ///
        .               /// # Examples
-- line 1485 ----------------------------------------
-- line 1513 ----------------------------------------
        .               /// use std::collections::VecDeque;
        .               ///
        .               /// let mut buf = VecDeque::new();
        .               /// buf.push_back(1);
        .               /// buf.push_back(3);
        .               /// assert_eq!(3, *buf.back().unwrap());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
1,469,004 ( 0.04%)      pub fn push_back(&mut self, value: T) {
2,064,249 ( 0.05%)          if self.is_full() {
      134 ( 0.00%)              self.grow();
        .                   }
        .           
       78 ( 0.00%)          let head = self.head;
  688,161 ( 0.02%)          self.head = self.wrap_add(self.head, 1);
  320,832 ( 0.01%)          unsafe { self.buffer_write(head, value) }
1,469,004 ( 0.04%)      }
        .           
        .               #[inline]
        .               fn is_contiguous(&self) -> bool {
        .                   // FIXME: Should we consider `head == 0` to mean
        .                   // that `self` is contiguous?
        .                   self.tail <= self.head
        .               }
        .           
-- line 1537 ----------------------------------------
-- line 2209 ----------------------------------------
        .                       self.truncate(idx);
        .                   }
        .               }
        .           
        .               // Double the buffer size. This method is inline(never), so we expect it to only
        .               // be called in cold paths.
        .               // This may panic or abort
        .               #[inline(never)]
      468 ( 0.00%)      fn grow(&mut self) {
        .                   // Extend or possibly remove this assertion when valid use-cases for growing the
        .                   // buffer without it being full emerge
        .                   debug_assert!(self.is_full());
        .                   let old_cap = self.cap();
      234 ( 0.00%)          self.buf.reserve_exact(old_cap, old_cap);
      390 ( 0.00%)          assert!(self.cap() == old_cap * 2);
        .                   unsafe {
        .                       self.handle_capacity_increase(old_cap);
        .                   }
        .                   debug_assert!(!self.is_full());
      468 ( 0.00%)      }
        .           
        .               /// Modifies the `VecDeque` in-place so that `len()` is equal to `new_len`,
        .               /// either by removing excess elements from the back or by appending
        .               /// elements generated by calling `generator` to the back.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 2236 ----------------------------------------
-- line 2751 ----------------------------------------
        .               }
        .           }
        .           
        .           /// Returns the index in the underlying buffer for a given logical element index.
        .           #[inline]
        .           fn wrap_index(index: usize, size: usize) -> usize {
        .               // size is always a power of 2
        .               debug_assert!(size.is_power_of_two());
3,660,223 ( 0.09%)      index & (size - 1)
        .           }
        .           
        .           /// Calculate the number of elements left to be read in the buffer
        .           #[inline]
        .           fn count(tail: usize, head: usize, size: usize) -> usize {
        .               // size is always a power of 2
5,516,360 ( 0.14%)      (head.wrapping_sub(tail)) & (size - 1)
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: PartialEq, A: Allocator> PartialEq for VecDeque<T, A> {
        .               fn eq(&self, other: &Self) -> bool {
        .                   if self.len() != other.len() {
        .                       return false;
        .                   }
-- line 2774 ----------------------------------------
-- line 2902 ----------------------------------------
        .           
        .               fn into_iter(self) -> IterMut<'a, T> {
        .                   self.iter_mut()
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for VecDeque<T, A> {
      112 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iter.into_iter() {
        .                   //          self.push_back(item);
        .                   //      }
        .                   let mut iter = iter.into_iter();
        .                   while let Some(element) = iter.next() {
      283 ( 0.00%)              if self.len() == self.capacity() {
        .                           let (lower, _) = iter.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .           
        .                       let head = self.head;
       63 ( 0.00%)              self.head = self.wrap_add(self.head, 1);
        .                       unsafe {
        8 ( 0.00%)                  self.buffer_write(head, element);
        .                       }
        .                   }
      128 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, elem: T) {
        .                   self.push_back(elem);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2937 ----------------------------------------

  644,906 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/vec_deque/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/expr.rs
--------------------------------------------------------------------------------
Ir                 

-- line 56 ----------------------------------------
        .               }
        .           
        .               pub fn check_expr_has_type_or_error(
        .                   &self,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .                   expected: Ty<'tcx>,
        .                   extend_err: impl Fn(&mut DiagnosticBuilder<'_>),
        .               ) -> Ty<'tcx> {
      143 ( 0.00%)          self.check_expr_meets_expectation_or_error(expr, ExpectHasType(expected), extend_err)
        .               }
        .           
        .               fn check_expr_meets_expectation_or_error(
        .                   &self,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .                   expected: Expectation<'tcx>,
        .                   extend_err: impl Fn(&mut DiagnosticBuilder<'_>),
        .               ) -> Ty<'tcx> {
        .                   let expected_ty = expected.to_option(&self).unwrap_or(self.tcx.types.bool);
        .                   let mut ty = self.check_expr_with_expectation(expr, expected);
        .           
        .                   // While we don't allow *arbitrary* coercions here, we *do* allow
        .                   // coercions from ! to `expected`.
      176 ( 0.00%)          if ty.is_never() {
        4 ( 0.00%)              assert!(
       12 ( 0.00%)                  !self.typeck_results.borrow().adjustments().contains_key(expr.hir_id),
        .                           "expression with never type wound up being adjusted"
        .                       );
       10 ( 0.00%)              let adj_ty = self.next_ty_var(TypeVariableOrigin {
        .                           kind: TypeVariableOriginKind::AdjustmentType,
        2 ( 0.00%)                  span: expr.span,
        .                       });
        6 ( 0.00%)              self.apply_adjustments(
        .                           expr,
        4 ( 0.00%)                  vec![Adjustment { kind: Adjust::NeverToAny, target: adj_ty }],
        .                       );
        .                       ty = adj_ty;
        .                   }
        .           
    1,413 ( 0.00%)          if let Some(mut err) = self.demand_suptype_diag(expr.span, expected_ty, ty) {
        .                       let expr = expr.peel_drop_temps();
        .                       self.suggest_deref_ref_or_into(&mut err, expr, expected_ty, ty, None);
        .                       extend_err(&mut err);
        .                       err.emit();
        .                   }
        .                   ty
        .               }
        .           
   19,656 ( 0.00%)      pub(super) fn check_expr_coercable_to_type(
        .                   &self,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .                   expected: Ty<'tcx>,
        .                   expected_ty_expr: Option<&'tcx hir::Expr<'tcx>>,
        .               ) -> Ty<'tcx> {
        .                   let ty = self.check_expr_with_hint(expr, expected);
        .                   // checks don't need two phase
        .                   self.demand_coerce(expr, ty, expected, expected_ty_expr, AllowTwoPhase::No)
   15,288 ( 0.00%)      }
        .           
        .               pub(super) fn check_expr_with_hint(
        .                   &self,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .                   expected: Ty<'tcx>,
        .               ) -> Ty<'tcx> {
      142 ( 0.00%)          self.check_expr_with_expectation(expr, ExpectHasType(expected))
        .               }
        .           
        .               fn check_expr_with_expectation_and_needs(
        .                   &self,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .                   expected: Expectation<'tcx>,
        .                   needs: Needs,
        .               ) -> Ty<'tcx> {
        .                   let ty = self.check_expr_with_expectation(expr, expected);
        .           
        .                   // If the expression is used in a place whether mutable place is required
        .                   // e.g. LHS of assignment, perform the conversion.
      176 ( 0.00%)          if let Needs::MutPlace = needs {
       99 ( 0.00%)              self.convert_place_derefs_to_mutable(expr);
        .                   }
        .           
        .                   ty
        .               }
        .           
        .               pub(super) fn check_expr(&self, expr: &'tcx hir::Expr<'tcx>) -> Ty<'tcx> {
        .                   self.check_expr_with_expectation(expr, NoExpectation)
        .               }
-- line 141 ----------------------------------------
-- line 159 ----------------------------------------
        .               /// that there are actually multiple representations for `Error`, so avoid
        .               /// that when err needs to be handled differently.
        .               #[instrument(skip(self, expr), level = "debug")]
        .               pub(super) fn check_expr_with_expectation(
        .                   &self,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .                   expected: Expectation<'tcx>,
        .               ) -> Ty<'tcx> {
  352,465 ( 0.01%)          self.check_expr_with_expectation_and_args(expr, expected, &[])
        .               }
        .           
        .               /// Same as `check_expr_with_expectation`, but allows us to pass in the arguments of a
        .               /// `ExprKind::Call` when evaluating its callee when it is an `ExprKind::Path`.
  833,209 ( 0.02%)      pub(super) fn check_expr_with_expectation_and_args(
        .                   &self,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .                   expected: Expectation<'tcx>,
        .                   args: &'tcx [hir::Expr<'tcx>],
        .               ) -> Ty<'tcx> {
  256,372 ( 0.01%)          if self.tcx().sess.verbose() {
        .                       // make this code only run with -Zverbose because it is probably slow
        .                       if let Ok(lint_str) = self.tcx.sess.source_map().span_to_snippet(expr.span) {
        .                           if !lint_str.contains('\n') {
        .                               debug!("expr text: {}", lint_str);
        .                           } else {
        .                               let mut lines = lint_str.lines();
        .                               if let Some(line0) = lines.next() {
        .                                   let remaining_lines = lines.count();
-- line 186 ----------------------------------------
-- line 189 ----------------------------------------
        .                               }
        .                           }
        .                       }
        .                   }
        .           
        .                   // True if `expr` is a `Try::from_ok(())` that is a result of desugaring a try block
        .                   // without the final expr (e.g. `try { return; }`). We don't want to generate an
        .                   // unreachable_code lint for it since warnings for autogenerated code are confusing.
  128,186 ( 0.00%)          let is_try_block_generated_unit_expr = match expr.kind {
   50,595 ( 0.00%)              ExprKind::Call(_, args) if expr.span.is_desugaring(DesugaringKind::TryBlock) => {
        .                           args.len() == 1 && args[0].span.is_desugaring(DesugaringKind::TryBlock)
        .                       }
        .           
        .                       _ => false,
        .                   };
        .           
        .                   // Warn for expressions after diverging siblings.
        .                   if !is_try_block_generated_unit_expr {
  448,651 ( 0.01%)              self.warn_if_unreachable(expr.hir_id, expr.span, "expression");
        .                   }
        .           
        .                   // Hide the outer diverging and has_errors flags.
        .                   let old_diverges = self.diverges.replace(Diverges::Maybe);
        .                   let old_has_errors = self.has_errors.replace(false);
        .           
  149,880 ( 0.00%)          let ty = ensure_sufficient_stack(|| match &expr.kind {
        .                       hir::ExprKind::Path(
        .                           qpath @ hir::QPath::Resolved(..) | qpath @ hir::QPath::TypeRelative(..),
   64,986 ( 0.00%)              ) => self.check_expr_path(qpath, expr, args),
  266,310 ( 0.01%)              _ => self.check_expr_kind(expr, expected),
        .                   });
        .           
        .                   // Warn for non-block expressions with diverging children.
  256,372 ( 0.01%)          match expr.kind {
        .                       ExprKind::Block(..)
        .                       | ExprKind::If(..)
        .                       | ExprKind::Let(..)
        .                       | ExprKind::Loop(..)
        .                       | ExprKind::Match(..) => {}
        .                       // If `expr` is a result of desugaring the try block and is an ok-wrapped
        .                       // diverging expression (e.g. it arose from desugaring of `try { return }`),
        .                       // we skip issuing a warning because it is autogenerated code.
   50,595 ( 0.00%)              ExprKind::Call(..) if expr.span.is_desugaring(DesugaringKind::TryBlock) => {}
   50,595 ( 0.00%)              ExprKind::Call(callee, _) => self.warn_if_unreachable(expr.hir_id, callee.span, "call"),
      212 ( 0.00%)              ExprKind::MethodCall(segment, ..) => {
      636 ( 0.00%)                  self.warn_if_unreachable(expr.hir_id, segment.ident.span, "call")
        .                       }
  319,884 ( 0.01%)              _ => self.warn_if_unreachable(expr.hir_id, expr.span, "expression"),
        .                   }
        .           
        .                   // Any expression that produces a value of type `!` must have diverged
   64,093 ( 0.00%)          if ty.is_never() {
       69 ( 0.00%)              self.diverges.set(self.diverges.get() | Diverges::always(expr.span));
        .                   }
        .           
        .                   // Record the type, which applies it effects.
        .                   // We need to do this after the warning above, so that
        .                   // we don't warn for the diverging expression itself.
  320,465 ( 0.01%)          self.write_ty(expr.hir_id, ty);
        .           
        .                   // Combine the diverging and has_error flags.
        .                   self.diverges.set(self.diverges.get() | old_diverges);
   64,093 ( 0.00%)          self.has_errors.set(self.has_errors.get() | old_has_errors);
        .           
        .                   debug!("type of {} is...", self.tcx.hir().node_to_string(expr.hir_id));
        .                   debug!("... {:?}, expected is {:?}", ty, expected);
        .           
        .                   ty
  576,837 ( 0.01%)      }
        .           
1,028,647 ( 0.03%)      #[instrument(skip(self, expr), level = "debug")]
        .               fn check_expr_kind(
        .                   &self,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .                   expected: Expectation<'tcx>,
        .               ) -> Ty<'tcx> {
        .                   trace!("expr={:#?}", expr);
        .           
   53,262 ( 0.00%)          let tcx = self.tcx;
  319,604 ( 0.01%)          match expr.kind {
        .                       ExprKind::Box(subexpr) => self.check_expr_box(subexpr, expected),
        .                       ExprKind::Lit(ref lit) => self.check_lit(&lit, expected),
    2,072 ( 0.00%)              ExprKind::Binary(op, lhs, rhs) => self.check_binop(expr, op, lhs, rhs),
       87 ( 0.00%)              ExprKind::Assign(lhs, rhs, ref span) => {
        .                           self.check_expr_assign(expr, expected, lhs, rhs, span)
        .                       }
       56 ( 0.00%)              ExprKind::AssignOp(op, lhs, rhs) => self.check_binop_assign(expr, op, lhs, rhs),
      465 ( 0.00%)              ExprKind::Unary(unop, oprnd) => self.check_expr_unary(unop, oprnd, expected, expr),
      990 ( 0.00%)              ExprKind::AddrOf(kind, mutbl, oprnd) => {
        .                           self.check_expr_addr_of(kind, mutbl, oprnd, expected, expr)
        .                       }
       32 ( 0.00%)              ExprKind::Path(QPath::LangItem(lang_item, _, hir_id)) => {
        .                           self.check_lang_item_path(lang_item, expr, hir_id)
        .                       }
        .                       ExprKind::Path(ref qpath) => self.check_expr_path(qpath, expr, &[]),
        .                       ExprKind::InlineAsm(asm) => self.check_expr_asm(asm),
        .                       ExprKind::Break(destination, ref expr_opt) => {
       28 ( 0.00%)                  self.check_expr_break(destination, expr_opt.as_deref(), expr)
        .                       }
        .                       ExprKind::Continue(destination) => {
        .                           if destination.target_id.is_ok() {
        .                               tcx.types.never
        .                           } else {
        .                               // There was an error; make type-check fail.
        .                               tcx.ty_error()
        .                           }
        .                       }
        .                       ExprKind::Ret(ref expr_opt) => self.check_expr_return(expr_opt.as_deref(), expr),
       25 ( 0.00%)              ExprKind::Let(let_expr) => self.check_expr_let(let_expr),
       14 ( 0.00%)              ExprKind::Loop(body, _, source, _) => {
        .                           self.check_expr_loop(body, source, expected, expr)
        .                       }
      189 ( 0.00%)              ExprKind::Match(discrim, arms, match_src) => {
      441 ( 0.00%)                  self.check_match(expr, &discrim, arms, expected, match_src)
        .                       }
       57 ( 0.00%)              ExprKind::Closure(capture, decl, body_id, _, gen) => {
      228 ( 0.00%)                  self.check_expr_closure(expr, capture, &decl, body_id, gen, expected)
        .                       }
    2,904 ( 0.00%)              ExprKind::Block(body, _) => self.check_block_with_expected(&body, expected),
   80,952 ( 0.00%)              ExprKind::Call(callee, args) => self.check_call(expr, &callee, args, expected),
      212 ( 0.00%)              ExprKind::MethodCall(segment, args, _) => {
        .                           self.check_method_call(expr, segment, args, expected)
        .                       }
       36 ( 0.00%)              ExprKind::Cast(e, t) => self.check_expr_cast(e, t, expr),
        .                       ExprKind::Type(e, t) => {
        .                           let ty = self.to_ty_saving_user_provided_ty(&t);
        .                           self.check_expr_eq_type(&e, ty);
        .                           ty
        .                       }
      445 ( 0.00%)              ExprKind::If(cond, then_expr, opt_else_expr) => {
       89 ( 0.00%)                  self.check_then_else(cond, then_expr, opt_else_expr, expr.span, expected)
        .                       }
       69 ( 0.00%)              ExprKind::DropTemps(e) => self.check_expr_with_expectation(e, expected),
   19,876 ( 0.00%)              ExprKind::Array(args) => self.check_expr_array(args, expected, expr),
        .                       ExprKind::ConstBlock(ref anon_const) => {
        .                           self.check_expr_const_block(anon_const, expected, expr)
        .                       }
       10 ( 0.00%)              ExprKind::Repeat(element, ref count) => {
        .                           self.check_expr_repeat(element, count, expected, expr)
        .                       }
    2,679 ( 0.00%)              ExprKind::Tup(elts) => self.check_expr_tuple(elts, expected, expr),
      145 ( 0.00%)              ExprKind::Struct(qpath, fields, ref base_expr) => {
        .                           self.check_expr_struct(expr, expected, qpath, fields, base_expr)
        .                       }
      910 ( 0.00%)              ExprKind::Field(base, field) => self.check_field(expr, &base, field),
      111 ( 0.00%)              ExprKind::Index(base, idx) => self.check_expr_index(base, idx, expr),
        .                       ExprKind::Yield(value, ref src) => self.check_expr_yield(value, expr, src),
        .                       hir::ExprKind::Err => tcx.ty_error(),
        .                   }
        .               }
        .           
        .               fn check_expr_box(&self, expr: &'tcx hir::Expr<'tcx>, expected: Expectation<'tcx>) -> Ty<'tcx> {
        .                   let expected_inner = expected.to_option(self).map_or(NoExpectation, |ty| match ty.kind() {
        .                       ty::Adt(def, _) if def.is_box() => Expectation::rvalue_hint(self, ty.boxed_ty()),
-- line 342 ----------------------------------------
-- line 350 ----------------------------------------
        .               fn check_expr_unary(
        .                   &self,
        .                   unop: hir::UnOp,
        .                   oprnd: &'tcx hir::Expr<'tcx>,
        .                   expected: Expectation<'tcx>,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .               ) -> Ty<'tcx> {
        .                   let tcx = self.tcx;
      155 ( 0.00%)          let expected_inner = match unop {
        .                       hir::UnOp::Not | hir::UnOp::Neg => expected,
        .                       hir::UnOp::Deref => NoExpectation,
        .                   };
      310 ( 0.00%)          let mut oprnd_t = self.check_expr_with_expectation(&oprnd, expected_inner);
        .           
      155 ( 0.00%)          if !oprnd_t.references_error() {
    1,085 ( 0.00%)              oprnd_t = self.structurally_resolved_type(expr.span, oprnd_t);
      342 ( 0.00%)              match unop {
        .                           hir::UnOp::Deref => {
        .                               if let Some(ty) = self.lookup_derefing(expr, oprnd, oprnd_t) {
        .                                   oprnd_t = ty;
        .                               } else {
        .                                   let mut err = type_error_struct!(
        .                                       tcx.sess,
        .                                       expr.span,
        .                                       oprnd_t,
-- line 374 ----------------------------------------
-- line 382 ----------------------------------------
        .                                   {
        .                                       tcx.sess.parse_sess.expr_parentheses_needed(&mut err, *sp);
        .                                   }
        .                                   err.emit();
        .                                   oprnd_t = tcx.ty_error();
        .                               }
        .                           }
        .                           hir::UnOp::Not => {
       64 ( 0.00%)                      let result = self.check_user_unop(expr, oprnd_t, unop);
        .                               // If it's builtin, we can reuse the type, this helps inference.
       96 ( 0.00%)                      if !(oprnd_t.is_integral() || *oprnd_t.kind() == ty::Bool) {
        .                                   oprnd_t = result;
        .                               }
        .                           }
        .                           hir::UnOp::Neg => {
        .                               let result = self.check_user_unop(expr, oprnd_t, unop);
        .                               // If it's builtin, we can reuse the type, this helps inference.
        .                               if !oprnd_t.is_numeric() {
        .                                   oprnd_t = result;
-- line 400 ----------------------------------------
-- line 409 ----------------------------------------
        .                   &self,
        .                   kind: hir::BorrowKind,
        .                   mutbl: hir::Mutability,
        .                   oprnd: &'tcx hir::Expr<'tcx>,
        .                   expected: Expectation<'tcx>,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .               ) -> Ty<'tcx> {
        .                   let hint = expected.only_has_type(self).map_or(NoExpectation, |ty| {
      455 ( 0.00%)              match ty.kind() {
        .                           ty::Ref(_, ty, _) | ty::RawPtr(ty::TypeAndMut { ty, .. }) => {
      352 ( 0.00%)                      if oprnd.is_syntactic_place_expr() {
        .                                   // Places may legitimately have unsized types.
        .                                   // For example, dereferences of a fat pointer and
        .                                   // the last field of a struct can be unsized.
        .                                   ExpectHasType(ty)
        .                               } else {
      138 ( 0.00%)                          Expectation::rvalue_hint(self, ty)
        .                               }
        .                           }
        .                           _ => NoExpectation,
        .                       }
      273 ( 0.00%)          });
        .                   let ty =
        .                       self.check_expr_with_expectation_and_needs(&oprnd, hint, Needs::maybe_mut_place(mutbl));
        .           
        .                   let tm = ty::TypeAndMut { ty, mutbl };
      110 ( 0.00%)          match kind {
      110 ( 0.00%)              _ if tm.ty.references_error() => self.tcx.ty_error(),
        .                       hir::BorrowKind::Raw => {
        .                           self.check_named_place_expr(oprnd);
        .                           self.tcx.mk_ptr(tm)
        .                       }
        .                       hir::BorrowKind::Ref => {
        .                           // Note: at this point, we cannot say what the best lifetime
        .                           // is to use for resulting pointer.  We want to use the
        .                           // shortest lifetime possible so as to avoid spurious borrowck
-- line 444 ----------------------------------------
-- line 448 ----------------------------------------
        .                           // type inference is complete.
        .                           //
        .                           // Therefore, here we simply generate a region variable. The
        .                           // region inferencer will then select a suitable value.
        .                           // Finally, borrowck will infer the value of the region again,
        .                           // this time with enough precision to check that the value
        .                           // whose address was taken can actually be made to live as long
        .                           // as it needs to live.
      550 ( 0.00%)                  let region = self.next_region_var(infer::AddrOfRegion(expr.span));
      110 ( 0.00%)                  self.tcx.mk_ref(region, tm)
        .                       }
        .                   }
        .               }
        .           
        .               /// Does this expression refer to a place that either:
        .               /// * Is based on a local or static.
        .               /// * Contains a dereference
        .               /// Note that the adjustments for the children of `expr` should already
-- line 465 ----------------------------------------
-- line 489 ----------------------------------------
        .               }
        .           
        .               fn check_lang_item_path(
        .                   &self,
        .                   lang_item: hir::LangItem,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .                   hir_id: Option<hir::HirId>,
        .               ) -> Ty<'tcx> {
      192 ( 0.00%)          self.resolve_lang_item_path(lang_item, expr.span, expr.hir_id, hir_id).1
        .               }
        .           
  119,141 ( 0.00%)      pub(crate) fn check_expr_path(
        .                   &self,
        .                   qpath: &'tcx hir::QPath<'tcx>,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .                   args: &'tcx [hir::Expr<'tcx>],
        .               ) -> Ty<'tcx> {
   10,831 ( 0.00%)          let tcx = self.tcx;
  119,141 ( 0.00%)          let (res, opt_ty, segs) =
  108,310 ( 0.00%)              self.resolve_ty_and_res_fully_qualified_call(qpath, expr.hir_id, expr.span);
   63,710 ( 0.00%)          let ty = match res {
        .                       Res::Err => {
        .                           self.set_tainted_by_errors();
        .                           tcx.ty_error()
        .                       }
        .                       Res::Def(DefKind::Ctor(_, CtorKind::Fictive), _) => {
        .                           report_unexpected_variant_res(tcx, res, expr.span);
        .                           tcx.ty_error()
        .                       }
  194,958 ( 0.00%)              _ => self.instantiate_value_path(segs, opt_ty, res, expr.span, expr.hir_id).0,
        .                   };
        .           
   32,493 ( 0.00%)          if let ty::FnDef(..) = ty.kind() {
   30,309 ( 0.00%)              let fn_sig = ty.fn_sig(tcx);
   40,412 ( 0.00%)              if !tcx.features().unsized_fn_params {
        .                           // We want to remove some Sized bounds from std functions,
        .                           // but don't want to expose the removal to stable Rust.
        .                           // i.e., we don't want to allow
        .                           //
        .                           // ```rust
        .                           // drop as fn(str);
        .                           // ```
        .                           //
        .                           // to work in stable even if the Sized bound on `drop` is relaxed.
        .                           for i in 0..fn_sig.inputs().skip_binder().len() {
        .                               // We just want to check sizedness, so instead of introducing
        .                               // placeholder lifetimes with probing, we just replace higher lifetimes
        .                               // with fresh vars.
   10,180 ( 0.00%)                      let span = args.get(i).map(|a| a.span).unwrap_or(expr.span);
        .                               let input = self
        .                                   .replace_bound_vars_with_fresh_vars(
        .                                       span,
        .                                       infer::LateBoundRegionConversionTime::FnCall,
        .                                       fn_sig.input(i),
        .                                   )
        .                                   .0;
   40,720 ( 0.00%)                      self.require_type_is_sized_deferred(
        .                                   input,
        .                                   span,
   30,540 ( 0.00%)                          traits::SizedArgumentType(None),
        .                               );
        .                           }
        .                       }
        .                       // Here we want to prevent struct constructors from returning unsized types.
        .                       // There were two cases this happened: fn pointer coercion in stable
        .                       // and usual function call in presence of unsized_locals.
        .                       // Also, as we just want to check sizedness, instead of introducing
        .                       // placeholder lifetimes with probing, we just replace higher lifetimes
-- line 556 ----------------------------------------
-- line 557 ----------------------------------------
        .                       // with fresh vars.
        .                       let output = self
        .                           .replace_bound_vars_with_fresh_vars(
        .                               expr.span,
        .                               infer::LateBoundRegionConversionTime::FnCall,
        .                               fn_sig.output(),
        .                           )
        .                           .0;
   60,618 ( 0.00%)              self.require_type_is_sized_deferred(output, expr.span, traits::SizedReturnType);
        .                   }
        .           
        .                   // We always require that the type provided as the value for
        .                   // a type parameter outlives the moment of instantiation.
   43,324 ( 0.00%)          let substs = self.typeck_results.borrow().node_substs(expr.hir_id);
        .                   self.add_wf_bounds(substs, expr);
        .           
        .                   ty
   86,648 ( 0.00%)      }
        .           
        .               fn check_expr_break(
        .                   &self,
        .                   destination: hir::Destination,
        .                   expr_opt: Option<&'tcx hir::Expr<'tcx>>,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .               ) -> Ty<'tcx> {
        7 ( 0.00%)          let tcx = self.tcx;
       42 ( 0.00%)          if let Ok(target_id) = destination.target_id {
        .                       let (e_ty, cause);
       21 ( 0.00%)              if let Some(e) = expr_opt {
        .                           // If this is a break with a value, we need to type-check
        .                           // the expression. Get an expected type from the loop context.
        .                           let opt_coerce_to = {
        .                               // We should release `enclosing_breakables` before the `check_expr_with_hint`
        .                               // below, so can't move this block of code to the enclosing scope and share
        .                               // `ctxt` with the second `encloding_breakables` borrow below.
        .                               let mut enclosing_breakables = self.enclosing_breakables.borrow_mut();
        .                               match enclosing_breakables.opt_find_breakable(target_id) {
-- line 593 ----------------------------------------
-- line 609 ----------------------------------------
        .           
        .                           // Recurse without `enclosing_breakables` borrowed.
        .                           e_ty = self.check_expr_with_hint(e, coerce_to);
        .                           cause = self.misc(e.span);
        .                       } else {
        .                           // Otherwise, this is a break *without* a value. That's
        .                           // always legal, and is equivalent to `break ()`.
        .                           e_ty = tcx.mk_unit();
       21 ( 0.00%)                  cause = self.misc(expr.span);
        .                       }
        .           
        .                       // Now that we have type-checked `expr_opt`, borrow
        .                       // the `enclosing_loops` field and let's coerce the
        .                       // type of `expr_opt` into what is expected.
        .                       let mut enclosing_breakables = self.enclosing_breakables.borrow_mut();
       35 ( 0.00%)              let ctxt = match enclosing_breakables.opt_find_breakable(target_id) {
        .                           Some(ctxt) => ctxt,
        .                           None => {
        .                               // Avoid ICE when `break` is inside a closure (#65383).
        .                               return tcx.ty_error_with_message(
        .                                   expr.span,
        .                                   "break was outside loop, but no error was emitted",
        .                               );
        .                           }
        .                       };
        .           
       14 ( 0.00%)              if let Some(ref mut coerce) = ctxt.coerce {
        .                           if let Some(ref e) = expr_opt {
        .                               coerce.coerce(self, &cause, e, e_ty);
        .                           } else {
        .                               assert!(e_ty.is_unit());
        .                               let ty = coerce.expected_ty();
        .                               coerce.coerce_forced_unit(
        .                                   self,
        .                                   &cause,
-- line 643 ----------------------------------------
-- line 664 ----------------------------------------
        .                       } else {
        .                           // If `ctxt.coerce` is `None`, we can just ignore
        .                           // the type of the expression.  This is because
        .                           // either this was a break *without* a value, in
        .                           // which case it is always a legal type (`()`), or
        .                           // else an error would have been flagged by the
        .                           // `loops` pass for using break with an expression
        .                           // where you are not supposed to.
        7 ( 0.00%)                  assert!(expr_opt.is_none() || self.tcx.sess.has_errors());
        .                       }
        .           
        .                       // If we encountered a `break`, then (no surprise) it may be possible to break from the
        .                       // loop... unless the value being returned from the loop diverges itself, e.g.
        .                       // `break return 5` or `break loop {}`.
       42 ( 0.00%)              ctxt.may_break |= !self.diverges.get().is_always();
        .           
        .                       // the type of a `break` is always `!`, since it diverges
        .                       tcx.types.never
        .                   } else {
        .                       // Otherwise, we failed to find the enclosing loop;
        .                       // this can only happen if the `break` was not
        .                       // inside a loop at all, which is caught by the
        .                       // loop-checking pass.
-- line 686 ----------------------------------------
-- line 708 ----------------------------------------
        .                   }
        .               }
        .           
        .               fn check_expr_return(
        .                   &self,
        .                   expr_opt: Option<&'tcx hir::Expr<'tcx>>,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .               ) -> Ty<'tcx> {
       31 ( 0.00%)          if self.ret_coercion.is_none() {
        .                       let mut err = ReturnStmtOutsideOfFnBody {
        .                           span: expr.span,
        .                           encl_body_span: None,
        .                           encl_fn_span: None,
        .                       };
        .           
        .                       let encl_item_id = self.tcx.hir().get_parent_item(expr.hir_id);
        .           
-- line 724 ----------------------------------------
-- line 756 ----------------------------------------
        .           
        .                       self.tcx.sess.emit_err(err);
        .           
        .                       if let Some(e) = expr_opt {
        .                           // We still have to type-check `e` (issue #86188), but calling
        .                           // `check_return_expr` only works inside fn bodies.
        .                           self.check_expr(e);
        .                       }
       62 ( 0.00%)          } else if let Some(e) = expr_opt {
       31 ( 0.00%)              if self.ret_coercion_span.get().is_none() {
       30 ( 0.00%)                  self.ret_coercion_span.set(Some(e.span));
        .                       }
      124 ( 0.00%)              self.check_return_expr(e, true);
        .                   } else {
        .                       let mut coercion = self.ret_coercion.as_ref().unwrap().borrow_mut();
        .                       if self.ret_coercion_span.get().is_none() {
        .                           self.ret_coercion_span.set(Some(expr.span));
        .                       }
        .                       let cause = self.cause(expr.span, ObligationCauseCode::ReturnNoExpression);
        .                       if let Some((fn_decl, _)) = self.get_fn_decl(expr.hir_id) {
        .                           coercion.coerce_forced_unit(
-- line 776 ----------------------------------------
-- line 786 ----------------------------------------
        .                                   }
        .                               },
        .                               true,
        .                           );
        .                       } else {
        .                           coercion.coerce_forced_unit(self, &cause, &mut |_| (), true);
        .                       }
        .                   }
       93 ( 0.00%)          self.tcx.types.never
        .               }
        .           
        .               /// `explicit_return` is `true` if we're checkng an explicit `return expr`,
        .               /// and `false` if we're checking a trailing expression.
    1,136 ( 0.00%)      pub(super) fn check_return_expr(
        .                   &self,
        .                   return_expr: &'tcx hir::Expr<'tcx>,
        .                   explicit_return: bool,
        .               ) {
        .                   let ret_coercion = self.ret_coercion.as_ref().unwrap_or_else(|| {
        .                       span_bug!(return_expr.span, "check_return_expr called outside fn body")
        .                   });
        .           
        .                   let ret_ty = ret_coercion.borrow().expected_ty();
        .                   let return_expr_ty = self.check_expr_with_hint(return_expr, ret_ty);
      142 ( 0.00%)          let mut span = return_expr.span;
        .                   // Use the span of the trailing expression for our cause,
        .                   // not the span of the entire function
      284 ( 0.00%)          if !explicit_return {
      316 ( 0.00%)              if let ExprKind::Block(body, _) = return_expr.kind {
      282 ( 0.00%)                  if let Some(last_expr) = body.expr {
       94 ( 0.00%)                      span = last_expr.span;
        .                           }
        .                       }
        .                   }
        .                   ret_coercion.borrow_mut().coerce(
        .                       self,
      284 ( 0.00%)              &self.cause(span, ObligationCauseCode::ReturnValue(return_expr.hir_id)),
        .                       return_expr,
        .                       return_expr_ty,
        .                   );
    1,136 ( 0.00%)      }
        .           
      363 ( 0.00%)      pub(crate) fn check_lhs_assignable(
        .                   &self,
        .                   lhs: &'tcx hir::Expr<'tcx>,
        .                   err_code: &'static str,
        .                   op_span: Span,
        .               ) {
      132 ( 0.00%)          if lhs.is_syntactic_place_expr() {
        .                       return;
        .                   }
        .           
        .                   // FIXME: Make this use SessionDiagnostic once error codes can be dynamically set.
        .                   let mut err = self.tcx.sess.struct_span_err_with_code(
        .                       op_span,
        .                       "invalid left-hand side of assignment",
        .                       DiagnosticId::Error(err_code.into()),
-- line 842 ----------------------------------------
-- line 880 ----------------------------------------
        .                           | hir::Node::Crate(_) => break,
        .                           _ => {
        .                               parent = self.tcx.hir().get_parent_node(parent);
        .                           }
        .                       }
        .                   }
        .           
        .                   err.emit();
      264 ( 0.00%)      }
        .           
        .               // A generic function for checking the 'then' and 'else' clauses in an 'if'
        .               // or 'if-else' expression.
        .               fn check_then_else(
        .                   &self,
        .                   cond_expr: &'tcx hir::Expr<'tcx>,
        .                   then_expr: &'tcx hir::Expr<'tcx>,
        .                   opt_else_expr: Option<&'tcx hir::Expr<'tcx>>,
        .                   sp: Span,
        .                   orig_expected: Expectation<'tcx>,
        .               ) -> Ty<'tcx> {
        .                   let cond_ty = self.check_expr_has_type_or_error(cond_expr, self.tcx.types.bool, |_| {});
        .           
      445 ( 0.00%)          self.warn_if_unreachable(
      178 ( 0.00%)              cond_expr.hir_id,
       89 ( 0.00%)              then_expr.span,
        .                       "block in `if` or `while` expression",
        .                   );
        .           
      178 ( 0.00%)          let cond_diverges = self.diverges.get();
        .                   self.diverges.set(Diverges::Maybe);
        .           
        .                   let expected = orig_expected.adjust_for_branches(self);
        .                   let then_ty = self.check_expr_with_expectation(then_expr, expected);
        .                   let then_diverges = self.diverges.get();
        .                   self.diverges.set(Diverges::Maybe);
        .           
        .                   // We've already taken the expected type's preferences
-- line 916 ----------------------------------------
-- line 919 ----------------------------------------
        .                   // `expected` if it represents a *hard* constraint
        .                   // (`only_has_type`); otherwise, we just go with a
        .                   // fresh type variable.
        .                   let coerce_to_ty = expected.coercion_target_type(self, sp);
        .                   let mut coerce: DynamicCoerceMany<'_> = CoerceMany::new(coerce_to_ty);
        .           
        .                   coerce.coerce(self, &self.misc(sp), then_expr, then_ty);
        .           
      178 ( 0.00%)          if let Some(else_expr) = opt_else_expr {
       88 ( 0.00%)              let else_ty = if sp.desugaring_kind() == Some(DesugaringKind::LetElse) {
        .                           // todo introduce `check_expr_with_expectation(.., Expectation::LetElse)`
        .                           //   for errors that point to the offending expression rather than the entire block.
        .                           //   We could use `check_expr_eq_type(.., tcx.types.never)`, but then there is no
        .                           //   way to detect that the expected type originated from let-else and provide
        .                           //   a customized error.
        .                           let else_ty = self.check_expr(else_expr);
        .                           let cause = self.cause(else_expr.span, ObligationCauseCode::LetElse);
        .           
-- line 936 ----------------------------------------
-- line 943 ----------------------------------------
        .                               else_ty
        .                           }
        .                       } else {
        .                           self.check_expr_with_expectation(else_expr, expected)
        .                       };
        .                       let else_diverges = self.diverges.get();
        .           
        .                       let opt_suggest_box_span =
      352 ( 0.00%)                  self.opt_suggest_box_span(else_expr.span, else_ty, orig_expected);
        .                       let if_cause =
        .                           self.if_cause(sp, then_expr, else_expr, then_ty, else_ty, opt_suggest_box_span);
        .           
        .                       coerce.coerce(self, &if_cause, else_expr, else_ty);
        .           
        .                       // We won't diverge unless both branches do (or the condition does).
      748 ( 0.00%)              self.diverges.set(cond_diverges | then_diverges & else_diverges);
        .                   } else {
        .                       self.if_fallback_coercion(sp, then_expr, &mut coerce);
        .           
        .                       // If the condition is false we can't diverge.
        .                       self.diverges.set(cond_diverges);
        .                   }
        .           
    1,157 ( 0.00%)          let result_ty = coerce.complete(self);
       89 ( 0.00%)          if cond_ty.references_error() { self.tcx.ty_error() } else { result_ty }
        .               }
        .           
        .               /// Type check assignment expression `expr` of form `lhs = rhs`.
        .               /// The expected type is `()` and is passed to the function for the purposes of diagnostics.
        .               fn check_expr_assign(
        .                   &self,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .                   expected: Expectation<'tcx>,
        .                   lhs: &'tcx hir::Expr<'tcx>,
        .                   rhs: &'tcx hir::Expr<'tcx>,
        .                   span: &Span,
        .               ) -> Ty<'tcx> {
       29 ( 0.00%)          let expected_ty = expected.coercion_target_type(self, expr.span);
       58 ( 0.00%)          if expected_ty == self.tcx.types.bool {
        .                       // The expected type is `bool` but this will result in `()` so we can reasonably
        .                       // say that the user intended to write `lhs == rhs` instead of `lhs = rhs`.
        .                       // The likely cause of this is `if foo = bar { .. }`.
        .                       let actual_ty = self.tcx.mk_unit();
        .                       let mut err = self.demand_suptype_diag(expr.span, expected_ty, actual_ty).unwrap();
        .                       let lhs_ty = self.check_expr(&lhs);
        .                       let rhs_ty = self.check_expr(&rhs);
        .                       let (applicability, eq) = if self.can_coerce(rhs_ty, lhs_ty) {
-- line 989 ----------------------------------------
-- line 1019 ----------------------------------------
        .                       if lhs_ty.references_error() || rhs_ty.references_error() {
        .                           err.delay_as_bug()
        .                       } else {
        .                           err.emit();
        .                       }
        .                       return self.tcx.ty_error();
        .                   }
        .           
      174 ( 0.00%)          self.check_lhs_assignable(lhs, "E0070", *span);
        .           
        .                   let lhs_ty = self.check_expr_with_needs(&lhs, Needs::MutPlace);
      174 ( 0.00%)          let rhs_ty = self.check_expr_coercable_to_type(&rhs, lhs_ty, Some(lhs));
        .           
      174 ( 0.00%)          self.require_type_is_sized(lhs_ty, lhs.span, traits::AssignmentLhsSized);
        .           
       58 ( 0.00%)          if lhs_ty.references_error() || rhs_ty.references_error() {
        .                       self.tcx.ty_error()
        .                   } else {
        .                       self.tcx.mk_unit()
        .                   }
        .               }
        .           
        .               fn check_expr_let(&self, let_expr: &'tcx hir::Let<'tcx>) -> Ty<'tcx> {
        .                   // for let statements, this is done in check_stmt
       25 ( 0.00%)          let init = let_expr.init;
      175 ( 0.00%)          self.warn_if_unreachable(init.hir_id, init.span, "block in `let` expression");
        .                   // otherwise check exactly as a let statement
       50 ( 0.00%)          self.check_decl(let_expr.into());
        .                   // but return a bool, for this is a boolean expression
       75 ( 0.00%)          self.tcx.types.bool
        .               }
        .           
        .               fn check_expr_loop(
        .                   &self,
        .                   body: &'tcx hir::Block<'tcx>,
        .                   source: hir::LoopSource,
        .                   expected: Expectation<'tcx>,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .               ) -> Ty<'tcx> {
       14 ( 0.00%)          let coerce = match source {
        .                       // you can only use break with a value from a normal `loop { }`
        .                       hir::LoopSource::Loop => {
        .                           let coerce_to = expected.coercion_target_type(self, body.span);
        .                           Some(CoerceMany::new(coerce_to))
        .                       }
        .           
        .                       hir::LoopSource::While | hir::LoopSource::ForLoop => None,
        .                   };
        .           
        .                   let ctxt = BreakableCtxt {
        .                       coerce,
        .                       may_break: false, // Will get updated if/when we find a `break`.
        .                   };
        .           
      119 ( 0.00%)          let (ctxt, ()) = self.with_breakable_ctxt(expr.hir_id, ctxt, || {
       21 ( 0.00%)              self.check_block_no_value(&body);
        .                   });
        .           
       14 ( 0.00%)          if ctxt.may_break {
        .                       // No way to know whether it's diverging because
        .                       // of a `break` or an outer `break` or `return`.
        .                       self.diverges.set(Diverges::Maybe);
        .                   }
        .           
        .                   // If we permit break with a value, then result type is
        .                   // the LUB of the breaks (possibly ! if none); else, it
        .                   // is nil. This makes sense because infinite loops
-- line 1085 ----------------------------------------
-- line 1095 ----------------------------------------
        .               /// Checks a method call.
        .               fn check_method_call(
        .                   &self,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .                   segment: &hir::PathSegment<'_>,
        .                   args: &'tcx [hir::Expr<'tcx>],
        .                   expected: Expectation<'tcx>,
        .               ) -> Ty<'tcx> {
      424 ( 0.00%)          let rcvr = &args[0];
        .                   let rcvr_t = self.check_expr(&rcvr);
        .                   // no need to check for bot/err -- callee does that
      848 ( 0.00%)          let rcvr_t = self.structurally_resolved_type(args[0].span, rcvr_t);
      212 ( 0.00%)          let span = segment.ident.span;
        .           
    3,392 ( 0.00%)          let method = match self.lookup_method(rcvr_t, segment, span, expr, rcvr, args) {
      424 ( 0.00%)              Ok(method) => {
        .                           // We could add a "consider `foo::<params>`" suggestion here, but I wasn't able to
        .                           // trigger this codepath causing `structuraly_resolved_type` to emit an error.
        .           
    2,332 ( 0.00%)                  self.write_method_call(expr.hir_id, method);
    1,060 ( 0.00%)                  Ok(method)
        .                       }
        .                       Err(error) => {
        .                           if segment.ident.name != kw::Empty {
        .                               if let Some(mut err) = self.report_method_error(
        .                                   span,
        .                                   rcvr_t,
        .                                   segment.ident,
        .                                   SelfSource::MethodCall(&args[0]),
-- line 1123 ----------------------------------------
-- line 1127 ----------------------------------------
        .                                   err.emit();
        .                               }
        .                           }
        .                           Err(())
        .                       }
        .                   };
        .           
        .                   // Call the generic checker.
    2,968 ( 0.00%)          self.check_method_argument_types(
        .                       span,
        .                       expr,
    1,272 ( 0.00%)              method,
        .                       &args[1..],
        .                       DontTupleArguments,
        .                       expected,
        .                   )
        .               }
        .           
        .               fn check_expr_cast(
        .                   &self,
        .                   e: &'tcx hir::Expr<'tcx>,
        .                   t: &'tcx hir::Ty<'tcx>,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .               ) -> Ty<'tcx> {
        .                   // Find the type of `e`. Supply hints based on the type we are casting to,
        .                   // if appropriate.
       48 ( 0.00%)          let t_cast = self.to_ty_saving_user_provided_ty(t);
        .                   let t_cast = self.resolve_vars_if_possible(t_cast);
        .                   let t_expr = self.check_expr_with_expectation(e, ExpectCastableToType(t_cast));
        .                   let t_expr = self.resolve_vars_if_possible(t_expr);
        .           
        .                   // Eagerly check for some obvious errors.
       24 ( 0.00%)          if t_expr.references_error() || t_cast.references_error() {
        .                       self.tcx.ty_error()
        .                   } else {
        .                       // Defer other checks until we're done type checking.
        .                       let mut deferred_cast_checks = self.deferred_cast_checks.borrow_mut();
       36 ( 0.00%)              match cast::CastCheck::new(self, e, t_expr, t_cast, t.span, expr.span) {
        .                           Ok(cast_check) => {
        .                               debug!(
        .                                   "check_expr_cast: deferring cast from {:?} to {:?}: {:?}",
        .                                   t_cast, t_expr, cast_check,
        .                               );
        .                               deferred_cast_checks.push(cast_check);
        .                               t_cast
        .                           }
-- line 1172 ----------------------------------------
-- line 1176 ----------------------------------------
        .               }
        .           
        .               fn check_expr_array(
        .                   &self,
        .                   args: &'tcx [hir::Expr<'tcx>],
        .                   expected: Expectation<'tcx>,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .               ) -> Ty<'tcx> {
    9,938 ( 0.00%)          let element_ty = if !args.is_empty() {
   29,811 ( 0.00%)              let coerce_to = expected
        .                           .to_option(self)
   29,811 ( 0.00%)                  .and_then(|uty| match *uty.kind() {
        .                               ty::Array(ty, _) | ty::Slice(ty) => Some(ty),
        .                               _ => None,
        .                           })
        .                           .unwrap_or_else(|| {
        .                               self.next_ty_var(TypeVariableOrigin {
        .                                   kind: TypeVariableOriginKind::TypeInference,
        .                                   span: expr.span,
        .                               })
        .                           });
        .                       let mut coerce = CoerceMany::with_coercion_sites(coerce_to, args);
    9,937 ( 0.00%)              assert_eq!(self.diverges.get(), Diverges::Maybe);
        .                       for e in args {
        .                           let e_ty = self.check_expr_with_hint(e, coerce_to);
   39,738 ( 0.00%)                  let cause = self.misc(e.span);
  238,428 ( 0.01%)                  coerce.coerce(self, &cause, e, e_ty);
        .                       }
  119,244 ( 0.00%)              coerce.complete(self)
        .                   } else {
        4 ( 0.00%)              self.next_ty_var(TypeVariableOrigin {
        .                           kind: TypeVariableOriginKind::TypeInference,
        1 ( 0.00%)                  span: expr.span,
        .                       })
        .                   };
   59,633 ( 0.00%)          self.tcx.mk_array(element_ty, args.len() as u64)
        .               }
        .           
        .               fn check_expr_const_block(
        .                   &self,
        .                   anon_const: &'tcx hir::AnonConst,
        .                   expected: Expectation<'tcx>,
        .                   _expr: &'tcx hir::Expr<'tcx>,
        .               ) -> Ty<'tcx> {
-- line 1219 ----------------------------------------
-- line 1232 ----------------------------------------
        .               fn check_expr_repeat(
        .                   &self,
        .                   element: &'tcx hir::Expr<'tcx>,
        .                   count: &'tcx hir::ArrayLen,
        .                   expected: Expectation<'tcx>,
        .                   _expr: &'tcx hir::Expr<'tcx>,
        .               ) -> Ty<'tcx> {
        .                   let tcx = self.tcx;
       25 ( 0.00%)          let count = self.array_length_to_const(count);
        .           
       10 ( 0.00%)          let uty = match expected {
       20 ( 0.00%)              ExpectHasType(uty) => match *uty.kind() {
        .                           ty::Array(ty, _) | ty::Slice(ty) => Some(ty),
        .                           _ => None,
        .                       },
        .                       _ => None,
        .                   };
        .           
        .                   let (element_ty, t) = match uty {
        .                       Some(uty) => {
       12 ( 0.00%)                  self.check_expr_coercable_to_type(&element, uty, None);
        .                           (uty, uty)
        .                       }
        .                       None => {
       15 ( 0.00%)                  let ty = self.next_ty_var(TypeVariableOrigin {
        .                               kind: TypeVariableOriginKind::MiscVariable,
        3 ( 0.00%)                      span: element.span,
        .                           });
        .                           let element_ty = self.check_expr_has_type_or_error(&element, ty, |_| {});
        .                           (element_ty, ty)
        .                       }
        .                   };
        .           
        5 ( 0.00%)          if element_ty.references_error() {
        .                       return tcx.ty_error();
        .                   }
        .           
        .                   tcx.mk_ty(ty::Array(t, count))
        .               }
        .           
        .               fn check_expr_tuple(
        .                   &self,
        .                   elts: &'tcx [hir::Expr<'tcx>],
        .                   expected: Expectation<'tcx>,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .               ) -> Ty<'tcx> {
    1,786 ( 0.00%)          let flds = expected.only_has_type(self).and_then(|ty| {
      891 ( 0.00%)              let ty = self.resolve_vars_with_obligations(ty);
    1,782 ( 0.00%)              match ty.kind() {
      883 ( 0.00%)                  ty::Tuple(flds) => Some(&flds[..]),
        .                           _ => None,
        .                       }
        .                   });
        .           
    6,197 ( 0.00%)          let elt_ts_iter = elts.iter().enumerate().map(|(i, e)| match flds {
    3,508 ( 0.00%)              Some(fs) if i < fs.len() => {
    6,139 ( 0.00%)                  let ety = fs[i].expect_ty();
   11,401 ( 0.00%)                  self.check_expr_coercable_to_type(&e, ety, None);
        .                           ety
        .                       }
       10 ( 0.00%)              _ => self.check_expr_with_expectation(&e, NoExpectation),
        .                   });
    1,786 ( 0.00%)          let tuple = self.tcx.mk_tup(elt_ts_iter);
      893 ( 0.00%)          if tuple.references_error() {
        .                       self.tcx.ty_error()
        .                   } else {
    6,251 ( 0.00%)              self.require_type_is_sized(tuple, expr.span, traits::TupleInitializerSized);
        .                       tuple
        .                   }
        .               }
        .           
        .               fn check_expr_struct(
        .                   &self,
        .                   expr: &hir::Expr<'_>,
        .                   expected: Expectation<'tcx>,
        .                   qpath: &QPath<'_>,
        .                   fields: &'tcx [hir::ExprField<'tcx>],
        .                   base_expr: &'tcx Option<&'tcx hir::Expr<'tcx>>,
        .               ) -> Ty<'tcx> {
        .                   // Find the relevant variant
      290 ( 0.00%)          let (variant, adt_ty) = if let Some(variant_ty) = self.check_struct_path(qpath, expr.hir_id)
        .                   {
        .                       variant_ty
        .                   } else {
        .                       self.check_struct_fields_on_error(fields, base_expr);
        .                       return self.tcx.ty_error();
        .                   };
        .           
        .                   // Prohibit struct expressions when non-exhaustive flag is set.
        .                   let adt = adt_ty.ty_adt_def().expect("`check_struct_path` returned non-ADT type");
       65 ( 0.00%)          if !adt.did.is_local() && variant.is_field_list_non_exhaustive() {
        .                       self.tcx
        .                           .sess
        .                           .emit_err(StructExprNonExhaustive { span: expr.span, what: adt.variant_descr() });
        .                   }
        .           
      406 ( 0.00%)          self.check_expr_struct_fields(
        .                       adt_ty,
        .                       expected,
        .                       expr.hir_id,
       87 ( 0.00%)              qpath.span(),
        .                       variant,
        .                       fields,
        .                       base_expr,
       58 ( 0.00%)              expr.span,
        .                   );
        .           
      203 ( 0.00%)          self.require_type_is_sized(adt_ty, expr.span, traits::StructInitializerSized);
        .                   adt_ty
        .               }
        .           
      406 ( 0.00%)      fn check_expr_struct_fields(
        .                   &self,
        .                   adt_ty: Ty<'tcx>,
        .                   expected: Expectation<'tcx>,
        .                   expr_id: hir::HirId,
        .                   span: Span,
        .                   variant: &'tcx ty::VariantDef,
        .                   ast_fields: &'tcx [hir::ExprField<'tcx>],
        .                   base_expr: &'tcx Option<&'tcx hir::Expr<'tcx>>,
        .                   expr_span: Span,
        .               ) {
       58 ( 0.00%)          let tcx = self.tcx;
        .           
        .                   let adt_ty_hint = self
       58 ( 0.00%)              .expected_inputs_for_expected_output(span, expected, adt_ty, &[adt_ty])
        .                       .get(0)
        .                       .cloned()
        .                       .unwrap_or(adt_ty);
        .                   // re-link the regions that EIfEO can erase.
        .                   self.demand_eqtype(span, adt_ty_hint, adt_ty);
        .           
       58 ( 0.00%)          let (substs, adt_kind, kind_name) = match adt_ty.kind() {
       58 ( 0.00%)              ty::Adt(adt, substs) => (substs, adt.adt_kind(), adt.variant_descr()),
        .                       _ => span_bug!(span, "non-ADT passed to check_expr_struct_fields"),
        .                   };
        .           
        .                   let mut remaining_fields = variant
        .                       .fields
        .                       .iter()
        .                       .enumerate()
      378 ( 0.00%)              .map(|(i, field)| (field.ident(tcx).normalize_to_macros_2_0(), (i, field)))
        .                       .collect::<FxHashMap<_, _>>();
        .           
        .                   let mut seen_fields = FxHashMap::default();
        .           
        .                   let mut error_happened = false;
        .           
        .                   // Type-check each field.
        .                   for field in ast_fields {
      968 ( 0.00%)              let ident = tcx.adjust_ident(field.ident, variant.def_id);
      189 ( 0.00%)              let field_type = if let Some((i, v_field)) = remaining_fields.remove(&ident) {
      189 ( 0.00%)                  seen_fields.insert(ident, field.span);
        .                           self.write_field_index(field.hir_id, i);
        .           
        .                           // We don't look at stability attributes on
        .                           // struct-like enums (yet...), but it's definitely not
        .                           // a bug to have constructed one.
       63 ( 0.00%)                  if adt_kind != AdtKind::Enum {
      531 ( 0.00%)                      tcx.check_stability(v_field.did, Some(expr_id), field.span, None);
        .                           }
        .           
      189 ( 0.00%)                  self.field_ty(field.span, v_field, substs)
        .                       } else {
        .                           error_happened = true;
        .                           if let Some(prev_span) = seen_fields.get(&ident) {
        .                               tcx.sess.emit_err(FieldMultiplySpecifiedInInitializer {
        .                                   span: field.ident.span,
        .                                   prev_span: *prev_span,
        .                                   ident,
        .                               });
-- line 1402 ----------------------------------------
-- line 1406 ----------------------------------------
        .                               );
        .                           }
        .           
        .                           tcx.ty_error()
        .                       };
        .           
        .                       // Make sure to give a type to the field even if there's
        .                       // an error, so we can continue type-checking.
      315 ( 0.00%)              self.check_expr_coercable_to_type(&field.expr, field_type, None);
        .                   }
        .           
        .                   // Make sure the programmer specified correct number of fields.
        .                   if kind_name == "union" {
        .                       if ast_fields.len() != 1 {
        .                           struct_span_err!(
        .                               tcx.sess,
        .                               span,
-- line 1422 ----------------------------------------
-- line 1425 ----------------------------------------
        .                           )
        .                           .emit();
        .                       }
        .                   }
        .           
        .                   // If check_expr_struct_fields hit an error, do not attempt to populate
        .                   // the fields with the base_expr. This could cause us to hit errors later
        .                   // when certain fields are assumed to exist that in fact do not.
       58 ( 0.00%)          if error_happened {
        .                       return;
        .                   }
        .           
       87 ( 0.00%)          if let Some(base_expr) = base_expr {
        .                       // FIXME: We are currently creating two branches here in order to maintain
        .                       // consistency. But they should be merged as much as possible.
        .                       let fru_tys = if self.tcx.features().type_changing_struct_update {
        .                           let base_ty = self.check_expr(base_expr);
        .                           match adt_ty.kind() {
        .                               ty::Adt(adt, substs) if adt.is_struct() => {
        .                                   match base_ty.kind() {
        .                                       ty::Adt(base_adt, base_subs) if adt == base_adt => {
-- line 1445 ----------------------------------------
-- line 1528 ----------------------------------------
        .                                   return self
        .                                       .tcx
        .                                       .sess
        .                                       .emit_err(FunctionalRecordUpdateOnNonStruct { span: base_expr.span });
        .                               }
        .                           }
        .                       };
        .                       self.typeck_results.borrow_mut().fru_field_types_mut().insert(expr_id, fru_tys);
       29 ( 0.00%)          } else if kind_name != "union" && !remaining_fields.is_empty() {
        .                       let inaccessible_remaining_fields = remaining_fields.iter().any(|(_, (_, field))| {
        .                           !field.vis.is_accessible_from(tcx.parent_module(expr_id).to_def_id(), tcx)
        .                       });
        .           
        .                       if inaccessible_remaining_fields {
        .                           self.report_inaccessible_fields(adt_ty, span);
        .                       } else {
        .                           self.report_missing_fields(adt_ty, span, remaining_fields);
        .                       }
        .                   }
      290 ( 0.00%)      }
        .           
        .               fn check_struct_fields_on_error(
        .                   &self,
        .                   fields: &'tcx [hir::ExprField<'tcx>],
        .                   base_expr: &'tcx Option<&'tcx hir::Expr<'tcx>>,
        .               ) {
        .                   for field in fields {
        .                       self.check_expr(&field.expr);
-- line 1555 ----------------------------------------
-- line 1805 ----------------------------------------
        .                       names.iter().take(limit).map(|n| format!("`{}`", n)).collect::<Vec<_>>().join(", ");
        .                   if names.len() > limit {
        .                       display = format!("{} ... and {} others", display, names.len() - limit);
        .                   }
        .                   display
        .               }
        .           
        .               // Check field access expressions
      840 ( 0.00%)      fn check_field(
        .                   &self,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .                   base: &'tcx hir::Expr<'tcx>,
        .                   field: Ident,
        .               ) -> Ty<'tcx> {
        .                   debug!("check_field(expr: {:?}, base: {:?}, field: {:?})", expr, base, field);
        .                   let expr_t = self.check_expr(base);
      350 ( 0.00%)          let expr_t = self.structurally_resolved_type(base.span, expr_t);
      140 ( 0.00%)          let mut private_candidate = None;
       70 ( 0.00%)          let mut autoderef = self.autoderef(expr.span, expr_t);
      548 ( 0.00%)          while let Some((base_t, _)) = autoderef.next() {
        .                       debug!("base_t: {:?}", base_t);
      553 ( 0.00%)              match base_t.kind() {
      198 ( 0.00%)                  ty::Adt(base_def, substs) if !base_def.is_enum() => {
        .                               debug!("struct named {:?}", base_t);
      528 ( 0.00%)                      let (ident, def_scope) =
      792 ( 0.00%)                          self.tcx.adjust_ident_and_get_scope(field, base_def.did, self.body_id);
      132 ( 0.00%)                      let fields = &base_def.non_enum_variant().fields;
        .                               if let Some(index) = fields
        .                                   .iter()
    1,946 ( 0.00%)                          .position(|f| f.ident(self.tcx).normalize_to_macros_2_0() == ident)
        .                               {
        .                                   let field = &fields[index];
      198 ( 0.00%)                          let field_ty = self.field_ty(expr.span, field, substs);
        .                                   // Save the index of all fields regardless of their visibility in case
        .                                   // of error recovery.
        .                                   self.write_field_index(expr.hir_id, index);
        .                                   let adjustments = self.adjust_steps(&autoderef);
       66 ( 0.00%)                          if field.vis.is_accessible_from(def_scope, self.tcx) {
      660 ( 0.00%)                              self.apply_adjustments(base, adjustments);
    1,188 ( 0.00%)                              self.register_predicates(autoderef.into_obligations());
        .           
      924 ( 0.00%)                              self.tcx.check_stability(field.did, Some(expr.hir_id), expr.span, None);
        .                                       return field_ty;
        .                                   }
        .                                   private_candidate = Some((adjustments, base_def.did, field_ty));
        .                               }
        .                           }
        .                           ty::Tuple(tys) => {
        8 ( 0.00%)                      let fstr = field.as_str();
       12 ( 0.00%)                      if let Ok(index) = fstr.parse::<usize>() {
        8 ( 0.00%)                          if fstr == index.to_string() {
       12 ( 0.00%)                              if let Some(field_ty) = tys.get(index) {
        .                                           let adjustments = self.adjust_steps(&autoderef);
       36 ( 0.00%)                                  self.apply_adjustments(base, adjustments);
       72 ( 0.00%)                                  self.register_predicates(autoderef.into_obligations());
        .           
        .                                           self.write_field_index(expr.hir_id, index);
       16 ( 0.00%)                                  return field_ty.expect_ty();
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                           _ => {}
        .                       }
        .                   }
        .                   self.structurally_resolved_type(autoderef.span(), autoderef.final_ty(false));
-- line 1870 ----------------------------------------
-- line 1890 ----------------------------------------
        .                           E0610,
        .                           "`{}` is a primitive type and therefore doesn't have fields",
        .                           expr_t
        .                       )
        .                       .emit();
        .                   }
        .           
        .                   self.tcx().ty_error()
      770 ( 0.00%)      }
        .           
        .               fn suggest_await_on_field_access(
        .                   &self,
        .                   err: &mut DiagnosticBuilder<'_>,
        .                   field_ident: Ident,
        .                   base: &'tcx hir::Expr<'tcx>,
        .                   ty: Ty<'tcx>,
        .               ) {
-- line 1906 ----------------------------------------
-- line 2301 ----------------------------------------
        .                   &self,
        .                   base: &'tcx hir::Expr<'tcx>,
        .                   idx: &'tcx hir::Expr<'tcx>,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .               ) -> Ty<'tcx> {
        .                   let base_t = self.check_expr(&base);
        .                   let idx_t = self.check_expr(&idx);
        .           
       37 ( 0.00%)          if base_t.references_error() {
        .                       base_t
       37 ( 0.00%)          } else if idx_t.references_error() {
        .                       idx_t
        .                   } else {
      222 ( 0.00%)              let base_t = self.structurally_resolved_type(base.span, base_t);
       74 ( 0.00%)              match self.lookup_indexing(expr, base, base_t, idx, idx_t) {
        .                           Some((index_ty, element_ty)) => {
        .                               // two-phase not needed because index_ty is never mutable
        .                               self.demand_coerce(idx, idx_t, index_ty, None, AllowTwoPhase::No);
        .                               element_ty
        .                           }
        .                           None => {
        .                               let mut err = type_error_struct!(
        .                                   self.tcx.sess,
-- line 2323 ----------------------------------------

  674,344 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/expr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/into_iter.rs
--------------------------------------------------------------------------------
Ir                 

-- line 51 ----------------------------------------
        .               /// let vec = vec!['a', 'b', 'c'];
        .               /// let mut into_iter = vec.into_iter();
        .               /// assert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);
        .               /// let _ = into_iter.next().unwrap();
        .               /// assert_eq!(into_iter.as_slice(), &['b', 'c']);
        .               /// ```
        .               #[stable(feature = "vec_into_iter_as_slice", since = "1.15.0")]
        .               pub fn as_slice(&self) -> &[T] {
    3,682 ( 0.00%)          unsafe { slice::from_raw_parts(self.ptr, self.len()) }
        .               }
        .           
        .               /// Returns the remaining items of this iterator as a mutable slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let vec = vec!['a', 'b', 'c'];
-- line 67 ----------------------------------------
-- line 80 ----------------------------------------
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               #[inline]
        .               pub fn allocator(&self) -> &A {
        .                   &self.alloc
        .               }
        .           
        .               fn as_raw_mut_slice(&mut self) -> *mut [T] {
1,101,088 ( 0.03%)          ptr::slice_from_raw_parts_mut(self.ptr as *mut T, self.len())
        .               }
        .           
        .               /// Drops remaining elements and relinquishes the backing allocation.
        .               ///
        .               /// This is roughly equivalent to the following, but more efficient
        .               ///
        .               /// ```
        .               /// # let mut into_iter = Vec::<u8>::with_capacity(10).into_iter();
-- line 96 ----------------------------------------
-- line 99 ----------------------------------------
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               pub(super) fn forget_allocation_drop_remaining(&mut self) {
        .                   let remaining = self.as_raw_mut_slice();
        .           
        .                   // overwrite the individual fields instead of creating a new
        .                   // struct and then overwriting &mut self.
        .                   // this creates less assembly
      441 ( 0.00%)          self.cap = 0;
      882 ( 0.00%)          self.buf = unsafe { NonNull::new_unchecked(RawVec::NEW.ptr()) };
      636 ( 0.00%)          self.ptr = self.buf.as_ptr();
      599 ( 0.00%)          self.end = self.buf.as_ptr();
        .           
        .                   unsafe {
        .                       ptr::drop_in_place(remaining);
        .                   }
        .               }
        .           }
        .           
        .           #[stable(feature = "vec_intoiter_as_ref", since = "1.46.0")]
-- line 118 ----------------------------------------
-- line 128 ----------------------------------------
        .           unsafe impl<T: Sync, A: Allocator + Sync> Sync for IntoIter<T, A> {}
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Iterator for IntoIter<T, A> {
        .               type Item = T;
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<T> {
1,908,608 ( 0.05%)          if self.ptr as *const _ == self.end {
   65,285 ( 0.00%)              None
       72 ( 0.00%)          } else if mem::size_of::<T>() == 0 {
        .                       // purposefully don't use 'ptr.offset' because for
        .                       // vectors with 0-size elements this would return the
        .                       // same pointer.
        .                       self.ptr = unsafe { arith_offset(self.ptr as *const i8, 1) as *mut T };
        .           
        .                       // Make up a value of this ZST.
        .                       Some(unsafe { mem::zeroed() })
        .                   } else {
        .                       let old = self.ptr;
  173,586 ( 0.00%)              self.ptr = unsafe { self.ptr.offset(1) };
        .           
  231,393 ( 0.01%)              Some(unsafe { ptr::read(old) })
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   let exact = if mem::size_of::<T>() == 0 {
        .                       (self.end as usize).wrapping_sub(self.ptr as usize)
        .                   } else {
        .                       unsafe { self.end.offset_from(self.ptr) as usize }
        .                   };
        3 ( 0.00%)          (exact, Some(exact))
        .               }
        .           
        .               #[inline]
        .               fn advance_by(&mut self, n: usize) -> Result<(), usize> {
        .                   let step_size = self.len().min(n);
        .                   let to_drop = ptr::slice_from_raw_parts_mut(self.ptr as *mut T, step_size);
        .                   if mem::size_of::<T>() == 0 {
        .                       // SAFETY: due to unchecked casts of unsigned amounts to signed offsets the wraparound
-- line 169 ----------------------------------------
-- line 181 ----------------------------------------
        .                   if step_size < n {
        .                       return Err(step_size);
        .                   }
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn count(self) -> usize {
        2 ( 0.00%)          self.len()
        .               }
        .           
        .               #[doc(hidden)]
        .               unsafe fn __iterator_get_unchecked(&mut self, i: usize) -> Self::Item
        .               where
        .                   Self: TrustedRandomAccessNoCoerce,
        .               {
        .                   // SAFETY: the caller must guarantee that `i` is in bounds of the
-- line 197 ----------------------------------------
-- line 207 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> DoubleEndedIterator for IntoIter<T, A> {
        .               #[inline]
        .               fn next_back(&mut self) -> Option<T> {
   36,466 ( 0.00%)          if self.end == self.ptr {
        .                       None
        .                   } else if mem::size_of::<T>() == 0 {
        .                       // See above for why 'ptr.offset' isn't used
        .                       self.end = unsafe { arith_offset(self.end as *const i8, -1) as *mut T };
        .           
        .                       // Make up a value of this ZST.
        .                       Some(unsafe { mem::zeroed() })
        .                   } else {
      982 ( 0.00%)              self.end = unsafe { self.end.offset(-1) };
        .           
      239 ( 0.00%)              Some(unsafe { ptr::read(self.end) })
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {
        .                   let step_size = self.len().min(n);
        .                   if mem::size_of::<T>() == 0 {
        .                       // SAFETY: same as for advance_by()
-- line 234 ----------------------------------------
-- line 295 ----------------------------------------
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   crate::slice::to_vec(self.as_slice(), self.alloc.clone()).into_iter()
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for IntoIter<T, A> {
3,568,677 ( 0.09%)      fn drop(&mut self) {
        .                   struct DropGuard<'a, T, A: Allocator>(&'a mut IntoIter<T, A>);
        .           
        .                   impl<T, A: Allocator> Drop for DropGuard<'_, T, A> {
        .                       fn drop(&mut self) {
        .                           unsafe {
        .                               // `IntoIter::alloc` is not used anymore after this
        .                               let alloc = ptr::read(&self.0.alloc);
        .                               // RawVec handles deallocation
  643,400 ( 0.02%)                      let _ = RawVec::from_raw_parts_in(self.0.buf.as_ptr(), self.0.cap, alloc);
        .                           }
        .                       }
        .                   }
        .           
        .                   let guard = DropGuard(self);
        .                   // destroy the remaining elements
        .                   unsafe {
       51 ( 0.00%)              ptr::drop_in_place(guard.0.as_raw_mut_slice());
        .                   }
        .                   // now `guard` will be dropped and do the rest
3,304,058 ( 0.08%)      }
        .           }
        .           
        .           #[unstable(issue = "none", feature = "inplace_iteration")]
        .           #[doc(hidden)]
        .           unsafe impl<T, A: Allocator> InPlaceIterable for IntoIter<T, A> {}
        .           
        .           #[unstable(issue = "none", feature = "inplace_iteration")]
        .           #[doc(hidden)]
-- line 331 ----------------------------------------

  534,091 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/into_iter.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs
--------------------------------------------------------------------------------
Ir                  

-- line 346 ----------------------------------------
         .               ///
         .               /// let c = Cell::new(5);
         .               ///
         .               /// c.set(10);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn set(&self, val: T) {
       653 ( 0.00%)          let old = self.replace(val);
       640 ( 0.00%)          drop(old);
         .               }
         .           
         .               /// Swaps the values of two `Cell`s.
         .               /// Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 363 ----------------------------------------
-- line 434 ----------------------------------------
         .               ///
         .               /// let five = c.get();
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn get(&self) -> T {
         .                   // SAFETY: This can cause data races if called from a separate thread,
         .                   // but `Cell` is `!Sync` so this won't happen.
   537,825 ( 0.01%)          unsafe { *self.value.get() }
         .               }
         .           
         .               /// Updates the contained value using a function and returns the new value.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(cell_update)]
-- line 450 ----------------------------------------
-- line 689 ----------------------------------------
         .           
         .           #[inline(always)]
         .           fn is_writing(x: BorrowFlag) -> bool {
         .               x < UNUSED
         .           }
         .           
         .           #[inline(always)]
         .           fn is_reading(x: BorrowFlag) -> bool {
 1,352,260 ( 0.03%)      x > UNUSED
         .           }
         .           
         .           impl<T> RefCell<T> {
         .               /// Creates a new `RefCell` containing `value`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 705 ----------------------------------------
-- line 706 ----------------------------------------
         .               /// use std::cell::RefCell;
         .               ///
         .               /// let c = RefCell::new(5);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_refcell_new", since = "1.24.0")]
         .               #[inline]
         .               pub const fn new(value: T) -> RefCell<T> {
    17,621 ( 0.00%)          RefCell {
    16,325 ( 0.00%)              value: UnsafeCell::new(value),
         .                       borrow: Cell::new(UNUSED),
         .                       #[cfg(feature = "debug_refcell")]
         .                       borrowed_at: Cell::new(None),
         .                   }
         .               }
         .           
         .               /// Consumes the `RefCell`, returning the wrapped value.
         .               ///
-- line 723 ----------------------------------------
-- line 731 ----------------------------------------
         .               /// let five = c.into_inner();
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_cell_into_inner", issue = "78729")]
         .               #[inline]
         .               pub const fn into_inner(self) -> T {
         .                   // Since this function takes `self` (the `RefCell`) by value, the
         .                   // compiler statically verifies that it is not currently borrowed.
       892 ( 0.00%)          self.value.into_inner()
         .               }
         .           
         .               /// Replaces the wrapped value with a new one, returning the old value,
         .               /// without deinitializing either one.
         .               ///
         .               /// This function corresponds to [`std::mem::replace`](../mem/fn.replace.html).
         .               ///
         .               /// # Panics
-- line 747 ----------------------------------------
-- line 845 ----------------------------------------
         .               /// let c = RefCell::new(5);
         .               ///
         .               /// let m = c.borrow_mut();
         .               /// let b = c.borrow(); // this causes a panic
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
    21,178 ( 0.00%)      pub fn borrow(&self) -> Ref<'_, T> {
         .                   self.try_borrow().expect("already mutably borrowed")
    63,534 ( 0.00%)      }
         .           
         .               /// Immutably borrows the wrapped value, returning an error if the value is currently mutably
         .               /// borrowed.
         .               ///
         .               /// The borrow lasts until the returned `Ref` exits scope. Multiple immutable borrows can be
         .               /// taken out at the same time.
         .               ///
         .               /// This is the non-panicking variant of [`borrow`](#method.borrow).
-- line 863 ----------------------------------------
-- line 937 ----------------------------------------
         .               /// let c = RefCell::new(5);
         .               /// let m = c.borrow();
         .               ///
         .               /// let b = c.borrow_mut(); // this causes a panic
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
    48,687 ( 0.00%)      pub fn borrow_mut(&self) -> RefMut<'_, T> {
         .                   self.try_borrow_mut().expect("already borrowed")
   146,061 ( 0.00%)      }
         .           
         .               /// Mutably borrows the wrapped value, returning an error if the value is currently borrowed.
         .               ///
         .               /// The borrow lasts until the returned `RefMut` or all `RefMut`s derived
         .               /// from it exit scope. The value cannot be borrowed while this borrow is
         .               /// active.
         .               ///
         .               /// This is the non-panicking variant of [`borrow_mut`](#method.borrow_mut).
-- line 955 ----------------------------------------
-- line 975 ----------------------------------------
         .                   match BorrowRefMut::new(&self.borrow) {
         .                       Some(b) => {
         .                           #[cfg(feature = "debug_refcell")]
         .                           {
         .                               self.borrowed_at.set(Some(crate::panic::Location::caller()));
         .                           }
         .           
         .                           // SAFETY: `BorrowRef` guarantees unique access.
        22 ( 0.00%)                  Ok(RefMut { value: unsafe { &mut *self.value.get() }, borrow: b })
         .                       }
         .                       None => Err(BorrowMutError {
         .                           // If a borrow occurred, then we must already have an outstanding borrow,
         .                           // so `borrowed_at` will be `Some`
         .                           #[cfg(feature = "debug_refcell")]
         .                           location: self.borrowed_at.get().unwrap(),
         .                       }),
         .                   }
-- line 991 ----------------------------------------
-- line 1254 ----------------------------------------
         .           
         .           struct BorrowRef<'b> {
         .               borrow: &'b Cell<BorrowFlag>,
         .           }
         .           
         .           impl<'b> BorrowRef<'b> {
         .               #[inline]
         .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRef<'b>> {
 1,479,911 ( 0.04%)          let b = borrow.get().wrapping_add(1);
   987,232 ( 0.03%)          if !is_reading(b) {
         .                       // Incrementing borrow can result in a non-reading value (<= 0) in these cases:
         .                       // 1. It was < 0, i.e. there are writing borrows, so we can't allow a read borrow
         .                       //    due to Rust's reference aliasing rules
         .                       // 2. It was isize::MAX (the max amount of reading borrows) and it overflowed
         .                       //    into isize::MIN (the max amount of writing borrows) so we can't allow
         .                       //    an additional read borrow because isize can't represent so many read borrows
         .                       //    (this can only happen if you mem::forget more than a small constant amount of
         .                       //    `Ref`s, which is not good practice)
-- line 1271 ----------------------------------------
-- line 1279 ----------------------------------------
         .                       Some(BorrowRef { borrow })
         .                   }
         .               }
         .           }
         .           
         .           impl Drop for BorrowRef<'_> {
         .               #[inline]
         .               fn drop(&mut self) {
   657,471 ( 0.02%)          let borrow = self.borrow.get();
         .                   debug_assert!(is_reading(borrow));
 1,274,597 ( 0.03%)          self.borrow.set(borrow - 1);
         .               }
         .           }
         .           
         .           impl Clone for BorrowRef<'_> {
         .               #[inline]
         .               fn clone(&self) -> Self {
         .                   // Since this Ref exists, we know the borrow flag
         .                   // is a reading borrow.
-- line 1297 ----------------------------------------
-- line 1645 ----------------------------------------
         .           
         .           struct BorrowRefMut<'b> {
         .               borrow: &'b Cell<BorrowFlag>,
         .           }
         .           
         .           impl Drop for BorrowRefMut<'_> {
         .               #[inline]
         .               fn drop(&mut self) {
 5,777,309 ( 0.15%)          let borrow = self.borrow.get();
         .                   debug_assert!(is_writing(borrow));
11,145,850 ( 0.28%)          self.borrow.set(borrow + 1);
         .               }
         .           }
         .           
         .           impl<'b> BorrowRefMut<'b> {
         .               #[inline]
         .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRefMut<'b>> {
         .                   // NOTE: Unlike BorrowRefMut::clone, new is called to create the initial
         .                   // mutable reference, and so there must currently be no existing
         .                   // references. Thus, while clone increments the mutable refcount, here
         .                   // we explicitly only allow going from UNUSED to UNUSED - 1.
11,825,978 ( 0.30%)          match borrow.get() {
         .                       UNUSED => {
         .                           borrow.set(UNUSED - 1);
         .                           Some(BorrowRefMut { borrow })
         .                       }
         .                       _ => None,
         .                   }
         .               }
         .           
-- line 1674 ----------------------------------------
-- line 1711 ----------------------------------------
         .                   self.value
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: ?Sized> DerefMut for RefMut<'_, T> {
         .               #[inline]
         .               fn deref_mut(&mut self) -> &mut T {
       218 ( 0.00%)          self.value
         .               }
         .           }
         .           
         .           #[unstable(feature = "coerce_unsized", issue = "27732")]
         .           impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<RefMut<'b, U>> for RefMut<'b, T> {}
         .           
         .           #[stable(feature = "std_guard_impls", since = "1.20.0")]
         .           impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {
-- line 1727 ----------------------------------------
-- line 1909 ----------------------------------------
         .               /// ```
         .               #[inline(always)]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_unsafecell_get", since = "1.32.0")]
         .               pub const fn get(&self) -> *mut T {
         .                   // We can just cast the pointer from `UnsafeCell<T>` to `T` because of
         .                   // #[repr(transparent)]. This exploits libstd's special status, there is
         .                   // no guarantee for user code that this will work in future versions of the compiler!
 5,897,418 ( 0.15%)          self as *const UnsafeCell<T> as *const T as *mut T
         .               }
         .           
         .               /// Returns a mutable reference to the underlying data.
         .               ///
         .               /// This call borrows the `UnsafeCell` mutably (at compile-time) which
         .               /// guarantees that we possess the only reference.
         .               ///
         .               /// # Examples
-- line 1925 ----------------------------------------

10,582,826 ( 0.27%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs
--------------------------------------------------------------------------------
Ir                 

-- line 63 ----------------------------------------
        .           /// assert!(iter.next().is_none());
        .           /// ```
        .           #[stable(feature = "iter_zip", since = "1.59.0")]
        .           pub fn zip<A, B>(a: A, b: B) -> Zip<A::IntoIter, B::IntoIter>
        .           where
        .               A: IntoIterator,
        .               B: IntoIterator,
        .           {
   45,561 ( 0.00%)      ZipImpl::new(a.into_iter(), b.into_iter())
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<A, B> Iterator for Zip<A, B>
        .           where
        .               A: Iterator,
        .               B: Iterator,
        .           {
-- line 79 ----------------------------------------
-- line 147 ----------------------------------------
        .                           index: 0, // unused
        .                           len: 0,   // unused
        .                           a_len: 0, // unused
        .                       }
        .                   }
        .           
        .                   #[inline]
        .                   default fn next(&mut self) -> Option<(A::Item, B::Item)> {
    4,943 ( 0.00%)              let x = self.a.next()?;
    2,530 ( 0.00%)              let y = self.b.next()?;
    2,400 ( 0.00%)              Some((x, y))
      684 ( 0.00%)          }
        .           
        .                   #[inline]
        .                   default fn nth(&mut self, n: usize) -> Option<Self::Item> {
        .                       self.super_nth(n)
        .                   }
        .           
        .                   #[inline]
        .                   default fn next_back(&mut self) -> Option<(A::Item, B::Item)>
-- line 166 ----------------------------------------
-- line 203 ----------------------------------------
        .               B: Iterator,
        .           {
        .               type Item = (A::Item, B::Item);
        .           
        .               zip_impl_general_defaults! {}
        .           
        .               #[inline]
        .               default fn size_hint(&self) -> (usize, Option<usize>) {
       30 ( 0.00%)          let (a_lower, a_upper) = self.a.size_hint();
        8 ( 0.00%)          let (b_lower, b_upper) = self.b.size_hint();
        .           
        .                   let lower = cmp::min(a_lower, b_lower);
        .           
        .                   let upper = match (a_upper, b_upper) {
        .                       (Some(x), Some(y)) => Some(cmp::min(x, y)),
        .                       (Some(x), None) => Some(x),
        .                       (None, Some(y)) => Some(y),
        .                       (None, None) => None,
-- line 220 ----------------------------------------
-- line 236 ----------------------------------------
        .           where
        .               A: TrustedRandomAccessNoCoerce + Iterator,
        .               B: TrustedRandomAccessNoCoerce + Iterator,
        .           {
        .               zip_impl_general_defaults! {}
        .           
        .               #[inline]
        .               default fn size_hint(&self) -> (usize, Option<usize>) {
       78 ( 0.00%)          let size = cmp::min(self.a.size(), self.b.size());
        .                   (size, Some(size))
        .               }
        .           
        .               #[inline]
        .               unsafe fn get_unchecked(&mut self, idx: usize) -> <Self as Iterator>::Item {
       76 ( 0.00%)          let idx = self.index + idx;
        .                   // SAFETY: the caller must uphold the contract for
        .                   // `Iterator::__iterator_get_unchecked`.
        .                   unsafe { (self.a.__iterator_get_unchecked(idx), self.b.__iterator_get_unchecked(idx)) }
        .               }
        .           }
        .           
        .           #[doc(hidden)]
        .           impl<A, B> ZipImpl<A, B> for Zip<A, B>
-- line 258 ----------------------------------------
-- line 263 ----------------------------------------
        .               fn new(a: A, b: B) -> Self {
        .                   let a_len = a.size();
        .                   let len = cmp::min(a_len, b.size());
        .                   Zip { a, b, index: 0, len, a_len }
        .               }
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<(A::Item, B::Item)> {
5,194,753 ( 0.13%)          if self.index < self.len {
        .                       let i = self.index;
        .                       // since get_unchecked executes code which can panic we increment the counters beforehand
        .                       // so that the same index won't be accessed twice, as required by TrustedRandomAccess
8,465,832 ( 0.22%)              self.index += 1;
        .                       // SAFETY: `i` is smaller than `self.len`, thus smaller than `self.a.len()` and `self.b.len()`
        .                       unsafe {
      102 ( 0.00%)                  Some((self.a.__iterator_get_unchecked(i), self.b.__iterator_get_unchecked(i)))
        .                       }
       12 ( 0.00%)          } else if A::MAY_HAVE_SIDE_EFFECT && self.index < self.a_len {
        .                       let i = self.index;
        .                       // as above, increment before executing code that may panic
        .                       self.index += 1;
        .                       self.len += 1;
        .                       // match the base implementation's potential side effects
        .                       // SAFETY: we just checked that `i` < `self.a.len()`
        .                       unsafe {
        .                           self.a.__iterator_get_unchecked(i);
-- line 288 ----------------------------------------
-- line 290 ----------------------------------------
        .                       None
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
   36,513 ( 0.00%)          let len = self.len - self.index;
        .                   (len, Some(len))
        .               }
        .           
        .               #[inline]
        .               fn nth(&mut self, n: usize) -> Option<Self::Item> {
        .                   let delta = cmp::min(n, self.len - self.index);
        .                   let end = self.index + delta;
        .                   while self.index < end {
-- line 306 ----------------------------------------
-- line 535 ----------------------------------------
        .           #[unstable(feature = "trusted_random_access", issue = "none")]
        .           #[rustc_specialization_trait]
        .           pub unsafe trait TrustedRandomAccessNoCoerce: Sized {
        .               // Convenience method.
        .               fn size(&self) -> usize
        .               where
        .                   Self: Iterator,
        .               {
      502 ( 0.00%)          self.size_hint().0
        .               }
        .               /// `true` if getting an iterator element may have side effects.
        .               /// Remember to take inner iterators into account.
        .               const MAY_HAVE_SIDE_EFFECT: bool;
        .           }
        .           
        .           /// Like `Iterator::__iterator_get_unchecked`, but doesn't require the compiler to
        .           /// know that `U: TrustedRandomAccess`.
-- line 551 ----------------------------------------
-- line 555 ----------------------------------------
        .           /// Same requirements calling `get_unchecked` directly.
        .           #[doc(hidden)]
        .           pub(in crate::iter::adapters) unsafe fn try_get_unchecked<I>(it: &mut I, idx: usize) -> I::Item
        .           where
        .               I: Iterator,
        .           {
        .               // SAFETY: the caller must uphold the contract for
        .               // `Iterator::__iterator_get_unchecked`.
    3,693 ( 0.00%)      unsafe { it.try_get_unchecked(idx) }
        .           }
        .           
        .           unsafe trait SpecTrustedRandomAccess: Iterator {
        .               /// If `Self: TrustedRandomAccess`, it must be safe to call
        .               /// `Iterator::__iterator_get_unchecked(self, index)`.
        .               unsafe fn try_get_unchecked(&mut self, index: usize) -> Self::Item;
        .           }
        .           
-- line 571 ----------------------------------------

  335,559 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir                 

-- line 27 ----------------------------------------
        .           impl CacheEntry {
        .               #[inline]
        .               fn update(
        .                   &mut self,
        .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
        .                   pos: BytePos,
        .                   time_stamp: usize,
        .               ) {
   12,917 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
    1,735 ( 0.00%)              self.file = file;
    1,307 ( 0.00%)              self.file_index = file_idx;
        .                   }
        .           
   11,998 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
        .                   let line_bounds = self.file.line_bounds(line_index);
   26,024 ( 0.00%)          self.line_number = line_index + 1;
   39,444 ( 0.00%)          self.line = line_bounds;
        .                   self.touch(time_stamp);
        .               }
        .           
        .               #[inline]
        .               fn touch(&mut self, time_stamp: usize) {
  281,861 ( 0.01%)          self.time_stamp = time_stamp;
        .               }
        .           }
        .           
        .           #[derive(Clone)]
        .           pub struct CachingSourceMapView<'sm> {
        .               source_map: &'sm SourceMap,
        .               line_cache: [CacheEntry; 3],
        .               time_stamp: usize,
        .           }
        .           
        .           impl<'sm> CachingSourceMapView<'sm> {
      860 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
        .                   let files = source_map.files();
      430 ( 0.00%)          let first_file = files[0].clone();
        .                   let entry = CacheEntry {
        .                       time_stamp: 0,
        .                       line_number: 0,
        .                       line: BytePos(0)..BytePos(0),
        .                       file: first_file,
        .                       file_index: 0,
        .                   };
        .           
    2,150 ( 0.00%)          CachingSourceMapView {
        .                       source_map,
    3,010 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
        .                       time_stamp: 0,
        .                   }
    1,720 ( 0.00%)      }
        .           
        .               pub fn byte_pos_to_line_and_col(
        .                   &mut self,
        .                   pos: BytePos,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
        .                   self.time_stamp += 1;
        .           
        .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
        .                   };
        .           
        .                   let cache_entry = &mut self.line_cache[oldest];
        .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
        .           
        .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
        .               }
        .           
1,029,532 ( 0.03%)      pub fn span_data_to_lines_and_cols(
        .                   &mut self,
        .                   span_data: &SpanData,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
  588,304 ( 0.01%)          self.time_stamp += 1;
        .           
        .                   // Check if lo and hi are in the cached lines.
  147,076 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
  147,076 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
        .           
  269,600 ( 0.01%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
        .                       // Cache hit for span lo and hi. Check if they belong to the same file.
        .                       let result = {
  269,570 ( 0.01%)                  let lo = &self.line_cache[lo_cache_idx as usize];
        .                           let hi = &self.line_cache[hi_cache_idx as usize];
        .           
  808,710 ( 0.02%)                  if lo.file_index != hi.file_index {
        .                               return None;
        .                           }
        .           
        .                           (
  269,570 ( 0.01%)                      lo.file.clone(),
        .                               lo.line_number,
        .                               span_data.lo - lo.line.start,
  134,785 ( 0.00%)                      hi.line_number,
        .                               span_data.hi - hi.line.start,
        .                           )
        .                       };
        .           
  134,785 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
  134,785 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
        .           
  539,140 ( 0.01%)              return Some(result);
        .                   }
        .           
        .                   // No cache hit or cache hit for only one of span lo and hi.
   24,552 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
        .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
        .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
        .                   } else {
        .                       self.oldest_cache_entry_index()
        .                   };
        .           
        .                   // If the entry doesn't point to the correct file, get the new file and index.
        .                   // Return early if the file containing beginning of span doesn't contain end of span.
   98,328 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
    1,465 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
    1,758 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
        .                           return None;
        .                       }
        .           
    1,172 ( 0.00%)              Some(new_file_and_idx)
        .                   } else {
        .                       let file = &self.line_cache[oldest].file;
   35,994 ( 0.00%)              if !file_contains(&file, span_data.hi) {
        .                           return None;
        .                       }
        .           
   35,994 ( 0.00%)              None
        .                   };
        .           
        .                   // Update the cache entries.
   61,455 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, -1) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
        .           
   35,889 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
        .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
        .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
        .                               let hi = &mut self.line_cache[next_oldest];
        .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
        .                               (oldest, next_oldest)
        .                           } else {
        .                               (oldest, oldest)
        .                           }
        .                       }
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, _) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
       30 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
       45 ( 0.00%)                  hi.touch(self.time_stamp);
        .                           (oldest, hi_cache_idx as usize)
        .                       }
        .                       // Oldest cache entry is for span_data.hi line.
        .                       (_, -1) => {
        .                           let hi = &mut self.line_cache[oldest];
      313 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
      626 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
    1,252 ( 0.00%)                  lo.touch(self.time_stamp);
        .                           (lo_cache_idx as usize, oldest)
        .                       }
        .                       _ => {
        .                           panic!();
        .                       }
        .                   };
        .           
        .                   let lo = &self.line_cache[lo_idx];
        .                   let hi = &self.line_cache[hi_idx];
        .           
        .                   // Span lo and hi may equal line end when last line doesn't
        .                   // end in newline, hence the inclusive upper bounds below.
   24,582 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
   12,291 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
   24,582 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
   12,291 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
   61,455 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
   36,873 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
   36,873 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
        .           
   36,873 ( 0.00%)          Some((
   12,291 ( 0.00%)              lo.file.clone(),
        .                       lo.line_number,
        .                       span_data.lo - lo.line.start,
   12,291 ( 0.00%)              hi.line_number,
        .                       span_data.hi - hi.line.start,
        .                   ))
1,323,684 ( 0.03%)      }
        .           
        .               fn cache_entry_index(&self, pos: BytePos) -> isize {
        .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
1,761,121 ( 0.04%)              if cache_entry.line.contains(&pos) {
        .                           return idx as isize;
        .                       }
        .                   }
        .           
        .                   -1
        .               }
        .           
        .               fn oldest_cache_entry_index(&self) -> usize {
        .                   let mut oldest = 0;
        .           
        .                   for idx in 1..self.line_cache.len() {
   71,778 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
        .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
        .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
        .           
        .                   for idx in 0..self.line_cache.len() {
    6,771 ( 0.00%)              if idx != avoid_idx
    3,230 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
        .                       {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
    1,465 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
      293 ( 0.00%)          if !self.source_map.files().is_empty() {
      586 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
        .                       let file = &self.source_map.files()[file_idx];
        .           
    2,344 ( 0.00%)              if file_contains(file, pos) {
        .                           return Some((file.clone(), file_idx));
        .                       }
        .                   }
        .           
        .                   None
    1,465 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
        .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
        .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
        .               // purposes of converting a byte position to a line and column number, we can't come up with a
        .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

1,691,465 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs
--------------------------------------------------------------------------------
Ir                  

-- line 491 ----------------------------------------
         .           
         .           use crate::iter::{self, FromIterator, FusedIterator, TrustedLen};
         .           use crate::ops::{self, ControlFlow, Deref, DerefMut};
         .           use crate::{convert, fmt, hint};
         .           
         .           /// `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).
         .           ///
         .           /// See the [module documentation](self) for details.
       120 ( 0.00%)  #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
         .           #[must_use = "this `Result` may be an `Err` variant, which should be handled"]
         .           #[rustc_diagnostic_item = "Result"]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           pub enum Result<T, E> {
         .               /// Contains the success value
         .               #[lang = "Ok"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         3 ( 0.00%)      Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
         .           
         .               /// Contains the error value
         .               #[lang = "Err"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               Err(#[stable(feature = "rust1", since = "1.0.0")] E),
         .           }
         .           
         .           /////////////////////////////////////////////////////////////////////////////
-- line 515 ----------------------------------------
-- line 534 ----------------------------------------
         .               /// let x: Result<i32, &str> = Err("Some error message");
         .               /// assert_eq!(x.is_ok(), false);
         .               /// ```
         .               #[must_use = "if you intended to assert that this is ok, consider `.unwrap()` instead"]
         .               #[rustc_const_stable(feature = "const_result", since = "1.48.0")]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub const fn is_ok(&self) -> bool {
    21,226 ( 0.00%)          matches!(*self, Ok(_))
         .               }
         .           
         .               /// Returns `true` if the result is [`Ok`] wrapping a value matching the predicate.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(is_some_with)]
-- line 550 ----------------------------------------
-- line 628 ----------------------------------------
         .               /// assert_eq!(x.ok(), Some(2));
         .               ///
         .               /// let x: Result<u32, &str> = Err("Nothing here");
         .               /// assert_eq!(x.ok(), None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn ok(self) -> Option<T> {
    64,287 ( 0.00%)          match self {
     1,912 ( 0.00%)              Ok(x) => Some(x),
         .                       Err(_) => None,
         .                   }
         .               }
         .           
         .               /// Converts from `Result<T, E>` to [`Option<E>`].
         .               ///
         .               /// Converts `self` into an [`Option<E>`], consuming `self`,
         .               /// and discarding the success value, if any.
-- line 645 ----------------------------------------
-- line 657 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn err(self) -> Option<E> {
         .                   match self {
         .                       Ok(_) => None,
         .                       Err(x) => Some(x),
         .                   }
         4 ( 0.00%)      }
         .           
         .               /////////////////////////////////////////////////////////////////////////
         .               // Adapter for working with references
         .               /////////////////////////////////////////////////////////////////////////
         .           
         .               /// Converts from `&Result<T, E>` to `Result<&T, &E>`.
         .               ///
         .               /// Produces a new `Result`, containing a reference
-- line 673 ----------------------------------------
-- line 683 ----------------------------------------
         .               ///
         .               /// let x: Result<u32, &str> = Err("Error");
         .               /// assert_eq!(x.as_ref(), Err(&"Error"));
         .               /// ```
         .               #[inline]
         .               #[rustc_const_stable(feature = "const_result", since = "1.48.0")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub const fn as_ref(&self) -> Result<&T, &E> {
        62 ( 0.00%)          match *self {
         .                       Ok(ref x) => Ok(x),
         .                       Err(ref x) => Err(x),
         .                   }
         .               }
         .           
         .               /// Converts from `&mut Result<T, E>` to `Result<&mut T, &mut E>`.
         .               ///
         .               /// # Examples
-- line 699 ----------------------------------------
-- line 715 ----------------------------------------
         .               /// let mut x: Result<i32, i32> = Err(13);
         .               /// mutate(&mut x);
         .               /// assert_eq!(x.unwrap_err(), 0);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_result", issue = "82814")]
         .               pub const fn as_mut(&mut self) -> Result<&mut T, &mut E> {
 3,391,691 ( 0.09%)          match *self {
         .                       Ok(ref mut x) => Ok(x),
         .                       Err(ref mut x) => Err(x),
         .                   }
         .               }
         .           
         .               /////////////////////////////////////////////////////////////////////////
         .               // Transforming contained values
         .               /////////////////////////////////////////////////////////////////////////
-- line 731 ----------------------------------------
-- line 747 ----------------------------------------
         .               ///         Ok(n) => println!("{}", n),
         .               ///         Err(..) => {}
         .               ///     }
         .               /// }
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn map<U, F: FnOnce(T) -> U>(self, op: F) -> Result<U, E> {
   833,279 ( 0.02%)          match self {
   971,571 ( 0.02%)              Ok(t) => Ok(op(t)),
   110,088 ( 0.00%)              Err(e) => Err(e),
         .                   }
    90,315 ( 0.00%)      }
         .           
         .               /// Returns the provided default (if [`Err`]), or
         .               /// applies a function to the contained value (if [`Ok`]),
         .               ///
         .               /// Arguments passed to `map_or` are eagerly evaluated; if you are passing
         .               /// the result of a function call, it is recommended to use [`map_or_else`],
         .               /// which is lazily evaluated.
         .               ///
-- line 767 ----------------------------------------
-- line 774 ----------------------------------------
         .               /// assert_eq!(x.map_or(42, |v| v.len()), 3);
         .               ///
         .               /// let x: Result<&str, _> = Err("bar");
         .               /// assert_eq!(x.map_or(42, |v| v.len()), 42);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "result_map_or", since = "1.41.0")]
         .               pub fn map_or<U, F: FnOnce(T) -> U>(self, default: U, f: F) -> U {
    10,121 ( 0.00%)          match self {
       108 ( 0.00%)              Ok(t) => f(t),
         .                       Err(_) => default,
         .                   }
         .               }
         .           
         .               /// Maps a `Result<T, E>` to `U` by applying fallback function `default` to
         .               /// a contained [`Err`] value, or function `f` to a contained [`Ok`] value.
         .               ///
         .               /// This function can be used to unpack a successful result
-- line 791 ----------------------------------------
-- line 831 ----------------------------------------
         .               /// let x: Result<u32, u32> = Ok(2);
         .               /// assert_eq!(x.map_err(stringify), Ok(2));
         .               ///
         .               /// let x: Result<u32, u32> = Err(13);
         .               /// assert_eq!(x.map_err(stringify), Err("error code: 13".to_string()));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
       125 ( 0.00%)      pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
 1,841,234 ( 0.05%)          match self {
 1,593,640 ( 0.04%)              Ok(t) => Ok(t),
       621 ( 0.00%)              Err(e) => Err(op(e)),
         .                   }
       305 ( 0.00%)      }
         .           
         .               /// Calls the provided closure with a reference to the contained value (if [`Ok`]).
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(result_option_inspect)]
         .               ///
-- line 852 ----------------------------------------
-- line 1012 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "result_expect", since = "1.4.0")]
         .               pub fn expect(self, msg: &str) -> T
         .               where
         .                   E: fmt::Debug,
         .               {
   106,220 ( 0.00%)          match self {
       162 ( 0.00%)              Ok(t) => t,
         .                       Err(e) => unwrap_failed(msg, &e),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value, consuming the `self` value.
         .               ///
         .               /// Because this function may panic, its use is generally discouraged.
         .               /// Instead, prefer to use pattern matching and handle the [`Err`]
-- line 1029 ----------------------------------------
-- line 1051 ----------------------------------------
         .               ///
         .               /// ```should_panic
         .               /// let x: Result<u32, &str> = Err("emergency failure");
         .               /// x.unwrap(); // panics with `emergency failure`
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "rust1", since = "1.0.0")]
   100,992 ( 0.00%)      pub fn unwrap(self) -> T
         .               where
         .                   E: fmt::Debug,
         .               {
 1,121,747 ( 0.03%)          match self {
 1,271,838 ( 0.03%)              Ok(t) => t,
         .                       Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
         .                   }
   151,488 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Ok`] value or a default
         .               ///
         .               /// Consumes the `self` argument then, if [`Ok`], returns the contained
         .               /// value, otherwise if [`Err`], returns the default value for that
         .               /// type.
         .               ///
         .               /// # Examples
-- line 1075 ----------------------------------------
-- line 1092 ----------------------------------------
         .               /// [`parse`]: str::parse
         .               /// [`FromStr`]: crate::str::FromStr
         .               #[inline]
         .               #[stable(feature = "result_unwrap_or_default", since = "1.16.0")]
         .               pub fn unwrap_or_default(self) -> T
         .               where
         .                   T: Default,
         .               {
    30,724 ( 0.00%)          match self {
    20,443 ( 0.00%)              Ok(x) => x,
         .                       Err(_) => Default::default(),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Err`] value, consuming the `self` value.
         .               ///
         .               /// # Panics
         .               ///
-- line 1109 ----------------------------------------
-- line 1152 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn unwrap_err(self) -> E
         .               where
         .                   T: fmt::Debug,
         .               {
        80 ( 0.00%)          match self {
         .                       Ok(t) => unwrap_failed("called `Result::unwrap_err()` on an `Ok` value", &t),
         .                       Err(e) => e,
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value, but never panics.
         .               ///
         .               /// Unlike [`unwrap`], this method is known to never panic on the
-- line 1168 ----------------------------------------
-- line 1190 ----------------------------------------
         .               /// ```
         .               #[unstable(feature = "unwrap_infallible", reason = "newly added", issue = "61695")]
         .               #[inline]
         .               pub fn into_ok(self) -> T
         .               where
         .                   E: Into<!>,
         .               {
         .                   match self {
   726,781 ( 0.02%)              Ok(x) => x,
         .                       Err(e) => e.into(),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Err`] value, but never panics.
         .               ///
         .               /// Unlike [`unwrap_err`], this method is known to never panic on the
         .               /// result types it is implemented for. Therefore, it can be used
-- line 1206 ----------------------------------------
-- line 1290 ----------------------------------------
         .               /// assert_eq!(Ok(2).and_then(sq).and_then(sq), Ok(16));
         .               /// assert_eq!(Ok(2).and_then(sq).and_then(err), Err(4));
         .               /// assert_eq!(Ok(2).and_then(err).and_then(sq), Err(2));
         .               /// assert_eq!(Err(3).and_then(sq).and_then(sq), Err(3));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn and_then<U, F: FnOnce(T) -> Result<U, E>>(self, op: F) -> Result<U, E> {
   237,858 ( 0.01%)          match self {
   491,283 ( 0.01%)              Ok(t) => op(t),
    22,272 ( 0.00%)              Err(e) => Err(e),
         .                   }
         .               }
         .           
         .               /// Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.
         .               ///
         .               /// Arguments passed to `or` are eagerly evaluated; if you are passing the
         .               /// result of a function call, it is recommended to use [`or_else`], which is
         .               /// lazily evaluated.
-- line 1308 ----------------------------------------
-- line 1355 ----------------------------------------
         .               /// assert_eq!(Ok(2).or_else(sq).or_else(sq), Ok(2));
         .               /// assert_eq!(Ok(2).or_else(err).or_else(sq), Ok(2));
         .               /// assert_eq!(Err(3).or_else(sq).or_else(err), Ok(9));
         .               /// assert_eq!(Err(3).or_else(err).or_else(err), Err(3));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn or_else<F, O: FnOnce(E) -> Result<T, F>>(self, op: O) -> Result<T, F> {
   623,776 ( 0.02%)          match self {
 1,631,253 ( 0.04%)              Ok(t) => Ok(t),
         .                       Err(e) => op(e),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value or a provided default.
         .               ///
         .               /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing
         .               /// the result of a function call, it is recommended to use [`unwrap_or_else`],
-- line 1372 ----------------------------------------
-- line 1384 ----------------------------------------
         .               /// assert_eq!(x.unwrap_or(default), 9);
         .               ///
         .               /// let x: Result<u32, &str> = Err("error");
         .               /// assert_eq!(x.unwrap_or(default), default);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn unwrap_or(self, default: T) -> T {
        73 ( 0.00%)          match self {
        15 ( 0.00%)              Ok(t) => t,
         .                       Err(_) => default,
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value or computes it from a closure.
         .               ///
         .               ///
         .               /// # Examples
-- line 1401 ----------------------------------------
-- line 1406 ----------------------------------------
         .               /// fn count(x: &str) -> usize { x.len() }
         .               ///
         .               /// assert_eq!(Ok(2).unwrap_or_else(count), 2);
         .               /// assert_eq!(Err("foo").unwrap_or_else(count), 3);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn unwrap_or_else<F: FnOnce(E) -> T>(self, op: F) -> T {
   659,131 ( 0.02%)          match self {
   114,654 ( 0.00%)              Ok(t) => t,
         .                       Err(e) => op(e),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value, consuming the `self` value,
         .               /// without checking that the value is not an [`Err`].
         .               ///
         .               /// # Safety
-- line 1423 ----------------------------------------
-- line 1647 ----------------------------------------
         .               /// let x: Result<Option<i32>, SomeErr> = Ok(Some(5));
         .               /// let y: Option<Result<i32, SomeErr>> = Some(Ok(5));
         .               /// assert_eq!(x.transpose(), y);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "transpose_result", since = "1.33.0")]
         .               #[rustc_const_unstable(feature = "const_result", issue = "82814")]
         .               pub const fn transpose(self) -> Option<Result<T, E>> {
       374 ( 0.00%)          match self {
         .                       Ok(Some(x)) => Some(Ok(x)),
         .                       Ok(None) => None,
         .                       Err(e) => Some(Err(e)),
         .                   }
         .               }
         .           }
         .           
         .           impl<T, E> Result<Result<T, E>, E> {
-- line 1663 ----------------------------------------
-- line 1751 ----------------------------------------
         .           
         .           /////////////////////////////////////////////////////////////////////////////
         .           // Trait implementations
         .           /////////////////////////////////////////////////////////////////////////////
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Clone, E: Clone> Clone for Result<T, E> {
         .               #[inline]
    40,721 ( 0.00%)      fn clone(&self) -> Self {
 1,395,222 ( 0.04%)          match self {
   211,777 ( 0.01%)              Ok(x) => Ok(x.clone()),
   230,890 ( 0.01%)              Err(x) => Err(x.clone()),
         .                   }
   205,322 ( 0.01%)      }
         .           
         .               #[inline]
         .               fn clone_from(&mut self, source: &Self) {
         .                   match (self, source) {
         .                       (Ok(to), Ok(from)) => to.clone_from(from),
         .                       (Err(to), Err(from)) => to.clone_from(from),
         .                       (to, from) => *to = from.clone(),
         .                   }
-- line 1772 ----------------------------------------
-- line 2011 ----------------------------------------
         .               ///
         .               /// Since the third element caused an underflow, no further elements were taken,
         .               /// so the final value of `shared` is 6 (= `3 + 2 + 1`), not 16.
         .               #[inline]
         .               fn from_iter<I: IntoIterator<Item = Result<A, E>>>(iter: I) -> Result<V, E> {
         .                   // FIXME(#11084): This could be replaced with Iterator::scan when this
         .                   // performance bug is closed.
         .           
       371 ( 0.00%)          iter::process_results(iter.into_iter(), |i| i.collect())
         .               }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2", issue = "84277")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T, E> const ops::Try for Result<T, E> {
         .               type Output = T;
         .               type Residual = Result<convert::Infallible, E>;
         .           
         .               #[inline]
         .               fn from_output(output: Self::Output) -> Self {
     2,170 ( 0.00%)          Ok(output)
         .               }
         .           
         .               #[inline]
         .               fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
 8,890,374 ( 0.23%)          match self {
24,101,231 ( 0.61%)              Ok(v) => ControlFlow::Continue(v),
    38,296 ( 0.00%)              Err(e) => ControlFlow::Break(Err(e)),
         .                   }
         .               }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2", issue = "84277")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T, E, F: ~const From<E>> const ops::FromResidual<Result<convert::Infallible, E>>
         .               for Result<T, F>
         .           {
         .               #[inline]
         .               #[track_caller]
         .               fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
         .                   match residual {
    57,619 ( 0.00%)              Err(e) => Err(From::from(e)),
         .                   }
         .               }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2_residual", issue = "91285")]
         .           impl<T, E> ops::Residual<T> for Result<convert::Infallible, E> {
         .               type TryType = Result<T, E>;
         .           }
-- line 2060 ----------------------------------------

 7,218,671 ( 0.18%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/expr.rs
--------------------------------------------------------------------------------
Ir                 

-- line 71 ----------------------------------------
        .               AlreadyParsed(P<Expr>),
        .           }
        .           
        .           impl From<Option<AttrWrapper>> for LhsExpr {
        .               /// Converts `Some(attrs)` into `LhsExpr::AttributesParsed(attrs)`
        .               /// and `None` into `LhsExpr::NotYetParsed`.
        .               ///
        .               /// This conversion does not allocate.
        1 ( 0.00%)      fn from(o: Option<AttrWrapper>) -> Self {
   86,845 ( 0.00%)          if let Some(attrs) = o { LhsExpr::AttributesParsed(attrs) } else { LhsExpr::NotYetParsed }
        1 ( 0.00%)      }
        .           }
        .           
        .           impl From<P<Expr>> for LhsExpr {
        .               /// Converts the `expr: P<Expr>` into `LhsExpr::AlreadyParsed(expr)`.
        .               ///
        .               /// This conversion does not allocate.
        .               fn from(expr: P<Expr>) -> Self {
        .                   LhsExpr::AlreadyParsed(expr)
-- line 89 ----------------------------------------
-- line 99 ----------------------------------------
        .                   self.parse_expr_res(Restrictions::empty(), None)
        .               }
        .           
        .               /// Parses an expression, forcing tokens to be collected
        .               pub fn parse_expr_force_collect(&mut self) -> PResult<'a, P<Expr>> {
        .                   self.collect_tokens_no_attrs(|this| this.parse_expr())
        .               }
        .           
      132 ( 0.00%)      pub fn parse_anon_const_expr(&mut self) -> PResult<'a, AnonConst> {
        .                   self.parse_expr().map(|value| AnonConst { id: DUMMY_NODE_ID, value })
      132 ( 0.00%)      }
        .           
   95,440 ( 0.00%)      fn parse_expr_catch_underscore(&mut self) -> PResult<'a, P<Expr>> {
   23,860 ( 0.00%)          match self.parse_expr() {
        .                       Ok(expr) => Ok(expr),
        .                       Err(mut err) => match self.token.ident() {
        .                           Some((Ident { name: kw::Underscore, .. }, false))
        .                               if self.look_ahead(1, |t| t == &token::Comma) =>
        .                           {
        .                               // Special-case handling of `foo(_, _, _)`
        .                               err.emit();
        .                               self.bump();
        .                               Ok(self.mk_expr(self.prev_token.span, ExprKind::Err, AttrVec::new()))
        .                           }
        .                           _ => Err(err),
        .                       },
        .                   }
  119,300 ( 0.00%)      }
        .           
        .               /// Parses a sequence of expressions delimited by parentheses.
        .               fn parse_paren_expr_seq(&mut self) -> PResult<'a, Vec<P<Expr>>> {
   61,354 ( 0.00%)          self.parse_paren_comma_seq(|p| p.parse_expr_catch_underscore()).map(|(r, _)| r)
        .               }
        .           
        .               /// Parses an expression, subject to the given restrictions.
        .               #[inline]
        .               pub(super) fn parse_expr_res(
        .                   &mut self,
        .                   r: Restrictions,
        .                   already_parsed_attrs: Option<AttrWrapper>,
-- line 138 ----------------------------------------
-- line 144 ----------------------------------------
        .               ///
        .               /// This parses an expression accounting for associativity and precedence of the operators in
        .               /// the expression.
        .               #[inline]
        .               fn parse_assoc_expr(
        .                   &mut self,
        .                   already_parsed_attrs: Option<AttrWrapper>,
        .               ) -> PResult<'a, P<Expr>> {
  195,993 ( 0.00%)          self.parse_assoc_expr_with(0, already_parsed_attrs.into())
        .               }
        .           
        .               /// Parses an associative expression with operators of at least `min_prec` precedence.
  471,753 ( 0.01%)      pub(super) fn parse_assoc_expr_with(
        .                   &mut self,
        .                   min_prec: usize,
        .                   lhs: LhsExpr,
        .               ) -> PResult<'a, P<Expr>> {
  262,084 ( 0.01%)          let mut lhs = if let LhsExpr::AlreadyParsed(expr) = lhs {
      560 ( 0.00%)              expr
        .                   } else {
  104,554 ( 0.00%)              let attrs = match lhs {
  105,179 ( 0.00%)                  LhsExpr::AttributesParsed(attrs) => Some(attrs),
        .                           _ => None,
        .                       };
   52,277 ( 0.00%)              if [token::DotDot, token::DotDotDot, token::DotDotEq].contains(&self.token.kind) {
       24 ( 0.00%)                  return self.parse_prefix_range_expr(attrs);
        .                       } else {
  627,252 ( 0.02%)                  self.parse_prefix_expr(attrs)?
        .                       }
        .                   };
  104,822 ( 0.00%)          let last_type_ascription_set = self.last_type_ascription.is_some();
        .           
        .                   if !self.should_continue_as_assoc_expr(&lhs) {
      267 ( 0.00%)              self.last_type_ascription = None;
        .                       return Ok(lhs);
        .                   }
        .           
        .                   self.expected_tokens.push(TokenType::Operator);
      796 ( 0.00%)          while let Some(op) = self.check_assoc_op() {
        .                       // Adjust the span for interpolated LHS to point to the `$lhs` token
        .                       // and not to what it refers to.
    1,194 ( 0.00%)              let lhs_span = match self.prev_token.kind {
        .                           TokenKind::Interpolated(..) => self.prev_token.span,
        .                           _ => lhs.span,
        .                       };
        .           
      398 ( 0.00%)              let cur_op_span = self.token.span;
    1,592 ( 0.00%)              let restrictions = if op.node.is_assign_like() {
        .                           self.restrictions & Restrictions::NO_STRUCT_LITERAL
        .                       } else {
        .                           self.restrictions
        .                       };
      597 ( 0.00%)              let prec = op.node.precedence();
      398 ( 0.00%)              if prec < min_prec {
        .                           break;
        .                       }
        .                       // Check for deprecated `...` syntax
      644 ( 0.00%)              if self.token == token::DotDotDot && op.node == AssocOp::DotDotEq {
        .                           self.err_dotdotdot_syntax(self.token.span);
        .                       }
        .           
      644 ( 0.00%)              if self.token == token::LArrow {
        .                           self.err_larrow_operator(self.token.span);
        .                       }
        .           
      161 ( 0.00%)              self.bump();
      644 ( 0.00%)              if op.node.is_comparison() {
        .                           if let Some(expr) = self.check_no_chained_comparison(&lhs, &op)? {
        .                               return Ok(expr);
        .                           }
        .                       }
        .           
        .                       // Look for JS' `===` and `!==` and recover
      237 ( 0.00%)              if (op.node == AssocOp::Equal || op.node == AssocOp::NotEqual)
       76 ( 0.00%)                  && self.token.kind == token::Eq
        .                           && self.prev_token.span.hi() == self.token.span.lo()
        .                       {
        .                           let sp = op.span.to(self.token.span);
        .                           let sugg = match op.node {
        .                               AssocOp::Equal => "==",
        .                               AssocOp::NotEqual => "!=",
        .                               _ => unreachable!(),
        .                           };
-- line 226 ----------------------------------------
-- line 231 ----------------------------------------
        .                                   sugg.to_string(),
        .                                   Applicability::MachineApplicable,
        .                               )
        .                               .emit();
        .                           self.bump();
        .                       }
        .           
        .                       // Look for PHP's `<>` and recover
       52 ( 0.00%)              if op.node == AssocOp::Less
       14 ( 0.00%)                  && self.token.kind == token::Gt
        .                           && self.prev_token.span.hi() == self.token.span.lo()
        .                       {
        .                           let sp = op.span.to(self.token.span);
        .                           self.struct_span_err(sp, "invalid comparison operator `<>`")
        .                               .span_suggestion_short(
        .                                   sp,
        .                                   "`<>` is not a valid comparison operator, use `!=`",
        .                                   "!=".to_string(),
        .                                   Applicability::MachineApplicable,
        .                               )
        .                               .emit();
        .                           self.bump();
        .                       }
        .           
        .                       // Look for C++'s `<=>` and recover
       12 ( 0.00%)              if op.node == AssocOp::LessEqual
       12 ( 0.00%)                  && self.token.kind == token::Gt
        .                           && self.prev_token.span.hi() == self.token.span.lo()
        .                       {
        .                           let sp = op.span.to(self.token.span);
        .                           self.struct_span_err(sp, "invalid comparison operator `<=>`")
        .                               .span_label(
        .                                   sp,
        .                                   "`<=>` is not a valid comparison operator, use `std::cmp::Ordering`",
        .                               )
        .                               .emit();
        .                           self.bump();
        .                       }
        .           
      322 ( 0.00%)              let op = op.node;
        .                       // Special cases:
        .                       if op == AssocOp::As {
       60 ( 0.00%)                  lhs = self.parse_assoc_op_cast(lhs, lhs_span, ExprKind::Cast)?;
        .                           continue;
        .                       } else if op == AssocOp::Colon {
        .                           lhs = self.parse_assoc_op_ascribe(lhs, lhs_span)?;
        .                           continue;
        .                       } else if op == AssocOp::DotDot || op == AssocOp::DotDotEq {
        .                           // If we didn’t have to handle `x..`/`x..=`, it would be pretty easy to
        .                           // generalise it to the Fixity::None code.
       48 ( 0.00%)                  lhs = self.parse_range_expr(prec, lhs, op, cur_op_span)?;
        .                           break;
        .                       }
        .           
      137 ( 0.00%)              let fixity = op.fixity();
      411 ( 0.00%)              let prec_adjustment = match fixity {
        .                           Fixity::Right => 0,
        .                           Fixity::Left => 1,
        .                           // We currently have no non-associative operators that are not handled above by
        .                           // the special cases. The code is here only for future convenience.
        .                           Fixity::None => 1,
        .                       };
      274 ( 0.00%)              let rhs = self.with_res(restrictions - Restrictions::STMT_EXPR, |this| {
      685 ( 0.00%)                  this.parse_assoc_expr_with(prec + prec_adjustment, LhsExpr::NotYetParsed)
        .                       })?;
        .           
        .                       let span = self.mk_expr_sp(&lhs, lhs_span, rhs.span);
    1,274 ( 0.00%)              lhs = match op {
        .                           AssocOp::Add
        .                           | AssocOp::Subtract
        .                           | AssocOp::Multiply
        .                           | AssocOp::Divide
        .                           | AssocOp::Modulus
        .                           | AssocOp::LAnd
        .                           | AssocOp::LOr
        .                           | AssocOp::BitXor
-- line 306 ----------------------------------------
-- line 309 ----------------------------------------
        .                           | AssocOp::ShiftLeft
        .                           | AssocOp::ShiftRight
        .                           | AssocOp::Equal
        .                           | AssocOp::Less
        .                           | AssocOp::LessEqual
        .                           | AssocOp::NotEqual
        .                           | AssocOp::Greater
        .                           | AssocOp::GreaterEqual => {
      208 ( 0.00%)                      let ast_op = op.to_ast_binop().unwrap();
        .                               let binary = self.mk_binary(source_map::respan(cur_op_span, ast_op), lhs, rhs);
        .                               self.mk_expr(span, binary, AttrVec::new())
        .                           }
        .                           AssocOp::Assign => {
        .                               self.mk_expr(span, ExprKind::Assign(lhs, rhs, cur_op_span), AttrVec::new())
        .                           }
        .                           AssocOp::AssignOp(k) => {
        .                               let aop = match k {
-- line 325 ----------------------------------------
-- line 337 ----------------------------------------
        .                               let aopexpr = self.mk_assign_op(source_map::respan(cur_op_span, aop), lhs, rhs);
        .                               self.mk_expr(span, aopexpr, AttrVec::new())
        .                           }
        .                           AssocOp::As | AssocOp::Colon | AssocOp::DotDot | AssocOp::DotDotEq => {
        .                               self.span_bug(span, "AssocOp should have been handled by special case")
        .                           }
        .                       };
        .           
      274 ( 0.00%)              if let Fixity::None = fixity {
        .                           break;
        .                       }
        .                   }
   52,322 ( 0.00%)          if last_type_ascription_set {
        .                       self.last_type_ascription = None;
        .                   }
  104,644 ( 0.00%)          Ok(lhs)
  890,853 ( 0.02%)      }
        .           
        .               fn should_continue_as_assoc_expr(&mut self, lhs: &Expr) -> bool {
  367,055 ( 0.01%)          match (self.expr_is_complete(lhs), AssocOp::from_token(&self.token)) {
        .                       // Semi-statement forms are odd:
        .                       // See https://github.com/rust-lang/rust/issues/29071
        .                       (true, None) => false,
        .                       (false, _) => true, // Continue parsing the expression.
        .                       // An exhaustive check is done in the following block, but these are checked first
        .                       // because they *are* ambiguous but also reasonable looking incorrect syntax, so we
        .                       // want to keep their span info to improve diagnostics in these cases in a later stage.
        .                       (true, Some(AssocOp::Multiply)) | // `{ 42 } *foo = bar;` or `{ 42 } * 3`
-- line 364 ----------------------------------------
-- line 401 ----------------------------------------
        .                   err.emit();
        .               }
        .           
        .               /// Possibly translate the current token to an associative operator.
        .               /// The method does not advance the current token.
        .               ///
        .               /// Also performs recovery for `and` / `or` which are mistaken for `&&` and `||` respectively.
        .               fn check_assoc_op(&self) -> Option<Spanned<AssocOp>> {
  577,388 ( 0.01%)          let (op, span) = match (AssocOp::from_token(&self.token), self.token.ident()) {
        .                       // When parsing const expressions, stop parsing when encountering `>`.
        .                       (
        .                           Some(
        .                               AssocOp::ShiftRight
        .                               | AssocOp::Greater
        .                               | AssocOp::GreaterEqual
        .                               | AssocOp::AssignOp(token::BinOpToken::Shr),
        .                           ),
        .                           _,
        4 ( 0.00%)              ) if self.restrictions.contains(Restrictions::CONST_EXPR) => {
        .                           return None;
        .                       }
      398 ( 0.00%)              (Some(op), _) => (op, self.token.span),
        .                       (None, Some((Ident { name: sym::and, span }, false))) => {
        .                           self.error_bad_logical_op("and", "&&", "conjunction");
        .                           (AssocOp::LAnd, span)
        .                       }
        .                       (None, Some((Ident { name: sym::or, span }, false))) => {
        .                           self.error_bad_logical_op("or", "||", "disjunction");
        .                           (AssocOp::LOr, span)
        .                       }
-- line 430 ----------------------------------------
-- line 443 ----------------------------------------
        .                           Applicability::MachineApplicable,
        .                       )
        .                       .note("unlike in e.g., python and PHP, `&&` and `||` are used for logical operators")
        .                       .emit();
        .               }
        .           
        .               /// Checks if this expression is a successfully parsed statement.
        .               fn expr_is_complete(&self, e: &Expr) -> bool {
  114,915 ( 0.00%)          self.restrictions.contains(Restrictions::STMT_EXPR)
    1,540 ( 0.00%)              && !classify::expr_requires_semi_to_be_stmt(e)
        .               }
        .           
        .               /// Parses `x..y`, `x..=y`, and `x..`/`x..=`.
        .               /// The other two variants are handled in `parse_prefix_range_expr` below.
        .               fn parse_range_expr(
        .                   &mut self,
        .                   prec: usize,
        .                   lhs: P<Expr>,
        .                   op: AssocOp,
        .                   cur_op_span: Span,
        .               ) -> PResult<'a, P<Expr>> {
        .                   let rhs = if self.is_at_start_of_range_notation_rhs() {
       72 ( 0.00%)              Some(self.parse_assoc_expr_with(prec + 1, LhsExpr::NotYetParsed)?)
        .                   } else {
        8 ( 0.00%)              None
        .                   };
       16 ( 0.00%)          let rhs_span = rhs.as_ref().map_or(cur_op_span, |x| x.span);
        .                   let span = self.mk_expr_sp(&lhs, lhs.span, rhs_span);
        .                   let limits =
        .                       if op == AssocOp::DotDot { RangeLimits::HalfOpen } else { RangeLimits::Closed };
       36 ( 0.00%)          let range = self.mk_range(Some(lhs), rhs, limits);
        .                   Ok(self.mk_expr(span, range, AttrVec::new()))
        .               }
        .           
        .               fn is_at_start_of_range_notation_rhs(&self) -> bool {
       78 ( 0.00%)          if self.token.can_begin_expr() {
        .                       // Parse `for i in 1.. { }` as infinite loop, not as `for i in (1..{})`.
       70 ( 0.00%)              if self.token == token::OpenDelim(token::Brace) {
        .                           return !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL);
        .                       }
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// Parses prefix-forms of range notation: `..expr`, `..`, `..=expr`.
        .               fn parse_prefix_range_expr(&mut self, attrs: Option<AttrWrapper>) -> PResult<'a, P<Expr>> {
        .                   // Check for deprecated `...` syntax.
       30 ( 0.00%)          if self.token == token::DotDotDot {
        .                       self.err_dotdotdot_syntax(self.token.span);
        .                   }
        .           
        .                   debug_assert!(
        .                       [token::DotDot, token::DotDotDot, token::DotDotEq].contains(&self.token.kind),
        .                       "parse_prefix_range_expr: token {:?} is not DotDot/DotDotEq",
        .                       self.token
        .                   );
        .           
       18 ( 0.00%)          let limits = match self.token.kind {
        .                       token::DotDot => RangeLimits::HalfOpen,
        .                       _ => RangeLimits::Closed,
        .                   };
       12 ( 0.00%)          let op = AssocOp::from_token(&self.token);
        .                   // FIXME: `parse_prefix_range_expr` is called when the current
        .                   // token is `DotDot`, `DotDotDot`, or `DotDotEq`. If we haven't already
        .                   // parsed attributes, then trying to parse them here will always fail.
        .                   // We should figure out how we want attributes on range expressions to work.
       24 ( 0.00%)          let attrs = self.parse_or_use_outer_attributes(attrs)?;
        .                   self.collect_tokens_for_expr(attrs, |this, attrs| {
       12 ( 0.00%)              let lo = this.token.span;
       12 ( 0.00%)              this.bump();
        .                       let (span, opt_end) = if this.is_at_start_of_range_notation_rhs() {
        .                           // RHS must be parsed with more associativity than the dots.
       60 ( 0.00%)                  this.parse_assoc_expr_with(op.unwrap().precedence() + 1, LhsExpr::NotYetParsed)
       30 ( 0.00%)                      .map(|x| (lo.to(x.span), Some(x)))?
        .                       } else {
        .                           (lo, None)
        .                       };
       18 ( 0.00%)              let range = this.mk_range(None, opt_end, limits);
       42 ( 0.00%)              Ok(this.mk_expr(span, range, attrs.into()))
        .                   })
        .               }
        .           
        .               /// Parses a prefix-unary-operator expr.
  366,338 ( 0.01%)      fn parse_prefix_expr(&mut self, attrs: Option<AttrWrapper>) -> PResult<'a, P<Expr>> {
  418,672 ( 0.01%)          let attrs = self.parse_or_use_outer_attributes(attrs)?;
  261,670 ( 0.01%)          let lo = self.token.span;
        .           
        .                   macro_rules! make_it {
        .                       ($this:ident, $attrs:expr, |this, _| $body:expr) => {
      548 ( 0.00%)                  $this.collect_tokens_for_expr($attrs, |$this, attrs| {
      786 ( 0.00%)                      let (hi, ex) = $body?;
    1,008 ( 0.00%)                      Ok($this.mk_expr(lo.to(hi), ex, attrs.into()))
      611 ( 0.00%)                  })
        .                       };
        .                   }
        .           
        .                   let this = self;
        .           
        .                   // Note: when adding new unary operators, don't forget to adjust TokenKind::can_begin_expr()
  314,272 ( 0.01%)          match this.token.uninterpolate().kind {
       15 ( 0.00%)              token::Not => make_it!(this, attrs, |this, _| this.parse_unary_expr(lo, UnOp::Not)), // `!expr`
        .                       token::Tilde => make_it!(this, attrs, |this, _| this.recover_tilde_expr(lo)), // `~expr`
        .                       token::BinOp(token::Minus) => {
        .                           make_it!(this, attrs, |this, _| this.parse_unary_expr(lo, UnOp::Neg))
        .                       } // `-expr`
        .                       token::BinOp(token::Star) => {
        4 ( 0.00%)                  make_it!(this, attrs, |this, _| this.parse_unary_expr(lo, UnOp::Deref))
        .                       } // `*expr`
        .                       token::BinOp(token::And) | token::AndAnd => {
       88 ( 0.00%)                  make_it!(this, attrs, |this, _| this.parse_borrow_expr(lo))
        .                       }
        .                       token::BinOp(token::Plus) if this.look_ahead(1, |tok| tok.is_numeric_lit()) => {
        .                           let mut err = this.struct_span_err(lo, "leading `+` is not supported");
        .                           err.span_label(lo, "unexpected `+`");
        .           
        .                           // a block on the LHS might have been intended to be an expression instead
        .                           if let Some(sp) = this.sess.ambiguous_block_expr_parse.borrow().get(&lo) {
        .                               this.sess.expr_parentheses_needed(&mut err, *sp);
-- line 562 ----------------------------------------
-- line 568 ----------------------------------------
        .                                   Applicability::MachineApplicable,
        .                               );
        .                           }
        .                           err.emit();
        .           
        .                           this.bump();
        .                           this.parse_prefix_expr(None)
        .                       } // `+expr`
   42,236 ( 0.00%)              token::Ident(..) if this.token.is_keyword(kw::Box) => {
        .                           make_it!(this, attrs, |this, _| this.parse_box_expr(lo))
        .                       }
        .                       token::Ident(..) if this.is_mistaken_not_ident_negation() => {
        .                           make_it!(this, attrs, |this, _| this.recover_not_expr(lo))
        .                       }
        .                       _ => return this.parse_dot_or_call_expr(Some(attrs)),
        .                   }
  523,340 ( 0.01%)      }
        .           
        .               fn parse_prefix_expr_common(&mut self, lo: Span) -> PResult<'a, (Span, P<Expr>)> {
       38 ( 0.00%)          self.bump();
       76 ( 0.00%)          let expr = self.parse_prefix_expr(None);
       19 ( 0.00%)          let (span, expr) = self.interpolated_or_expr_span(expr)?;
       38 ( 0.00%)          Ok((lo.to(span), expr))
        .               }
        .           
        .               fn parse_unary_expr(&mut self, lo: Span, op: UnOp) -> PResult<'a, (Span, ExprKind)> {
        .                   let (span, expr) = self.parse_prefix_expr_common(lo)?;
        .                   Ok((span, self.mk_unary(op, expr)))
        .               }
        .           
        .               // Recover on `!` suggesting for bitwise negation instead.
-- line 598 ----------------------------------------
-- line 619 ----------------------------------------
        .               fn is_mistaken_not_ident_negation(&self) -> bool {
        .                   let token_cannot_continue_expr = |t: &Token| match t.uninterpolate().kind {
        .                       // These tokens can start an expression after `!`, but
        .                       // can't continue an expression after an ident
        .                       token::Ident(name, is_raw) => token::ident_can_begin_expr(name, t.span, is_raw),
        .                       token::Literal(..) | token::Pound => true,
        .                       _ => t.is_whole_expr(),
        .                   };
   42,236 ( 0.00%)          self.token.is_ident_named(sym::not) && self.look_ahead(1, token_cannot_continue_expr)
        .               }
        .           
        .               /// Recover on `not expr` in favor of `!expr`.
        .               fn recover_not_expr(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {
        .                   // Emit the error...
        .                   let not_token = self.look_ahead(1, |t| t.clone());
        .                   self.struct_span_err(
        .                       not_token.span,
-- line 635 ----------------------------------------
-- line 651 ----------------------------------------
        .           
        .               /// Returns the span of expr, if it was not interpolated or the span of the interpolated token.
        .               fn interpolated_or_expr_span(
        .                   &self,
        .                   expr: PResult<'a, P<Expr>>,
        .               ) -> PResult<'a, (Span, P<Expr>)> {
        .                   expr.map(|e| {
        .                       (
  209,399 ( 0.01%)                  match self.prev_token.kind {
        .                               TokenKind::Interpolated(..) => self.prev_token.span,
        .                               _ => e.span,
        .                           },
        .                           e,
        .                       )
        .                   })
        .               }
        .           
      168 ( 0.00%)      fn parse_assoc_op_cast(
        .                   &mut self,
        .                   lhs: P<Expr>,
        .                   lhs_span: Span,
        .                   expr_kind: fn(P<Expr>, P<Ty>) -> ExprKind,
        .               ) -> PResult<'a, P<Expr>> {
        .                   let mk_expr = |this: &mut Self, lhs: P<Expr>, rhs: P<Ty>| {
        .                       this.mk_expr(
        .                           this.mk_expr_sp(&lhs, lhs_span, rhs.span),
       36 ( 0.00%)                  expr_kind(lhs, rhs),
        .                           AttrVec::new(),
        .                       )
        .                   };
        .           
        .                   // Save the state of the parser before parsing type normally, in case there is a
        .                   // LessThan comparison after this cast.
       24 ( 0.00%)          let parser_snapshot_before_type = self.clone();
       36 ( 0.00%)          let cast_expr = match self.parse_as_cast_ty() {
        .                       Ok(rhs) => mk_expr(self, lhs, rhs),
        .                       Err(mut type_err) => {
        .                           // Rewind to before attempting to parse the type with generics, to recover
        .                           // from situations like `x as usize < y` in which we first tried to parse
        .                           // `usize < y` as a type with generic arguments.
        .                           let parser_snapshot_after_type = mem::replace(self, parser_snapshot_before_type);
        .           
        .                           // Check for typo of `'a: loop { break 'a }` with a missing `'`.
-- line 693 ----------------------------------------
-- line 779 ----------------------------------------
        .                                   *self = parser_snapshot_after_type;
        .                                   return Err(type_err);
        .                               }
        .                           }
        .                       }
        .                   };
        .           
        .                   self.parse_and_disallow_postfix_after_cast(cast_expr)
      144 ( 0.00%)      }
        .           
        .               /// Parses a postfix operators such as `.`, `?`, or index (`[]`) after a cast,
        .               /// then emits an error and returns the newly parsed tree.
        .               /// The resulting parse tree for `&x as T[0]` has a precedence of `((&x) as T)[0]`.
        .               fn parse_and_disallow_postfix_after_cast(
        .                   &mut self,
        .                   cast_expr: P<Expr>,
        .               ) -> PResult<'a, P<Expr>> {
        .                   // Save the memory location of expr before parsing any following postfix operators.
        .                   // This will be compared with the memory location of the output expression.
        .                   // If they different we can assume we parsed another expression because the existing expression is not reallocated.
        .                   let addr_before = &*cast_expr as *const _ as usize;
        .                   let span = cast_expr.span;
       72 ( 0.00%)          let with_postfix = self.parse_dot_or_call_expr_with_(cast_expr, span)?;
        .                   let changed = addr_before != &*with_postfix as *const _ as usize;
        .           
        .                   // Check if an illegal postfix operator has been added after the cast.
        .                   // If the resulting expression is not a cast, or has a different memory location, it is an illegal postfix operator.
       72 ( 0.00%)          if !matches!(with_postfix.kind, ExprKind::Cast(_, _) | ExprKind::Type(_, _)) || changed {
        .                       let msg = format!(
        .                           "casts cannot be followed by {}",
        .                           match with_postfix.kind {
        .                               ExprKind::Index(_, _) => "indexing",
        .                               ExprKind::Try(_) => "`?`",
        .                               ExprKind::Field(_, _) => "a field access",
        .                               ExprKind::MethodCall(_, _, _) => "a method call",
        .                               ExprKind::Call(_, _) => "a function call",
-- line 814 ----------------------------------------
-- line 844 ----------------------------------------
        .                   let lhs = self.parse_assoc_op_cast(lhs, lhs_span, ExprKind::Type)?;
        .                   self.sess.gated_spans.gate(sym::type_ascription, lhs.span);
        .                   Ok(lhs)
        .               }
        .           
        .               /// Parse `& mut? <expr>` or `& raw [ const | mut ] <expr>`.
        .               fn parse_borrow_expr(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {
        .                   self.expect_and()?;
      220 ( 0.00%)          let has_lifetime = self.token.is_lifetime() && self.look_ahead(1, |t| t != &token::Colon);
        .                   let lifetime = has_lifetime.then(|| self.expect_lifetime()); // For recovery, see below.
        .                   let (borrow_kind, mutbl) = self.parse_borrow_modifiers(lo);
      176 ( 0.00%)          let expr = self.parse_prefix_expr(None);
       88 ( 0.00%)          let (hi, expr) = self.interpolated_or_expr_span(expr)?;
       44 ( 0.00%)          let span = lo.to(hi);
       88 ( 0.00%)          if let Some(lt) = lifetime {
        .                       self.error_remove_borrow_lifetime(span, lt.ident.span);
        .                   }
        .                   Ok((span, ExprKind::AddrOf(borrow_kind, mutbl, expr)))
        .               }
        .           
        .               fn error_remove_borrow_lifetime(&self, span: Span, lt_span: Span) {
        .                   self.struct_span_err(span, "borrow expressions cannot be annotated with lifetimes")
        .                       .span_label(lt_span, "annotated with lifetime here")
-- line 866 ----------------------------------------
-- line 870 ----------------------------------------
        .                           String::new(),
        .                           Applicability::MachineApplicable,
        .                       )
        .                       .emit();
        .               }
        .           
        .               /// Parse `mut?` or `raw [ const | mut ]`.
        .               fn parse_borrow_modifiers(&mut self, lo: Span) -> (ast::BorrowKind, ast::Mutability) {
       88 ( 0.00%)          if self.check_keyword(kw::Raw) && self.look_ahead(1, Token::is_mutability) {
        .                       // `raw [ const | mut ]`.
        .                       let found_raw = self.eat_keyword(kw::Raw);
        .                       assert!(found_raw);
        .                       let mutability = self.parse_const_or_mut().unwrap();
        .                       self.sess.gated_spans.gate(sym::raw_ref_op, lo.to(self.prev_token.span));
        .                       (ast::BorrowKind::Raw, mutability)
        .                   } else {
        .                       // `mut?`
-- line 886 ----------------------------------------
-- line 889 ----------------------------------------
        .               }
        .           
        .               /// Parses `a.b` or `a(13)` or `a[4]` or just `a`.
        .               fn parse_dot_or_call_expr(&mut self, attrs: Option<AttrWrapper>) -> PResult<'a, P<Expr>> {
        .                   let attrs = self.parse_or_use_outer_attributes(attrs)?;
        .                   self.collect_tokens_for_expr(attrs, |this, attrs| {
        .                       let base = this.parse_bottom_expr();
        .                       let (span, base) = this.interpolated_or_expr_span(base)?;
  209,084 ( 0.01%)              this.parse_dot_or_call_expr_with(base, span, attrs)
        .                   })
        .               }
        .           
        .               pub(super) fn parse_dot_or_call_expr_with(
        .                   &mut self,
        .                   e0: P<Expr>,
        .                   lo: Span,
        .                   mut attrs: Vec<ast::Attribute>,
        .               ) -> PResult<'a, P<Expr>> {
        .                   // Stitch the list of outer attributes onto the return value.
        .                   // A little bit ugly, but the best way given the current code
        .                   // structure
  366,877 ( 0.01%)          self.parse_dot_or_call_expr_with_(e0, lo).map(|expr| {
  366,877 ( 0.01%)              expr.map(|mut expr| {
   52,411 ( 0.00%)                  attrs.extend::<Vec<_>>(expr.attrs.into());
  104,822 ( 0.00%)                  expr.attrs = attrs.into();
  733,754 ( 0.02%)                  expr
        .                       })
        .                   })
        .               }
        .           
1,625,113 ( 0.04%)      fn parse_dot_or_call_expr_with_(&mut self, mut e: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {
        .                   loop {
        .                       if self.eat(&token::Question) {
        .                           // `expr?`
       12 ( 0.00%)                  e = self.mk_expr(lo.to(self.prev_token.span), ExprKind::Try(e), AttrVec::new());
        .                           continue;
        .                       }
        .                       if self.eat(&token::Dot) {
        .                           // expr.f
    1,128 ( 0.00%)                  e = self.parse_dot_suffix_expr(lo, e)?;
        .                           continue;
        .                       }
      670 ( 0.00%)              if self.expr_is_complete(&e) {
        .                           return Ok(e);
        .                       }
  196,029 ( 0.00%)              e = match self.token.kind {
   30,132 ( 0.00%)                  token::OpenDelim(token::Paren) => self.parse_fn_call_expr(lo, e),
       74 ( 0.00%)                  token::OpenDelim(token::Bracket) => self.parse_index_expr(lo, e)?,
   52,334 ( 0.00%)                  _ => return Ok(e),
        .                       }
        .                   }
  471,807 ( 0.01%)      }
        .           
        .               fn look_ahead_type_ascription_as_field(&mut self) -> bool {
   50,305 ( 0.00%)          self.look_ahead(1, |t| t.is_ident())
        .                       && self.look_ahead(2, |t| t == &token::Colon)
        .                       && self.look_ahead(3, |t| t.can_begin_expr())
        .               }
        .           
        .               fn parse_dot_suffix_expr(&mut self, lo: Span, base: P<Expr>) -> PResult<'a, P<Expr>> {
    3,165 ( 0.00%)          match self.token.uninterpolate().kind {
        .                       token::Ident(..) => self.parse_dot_suffix(base, lo),
       54 ( 0.00%)              token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) => {
       81 ( 0.00%)                  Ok(self.parse_tuple_field_access_expr(lo, base, symbol, suffix, None))
        .                       }
        .                       token::Literal(token::Lit { kind: token::Float, symbol, suffix }) => {
        .                           Ok(self.parse_tuple_field_access_expr_float(lo, base, symbol, suffix))
        .                       }
        .                       _ => {
        .                           self.error_unexpected_after_dot();
        .                           Ok(base)
        .                       }
-- line 960 ----------------------------------------
-- line 1071 ----------------------------------------
        .                           // See the FIXME about `TokenCursor` above.
        .                           self.error_unexpected_after_dot();
        .                           base
        .                       }
        .                       _ => panic!("unexpected components in a float token: {:?}", components),
        .                   }
        .               }
        .           
      117 ( 0.00%)      fn parse_tuple_field_access_expr(
        .                   &mut self,
        .                   lo: Span,
        .                   base: P<Expr>,
        .                   field: Symbol,
        .                   suffix: Option<Symbol>,
        .                   next_token: Option<(Token, Spacing)>,
        .               ) -> P<Expr> {
       18 ( 0.00%)          match next_token {
        .                       Some(next_token) => self.bump_with(next_token),
       27 ( 0.00%)              None => self.bump(),
        .                   }
        9 ( 0.00%)          let span = self.prev_token.span;
       36 ( 0.00%)          let field = ExprKind::Field(base, Ident::new(field, span));
       54 ( 0.00%)          self.expect_no_suffix(span, "a tuple index", suffix);
       27 ( 0.00%)          self.mk_expr(lo.to(span), field, AttrVec::new())
       72 ( 0.00%)      }
        .           
        .               /// Parse a function call expression, `expr(...)`.
        .               fn parse_fn_call_expr(&mut self, lo: Span, fun: P<Expr>) -> P<Expr> {
   50,220 ( 0.00%)          let snapshot = if self.token.kind == token::OpenDelim(token::Paren)
        .                       && self.look_ahead_type_ascription_as_field()
        .                   {
        .                       Some((self.clone(), fun.kind.clone()))
        .                   } else {
   30,132 ( 0.00%)              None
        .                   };
   10,044 ( 0.00%)          let open_paren = self.token.span;
        .           
   20,088 ( 0.00%)          let mut seq = self.parse_paren_expr_seq().map(|args| {
   30,132 ( 0.00%)              self.mk_expr(lo.to(self.prev_token.span), self.mk_call(fun, args), AttrVec::new())
        .                   });
        .                   if let Some(expr) =
        .                       self.maybe_recover_struct_lit_bad_delims(lo, open_paren, &mut seq, snapshot)
        .                   {
        .                       return expr;
        .                   }
   50,220 ( 0.00%)          self.recover_seq_parse_error(token::Paren, lo, seq)
        .               }
        .           
        .               /// If we encounter a parser state that looks like the user has written a `struct` literal with
        .               /// parentheses instead of braces, recover the parser state and provide suggestions.
        .               #[instrument(skip(self, seq, snapshot), level = "trace")]
        .               fn maybe_recover_struct_lit_bad_delims(
        .                   &mut self,
        .                   lo: Span,
        .                   open_paren: Span,
        .                   seq: &mut PResult<'a, P<Expr>>,
        .                   snapshot: Option<(Self, ExprKind)>,
        .               ) -> Option<P<Expr>> {
  100,440 ( 0.00%)          match (seq.as_mut(), snapshot) {
        .                       (Err(ref mut err), Some((mut snapshot, ExprKind::Path(None, path)))) => {
        .                           let name = pprust::path_to_string(&path);
        .                           snapshot.bump(); // `(`
        .                           match snapshot.parse_struct_fields(path, false, token::Paren) {
        .                               Ok((fields, ..)) if snapshot.eat(&token::CloseDelim(token::Paren)) => {
        .                                   // We are certain we have `Enum::Foo(a: 3, b: 4)`, suggest
        .                                   // `Enum::Foo { a: 3, b: 4 }` or `Enum::Foo(3, 4)`.
        .                                   *self = snapshot;
-- line 1137 ----------------------------------------
-- line 1165 ----------------------------------------
        .                                   }
        .                                   return Some(self.mk_expr_err(span));
        .                               }
        .                               Ok(_) => {}
        .                               Err(mut err) => err.emit(),
        .                           }
        .                       }
        .                       _ => {}
   30,132 ( 0.00%)          }
        .                   None
        .               }
        .           
        .               /// Parse an indexing expression `expr[...]`.
        .               fn parse_index_expr(&mut self, lo: Span, base: P<Expr>) -> PResult<'a, P<Expr>> {
       74 ( 0.00%)          self.bump(); // `[`
       74 ( 0.00%)          let index = self.parse_expr()?;
      111 ( 0.00%)          self.expect(&token::CloseDelim(token::Bracket))?;
      111 ( 0.00%)          Ok(self.mk_expr(lo.to(self.prev_token.span), self.mk_index(base, index), AttrVec::new()))
        .               }
        .           
        .               /// Assuming we have just parsed `.`, continue parsing into an expression.
        .               fn parse_dot_suffix(&mut self, self_arg: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {
      546 ( 0.00%)          if self.token.uninterpolated_span().rust_2018() && self.eat_keyword(kw::Await) {
        .                       return Ok(self.mk_await_expr(self_arg, lo));
        .                   }
        .           
      273 ( 0.00%)          let fn_span_lo = self.token.span;
    1,638 ( 0.00%)          let mut segment = self.parse_path_segment(PathStyle::Expr, None)?;
    1,365 ( 0.00%)          self.check_trailing_angle_brackets(&segment, &[&token::OpenDelim(token::Paren)]);
        .                   self.check_turbofish_missing_angle_brackets(&mut segment);
        .           
    1,365 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
        .                       // Method call `expr.f()`
      212 ( 0.00%)              let mut args = self.parse_paren_expr_seq()?;
      848 ( 0.00%)              args.insert(0, self_arg);
        .           
      636 ( 0.00%)              let fn_span = fn_span_lo.to(self.prev_token.span);
      636 ( 0.00%)              let span = lo.to(self.prev_token.span);
    1,060 ( 0.00%)              Ok(self.mk_expr(span, ExprKind::MethodCall(segment, args, fn_span), AttrVec::new()))
        .                   } else {
        .                       // Field access `expr.f`
      122 ( 0.00%)              if let Some(args) = segment.args {
        .                           self.struct_span_err(
        .                               args.span(),
        .                               "field expressions cannot have generic arguments",
        .                           )
        .                           .emit();
        .                       }
        .           
      183 ( 0.00%)              let span = lo.to(self.prev_token.span);
      305 ( 0.00%)              Ok(self.mk_expr(span, ExprKind::Field(self_arg, segment.ident), AttrVec::new()))
        .                   }
        .               }
        .           
        .               /// At the bottom (top?) of the precedence hierarchy,
        .               /// Parses things like parenthesized exprs, macros, `return`, etc.
        .               ///
        .               /// N.B., this does not parse outer attributes, and is private because it only works
        .               /// correctly if called from `parse_dot_or_call_expr()`.
        .               fn parse_bottom_expr(&mut self) -> PResult<'a, P<Expr>> {
  135,147 ( 0.00%)          maybe_recover_from_interpolated_ty_qpath!(self, true);
  156,813 ( 0.00%)          maybe_whole_expr!(self);
        .           
        .                   // Outer attributes are already parsed and will be
        .                   // added to the return value after the fact.
        .                   //
        .                   // Therefore, prevent sub-parser from parsing
        .                   // attributes by giving them an empty "already-parsed" list.
   52,271 ( 0.00%)          let attrs = AttrVec::new();
        .           
        .                   // Note: when adding new syntax here, don't forget to adjust `TokenKind::can_begin_expr()`.
   21,425 ( 0.00%)          let lo = self.token.span;
  156,813 ( 0.00%)          if let token::Literal(_) = self.token.kind {
        .                       // This match arm is a special-case of the `_` match arm below and
        .                       // could be removed without changing functionality, but it's faster
        .                       // to have it here, especially for programs with large constants.
  123,384 ( 0.00%)              self.parse_lit_expr(attrs)
  107,125 ( 0.00%)          } else if self.check(&token::OpenDelim(token::Paren)) {
    2,676 ( 0.00%)              self.parse_tuple_parens_expr(attrs)
  102,665 ( 0.00%)          } else if self.check(&token::OpenDelim(token::Brace)) {
       96 ( 0.00%)              self.parse_block_expr(None, lo, BlockCheckMode::Default, attrs)
  205,115 ( 0.01%)          } else if self.check(&token::BinOp(token::Or)) || self.check(&token::OrOr) {
       76 ( 0.00%)              self.parse_closure_expr(attrs)
  102,510 ( 0.00%)          } else if self.check(&token::OpenDelim(token::Bracket)) {
   49,715 ( 0.00%)              self.parse_array_or_repeat_expr(attrs, token::Bracket)
   42,236 ( 0.00%)          } else if self.check_path() {
   41,632 ( 0.00%)              self.parse_path_start_expr(attrs)
    1,510 ( 0.00%)          } else if self.check_keyword(kw::Move) || self.check_keyword(kw::Static) {
        .                       self.parse_closure_expr(attrs)
      755 ( 0.00%)          } else if self.eat_keyword(kw::If) {
      268 ( 0.00%)              self.parse_if_expr(attrs)
      420 ( 0.00%)          } else if self.check_keyword(kw::For) {
       25 ( 0.00%)              if self.choose_generics_over_qpath(1) {
        .                           // NOTE(Centril, eddyb): DO NOT REMOVE! Beyond providing parser recovery,
        .                           // this is an insurance policy in case we allow qpaths in (tuple-)struct patterns.
        .                           // When `for <Foo as Bar>::Proj in $expr $block` is wanted,
        .                           // you can disambiguate in favor of a pattern with `(...)`.
        .                           self.recover_quantified_closure_expr(attrs)
        .                       } else {
       25 ( 0.00%)                  assert!(self.eat_keyword(kw::For));
       35 ( 0.00%)                  self.parse_for_expr(None, self.prev_token.span, attrs)
        .                       }
      395 ( 0.00%)          } else if self.eat_keyword(kw::While) {
       14 ( 0.00%)              self.parse_while_expr(None, self.prev_token.span, attrs)
      308 ( 0.00%)          } else if let Some(label) = self.eat_label() {
        .                       self.parse_labeled_expr(label, attrs, true)
      385 ( 0.00%)          } else if self.eat_keyword(kw::Loop) {
        .                       self.parse_loop_expr(None, self.prev_token.span, attrs)
      385 ( 0.00%)          } else if self.eat_keyword(kw::Continue) {
        .                       let kind = ExprKind::Continue(self.eat_label());
        .                       Ok(self.mk_expr(lo.to(self.prev_token.span), kind, attrs))
      308 ( 0.00%)          } else if self.eat_keyword(kw::Match) {
       10 ( 0.00%)              let match_sp = self.prev_token.span;
       40 ( 0.00%)              self.parse_match_expr(attrs).map_err(|mut err| {
        .                           err.span_label(match_sp, "while parsing this match expression");
        .                           err
        .                       })
      288 ( 0.00%)          } else if self.eat_keyword(kw::Unsafe) {
       24 ( 0.00%)              self.parse_block_expr(None, lo, BlockCheckMode::Unsafe(ast::UserProvided), attrs)
      276 ( 0.00%)          } else if self.check_inline_const(0) {
        .                       self.parse_const_block(lo.to(self.token.span), false)
      207 ( 0.00%)          } else if self.is_do_catch_block() {
        .                       self.recover_do_catch(attrs)
      207 ( 0.00%)          } else if self.is_try_block() {
        .                       self.expect_keyword(kw::Try)?;
        .                       self.parse_try_block(lo, attrs)
      276 ( 0.00%)          } else if self.eat_keyword(kw::Return) {
      112 ( 0.00%)              self.parse_return_expr(attrs)
      164 ( 0.00%)          } else if self.eat_keyword(kw::Break) {
        .                       self.parse_break_expr(attrs)
      164 ( 0.00%)          } else if self.eat_keyword(kw::Yield) {
        .                       self.parse_yield_expr(attrs)
      164 ( 0.00%)          } else if self.eat_keyword(kw::Let) {
      100 ( 0.00%)              self.parse_let_expr(attrs)
       64 ( 0.00%)          } else if self.eat_keyword(kw::Underscore) {
        .                       Ok(self.mk_expr(self.prev_token.span, ExprKind::Underscore, attrs))
       16 ( 0.00%)          } else if !self.unclosed_delims.is_empty() && self.check(&token::Semi) {
        .                       // Don't complain about bare semicolons after unclosed braces
        .                       // recovery in order to keep the error count down. Fixing the
        .                       // delimiters will possibly also fix the bare semicolon found in
        .                       // expression context. For example, silence the following error:
        .                       //
        .                       //     error: expected expression, found `;`
        .                       //      --> file.rs:2:13
        .                       //       |
        .                       //     2 |     foo(bar(;
        .                       //       |             ^ expected expression
        .                       self.bump();
        .                       Ok(self.mk_expr_err(self.token.span))
       32 ( 0.00%)          } else if self.token.uninterpolated_span().rust_2018() {
        .                       // `Span::rust_2018()` is somewhat expensive; don't get it repeatedly.
       64 ( 0.00%)              if self.check_keyword(kw::Async) {
        .                           if self.is_async_block() {
        .                               // Check for `async {` and `async move {`.
        .                               self.parse_async_block(attrs)
        .                           } else {
        .                               self.parse_closure_expr(attrs)
        .                           }
       64 ( 0.00%)              } else if self.eat_keyword(kw::Await) {
        .                           self.recover_incorrect_await_syntax(lo, self.prev_token.span, attrs)
        .                       } else {
       64 ( 0.00%)                  self.parse_lit_expr(attrs)
        .                       }
        .                   } else {
        .                       self.parse_lit_expr(attrs)
        .                   }
        .               }
        .           
  308,620 ( 0.01%)      fn parse_lit_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {
   61,724 ( 0.00%)          let lo = self.token.span;
  123,448 ( 0.00%)          match self.parse_opt_lit() {
  185,172 ( 0.00%)              Some(literal) => {
  277,758 ( 0.01%)                  let expr = self.mk_expr(lo.to(self.prev_token.span), ExprKind::Lit(literal), attrs);
  308,620 ( 0.01%)                  self.maybe_recover_from_bad_qpath(expr, true)
        .                       }
        .                       None => self.try_macro_suggestion(),
        .                   }
        .               }
        .           
        .               fn parse_tuple_parens_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {
    1,784 ( 0.00%)          let lo = self.token.span;
    2,676 ( 0.00%)          self.expect(&token::OpenDelim(token::Paren))?;
        .                   let (es, trailing_comma) = match self.parse_seq_to_end(
        .                       &token::CloseDelim(token::Paren),
        .                       SeqSep::trailing_allowed(token::Comma),
    3,530 ( 0.00%)              |p| p.parse_expr_catch_underscore(),
        .                   ) {
        .                       Ok(x) => x,
        .                       Err(err) => return Ok(self.recover_seq_parse_error(token::Paren, lo, Err(err))),
        .                   };
    4,460 ( 0.00%)          let kind = if es.len() == 1 && !trailing_comma {
        .                       // `(e)` is parenthesized `e`.
       21 ( 0.00%)              ExprKind::Paren(es.into_iter().next().unwrap())
        .                   } else {
        .                       // `(e,)` is a tuple with only one field, `e`.
    4,425 ( 0.00%)              ExprKind::Tup(es)
        .                   };
    2,676 ( 0.00%)          let expr = self.mk_expr(lo.to(self.prev_token.span), kind, attrs);
    2,676 ( 0.00%)          self.maybe_recover_from_bad_qpath(expr, true)
        .               }
        .           
  109,373 ( 0.00%)      fn parse_array_or_repeat_expr(
        .                   &mut self,
        .                   attrs: AttrVec,
        .                   close_delim: token::DelimToken,
        .               ) -> PResult<'a, P<Expr>> {
   29,829 ( 0.00%)          let lo = self.token.span;
    9,943 ( 0.00%)          self.bump(); // `[` or other open delim
        .           
   29,829 ( 0.00%)          let close = &token::CloseDelim(close_delim);
        .                   let kind = if self.eat(close) {
        .                       // Empty vector
        1 ( 0.00%)              ExprKind::Array(Vec::new())
        .                   } else {
        .                       // Non-empty vector
   19,884 ( 0.00%)              let first_expr = self.parse_expr()?;
        .                       if self.eat(&token::Semi) {
        .                           // Repeating array syntax: `[ 0; 512 ]`
       15 ( 0.00%)                  let count = self.parse_anon_const_expr()?;
       10 ( 0.00%)                  self.expect(close)?;
       25 ( 0.00%)                  ExprKind::Repeat(first_expr, count)
        .                       } else if self.eat(&token::Comma) {
        .                           // Vector with two or more elements.
        .                           let sep = SeqSep::trailing_allowed(token::Comma);
        .                           let (remaining_exprs, _) = self.parse_seq_to_end(close, sep, |p| p.parse_expr())?;
    9,936 ( 0.00%)                  let mut exprs = vec![first_expr];
        .                           exprs.extend(remaining_exprs);
   49,680 ( 0.00%)                  ExprKind::Array(exprs)
        .                       } else {
        .                           // Vector with one element
        2 ( 0.00%)                  self.expect(close)?;
        5 ( 0.00%)                  ExprKind::Array(vec![first_expr])
        .                       }
        .                   };
   29,829 ( 0.00%)          let expr = self.mk_expr(lo.to(self.prev_token.span), kind, attrs);
   29,829 ( 0.00%)          self.maybe_recover_from_bad_qpath(expr, true)
   99,430 ( 0.00%)      }
        .           
  104,080 ( 0.00%)      fn parse_path_start_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {
   83,264 ( 0.00%)          let (qself, path) = if self.eat_lt() {
        .                       let (qself, path) = self.parse_qpath(PathStyle::Expr)?;
        .                       (Some(qself), path)
        .                   } else {
   20,816 ( 0.00%)              (None, self.parse_path(PathStyle::Expr)?)
        .                   };
   10,408 ( 0.00%)          let lo = path.span;
        .           
        .                   // `!`, as an operator, is prefix, so we know this isn't that.
  156,030 ( 0.00%)          let (hi, kind) = if self.eat(&token::Not) {
        .                       // MACRO INVOCATION expression
        .                       if qself.is_some() {
        .                           self.struct_span_err(path.span, "macros cannot use qualified paths").emit();
        .                       }
        .                       let mac = MacCall {
        .                           path,
        .                           args: self.parse_mac_args()?,
        .                           prior_type_ascription: self.last_type_ascription,
        .                       };
        .                       (self.prev_token.span, ExprKind::MacCall(mac))
   52,040 ( 0.00%)          } else if self.check(&token::OpenDelim(token::Brace)) {
       12 ( 0.00%)              if let Some(expr) = self.maybe_parse_struct_expr(qself.as_ref(), &path, &attrs) {
        6 ( 0.00%)                  if qself.is_some() {
        .                               self.sess.gated_spans.gate(sym::more_qualified_paths, path.span);
        .                           }
        .                           return expr;
        .                       } else {
        .                           (path.span, ExprKind::Path(qself, path))
        .                       }
        .                   } else {
        .                       (path.span, ExprKind::Path(qself, path))
        .                   };
        .           
   20,804 ( 0.00%)          let expr = self.mk_expr(lo.to(hi), kind, attrs);
   31,206 ( 0.00%)          self.maybe_recover_from_bad_qpath(expr, true)
  124,884 ( 0.00%)      }
        .           
        .               /// Parse `'label: $expr`. The label is already parsed.
        .               fn parse_labeled_expr(
        .                   &mut self,
        .                   label: Label,
        .                   attrs: AttrVec,
        .                   mut consume_colon: bool,
        .               ) -> PResult<'a, P<Expr>> {
-- line 1447 ----------------------------------------
-- line 1507 ----------------------------------------
        .                       .note("following RFC #2388, the new non-placeholder syntax is `try`")
        .                       .emit();
        .           
        .                   self.parse_try_block(lo, attrs)
        .               }
        .           
        .               /// Parse an expression if the token can begin one.
        .               fn parse_expr_opt(&mut self) -> PResult<'a, Option<P<Expr>>> {
      140 ( 0.00%)          Ok(if self.token.can_begin_expr() { Some(self.parse_expr()?) } else { None })
        .               }
        .           
        .               /// Parse `"return" expr?`.
      280 ( 0.00%)      fn parse_return_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {
       28 ( 0.00%)          let lo = self.prev_token.span;
       56 ( 0.00%)          let kind = ExprKind::Ret(self.parse_expr_opt()?);
       84 ( 0.00%)          let expr = self.mk_expr(lo.to(self.prev_token.span), kind, attrs);
      168 ( 0.00%)          self.maybe_recover_from_bad_qpath(expr, true)
      280 ( 0.00%)      }
        .           
        .               /// Parse `"break" (('label (:? expr)?) | expr?)` with `"break"` token already eaten.
        .               /// If the label is followed immediately by a `:` token, the label and `:` are
        .               /// parsed as part of the expression (i.e. a labeled loop). The language team has
        .               /// decided in #87026 to require parentheses as a visual aid to avoid confusion if
        .               /// the break expression of an unlabeled break is a labeled loop (as in
        .               /// `break 'lbl: loop {}`); a labeled break with an unlabeled loop as its value
        .               /// expression only gets a warning for compatibility reasons; and a labeled break
-- line 1532 ----------------------------------------
-- line 1607 ----------------------------------------
        .                               symbol_unescaped,
        .                           }),
        .                           _ => Err(Some(lit)),
        .                       },
        .                       None => Err(None),
        .                   }
        .               }
        .           
      774 ( 0.00%)      pub(super) fn parse_lit(&mut self) -> PResult<'a, Lit> {
       86 ( 0.00%)          self.parse_opt_lit().ok_or_else(|| {
      162 ( 0.00%)              if let token::Interpolated(inner) = &self.token.kind {
        .                           let expr = match inner.as_ref() {
        .                               token::NtExpr(expr) => Some(expr),
        .                               token::NtLiteral(expr) => Some(expr),
        .                               _ => None,
        .                           };
        .                           if let Some(expr) = expr {
        .                               if matches!(expr.kind, ExprKind::Err) {
        .                                   self.diagnostic()
        .                                       .delay_span_bug(self.token.span, &"invalid interpolated expression");
        .                                   return self.diagnostic().struct_dummy();
        .                               }
        .                           }
        .                       }
      891 ( 0.00%)              let msg = format!("unexpected token: {}", super::token_descr(&self.token));
       81 ( 0.00%)              self.struct_span_err(self.token.span, &msg)
        .                   })
      602 ( 0.00%)      }
        .           
        .               /// Matches `lit = true | false | token_lit`.
        .               /// Returns `None` if the next token is not a literal.
  278,532 ( 0.01%)      pub(super) fn parse_opt_lit(&mut self) -> Option<Lit> {
   30,948 ( 0.00%)          let mut recovered = None;
  185,688 ( 0.00%)          if self.token == token::Dot {
        .                       // Attempt to recover `.4` as `0.4`. We don't currently have any syntax where
        .                       // dot would follow an optional literal, so we do this unconditionally.
        .                       recovered = self.look_ahead(1, |next_token| {
        .                           if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) =
        .                               next_token.kind
        .                           {
        .                               if self.token.span.hi() == next_token.span.lo() {
        .                                   let s = String::from("0.") + symbol.as_str();
-- line 1648 ----------------------------------------
-- line 1654 ----------------------------------------
        .                       });
        .                       if let Some(token) = &recovered {
        .                           self.bump();
        .                           self.error_float_lits_must_have_int_part(&token);
        .                       }
        .                   }
        .           
        .                   let token = recovered.as_ref().unwrap_or(&self.token);
   93,087 ( 0.00%)          match Lit::from_token(token) {
  185,202 ( 0.00%)              Ok(lit) => {
   61,734 ( 0.00%)                  self.bump();
  185,202 ( 0.00%)                  Some(lit)
        .                       }
       81 ( 0.00%)              Err(LitError::NotLiteral) => None,
        .                       Err(err) => {
        .                           let span = token.span;
        .                           let lit = match token.kind {
        .                               token::Literal(lit) => lit,
        .                               _ => unreachable!(),
        .                           };
        .                           self.bump();
        .                           self.report_lit_error(err, lit, span);
-- line 1675 ----------------------------------------
-- line 1676 ----------------------------------------
        .                           // Pack possible quotes and prefixes from the original literal into
        .                           // the error literal's symbol so they can be pretty-printed faithfully.
        .                           let suffixless_lit = token::Lit::new(lit.kind, lit.symbol, None);
        .                           let symbol = Symbol::intern(&suffixless_lit.to_string());
        .                           let lit = token::Lit::new(token::Err, symbol, lit.suffix);
        .                           Some(Lit::from_lit_token(lit, span).unwrap_or_else(|_| unreachable!()))
        .                       }
        .                   }
  247,584 ( 0.01%)      }
        .           
        .               fn error_float_lits_must_have_int_part(&self, token: &Token) {
        .                   self.struct_span_err(token.span, "float literals must have an integer part")
        .                       .span_suggestion(
        .                           token.span,
        .                           "must have an integer part",
        .                           pprust::token_to_string(token).into(),
        .                           Applicability::MachineApplicable,
-- line 1692 ----------------------------------------
-- line 1759 ----------------------------------------
        .                               .emit();
        .                       }
        .                       LitError::IntTooLarge => {
        .                           self.struct_span_err(span, "integer literal is too large").emit();
        .                       }
        .                   }
        .               }
        .           
       63 ( 0.00%)      pub(super) fn expect_no_suffix(&self, sp: Span, kind: &str, suffix: Option<Symbol>) {
       18 ( 0.00%)          if let Some(suf) = suffix {
        .                       let mut err = if kind == "a tuple index"
        .                           && [sym::i32, sym::u32, sym::isize, sym::usize].contains(&suf)
        .                       {
        .                           // #59553: warn instead of reject out of hand to allow the fix to percolate
        .                           // through the ecosystem when people fix their macros
        .                           let mut err = self
        .                               .sess
        .                               .span_diagnostic
-- line 1776 ----------------------------------------
-- line 1791 ----------------------------------------
        .                           );
        .                           err
        .                       } else {
        .                           self.struct_span_err(sp, &format!("suffixes on {} are invalid", kind))
        .                       };
        .                       err.span_label(sp, format!("invalid suffix `{}`", suf));
        .                       err.emit();
        .                   }
       54 ( 0.00%)      }
        .           
        .               /// Matches `'-' lit | lit` (cf. `ast_validation::AstValidator::check_expr_within_pat`).
        .               /// Keep this in sync with `Token::can_begin_literal_maybe_minus`.
       32 ( 0.00%)      pub fn parse_literal_maybe_minus(&mut self) -> PResult<'a, P<Expr>> {
        8 ( 0.00%)          maybe_whole_expr!(self);
        .           
        4 ( 0.00%)          let lo = self.token.span;
        .                   let minus_present = self.eat(&token::BinOp(token::Minus));
        8 ( 0.00%)          let lit = self.parse_lit()?;
        4 ( 0.00%)          let expr = self.mk_expr(lit.span, ExprKind::Lit(lit), AttrVec::new());
        .           
        8 ( 0.00%)          if minus_present {
        .                       Ok(self.mk_expr(
        .                           lo.to(self.prev_token.span),
        .                           self.mk_unary(UnOp::Neg, expr),
        .                           AttrVec::new(),
        .                       ))
        .                   } else {
        .                       Ok(expr)
        .                   }
       36 ( 0.00%)      }
        .           
        .               fn is_array_like_block(&mut self) -> bool {
       55 ( 0.00%)          self.look_ahead(1, |t| matches!(t.kind, TokenKind::Ident(..) | TokenKind::Literal(_)))
        .                       && self.look_ahead(2, |t| t == &token::Comma)
        .                       && self.look_ahead(3, |t| t.can_begin_expr())
        .               }
        .           
        .               /// Emits a suggestion if it looks like the user meant an array but
        .               /// accidentally used braces, causing the code to be interpreted as a block
        .               /// expression.
        .               fn maybe_suggest_brackets_instead_of_braces(
-- line 1831 ----------------------------------------
-- line 1855 ----------------------------------------
        .                       Err(mut e) => {
        .                           e.cancel();
        .                           None
        .                       }
        .                   }
        .               }
        .           
        .               /// Parses a block or unsafe block.
      210 ( 0.00%)      pub(super) fn parse_block_expr(
        .                   &mut self,
        .                   opt_label: Option<Label>,
        .                   lo: Span,
        .                   blk_mode: BlockCheckMode,
        .                   mut attrs: AttrVec,
        .               ) -> PResult<'a, P<Expr>> {
        .                   if self.is_array_like_block() {
        .                       if let Some(arr) = self.maybe_suggest_brackets_instead_of_braces(lo, attrs.clone()) {
        .                           return Ok(arr);
        .                       }
        .                   }
        .           
       30 ( 0.00%)          if let Some(label) = opt_label {
        .                       self.sess.gated_spans.gate(sym::label_break_value, label.ident.span);
        .                   }
        .           
       60 ( 0.00%)          if self.token.is_whole_block() {
        .                       self.struct_span_err(self.token.span, "cannot use a `block` macro fragment here")
        .                           .span_label(lo.to(self.token.span), "the `block` fragment is within this context")
        .                           .emit();
        .                   }
        .           
      105 ( 0.00%)          let (inner_attrs, blk) = self.parse_block_common(lo, blk_mode)?;
       75 ( 0.00%)          attrs.extend(inner_attrs);
       30 ( 0.00%)          Ok(self.mk_expr(blk.span, ExprKind::Block(blk, opt_label), attrs))
      150 ( 0.00%)      }
        .           
        .               /// Recover on an explicitly quantified closure expression, e.g., `for<'a> |x: &'a u8| *x + 1`.
        .               fn recover_quantified_closure_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {
        .                   let lo = self.token.span;
        .                   let _ = self.parse_late_bound_lifetime_defs()?;
        .                   let span_for = lo.to(self.prev_token.span);
        .                   let closure = self.parse_closure_expr(attrs)?;
        .           
-- line 1897 ----------------------------------------
-- line 1904 ----------------------------------------
        .                           Applicability::MachineApplicable,
        .                       )
        .                       .emit();
        .           
        .                   Ok(self.mk_expr_err(lo.to(closure.span)))
        .               }
        .           
        .               /// Parses a closure expression (e.g., `move |args| expr`).
      190 ( 0.00%)      fn parse_closure_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {
       38 ( 0.00%)          let lo = self.token.span;
        .           
        .                   let movability =
        .                       if self.eat_keyword(kw::Static) { Movability::Static } else { Movability::Movable };
        .           
       57 ( 0.00%)          let asyncness = if self.token.uninterpolated_span().rust_2018() {
        .                       self.parse_asyncness()
        .                   } else {
        .                       Async::No
        .                   };
        .           
       57 ( 0.00%)          let capture_clause = self.parse_capture_clause()?;
       19 ( 0.00%)          let decl = self.parse_fn_block_decl()?;
       38 ( 0.00%)          let decl_hi = self.prev_token.span;
       57 ( 0.00%)          let mut body = match decl.output {
        .                       FnRetTy::Default(_) => {
       19 ( 0.00%)                  let restrictions = self.restrictions - Restrictions::STMT_EXPR;
        .                           self.parse_expr_res(restrictions, None)?
        .                       }
        .                       _ => {
        .                           // If an explicit return type is given, require a block to appear (RFC 968).
        .                           let body_lo = self.token.span;
        .                           self.parse_block_expr(None, body_lo, BlockCheckMode::Default, AttrVec::new())?
        .                       }
        .                   };
        .           
       38 ( 0.00%)          if let Async::Yes { span, .. } = asyncness {
        .                       // Feature-gate `async ||` closures.
        .                       self.sess.gated_spans.gate(sym::async_closure, span);
        .                   }
        .           
       95 ( 0.00%)          if self.token.kind == TokenKind::Semi && self.token_cursor.frame.delim == DelimToken::Paren
        .                   {
        .                       // It is likely that the closure body is a block but where the
        .                       // braces have been removed. We will recover and eat the next
        .                       // statements later in the parsing process.
        .                       body = self.mk_expr_err(body.span);
        .                   }
        .           
       38 ( 0.00%)          let body_span = body.span;
        .           
        .                   let closure = self.mk_expr(
       38 ( 0.00%)              lo.to(body.span),
       95 ( 0.00%)              ExprKind::Closure(capture_clause, asyncness, movability, decl, body, lo.to(decl_hi)),
        .                       attrs,
        .                   );
        .           
        .                   // Disable recovery for closure body
        .                   let spans =
        .                       ClosureSpans { whole_closure: closure.span, closing_pipe: decl_hi, body: body_span };
      152 ( 0.00%)          self.current_closure = Some(spans);
        .           
        .                   Ok(closure)
      190 ( 0.00%)      }
        .           
        .               /// Parses an optional `move` prefix to a closure-like construct.
       95 ( 0.00%)      fn parse_capture_clause(&mut self) -> PResult<'a, CaptureBy> {
        .                   if self.eat_keyword(kw::Move) {
        .                       // Check for `move async` and recover
        .                       if self.check_keyword(kw::Async) {
        .                           let move_async_span = self.token.span.with_lo(self.prev_token.span.data().lo);
        .                           Err(self.incorrect_move_async_order_found(move_async_span))
        .                       } else {
        .                           Ok(CaptureBy::Value)
        .                       }
        .                   } else {
        .                       Ok(CaptureBy::Ref)
        .                   }
      171 ( 0.00%)      }
        .           
        .               /// Parses the `|arg, arg|` header of a closure.
        .               fn parse_fn_block_decl(&mut self) -> PResult<'a, P<FnDecl>> {
        .                   let inputs = if self.eat(&token::OrOr) {
        .                       Vec::new()
        .                   } else {
       57 ( 0.00%)              self.expect(&token::BinOp(token::Or))?;
       19 ( 0.00%)              let args = self
        .                           .parse_seq_to_before_tokens(
        .                               &[&token::BinOp(token::Or), &token::OrOr],
        .                               SeqSep::trailing_allowed(token::Comma),
        .                               TokenExpectType::NoExpect,
       57 ( 0.00%)                      |p| p.parse_fn_block_param(),
        .                           )?
        .                           .0;
        .                       self.expect_or()?;
       95 ( 0.00%)              args
        .                   };
        .                   let output =
       95 ( 0.00%)              self.parse_ret_ty(AllowPlus::Yes, RecoverQPath::Yes, RecoverReturnSign::Yes)?;
        .           
        .                   Ok(P(FnDecl { inputs, output }))
        .               }
        .           
        .               /// Parses a parameter in a closure header (e.g., `|arg, arg|`).
      171 ( 0.00%)      fn parse_fn_block_param(&mut self) -> PResult<'a, Param> {
       57 ( 0.00%)          let lo = self.token.span;
       19 ( 0.00%)          let attrs = self.parse_outer_attributes()?;
      209 ( 0.00%)          self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {
       38 ( 0.00%)              let pat = this.parse_pat_no_top_alt(PARAM_EXPECTED)?;
        .                       let ty = if this.eat(&token::Colon) {
        .                           this.parse_ty()?
        .                       } else {
       19 ( 0.00%)                  this.mk_ty(this.prev_token.span, TyKind::Infer)
        .                       };
        .           
      152 ( 0.00%)              Ok((
        .                           Param {
       76 ( 0.00%)                      attrs: attrs.into(),
       19 ( 0.00%)                      ty,
       38 ( 0.00%)                      pat,
       57 ( 0.00%)                      span: lo.to(this.token.span),
        .                               id: DUMMY_NODE_ID,
        .                               is_placeholder: false,
        .                           },
        .                           TrailingToken::MaybeComma,
        .                       ))
      152 ( 0.00%)          })
      152 ( 0.00%)      }
        .           
        .               /// Parses an `if` expression (`if` token already eaten).
      820 ( 0.00%)      fn parse_if_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {
       82 ( 0.00%)          let lo = self.prev_token.span;
       82 ( 0.00%)          let cond = self.parse_cond_expr()?;
        .           
        .                   let missing_then_block_binop_span = || {
        .                       match cond.kind {
        .                           ExprKind::Binary(Spanned { span: binop_span, .. }, _, ref right)
        .                               if let ExprKind::Block(..) = right.kind => Some(binop_span),
        .                           _ => None
        .                       }
        .                   };
        .           
        .                   // Verify that the parsed `if` condition makes sense as a condition. If it is a block, then
        .                   // verify that the last statement is either an implicit return (no `;`) or an explicit
        .                   // return. This won't catch blocks with an explicit `return`, but that would be caught by
        .                   // the dead code lint.
      820 ( 0.00%)          let thn = if self.token.is_keyword(kw::Else) || !cond.returns() {
        .                       if let Some(binop_span) = missing_then_block_binop_span() {
        .                           self.error_missing_if_then_block(lo, None, Some(binop_span)).emit();
        .                           self.mk_block_err(cond.span)
        .                       } else {
        .                           self.error_missing_if_cond(lo, cond.span)
        .                       }
        .                   } else {
      246 ( 0.00%)              let attrs = self.parse_outer_attributes()?.take_for_recovery(); // For recovery.
        .                       let not_block = self.token != token::OpenDelim(token::Brace);
      246 ( 0.00%)              let block = self.parse_block().map_err(|err| {
        .                           if not_block {
        .                               self.error_missing_if_then_block(lo, Some(err), missing_then_block_binop_span())
        .                           } else {
        .                               err
        .                           }
        .                       })?;
      328 ( 0.00%)              self.error_on_if_block_attrs(lo, false, block.span, &attrs);
      164 ( 0.00%)              block
       82 ( 0.00%)          };
      164 ( 0.00%)          let els = if self.eat_keyword(kw::Else) { Some(self.parse_else_expr()?) } else { None };
      246 ( 0.00%)          Ok(self.mk_expr(lo.to(self.prev_token.span), ExprKind::If(cond, thn, els), attrs))
      820 ( 0.00%)      }
        .           
        .               fn error_missing_if_then_block(
        .                   &self,
        .                   if_span: Span,
        .                   err: Option<DiagnosticBuilder<'a>>,
        .                   binop_span: Option<Span>,
        .               ) -> DiagnosticBuilder<'a> {
        .                   let msg = "this `if` expression has a condition, but no block";
-- line 2079 ----------------------------------------
-- line 2097 ----------------------------------------
        .                   self.struct_span_err(sp, "missing condition for `if` expression")
        .                       .span_label(sp, "expected if condition here")
        .                       .emit();
        .                   self.mk_block_err(span)
        .               }
        .           
        .               /// Parses the condition of a `if` or `while` expression.
        .               fn parse_cond_expr(&mut self) -> PResult<'a, P<Expr>> {
      168 ( 0.00%)          let cond = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;
        .           
      168 ( 0.00%)          if let ExprKind::Let(..) = cond.kind {
        .                       // Remove the last feature gating of a `let` expression since it's stable.
      100 ( 0.00%)              self.sess.gated_spans.ungate_last(sym::let_chains, cond.span);
        .                   }
        .           
        .                   Ok(cond)
        .               }
        .           
        .               /// Parses a `let $pat = $expr` pseudo-expression.
        .               /// The `let` token has already been eaten.
      250 ( 0.00%)      fn parse_let_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {
       50 ( 0.00%)          let lo = self.prev_token.span;
       75 ( 0.00%)          let pat = self.parse_pat_allow_top_alt(None, RecoverComma::Yes, RecoverColon::Yes)?;
       75 ( 0.00%)          self.expect(&token::Eq)?;
       75 ( 0.00%)          let expr = self.with_res(self.restrictions | Restrictions::NO_STRUCT_LITERAL, |this| {
      150 ( 0.00%)              this.parse_assoc_expr_with(1 + prec_let_scrutinee_needs_par(), None.into())
        .                   })?;
       75 ( 0.00%)          let span = lo.to(expr.span);
      100 ( 0.00%)          self.sess.gated_spans.gate(sym::let_chains, span);
        .                   Ok(self.mk_expr(span, ExprKind::Let(pat, expr, span), attrs))
      250 ( 0.00%)      }
        .           
        .               /// Parses an `else { ... }` expression (`else` token already eaten).
        .               fn parse_else_expr(&mut self) -> PResult<'a, P<Expr>> {
      114 ( 0.00%)          let ctx_span = self.prev_token.span; // `else`
      114 ( 0.00%)          let attrs = self.parse_outer_attributes()?.take_for_recovery(); // For recovery.
        .                   let expr = if self.eat_keyword(kw::If) {
       75 ( 0.00%)              self.parse_if_expr(AttrVec::new())?
        .                   } else {
       69 ( 0.00%)              let blk = self.parse_block()?;
       23 ( 0.00%)              self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new())
        .                   };
      190 ( 0.00%)          self.error_on_if_block_attrs(ctx_span, true, expr.span, &attrs);
        .                   Ok(expr)
        .               }
        .           
    1,320 ( 0.00%)      fn error_on_if_block_attrs(
        .                   &self,
        .                   ctx_span: Span,
        .                   is_ctx_else: bool,
        .                   branch_span: Span,
        .                   attrs: &[ast::Attribute],
        .               ) {
        .                   let (span, last) = match attrs {
      480 ( 0.00%)              [] => return,
        .                       [x0 @ xn] | [x0, .., xn] => (x0.span.to(xn.span), xn.span),
        .                   };
        .                   let ctx = if is_ctx_else { "else" } else { "if" };
        .                   self.struct_span_err(last, "outer attributes are not allowed on `if` and `else` branches")
        .                       .span_label(branch_span, "the attributes are attached to this branch")
        .                       .span_label(ctx_span, format!("the branch belongs to this `{}`", ctx))
        .                       .span_suggestion(
        .                           span,
        .                           "remove the attributes",
        .                           String::new(),
        .                           Applicability::MachineApplicable,
        .                       )
        .                       .emit();
      960 ( 0.00%)      }
        .           
        .               /// Parses `for <src_pat> in <src_expr> <src_loop_block>` (`for` token already eaten).
       65 ( 0.00%)      fn parse_for_expr(
        .                   &mut self,
        .                   opt_label: Option<Label>,
        .                   lo: Span,
        .                   mut attrs: AttrVec,
        .               ) -> PResult<'a, P<Expr>> {
        .                   // Record whether we are about to parse `for (`.
        .                   // This is used below for recovery in case of `for ( $stuff ) $block`
        .                   // in which case we will suggest `for $stuff $block`.
       14 ( 0.00%)          let begin_paren = match self.token.kind {
       10 ( 0.00%)              token::OpenDelim(token::Paren) => Some(self.token.span),
        .                       _ => None,
        .                   };
        .           
       15 ( 0.00%)          let pat = self.parse_pat_allow_top_alt(None, RecoverComma::Yes, RecoverColon::Yes)?;
        .                   if !self.eat_keyword(kw::In) {
        .                       self.error_missing_in_for_loop();
        .                   }
        5 ( 0.00%)          self.check_for_for_in_in_typo(self.prev_token.span);
       10 ( 0.00%)          let expr = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;
        .           
        5 ( 0.00%)          let pat = self.recover_parens_around_for_head(pat, begin_paren);
        .           
       10 ( 0.00%)          let (iattrs, loop_block) = self.parse_inner_attrs_and_block()?;
       25 ( 0.00%)          attrs.extend(iattrs);
        .           
       40 ( 0.00%)          let kind = ExprKind::ForLoop(pat, expr, loop_block, opt_label);
       20 ( 0.00%)          Ok(self.mk_expr(lo.to(self.prev_token.span), kind, attrs))
       50 ( 0.00%)      }
        .           
        .               fn error_missing_in_for_loop(&mut self) {
        .                   let (span, msg, sugg) = if self.token.is_ident_named(sym::of) {
        .                       // Possibly using JS syntax (#75311).
        .                       let span = self.token.span;
        .                       self.bump();
        .                       (span, "try using `in` here instead", "in")
        .                   } else {
-- line 2204 ----------------------------------------
-- line 2211 ----------------------------------------
        .                           sugg.into(),
        .                           // Has been misleading, at least in the past (closed Issue #48492).
        .                           Applicability::MaybeIncorrect,
        .                       )
        .                       .emit();
        .               }
        .           
        .               /// Parses a `while` or `while let` expression (`while` token already eaten).
       26 ( 0.00%)      fn parse_while_expr(
        .                   &mut self,
        .                   opt_label: Option<Label>,
        .                   lo: Span,
        .                   mut attrs: AttrVec,
        .               ) -> PResult<'a, P<Expr>> {
        2 ( 0.00%)          let cond = self.parse_cond_expr()?;
        4 ( 0.00%)          let (iattrs, body) = self.parse_inner_attrs_and_block()?;
       10 ( 0.00%)          attrs.extend(iattrs);
        8 ( 0.00%)          Ok(self.mk_expr(lo.to(self.prev_token.span), ExprKind::While(cond, body, opt_label), attrs))
       20 ( 0.00%)      }
        .           
        .               /// Parses `loop { ... }` (`loop` token already eaten).
        .               fn parse_loop_expr(
        .                   &mut self,
        .                   opt_label: Option<Label>,
        .                   lo: Span,
        .                   mut attrs: AttrVec,
        .               ) -> PResult<'a, P<Expr>> {
        .                   let (iattrs, body) = self.parse_inner_attrs_and_block()?;
        .                   attrs.extend(iattrs);
        .                   Ok(self.mk_expr(lo.to(self.prev_token.span), ExprKind::Loop(body, opt_label), attrs))
        .               }
        .           
      308 ( 0.00%)      fn eat_label(&mut self) -> Option<Label> {
      308 ( 0.00%)          self.token.lifetime().map(|ident| {
        .                       self.bump();
        .                       Label { ident }
        .                   })
      308 ( 0.00%)      }
        .           
        .               /// Parses a `match ... { ... }` expression (`match` token already eaten).
       50 ( 0.00%)      fn parse_match_expr(&mut self, mut attrs: AttrVec) -> PResult<'a, P<Expr>> {
       10 ( 0.00%)          let match_span = self.prev_token.span;
        .                   let lo = self.prev_token.span;
       10 ( 0.00%)          let scrutinee = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;
       25 ( 0.00%)          if let Err(mut e) = self.expect(&token::OpenDelim(token::Brace)) {
        .                       if self.token == token::Semi {
        .                           e.span_suggestion_short(
        .                               match_span,
        .                               "try removing this `match`",
        .                               String::new(),
        .                               Applicability::MaybeIncorrect, // speculative
        .                           );
        .                       }
        .                       return Err(e);
        .                   }
       30 ( 0.00%)          attrs.extend(self.parse_inner_attributes()?);
        .           
        .                   let mut arms: Vec<Arm> = Vec::new();
       60 ( 0.00%)          while self.token != token::CloseDelim(token::Brace) {
       75 ( 0.00%)              match self.parse_arm() {
      200 ( 0.00%)                  Ok(arm) => arms.push(arm),
        .                           Err(mut e) => {
        .                               // Recover by skipping to the end of the block.
        .                               e.emit();
        .                               self.recover_stmt();
        .                               let span = lo.to(self.token.span);
        .                               if self.token == token::CloseDelim(token::Brace) {
        .                                   self.bump();
        .                               }
        .                               return Ok(self.mk_expr(span, ExprKind::Match(scrutinee, arms), attrs));
        .                           }
        .                       }
        .                   }
        5 ( 0.00%)          let hi = self.token.span;
       10 ( 0.00%)          self.bump();
       20 ( 0.00%)          Ok(self.mk_expr(lo.to(hi), ExprKind::Match(scrutinee, arms), attrs))
       50 ( 0.00%)      }
        .           
        .               /// Attempt to recover from match arm body with statements and no surrounding braces.
        .               fn parse_arm_body_missing_braces(
        .                   &mut self,
        .                   first_expr: &P<Expr>,
        .                   arrow_span: Span,
        .               ) -> Option<P<Expr>> {
       75 ( 0.00%)          if self.token.kind != token::Semi {
        .                       return None;
        .                   }
        .                   let start_snapshot = self.clone();
        .                   let semi_sp = self.token.span;
        .                   self.bump(); // `;`
        .                   let mut stmts =
        .                       vec![self.mk_stmt(first_expr.span, ast::StmtKind::Expr(first_expr.clone()))];
        .                   let err = |this: &mut Parser<'_>, stmts: Vec<ast::Stmt>| {
-- line 2303 ----------------------------------------
-- line 2389 ----------------------------------------
        .                               let lhs_rslt = check_let_expr(lhs);
        .                               let rhs_rslt = check_let_expr(rhs);
        .                               (lhs_rslt.0 || rhs_rslt.0, false)
        .                           }
        .                           ExprKind::Let(..) => (true, true),
        .                           _ => (false, true),
        .                       }
        .                   }
       75 ( 0.00%)          let attrs = self.parse_outer_attributes()?;
      250 ( 0.00%)          self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {
       50 ( 0.00%)              let lo = this.token.span;
       75 ( 0.00%)              let pat = this.parse_pat_allow_top_alt(None, RecoverComma::Yes, RecoverColon::Yes)?;
        .                       let guard = if this.eat_keyword(kw::If) {
        .                           let if_span = this.prev_token.span;
        .                           let cond = this.parse_expr()?;
        .                           let (has_let_expr, does_not_have_bin_op) = check_let_expr(&cond);
        .                           if has_let_expr {
        .                               if does_not_have_bin_op {
        .                                   // Remove the last feature gating of a `let` expression since it's stable.
        .                                   this.sess.gated_spans.ungate_last(sym::let_chains, cond.span);
        .                               }
        .                               let span = if_span.to(cond.span);
        .                               this.sess.gated_spans.gate(sym::if_let_guard, span);
        .                           }
        .                           Some(cond)
        .                       } else {
      100 ( 0.00%)                  None
        .                       };
       50 ( 0.00%)              let arrow_span = this.token.span;
      125 ( 0.00%)              if let Err(mut err) = this.expect(&token::FatArrow) {
        .                           // We might have a `=>` -> `=` or `->` typo (issue #89396).
        .                           if TokenKind::FatArrow
        .                               .similar_tokens()
        .                               .map_or(false, |similar_tokens| similar_tokens.contains(&this.token.kind))
        .                           {
        .                               err.span_suggestion(
        .                                   this.token.span,
        .                                   "try using a fat arrow here",
-- line 2426 ----------------------------------------
-- line 2428 ----------------------------------------
        .                                   Applicability::MaybeIncorrect,
        .                               );
        .                               err.emit();
        .                               this.bump();
        .                           } else {
        .                               return Err(err);
        .                           }
        .                       }
       50 ( 0.00%)              let arm_start_span = this.token.span;
        .           
       75 ( 0.00%)              let expr = this.parse_expr_res(Restrictions::STMT_EXPR, None).map_err(|mut err| {
        .                           err.span_label(arrow_span, "while parsing the `match` arm starting here");
        .                           err
        .                       })?;
        .           
      100 ( 0.00%)              let require_comma = classify::expr_requires_semi_to_be_stmt(&expr)
        .                           && this.token != token::CloseDelim(token::Brace);
        .           
       50 ( 0.00%)              let hi = this.prev_token.span;
        .           
       30 ( 0.00%)              if require_comma {
       30 ( 0.00%)                  let sm = this.sess.source_map();
       60 ( 0.00%)                  if let Some(body) = this.parse_arm_body_missing_braces(&expr, arrow_span) {
        .                               let span = body.span;
        .                               return Ok((
        .                                   ast::Arm {
        .                                       attrs: attrs.into(),
        .                                       pat,
        .                                       guard,
        .                                       body,
        .                                       span,
        .                                       id: DUMMY_NODE_ID,
        .                                       is_placeholder: false,
        .                                   },
        .                                   TrailingToken::None,
        .                               ));
       15 ( 0.00%)                  }
      150 ( 0.00%)                  this.expect_one_of(&[token::Comma], &[token::CloseDelim(token::Brace)]).map_err(
      135 ( 0.00%)                      |mut err| {
        .                                   match (sm.span_to_lines(expr.span), sm.span_to_lines(arm_start_span)) {
        .                                       (Ok(ref expr_lines), Ok(ref arm_start_lines))
        .                                           if arm_start_lines.lines[0].end_col
        .                                               == expr_lines.lines[0].end_col
        .                                               && expr_lines.lines.len() == 2
        .                                               && this.token == token::FatArrow =>
        .                                       {
        .                                           // We check whether there's any trailing code in the parse span,
-- line 2474 ----------------------------------------
-- line 2498 ----------------------------------------
        .                                   }
        .                                   err
        .                               },
        .                           )?;
        .                       } else {
        .                           this.eat(&token::Comma);
        .                       }
        .           
      250 ( 0.00%)              Ok((
        .                           ast::Arm {
      100 ( 0.00%)                      attrs: attrs.into(),
       50 ( 0.00%)                      pat,
       50 ( 0.00%)                      guard,
      100 ( 0.00%)                      body: expr,
       25 ( 0.00%)                      span: lo.to(hi),
        .                               id: DUMMY_NODE_ID,
        .                               is_placeholder: false,
        .                           },
        .                           TrailingToken::None,
        .                       ))
      200 ( 0.00%)          })
        .               }
        .           
        .               /// Parses a `try {...}` expression (`try` token already eaten).
        .               fn parse_try_block(&mut self, span_lo: Span, mut attrs: AttrVec) -> PResult<'a, P<Expr>> {
        .                   let (iattrs, body) = self.parse_inner_attrs_and_block()?;
        .                   attrs.extend(iattrs);
        .                   if self.eat_keyword(kw::Catch) {
        .                       let mut error = self.struct_span_err(
-- line 2526 ----------------------------------------
-- line 2532 ----------------------------------------
        .                       Err(error)
        .                   } else {
        .                       let span = span_lo.to(body.span);
        .                       self.sess.gated_spans.gate(sym::try_blocks, span);
        .                       Ok(self.mk_expr(span, ExprKind::TryBlock(body), attrs))
        .                   }
        .               }
        .           
      552 ( 0.00%)      fn is_do_catch_block(&self) -> bool {
      345 ( 0.00%)          self.token.is_keyword(kw::Do)
        .                       && self.is_keyword_ahead(1, &[kw::Catch])
        .                       && self.look_ahead(2, |t| *t == token::OpenDelim(token::Brace))
        .                       && !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL)
      552 ( 0.00%)      }
        .           
      552 ( 0.00%)      fn is_try_block(&self) -> bool {
      414 ( 0.00%)          self.token.is_keyword(kw::Try)
        .                       && self.look_ahead(1, |t| *t == token::OpenDelim(token::Brace))
        .                       && self.token.uninterpolated_span().rust_2018()
      552 ( 0.00%)      }
        .           
        .               /// Parses an `async move? {...}` expression.
        .               fn parse_async_block(&mut self, mut attrs: AttrVec) -> PResult<'a, P<Expr>> {
        .                   let lo = self.token.span;
        .                   self.expect_keyword(kw::Async)?;
        .                   let capture_clause = self.parse_capture_clause()?;
        .                   let (iattrs, body) = self.parse_inner_attrs_and_block()?;
        .                   attrs.extend(iattrs);
-- line 2559 ----------------------------------------
-- line 2569 ----------------------------------------
        .                               && self.look_ahead(2, |t| *t == token::OpenDelim(token::Brace))
        .                       ) || (
        .                           // `async {`
        .                           self.look_ahead(1, |t| *t == token::OpenDelim(token::Brace))
        .                       ))
        .               }
        .           
        .               fn is_certainly_not_a_block(&self) -> bool {
       84 ( 0.00%)          self.look_ahead(1, |t| t.is_ident())
       42 ( 0.00%)              && (
        .                           // `{ ident, ` cannot start a block.
        .                           self.look_ahead(2, |t| t == &token::Comma)
       42 ( 0.00%)                      || self.look_ahead(2, |t| t == &token::Colon)
        .                                   && (
        .                                       // `{ ident: token, ` cannot start a block.
        .                                       self.look_ahead(4, |t| t == &token::Comma) ||
        .                           // `{ ident: ` cannot start a block unless it's a type ascription `ident: Type`.
        .                           self.look_ahead(3, |t| !t.can_begin_type())
        .                                   )
        .                       )
        .               }
        .           
        .               fn maybe_parse_struct_expr(
        .                   &mut self,
        .                   qself: Option<&ast::QSelf>,
        .                   path: &ast::Path,
        .                   attrs: &AttrVec,
        .               ) -> Option<PResult<'a, P<Expr>>> {
       54 ( 0.00%)          let struct_allowed = !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL);
       27 ( 0.00%)          if struct_allowed || self.is_certainly_not_a_block() {
       30 ( 0.00%)              if let Err(err) = self.expect(&token::OpenDelim(token::Brace)) {
        .                           return Some(Err(err));
        .                       }
       48 ( 0.00%)              let expr = self.parse_struct_expr(qself.cloned(), path.clone(), attrs.clone(), true);
       18 ( 0.00%)              if let (Ok(expr), false) = (&expr, struct_allowed) {
        .                           // This is a struct literal, but we don't can't accept them here.
        .                           self.error_struct_lit_not_allowed_here(path.span, expr.span);
        .                       }
        .                       return Some(expr);
        .                   }
        .                   None
        .               }
        .           
-- line 2611 ----------------------------------------
-- line 2614 ----------------------------------------
        .                       .multipart_suggestion(
        .                           "surround the struct literal with parentheses",
        .                           vec![(lo.shrink_to_lo(), "(".to_string()), (sp.shrink_to_hi(), ")".to_string())],
        .                           Applicability::MachineApplicable,
        .                       )
        .                       .emit();
        .               }
        .           
      110 ( 0.00%)      pub(super) fn parse_struct_fields(
        .                   &mut self,
        .                   pth: ast::Path,
        .                   recover: bool,
        .                   close_delim: token::DelimToken,
        .               ) -> PResult<'a, (Vec<ExprField>, ast::StructRest, bool)> {
        .                   let mut fields = Vec::new();
        .                   let mut base = ast::StructRest::None;
      140 ( 0.00%)          let mut recover_async = false;
        .           
        .                   let mut async_block_err = |e: &mut DiagnosticBuilder<'_>, span: Span| {
        .                       recover_async = true;
        .                       e.span_label(span, "`async` blocks are only allowed in Rust 2018 or later");
        .                       e.help(&format!("set `edition = \"{}\"` in `Cargo.toml`", LATEST_STABLE_EDITION));
        .                       e.note("for more on editions, read https://doc.rust-lang.org/edition-guide");
        .                   };
        .           
      200 ( 0.00%)          while self.token != token::CloseDelim(close_delim) {
        .                       if self.eat(&token::DotDot) {
        .                           let exp_span = self.prev_token.span;
        .                           // We permit `.. }` on the left-hand side of a destructuring assignment.
        .                           if self.check(&token::CloseDelim(close_delim)) {
        .                               base = ast::StructRest::Rest(self.prev_token.span.shrink_to_hi());
        .                               break;
        .                           }
        .                           match self.parse_expr() {
-- line 2647 ----------------------------------------
-- line 2652 ----------------------------------------
        .                               }
        .                               Err(e) => return Err(e),
        .                           }
        .                           self.recover_struct_comma_after_dotdot(exp_span);
        .                           break;
        .                       }
        .           
        .                       let recovery_field = self.find_struct_error_after_field_looking_code();
      120 ( 0.00%)              let parsed_field = match self.parse_expr_field() {
      240 ( 0.00%)                  Ok(f) => Some(f),
        .                           Err(mut e) => {
        .                               if pth == kw::Async {
        .                                   async_block_err(&mut e, pth.span);
        .                               } else {
        .                                   e.span_label(pth.span, "while parsing this struct");
        .                               }
        .                               e.emit();
        .           
-- line 2669 ----------------------------------------
-- line 2675 ----------------------------------------
        .                                   if self.token != token::Comma {
        .                                       break;
        .                                   }
        .                               }
        .                               None
        .                           }
        .                       };
        .           
      330 ( 0.00%)              match self.expect_one_of(&[token::Comma], &[token::CloseDelim(close_delim)]) {
        .                           Ok(_) => {
      210 ( 0.00%)                      if let Some(f) = parsed_field.or(recovery_field) {
        .                                   // Only include the field if there's no parse error for the field name.
      240 ( 0.00%)                          fields.push(f);
        .                               }
        .                           }
        .                           Err(mut e) => {
        .                               if pth == kw::Async {
        .                                   async_block_err(&mut e, pth.span);
        .                               } else {
        .                                   e.span_label(pth.span, "while parsing this struct");
        .                                   if let Some(f) = recovery_field {
-- line 2695 ----------------------------------------
-- line 2706 ----------------------------------------
        .                                   return Err(e);
        .                               }
        .                               e.emit();
        .                               self.recover_stmt_(SemiColonMode::Comma, BlockMode::Ignore);
        .                               self.eat(&token::Comma);
        .                           }
        .                       }
        .                   }
      140 ( 0.00%)          Ok((fields, base, recover_async))
       80 ( 0.00%)      }
        .           
        .               /// Precondition: already parsed the '{'.
      120 ( 0.00%)      pub(super) fn parse_struct_expr(
        .                   &mut self,
        .                   qself: Option<ast::QSelf>,
        .                   pth: ast::Path,
        .                   attrs: AttrVec,
        .                   recover: bool,
        .               ) -> PResult<'a, P<Expr>> {
       60 ( 0.00%)          let lo = pth.span;
       50 ( 0.00%)          let (fields, base, recover_async) =
       70 ( 0.00%)              self.parse_struct_fields(pth.clone(), recover, token::Brace)?;
       30 ( 0.00%)          let span = lo.to(self.token.span);
       30 ( 0.00%)          self.expect(&token::CloseDelim(token::Brace))?;
       10 ( 0.00%)          let expr = if recover_async {
        .                       ExprKind::Err
        .                   } else {
      160 ( 0.00%)              ExprKind::Struct(P(ast::StructExpr { qself, path: pth, fields, rest: base }))
        .                   };
        .                   Ok(self.mk_expr(span, expr, attrs))
      110 ( 0.00%)      }
        .           
        .               /// Use in case of error after field-looking code: `S { foo: () with a }`.
        .               fn find_struct_error_after_field_looking_code(&self) -> Option<ExprField> {
      120 ( 0.00%)          match self.token.ident() {
        .                       Some((ident, is_raw))
      210 ( 0.00%)                  if (is_raw || !ident.is_reserved())
      165 ( 0.00%)                      && self.look_ahead(1, |t| *t == token::Colon) =>
        .                       {
      140 ( 0.00%)                  Some(ast::ExprField {
        .                               ident,
       14 ( 0.00%)                      span: self.token.span,
        .                               expr: self.mk_expr_err(self.token.span),
        .                               is_shorthand: false,
        .                               attrs: AttrVec::new(),
        .                               id: DUMMY_NODE_ID,
        .                               is_placeholder: false,
        .                           })
        .                       }
       48 ( 0.00%)              _ => None,
        .                   }
        .               }
        .           
        .               fn recover_struct_comma_after_dotdot(&mut self, span: Span) {
        .                   if self.token != token::Comma {
        .                       return;
        .                   }
        .                   self.struct_span_err(
-- line 2763 ----------------------------------------
-- line 2772 ----------------------------------------
        .                   )
        .                   .note("the base struct must always be the last field")
        .                   .emit();
        .                   self.recover_stmt();
        .               }
        .           
        .               /// Parses `ident (COLON expr)?`.
        .               fn parse_expr_field(&mut self) -> PResult<'a, ExprField> {
       90 ( 0.00%)          let attrs = self.parse_outer_attributes()?;
      300 ( 0.00%)          self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {
       60 ( 0.00%)              let lo = this.token.span;
        .           
        .                       // Check if a colon exists one ahead. This means we're parsing a fieldname.
       60 ( 0.00%)              let is_shorthand = !this.look_ahead(1, |t| t == &token::Colon || t == &token::Eq);
       62 ( 0.00%)              let (ident, expr) = if is_shorthand {
        .                           // Mimic `x: x` for the `x` field shorthand.
      144 ( 0.00%)                  let ident = this.parse_ident_common(false)?;
       64 ( 0.00%)                  let path = ast::Path::from_ident(ident);
       96 ( 0.00%)                  (ident, this.mk_expr(ident.span, ExprKind::Path(None, path), AttrVec::new()))
        .                       } else {
        .                           let ident = this.parse_field_name()?;
        .                           this.error_on_eq_field_init(ident);
       28 ( 0.00%)                  this.bump(); // `:`
       14 ( 0.00%)                  (ident, this.parse_expr()?)
        .                       };
        .           
      360 ( 0.00%)              Ok((
        .                           ast::ExprField {
        .                               ident,
       90 ( 0.00%)                      span: lo.to(expr.span),
       30 ( 0.00%)                      expr,
        .                               is_shorthand,
       90 ( 0.00%)                      attrs: attrs.into(),
        .                               id: DUMMY_NODE_ID,
        .                               is_placeholder: false,
        .                           },
        .                           TrailingToken::MaybeComma,
        .                       ))
      240 ( 0.00%)          })
        .               }
        .           
        .               /// Check for `=`. This means the source incorrectly attempts to
        .               /// initialize a field with an eq rather than a colon.
        .               fn error_on_eq_field_init(&self, field_name: Ident) {
       42 ( 0.00%)          if self.token != token::Eq {
        .                       return;
        .                   }
        .           
        .                   self.struct_span_err(self.token.span, "expected `:`, found `=`")
        .                       .span_suggestion(
        .                           field_name.span.shrink_to_hi().to(self.token.span),
        .                           "replace equals symbol with a colon",
        .                           ":".to_string(),
-- line 2824 ----------------------------------------
-- line 2855 ----------------------------------------
        .                       )
        .                       .emit();
        .               }
        .           
        .               fn mk_assign_op(&self, binop: BinOp, lhs: P<Expr>, rhs: P<Expr>) -> ExprKind {
        .                   ExprKind::AssignOp(binop, lhs, rhs)
        .               }
        .           
       96 ( 0.00%)      fn mk_range(
        .                   &mut self,
        .                   start: Option<P<Expr>>,
        .                   end: Option<P<Expr>>,
        .                   limits: RangeLimits,
        .               ) -> ExprKind {
       26 ( 0.00%)          if end.is_none() && limits == RangeLimits::Closed {
        .                       self.inclusive_range_with_incorrect_end(self.prev_token.span);
        .                       ExprKind::Err
        .                   } else {
       48 ( 0.00%)              ExprKind::Range(start, end, limits)
        .                   }
       60 ( 0.00%)      }
        .           
        .               fn mk_unary(&self, unop: UnOp, expr: P<Expr>) -> ExprKind {
        .                   ExprKind::Unary(unop, expr)
        .               }
        .           
        .               fn mk_binary(&self, binop: BinOp, lhs: P<Expr>, rhs: P<Expr>) -> ExprKind {
        .                   ExprKind::Binary(binop, lhs, rhs)
        .               }
-- line 2883 ----------------------------------------
-- line 2893 ----------------------------------------
        .               fn mk_await_expr(&mut self, self_arg: P<Expr>, lo: Span) -> P<Expr> {
        .                   let span = lo.to(self.prev_token.span);
        .                   let await_expr = self.mk_expr(span, ExprKind::Await(self_arg), AttrVec::new());
        .                   self.recover_from_await_method_call();
        .                   await_expr
        .               }
        .           
        .               crate fn mk_expr(&self, span: Span, kind: ExprKind, attrs: AttrVec) -> P<Expr> {
      399 ( 0.00%)          P(Expr { kind, span, attrs, id: DUMMY_NODE_ID, tokens: None })
        .               }
        .           
        .               pub(super) fn mk_expr_err(&self, span: Span) -> P<Expr> {
        .                   self.mk_expr(span, ExprKind::Err, AttrVec::new())
        .               }
        .           
        .               /// Create expression span ensuring the span of the parent node
        .               /// is larger than the span of lhs and rhs, including the attributes.
        .               fn mk_expr_sp(&self, lhs: &P<Expr>, lhs_span: Span, rhs_span: Span) -> Span {
      173 ( 0.00%)          lhs.attrs
        .                       .iter()
        .                       .find(|a| a.style == AttrStyle::Outer)
        .                       .map_or(lhs_span, |a| a.span)
        .                       .to(rhs_span)
        .               }
        .           
        .               fn collect_tokens_for_expr(
        .                   &mut self,
        .                   attrs: AttrWrapper,
        .                   f: impl FnOnce(&mut Self, Vec<ast::Attribute>) -> PResult<'a, P<Expr>>,
        .               ) -> PResult<'a, P<Expr>> {
  470,505 ( 0.01%)          self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {
  366,695 ( 0.01%)              let res = f(this, attrs)?;
   52,490 ( 0.00%)              let trailing = if this.restrictions.contains(Restrictions::STMT_EXPR)
      612 ( 0.00%)                  && this.token.kind == token::Semi
        .                       {
        .                           TrailingToken::Semi
        .                       } else {
        .                           // FIXME - pass this through from the place where we know
        .                           // we need a comma, rather than assuming that `#[attr] expr,`
        .                           // always captures a trailing comma
        .                           TrailingToken::MaybeComma
        .                       };
  156,837 ( 0.00%)              Ok((res, trailing))
  418,216 ( 0.01%)          })
        .               }
        .           }

2,037,450 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/expr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .           use rustc_span::hygiene::MacroKind;
        .           use rustc_span::source_map::Spanned;
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use rustc_span::Span;
        .           use rustc_target::spec::abi::Abi;
        .           use std::collections::VecDeque;
        .           
        .           fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {
    1,290 ( 0.00%)      match node {
        .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
        .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
        .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(&sig.decl),
        .                   Node::Expr(Expr { kind: ExprKind::Closure(_, fn_decl, ..), .. })
        .                   | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, ..), .. }) => {
        .                       Some(fn_decl)
        .                   }
        .                   _ => None,
        .               }
        .           }
        .           
        .           pub fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {
      325 ( 0.00%)      match &node {
        .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
        .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
        .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(sig),
        .                   _ => None,
        .               }
        .           }
        .           
        .           pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {
   18,560 ( 0.00%)      match node {
        .                   Node::Item(Item {
        .                       kind: ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body),
        .                       ..
        .                   })
        .                   | Node::TraitItem(TraitItem {
        .                       kind:
        .                           TraitItemKind::Const(_, Some(body)) | TraitItemKind::Fn(_, TraitFn::Provided(body)),
        .                       ..
        .                   })
        .                   | Node::ImplItem(ImplItem {
        .                       kind: ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body),
        .                       ..
        .                   })
    3,357 ( 0.00%)          | Node::Expr(Expr { kind: ExprKind::Closure(.., body, _, _), .. }) => Some(*body),
        .           
    2,358 ( 0.00%)          Node::AnonConst(constant) => Some(constant.body),
        .           
        .                   _ => None,
        .               }
        .           }
        .           
        .           fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {
        .               match associated_body(node) {
        .                   Some(b) => b.hir_id == hir_id,
-- line 71 ----------------------------------------
-- line 83 ----------------------------------------
        .           pub struct ParentHirIterator<'hir> {
        .               current_id: HirId,
        .               map: Map<'hir>,
        .           }
        .           
        .           impl<'hir> Iterator for ParentHirIterator<'hir> {
        .               type Item = (HirId, Node<'hir>);
        .           
    2,989 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
      427 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
        .                       return None;
        .                   }
        .                   loop {
        .                       // There are nodes that do not have entries, so we need to skip them.
        .                       let parent_id = self.map.get_parent_node(self.current_id);
        .           
    1,239 ( 0.00%)              if parent_id == self.current_id {
        .                           self.current_id = CRATE_HIR_ID;
        .                           return None;
        .                       }
        .           
      826 ( 0.00%)              self.current_id = parent_id;
    3,304 ( 0.00%)              if let Some(node) = self.map.find(parent_id) {
    1,652 ( 0.00%)                  return Some((parent_id, node));
        .                       }
        .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
        .                   }
    3,843 ( 0.00%)      }
        .           }
        .           
        .           /// An iterator that walks up the ancestor tree of a given `HirId`.
        .           /// Constructed using `tcx.hir().parent_owner_iter(hir_id)`.
        .           pub struct ParentOwnerIterator<'hir> {
        .               current_id: HirId,
        .               map: Map<'hir>,
        .           }
        .           
        .           impl<'hir> Iterator for ParentOwnerIterator<'hir> {
        .               type Item = (LocalDefId, OwnerNode<'hir>);
        .           
   15,678 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
    5,226 ( 0.00%)          if self.current_id.local_id.index() != 0 {
      891 ( 0.00%)              self.current_id.local_id = ItemLocalId::new(0);
    3,564 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
        .                           return Some((self.current_id.owner, node.node));
        .                       }
        .                   }
      851 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
      160 ( 0.00%)              return None;
        .                   }
        .                   loop {
        .                       // There are nodes that do not have entries, so we need to skip them.
        .                       let parent_id = self.map.def_key(self.current_id.owner).parent;
        .           
        .                       let parent_id = parent_id.map_or(CRATE_HIR_ID.owner, |local_def_index| {
        .                           let def_id = LocalDefId { local_def_index };
        .                           self.map.local_def_id_to_hir_id(def_id).owner
        .                       });
    1,542 ( 0.00%)              self.current_id = HirId::make_owner(parent_id);
        .           
        .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
    1,542 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
        .                           return Some((self.current_id.owner, node.node));
        .                       }
        .                   }
   13,936 ( 0.00%)      }
        .           }
        .           
        .           impl<'hir> Map<'hir> {
      210 ( 0.00%)      pub fn krate(&self) -> &'hir Crate<'hir> {
       30 ( 0.00%)          self.tcx.hir_crate(())
      240 ( 0.00%)      }
        .           
        7 ( 0.00%)      pub fn root_module(&self) -> &'hir Mod<'hir> {
        1 ( 0.00%)          match self.tcx.hir_owner(CRATE_DEF_ID).map(|o| o.node) {
        .                       Some(OwnerNode::Crate(item)) => item,
        .                       _ => bug!(),
        .                   }
        8 ( 0.00%)      }
        .           
        .               pub fn items(&self) -> impl Iterator<Item = &'hir Item<'hir>> + 'hir {
        .                   let krate = self.krate();
        .                   krate.owners.iter().filter_map(|owner| match owner.as_ref()?.node() {
        .                       OwnerNode::Item(item) => Some(item),
        .                       _ => None,
        .                   })
        .               }
-- line 169 ----------------------------------------
-- line 184 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: LocalDefId) -> DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
        .                   self.tcx.untracked_resolutions.definitions.def_path_hash(def_id)
        .               }
        .           
        .               #[inline]
   27,084 ( 0.00%)      pub fn local_def_id(&self, hir_id: HirId) -> LocalDefId {
    7,275 ( 0.00%)          self.opt_local_def_id(hir_id).unwrap_or_else(|| {
        .                       bug!(
        .                           "local_def_id: no entry for `{:?}`, which has a map of `{:?}`",
        .                           hir_id,
        .                           self.find(hir_id)
        .                       )
        .                   })
   20,313 ( 0.00%)      }
        .           
        .               #[inline]
   19,400 ( 0.00%)      pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<LocalDefId> {
    5,089 ( 0.00%)          if hir_id.local_id == ItemLocalId::new(0) {
        .                       Some(hir_id.owner)
        .                   } else {
    3,638 ( 0.00%)              self.tcx
        .                           .hir_owner_nodes(hir_id.owner)?
        .                           .local_id_to_def_id
        .                           .get(&hir_id.local_id)
        .                           .copied()
        .                   }
   21,825 ( 0.00%)      }
        .           
        .               #[inline]
        4 ( 0.00%)      pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {
        .                   // FIXME(#85914) is this access safe for incr. comp.?
    1,286 ( 0.00%)          self.tcx.untracked_resolutions.definitions.local_def_id_to_hir_id(def_id)
        8 ( 0.00%)      }
        .           
        7 ( 0.00%)      pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {
        .                   // Create a dependency to the crate to be sure we reexcute this when the amount of
        .                   // definitions change.
        1 ( 0.00%)          self.tcx.ensure().hir_crate(());
        .                   self.tcx.untracked_resolutions.definitions.iter_local_def_id()
        9 ( 0.00%)      }
        .           
    2,618 ( 0.00%)      pub fn opt_def_kind(&self, local_def_id: LocalDefId) -> Option<DefKind> {
        .                   let hir_id = self.local_def_id_to_hir_id(local_def_id);
    4,862 ( 0.00%)          let def_kind = match self.find(hir_id)? {
      512 ( 0.00%)              Node::Item(item) => match item.kind {
        .                           ItemKind::Static(..) => DefKind::Static,
        .                           ItemKind::Const(..) => DefKind::Const,
        .                           ItemKind::Fn(..) => DefKind::Fn,
        .                           ItemKind::Macro(..) => DefKind::Macro(MacroKind::Bang),
        .                           ItemKind::Mod(..) => DefKind::Mod,
        .                           ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,
        .                           ItemKind::TyAlias(..) => DefKind::TyAlias,
        .                           ItemKind::Enum(..) => DefKind::Enum,
-- line 239 ----------------------------------------
-- line 252 ----------------------------------------
        .                           ForeignItemKind::Static(..) => DefKind::Static,
        .                           ForeignItemKind::Type => DefKind::ForeignTy,
        .                       },
        .                       Node::TraitItem(item) => match item.kind {
        .                           TraitItemKind::Const(..) => DefKind::AssocConst,
        .                           TraitItemKind::Fn(..) => DefKind::AssocFn,
        .                           TraitItemKind::Type(..) => DefKind::AssocTy,
        .                       },
       84 ( 0.00%)              Node::ImplItem(item) => match item.kind {
        .                           ImplItemKind::Const(..) => DefKind::AssocConst,
        .                           ImplItemKind::Fn(..) => DefKind::AssocFn,
        .                           ImplItemKind::TyAlias(..) => DefKind::AssocTy,
        .                       },
        .                       Node::Variant(_) => DefKind::Variant,
        .                       Node::Ctor(variant_data) => {
        .                           // FIXME(eddyb) is this even possible, if we have a `Node::Ctor`?
      130 ( 0.00%)                  assert_ne!(variant_data.ctor_hir_id(), None);
        .           
      176 ( 0.00%)                  let ctor_of = match self.find(self.get_parent_node(hir_id)) {
        .                               Some(Node::Item(..)) => def::CtorOf::Struct,
        .                               Some(Node::Variant(..)) => def::CtorOf::Variant,
        .                               _ => unreachable!(),
        .                           };
       52 ( 0.00%)                  DefKind::Ctor(ctor_of, def::CtorKind::from_hir(variant_data))
      104 ( 0.00%)              }
        .                       Node::AnonConst(_) => {
      208 ( 0.00%)                  let inline = match self.find(self.get_parent_node(hir_id)) {
        .                               Some(Node::Expr(&Expr {
        .                                   kind: ExprKind::ConstBlock(ref anon_const), ..
        .                               })) if anon_const.hir_id == hir_id => true,
        .                               _ => false,
        .                           };
        .                           if inline { DefKind::InlineConst } else { DefKind::AnonConst }
        .                       }
        .                       Node::Field(_) => DefKind::Field,
       95 ( 0.00%)              Node::Expr(expr) => match expr.kind {
        .                           ExprKind::Closure(.., None) => DefKind::Closure,
        .                           ExprKind::Closure(.., Some(_)) => DefKind::Generator,
        .                           _ => bug!("def_kind: unsupported node: {}", self.node_to_string(hir_id)),
        .                       },
       75 ( 0.00%)              Node::GenericParam(param) => match param.kind {
        .                           GenericParamKind::Lifetime { .. } => DefKind::LifetimeParam,
        .                           GenericParamKind::Type { .. } => DefKind::TyParam,
        .                           GenericParamKind::Const { .. } => DefKind::ConstParam,
        .                       },
        .                       Node::Crate(_) => DefKind::Mod,
        .                       Node::Stmt(_)
        .                       | Node::PathSegment(_)
        .                       | Node::Ty(_)
-- line 300 ----------------------------------------
-- line 304 ----------------------------------------
        .                       | Node::Binding(_)
        .                       | Node::Local(_)
        .                       | Node::Param(_)
        .                       | Node::Arm(_)
        .                       | Node::Lifetime(_)
        .                       | Node::Visibility(_)
        .                       | Node::Block(_) => return None,
        .                   };
    1,432 ( 0.00%)          Some(def_kind)
    3,740 ( 0.00%)      }
        .           
        .               pub fn def_kind(&self, local_def_id: LocalDefId) -> DefKind {
        .                   self.opt_def_kind(local_def_id)
        .                       .unwrap_or_else(|| bug!("def_kind: unsupported node: {:?}", local_def_id))
        .               }
        .           
1,942,960 ( 0.05%)      pub fn find_parent_node(&self, id: HirId) -> Option<HirId> {
  242,870 ( 0.01%)          if id.local_id == ItemLocalId::from_u32(0) {
        .                       Some(self.tcx.hir_owner_parent(id.owner))
        .                   } else {
  484,320 ( 0.01%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
  242,160 ( 0.01%)              let node = owner.nodes[id.local_id].as_ref()?;
  726,480 ( 0.02%)              let hir_id = HirId { owner: id.owner, local_id: node.parent };
        .                       Some(hir_id)
        .                   }
1,942,960 ( 0.05%)      }
        .           
      957 ( 0.00%)      pub fn get_parent_node(&self, hir_id: HirId) -> HirId {
1,435,434 ( 0.04%)          self.find_parent_node(hir_id).unwrap()
    1,914 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
  457,712 ( 0.01%)      pub fn find(&self, id: HirId) -> Option<Node<'hir>> {
   57,214 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
        .                       let owner = self.tcx.hir_owner(id.owner)?;
   29,424 ( 0.00%)              Some(owner.node.into())
        .                   } else {
   55,548 ( 0.00%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
   27,774 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
   83,322 ( 0.00%)              Some(node.node)
        .                   }
  457,712 ( 0.01%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
        .               #[inline]
        .               pub fn find_by_def_id(&self, id: LocalDefId) -> Option<Node<'hir>> {
   22,255 ( 0.00%)          self.find(self.local_def_id_to_hir_id(id))
        .               }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
   11,616 ( 0.00%)      pub fn get(&self, id: HirId) -> Node<'hir> {
    6,063 ( 0.00%)          self.find(id).unwrap_or_else(|| bug!("couldn't find hir id {} in the HIR map", id))
    7,744 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
        .               #[inline]
        .               pub fn get_by_def_id(&self, id: LocalDefId) -> Node<'hir> {
        .                   self.find_by_def_id(id).unwrap_or_else(|| bug!("couldn't find {:?} in the HIR map", id))
        .               }
        .           
      346 ( 0.00%)      pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {
      173 ( 0.00%)          id.as_local().and_then(|id| self.find(self.local_def_id_to_hir_id(id)))
      346 ( 0.00%)      }
        .           
        .               pub fn get_generics(&self, id: LocalDefId) -> Option<&'hir Generics<'hir>> {
        .                   let node = self.tcx.hir_owner(id)?;
        .                   match node.node {
        .                       OwnerNode::ImplItem(impl_item) => Some(&impl_item.generics),
        .                       OwnerNode::TraitItem(trait_item) => Some(&trait_item.generics),
        .                       OwnerNode::Item(Item {
        .                           kind:
-- line 374 ----------------------------------------
-- line 381 ----------------------------------------
        .                               | ItemKind::TraitAlias(generics, _)
        .                               | ItemKind::Impl(Impl { generics, .. }),
        .                           ..
        .                       }) => Some(generics),
        .                       _ => None,
        .                   }
        .               }
        .           
   24,857 ( 0.00%)      pub fn item(&self, id: ItemId) -> &'hir Item<'hir> {
    7,102 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_item()
   28,408 ( 0.00%)      }
        .           
        .               pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
        .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_trait_item()
        .               }
        .           
   16,814 ( 0.00%)      pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
    4,804 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_impl_item()
   19,216 ( 0.00%)      }
        .           
        .               pub fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
        .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_foreign_item()
        .               }
        .           
   37,548 ( 0.00%)      pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {
   10,728 ( 0.00%)          self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies[&id.hir_id.local_id]
   42,912 ( 0.00%)      }
        .           
      774 ( 0.00%)      pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {
      774 ( 0.00%)          if let Some(node) = self.find(hir_id) {
        .                       fn_decl(node)
        .                   } else {
        .                       bug!("no node for hir_id `{}`", hir_id)
        .                   }
      516 ( 0.00%)      }
        .           
      150 ( 0.00%)      pub fn fn_sig_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnSig<'hir>> {
      150 ( 0.00%)          if let Some(node) = self.find(hir_id) {
        .                       fn_sig(node)
        .                   } else {
        .                       bug!("no node for hir_id `{}`", hir_id)
        .                   }
      150 ( 0.00%)      }
        .           
        .               pub fn enclosing_body_owner(&self, hir_id: HirId) -> HirId {
        .                   for (parent, _) in self.parent_iter(hir_id) {
        .                       if let Some(body) = self.maybe_body_owned_by(parent) {
        .                           return self.body_owner(body);
        .                       }
        .                   }
        .           
        .                   bug!("no `enclosing_body_owner` for hir_id `{}`", hir_id);
        .               }
        .           
        .               /// Returns the `HirId` that corresponds to the definition of
        .               /// which this is the body of, i.e., a `fn`, `const` or `static`
        .               /// item (possibly associated), a closure, or a `hir::AnonConst`.
   24,168 ( 0.00%)      pub fn body_owner(&self, BodyId { hir_id }: BodyId) -> HirId {
        .                   let parent = self.get_parent_node(hir_id);
   18,126 ( 0.00%)          assert!(self.find(parent).map_or(false, |n| is_body_owner(n, hir_id)));
        .                   parent
   24,168 ( 0.00%)      }
        .           
    7,735 ( 0.00%)      pub fn body_owner_def_id(&self, id: BodyId) -> LocalDefId {
   12,125 ( 0.00%)          self.local_def_id(self.body_owner(id))
    7,735 ( 0.00%)      }
        .           
        .               /// Given a `HirId`, returns the `BodyId` associated with it,
        .               /// if the node is a body owner, otherwise returns `None`.
    1,065 ( 0.00%)      pub fn maybe_body_owned_by(&self, hir_id: HirId) -> Option<BodyId> {
    3,544 ( 0.00%)          self.find(hir_id).map(associated_body).flatten()
    3,195 ( 0.00%)      }
        .           
        .               /// Given a body owner's id, returns the `BodyId` associated with it.
    3,141 ( 0.00%)      pub fn body_owned_by(&self, id: HirId) -> BodyId {
        .                   self.maybe_body_owned_by(id).unwrap_or_else(|| {
        .                       span_bug!(
        .                           self.span(id),
        .                           "body_owned_by: {} has no associated body",
        .                           self.node_to_string(id)
        .                       );
        .                   })
    2,443 ( 0.00%)      }
        .           
       92 ( 0.00%)      pub fn body_param_names(&self, id: BodyId) -> impl Iterator<Item = Ident> + 'hir {
      788 ( 0.00%)          self.body(id).params.iter().map(|arg| match arg.pat.kind {
      256 ( 0.00%)              PatKind::Binding(_, _, ident, _) => ident,
        .                       _ => Ident::empty(),
        .                   })
      276 ( 0.00%)      }
        .           
        .               /// Returns the `BodyOwnerKind` of this `LocalDefId`.
        .               ///
        .               /// Panics if `LocalDefId` does not have an associated body.
    4,986 ( 0.00%)      pub fn body_owner_kind(&self, id: HirId) -> BodyOwnerKind {
   11,140 ( 0.00%)          match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Const(..), .. })
        .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Const(..), .. })
        .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Const(..), .. })
        .                       | Node::AnonConst(_) => BodyOwnerKind::Const,
        .                       Node::Ctor(..)
        .                       | Node::Item(&Item { kind: ItemKind::Fn(..), .. })
        .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Fn(..), .. })
        .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Fn(..), .. }) => BodyOwnerKind::Fn,
        .                       Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => BodyOwnerKind::Static(m),
        .                       Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => BodyOwnerKind::Closure,
        .                       node => bug!("{:#?} is not a body node", node),
        .                   }
    4,986 ( 0.00%)      }
        .           
        .               /// Returns the `ConstContext` of the body associated with this `LocalDefId`.
        .               ///
        .               /// Panics if `LocalDefId` does not have an associated body.
        .               ///
        .               /// This should only be used for determining the context of a body, a return
        .               /// value of `Some` does not always suggest that the owner of the body is `const`,
        .               /// just that it has to be checked as if it were.
    5,856 ( 0.00%)      pub fn body_const_context(&self, did: LocalDefId) -> Option<ConstContext> {
        .                   let hir_id = self.local_def_id_to_hir_id(did);
    8,784 ( 0.00%)          let ccx = match self.body_owner_kind(hir_id) {
        .                       BodyOwnerKind::Const => ConstContext::Const,
        .                       BodyOwnerKind::Static(mt) => ConstContext::Static(mt),
        .           
      374 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_constructor(did.to_def_id()) => return None,
      374 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(did.to_def_id()) => ConstContext::ConstFn,
        .                       BodyOwnerKind::Fn
      712 ( 0.00%)                  if self.tcx.has_attr(did.to_def_id(), sym::default_method_body_is_const) =>
        .                       {
        .                           ConstContext::ConstFn
        .                       }
        .                       BodyOwnerKind::Fn | BodyOwnerKind::Closure => return None,
        .                   };
        .           
        .                   Some(ccx)
    6,588 ( 0.00%)      }
        .           
        .               /// Returns an iterator of the `DefId`s for all body-owners in this
        .               /// crate. If you would prefer to iterate over the bodies
        .               /// themselves, you can do `self.hir().krate().body_ids.iter()`.
       21 ( 0.00%)      pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + 'hir {
        3 ( 0.00%)          self.krate()
        .                       .owners
        .                       .iter_enumerated()
        .                       .flat_map(move |(owner, owner_info)| {
    1,101 ( 0.00%)                  let bodies = &owner_info.as_ref()?.nodes.bodies;
        .                           Some(bodies.iter().map(move |&(local_id, _)| {
       48 ( 0.00%)                      let hir_id = HirId { owner, local_id };
        .                               let body_id = BodyId { hir_id };
    1,436 ( 0.00%)                      self.body_owner_def_id(body_id)
        .                           }))
        .                       })
        .                       .flatten()
       15 ( 0.00%)      }
        .           
       10 ( 0.00%)      pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {
        .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
        .                   #[cfg(parallel_compiler)]
        .                   use rustc_rayon::iter::IndexedParallelIterator;
        .           
        3 ( 0.00%)          par_iter(&self.krate().owners.raw).enumerate().for_each(|(owner, owner_info)| {
        .                       let owner = LocalDefId::new(owner);
    2,202 ( 0.00%)              if let Some(owner_info) = owner_info {
        .                           par_iter(owner_info.nodes.bodies.range(..)).for_each(|(local_id, _)| {
        .                               let hir_id = HirId { owner, local_id: *local_id };
        .                               let body_id = BodyId { hir_id };
    1,422 ( 0.00%)                      f(self.body_owner_def_id(body_id))
        .                           })
        .                       }
        .                   });
        8 ( 0.00%)      }
        .           
        .               pub fn ty_param_owner(&self, id: HirId) -> LocalDefId {
        .                   match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
        .                           id.expect_owner()
        .                       }
        .                       Node::GenericParam(_) => self.get_parent_item(id),
        .                       _ => bug!("ty_param_owner: {} not a type parameter", self.node_to_string(id)),
-- line 558 ----------------------------------------
-- line 564 ----------------------------------------
        .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
        .                           kw::SelfUpper
        .                       }
        .                       Node::GenericParam(param) => param.name.ident().name,
        .                       _ => bug!("ty_param_name: {} not a type parameter", self.node_to_string(id)),
        .                   }
        .               }
        .           
      540 ( 0.00%)      pub fn trait_impls(&self, trait_did: DefId) -> &'hir [LocalDefId] {
       60 ( 0.00%)          self.tcx.all_local_trait_impls(()).get(&trait_did).map_or(&[], |xs| &xs[..])
      540 ( 0.00%)      }
        .           
        .               /// Gets the attributes on the crate. This is preferable to
        .               /// invoking `krate.attrs` because it registers a tighter
        .               /// dep-graph access.
        .               pub fn krate_attrs(&self) -> &'hir [ast::Attribute] {
       20 ( 0.00%)          self.attrs(CRATE_HIR_ID)
        .               }
        .           
       98 ( 0.00%)      pub fn get_module(&self, module: LocalDefId) -> (&'hir Mod<'hir>, Span, HirId) {
        .                   let hir_id = HirId::make_owner(module);
       70 ( 0.00%)          match self.tcx.hir_owner(module).map(|o| o.node) {
        6 ( 0.00%)              Some(OwnerNode::Item(&Item { span, kind: ItemKind::Mod(ref m), .. })) => {
        .                           (m, span, hir_id)
        .                       }
       33 ( 0.00%)              Some(OwnerNode::Crate(item)) => (item, item.inner, hir_id),
        .                       node => panic!("not a module: {:?}", node),
        .                   }
      126 ( 0.00%)      }
        .           
        .               /// Walks the contents of a crate. See also `Crate::visit_all_items`.
       11 ( 0.00%)      pub fn walk_toplevel_module(self, visitor: &mut impl Visitor<'hir>) {
       30 ( 0.00%)          let (top_mod, span, hir_id) = self.get_module(CRATE_DEF_ID);
        .                   visitor.visit_mod(top_mod, span, hir_id);
        8 ( 0.00%)      }
        .           
        .               /// Walks the attributes in a crate.
       20 ( 0.00%)      pub fn walk_attributes(self, visitor: &mut impl Visitor<'hir>) {
        2 ( 0.00%)          let krate = self.krate();
        .                   for (owner, info) in krate.owners.iter_enumerated() {
    1,468 ( 0.00%)              if let Some(info) = info {
        .                           for (local_id, attrs) in info.attrs.map.iter() {
        .                               let id = HirId { owner, local_id: *local_id };
        .                               for a in *attrs {
    2,105 ( 0.00%)                          visitor.visit_attribute(id, a)
        .                               }
        .                           }
        .                       }
        .                   }
       16 ( 0.00%)      }
        .           
        .               /// Visits all items in the crate in some deterministic (but
        .               /// unspecified) order. If you just need to process every item,
        .               /// but don't care about nesting, this method is the best choice.
        .               ///
        .               /// If you do care about nesting -- usually because your algorithm
        .               /// follows lexical scoping rules -- then you want a different
        .               /// approach. You should override `visit_nested_item` in your
        .               /// visitor and then call `intravisit::walk_crate` instead.
      144 ( 0.00%)      pub fn visit_all_item_likes<V>(&self, visitor: &mut V)
        .               where
        .                   V: itemlikevisit::ItemLikeVisitor<'hir>,
        .               {
       20 ( 0.00%)          let krate = self.krate();
       70 ( 0.00%)          for owner in krate.owners.iter().filter_map(Option::as_ref) {
    7,029 ( 0.00%)              match owner.node() {
    5,504 ( 0.00%)                  OwnerNode::Item(item) => visitor.visit_item(item),
        .                           OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),
      252 ( 0.00%)                  OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),
        .                           OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),
        .                           OwnerNode::Crate(_) => {}
        .                       }
        .                   }
      144 ( 0.00%)      }
        .           
        .               /// A parallel version of `visit_all_item_likes`.
        .               pub fn par_visit_all_item_likes<V>(&self, visitor: &V)
        .               where
        .                   V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send,
        .               {
        1 ( 0.00%)          let krate = self.krate();
        2 ( 0.00%)          par_for_each_in(&krate.owners.raw, |owner| match owner.as_ref().map(OwnerInfo::node) {
      128 ( 0.00%)              Some(OwnerNode::Item(item)) => visitor.visit_item(item),
        .                       Some(OwnerNode::ForeignItem(item)) => visitor.visit_foreign_item(item),
       84 ( 0.00%)              Some(OwnerNode::ImplItem(item)) => visitor.visit_impl_item(item),
        .                       Some(OwnerNode::TraitItem(item)) => visitor.visit_trait_item(item),
        .                       Some(OwnerNode::Crate(_)) | None => {}
        .                   })
        .               }
        .           
      172 ( 0.00%)      pub fn visit_item_likes_in_module<V>(&self, module: LocalDefId, visitor: &mut V)
        .               where
        .                   V: ItemLikeVisitor<'hir>,
        .               {
       22 ( 0.00%)          let module = self.tcx.hir_module_items(module);
        .           
       24 ( 0.00%)          for id in module.items.iter() {
    5,760 ( 0.00%)              visitor.visit_item(self.item(*id));
        .                   }
        .           
       24 ( 0.00%)          for id in module.trait_items.iter() {
        .                       visitor.visit_trait_item(self.trait_item(*id));
        .                   }
        .           
       24 ( 0.00%)          for id in module.impl_items.iter() {
    3,276 ( 0.00%)              visitor.visit_impl_item(self.impl_item(*id));
        .                   }
        .           
       24 ( 0.00%)          for id in module.foreign_items.iter() {
        .                       visitor.visit_foreign_item(self.foreign_item(*id));
        .                   }
      176 ( 0.00%)      }
        .           
       46 ( 0.00%)      pub fn for_each_module(&self, f: impl Fn(LocalDefId)) {
        .                   let mut queue = VecDeque::new();
        .                   queue.push_back(CRATE_DEF_ID);
        .           
       16 ( 0.00%)          while let Some(id) = queue.pop_front() {
        .                       f(id);
        6 ( 0.00%)              let items = self.tcx.hir_module_items(id);
       64 ( 0.00%)              queue.extend(items.submodules.iter().copied())
        .                   }
       40 ( 0.00%)      }
        .           
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId)) {
        4 ( 0.00%)          self.for_each_module(f)
        .               }
        .           
        .               #[cfg(parallel_compiler)]
        .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId) + Sync) {
        .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
        .                   par_iter_submodules(self.tcx, CRATE_DEF_ID, &f);
        .           
        .                   fn par_iter_submodules<F>(tcx: TyCtxt<'_>, module: LocalDefId, f: &F)
-- line 699 ----------------------------------------
-- line 703 ----------------------------------------
        .                       (*f)(module);
        .                       let items = tcx.hir_module_items(module);
        .                       par_iter(&items.submodules[..]).for_each(|&sm| par_iter_submodules(tcx, sm, f));
        .                   }
        .               }
        .           
        .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
        .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
      267 ( 0.00%)      pub fn parent_iter(self, current_id: HirId) -> ParentHirIterator<'hir> {
        .                   ParentHirIterator { current_id, map: self }
    1,068 ( 0.00%)      }
        .           
        .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
        .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
        .               pub fn parent_owner_iter(self, current_id: HirId) -> ParentOwnerIterator<'hir> {
        .                   ParentOwnerIterator { current_id, map: self }
    4,829 ( 0.00%)      }
        .           
        .               /// Checks if the node is left-hand side of an assignment.
        .               pub fn is_lhs(&self, id: HirId) -> bool {
        .                   match self.find(self.get_parent_node(id)) {
        .                       Some(Node::Expr(expr)) => match expr.kind {
        .                           ExprKind::Assign(lhs, _rhs, _span) => lhs.hir_id == id,
        .                           _ => false,
        .                       },
-- line 727 ----------------------------------------
-- line 792 ----------------------------------------
        .                   }
        .                   None
        .               }
        .           
        .               /// Retrieves the `HirId` for `id`'s parent item, or `id` itself if no
        .               /// parent item is in this map. The "parent item" is the closest parent node
        .               /// in the HIR which is recorded by the map and is an item, either an item
        .               /// in a module, trait, or impl.
    1,451 ( 0.00%)      pub fn get_parent_item(&self, hir_id: HirId) -> LocalDefId {
   13,059 ( 0.00%)          if let Some((def_id, _node)) = self.parent_owner_iter(hir_id).next() {
        .                       def_id
        .                   } else {
        .                       CRATE_DEF_ID
        .                   }
    2,902 ( 0.00%)      }
        .           
        .               /// Returns the `HirId` of `id`'s nearest module parent, or `id` itself if no
        .               /// module parent is in this map.
        .               pub(super) fn get_module_parent_node(&self, hir_id: HirId) -> LocalDefId {
    1,984 ( 0.00%)          for (def_id, node) in self.parent_owner_iter(hir_id) {
      672 ( 0.00%)              if let OwnerNode::Item(&Item { kind: ItemKind::Mod(_), .. }) = node {
        .                           return def_id;
        .                       }
        .                   }
        .                   CRATE_DEF_ID
        .               }
        .           
        .               /// When on an if expression, a match arm tail expression or a match arm, give back
        .               /// the enclosing `if` or `match` expression.
-- line 820 ----------------------------------------
-- line 885 ----------------------------------------
        .                       }
        .                   }
        .                   bug!(
        .                       "expected foreign mod or inlined parent, found {}",
        .                       self.node_to_string(HirId::make_owner(parent))
        .                   )
        .               }
        .           
    6,300 ( 0.00%)      pub fn expect_item(&self, id: LocalDefId) -> &'hir Item<'hir> {
    2,700 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::Item(item), .. }) => item,
        .                       _ => bug!("expected item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
    7,200 ( 0.00%)      }
        .           
    1,176 ( 0.00%)      pub fn expect_impl_item(&self, id: LocalDefId) -> &'hir ImplItem<'hir> {
      504 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::ImplItem(item), .. }) => item,
        .                       _ => bug!("expected impl item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
    1,344 ( 0.00%)      }
        .           
        .               pub fn expect_trait_item(&self, id: LocalDefId) -> &'hir TraitItem<'hir> {
        .                   match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::TraitItem(item), .. }) => item,
        .                       _ => bug!("expected trait item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
        .               }
        .           
-- line 913 ----------------------------------------
-- line 929 ----------------------------------------
        .           
        .               pub fn expect_expr(&self, id: HirId) -> &'hir Expr<'hir> {
        .                   match self.find(id) {
        .                       Some(Node::Expr(expr)) => expr,
        .                       _ => bug!("expected expr, found {}", self.node_to_string(id)),
        .                   }
        .               }
        .           
    1,143 ( 0.00%)      pub fn opt_name(&self, id: HirId) -> Option<Symbol> {
      417 ( 0.00%)          Some(match self.get(id) {
        .                       Node::Item(i) => i.ident.name,
        .                       Node::ForeignItem(fi) => fi.ident.name,
        .                       Node::ImplItem(ii) => ii.ident.name,
        .                       Node::TraitItem(ti) => ti.ident.name,
        .                       Node::Variant(v) => v.ident.name,
        .                       Node::Field(f) => f.ident.name,
        .                       Node::Lifetime(lt) => lt.name.ident().name,
      327 ( 0.00%)              Node::GenericParam(param) => param.name.ident().name,
       36 ( 0.00%)              Node::Binding(&Pat { kind: PatKind::Binding(_, _, l, _), .. }) => l.name,
        .                       Node::Ctor(..) => self.name(HirId::make_owner(self.get_parent_item(id))),
        .                       _ => return None,
        .                   })
      635 ( 0.00%)      }
        .           
      944 ( 0.00%)      pub fn name(&self, id: HirId) -> Symbol {
      399 ( 0.00%)          match self.opt_name(id) {
        .                       Some(name) => name,
        .                       None => bug!("no name for {}", self.node_to_string(id)),
        .                   }
      708 ( 0.00%)      }
        .           
        .               /// Given a node ID, gets a list of attributes associated with the AST
        .               /// corresponding to the node-ID.
3,586,716 ( 0.09%)      pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {
  512,388 ( 0.01%)          self.tcx.hir_attrs(id.owner).get(id.local_id)
4,099,104 ( 0.10%)      }
        .           
        .               /// Gets the span of the definition of the specified HIR node.
        .               /// This is used by `tcx.get_span`
    1,911 ( 0.00%)      pub fn span(&self, hir_id: HirId) -> Span {
   90,765 ( 0.00%)          self.opt_span(hir_id)
        .                       .unwrap_or_else(|| bug!("hir::map::Map::span: id not in map: {:?}", hir_id))
    1,911 ( 0.00%)      }
        .           
  164,773 ( 0.00%)      pub fn opt_span(&self, hir_id: HirId) -> Option<Span> {
  164,773 ( 0.00%)          let span = match self.find(hir_id)? {
        .                       Node::Param(param) => param.span,
      448 ( 0.00%)              Node::Item(item) => match &item.kind {
        .                           ItemKind::Fn(sig, _, _) => sig.span,
      312 ( 0.00%)                  _ => item.span,
        .                       },
        .                       Node::ForeignItem(foreign_item) => foreign_item.span,
        .                       Node::TraitItem(trait_item) => match &trait_item.kind {
        .                           TraitItemKind::Fn(sig, _) => sig.span,
        .                           _ => trait_item.span,
        .                       },
      618 ( 0.00%)              Node::ImplItem(impl_item) => match &impl_item.kind {
      600 ( 0.00%)                  ImplItemKind::Fn(sig, _) => sig.span,
       18 ( 0.00%)                  _ => impl_item.span,
        .                       },
       50 ( 0.00%)              Node::Variant(variant) => variant.span,
       34 ( 0.00%)              Node::Field(field) => field.span,
    1,190 ( 0.00%)              Node::AnonConst(constant) => self.body(constant.body).value.span,
        .                       Node::Expr(expr) => expr.span,
        .                       Node::Stmt(stmt) => stmt.span,
        .                       Node::PathSegment(seg) => seg.ident.span,
        .                       Node::Ty(ty) => ty.span,
        .                       Node::TraitRef(tr) => tr.path.span,
        .                       Node::Binding(pat) => pat.span,
        .                       Node::Pat(pat) => pat.span,
        .                       Node::Arm(arm) => arm.span,
        .                       Node::Block(block) => block.span,
      191 ( 0.00%)              Node::Ctor(..) => match self.find(self.get_parent_node(hir_id))? {
        .                           Node::Item(item) => item.span,
        .                           Node::Variant(variant) => variant.span,
        .                           _ => unreachable!(),
        .                       },
        .                       Node::Lifetime(lifetime) => lifetime.span,
        .                       Node::GenericParam(param) => param.span,
        .                       Node::Visibility(&Spanned {
        .                           node: VisibilityKind::Restricted { ref path, .. },
        .                           ..
        .                       }) => path.span,
        .                       Node::Infer(i) => i.span,
        .                       Node::Visibility(v) => bug!("unexpected Visibility {:?}", v),
        .                       Node::Local(local) => local.span,
        4 ( 0.00%)              Node::Crate(item) => item.inner,
        .                   };
        .                   Some(span)
  235,390 ( 0.01%)      }
        .           
        .               /// Like `hir.span()`, but includes the body of function items
        .               /// (instead of just the function header)
        .               pub fn span_with_body(&self, hir_id: HirId) -> Span {
        .                   match self.find(hir_id) {
        .                       Some(Node::TraitItem(item)) => item.span,
        .                       Some(Node::ImplItem(impl_item)) => impl_item.span,
        .                       Some(Node::Item(item)) => item.span,
        .                       Some(_) => self.span(hir_id),
        .                       _ => bug!("hir::map::Map::span_with_body: id not in map: {:?}", hir_id),
        .                   }
        .               }
        .           
      118 ( 0.00%)      pub fn span_if_local(&self, id: DefId) -> Option<Span> {
      719 ( 0.00%)          id.as_local().and_then(|id| self.opt_span(self.local_def_id_to_hir_id(id)))
      177 ( 0.00%)      }
        .           
        .               pub fn res_span(&self, res: Res) -> Option<Span> {
        .                   match res {
        .                       Res::Err => None,
        .                       Res::Local(id) => Some(self.span(id)),
        .                       res => self.span_if_local(res.opt_def_id()?),
        .                   }
        .               }
-- line 1042 ----------------------------------------
-- line 1062 ----------------------------------------
        .           }
        .           
        .           impl<'hir> intravisit::Map<'hir> for Map<'hir> {
        .               fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {
        .                   self.find(hir_id)
        .               }
        .           
        .               fn body(&self, id: BodyId) -> &'hir Body<'hir> {
    3,037 ( 0.00%)          self.body(id)
        .               }
        .           
        .               fn item(&self, id: ItemId) -> &'hir Item<'hir> {
    1,636 ( 0.00%)          self.item(id)
        .               }
        .           
        .               fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
        .                   self.trait_item(id)
        .               }
        .           
        .               fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
    1,176 ( 0.00%)          self.impl_item(id)
        .               }
        .           
        .               fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
        .                   self.foreign_item(id)
        .               }
        .           }
        .           
        7 ( 0.00%)  pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {
        .               debug_assert_eq!(crate_num, LOCAL_CRATE);
        .               let krate = tcx.hir_crate(());
        3 ( 0.00%)      let hir_body_hash = krate.hir_hash;
        .           
        .               let upstream_crates = upstream_crates(tcx);
        .           
        .               // We hash the final, remapped names of all local source files so we
        .               // don't have to include the path prefix remapping commandline args.
        .               // If we included the full mapping in the SVH, we could only have
        .               // reproducible builds by compiling from the same directory. So we just
        .               // hash the result of the mapping instead of the mapping itself.
        2 ( 0.00%)      let mut source_file_names: Vec<_> = tcx
        .                   .sess
        .                   .source_map()
        .                   .files()
        .                   .iter()
        .                   .filter(|source_file| source_file.cnum == LOCAL_CRATE)
        5 ( 0.00%)          .map(|source_file| source_file.name_hash)
        .                   .collect();
        .           
        .               source_file_names.sort_unstable();
        .           
        .               let mut hcx = tcx.create_stable_hashing_context();
        .               let mut stable_hasher = StableHasher::new();
        .               hir_body_hash.hash_stable(&mut hcx, &mut stable_hasher);
        .               upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);
        .               source_file_names.hash_stable(&mut hcx, &mut stable_hasher);
        3 ( 0.00%)      if tcx.sess.opts.debugging_opts.incremental_relative_spans {
        .                   let definitions = &tcx.untracked_resolutions.definitions;
        .                   let mut owner_spans: Vec<_> = krate
        .                       .owners
        .                       .iter_enumerated()
        .                       .filter_map(|(def_id, info)| {
        .                           let _ = info.as_ref()?;
        .                           let def_path_hash = definitions.def_path_hash(def_id);
        .                           let span = definitions.def_span(def_id);
        .                           debug_assert_eq!(span.parent(), None);
        .                           Some((def_path_hash, span))
        .                       })
        .                       .collect();
        .                   owner_spans.sort_unstable_by_key(|bn| bn.0);
        .                   owner_spans.hash_stable(&mut hcx, &mut stable_hasher);
        .               }
        3 ( 0.00%)      tcx.sess.opts.dep_tracking_hash(true).hash_stable(&mut hcx, &mut stable_hasher);
        2 ( 0.00%)      tcx.sess.local_stable_crate_id().hash_stable(&mut hcx, &mut stable_hasher);
        .           
        .               let crate_hash: Fingerprint = stable_hasher.finish();
        1 ( 0.00%)      Svh::new(crate_hash.to_smaller_hash())
        9 ( 0.00%)  }
        .           
        .           fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {
        .               let mut upstream_crates: Vec<_> = tcx
        .                   .crates(())
        .                   .iter()
        .                   .map(|&cnum| {
       95 ( 0.00%)              let stable_crate_id = tcx.resolutions(()).cstore.stable_crate_id(cnum);
       19 ( 0.00%)              let hash = tcx.crate_hash(cnum);
        .                       (stable_crate_id, hash)
        .                   })
        .                   .collect();
        .               upstream_crates.sort_unstable_by_key(|&(stable_crate_id, _)| stable_crate_id);
        .               upstream_crates
        .           }
        .           
        .           fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {
-- line 1155 ----------------------------------------
-- line 1238 ----------------------------------------
        .                   Some(Node::Lifetime(_)) => node_str("lifetime"),
        .                   Some(Node::GenericParam(ref param)) => format!("generic_param {:?}{}", param, id_str),
        .                   Some(Node::Visibility(ref vis)) => format!("visibility {:?}{}", vis, id_str),
        .                   Some(Node::Crate(..)) => String::from("root_crate"),
        .                   None => format!("unknown node{}", id_str),
        .               }
        .           }
        .           
       18 ( 0.00%)  pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> ModuleItems {
       12 ( 0.00%)      let mut collector = ModuleCollector {
        .                   tcx,
        .                   submodules: Vec::default(),
        .                   items: Vec::default(),
        .                   trait_items: Vec::default(),
        .                   impl_items: Vec::default(),
        .                   foreign_items: Vec::default(),
        .               };
        .           
       10 ( 0.00%)      let (hir_mod, span, hir_id) = tcx.hir().get_module(module_id);
        .               collector.visit_mod(hir_mod, span, hir_id);
        .           
       32 ( 0.00%)      let ModuleCollector { submodules, items, trait_items, impl_items, foreign_items, .. } =
        .                   collector;
       22 ( 0.00%)      return ModuleItems {
        8 ( 0.00%)          submodules: submodules.into_boxed_slice(),
        8 ( 0.00%)          items: items.into_boxed_slice(),
        8 ( 0.00%)          trait_items: trait_items.into_boxed_slice(),
        8 ( 0.00%)          impl_items: impl_items.into_boxed_slice(),
        8 ( 0.00%)          foreign_items: foreign_items.into_boxed_slice(),
        .               };
        .           
        .               struct ModuleCollector<'tcx> {
        .                   tcx: TyCtxt<'tcx>,
        .                   submodules: Vec<LocalDefId>,
        .                   items: Vec<ItemId>,
        .                   trait_items: Vec<TraitItemId>,
        .                   impl_items: Vec<ImplItemId>,
        .                   foreign_items: Vec<ForeignItemId>,
        .               }
        .           
        .               impl<'hir> Visitor<'hir> for ModuleCollector<'hir> {
        .                   type NestedFilter = nested_filter::All;
        .           
        .                   fn nested_visit_map(&mut self) -> Self::Map {
      368 ( 0.00%)              self.tcx.hir()
        .                   }
        .           
      640 ( 0.00%)          fn visit_item(&mut self, item: &'hir Item<'hir>) {
      384 ( 0.00%)              self.items.push(item.item_id());
      256 ( 0.00%)              if let ItemKind::Mod(..) = item.kind {
        .                           // If this declares another module, do not recurse inside it.
        1 ( 0.00%)                  self.submodules.push(item.def_id);
        .                       } else {
      762 ( 0.00%)                  intravisit::walk_item(self, item)
        .                       }
        4 ( 0.00%)          }
        .           
        .                   fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {
        .                       self.trait_items.push(item.trait_item_id());
        .                       intravisit::walk_trait_item(self, item)
        .                   }
        .           
        .                   fn visit_impl_item(&mut self, item: &'hir ImplItem<'hir>) {
      252 ( 0.00%)              self.impl_items.push(item.impl_item_id());
      252 ( 0.00%)              intravisit::walk_impl_item(self, item)
        .                   }
        .           
        .                   fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {
        .                       self.foreign_items.push(item.foreign_item_id());
        .                       intravisit::walk_foreign_item(self, item)
        .                   }
        .               }
       16 ( 0.00%)  }

  690,685 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/regionck.rs
--------------------------------------------------------------------------------
Ir               

-- line 125 ----------------------------------------
      .               /// fn foo<'a, 'b, T>(x: &'a &'b [T]) { }
      .               /// ```
      .               ///
      .               /// we can assume in the caller's body that `'b: 'a` and that `T:
      .               /// 'b` (and hence, transitively, that `T: 'a`). This method would
      .               /// add those assumptions into the outlives-environment.
      .               ///
      .               /// Tests: `src/test/ui/regions/regions-free-region-ordering-*.rs`
  5,424 ( 0.00%)      fn add_implied_bounds<'a>(
      .                   &mut self,
      .                   infcx: &InferCtxt<'a, 'tcx>,
      .                   fn_sig_tys: FxHashSet<Ty<'tcx>>,
      .                   body_id: hir::HirId,
      .                   span: Span,
      .               ) {
      .                   debug!("add_implied_bounds()");
      .           
  9,596 ( 0.00%)          for ty in fn_sig_tys {
      .                       let ty = infcx.resolve_vars_if_possible(ty);
      .                       debug!("add_implied_bounds: ty = {}", ty);
  8,604 ( 0.00%)              let implied_bounds = infcx.implied_outlives_bounds(self.param_env, body_id, ty, span);
      .                       self.add_outlives_bounds(Some(infcx), implied_bounds)
      .                   }
  3,616 ( 0.00%)      }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // PUBLIC ENTRY POINTS
      .           
      .           impl<'a, 'tcx> FnCtxt<'a, 'tcx> {
    423 ( 0.00%)      pub fn regionck_expr(&self, body: &'tcx hir::Body<'tcx>) {
    329 ( 0.00%)          let subject = self.tcx.hir().body_owner_def_id(body.id());
     94 ( 0.00%)          let id = body.value.hir_id;
    329 ( 0.00%)          let mut rcx = RegionCtxt::new(self, id, Subject(subject), self.param_env);
      .           
      .                   // There are no add'l implied bounds when checking a
      .                   // standalone expr (e.g., the `E` in a type like `[u32; E]`).
    235 ( 0.00%)          rcx.outlives_environment.save_implied_bounds(id);
      .           
     47 ( 0.00%)          if !self.errors_reported_since_creation() {
      .                       // regionck assumes typeck succeeded
      .                       rcx.visit_body(body);
      .                       rcx.visit_region_obligations(id);
      .                   }
     94 ( 0.00%)          rcx.resolve_regions_and_report_errors(RegionckMode::for_item_body(self.tcx));
    423 ( 0.00%)      }
      .           
      .               /// Region checking during the WF phase for items. `wf_tys` are the
      .               /// types from which we should derive implied bounds, if any.
  2,988 ( 0.00%)      pub fn regionck_item(&self, item_id: hir::HirId, span: Span, wf_tys: FxHashSet<Ty<'tcx>>) {
      .                   debug!("regionck_item(item.id={:?}, wf_tys={:?})", item_id, wf_tys);
    996 ( 0.00%)          let subject = self.tcx.hir().local_def_id(item_id);
  1,743 ( 0.00%)          let mut rcx = RegionCtxt::new(self, item_id, Subject(subject), self.param_env);
  2,739 ( 0.00%)          rcx.outlives_environment.add_implied_bounds(self, wf_tys, item_id, span);
    996 ( 0.00%)          rcx.outlives_environment.save_implied_bounds(item_id);
      .                   rcx.visit_region_obligations(item_id);
      .                   rcx.resolve_regions_and_report_errors(RegionckMode::default());
  2,241 ( 0.00%)      }
      .           
      .               /// Region check a function body. Not invoked on closures, but
      .               /// only on the "root" fn item (in which closures may be
      .               /// embedded). Walks the function body and adds various add'l
      .               /// constraints that are needed for region inference. This is
      .               /// separated both to isolate "pure" region constraints from the
      .               /// rest of type check and because sometimes we need type
      .               /// inference to have completed before we can determine which
      .               /// constraints to add.
  1,196 ( 0.00%)      pub(crate) fn regionck_fn(
      .                   &self,
      .                   fn_id: hir::HirId,
      .                   body: &'tcx hir::Body<'tcx>,
      .                   span: Span,
      .                   wf_tys: FxHashSet<Ty<'tcx>>,
      .               ) {
      .                   debug!("regionck_fn(id={})", fn_id);
    552 ( 0.00%)          let subject = self.tcx.hir().body_owner_def_id(body.id());
    184 ( 0.00%)          let hir_id = body.value.hir_id;
    460 ( 0.00%)          let mut rcx = RegionCtxt::new(self, hir_id, Subject(subject), self.param_env);
      .                   // We need to add the implied bounds from the function signature
  1,104 ( 0.00%)          rcx.outlives_environment.add_implied_bounds(self, wf_tys, fn_id, span);
    368 ( 0.00%)          rcx.outlives_environment.save_implied_bounds(fn_id);
      .           
     92 ( 0.00%)          if !self.errors_reported_since_creation() {
      .                       // regionck assumes typeck succeeded
  1,012 ( 0.00%)              rcx.visit_fn_body(fn_id, body, self.tcx.hir().span(fn_id));
      .                   }
      .           
    184 ( 0.00%)          rcx.resolve_regions_and_report_errors(RegionckMode::for_item_body(self.tcx));
    828 ( 0.00%)      }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // INTERNALS
      .           
      .           pub struct RegionCtxt<'a, 'tcx> {
      .               pub fcx: &'a FnCtxt<'a, 'tcx>,
      .           
-- line 221 ----------------------------------------
-- line 229 ----------------------------------------
      .           
      .               // id of AST node being analyzed (the subject of the analysis).
      .               subject_def_id: LocalDefId,
      .           }
      .           
      .           impl<'a, 'tcx> Deref for RegionCtxt<'a, 'tcx> {
      .               type Target = FnCtxt<'a, 'tcx>;
      .               fn deref(&self) -> &Self::Target {
197,652 ( 0.01%)          self.fcx
      .               }
      .           }
      .           
      .           pub struct Subject(LocalDefId);
      .           
      .           impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {
  4,268 ( 0.00%)      pub fn new(
      .                   fcx: &'a FnCtxt<'a, 'tcx>,
      .                   initial_body_id: hir::HirId,
      .                   Subject(subject): Subject,
      .                   param_env: ty::ParamEnv<'tcx>,
      .               ) -> RegionCtxt<'a, 'tcx> {
    388 ( 0.00%)          let region_scope_tree = fcx.tcx.region_scope_tree(subject);
    776 ( 0.00%)          let outlives_environment = OutlivesEnvironment::new(param_env);
  2,716 ( 0.00%)          RegionCtxt {
      .                       fcx,
      .                       region_scope_tree,
      .                       body_id: initial_body_id,
      .                       body_owner: subject,
      .                       subject_def_id: subject,
  1,552 ( 0.00%)              outlives_environment,
      .                   }
  3,492 ( 0.00%)      }
      .           
      .               /// Try to resolve the type for the given node, returning `t_err` if an error results. Note that
      .               /// we never care about the details of the error, the same error will be detected and reported
      .               /// in the writeback phase.
      .               ///
      .               /// Note one important point: we do not attempt to resolve *region variables* here. This is
      .               /// because regionck is essentially adding constraints to those region variables and so may yet
      .               /// influence how they are resolved.
-- line 268 ----------------------------------------
-- line 283 ----------------------------------------
      .               /// of b will be `&<R0>.i32` and then `*b` will require that `<R0>` be bigger than the let and
      .               /// the `*b` expression, so we will effectively resolve `<R0>` to be the block B.
      .               pub fn resolve_type(&self, unresolved_ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.resolve_vars_if_possible(unresolved_ty)
      .               }
      .           
      .               /// Try to resolve the type for the given node.
      .               fn resolve_node_type(&self, id: hir::HirId) -> Ty<'tcx> {
    517 ( 0.00%)          let t = self.node_ty(id);
    355 ( 0.00%)          self.resolve_type(t)
      .               }
      .           
      .               /// This is the "main" function when region-checking a function item or a
      .               /// closure within a function item. It begins by updating various fields
      .               /// (e.g., `outlives_environment`) to be appropriate to the function and
      .               /// then adds constraints derived from the function body.
      .               ///
      .               /// Note that it does **not** restore the state of the fields that
      .               /// it updates! This is intentional, since -- for the main
      .               /// function -- we wish to be able to read the final
      .               /// `outlives_environment` and other fields from the caller. For
      .               /// closures, however, we save and restore any "scoped state"
      .               /// before we invoke this function. (See `visit_fn` in the
      .               /// `intravisit::Visitor` impl below.)
  1,554 ( 0.00%)      fn visit_fn_body(
      .                   &mut self,
      .                   id: hir::HirId, // the id of the fn itself
      .                   body: &'tcx hir::Body<'tcx>,
      .                   span: Span,
      .               ) {
      .                   // When we enter a function, we can derive
      .                   debug!("visit_fn_body(id={:?})", id);
      .           
    444 ( 0.00%)          let body_id = body.id();
    222 ( 0.00%)          self.body_id = body_id.hir_id;
    777 ( 0.00%)          self.body_owner = self.tcx.hir().body_owner_def_id(body_id);
      .           
      .                   let fn_sig = {
  1,110 ( 0.00%)              match self.typeck_results.borrow().liberated_fn_sigs().get(id) {
    222 ( 0.00%)                  Some(f) => *f,
      .                           None => {
      .                               bug!("No fn-sig entry for id={:?}", id);
      .                           }
      .                       }
      .                   };
      .           
      .                   // Collect the types from which we create inferred bounds.
      .                   // For the return type, if diverging, substitute `bool` just
      .                   // because it will have no effect.
      .                   //
      .                   // FIXME(#27579) return types should not be implied bounds
      .                   let fn_sig_tys: FxHashSet<_> =
    555 ( 0.00%)              fn_sig.inputs().iter().cloned().chain(Some(fn_sig.output())).collect();
      .           
  1,443 ( 0.00%)          self.outlives_environment.add_implied_bounds(self.fcx, fn_sig_tys, body_id.hir_id, span);
    555 ( 0.00%)          self.outlives_environment.save_implied_bounds(body_id.hir_id);
    222 ( 0.00%)          self.link_fn_params(body.params);
      .                   self.visit_body(body);
      .                   self.visit_region_obligations(body_id.hir_id);
    888 ( 0.00%)      }
      .           
      .               fn visit_inline_const(&mut self, id: hir::HirId, body: &'tcx hir::Body<'tcx>) {
      .                   debug!("visit_inline_const(id={:?})", id);
      .           
      .                   // Save state of current function. We will restore afterwards.
      .                   let old_body_id = self.body_id;
      .                   let old_body_owner = self.body_owner;
      .                   let env_snapshot = self.outlives_environment.push_snapshot_pre_typeck_child();
-- line 350 ----------------------------------------
-- line 365 ----------------------------------------
      .               }
      .           
      .               fn visit_region_obligations(&mut self, hir_id: hir::HirId) {
      .                   debug!("visit_region_obligations: hir_id={:?}", hir_id);
      .           
      .                   // region checking can introduce new pending obligations
      .                   // which, when processed, might generate new region
      .                   // obligations. So make sure we process those.
    407 ( 0.00%)          self.select_all_obligations_or_error();
      .               }
      .           
      .               fn resolve_regions_and_report_errors(&self, mode: RegionckMode) {
  1,164 ( 0.00%)          self.infcx.process_registered_region_obligations(
    776 ( 0.00%)              self.outlives_environment.region_bound_pairs_map(),
    776 ( 0.00%)              Some(self.tcx.lifetimes.re_root_empty),
    388 ( 0.00%)              self.param_env,
      .                   );
      .           
  1,940 ( 0.00%)          self.fcx.resolve_regions_and_report_errors(
    388 ( 0.00%)              self.subject_def_id.to_def_id(),
      .                       &self.outlives_environment,
      .                       mode,
      .                   );
      .               }
      .           
      .               fn constrain_bindings_in_pat(&mut self, pat: &hir::Pat<'_>) {
      .                   debug!("regionck::visit_pat(pat={:?})", pat);
      .                   pat.each_binding(|_, hir_id, span, _| {
    162 ( 0.00%)              let typ = self.resolve_node_type(hir_id);
    324 ( 0.00%)              let body_id = self.body_id;
    648 ( 0.00%)              dropck::check_drop_obligations(self, typ, span, body_id);
      .                   })
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {
      .               // (..) FIXME(#3238) should use visit_pat, not visit_arm/visit_local,
      .               // However, right now we run into an issue whereby some free
      .               // regions are not properly related if they appear within the
-- line 403 ----------------------------------------
-- line 416 ----------------------------------------
      .               ) {
      .                   assert!(
      .                       matches!(fk, intravisit::FnKind::Closure),
      .                       "visit_fn invoked for something other than a closure"
      .                   );
      .           
      .                   // Save state of current function before invoking
      .                   // `visit_fn_body`.  We will restore afterwards.
     38 ( 0.00%)          let old_body_id = self.body_id;
     38 ( 0.00%)          let old_body_owner = self.body_owner;
     76 ( 0.00%)          let env_snapshot = self.outlives_environment.push_snapshot_pre_typeck_child();
      .           
    114 ( 0.00%)          let body = self.tcx.hir().body(body_id);
    114 ( 0.00%)          self.visit_fn_body(hir_id, body, span);
      .           
      .                   // Restore state from previous function.
     76 ( 0.00%)          self.outlives_environment.pop_snapshot_post_typeck_child(env_snapshot);
     38 ( 0.00%)          self.body_id = old_body_id;
     38 ( 0.00%)          self.body_owner = old_body_owner;
      .               }
      .           
      .               //visit_pat: visit_pat, // (..) see above
      .           
      .               fn visit_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) {
      .                   // see above
    931 ( 0.00%)          self.constrain_bindings_in_pat(arm.pat);
      .                   intravisit::walk_arm(self, arm);
      .               }
      .           
    600 ( 0.00%)      fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {
      .                   // see above
    525 ( 0.00%)          self.constrain_bindings_in_pat(l.pat);
      .                   self.link_local(l);
      .                   intravisit::walk_local(self, l);
    525 ( 0.00%)      }
      .           
512,744 ( 0.01%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
      .                   // Check any autoderefs or autorefs that appear.
      .                   let cmt_result = self.constrain_adjustments(expr);
      .           
      .                   // If necessary, constrain destructors in this expression. This will be
      .                   // the adjusted form if there is an adjustment.
128,926 ( 0.00%)          match cmt_result {
576,837 ( 0.01%)              Ok(head_cmt) => {
      .                           self.check_safety_of_rvalue_destructor_if_necessary(&head_cmt, expr.span);
      .                       }
      .                       Err(..) => {
      .                           self.tcx.sess.delay_span_bug(expr.span, "cat_expr Errd");
      .                       }
      .                   }
      .           
448,745 ( 0.01%)          match expr.kind {
      .                       hir::ExprKind::AddrOf(hir::BorrowKind::Ref, m, ref base) => {
      .                           self.link_addr_of(expr, m, base);
      .           
      .                           intravisit::walk_expr(self, expr);
      .                       }
      .           
      .                       hir::ExprKind::Match(ref discr, arms, _) => {
      .                           self.link_match(discr, arms);
-- line 475 ----------------------------------------
-- line 479 ----------------------------------------
      .           
      .                       hir::ExprKind::ConstBlock(anon_const) => {
      .                           let body = self.tcx.hir().body(anon_const.body);
      .                           self.visit_inline_const(anon_const.hir_id, body);
      .                       }
      .           
      .                       _ => intravisit::walk_expr(self, expr),
      .                   }
512,744 ( 0.01%)      }
      .           }
      .           
      .           impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {
      .               /// Creates a temporary `MemCategorizationContext` and pass it to the closure.
      .               fn with_mc<F, R>(&self, f: F) -> R
      .               where
      .                   F: for<'b> FnOnce(mc::MemCategorizationContext<'b, 'tcx>) -> R,
      .               {
668,813 ( 0.02%)          f(mc::MemCategorizationContext::new(
      .                       &self.infcx,
      .                       self.outlives_environment.param_env,
      .                       self.body_owner,
 65,934 ( 0.00%)              &self.typeck_results.borrow(),
      .                   ))
      .               }
      .           
      .               /// Invoked on any adjustments that occur. Checks that if this is a region pointer being
      .               /// dereferenced, the lifetime of the pointer includes the deref expr.
      .               fn constrain_adjustments(
      .                   &mut self,
      .                   expr: &hir::Expr<'_>,
      .               ) -> mc::McResult<PlaceWithHirId<'tcx>> {
      .                   debug!("constrain_adjustments(expr={:?})", expr);
      .           
128,186 ( 0.00%)          let mut place = self.with_mc(|mc| mc.cat_expr_unadjusted(expr))?;
      .           
 64,093 ( 0.00%)          let typeck_results = self.typeck_results.borrow();
 64,093 ( 0.00%)          let adjustments = typeck_results.expr_adjustments(expr);
 64,093 ( 0.00%)          if adjustments.is_empty() {
570,177 ( 0.01%)              return Ok(place);
      .                   }
      .           
      .                   debug!("constrain_adjustments: adjustments={:?}", adjustments);
      .           
      .                   // If necessary, constrain destructors in the unadjusted form of this
      .                   // expression.
      .                   self.check_safety_of_rvalue_destructor_if_necessary(&place, expr.span);
      .           
      .                   for adjustment in adjustments {
      .                       debug!("constrain_adjustments: adjustment={:?}, place={:?}", adjustment, place);
      .           
  4,658 ( 0.00%)              if let adjustment::Adjust::Deref(Some(deref)) = adjustment.kind {
     65 ( 0.00%)                  self.link_region(
     13 ( 0.00%)                      expr.span,
      .                               deref.region,
     52 ( 0.00%)                      ty::BorrowKind::from_mutbl(deref.mutbl),
      .                               &place,
      .                           );
      .                       }
      .           
  1,435 ( 0.00%)              if let adjustment::Adjust::Borrow(ref autoref) = adjustment.kind {
      .                           self.link_autoref(expr, &place, autoref);
      .                       }
      .           
 16,815 ( 0.00%)              place = self.with_mc(|mc| mc.cat_expr_adjusted(expr, place, adjustment))?;
      .                   }
      .           
  7,400 ( 0.00%)          Ok(place)
      .               }
      .           
      .               fn check_safety_of_rvalue_destructor_if_necessary(
      .                   &mut self,
      .                   place_with_id: &PlaceWithHirId<'tcx>,
      .                   span: Span,
      .               ) {
129,666 ( 0.00%)          if let PlaceBase::Rvalue = place_with_id.place.base {
 63,923 ( 0.00%)              if place_with_id.place.projections.is_empty() {
 64,871 ( 0.00%)                  let typ = self.resolve_type(place_with_id.place.ty());
127,764 ( 0.00%)                  let body_id = self.body_id;
255,528 ( 0.01%)                  dropck::check_drop_obligations(self, typ, span, body_id);
      .                       }
      .                   }
      .               }
      .               /// Adds constraints to inference such that `T: 'a` holds (or
      .               /// reports an error if it cannot).
      .               ///
      .               /// # Parameters
      .               ///
-- line 565 ----------------------------------------
-- line 567 ----------------------------------------
      .               /// - `ty`, the type `T`
      .               /// - `region`, the region `'a`
      .               pub fn type_must_outlive(
      .                   &self,
      .                   origin: infer::SubregionOrigin<'tcx>,
      .                   ty: Ty<'tcx>,
      .                   region: ty::Region<'tcx>,
      .               ) {
  2,508 ( 0.00%)          self.infcx.register_region_obligation(
  2,508 ( 0.00%)              self.body_id,
  6,688 ( 0.00%)              RegionObligation { sub_region: region, sup_type: ty, origin },
      .                   );
      .               }
      .           
      .               /// Computes the guarantor for an expression `&base` and then ensures that the lifetime of the
      .               /// resulting pointer is linked to the lifetime of its guarantor (if any).
      .               fn link_addr_of(
      .                   &mut self,
      .                   expr: &hir::Expr<'_>,
      .                   mutability: hir::Mutability,
      .                   base: &hir::Expr<'_>,
      .               ) {
      .                   debug!("link_addr_of(expr={:?}, base={:?})", expr, base);
      .           
  1,210 ( 0.00%)          let cmt = ignore_err!(self.with_mc(|mc| mc.cat_expr(base)));
      .           
      .                   debug!("link_addr_of: cmt={:?}", cmt);
      .           
    330 ( 0.00%)          self.link_region_from_node_type(expr.span, expr.hir_id, mutability, &cmt);
      .               }
      .           
      .               /// Computes the guarantors for any ref bindings in a `let` and
      .               /// then ensures that the lifetime of the resulting pointer is
      .               /// linked to the lifetime of the initialization expression.
      .               fn link_local(&self, local: &hir::Local<'_>) {
      .                   debug!("regionck::for_local()");
    225 ( 0.00%)          let init_expr = match local.init {
      .                       None => {
      .                           return;
      .                       }
      .                       Some(expr) => &*expr,
      .                   };
    600 ( 0.00%)          let discr_cmt = ignore_err!(self.with_mc(|mc| mc.cat_expr(init_expr)));
    480 ( 0.00%)          self.link_pattern(discr_cmt, local.pat);
      .               }
      .           
      .               /// Computes the guarantors for any ref bindings in a match and
      .               /// then ensures that the lifetime of the resulting pointer is
      .               /// linked to the lifetime of its guarantor (if any).
      .               fn link_match(&self, discr: &hir::Expr<'_>, arms: &[hir::Arm<'_>]) {
      .                   debug!("regionck::for_match()");
    630 ( 0.00%)          let discr_cmt = ignore_err!(self.with_mc(|mc| mc.cat_expr(discr)));
      .                   debug!("discr_cmt={:?}", discr_cmt);
      .                   for arm in arms {
    532 ( 0.00%)              self.link_pattern(discr_cmt.clone(), arm.pat);
      .                   }
      .               }
      .           
      .               /// Computes the guarantors for any ref bindings in a match and
      .               /// then ensures that the lifetime of the resulting pointer is
      .               /// linked to the lifetime of its guarantor (if any).
      .               fn link_fn_params(&self, params: &[hir::Param<'_>]) {
      .                   for param in params {
    588 ( 0.00%)              let param_ty = self.node_ty(param.hir_id);
      .                       let param_cmt =
    294 ( 0.00%)                  self.with_mc(|mc| mc.cat_rvalue(param.hir_id, param.pat.span, param_ty));
      .                       debug!("param_ty={:?} param_cmt={:?} param={:?}", param_ty, param_cmt, param);
  1,764 ( 0.00%)              self.link_pattern(param_cmt, param.pat);
      .                   }
      .               }
      .           
      .               /// Link lifetimes of any ref bindings in `root_pat` to the pointers found
      .               /// in the discriminant, if needed.
  2,040 ( 0.00%)      fn link_pattern(&self, discr_cmt: PlaceWithHirId<'tcx>, root_pat: &hir::Pat<'_>) {
      .                   debug!("link_pattern(discr_cmt={:?}, root_pat={:?})", discr_cmt, root_pat);
      .                   ignore_err!(self.with_mc(|mc| {
  1,020 ( 0.00%)              mc.cat_pattern(discr_cmt, root_pat, |sub_cmt, hir::Pat { kind, span, hir_id, .. }| {
      .                           // `ref x` pattern
  1,088 ( 0.00%)                  if let PatKind::Binding(..) = kind {
  1,329 ( 0.00%)                      if let Some(ty::BindByReference(mutbl)) =
  4,368 ( 0.00%)                          mc.typeck_results.extract_binding_mode(self.tcx.sess, *hir_id, *span)
      .                               {
      .                                   self.link_region_from_node_type(*span, *hir_id, mutbl, sub_cmt);
      .                               }
      .                           }
      .                       })
      .                   }));
  2,040 ( 0.00%)      }
      .           
      .               /// Link lifetime of borrowed pointer resulting from autoref to lifetimes in the value being
      .               /// autoref'd.
      .               fn link_autoref(
      .                   &self,
      .                   expr: &hir::Expr<'_>,
      .                   expr_cmt: &PlaceWithHirId<'tcx>,
      .                   autoref: &adjustment::AutoBorrow<'tcx>,
      .               ) {
      .                   debug!("link_autoref(autoref={:?}, expr_cmt={:?})", autoref, expr_cmt);
      .           
  1,264 ( 0.00%)          match *autoref {
  1,264 ( 0.00%)              adjustment::AutoBorrow::Ref(r, m) => {
  6,320 ( 0.00%)                  self.link_region(expr.span, r, ty::BorrowKind::from_mutbl(m.into()), expr_cmt);
      .                       }
      .           
      .                       adjustment::AutoBorrow::RawPtr(_) => {}
      .                   }
      .               }
      .           
      .               /// Like `link_region()`, except that the region is extracted from the type of `id`,
      .               /// which must be some reference (`&T`, `&str`, etc).
-- line 676 ----------------------------------------
-- line 682 ----------------------------------------
      .                   cmt_borrowed: &PlaceWithHirId<'tcx>,
      .               ) {
      .                   debug!(
      .                       "link_region_from_node_type(id={:?}, mutbl={:?}, cmt_borrowed={:?})",
      .                       id, mutbl, cmt_borrowed
      .                   );
      .           
      .                   let rptr_ty = self.resolve_node_type(id);
    382 ( 0.00%)          if let ty::Ref(r, _, _) = rptr_ty.kind() {
      .                       debug!("rptr_ty={}", rptr_ty);
  1,499 ( 0.00%)              self.link_region(span, r, ty::BorrowKind::from_mutbl(mutbl), cmt_borrowed);
      .                   }
      .               }
      .           
      .               /// Informs the inference engine that `borrow_cmt` is being borrowed with
      .               /// kind `borrow_kind` and lifetime `borrow_region`.
      .               /// In order to ensure borrowck is satisfied, this may create constraints
      .               /// between regions, as explained in `link_reborrowed_region()`.
  9,196 ( 0.00%)      fn link_region(
      .                   &self,
      .                   span: Span,
      .                   borrow_region: ty::Region<'tcx>,
      .                   borrow_kind: ty::BorrowKind,
      .                   borrow_place: &PlaceWithHirId<'tcx>,
      .               ) {
  2,508 ( 0.00%)          let origin = infer::DataBorrowed(borrow_place.place.ty(), span);
  5,016 ( 0.00%)          self.type_must_outlive(origin, borrow_place.place.ty(), borrow_region);
      .           
  4,780 ( 0.00%)          for pointer_ty in borrow_place.place.deref_tys() {
      .                       debug!(
      .                           "link_region(borrow_region={:?}, borrow_kind={:?}, pointer_ty={:?})",
      .                           borrow_region, borrow_kind, borrow_place
      .                       );
  1,800 ( 0.00%)              match *pointer_ty.kind() {
      .                           ty::RawPtr(_) => return,
  5,400 ( 0.00%)                  ty::Ref(ref_region, _, ref_mutability) => {
    600 ( 0.00%)                      if self.link_reborrowed_region(span, borrow_region, ref_region, ref_mutability)
      .                               {
      .                                   return;
      .                               }
      .                           }
      .                           _ => assert!(pointer_ty.is_box(), "unexpected built-in deref type {}", pointer_ty),
      .                       }
      .                   }
    606 ( 0.00%)          if let PlaceBase::Upvar(upvar_id) = borrow_place.place.base {
      .                       self.link_upvar_region(span, borrow_region, upvar_id);
      .                   }
  6,688 ( 0.00%)      }
      .           
      .               /// This is the most complicated case: the path being borrowed is
      .               /// itself the referent of a borrowed pointer. Let me give an
      .               /// example fragment of code to make clear(er) the situation:
      .               ///
      .               /// ```ignore (incomplete Rust code)
      .               /// let r: &'a mut T = ...;  // the original reference "r" has lifetime 'a
      .               /// ...
-- line 737 ----------------------------------------
-- line 764 ----------------------------------------
      .               fn link_reborrowed_region(
      .                   &self,
      .                   span: Span,
      .                   borrow_region: ty::Region<'tcx>,
      .                   ref_region: ty::Region<'tcx>,
      .                   ref_mutability: hir::Mutability,
      .               ) -> bool {
      .                   debug!("link_reborrowed_region: {:?} <= {:?}", borrow_region, ref_region);
  3,000 ( 0.00%)          self.sub_regions(infer::Reborrow(span), borrow_region, ref_region);
      .           
      .                   // Decide whether we need to recurse and link any regions within
      .                   // the `ref_cmt`. This is concerned for the case where the value
      .                   // being reborrowed is in fact a borrowed pointer found within
      .                   // another borrowed pointer. For example:
      .                   //
      .                   //    let p: &'b &'a mut T = ...;
      .                   //    ...
-- line 780 ----------------------------------------
-- line 834 ----------------------------------------
      .                   borrow_region: ty::Region<'tcx>,
      .                   upvar_id: ty::UpvarId,
      .               ) {
      .                   debug!("link_upvar_region(borrorw_region={:?}, upvar_id={:?}", borrow_region, upvar_id);
      .                   // A by-reference upvar can't be borrowed for longer than the
      .                   // upvar is borrowed from the environment.
      .                   let closure_local_def_id = upvar_id.closure_expr_id;
      .                   let mut all_captures_are_imm_borrow = true;
      6 ( 0.00%)          for captured_place in self
      .                       .typeck_results
      .                       .borrow()
      .                       .closure_min_captures
      .                       .get(&closure_local_def_id.to_def_id())
      .                       .and_then(|root_var_min_cap| root_var_min_cap.get(&upvar_id.var_path.hir_id))
      .                       .into_iter()
      .                       .flatten()
      .                   {
     30 ( 0.00%)              match captured_place.info.capture_kind {
      .                           ty::UpvarCapture::ByRef(upvar_borrow) => {
      6 ( 0.00%)                      self.sub_regions(
     42 ( 0.00%)                          infer::ReborrowUpvar(span, upvar_id),
      .                                   borrow_region,
      6 ( 0.00%)                          captured_place.region.unwrap(),
      .                               );
     36 ( 0.00%)                      if let ty::ImmBorrow = upvar_borrow {
      .                                   debug!("link_upvar_region: capture by shared ref");
      .                               } else {
      .                                   all_captures_are_imm_borrow = false;
      .                               }
      .                           }
      .                           ty::UpvarCapture::ByValue => {
      .                               all_captures_are_imm_borrow = false;
      .                           }
      .                       }
      .                   }
     12 ( 0.00%)          if all_captures_are_imm_borrow {
      .                       return;
      .                   }
      2 ( 0.00%)          let fn_hir_id = self.tcx.hir().local_def_id_to_hir_id(closure_local_def_id);
      .                   let ty = self.resolve_node_type(fn_hir_id);
      .                   debug!("link_upvar_region: ty={:?}", ty);
      .           
      .                   // A closure capture can't be borrowed for longer than the
      .                   // reference to the closure.
      4 ( 0.00%)          if let ty::Closure(_, substs) = ty.kind() {
     12 ( 0.00%)              match self.infcx.closure_kind(substs) {
      .                           Some(ty::ClosureKind::Fn | ty::ClosureKind::FnMut) => {
      .                               // Region of environment pointer
     14 ( 0.00%)                      let env_region = self.tcx.mk_region(ty::ReFree(ty::FreeRegion {
      2 ( 0.00%)                          scope: upvar_id.closure_expr_id.to_def_id(),
      .                                   bound_region: ty::BrEnv,
      .                               }));
      4 ( 0.00%)                      self.sub_regions(
     18 ( 0.00%)                          infer::ReborrowUpvar(span, upvar_id),
      .                                   borrow_region,
      .                                   env_region,
      .                               );
      .                           }
      .                           Some(ty::ClosureKind::FnOnce) => {}
      .                           None => {
      .                               span_bug!(span, "Have not inferred closure kind before regionck");
      .                           }
-- line 895 ----------------------------------------

523,841 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/regionck.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 108 ----------------------------------------
        .                   suppress_errors: bool,
        .               },
        .           }
        .           
        .           impl RegionckMode {
        .               /// Indicates that the MIR borrowck will repeat these region
        .               /// checks, so we should ignore errors if NLL is (unconditionally)
        .               /// enabled.
      139 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
        .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
        .                   // this always `true` and then proceed to eliminate the dead code.
      139 ( 0.00%)          match tcx.borrowck_mode() {
        .                       // If we're on Migrate mode, report AST region errors
        .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
        .           
        .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
        .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
        .                   }
      278 ( 0.00%)      }
        .           }
        .           
        .           /// This type contains all the things within `InferCtxt` that sit within a
        .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
        .           /// operations are hot enough that we want only one call to `borrow_mut` per
        .           /// call to `start_snapshot` and `rollback_to`.
        .           pub struct InferCtxtInner<'tcx> {
        .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
        .               /// type instantiations (`ty::Infer`) to the actual opaque
        .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
        .               /// opaque type inference variables to their corresponding
        .               /// opaque type.
        .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
        .           }
        .           
        .           impl<'tcx> InferCtxtInner<'tcx> {
   17,325 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
  117,810 ( 0.00%)          InferCtxtInner {
        .                       projection_cache: Default::default(),
        .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
        .                       undo_log: InferCtxtUndoLogs::default(),
        .                       const_unification_storage: ut::UnificationTableStorage::new(),
        .                       int_unification_storage: ut::UnificationTableStorage::new(),
        .                       float_unification_storage: ut::UnificationTableStorage::new(),
   10,395 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
        .                       region_obligations: vec![],
        .                       opaque_types: Default::default(),
        .                       opaque_types_vars: Default::default(),
        .                   }
   20,790 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
        .                   &self.region_obligations
        .               }
        .           
        .               #[inline]
        .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
    1,289 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
  427,747 ( 0.01%)          self.type_variable_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn int_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::IntVid,
        .                       &mut ut::UnificationStorage<ty::IntVid>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
    5,186 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn float_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::ConstVid<'tcx>,
        .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
   11,708 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
   33,180 ( 0.00%)          self.region_constraint_storage
        .                       .as_mut()
        .                       .expect("region constraints already solved")
   27,727 ( 0.00%)              .with_log(&mut self.undo_log)
        .               }
        .           }
        .           
        .           pub struct InferCtxt<'a, 'tcx> {
        .               pub tcx: TyCtxt<'tcx>,
        .           
        .               /// The `DefId` of the item in whose context we are performing inference or typeck.
        .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
        .               /// item we are type-checking, and just consider those names as
        .               /// part of the root universe. So this would only get incremented
        .               /// when we enter into a higher-ranked (`for<..>`) type or trait
        .               /// bound.
        .               universe: Cell<ty::UniverseIndex>,
        .           }
        .           
        .           /// See the `error_reporting` module for more details.
   43,568 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
        .           pub enum ValuePairs<'tcx> {
        .               Types(ExpectedFound<Ty<'tcx>>),
        .               Regions(ExpectedFound<ty::Region<'tcx>>),
        .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
        .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
        .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
        .           }
        .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
        .           pub struct TypeTrace<'tcx> {
        .               cause: ObligationCause<'tcx>,
        .               values: ValuePairs<'tcx>,
        .           }
        .           
        .           /// The origin of a `r1 <= r2` constraint.
        .           ///
        .           /// See `error_reporting` module for more details
   39,534 ( 0.00%)  #[derive(Clone, Debug)]
        .           pub enum SubregionOrigin<'tcx> {
        .               /// Arose from a subtyping relation
    2,429 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
        .           
        .               /// When casting `&'a T` to an `&'b Trait` object,
        .               /// relating `'a` to `'b`
        .               RelateObjectBound(Span),
        .           
        .               /// Some type parameter was instantiated with the given type,
        .               /// and that type must outlive some region.
      177 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
        .           
        .               /// The given region parameter was instantiated with a region
        .               /// that must outlive some other region.
        .               RelateRegionParamBound(Span),
        .           
        .               /// Creating a pointer `b` to contents of another reference
        .               Reborrow(Span),
        .           
        .               /// Creating a pointer `b` to contents of an upvar
        .               ReborrowUpvar(Span, ty::UpvarId),
        .           
        .               /// Data with type `Ty<'tcx>` was borrowed
      154 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
        .           
        .               /// (&'a &'b T) where a >= b
      166 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
        .           
        .               /// Comparing the signature and requirements of an impl method against
        .               /// the containing trait.
        .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
        .           
        .               /// Comparing the signature and requirements of an impl associated type
        .               /// against the containing trait
        .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
        .               defining_use_anchor: Option<LocalDefId>,
        .           }
        .           
        .           pub trait TyCtxtInferExt<'tcx> {
        .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
        .           }
        .           
        .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
    3,465 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
   10,395 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
    3,465 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> InferCtxtBuilder<'tcx> {
        .               /// Used only by `rustc_typeck` during body type-checking/inference,
        .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
        .               /// Will also change the scope for opaque type defining use checks to the given owner.
    2,988 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
    3,652 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
    1,660 ( 0.00%)          self.with_opaque_type_inference(table_owner)
    2,324 ( 0.00%)      }
        .           
        .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
        .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
        .               ///
        .               /// It is only meant to be called in two places, for typeck
        .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
        .               /// in mir borrowck.
      330 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
      165 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
      994 ( 0.00%)          self
      495 ( 0.00%)      }
        .           
        .               /// Given a canonical value `C` as a starting point, create an
        .               /// inference context that contains each of the bound values
        .               /// within instantiated as a fresh variable. The `f` closure is
        .               /// invoked with the new infcx, along with the instantiated value
        .               /// `V` and a substitution `S`. This substitution `S` maps from
        .               /// the bound values in `C` to their instantiated values in `V`
        .               /// (in other words, `S(C) = V`).
    5,715 ( 0.00%)      pub fn enter_with_canonical<T, R>(
        .                   &mut self,
        .                   span: Span,
        .                   canonical: &Canonical<'tcx, T>,
        .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
        .               ) -> R
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.enter(|infcx| {
    8,524 ( 0.00%)              let (value, subst) =
      531 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
   12,695 ( 0.00%)              f(infcx, value, subst)
        .                   })
    6,196 ( 0.00%)      }
        .           
   18,208 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
    9,717 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
        .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
  147,892 ( 0.00%)          f(InferCtxt {
        .                       tcx,
        .                       defining_use_anchor,
        .                       in_progress_typeck_results,
    3,465 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
        .                       lexical_region_resolutions: RefCell::new(None),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        .                       reported_trait_errors: Default::default(),
        .                       reported_closure_mismatch: Default::default(),
        .                       tainted_by_errors_flag: Cell::new(false),
    3,465 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
        .                       in_snapshot: Cell::new(false),
        .                       skip_leak_check: Cell::new(false),
        .                       universe: Cell::new(ty::UniverseIndex::ROOT),
        .                   })
   19,550 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx, T> InferOk<'tcx, T> {
        .               pub fn unit(self) -> InferOk<'tcx, ()> {
        .                   InferOk { value: (), obligations: self.obligations }
        .               }
        .           
        .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
        .               pub fn into_value_registering_obligations(
        .                   self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
        .               ) -> T {
       54 ( 0.00%)          let InferOk { value, obligations } = self;
      236 ( 0.00%)          for obligation in obligations {
        .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
        .                   }
        .                   value
        .               }
        .           }
        .           
        .           impl<'tcx> InferOk<'tcx, ()> {
   23,624 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
   94,496 ( 0.00%)          self.obligations
   23,624 ( 0.00%)      }
        .           }
        .           
        .           #[must_use = "once you start a snapshot, you should always consume it"]
        .           pub struct CombinedSnapshot<'a, 'tcx> {
        .               undo_snapshot: Snapshot<'tcx>,
        .               region_constraints_snapshot: RegionSnapshot,
        .               universe: ty::UniverseIndex,
        .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
        .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
        .                   debug!("canonical consts: {:?}", &canonical.value);
        .           
        .                   self.tcx.try_unify_abstract_consts(canonical.value)
        .               }
        .           
        .               pub fn is_in_snapshot(&self) -> bool {
        .                   self.in_snapshot.get()
   55,295 ( 0.00%)      }
        .           
  215,672 ( 0.01%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
  242,631 ( 0.01%)          t.fold_with(&mut self.freshener())
  242,631 ( 0.01%)      }
        .           
        .               /// Returns the origin of the type variable identified by `vid`, or `None`
        .               /// if this is not a type variable.
        .               ///
        .               /// No attempt is made to resolve `ty`.
      114 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
      228 ( 0.00%)          match *ty.kind() {
       54 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
      216 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
        .                       }
        3 ( 0.00%)              _ => None,
        .                   }
      228 ( 0.00%)      }
        .           
   26,959 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, false)
   26,959 ( 0.00%)      }
        .           
        .               /// Like `freshener`, but does not replace `'static` regions.
  148,783 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, true)
  148,783 ( 0.00%)      }
        .           
      624 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
      312 ( 0.00%)          let mut inner = self.inner.borrow_mut();
      312 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
        .                       .type_variables()
        .                       .unsolved_variables()
        .                       .into_iter()
      108 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
        .                       .collect();
        .                   vars.extend(
        .                       (0..inner.int_unification_table().len())
        .                           .map(|i| ty::IntVid { index: i as u32 })
      124 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
        3 ( 0.00%)                  .map(|v| self.tcx.mk_int_var(v)),
        .                   );
        .                   vars.extend(
        .                       (0..inner.float_unification_table().len())
        .                           .map(|i| ty::FloatVid { index: i as u32 })
        .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
        .                           .map(|v| self.tcx.mk_float_var(v)),
        .                   );
        .                   vars
    1,092 ( 0.00%)      }
        .           
   95,488 ( 0.00%)      fn combine_fields(
        .                   &'a self,
        .                   trace: TypeTrace<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .               ) -> CombineFields<'a, 'tcx> {
  382,040 ( 0.01%)          CombineFields {
        .                       infcx: self,
  955,100 ( 0.02%)              trace,
        .                       cause: None,
        .                       param_env,
        .                       obligations: PredicateObligations::new(),
        .                   }
   95,488 ( 0.00%)      }
        .           
        .               /// Clear the "currently in a snapshot" flag, invoke the closure,
        .               /// then restore the flag to its original value. This flag is a
        .               /// debugging measure designed to detect cases where we start a
        .               /// snapshot, create type variables, and register obligations
        .               /// which may involve those type variables in the fulfillment cx,
        .               /// potentially leaving "dangling type variables" behind.
        .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 760 ----------------------------------------
        .               /// before we return, this is not a problem, as there won't be any
        .               /// escaping obligations in the main cx. In those cases, you can
        .               /// use this function.
        .               pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
        .               where
        .                   F: FnOnce(&Self) -> R,
        .               {
        .                   let flag = self.in_snapshot.replace(false);
   61,374 ( 0.00%)          let result = func(self);
        .                   self.in_snapshot.set(flag);
        .                   result
        .               }
        .           
  520,044 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
        .                   debug!("start_snapshot()");
        .           
        .                   let in_snapshot = self.in_snapshot.replace(true);
        .           
        .                   let mut inner = self.inner.borrow_mut();
        .           
1,560,132 ( 0.04%)          CombinedSnapshot {
        .                       undo_snapshot: inner.undo_log.start_snapshot(),
        .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
        .                       universe: self.universe(),
        .                       was_in_snapshot: in_snapshot,
        .                       // Borrow typeck results "in progress" (i.e., during typeck)
        .                       // to ban writes from within a snapshot to them.
  260,022 ( 0.01%)              _in_progress_typeck_results: self
        .                           .in_progress_typeck_results
        .                           .map(|typeck_results| typeck_results.borrow()),
        .                   }
1,040,088 ( 0.03%)      }
        .           
  800,294 ( 0.02%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
   72,754 ( 0.00%)              undo_snapshot,
   72,754 ( 0.00%)              region_constraints_snapshot,
   72,754 ( 0.00%)              universe,
   72,754 ( 0.00%)              was_in_snapshot,
  145,508 ( 0.00%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .                   self.universe.set(universe);
        .           
        .                   let mut inner = self.inner.borrow_mut();
   72,754 ( 0.00%)          inner.rollback_to(undo_snapshot);
        .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
        .               }
        .           
2,809,020 ( 0.07%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
  187,268 ( 0.00%)              undo_snapshot,
        .                       region_constraints_snapshot: _,
        .                       universe: _,
  187,268 ( 0.00%)              was_in_snapshot,
  374,536 ( 0.01%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .           
        .                   self.inner.borrow_mut().commit(undo_snapshot);
        .               }
        .           
        .               /// Executes `f` and commit the bindings.
   19,552 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
   24,200 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
    2,200 ( 0.00%)          let snapshot = self.start_snapshot();
    7,523 ( 0.00%)          let r = f(&snapshot);
   15,400 ( 0.00%)          self.commit_from(snapshot);
   13,864 ( 0.00%)          r
        .               }
        .           
        .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
1,010,857 ( 0.03%)      #[instrument(skip(self, f), level = "debug")]
1,251,082 ( 0.03%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
        .               {
  235,236 ( 0.01%)          let snapshot = self.start_snapshot();
  577,343 ( 0.01%)          let r = f(&snapshot);
        .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
  279,821 ( 0.01%)          match r {
        .                       Ok(_) => {
1,297,869 ( 0.03%)                  self.commit_from(snapshot);
        .                       }
        .                       Err(_) => {
  263,978 ( 0.01%)                  self.rollback_to("commit_if_ok -- error", snapshot);
        .                       }
        .                   }
1,427,018 ( 0.04%)          r
        .               }
        .           
        .               /// Execute `f` then unroll any bindings it creates.
  302,309 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
  361,385 ( 0.01%)      pub fn probe<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
   72,481 ( 0.00%)          let snapshot = self.start_snapshot();
  191,352 ( 0.00%)          let r = f(&snapshot);
  417,314 ( 0.01%)          self.rollback_to("probe", snapshot);
  235,153 ( 0.01%)          r
        .               }
        .           
        .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
        .               #[instrument(skip(self, f), level = "debug")]
        .               pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
-- line 875 ----------------------------------------
-- line 884 ----------------------------------------
        .                   r
        .               }
        .           
        .               /// Scan the constraints produced since `snapshot` began and returns:
        .               ///
        .               /// - `None` -- if none of them involve "region outlives" constraints
        .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
        .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
    2,642 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
        .                   &self,
        .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
        .               ) -> Option<bool> {
    5,284 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
        .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
    3,963 ( 0.00%)      }
        .           
        6 ( 0.00%)      pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
       12 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
        9 ( 0.00%)      }
        .           
      240 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
      180 ( 0.00%)      }
        .           
    1,524 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
    1,143 ( 0.00%)      }
        .           
   10,520 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               pub fn sub_regions(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   b: ty::Region<'tcx>,
        .               ) {
    9,468 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
        .               }
        .           
        .               /// Require that the region `r` be equal to one of the regions in
        .               /// the set `regions`.
       35 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               pub fn member_constraint(
        .                   &self,
        .                   opaque_type_def_id: DefId,
        .                   definition_span: Span,
        .                   hidden_ty: Ty<'tcx>,
        .                   region: ty::Region<'tcx>,
        .                   in_regions: &Lrc<Vec<ty::Region<'tcx>>>,
        .               ) {
       35 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().member_constraint(
        .                       opaque_type_def_id,
        .                       definition_span,
        .                       hidden_ty,
        .                       region,
        .                       in_regions,
        .                   );
        .               }
        .           
-- line 961 ----------------------------------------
-- line 969 ----------------------------------------
        .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
        .               /// actually requiring `a <: b`. This is of course a valid coercion,
        .               /// but it's not as flexible as `FnCtxt::coerce` would be.
        .               ///
        .               /// (We may refactor this in the future, but there are a number of
        .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
        .               /// records adjustments that are required on the HIR in order to perform
        .               /// the coercion, and we don't currently have a way to manage that.)
        3 ( 0.00%)      pub fn coerce_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolyCoercePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
        2 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
        .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
        .                       a: p.a,
        .                       b: p.b,
        .                   });
        5 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
        4 ( 0.00%)      }
        .           
      696 ( 0.00%)      pub fn subtype_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolySubtypePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
        .                   // Check for two unresolved inference variables, in which case we can
        .                   // make no progress. This is partly a micro-optimization, but it's
        .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
        .                   // earlier that they are sub-unified).
        .                   //
        .                   // Note that we can just skip the binders here because
        .                   // type variables can't (at present, at
        .                   // least) capture any of the things bound by this binder.
        .                   //
        .                   // Note that this sub here is not just for diagnostics - it has semantic
        .                   // effects as well.
       58 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
       58 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
      336 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
       72 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
        .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
       72 ( 0.00%)                  return None;
        .                       }
        .                       _ => {}
        .                   }
        .           
        .                   Some(self.commit_if_ok(|_snapshot| {
       22 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .           
       44 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
        .           
        .                       Ok(ok.unit())
        .                   }))
      522 ( 0.00%)      }
        .           
    2,088 ( 0.00%)      pub fn region_outlives_predicate(
        .                   &self,
        .                   cause: &traits::ObligationCause<'tcx>,
        .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
        .               ) -> UnitResult<'tcx> {
        .                   self.commit_if_ok(|_snapshot| {
        .                       let ty::OutlivesPredicate(r_a, r_b) =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
        .                           RelateRegionParamBound(cause.span)
        .                       });
    1,740 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
        .                       Ok(())
        .                   })
    1,392 ( 0.00%)      }
        .           
        .               /// Number of type variables created so far.
       17 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
        .                   self.inner.borrow_mut().type_variables().num_vars()
       34 ( 0.00%)      }
        .           
   47,598 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
  237,990 ( 0.01%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
   71,397 ( 0.00%)      }
        .           
   47,262 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
  166,425 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
   70,893 ( 0.00%)      }
        .           
      158 ( 0.00%)      pub fn next_ty_var_in_universe(
        .                   &self,
        .                   origin: TypeVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> Ty<'tcx> {
      869 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
       79 ( 0.00%)          self.tcx.mk_ty_var(vid)
      237 ( 0.00%)      }
        .           
        .               pub fn next_const_var(
        .                   &self,
        .                   ty: Ty<'tcx>,
        .                   origin: ConstVariableOrigin,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
        .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
        .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
        .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                       origin,
        .                       val: ConstVariableValue::Unknown { universe: self.universe() },
        .                   })
        .               }
        .           
        .               fn next_int_var_id(&self) -> IntVid {
      230 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
        .               }
        .           
      138 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_int_var(self.next_int_var_id())
      184 ( 0.00%)      }
        .           
        .               fn next_float_var_id(&self) -> FloatVid {
        .                   self.inner.borrow_mut().float_unification_table().new_key(None)
        .               }
        .           
        .               pub fn next_float_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_float_var(self.next_float_var_id())
        .               }
        .           
        .               /// Creates a fresh region variable with the next available index.
        .               /// The variable will be created in the maximum universe created
        .               /// thus far, allowing it to name any region created thus far.
    2,581 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
   63,846 ( 0.00%)          self.next_region_var_in_universe(origin, self.universe())
    5,162 ( 0.00%)      }
        .           
        .               /// Creates a fresh region variable with the next available index
        .               /// in the given universe; typically, you can use
        .               /// `next_region_var` and just use the maximal universe.
   26,018 ( 0.00%)      pub fn next_region_var_in_universe(
        .                   &self,
        .                   origin: RegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
        .                   let region_var =
  169,117 ( 0.00%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
   65,045 ( 0.00%)          self.tcx.mk_region(ty::ReVar(region_var))
   39,027 ( 0.00%)      }
        .           
        .               /// Return the universe that the region `r` was created in.  For
        .               /// most regions (e.g., `'static`, named regions from the user,
        .               /// etc) this is the root universe U0. For inference variables or
        .               /// placeholders, however, it will return the universe which which
        .               /// they are associated.
    2,100 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
        .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
    3,150 ( 0.00%)      }
        .           
        .               /// Number of region variables created so far.
    1,302 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
        .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
    1,953 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
    4,750 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
        .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
    9,500 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
       38 ( 0.00%)      pub fn next_nll_region_var_in_universe(
        .                   &self,
        .                   origin: NllRegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
      266 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
       76 ( 0.00%)      }
        .           
   80,704 ( 0.00%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
   43,568 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
        .                           // Create a region inference variable for the given
        .                           // region parameter definition.
    3,436 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
        .                       }
        .                       GenericParamDefKind::Type { .. } => {
        .                           // Create a type inference variable for the given
        .                           // type parameter definition. The substitutions are
        .                           // for actual parameters that may be referred to by
        .                           // the default of this type parameter, if it exists.
        .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
        .                           // used in a path such as `Foo::<T, U>::new()` will
        .                           // use an inference variable for `C` with `[T, U]`
        .                           // as the substitutions for the default, `(T, U)`.
   25,820 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
        .                               self.universe(),
   32,275 ( 0.00%)                      TypeVariableOrigin {
        .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
    6,455 ( 0.00%)                              param.name,
    6,455 ( 0.00%)                              Some(param.def_id),
        .                                   ),
        .                                   span,
        .                               },
        .                           );
        .           
    6,455 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
        .                       }
        .                       GenericParamDefKind::Const { .. } => {
        .                           let origin = ConstVariableOrigin {
        .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
        .                                   param.name,
        .                                   param.def_id,
        .                               ),
        .                               span,
        .                           };
        .                           let const_var_id =
    2,167 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                                   origin,
        .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
        .                               });
      197 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
        .                       }
        .                   }
    1,576 ( 0.00%)      }
        .           
        .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
        .               /// type/region parameter to a fresh inference variable.
   16,053 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
   80,681 ( 0.00%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
   10,702 ( 0.00%)      }
        .           
        .               /// Returns `true` if errors have been reported since this infcx was
        .               /// created. This is sometimes used as a heuristic to skip
        .               /// reporting errors that often occur as a result of earlier
        .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
        .               /// inference variables, regionck errors).
      420 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
        .                   debug!(
        .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
        .                        tainted_by_errors_flag={})",
        .                       self.tcx.sess.err_count(),
        .                       self.err_count_on_creation,
        .                       self.tainted_by_errors_flag.get()
        .                   );
        .           
    9,666 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
        .                       return true; // errors reported since this infcx was made
        .                   }
        .                   self.tainted_by_errors_flag.get()
      630 ( 0.00%)      }
        .           
        .               /// Set the "tainted by errors" flag to true. We call this when we
        .               /// observe an error from a prior pass.
        .               pub fn set_tainted_by_errors(&self) {
        .                   debug!("set_tainted_by_errors()");
        .                   self.tainted_by_errors_flag.set(true)
        .               }
        .           
        .               /// Process the region constraints and return any any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
    9,562 ( 0.00%)      pub fn resolve_regions(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) -> Vec<RegionResolutionError<'tcx>> {
   25,954 ( 0.00%)          let (var_infos, data) = {
        .                       let mut inner = self.inner.borrow_mut();
        .                       let inner = &mut *inner;
    1,366 ( 0.00%)              assert!(
    4,098 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
        .                           "region_obligations not empty: {:#?}",
        .                           inner.region_obligations
        .                       );
        .                       inner
        .                           .region_constraint_storage
        .                           .take()
        .                           .expect("regions already resolved")
        .                           .with_log(&mut inner.undo_log)
        .                           .into_infos_and_data()
    1,366 ( 0.00%)          };
        .           
        .                   let region_rels =
    1,366 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
        .           
   12,294 ( 0.00%)          let (lexical_region_resolutions, errors) =
   32,784 ( 0.00%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
        .           
    5,464 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
    1,366 ( 0.00%)          assert!(old_value.is_none());
        .           
        .                   errors
   12,294 ( 0.00%)      }
        .           
        .               /// Process the region constraints and report any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   13,660 ( 0.00%)      pub fn resolve_regions_and_report_errors(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) {
    2,732 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
        .           
    4,098 ( 0.00%)          if !self.is_tainted_by_errors() {
        .                       // As a heuristic, just skip reporting region errors
        .                       // altogether if other errors have been reported while
        .                       // this infcx was in use.  This is totally hokey but
        .                       // otherwise we have a hard time separating legit region
        .                       // errors from silly ones.
    2,732 ( 0.00%)              self.report_region_errors(&errors);
        .                   }
    6,830 ( 0.00%)      }
        .           
        .               /// Obtains (and clears) the current set of region
        .               /// constraints. The inference context is still usable: further
        .               /// unifications will simply add new constraints.
        .               ///
        .               /// This method is not meant to be used with normal lexical region
        .               /// resolution. Rather, it is used in the NLL mode as a kind of
        .               /// interim hack: basically we run normal type-check and generate
        .               /// region constraints as normal, but then we take them and
        .               /// translate them into the form that the NLL solver
        .               /// understands. See the NLL module for mode details.
       42 ( 0.00%)      pub fn take_and_reset_region_constraints(&self) -> RegionConstraintData<'tcx> {
       14 ( 0.00%)          assert!(
        .                       self.inner.borrow().region_obligations.is_empty(),
        .                       "region_obligations not empty: {:#?}",
        .                       self.inner.borrow().region_obligations
        .                   );
        .           
       56 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().take_and_reset_data()
       70 ( 0.00%)      }
        .           
        .               /// Gives temporary access to the region constraint data.
        .               pub fn with_region_constraints<R>(
        .                   &self,
        .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
        .               ) -> R {
        .                   let mut inner = self.inner.borrow_mut();
    2,868 ( 0.00%)          op(inner.unwrap_region_constraints().data())
        .               }
        .           
        .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
        .                   let mut inner = self.inner.borrow_mut();
        .                   let inner = &mut *inner;
        .                   inner
        .                       .region_constraint_storage
        .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       .var_origin(vid)
        .               }
        .           
        .               /// Takes ownership of the list of variable regions. This implies
        .               /// that all the region constraints have already been taken, and
        .               /// hence that `resolve_regions_and_report_errors` can never be
        .               /// called. This is used only during NLL processing to "hand off" ownership
        .               /// of the set of region variables into the NLL region context.
      790 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
        .                   let mut inner = self.inner.borrow_mut();
    3,002 ( 0.00%)          let (var_infos, data) = inner
        .                       .region_constraint_storage
        .                       .take()
        .                       .expect("regions already resolved")
        .                       .with_log(&mut inner.undo_log)
      158 ( 0.00%)              .into_infos_and_data();
      158 ( 0.00%)          assert!(data.is_empty());
        .                   var_infos
    1,264 ( 0.00%)      }
        .           
        .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
        .                   self.resolve_vars_if_possible(t).to_string()
        .               }
        .           
        .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
        .               /// universe index of `TyVar(vid)`.
    1,240 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
        .                   use self::type_variable::TypeVariableValue;
        .           
    3,720 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
        .                       TypeVariableValue::Known { value } => Ok(value),
        .                       TypeVariableValue::Unknown { universe } => Err(universe),
        .                   }
    4,340 ( 0.00%)      }
        .           
        .               /// Resolve any type variables found in `value` -- but only one
        .               /// level.  So, if the variable `?X` is bound to some type
        .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
        .               /// itself be bound to a type).
        .               ///
        .               /// Useful when you only need to inspect the outermost level of
        .               /// the type and don't care about nested types (or perhaps you
        .               /// will be resolving them as well, e.g. in a loop).
        .               pub fn shallow_resolve<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  466,540 ( 0.01%)          value.fold_with(&mut ShallowResolver { infcx: self })
        .               }
        .           
    2,676 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
        .                   self.inner.borrow_mut().type_variables().root_var(var)
    4,014 ( 0.00%)      }
        .           
        .               /// Where possible, replaces type/const variables in
        .               /// `value` with their final value. Note that region variables
        .               /// are unaffected. If a type/const variable has not been unified, it
        .               /// is left as is. This is an idempotent operation that does
        .               /// not affect inference state in any way and so you can do it
        .               /// at will.
      820 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  283,599 ( 0.01%)          if !value.needs_infer() {
  608,219 ( 0.02%)              return value; // Avoid duplicated subst-folding.
        .                   }
   43,096 ( 0.00%)          let mut r = resolve::OpportunisticVarResolver::new(self);
   47,551 ( 0.00%)          value.fold_with(&mut r)
    1,025 ( 0.00%)      }
        .           
        .               /// Returns the first unresolved variable contained in `T`. In the
        .               /// process of visiting `T`, this will resolve (where possible)
        .               /// type variables in `T`, but it never constructs the final,
        .               /// resolved type, so it's more efficient than
        .               /// `resolve_vars_if_possible()`.
        .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
        .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
        .                   expected: &'tcx ty::Const<'tcx>,
        .                   actual: &'tcx ty::Const<'tcx>,
        .                   err: TypeError<'tcx>,
        .               ) -> DiagnosticBuilder<'tcx> {
        .                   let trace = TypeTrace::consts(cause, true, expected, actual);
        .                   self.report_and_explain_type_error(trace, &err)
        .               }
        .           
   92,628 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
        .                   &self,
        .                   span: Span,
        .                   lbrct: LateBoundRegionConversionTime,
        .                   value: ty::Binder<'tcx, T>,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let fld_r =
   22,185 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
        .                   let fld_t = |_| {
        .                       self.next_ty_var(TypeVariableOrigin {
        .                           kind: TypeVariableOriginKind::MiscVariable,
        .                           span,
        .                       })
        .                   };
        .                   let fld_c = |_, ty| {
        .                       self.next_const_var(
        .                           ty,
        .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
        .                       )
        .                   };
  385,112 ( 0.01%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
   61,752 ( 0.00%)      }
        .           
        .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
      488 ( 0.00%)      pub fn verify_generic_bound(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   kind: GenericKind<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   bound: VerifyBound<'tcx>,
        .               ) {
        .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
        .           
      183 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
    1,037 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
      427 ( 0.00%)      }
        .           
        .               /// Obtains the latest type of the given closure; this may be a
        .               /// closure in the current function, in which case its
        .               /// `ClosureKind` may not yet be known.
      370 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
      740 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
        .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
      555 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
        .               }
        .           
        .               /// Clears the selection, evaluation, and projection caches. This is useful when
        .               /// repeatedly attempting to select an `Obligation` while changing only
        .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
        .               pub fn clear_caches(&self) {
        .                   self.selection_cache.clear();
        .                   self.evaluation_cache.clear();
        .                   self.inner.borrow_mut().projection_cache().clear();
        .               }
        .           
        .               pub fn universe(&self) -> ty::UniverseIndex {
  585,065 ( 0.01%)          self.universe.get()
  271,465 ( 0.01%)      }
        .           
        .               /// Creates and return a fresh universe that extends all previous
        .               /// universes. Updates `self.universe` to that new universe.
       52 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
       52 ( 0.00%)          let u = self.universe.get().next_universe();
        .                   self.universe.set(u);
        .                   u
       52 ( 0.00%)      }
        .           
        .               /// Resolves and evaluates a constant.
        .               ///
        .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
        .               /// substitutions and environment are used to resolve the constant. Alternatively if the
        .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
        .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
        .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
-- line 1576 ----------------------------------------
-- line 1606 ----------------------------------------
        .                   // variables, thus we don't need to substitute back the original values.
        .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
        .               }
        .           
        .               /// If `typ` is a type variable of some kind, resolve it one level
        .               /// (but do not resolve types found in the result). If `typ` is
        .               /// not a type variable, just return it unmodified.
        .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
1,929,912 ( 0.05%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
  619,240 ( 0.02%)          match *typ.kind() {
        .                       ty::Infer(ty::TyVar(v)) => {
        .                           // Not entirely obvious: if `typ` is a type variable,
        .                           // it can be resolved to an int/float variable, which
        .                           // can then be recursively resolved, hence the
        .                           // recursion. Note though that we prevent type
        .                           // variables from unifying to other type variables
        .                           // directly (though they may be embedded
        .                           // structurally), and we prevent cycles in any case,
        .                           // so this recursion should always be of very limited
        .                           // depth.
        .                           //
        .                           // Note: if these two lines are combined into one we get
        .                           // dynamic borrow errors on `self.inner`.
  136,580 ( 0.00%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
        .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
        .                       }
        .           
    3,752 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .int_unification_table()
        .                           .probe_value(v)
    1,224 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       ty::Infer(ty::FloatVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .float_unification_table()
        .                           .probe_value(v)
        .                           .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       _ => typ,
        .                   }
2,171,151 ( 0.06%)      }
        .           
        .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
        .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
        .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
        .               ///
        .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
        .               /// inlined, despite being large, because it has only two call sites that
        .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
        .               #[inline(always)]
        .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
        .                   match infer_var {
        .                       TyOrConstInferVar::Ty(v) => {
        .                           use self::type_variable::TypeVariableValue;
        .           
        .                           // If `inlined_probe` returns a `Known` value, it never equals
        .                           // `ty::Infer(ty::TyVar(v))`.
   83,475 ( 0.00%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
        .                               TypeVariableValue::Unknown { .. } => false,
        .                               TypeVariableValue::Known { .. } => true,
        .                           }
        .                       }
        .           
        .                       TyOrConstInferVar::TyInt(v) => {
        .                           // If `inlined_probe_value` returns a value it's always a
        .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
        .                           // `ty::Infer(_)`.
    2,506 ( 0.00%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
        .                       }
        .           
        .                       TyOrConstInferVar::TyFloat(v) => {
        .                           // If `probe_value` returns a value it's always a
        .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
        .                           //
        .                           // Not `inlined_probe_value(v)` because this call site is colder.
        .                           self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
-- line 1688 ----------------------------------------
-- line 1716 ----------------------------------------
        .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
        .               Const(ConstVid<'tcx>),
        .           }
        .           
        .           impl<'tcx> TyOrConstInferVar<'tcx> {
        .               /// Tries to extract an inference variable from a type or a constant, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
    1,348 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
        .                   match arg.unpack() {
        .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
        .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
        .                       GenericArgKind::Lifetime(_) => None,
        .                   }
    1,348 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a type, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
       72 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
   12,730 ( 0.00%)          match *ty.kind() {
    2,790 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
       50 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
        .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
        .                       _ => None,
        .                   }
       72 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a constant, returns `None`
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
        .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
        .                   match ct.val {
        .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
        .                       _ => None,
        .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        .                   self.infcx.tcx
        .               }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
  454,612 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
        .               }
        .           
    1,320 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    1,202 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
    1,355 ( 0.00%)              self.infcx
        .                           .inner
        .                           .borrow_mut()
        .                           .const_unification_table()
      813 ( 0.00%)                  .probe_value(*vid)
        .                           .val
        .                           .known()
        .                           .unwrap_or(ct)
        .                   } else {
        .                       ct
        .                   }
    1,650 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeTrace<'tcx> {
        .               pub fn span(&self) -> Span {
        6 ( 0.00%)          self.cause.span
        .               }
        .           
        .               pub fn types(
        .                   cause: &ObligationCause<'tcx>,
        .                   a_is_expected: bool,
        .                   a: Ty<'tcx>,
        .                   b: Ty<'tcx>,
        .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
        .                   b: &'tcx ty::Const<'tcx>,
        .               ) -> TypeTrace<'tcx> {
        .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
        .               }
        .           }
        .           
        .           impl<'tcx> SubregionOrigin<'tcx> {
        .               pub fn span(&self) -> Span {
       15 ( 0.00%)          match *self {
        3 ( 0.00%)              Subtype(ref a) => a.span(),
        .                       RelateObjectBound(a) => a,
        .                       RelateParamBound(a, ..) => a,
        .                       RelateRegionParamBound(a) => a,
        .                       Reborrow(a) => a,
        .                       ReborrowUpvar(a, _) => a,
        .                       DataBorrowed(_, a) => a,
        .                       ReferenceOutlivesReferent(_, a) => a,
        .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
        .                       CompareImplTypeObligation { span, .. } => span,
        .                   }
        .               }
        .           
        .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
        .               where
        .                   F: FnOnce() -> Self,
        .               {
    4,539 ( 0.00%)          match *cause.code() {
    1,058 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
    5,290 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
        .                       }
        .           
        .                       traits::ObligationCauseCode::CompareImplMethodObligation {
        .                           impl_item_def_id,
        .                           trait_item_def_id,
        .                       } => SubregionOrigin::CompareImplMethodObligation {
        .                           span: cause.span,
        .                           impl_item_def_id,
-- line 1836 ----------------------------------------

  807,605 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/memory.rs
--------------------------------------------------------------------------------
Ir                 

-- line 20 ----------------------------------------
        .           use rustc_target::abi::{Align, HasDataLayout, Size, TargetDataLayout};
        .           
        .           use super::{
        .               alloc_range, AllocId, AllocMap, AllocRange, Allocation, CheckInAllocMsg, GlobalAlloc,
        .               InterpResult, Machine, MayLeak, Pointer, PointerArithmetic, Provenance, Scalar,
        .               ScalarMaybeUninit,
        .           };
        .           
   50,480 ( 0.00%)  #[derive(Debug, PartialEq, Copy, Clone)]
        .           pub enum MemoryKind<T> {
        .               /// Stack memory. Error if deallocated except during a stack pop.
        .               Stack,
        .               /// Memory allocated by `caller_location` intrinsic. Error if ever deallocated.
        .               CallerLocation,
        .               /// Additional memory kinds a machine wishes to distinguish from the builtin ones.
        .               Machine(T),
        .           }
-- line 36 ----------------------------------------
-- line 114 ----------------------------------------
        .           
        .               /// Lets us implement `HasDataLayout`, which is awfully convenient.
        .               pub tcx: TyCtxt<'tcx>,
        .           }
        .           
        .           impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> HasDataLayout for Memory<'mir, 'tcx, M> {
        .               #[inline]
        .               fn data_layout(&self) -> &TargetDataLayout {
   41,726 ( 0.00%)          &self.tcx.data_layout
        .               }
        .           }
        .           
        .           /// A reference to some allocation that was already bounds-checked for the given region
        .           /// and had the on-access machine hooks run.
        .           #[derive(Copy, Clone)]
        .           pub struct AllocRef<'a, 'tcx, Tag, Extra> {
        .               alloc: &'a Allocation<Tag, Extra>,
-- line 130 ----------------------------------------
-- line 138 ----------------------------------------
        .               alloc: &'a mut Allocation<Tag, Extra>,
        .               range: AllocRange,
        .               tcx: TyCtxt<'tcx>,
        .               alloc_id: AllocId,
        .           }
        .           
        .           impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {
        .               pub fn new(tcx: TyCtxt<'tcx>, extra: M::MemoryExtra) -> Self {
      221 ( 0.00%)          Memory {
        .                       alloc_map: M::MemoryMap::default(),
        .                       extra_fn_ptr_map: FxHashMap::default(),
        .                       dead_alloc_map: FxHashMap::default(),
        .                       extra,
        .                       tcx,
        .                   }
        .               }
        .           
-- line 154 ----------------------------------------
-- line 157 ----------------------------------------
        .               /// for any other pointers, nor for TLS statics.
        .               ///
        .               /// Using the resulting pointer represents a *direct* access to that memory
        .               /// (e.g. by directly using a `static`),
        .               /// as opposed to access through a pointer that was created by the program.
        .               ///
        .               /// This function can fail only if `ptr` points to an `extern static`.
        .               #[inline]
    7,128 ( 0.00%)      pub fn global_base_pointer(
        .                   &self,
        .                   ptr: Pointer<AllocId>,
        .               ) -> InterpResult<'tcx, Pointer<M::PointerTag>> {
        .                   // We know `offset` is relative to the allocation, so we can use `into_parts`.
        .                   let (alloc_id, offset) = ptr.into_parts();
        .                   // We need to handle `extern static`.
    2,376 ( 0.00%)          match self.tcx.get_global_alloc(alloc_id) {
        .                       Some(GlobalAlloc::Static(def_id)) if self.tcx.is_thread_local_static(def_id) => {
        .                           bug!("global memory cannot point to thread-local static")
        .                       }
        .                       Some(GlobalAlloc::Static(def_id)) if self.tcx.is_foreign_item(def_id) => {
        .                           return M::extern_static_base_pointer(self, def_id);
        .                       }
        .                       _ => {}
        .                   }
        .                   // And we need to get the tag.
    1,782 ( 0.00%)          Ok(M::tag_alloc_base_pointer(self, Pointer::new(alloc_id, offset)))
    4,752 ( 0.00%)      }
        .           
        .               pub fn create_fn_alloc(
        .                   &mut self,
        .                   fn_val: FnVal<'tcx, M::ExtraFnVal>,
        .               ) -> Pointer<M::PointerTag> {
        .                   let id = match fn_val {
        .                       FnVal::Instance(instance) => self.tcx.create_fn_alloc(instance),
        .                       FnVal::Other(extra) => {
-- line 191 ----------------------------------------
-- line 196 ----------------------------------------
        .                           id
        .                       }
        .                   };
        .                   // Functions are global allocations, so make sure we get the right base pointer.
        .                   // We know this is not an `extern static` so this cannot fail.
        .                   self.global_base_pointer(Pointer::from(id)).unwrap()
        .               }
        .           
  454,590 ( 0.01%)      pub fn allocate(
        .                   &mut self,
        .                   size: Size,
        .                   align: Align,
        .                   kind: MemoryKind<M::MemoryKind>,
        .               ) -> InterpResult<'static, Pointer<M::PointerTag>> {
  202,040 ( 0.01%)          let alloc = Allocation::uninit(size, align, M::PANIC_ON_ALLOC_FAIL)?;
  454,590 ( 0.01%)          Ok(self.allocate_with(alloc, kind))
  353,570 ( 0.01%)      }
        .           
        .               pub fn allocate_bytes(
        .                   &mut self,
        .                   bytes: &[u8],
        .                   align: Align,
        .                   kind: MemoryKind<M::MemoryKind>,
        .                   mutability: Mutability,
        .               ) -> Pointer<M::PointerTag> {
-- line 220 ----------------------------------------
-- line 222 ----------------------------------------
        .                   self.allocate_with(alloc, kind)
        .               }
        .           
        .               pub fn allocate_with(
        .                   &mut self,
        .                   alloc: Allocation,
        .                   kind: MemoryKind<M::MemoryKind>,
        .               ) -> Pointer<M::PointerTag> {
  101,020 ( 0.00%)          let id = self.tcx.reserve_alloc_id();
        .                   debug_assert_ne!(
        .                       Some(kind),
        .                       M::GLOBAL_KIND.map(MemoryKind::Machine),
        .                       "dynamically allocating global memory"
        .                   );
        .                   let alloc = M::init_allocation_extra(self, id, Cow::Owned(alloc), Some(kind));
1,212,240 ( 0.03%)          self.alloc_map.insert(id, (kind, alloc.into_owned()));
        .                   M::tag_alloc_base_pointer(self, Pointer::from(id))
        .               }
        .           
        .               pub fn reallocate(
        .                   &mut self,
        .                   ptr: Pointer<Option<M::PointerTag>>,
        .                   old_size_and_align: Option<(Size, Align)>,
        .                   new_size: Size,
-- line 245 ----------------------------------------
-- line 270 ----------------------------------------
        .                       old_size.min(new_size),
        .                       /*nonoverlapping*/ true,
        .                   )?;
        .                   self.deallocate(ptr.into(), old_size_and_align, kind)?;
        .           
        .                   Ok(new_ptr)
        .               }
        .           
  403,840 ( 0.01%)      pub fn deallocate(
        .                   &mut self,
        .                   ptr: Pointer<Option<M::PointerTag>>,
        .                   old_size_and_align: Option<(Size, Align)>,
        .                   kind: MemoryKind<M::MemoryKind>,
        .               ) -> InterpResult<'tcx> {
  151,440 ( 0.00%)          let (alloc_id, offset, ptr) = self.ptr_get_alloc(ptr)?;
        .                   trace!("deallocating: {}", alloc_id);
        .           
  100,960 ( 0.00%)          if offset.bytes() != 0 {
        .                       throw_ub_format!(
        .                           "deallocating {:?} which does not point to the beginning of an object",
        .                           ptr
        .                       );
        .                   }
        .           
  807,680 ( 0.02%)          let (alloc_kind, mut alloc) = match self.alloc_map.remove(&alloc_id) {
        .                       Some(alloc) => alloc,
        .                       None => {
        .                           // Deallocating global memory -- always an error
        .                           return Err(match self.tcx.get_global_alloc(alloc_id) {
        .                               Some(GlobalAlloc::Function(..)) => {
        .                                   err_ub_format!("deallocating {}, which is a function", alloc_id)
        .                               }
        .                               Some(GlobalAlloc::Static(..) | GlobalAlloc::Memory(..)) => {
-- line 302 ----------------------------------------
-- line 303 ----------------------------------------
        .                                   err_ub_format!("deallocating {}, which is static memory", alloc_id)
        .                               }
        .                               None => err_ub!(PointerUseAfterFree(alloc_id)),
        .                           }
        .                           .into());
        .                       }
        .                   };
        .           
   50,480 ( 0.00%)          if alloc.mutability == Mutability::Not {
        .                       throw_ub_format!("deallocating immutable allocation {}", alloc_id);
        .                   }
   50,480 ( 0.00%)          if alloc_kind != kind {
        .                       throw_ub_format!(
        .                           "deallocating {}, which is {} memory, using {} deallocation operation",
        .                           alloc_id,
        .                           alloc_kind,
        .                           kind
        .                       );
        .                   }
  100,960 ( 0.00%)          if let Some((size, align)) = old_size_and_align {
        .                       if size != alloc.size() || align != alloc.align {
        .                           throw_ub_format!(
        .                               "incorrect layout on deallocation: {} has size {} and alignment {}, but gave size {} and alignment {}",
        .                               alloc_id,
        .                               alloc.size().bytes(),
        .                               alloc.align.bytes(),
        .                               size.bytes(),
        .                               align.bytes(),
-- line 330 ----------------------------------------
-- line 337 ----------------------------------------
        .                   M::memory_deallocated(
        .                       &mut self.extra,
        .                       &mut alloc.extra,
        .                       ptr.provenance,
        .                       alloc_range(Size::ZERO, size),
        .                   )?;
        .           
        .                   // Don't forget to remember size and align of this now-dead allocation
  100,960 ( 0.00%)          let old = self.dead_alloc_map.insert(alloc_id, (size, alloc.align));
   50,480 ( 0.00%)          if old.is_some() {
        .                       bug!("Nothing can be deallocated twice");
        .                   }
        .           
        .                   Ok(())
  555,280 ( 0.01%)      }
        .           
        .               /// Internal helper function to determine the allocation and offset of a pointer (if any).
        .               #[inline(always)]
        .               fn get_ptr_access(
        .                   &self,
        .                   ptr: Pointer<Option<M::PointerTag>>,
        .                   size: Size,
        .                   align: Align,
-- line 359 ----------------------------------------
-- line 361 ----------------------------------------
        .                   let align = M::enforce_alignment(&self.extra).then_some(align);
        .                   self.check_and_deref_ptr(
        .                       ptr,
        .                       size,
        .                       align,
        .                       CheckInAllocMsg::MemoryAccessTest,
        .                       |alloc_id, offset, ptr| {
        .                           let (size, align) =
  567,740 ( 0.01%)                      self.get_size_and_align(alloc_id, AllocCheck::Dereferenceable)?;
        .                           Ok((size, align, (alloc_id, offset, ptr)))
        .                       },
        .                   )
        .               }
        .           
        .               /// Check if the given pointer points to live memory of given `size` and `align`
        .               /// (ignoring `M::enforce_alignment`). The caller can control the error message for the
        .               /// out-of-bounds case.
-- line 377 ----------------------------------------
-- line 378 ----------------------------------------
        .               #[inline(always)]
        .               pub fn check_ptr_access_align(
        .                   &self,
        .                   ptr: Pointer<Option<M::PointerTag>>,
        .                   size: Size,
        .                   align: Align,
        .                   msg: CheckInAllocMsg,
        .               ) -> InterpResult<'tcx> {
    4,616 ( 0.00%)          self.check_and_deref_ptr(ptr, size, Some(align), msg, |alloc_id, _, _| {
    2,308 ( 0.00%)              let check = match msg {
        .                           CheckInAllocMsg::DerefTest | CheckInAllocMsg::MemoryAccessTest => {
        .                               AllocCheck::Dereferenceable
        .                           }
        .                           CheckInAllocMsg::PointerArithmeticTest | CheckInAllocMsg::InboundsTest => {
        .                               AllocCheck::Live
        .                           }
        .                       };
    1,154 ( 0.00%)              let (size, align) = self.get_size_and_align(alloc_id, check)?;
        .                       Ok((size, align, ()))
        .                   })?;
        .                   Ok(())
        .               }
        .           
        .               /// Low-level helper function to check if a ptr is in-bounds and potentially return a reference
        .               /// to the allocation it points to. Supports both shared and mutable references, as the actual
        .               /// checking is offloaded to a helper closure. `align` defines whether and which alignment check
        .               /// is done. Returns `None` for size 0, and otherwise `Some` of what `alloc_size` returned.
    8,078 ( 0.00%)      fn check_and_deref_ptr<T>(
        .                   &self,
        .                   ptr: Pointer<Option<M::PointerTag>>,
        .                   size: Size,
        .                   align: Option<Align>,
        .                   msg: CheckInAllocMsg,
        .                   alloc_size: impl FnOnce(
        .                       AllocId,
        .                       Size,
        .                       Pointer<M::PointerTag>,
        .                   ) -> InterpResult<'tcx, (Size, Align, T)>,
        .               ) -> InterpResult<'tcx, Option<T>> {
    1,154 ( 0.00%)          fn check_offset_align(offset: u64, align: Align) -> InterpResult<'static> {
    2,885 ( 0.00%)              if offset % align.bytes() == 0 {
        .                           Ok(())
        .                       } else {
        .                           // The biggest power of two through which `offset` is divisible.
        .                           let offset_pow2 = 1 << offset.trailing_zeros();
        .                           throw_ub!(AlignmentCheckFailed {
        .                               has: Align::from_bytes(offset_pow2).unwrap(),
        .                               required: align,
        .                           })
        .                       }
    1,731 ( 0.00%)          }
        .           
        .                   // Extract from the pointer an `Option<AllocId>` and an offset, which is relative to the
        .                   // allocation or (if that is `None`) an absolute address.
  452,004 ( 0.01%)          let ptr_or_addr = if size.bytes() == 0 {
        .                       // Let's see what we can do, but don't throw errors if there's nothing there.
        .                       self.ptr_try_get_alloc(ptr)
        .                   } else {
        .                       // A "real" access, we insist on getting an `AllocId`.
        .                       Ok(self.ptr_get_alloc(ptr)?)
        .                   };
        .                   Ok(match ptr_or_addr {
        .                       Err(addr) => {
        .                           // No memory is actually being accessed.
        .                           debug_assert!(size.bytes() == 0);
        .                           // Must be non-null.
        2 ( 0.00%)                  if addr == 0 {
        .                               throw_ub!(DanglingIntPointer(0, msg))
        .                           }
        .                           // Must be aligned.
        .                           if let Some(align) = align {
        .                               check_offset_align(addr, align)?;
        .                           }
        .                           None
        .                       }
-- line 452 ----------------------------------------
-- line 460 ----------------------------------------
        .                                   alloc_size,
        .                                   ptr_offset: self.machine_usize_to_isize(offset.bytes()),
        .                                   ptr_size: size,
        .                                   msg,
        .                               })
        .                           }
        .                           // Test align. Check this last; if both bounds and alignment are violated
        .                           // we want the error to be about the bounds.
    1,154 ( 0.00%)                  if let Some(align) = align {
        .                               if M::force_int_for_alignment_check(&self.extra) {
        .                                   let addr = Scalar::from_pointer(ptr, &self.tcx)
        .                                       .to_machine_usize(&self.tcx)
        .                                       .expect("ptr-to-int cast for align check should never fail");
        .                                   check_offset_align(addr, align)?;
        .                               } else {
        .                                   // Check allocation alignment and offset alignment.
    1,154 ( 0.00%)                          if alloc_align.bytes() < align.bytes() {
        .                                       throw_ub!(AlignmentCheckFailed { has: alloc_align, required: align });
        .                                   }
    2,885 ( 0.00%)                          check_offset_align(offset.bytes(), align)?;
        .                               }
        .                           }
        .           
        .                           // We can still be zero-sized in this branch, in which case we have to
        .                           // return `None`.
        .                           if size.bytes() == 0 { None } else { Some(ret_val) }
        .                       }
        .                   })
    8,655 ( 0.00%)      }
        .           
        .               /// Test if the pointer might be null.
        .               pub fn ptr_may_be_null(&self, ptr: Pointer<Option<M::PointerTag>>) -> bool {
        .                   match self.ptr_try_get_alloc(ptr) {
        .                       Ok((alloc_id, offset, _)) => {
        .                           let (size, _align) = self
        .                               .get_size_and_align(alloc_id, AllocCheck::MaybeDead)
        .                               .expect("alloc info with MaybeDead cannot fail");
-- line 496 ----------------------------------------
-- line 505 ----------------------------------------
        .           
        .           /// Allocation accessors
        .           impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {
        .               /// Helper function to obtain a global (tcx) allocation.
        .               /// This attempts to return a reference to an existing allocation if
        .               /// one can be found in `tcx`. That, however, is only possible if `tcx` and
        .               /// this machine use the same pointer tag, so it is indirected through
        .               /// `M::tag_allocation`.
  128,238 ( 0.00%)      fn get_global_alloc(
        .                   &self,
        .                   id: AllocId,
        .                   is_write: bool,
        .               ) -> InterpResult<'tcx, Cow<'tcx, Allocation<M::PointerTag, M::AllocExtra>>> {
  104,922 ( 0.00%)          let (alloc, def_id) = match self.tcx.get_global_alloc(id) {
   11,658 ( 0.00%)              Some(GlobalAlloc::Memory(mem)) => {
        .                           // Memory of a constant or promoted or anonymous memory referenced by a static.
        .                           (mem, None)
        .                       }
        .                       Some(GlobalAlloc::Function(..)) => throw_ub!(DerefFunctionPointer(id)),
        .                       None => throw_ub!(PointerUseAfterFree(id)),
        .                       Some(GlobalAlloc::Static(def_id)) => {
        .                           assert!(self.tcx.is_static(def_id));
        .                           assert!(!self.tcx.is_thread_local_static(def_id));
-- line 527 ----------------------------------------
-- line 537 ----------------------------------------
        .                           // to another static), those inner references only exist in "resolved" form.
        .                           if self.tcx.is_foreign_item(def_id) {
        .                               throw_unsup!(ReadExternStatic(def_id));
        .                           }
        .           
        .                           (self.tcx.eval_static_initializer(def_id)?, Some(def_id))
        .                       }
        .                   };
   93,264 ( 0.00%)          M::before_access_global(&self.extra, id, alloc, def_id, is_write)?;
        .                   let alloc = Cow::Borrowed(alloc);
        .                   // We got tcx memory. Let the machine initialize its "extra" stuff.
        .                   let alloc = M::init_allocation_extra(
        .                       self,
        .                       id, // always use the ID we got as input, not the "hidden" one.
        .                       alloc,
        .                       M::GLOBAL_KIND.map(MemoryKind::Machine),
        .                   );
   46,632 ( 0.00%)          Ok(alloc)
   93,264 ( 0.00%)      }
        .           
        .               /// Gives raw access to the `Allocation`, without bounds or alignment checks.
        .               /// The caller is responsible for calling the access hooks!
  491,628 ( 0.01%)      fn get_raw(
        .                   &self,
        .                   id: AllocId,
        .               ) -> InterpResult<'tcx, &Allocation<M::PointerTag, M::AllocExtra>> {
        .                   // The error type of the inner closure here is somewhat funny.  We have two
        .                   // ways of "erroring": An actual error, or because we got a reference from
        .                   // `get_global_alloc` that we can actually use directly without inserting anything anywhere.
        .                   // So the error type is `InterpResult<'tcx, &Allocation<M::PointerTag>>`.
        .                   let a = self.alloc_map.get_or(id, || {
   46,632 ( 0.00%)              let alloc = self.get_global_alloc(id, /*is_write*/ false).map_err(Err)?;
   23,316 ( 0.00%)              match alloc {
        .                           Cow::Borrowed(alloc) => {
        .                               // We got a ref, cheaply return that as an "error" so that the
        .                               // map does not get mutated.
        .                               Err(Ok(alloc))
        .                           }
        .                           Cow::Owned(alloc) => {
        .                               // Need to put it into the map and return a ref to that
        .                               let kind = M::GLOBAL_KIND.expect(
-- line 577 ----------------------------------------
-- line 578 ----------------------------------------
        .                                   "I got a global allocation that I have to copy but the machine does \
        .                                       not expect that to happen",
        .                               );
        .                               Ok((MemoryKind::Machine(kind), alloc))
        .                           }
        .                       }
        .                   });
        .                   // Now unpack that funny error type
  222,498 ( 0.01%)          match a {
        .                       Ok(a) => Ok(&a.1),
        .                       Err(a) => a,
        .                   }
  368,721 ( 0.01%)      }
        .           
        .               /// "Safe" (bounds and align-checked) allocation access.
  988,032 ( 0.03%)      pub fn get<'a>(
        .                   &'a self,
        .                   ptr: Pointer<Option<M::PointerTag>>,
        .                   size: Size,
        .                   align: Align,
        .               ) -> InterpResult<'tcx, Option<AllocRef<'a, 'tcx, M::PointerTag, M::AllocExtra>>> {
        .                   let align = M::enforce_alignment(&self.extra).then_some(align);
        .                   let ptr_and_alloc = self.check_and_deref_ptr(
        .                       ptr,
        .                       size,
        .                       align,
        .                       CheckInAllocMsg::MemoryAccessTest,
        .                       |alloc_id, offset, ptr| {
  329,340 ( 0.01%)                  let alloc = self.get_raw(alloc_id)?;
        .                           Ok((alloc.size(), alloc.align, (alloc_id, offset, ptr, alloc)))
        .                       },
        .                   )?;
  164,670 ( 0.00%)          if let Some((alloc_id, offset, ptr, alloc)) = ptr_and_alloc {
        .                       let range = alloc_range(offset, size);
        .                       M::memory_read(&self.extra, &alloc.extra, ptr.provenance, range)?;
  576,296 ( 0.01%)              Ok(Some(AllocRef { alloc, range, tcx: self.tcx, alloc_id }))
        .                   } else {
        .                       // Even in this branch we have to be sure that we actually access the allocation, in
        .                       // order to ensure that `static FOO: Type = FOO;` causes a cycle error instead of
        .                       // magically pulling *any* ZST value from the ether. However, the `get_raw` above is
        .                       // always called when `ptr` has an `AllocId`.
       24 ( 0.00%)              Ok(None)
        .                   }
  741,024 ( 0.02%)      }
        .           
        .               /// Return the `extra` field of the given allocation.
        .               pub fn get_alloc_extra<'a>(&'a self, id: AllocId) -> InterpResult<'tcx, &'a M::AllocExtra> {
        .                   Ok(&self.get_raw(id)?.extra)
        .               }
        .           
        .               /// Gives raw mutable access to the `Allocation`, without bounds or alignment checks.
        .               /// The caller is responsible for calling the access hooks!
        .               ///
        .               /// Also returns a ptr to `self.extra` so that the caller can use it in parallel with the
        .               /// allocation.
  810,896 ( 0.02%)      fn get_raw_mut(
        .                   &mut self,
        .                   id: AllocId,
        .               ) -> InterpResult<'tcx, (&mut Allocation<M::PointerTag, M::AllocExtra>, &mut M::MemoryExtra)>
        .               {
        .                   // We have "NLL problem case #3" here, which cannot be worked around without loss of
        .                   // efficiency even for the common case where the key is in the map.
        .                   // <https://rust-lang.github.io/rfcs/2094-nll.html#problem-case-3-conditional-control-flow-across-functions>
        .                   // (Cannot use `get_mut_or` since `get_global_alloc` needs `&self`.)
  101,362 ( 0.00%)          if self.alloc_map.get_mut(id).is_none() {
        .                       // Slow path.
        .                       // Allocation not found locally, go look global.
        .                       let alloc = self.get_global_alloc(id, /*is_write*/ true)?;
        .                       let kind = M::GLOBAL_KIND.expect(
        .                           "I got a global allocation that I have to copy but the machine does \
        .                               not expect that to happen",
        .                       );
        .                       self.alloc_map.insert(id, (MemoryKind::Machine(kind), alloc.into_owned()));
        .                   }
        .           
  101,362 ( 0.00%)          let (_kind, alloc) = self.alloc_map.get_mut(id).unwrap();
  101,362 ( 0.00%)          if alloc.mutability == Mutability::Not {
        .                       throw_ub!(WriteToReadOnly(id))
        .                   }
  405,448 ( 0.01%)          Ok((alloc, &mut self.extra))
  506,810 ( 0.01%)      }
        .           
        .               /// "Safe" (bounds and align-checked) allocation access.
  729,492 ( 0.02%)      pub fn get_mut<'a>(
        .                   &'a mut self,
        .                   ptr: Pointer<Option<M::PointerTag>>,
        .                   size: Size,
        .                   align: Align,
        .               ) -> InterpResult<'tcx, Option<AllocRefMut<'a, 'tcx, M::PointerTag, M::AllocExtra>>> {
        .                   let parts = self.get_ptr_access(ptr, size, align)?;
  121,582 ( 0.00%)          if let Some((alloc_id, offset, ptr)) = parts {
        .                       let tcx = self.tcx;
        .                       // FIXME: can we somehow avoid looking up the allocation twice here?
        .                       // We cannot call `get_raw_mut` inside `check_and_deref_ptr` as that would duplicate `&mut self`.
  182,370 ( 0.00%)              let (alloc, extra) = self.get_raw_mut(alloc_id)?;
        .                       let range = alloc_range(offset, size);
        .                       M::memory_written(extra, &mut alloc.extra, ptr.provenance, range)?;
  364,740 ( 0.01%)              Ok(Some(AllocRefMut { alloc, range, tcx, alloc_id }))
        .                   } else {
        3 ( 0.00%)              Ok(None)
        .                   }
  547,119 ( 0.01%)      }
        .           
        .               /// Return the `extra` field of the given allocation.
        .               pub fn get_alloc_extra_mut<'a>(
        .                   &'a mut self,
        .                   id: AllocId,
        .               ) -> InterpResult<'tcx, (&'a mut M::AllocExtra, &'a mut M::MemoryExtra)> {
        .                   let (alloc, memory_extra) = self.get_raw_mut(id)?;
        .                   Ok((&mut alloc.extra, memory_extra))
        .               }
        .           
        .               /// Obtain the size and alignment of an allocation, even if that allocation has
        .               /// been deallocated.
        .               ///
        .               /// If `liveness` is `AllocCheck::MaybeDead`, this function always returns `Ok`.
1,567,632 ( 0.04%)      pub fn get_size_and_align(
        .                   &self,
        .                   id: AllocId,
        .                   liveness: AllocCheck,
        .               ) -> InterpResult<'static, (Size, Align)> {
        .                   // # Regular allocations
        .                   // Don't use `self.get_raw` here as that will
        .                   // a) cause cycles in case `id` refers to a static
        .                   // b) duplicate a global's allocation in miri
  712,560 ( 0.02%)          if let Some((_, alloc)) = self.alloc_map.get(id) {
  141,935 ( 0.00%)              return Ok((alloc.size(), alloc.align));
        .                   }
        .           
        .                   // # Function pointers
        .                   // (both global from `alloc_map` and local from `extra_fn_ptr_map`)
    2,308 ( 0.00%)          if self.get_fn_alloc(id).is_some() {
        .                       return if let AllocCheck::Dereferenceable = liveness {
        .                           // The caller requested no function pointers.
        .                           throw_ub!(DerefFunctionPointer(id))
        .                       } else {
        .                           Ok((Size::ZERO, Align::ONE))
        .                       };
        .                   }
        .           
        .                   // # Statics
        .                   // Can't do this in the match argument, we may get cycle errors since the lock would
        .                   // be held throughout the match.
    6,347 ( 0.00%)          match self.tcx.get_global_alloc(id) {
        .                       Some(GlobalAlloc::Static(did)) => {
        .                           assert!(!self.tcx.is_thread_local_static(did));
        .                           // Use size and align of the type.
        .                           let ty = self.tcx.type_of(did);
        .                           let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();
        .                           Ok((layout.size, layout.align.abi))
        .                       }
      577 ( 0.00%)              Some(GlobalAlloc::Memory(alloc)) => {
        .                           // Need to duplicate the logic here, because the global allocations have
        .                           // different associated types than the interpreter-local ones.
    1,154 ( 0.00%)                  Ok((alloc.size(), alloc.align))
        .                       }
        .                       Some(GlobalAlloc::Function(_)) => bug!("We already checked function pointers above"),
        .                       // The rest must be dead.
        .                       None => {
        .                           if let AllocCheck::MaybeDead = liveness {
        .                               // Deallocated pointers are allowed, we should be able to find
        .                               // them in the map.
        .                               Ok(*self
-- line 740 ----------------------------------------
-- line 741 ----------------------------------------
        .                                   .dead_alloc_map
        .                                   .get(&id)
        .                                   .expect("deallocated pointers should all be recorded in `dead_alloc_map`"))
        .                           } else {
        .                               throw_ub!(PointerUseAfterFree(id))
        .                           }
        .                       }
        .                   }
1,140,096 ( 0.03%)      }
        .           
    2,308 ( 0.00%)      fn get_fn_alloc(&self, id: AllocId) -> Option<FnVal<'tcx, M::ExtraFnVal>> {
        .                   if let Some(extra) = self.extra_fn_ptr_map.get(&id) {
        .                       Some(FnVal::Other(*extra))
        .                   } else {
    2,885 ( 0.00%)              match self.tcx.get_global_alloc(id) {
        .                           Some(GlobalAlloc::Function(instance)) => Some(FnVal::Instance(instance)),
      577 ( 0.00%)                  _ => None,
        .                       }
        .                   }
    2,308 ( 0.00%)      }
        .           
        .               pub fn get_fn(
        .                   &self,
        .                   ptr: Pointer<Option<M::PointerTag>>,
        .               ) -> InterpResult<'tcx, FnVal<'tcx, M::ExtraFnVal>> {
        .                   trace!("get_fn({:?})", ptr);
        .                   let (alloc_id, offset, _ptr) = self.ptr_get_alloc(ptr)?;
        .                   if offset.bytes() != 0 {
-- line 768 ----------------------------------------
-- line 903 ----------------------------------------
        .                       writeln!(fmt)?;
        .                   }
        .                   Ok(())
        .               }
        .           }
        .           
        .           /// Reading and writing.
        .           impl<'tcx, 'a, Tag: Provenance, Extra> AllocRefMut<'a, 'tcx, Tag, Extra> {
  552,303 ( 0.01%)      pub fn write_scalar(
        .                   &mut self,
        .                   range: AllocRange,
        .                   val: ScalarMaybeUninit<Tag>,
        .               ) -> InterpResult<'tcx> {
  306,835 ( 0.01%)          Ok(self
        .                       .alloc
  675,037 ( 0.02%)              .write_scalar(&self.tcx, self.range.subrange(range), val)
        .                       .map_err(|e| e.to_interp_error(self.alloc_id))?)
  368,202 ( 0.01%)      }
        .           
        .               pub fn write_ptr_sized(
        .                   &mut self,
        .                   offset: Size,
        .                   val: ScalarMaybeUninit<Tag>,
        .               ) -> InterpResult<'tcx> {
        .                   self.write_scalar(alloc_range(offset, self.tcx.data_layout().pointer_size), val)
        .               }
        .           }
        .           
        .           impl<'tcx, 'a, Tag: Provenance, Extra> AllocRef<'a, 'tcx, Tag, Extra> {
    9,232 ( 0.00%)      pub fn read_scalar(&self, range: AllocRange) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {
  353,147 ( 0.01%)          Ok(self
        .                       .alloc
  195,668 ( 0.00%)              .read_scalar(&self.tcx, self.range.subrange(range))
        .                       .map_err(|e| e.to_interp_error(self.alloc_id))?)
    9,232 ( 0.00%)      }
        .           
        .               pub fn read_ptr_sized(&self, offset: Size) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {
        .                   self.read_scalar(alloc_range(offset, self.tcx.data_layout().pointer_size))
        .               }
        .           
  109,131 ( 0.00%)      pub fn check_bytes(&self, range: AllocRange, allow_uninit_and_ptr: bool) -> InterpResult<'tcx> {
    9,921 ( 0.00%)          Ok(self
        .                       .alloc
   69,447 ( 0.00%)              .check_bytes(&self.tcx, self.range.subrange(range), allow_uninit_and_ptr)
        .                       .map_err(|e| e.to_interp_error(self.alloc_id))?)
   79,368 ( 0.00%)      }
        .           }
        .           
        .           impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {
        .               /// Reads the given number of bytes from memory. Returns them as a slice.
        .               ///
        .               /// Performs appropriate bounds checks.
    2,308 ( 0.00%)      pub fn read_bytes(
        .                   &self,
        .                   ptr: Pointer<Option<M::PointerTag>>,
        .                   size: Size,
        .               ) -> InterpResult<'tcx, &[u8]> {
    1,731 ( 0.00%)          let alloc_ref = match self.get(ptr, size, Align::ONE)? {
    3,420 ( 0.00%)              Some(a) => a,
       28 ( 0.00%)              None => return Ok(&[]), // zero-sized access
        .                   };
        .                   // Side-step AllocRef and directly access the underlying bytes more efficiently.
        .                   // (We are staying inside the bounds here so all is good.)
    1,140 ( 0.00%)          Ok(alloc_ref
        .                       .alloc
    1,710 ( 0.00%)              .get_bytes(&alloc_ref.tcx, alloc_ref.range)
        .                       .map_err(|e| e.to_interp_error(alloc_ref.alloc_id))?)
    2,308 ( 0.00%)      }
        .           
        .               /// Writes the given stream of bytes into memory.
        .               ///
        .               /// Performs appropriate bounds checks.
        .               pub fn write_bytes(
        .                   &mut self,
        .                   ptr: Pointer<Option<M::PointerTag>>,
        .                   src: impl IntoIterator<Item = u8>,
-- line 978 ----------------------------------------
-- line 1016 ----------------------------------------
        .                   &mut self,
        .                   src: Pointer<Option<M::PointerTag>>,
        .                   src_align: Align,
        .                   dest: Pointer<Option<M::PointerTag>>,
        .                   dest_align: Align,
        .                   size: Size,
        .                   nonoverlapping: bool,
        .               ) -> InterpResult<'tcx> {
  202,860 ( 0.01%)          self.copy_repeatedly(src, src_align, dest, dest_align, size, 1, nonoverlapping)
        .               }
        .           
  527,436 ( 0.01%)      pub fn copy_repeatedly(
        .                   &mut self,
        .                   src: Pointer<Option<M::PointerTag>>,
        .                   src_align: Align,
        .                   dest: Pointer<Option<M::PointerTag>>,
        .                   dest_align: Align,
        .                   size: Size,
        .                   num_copies: u64,
        .                   nonoverlapping: bool,
        .               ) -> InterpResult<'tcx> {
   81,144 ( 0.00%)          let tcx = self.tcx;
        .                   // We need to do our own bounds-checks.
        .                   let src_parts = self.get_ptr_access(src, size, src_align)?;
        .                   let dest_parts = self.get_ptr_access(dest, size * num_copies, dest_align)?; // `Size` multiplication
        .           
        .                   // FIXME: we look up both allocations twice here, once ebfore for the `check_ptr_access`
        .                   // and once below to get the underlying `&[mut] Allocation`.
        .           
        .                   // Source alloc preparations and access hooks.
   81,144 ( 0.00%)          let (src_alloc_id, src_offset, src) = match src_parts {
        .                       None => return Ok(()), // Zero-sized *source*, that means dst is also zero-sized and we have nothing to do.
        .                       Some(src_ptr) => src_ptr,
        .                   };
  162,288 ( 0.00%)          let src_alloc = self.get_raw(src_alloc_id)?;
        .                   let src_range = alloc_range(src_offset, size);
        .                   M::memory_read(&self.extra, &src_alloc.extra, src.provenance, src_range)?;
        .                   // We need the `dest` ptr for the next operation, so we get it now.
        .                   // We already did the source checks and called the hooks so we are good to return early.
   81,144 ( 0.00%)          let (dest_alloc_id, dest_offset, dest) = match dest_parts {
        .                       None => return Ok(()), // Zero-sized *destiantion*.
        .                       Some(dest_ptr) => dest_ptr,
        .                   };
        .           
        .                   // This checks relocation edges on the src, which needs to happen before
        .                   // `prepare_relocation_copy`.
        .                   let src_bytes = src_alloc
        .                       .get_bytes_with_uninit_and_ptr(&tcx, src_range)
        .                       .map_err(|e| e.to_interp_error(src_alloc_id))?
        .                       .as_ptr(); // raw ptr, so we can also get a ptr to the destination allocation
        .                   // first copy the relocations to a temporary buffer, because
        .                   // `get_bytes_mut` will clear the relocations, which is correct,
        .                   // since we don't want to keep any relocations at the target.
        .                   let relocations =
  486,864 ( 0.01%)              src_alloc.prepare_relocation_copy(self, src_range, dest_offset, num_copies);
        .                   // Prepare a copy of the initialization mask.
  162,288 ( 0.00%)          let compressed = src_alloc.compress_uninit_range(src_range);
        .           
        .                   // Destination alloc preparations and access hooks.
  121,716 ( 0.00%)          let (dest_alloc, extra) = self.get_raw_mut(dest_alloc_id)?;
  121,716 ( 0.00%)          let dest_range = alloc_range(dest_offset, size * num_copies);
        .                   M::memory_written(extra, &mut dest_alloc.extra, dest.provenance, dest_range)?;
  162,288 ( 0.00%)          let dest_bytes = dest_alloc
        .                       .get_bytes_mut_ptr(&tcx, dest_range)
        .                       .map_err(|e| e.to_interp_error(dest_alloc_id))?
        .                       .as_mut_ptr();
        .           
  121,716 ( 0.00%)          if compressed.no_bytes_init() {
        .                       // Fast path: If all bytes are `uninit` then there is nothing to copy. The target range
        .                       // is marked as uninitialized but we otherwise omit changing the byte representation which may
        .                       // be arbitrary for uninitialized bytes.
        .                       // This also avoids writing to the target bytes so that the backing allocation is never
        .                       // touched if the bytes stay uninitialized for the whole interpreter execution. On contemporary
        .                       // operating system this can avoid physically allocating the page.
        .                       dest_alloc.mark_init(dest_range, false); // `Size` multiplication
        .                       dest_alloc.mark_relocation_range(relocations);
-- line 1091 ----------------------------------------
-- line 1093 ----------------------------------------
        .                   }
        .           
        .                   // SAFE: The above indexing would have panicked if there weren't at least `size` bytes
        .                   // behind `src` and `dest`. Also, we use the overlapping-safe `ptr::copy` if `src` and
        .                   // `dest` could possibly overlap.
        .                   // The pointers above remain valid even if the `HashMap` table is moved around because they
        .                   // point into the `Vec` storing the bytes.
        .                   unsafe {
   40,572 ( 0.00%)              if src_alloc_id == dest_alloc_id {
        .                           if nonoverlapping {
        .                               // `Size` additions
        .                               if (src_offset <= dest_offset && src_offset + size > dest_offset)
        .                                   || (dest_offset <= src_offset && dest_offset + size > src_offset)
        .                               {
        .                                   throw_ub_format!("copy_nonoverlapping called on overlapping ranges")
        .                               }
        .                           }
-- line 1109 ----------------------------------------
-- line 1114 ----------------------------------------
        .                                   dest_bytes.add((size * i).bytes_usize()), // `Size` multiplication
        .                                   size.bytes_usize(),
        .                               );
        .                           }
        .                       } else {
        .                           for i in 0..num_copies {
        .                               ptr::copy_nonoverlapping(
        .                                   src_bytes,
  121,716 ( 0.00%)                          dest_bytes.add((size * i).bytes_usize()), // `Size` multiplication
        .                                   size.bytes_usize(),
        .                               );
        .                           }
        .                       }
        .                   }
        .           
        .                   // now fill in all the "init" data
  202,860 ( 0.01%)          dest_alloc.mark_compressed_init_range(
        .                       &compressed,
        .                       alloc_range(dest_offset, size), // just a single copy (i.e., not full `dest_range`)
        .                       num_copies,
        .                   );
        .                   // copy the relocations to the destination
  365,148 ( 0.01%)          dest_alloc.mark_relocation_range(relocations);
        .           
        .                   Ok(())
  365,148 ( 0.01%)      }
        .           }
        .           
        .           /// Machine pointer introspection.
        .           impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {
    1,154 ( 0.00%)      pub fn scalar_to_ptr(&self, scalar: Scalar<M::PointerTag>) -> Pointer<Option<M::PointerTag>> {
        .                   // We use `to_bits_or_ptr_internal` since we are just implementing the method people need to
        .                   // call to force getting out a pointer.
    5,770 ( 0.00%)          match scalar.to_bits_or_ptr_internal(self.pointer_size()) {
        .                       Err(ptr) => ptr.into(),
        .                       Ok(bits) => {
        .                           let addr = u64::try_from(bits).unwrap();
        .                           let ptr = M::ptr_from_addr(&self, addr);
        .                           if addr == 0 {
        .                               assert!(ptr.provenance.is_none(), "null pointer can never have an AllocId");
        .                           }
        .                           ptr
        .                       }
        .                   }
    2,308 ( 0.00%)      }
        .           
        .               /// Turning a "maybe pointer" into a proper pointer (and some information
        .               /// about where it points), or an absolute address.
        .               pub fn ptr_try_get_alloc(
        .                   &self,
        .                   ptr: Pointer<Option<M::PointerTag>>,
        .               ) -> Result<(AllocId, Size, Pointer<M::PointerTag>), u64> {
        .                   match ptr.into_pointer_or_addr() {
-- line 1166 ----------------------------------------

2,021,547 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/memory.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs
--------------------------------------------------------------------------------
Ir                 

-- line 8 ----------------------------------------
        .           };
        .           use rustc_ast_pretty::pprust::token_to_string;
        .           use rustc_data_structures::fx::FxHashMap;
        .           use rustc_errors::PResult;
        .           use rustc_span::Span;
        .           
        .           impl<'a> StringReader<'a> {
        .               pub(super) fn into_token_trees(self) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
       38 ( 0.00%)          let mut tt_reader = TokenTreesReader {
        .                       string_reader: self,
        2 ( 0.00%)              token: Token::dummy(),
        .                       open_braces: Vec::new(),
        .                       unmatched_braces: Vec::new(),
        .                       matching_delim_spans: Vec::new(),
        .                       last_unclosed_found_span: None,
        .                       last_delim_empty_block_spans: FxHashMap::default(),
        .                       matching_block_spans: Vec::new(),
        .                   };
        2 ( 0.00%)          let res = tt_reader.parse_all_token_trees();
       12 ( 0.00%)          (res, tt_reader.unmatched_braces)
        .               }
        .           }
        .           
        .           struct TokenTreesReader<'a> {
        .               string_reader: StringReader<'a>,
        .               token: Token,
        .               /// Stack of open delimiters and their spans. Used for error message.
        .               open_braces: Vec<(token::DelimToken, Span)>,
-- line 35 ----------------------------------------
-- line 43 ----------------------------------------
        .               last_delim_empty_block_spans: FxHashMap<token::DelimToken, Span>,
        .               /// Collect the spans of braces (Open, Close). Used only
        .               /// for detecting if blocks are empty and only braces.
        .               matching_block_spans: Vec<(Span, Span)>,
        .           }
        .           
        .           impl<'a> TokenTreesReader<'a> {
        .               // Parse a stream of tokens into a list of `TokenTree`s, up to an `Eof`.
       16 ( 0.00%)      fn parse_all_token_trees(&mut self) -> PResult<'a, TokenStream> {
        .                   let mut buf = TokenStreamBuilder::default();
        .           
        .                   self.bump();
    1,264 ( 0.00%)          while self.token != token::Eof {
    5,040 ( 0.00%)              buf.push(self.parse_token_tree()?);
        .                   }
        .           
        .                   Ok(buf.into_token_stream())
       18 ( 0.00%)      }
        .           
        .               // Parse a stream of tokens into a list of `TokenTree`s, up to a `CloseDelim`.
        .               fn parse_token_trees_until_close_delim(&mut self) -> TokenStream {
        .                   let mut buf = TokenStreamBuilder::default();
        .                   loop {
  297,126 ( 0.01%)              if let token::CloseDelim(..) = self.token.kind {
        .                           return buf.into_token_stream();
        .                       }
        .           
  635,100 ( 0.02%)              match self.parse_token_tree() {
1,143,180 ( 0.03%)                  Ok(tree) => buf.push(tree),
        .                           Err(mut e) => {
        .                               e.emit();
        .                               return buf.into_token_stream();
        .                           }
        .                       }
        .                   }
        .               }
        .           
1,148,850 ( 0.03%)      fn parse_token_tree(&mut self) -> PResult<'a, TreeAndSpacing> {
  255,300 ( 0.01%)          let sm = self.string_reader.sess.source_map();
        .           
1,062,678 ( 0.03%)          match self.token.kind {
        .                       token::Eof => {
        .                           let msg = "this file contains an unclosed delimiter";
        .                           let mut err =
        .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, msg);
        .                           for &(_, sp) in &self.open_braces {
        .                               err.span_label(sp, "unclosed delimiter");
        .                               self.unmatched_braces.push(UnmatchedBrace {
        .                                   expected_delim: token::DelimToken::Brace,
-- line 91 ----------------------------------------
-- line 113 ----------------------------------------
        .                                   err.span_label(
        .                                       *close_sp,
        .                                       "...as it matches this but it has different indentation",
        .                                   );
        .                               }
        .                           }
        .                           Err(err)
        .                       }
   21,543 ( 0.00%)              token::OpenDelim(delim) => {
        .                           // The span for beginning of the delimited section
   21,543 ( 0.00%)                  let pre_span = self.token.span;
        .           
        .                           // Parse the open delimiter.
  150,801 ( 0.00%)                  self.open_braces.push((delim, self.token.span));
        .                           self.bump();
        .           
        .                           // Parse the token trees within the delimiters.
        .                           // We stop at any delimiter so we can try to recover if the user
        .                           // uses an incorrect delimiter.
   21,543 ( 0.00%)                  let tts = self.parse_token_trees_until_close_delim();
        .           
        .                           // Expand to cover the entire delimited token tree
  107,715 ( 0.00%)                  let delim_span = DelimSpan::from_pair(pre_span, self.token.span);
        .           
   43,086 ( 0.00%)                  match self.token.kind {
        .                               // Correct delimiter.
   43,086 ( 0.00%)                      token::CloseDelim(d) if d == delim => {
        .                                   let (open_brace, open_brace_span) = self.open_braces.pop().unwrap();
   43,086 ( 0.00%)                          let close_brace_span = self.token.span;
        .           
   64,629 ( 0.00%)                          if tts.is_empty() {
      426 ( 0.00%)                              let empty_block_span = open_brace_span.to(close_brace_span);
      568 ( 0.00%)                              if !sm.is_multiline(empty_block_span) {
        .                                           // Only track if the block is in the form of `{}`, otherwise it is
        .                                           // likely that it was written on purpose.
        .                                           self.last_delim_empty_block_spans.insert(delim, empty_block_span);
        .                                       }
        .                                   }
        .           
        .                                   //only add braces
   86,172 ( 0.00%)                          if let (DelimToken::Brace, DelimToken::Brace) = (open_brace, delim) {
        .                                       self.matching_block_spans.push((open_brace_span, close_brace_span));
        .                                   }
        .           
   21,543 ( 0.00%)                          if self.open_braces.is_empty() {
        .                                       // Clear up these spans to avoid suggesting them as we've found
        .                                       // properly matched delimiters so far for an entire block.
        .                                       self.matching_delim_spans.clear();
        .                                   } else {
        .                                       self.matching_delim_spans.push((
        .                                           open_brace,
        .                                           open_brace_span,
        .                                           close_brace_span,
-- line 165 ----------------------------------------
-- line 218 ----------------------------------------
        .                               token::Eof => {
        .                                   // Silently recover, the EOF token will be seen again
        .                                   // and an error emitted then. Thus we don't pop from
        .                                   // self.open_braces here.
        .                               }
        .                               _ => {}
        .                           }
        .           
  150,801 ( 0.00%)                  Ok(TokenTree::Delimited(delim_span, delim, tts).into())
        .                       }
        .                       token::CloseDelim(delim) => {
        .                           // An unexpected closing delimiter (i.e., there is no
        .                           // matching opening delimiter).
        .                           let token_str = token_to_string(&self.token);
        .                           let msg = format!("unexpected closing delimiter: `{}`", token_str);
        .                           let mut err =
        .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, &msg);
-- line 234 ----------------------------------------
-- line 253 ----------------------------------------
        .                                   err.span_label(parent.1, "...matches this closing brace");
        .                               }
        .                           }
        .           
        .                           err.span_label(self.token.span, "unexpected closing delimiter");
        .                           Err(err)
        .                       }
        .                       _ => {
  530,535 ( 0.01%)                  let tt = TokenTree::Token(self.token.take());
        .                           let mut spacing = self.bump();
  212,214 ( 0.01%)                  if !self.token.is_op() {
        .                               spacing = Alone;
        .                           }
  636,642 ( 0.02%)                  Ok((tt, spacing))
        .                       }
        .                   }
1,021,200 ( 0.03%)      }
        .           
        .               fn bump(&mut self) -> Spacing {
1,235,034 ( 0.03%)          let (spacing, token) = self.string_reader.next_token();
  638,268 ( 0.02%)          self.token = token;
        .                   spacing
        .               }
        .           }
        .           
   21,543 ( 0.00%)  #[derive(Default)]
        .           struct TokenStreamBuilder {
        .               buf: Vec<TreeAndSpacing>,
        .           }
        .           
        .           impl TokenStreamBuilder {
1,659,450 ( 0.04%)      fn push(&mut self, (tree, joint): TreeAndSpacing) {
  801,417 ( 0.02%)          if let Some((TokenTree::Token(prev_token), Joint)) = self.buf.last() {
   82,672 ( 0.00%)              if let TokenTree::Token(token) = &tree {
  164,888 ( 0.00%)                  if let Some(glued) = prev_token.glue(token) {
        .                               self.buf.pop();
  122,640 ( 0.00%)                      self.buf.push((TokenTree::Token(glued), joint));
        .                               return;
        .                           }
        .                       }
        .                   }
  587,150 ( 0.01%)          self.buf.push((tree, joint))
1,021,200 ( 0.03%)      }
        .           
        .               fn into_token_stream(self) -> TokenStream {
  215,448 ( 0.01%)          TokenStream::new(self.buf)
        .               }
        .           }

  512,795 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                 

-- line 5 ----------------------------------------
        .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
        .           unsafe impl GlobalAlloc for System {
        .               #[inline]
        .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
        .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
        .                   // So only rely on MIN_ALIGN if size >= align.
        .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
        .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
4,739,620 ( 0.12%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
3,554,715 ( 0.09%)              libc::malloc(layout.size()) as *mut u8
        .                   } else {
        .                       #[cfg(target_os = "macos")]
        .                       {
        .                           if layout.align() > (1 << 31) {
        .                               return ptr::null_mut();
        .                           }
        .                       }
        .                       aligned_malloc(&layout)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
        .                   // See the comment above in `alloc` for why this check looks the way it does.
  231,928 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
  347,892 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
        .                   } else {
        .                       let ptr = self.alloc(layout);
        .                       if !ptr.is_null() {
        .                           ptr::write_bytes(ptr, 0, layout.size());
        .                       }
        .                       ptr
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
1,242,876 ( 0.03%)          libc::free(ptr as *mut libc::c_void)
        .               }
        .           
        .               #[inline]
        .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
  213,100 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
  426,200 ( 0.01%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
        .                   } else {
        .                       realloc_fallback(self, ptr, layout, new_size)
        .                   }
        .               }
        .           }
        .           
        .           cfg_if::cfg_if! {
        .               if #[cfg(any(
-- line 56 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/index.rs
--------------------------------------------------------------------------------
Ir                  

-- line 154 ----------------------------------------
         .           
         .           #[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
         .           unsafe impl<T> SliceIndex<[T]> for usize {
         .               type Output = T;
         .           
         .               #[inline]
         .               fn get(self, slice: &[T]) -> Option<&T> {
         .                   // SAFETY: `self` is checked to be in bounds.
 5,933,853 ( 0.15%)          if self < slice.len() { unsafe { Some(&*self.get_unchecked(slice)) } } else { None }
         .               }
         .           
         .               #[inline]
         .               fn get_mut(self, slice: &mut [T]) -> Option<&mut T> {
         .                   // SAFETY: `self` is checked to be in bounds.
    63,165 ( 0.00%)          if self < slice.len() { unsafe { Some(&mut *self.get_unchecked_mut(slice)) } } else { None }
         .               }
         .           
         .               #[inline]
         .               unsafe fn get_unchecked(self, slice: *const [T]) -> *const T {
         .                   // SAFETY: the caller guarantees that `slice` is not dangling, so it
         .                   // cannot be longer than `isize::MAX`. They also guarantee that
         .                   // `self` is in bounds of `slice` so `self` cannot overflow an `isize`,
         .                   // so the call to `add` is safe.
-- line 176 ----------------------------------------
-- line 181 ----------------------------------------
         .               unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut T {
         .                   // SAFETY: see comments for `get_unchecked` above.
         .                   unsafe { slice.as_mut_ptr().add(self) }
         .               }
         .           
         .               #[inline]
         .               fn index(self, slice: &[T]) -> &T {
         .                   // N.B., use intrinsic indexing
22,917,538 ( 0.58%)          &(*slice)[self]
         .               }
         .           
         .               #[inline]
         .               fn index_mut(self, slice: &mut [T]) -> &mut T {
         .                   // N.B., use intrinsic indexing
11,085,579 ( 0.28%)          &mut (*slice)[self]
         .               }
         .           }
         .           
         .           #[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
         .           unsafe impl<T> SliceIndex<[T]> for ops::Range<usize> {
         .               type Output = [T];
         .           
         .               #[inline]
         .               fn get(self, slice: &[T]) -> Option<&[T]> {
     6,663 ( 0.00%)          if self.start > self.end || self.end > slice.len() {
         .                       None
         .                   } else {
         .                       // SAFETY: `self` is checked to be valid and in bounds above.
         .                       unsafe { Some(&*self.get_unchecked(slice)) }
         .                   }
         .               }
         .           
         .               #[inline]
-- line 213 ----------------------------------------
-- line 221 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {
         .                   // SAFETY: the caller guarantees that `slice` is not dangling, so it
         .                   // cannot be longer than `isize::MAX`. They also guarantee that
         .                   // `self` is in bounds of `slice` so `self` cannot overflow an `isize`,
         .                   // so the call to `add` is safe.
 1,104,887 ( 0.03%)          unsafe { ptr::slice_from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start) }
         .               }
         .           
         .               #[inline]
         .               unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
         .                   // SAFETY: see comments for `get_unchecked` above.
         .                   unsafe {
   129,795 ( 0.00%)              ptr::slice_from_raw_parts_mut(slice.as_mut_ptr().add(self.start), self.end - self.start)
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn index(self, slice: &[T]) -> &[T] {
   710,515 ( 0.02%)          if self.start > self.end {
         .                       slice_index_order_fail(self.start, self.end);
 1,265,645 ( 0.03%)          } else if self.end > slice.len() {
         .                       slice_end_index_len_fail(self.end, slice.len());
         .                   }
         .                   // SAFETY: `self` is checked to be valid and in bounds above.
         .                   unsafe { &*self.get_unchecked(slice) }
         .               }
         .           
         .               #[inline]
         .               fn index_mut(self, slice: &mut [T]) -> &mut [T] {
     2,870 ( 0.00%)          if self.start > self.end {
         .                       slice_index_order_fail(self.start, self.end);
   128,557 ( 0.00%)          } else if self.end > slice.len() {
         .                       slice_end_index_len_fail(self.end, slice.len());
         .                   }
         .                   // SAFETY: `self` is checked to be valid and in bounds above.
         .                   unsafe { &mut *self.get_unchecked_mut(slice) }
         .               }
         .           }
         .           
         .           #[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
-- line 263 ----------------------------------------
-- line 320 ----------------------------------------
         .               #[inline]
         .               unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
         .                   // SAFETY: the caller has to uphold the safety contract for `get_unchecked_mut`.
         .                   unsafe { (self.start..slice.len()).get_unchecked_mut(slice) }
         .               }
         .           
         .               #[inline]
         .               fn index(self, slice: &[T]) -> &[T] {
   557,961 ( 0.01%)          if self.start > slice.len() {
         .                       slice_start_index_len_fail(self.start, slice.len());
         .                   }
         .                   // SAFETY: `self` is checked to be valid and in bounds above.
         .                   unsafe { &*self.get_unchecked(slice) }
         .               }
         .           
         .               #[inline]
         .               fn index_mut(self, slice: &mut [T]) -> &mut [T] {
    21,270 ( 0.00%)          if self.start > slice.len() {
         .                       slice_start_index_len_fail(self.start, slice.len());
         .                   }
         .                   // SAFETY: `self` is checked to be valid and in bounds above.
         .                   unsafe { &mut *self.get_unchecked_mut(slice) }
         .               }
         .           }
         .           
         .           #[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
-- line 345 ----------------------------------------
-- line 539 ----------------------------------------
         .               let end = match end {
         .                   ops::Bound::Included(end) => {
         .                       end.checked_add(1).unwrap_or_else(|| slice_end_index_overflow_fail())
         .                   }
         .                   ops::Bound::Excluded(&end) => end,
         .                   ops::Bound::Unbounded => len,
         .               };
         .           
     6,168 ( 0.00%)      if start > end {
         .                   slice_index_order_fail(start, end);
         .               }
     2,977 ( 0.00%)      if end > len {
         .                   slice_end_index_len_fail(end, len);
         .               }
         .           
         .               ops::Range { start, end }
         .           }
         .           
         .           /// Convert pair of `ops::Bound`s into `ops::Range` without performing any bounds checking and (in debug) overflow checking
         .           fn into_range_unchecked(
-- line 558 ----------------------------------------

 3,929,698 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/index.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 141 ----------------------------------------
        .               /// ```
        .               /// let a = [1, 2, 3];
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
        .               #[inline]
        .               pub const fn is_empty(&self) -> bool {
2,658,159 ( 0.07%)          self.len() == 0
        .               }
        .           
        .               /// Returns the first element of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
        .               ///
        .               /// let w: &[i32] = &[];
        .               /// assert_eq!(None, w.first());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn first(&self) -> Option<&T> {
   10,877 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
        .               }
        .           
        .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
        .               ///     *first = 5;
        .               /// }
        .               /// assert_eq!(x, &[5, 1, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
        .               #[inline]
        .               pub const fn first_mut(&mut self) -> Option<&mut T> {
      496 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
        .               }
        .           
        .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 197 ----------------------------------------
        .               ///     assert_eq!(first, &0);
        .               ///     assert_eq!(elements, &[1, 2]);
        .               /// }
        .               /// ```
        .               #[stable(feature = "slice_splits", since = "1.5.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn split_first(&self) -> Option<(&T, &[T])> {
        6 ( 0.00%)          if let [first, tail @ ..] = self { Some((first, tail)) } else { None }
        .               }
        .           
        .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 213 ----------------------------------------
-- line 237 ----------------------------------------
        .               ///     assert_eq!(last, &2);
        .               ///     assert_eq!(elements, &[0, 1]);
        .               /// }
        .               /// ```
        .               #[stable(feature = "slice_splits", since = "1.5.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
   34,145 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
        .               }
        .           
        .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
        .               ///
        .               /// let w: &[i32] = &[];
        .               /// assert_eq!(None, w.last());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn last(&self) -> Option<&T> {
3,545,183 ( 0.09%)          if let [.., last] = self { Some(last) } else { None }
        .               }
        .           
        .               /// Returns a mutable pointer to the last item in the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
        .               ///     *last = 10;
        .               /// }
        .               /// assert_eq!(x, &[0, 1, 10]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
        .               #[inline]
        .               pub const fn last_mut(&mut self) -> Option<&mut T> {
1,002,726 ( 0.03%)          if let [.., last] = self { Some(last) } else { None }
        .               }
        .           
        .               /// Returns a reference to an element or subslice depending on the type of
        .               /// index.
        .               ///
        .               /// - If given a position, returns a reference to the element at that
        .               ///   position or `None` if out of bounds.
        .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
        .               /// }
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: slice::as_mut_ptr
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
        .               #[inline]
        .               pub const fn as_ptr(&self) -> *const T {
1,431,178 ( 0.04%)          self as *const [T] as *const T
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the slice's buffer.
        .               ///
        .               /// The caller must ensure that the slice outlives the pointer this
        .               /// function returns, or else it will end up pointing to garbage.
        .               ///
        .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
        .               ///     }
        .               /// }
        .               /// assert_eq!(x, &[3, 4, 6]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
        .               #[inline]
        .               pub const fn as_mut_ptr(&mut self) -> *mut T {
        2 ( 0.00%)          self as *mut [T] as *mut T
        .               }
        .           
        .               /// Returns the two raw pointers spanning the slice.
        .               ///
        .               /// The returned range is half-open, which means that the end pointer
        .               /// points *one past* the last element of the slice. This way, an empty
        .               /// slice is represented by two equal pointers, and the difference between
        .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 582 ----------------------------------------
        .               /// v.swap(2, 4);
        .               /// assert!(v == ["a", "b", "e", "d", "c"]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        .               #[inline]
        .               #[track_caller]
        .               pub const fn swap(&mut self, a: usize, b: usize) {
   12,018 ( 0.00%)          let _ = &self[a];
   18,079 ( 0.00%)          let _ = &self[b];
        .           
        .                   // SAFETY: we just checked that both `a` and `b` are in bounds
        .                   unsafe { self.swap_unchecked(a, b) }
        .               }
        .           
        .               /// Swaps two elements in the slice, without doing bounds checking.
        .               ///
        .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
        .           
        .                       // Because this function is first compiled in isolation,
        .                       // this check tells LLVM that the indexing below is
        .                       // in-bounds.  Then after inlining -- once the actual
        .                       // lengths of the slices are known -- it's removed.
        .                       let (a, b) = (&mut a[..n], &mut b[..n]);
        .           
        .                       for i in 0..n {
      254 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns an iterator over the slice.
        .               ///
        .               /// # Examples
        .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
        .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
        .               ///     assert_eq!(right, []);
        .               /// }
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
        .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
       18 ( 0.00%)          assert!(mid <= self.len());
        .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
        .                   // fulfills the requirements of `from_raw_parts_mut`.
        .                   unsafe { self.split_at_unchecked(mid) }
        .               }
        .           
        .               /// Divides one mutable slice into two at an index.
        .               ///
        .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
        .               /// left[1] = 2;
        .               /// right[1] = 4;
        .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
        .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
   14,498 ( 0.00%)          assert!(mid <= self.len());
        .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
        .                   // fulfills the requirements of `from_raw_parts_mut`.
        .                   unsafe { self.split_at_mut_unchecked(mid) }
        .               }
        .           
        .               /// Divides one slice into two at an index, without doing bounds checking.
        .               ///
        .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
        .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
        .                   let len = self.len();
        .                   let ptr = self.as_mut_ptr();
        .           
        .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
        .                   //
        .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
        .                   // is fine.
    1,871 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
        .               }
        .           
        .               /// Divides one slice into an array and a remainder slice at an index.
        .               ///
        .               /// The array will contain all indices from `[0, N)` (excluding
        .               /// the index `N` itself) and the slice will contain all
        .               /// indices from `[N, len)` (excluding the index `len` itself).
        .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
        .               /// assert!(!v.iter().any(|e| e == "hi"));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn contains(&self, x: &T) -> bool
        .               where
        .                   T: PartialEq,
        .               {
      202 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
        .               }
        .           
        .               /// Returns `true` if `needle` is a prefix of the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
        .               /// assert!(v.starts_with(&[]));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn starts_with(&self, needle: &[T]) -> bool
        .               where
        .                   T: PartialEq,
        .               {
        .                   let n = needle.len();
    3,925 ( 0.00%)          self.len() >= n && needle == &self[..n]
        .               }
        .           
        .               /// Returns `true` if `needle` is a suffix of the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
        .               /// assert!(v.ends_with(&[]));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn ends_with(&self, needle: &[T]) -> bool
        .               where
        .                   T: PartialEq,
        .               {
        .                   let (m, n) = (self.len(), needle.len());
    2,210 ( 0.00%)          m >= n && needle == &self[m - n..]
        .               }
        .           
        .               /// Returns a subslice with the prefix removed.
        .               ///
        .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
        .               /// If `prefix` is empty, simply returns the original slice.
        .               ///
        .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
        .               /// s.insert(idx, num);
        .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
        .               where
        .                   T: Ord,
        .               {
        3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
        .               }
        .           
        .               /// Binary searches this sorted slice with a comparator function.
        .               ///
        .               /// The comparator function should implement an order consistent
        .               /// with the sort order of the underlying slice, returning an
        .               /// order code that indicates whether its argument is `Less`,
        .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
        .               #[inline]
        .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
        .               where
        .                   F: FnMut(&'a T) -> Ordering,
        .               {
        .                   let mut size = self.len();
        .                   let mut left = 0;
        .                   let mut right = size;
3,532,240 ( 0.09%)          while left < right {
3,007,986 ( 0.08%)              let mid = left + size / 2;
        .           
        .                       // SAFETY: the call is made safe by the following invariants:
        .                       // - `mid >= 0`
        .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
  483,957 ( 0.01%)              let cmp = f(unsafe { self.get_unchecked(mid) });
        .           
        .                       // The reason why we use if/else control flow rather than match
        .                       // is because match reorders comparison operations, which is perf sensitive.
        .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
  805,040 ( 0.02%)              if cmp == Less {
  888,225 ( 0.02%)                  left = mid + 1;
  540,968 ( 0.01%)              } else if cmp == Greater {
        .                           right = mid;
        .                       } else {
        .                           // SAFETY: same as the `get_unchecked` above
        .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
        .                           return Ok(mid);
        .                       }
        .           
2,391,810 ( 0.06%)              size = right - left;
        .                   }
        .                   Err(left)
        .               }
        .           
        .               /// Binary searches this sorted slice with a key extraction function.
        .               ///
        .               /// Assumes that the slice is sorted by the key, for instance with
        .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
        .                   #[track_caller]
        .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
        .                       panic!(
        .                           "source slice length ({}) does not match destination slice length ({})",
        .                           src_len, dst_len,
        .                       );
        .                   }
        .           
  261,208 ( 0.01%)          if self.len() != src.len() {
        .                       len_mismatch_fail(self.len(), src.len());
        .                   }
        .           
        .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
        .                   // checked to have the same length. The slices cannot overlap because
        .                   // mutable references are exclusive.
        .                   unsafe {
        .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3382 ----------------------------------------
        .                   }
        .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
        .                   let ts: usize = mem::size_of::<U>() / gcd;
        .                   let us: usize = mem::size_of::<T>() / gcd;
        .           
        .                   // Armed with this knowledge, we can find how many `U`s we can fit!
        .                   let us_len = self.len() / ts * us;
        .                   // And how many `T`s will be in the trailing slice!
    2,574 ( 0.00%)          let ts_len = self.len() % ts;
        .                   (us_len, ts_len)
        .               }
        .           
        .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
        .               /// maintained.
        .               ///
        .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
        .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
        .                       return (self, &[], &[]);
        .                   }
        .           
        .                   // First, find at what point do we split between the first and 2nd slice. Easy with
        .                   // ptr.align_offset.
        .                   let ptr = self.as_ptr();
        .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
        .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
    2,574 ( 0.00%)          if offset > self.len() {
        .                       (self, &[], &[])
        .                   } else {
        .                       let (left, rest) = self.split_at(offset);
        .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
        .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
        .                       // since the caller guarantees that we can transmute `T` to `U` safely.
        .                       unsafe {
        .                           (
        .                               left,
        .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
    2,574 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
        .                           )
        .                       }
        .                   }
        .               }
        .           
        .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
        .               /// maintained.
        .               ///
-- line 3456 ----------------------------------------

2,477,099 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/levels.rs
--------------------------------------------------------------------------------
Ir                 

-- line 20 ----------------------------------------
        .               Level, Lint, LintId,
        .           };
        .           use rustc_session::parse::feature_err;
        .           use rustc_session::Session;
        .           use rustc_span::symbol::{sym, Symbol};
        .           use rustc_span::{source_map::MultiSpan, Span, DUMMY_SP};
        .           use tracing::debug;
        .           
        9 ( 0.00%)  fn lint_levels(tcx: TyCtxt<'_>, (): ()) -> LintLevelMap {
        .               let store = unerased_lint_store(tcx);
        .               let levels =
        6 ( 0.00%)          LintLevelsBuilder::new(tcx.sess, false, &store, &tcx.resolutions(()).registered_tools);
       13 ( 0.00%)      let mut builder = LintLevelMapBuilder { levels, tcx };
        3 ( 0.00%)      let krate = tcx.hir().krate();
        .           
        2 ( 0.00%)      builder.levels.id_to_set.reserve(krate.owners.len() + 1);
        .           
        8 ( 0.00%)      let push = builder.levels.push(tcx.hir().attrs(hir::CRATE_HIR_ID), true);
        .               builder.levels.register_id(hir::CRATE_HIR_ID);
        .               tcx.hir().walk_toplevel_module(&mut builder);
        .               builder.levels.pop(push);
        .           
       16 ( 0.00%)      builder.levels.build_map()
        9 ( 0.00%)  }
        .           
        .           pub struct LintLevelsBuilder<'s> {
        .               sess: &'s Session,
        .               sets: LintLevelSets,
        .               id_to_set: FxHashMap<HirId, LintStackIndex>,
        .               cur: LintStackIndex,
        .               warn_about_weird_lints: bool,
        .               store: &'s LintStore,
-- line 51 ----------------------------------------
-- line 53 ----------------------------------------
        .           }
        .           
        .           pub struct BuilderPush {
        .               prev: LintStackIndex,
        .               pub changed: bool,
        .           }
        .           
        .           impl<'s> LintLevelsBuilder<'s> {
       52 ( 0.00%)      pub fn new(
        .                   sess: &'s Session,
        .                   warn_about_weird_lints: bool,
        .                   store: &'s LintStore,
        .                   registered_tools: &'s RegisteredTools,
        .               ) -> Self {
       44 ( 0.00%)          let mut builder = LintLevelsBuilder {
        .                       sess,
        4 ( 0.00%)              sets: LintLevelSets::new(),
        .                       cur: COMMAND_LINE,
        .                       id_to_set: Default::default(),
        .                       warn_about_weird_lints,
        .                       store,
        .                       registered_tools,
        .                   };
        .                   builder.process_command_line(sess, store);
       12 ( 0.00%)          assert_eq!(builder.sets.list.len(), 1);
        .                   builder
       36 ( 0.00%)      }
        .           
        .               pub(crate) fn sess(&self) -> &Session {
   21,742 ( 0.00%)          self.sess
        .               }
        .           
        .               pub(crate) fn lint_store(&self) -> &LintStore {
        .                   self.store
        .               }
        .           
        .               fn process_command_line(&mut self, sess: &Session, store: &LintStore) {
        .                   let mut specs = FxHashMap::default();
        8 ( 0.00%)          self.sets.lint_cap = sess.opts.lint_cap.unwrap_or(Level::Forbid);
        .           
        8 ( 0.00%)          for &(ref lint_name, level) in &sess.opts.lint_opts {
       40 ( 0.00%)              store.check_lint_name_cmdline(sess, &lint_name, level, self.registered_tools);
        .                       let orig_level = level;
       16 ( 0.00%)              let lint_flag_val = Symbol::intern(lint_name);
        .           
       40 ( 0.00%)              let ids = match store.find_lints(&lint_name) {
       32 ( 0.00%)                  Ok(ids) => ids,
        .                           Err(_) => continue, // errors handled in check_lint_name_cmdline above
        .                       };
       24 ( 0.00%)              for id in ids {
        .                           // ForceWarn and Forbid cannot be overriden
        .                           if let Some((Level::ForceWarn | Level::Forbid, _)) = specs.get(&id) {
        .                               continue;
        .                           }
        .           
       32 ( 0.00%)                  self.check_gated_lint(id, DUMMY_SP);
        .                           let src = LintLevelSource::CommandLine(lint_flag_val, orig_level);
       16 ( 0.00%)                  specs.insert(id, (level, src));
        .                       }
        .                   }
        .           
       32 ( 0.00%)          self.cur = self.sets.list.push(LintSet { specs, parent: COMMAND_LINE });
        .               }
        .           
        .               /// Attempts to insert the `id` to `level_src` map entry. If unsuccessful
        .               /// (e.g. if a forbid was already inserted on the same scope), then emits a
        .               /// diagnostic with no change to `specs`.
    2,332 ( 0.00%)      fn insert_spec(
        .                   &mut self,
        .                   specs: &mut FxHashMap<LintId, LevelAndSource>,
        .                   id: LintId,
    1,272 ( 0.00%)          (level, src): LevelAndSource,
        .               ) {
    1,060 ( 0.00%)          let (old_level, old_src) =
    1,484 ( 0.00%)              self.sets.get_lint_level(id.lint, self.cur, Some(&specs), &self.sess);
        .                   // Setting to a non-forbid level is an error if the lint previously had
        .                   // a forbid level. Note that this is not necessarily true even with a
        .                   // `#[forbid(..)]` attribute present, as that is overriden by `--cap-lints`.
        .                   //
        .                   // This means that this only errors if we're truly lowering the lint
        .                   // level from forbid.
      212 ( 0.00%)          if level != Level::Forbid {
      848 ( 0.00%)              if let Level::Forbid = old_level {
        .                           // Backwards compatibility check:
        .                           //
        .                           // We used to not consider `forbid(lint_group)`
        .                           // as preventing `allow(lint)` for some lint `lint` in
        .                           // `lint_group`. For now, issue a future-compatibility
        .                           // warning for this case.
        .                           let id_name = id.lint.name_lower();
        .                           let fcw_warning = match old_src {
-- line 143 ----------------------------------------
-- line 202 ----------------------------------------
        .                           if !fcw_warning {
        .                               return;
        .                           }
        .                       }
        .                   }
        .                   if let Level::ForceWarn = old_level {
        .                       specs.insert(id, (old_level, old_src));
        .                   } else {
      848 ( 0.00%)              specs.insert(id, (level, src));
        .                   }
    1,696 ( 0.00%)      }
        .           
        .               /// Pushes a list of AST lint attributes onto this context.
        .               ///
        .               /// This function will return a `BuilderPush` object which should be passed
        .               /// to `pop` when this scope for the attributes provided is exited.
        .               ///
        .               /// This function will perform a number of tasks:
        .               ///
        .               /// * It'll validate all lint-related attributes in `attrs`
        .               /// * It'll mark all lint-related attributes as used
        .               /// * Lint levels will be updated based on the attributes provided
        .               /// * Lint attributes are validated, e.g., a `#[forbid]` can't be switched to
        .               ///   `#[allow]`
        .               ///
        .               /// Don't forget to call `pop`!
1,546,656 ( 0.04%)      pub(crate) fn push(&mut self, attrs: &[ast::Attribute], is_crate_node: bool) -> BuilderPush {
        .                   let mut specs = FxHashMap::default();
  386,664 ( 0.01%)          let sess = self.sess;
  193,332 ( 0.00%)          let bad_attr = |span| struct_span_err!(sess, span, E0452, "malformed lint attribute input");
        .                   for attr in attrs {
    7,679 ( 0.00%)              let Some(level) = Level::from_symbol(attr.name_or_empty()) else {
        .                           continue
        .                       };
        .           
      693 ( 0.00%)              let Some(mut metas) = attr.meta_item_list() else {
        .                           continue
        .                       };
        .           
       77 ( 0.00%)              if metas.is_empty() {
        .                           // FIXME (#55112): issue unused-attributes lint for `#[level()]`
        .                           continue;
        .                       }
        .           
        .                       // Before processing the lint names, look for a reason (RFC 2383)
        .                       // at the end.
        .                       let mut reason = None;
       77 ( 0.00%)              let tail_li = &metas[metas.len() - 1];
      231 ( 0.00%)              if let Some(item) = tail_li.meta_item() {
      385 ( 0.00%)                  match item.kind {
        .                               ast::MetaItemKind::Word => {} // actual lint names handled later
        .                               ast::MetaItemKind::NameValue(ref name_value) => {
        .                                   if item.path == sym::reason {
        .                                       // FIXME (#55112): issue unused-attributes lint if we thereby
        .                                       // don't have any lint names (`#[level(reason = "foo")]`)
        .                                       if let ast::LitKind::Str(rationale, _) = name_value.kind {
        .                                           if !self.sess.features_untracked().lint_reasons {
        .                                               feature_err(
-- line 259 ----------------------------------------
-- line 279 ----------------------------------------
        .                                   }
        .                               }
        .                               ast::MetaItemKind::List(_) => {
        .                                   bad_attr(item.span).span_label(item.span, "bad attribute argument").emit();
        .                               }
        .                           }
        .                       }
        .           
    2,018 ( 0.00%)              for li in metas {
      380 ( 0.00%)                  let sp = li.span();
      190 ( 0.00%)                  let mut meta_item = match li {
    1,710 ( 0.00%)                      ast::NestedMetaItem::MetaItem(meta_item) if meta_item.is_word() => meta_item,
        .                               _ => {
        .                                   let mut err = bad_attr(sp);
        .                                   let mut add_label = true;
        .                                   if let Some(item) = li.meta_item() {
        .                                       if let ast::MetaItemKind::NameValue(_) = item.kind {
        .                                           if item.path == sym::reason {
        .                                               err.span_label(sp, "reason in lint attribute must come last");
        .                                               add_label = false;
-- line 298 ----------------------------------------
-- line 301 ----------------------------------------
        .                                   }
        .                                   if add_label {
        .                                       err.span_label(sp, "bad attribute argument");
        .                                   }
        .                                   err.emit();
        .                                   continue;
        .                               }
        .                           };
      285 ( 0.00%)                  let tool_ident = if meta_item.path.segments.len() > 1 {
        .                               Some(meta_item.path.segments.remove(0).ident)
        .                           } else {
       95 ( 0.00%)                      None
        .                           };
       95 ( 0.00%)                  let tool_name = tool_ident.map(|ident| ident.name);
      285 ( 0.00%)                  let name = pprust::path_to_string(&meta_item.path);
        .                           let lint_result =
      475 ( 0.00%)                      self.store.check_lint_name(&name, tool_name, self.registered_tools);
      285 ( 0.00%)                  match &lint_result {
        .                               CheckLintNameResult::Ok(ids) => {
        .                                   let src = LintLevelSource::Node(
        .                                       meta_item.path.segments.last().expect("empty lint name").ident.name,
        .                                       sp,
        .                                       reason,
        .                                   );
      519 ( 0.00%)                          for &id in *ids {
    1,060 ( 0.00%)                              self.check_gated_lint(id, attr.span);
    2,544 ( 0.00%)                              self.insert_spec(&mut specs, id, (level, src));
        .                                   }
        .                               }
        .           
        .                               CheckLintNameResult::Tool(result) => {
        .                                   match *result {
        .                                       Ok(ids) => {
        .                                           let complete_name =
        .                                               &format!("{}::{}", tool_ident.unwrap().name, name);
-- line 335 ----------------------------------------
-- line 454 ----------------------------------------
        .                                       }
        .                                       db.emit();
        .                                   });
        .                               }
        .                           }
        .                           // If this lint was renamed, apply the new lint instead of ignoring the attribute.
        .                           // This happens outside of the match because the new lint should be applied even if
        .                           // we don't warn about the name change.
      475 ( 0.00%)                  if let CheckLintNameResult::Warning(_, Some(new_name)) = lint_result {
        .                               // Ignore any errors or warnings that happen because the new name is inaccurate
        .                               // NOTE: `new_name` already includes the tool name, so we don't have to add it again.
        .                               if let CheckLintNameResult::Ok(ids) =
        .                                   self.store.check_lint_name(&new_name, None, self.registered_tools)
        .                               {
        .                                   let src = LintLevelSource::Node(Symbol::intern(&new_name), sp, reason);
        .                                   for &id in ids {
        .                                       self.check_gated_lint(id, attr.span);
        .                                       self.insert_spec(&mut specs, id, (level, src));
        .                                   }
        .                               } else {
        .                                   panic!("renamed lint does not exist: {}", new_name);
        .                               }
        .                           }
      380 ( 0.00%)              }
        .                   }
        .           
  386,664 ( 0.01%)          if !is_crate_node {
      148 ( 0.00%)              for (id, &(level, ref src)) in specs.iter() {
      222 ( 0.00%)                  if !id.lint.crate_level_only {
        .                               continue;
        .                           }
        .           
        .                           let LintLevelSource::Node(lint_attr_name, lint_attr_span, _) = *src else {
        .                               continue
        .                           };
        .           
        .                           let lint = builtin::UNUSED_ATTRIBUTES;
-- line 490 ----------------------------------------
-- line 505 ----------------------------------------
        .                                   db.emit();
        .                               },
        .                           );
        .                           // don't set a separate error for every lint in the group
        .                           break;
        .                       }
        .                   }
        .           
  193,332 ( 0.00%)          let prev = self.cur;
  193,332 ( 0.00%)          if !specs.is_empty() {
      462 ( 0.00%)              self.cur = self.sets.list.push(LintSet { specs, parent: prev });
        .                   }
        .           
        .                   BuilderPush { prev, changed: prev != self.cur }
1,739,988 ( 0.04%)      }
        .           
        .               /// Checks if the lint is gated on a feature that is not enabled.
    1,540 ( 0.00%)      fn check_gated_lint(&self, lint_id: LintId, span: Span) {
      660 ( 0.00%)          if let Some(feature) = lint_id.lint.feature_gate {
        .                       if !self.sess.features_untracked().enabled(feature) {
        .                           feature_err(
        .                               &self.sess.parse_sess,
        .                               feature,
        .                               span,
        .                               &format!("the `{}` lint is unstable", lint_id.lint.name_lower()),
        .                           )
        .                           .emit();
        .                       }
        .                   }
    1,760 ( 0.00%)      }
        .           
        .               /// Called after `push` when the scope of a set of attributes are exited.
        .               pub fn pop(&mut self, push: BuilderPush) {
  244,737 ( 0.01%)          self.cur = push.prev;
  128,629 ( 0.00%)      }
        .           
        .               /// Find the lint level for a lint.
        .               pub fn lint_level(&self, lint: &'static Lint) -> (Level, LintLevelSource) {
       53 ( 0.00%)          self.sets.get_lint_level(lint, self.cur, None, self.sess)
        .               }
        .           
        .               /// Used to emit a lint-related diagnostic based on the current state of
        .               /// this lint context.
        .               pub fn struct_lint(
        .                   &self,
        .                   lint: &'static Lint,
        .                   span: Option<MultiSpan>,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
       12 ( 0.00%)          let (level, src) = self.lint_level(lint);
        3 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, span, decorate)
        .               }
        .           
        .               /// Registers the ID provided with the current set of lints stored in
        .               /// this context.
        .               pub fn register_id(&mut self, id: HirId) {
       71 ( 0.00%)          self.id_to_set.insert(id, self.cur);
        .               }
        .           
        .               pub fn build_map(self) -> LintLevelMap {
        8 ( 0.00%)          LintLevelMap { sets: self.sets, id_to_set: self.id_to_set }
        .               }
        .           }
        .           
        .           struct LintLevelMapBuilder<'tcx> {
        .               levels: LintLevelsBuilder<'tcx>,
        .               tcx: TyCtxt<'tcx>,
        .           }
        .           
        .           impl LintLevelMapBuilder<'_> {
        .               fn with_lint_attrs<F>(&mut self, id: hir::HirId, f: F)
        .               where
        .                   F: FnOnce(&mut Self),
        .               {
        .                   let is_crate_hir = id == hir::CRATE_HIR_ID;
  383,824 ( 0.01%)          let attrs = self.tcx.hir().attrs(id);
  384,036 ( 0.01%)          let push = self.levels.push(attrs, is_crate_hir);
   64,012 ( 0.00%)          if push.changed {
        .                       self.levels.register_id(id);
        .                   }
        .                   f(self);
        .                   self.levels.pop(push);
        .               }
        .           }
        .           
        .           impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               fn nested_visit_map(&mut self) -> Self::Map {
      342 ( 0.00%)          self.tcx.hir()
        .               }
        .           
        .               fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {
      294 ( 0.00%)          self.with_lint_attrs(param.hir_id, |builder| {
        .                       intravisit::walk_param(builder, param);
        .                   });
        .               }
        .           
        .               fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {
      128 ( 0.00%)          self.with_lint_attrs(it.hir_id(), |builder| {
      384 ( 0.00%)              intravisit::walk_item(builder, it);
        .                   });
        .               }
        .           
        .               fn visit_foreign_item(&mut self, it: &'tcx hir::ForeignItem<'tcx>) {
        .                   self.with_lint_attrs(it.hir_id(), |builder| {
        .                       intravisit::walk_foreign_item(builder, it);
        .                   })
        .               }
        .           
        .               fn visit_stmt(&mut self, e: &'tcx hir::Stmt<'tcx>) {
        .                   // We will call `with_lint_attrs` when we walk
        .                   // the `StmtKind`. The outer statement itself doesn't
        .                   // define the lint levels.
      696 ( 0.00%)          intravisit::walk_stmt(self, e);
        .               }
        .           
      675 ( 0.00%)      fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {
  126,806 ( 0.00%)          self.with_lint_attrs(e.hir_id, |builder| {
  242,347 ( 0.01%)              intravisit::walk_expr(builder, e);
        .                   })
      600 ( 0.00%)      }
        .           
        .               fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {
       51 ( 0.00%)          self.with_lint_attrs(s.hir_id, |builder| {
        .                       intravisit::walk_field_def(builder, s);
        .                   })
        .               }
        .           
        .               fn visit_variant(
        .                   &mut self,
        .                   v: &'tcx hir::Variant<'tcx>,
        .                   g: &'tcx hir::Generics<'tcx>,
        .                   item_id: hir::HirId,
        .               ) {
       50 ( 0.00%)          self.with_lint_attrs(v.id, |builder| {
        .                       intravisit::walk_variant(builder, v, g, item_id);
        .                   })
        .               }
        .           
        .               fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {
      150 ( 0.00%)          self.with_lint_attrs(l.hir_id, |builder| {
      300 ( 0.00%)              intravisit::walk_local(builder, l);
        .                   })
        .               }
        .           
        .               fn visit_arm(&mut self, a: &'tcx hir::Arm<'tcx>) {
      266 ( 0.00%)          self.with_lint_attrs(a.hir_id, |builder| {
      532 ( 0.00%)              intravisit::walk_arm(builder, a);
        .                   })
        .               }
        .           
        .               fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {
        .                   self.with_lint_attrs(trait_item.hir_id(), |builder| {
        .                       intravisit::walk_trait_item(builder, trait_item);
        .                   });
        .               }
        .           
        .               fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {
       84 ( 0.00%)          self.with_lint_attrs(impl_item.hir_id(), |builder| {
      252 ( 0.00%)              intravisit::walk_impl_item(builder, impl_item);
        .                   });
        .               }
        .           }
        .           
        .           pub fn provide(providers: &mut Providers) {
        2 ( 0.00%)      providers.lint_levels = lint_levels;
        .           }

  195,919 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/levels.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir                 

-- line 118 ----------------------------------------
        .               stability: InternedSet<'tcx, attr::Stability>,
        .           
        .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
        .               const_stability: InternedSet<'tcx, attr::ConstStability>,
        .           }
        .           
        .           impl<'tcx> CtxtInterners<'tcx> {
        .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
       17 ( 0.00%)          CtxtInterners {
        .                       arena,
        .                       type_: Default::default(),
        .                       type_list: Default::default(),
        .                       substs: Default::default(),
        .                       region: Default::default(),
        .                       poly_existential_predicates: Default::default(),
        .                       canonical_var_infos: Default::default(),
        .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .                       stability: Default::default(),
        .                       const_stability: Default::default(),
        .                   }
        .               }
        .           
        .               /// Interns a type.
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline(never)]
1,257,936 ( 0.03%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
        .                   self.type_
  786,210 ( 0.02%)              .intern(kind, |kind| {
   26,870 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
        .           
        .                           let ty_struct = TyS {
   53,740 ( 0.00%)                      kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(ty_struct))
        .                       })
        .                       .0
1,415,178 ( 0.04%)      }
        .           
        .               #[inline(never)]
1,002,520 ( 0.03%)      fn intern_predicate(
        .                   &self,
        .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> &'tcx PredicateInner<'tcx> {
        .                   self.predicate
  877,205 ( 0.02%)              .intern(kind, |kind| {
   49,002 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
        .           
        .                           let predicate_struct = PredicateInner {
        .                               kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(predicate_struct))
        .                       })
        .                       .0
1,127,835 ( 0.03%)      }
        .           }
        .           
        .           pub struct CommonTypes<'tcx> {
        .               pub unit: Ty<'tcx>,
        .               pub bool: Ty<'tcx>,
        .               pub char: Ty<'tcx>,
        .               pub isize: Ty<'tcx>,
        .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
        .           /// safely used as a key in the maps of a TypeckResults. For that to be
        .           /// the case, the HirId must have the same `owner` as all the other IDs in
        .           /// this table (signified by `hir_owner`). Otherwise the HirId
        .           /// would be in a different frame of reference and using its `local_id`
        .           /// would result in lookup errors, or worse, in silently wrong data being
        .           /// stored/returned.
        .           #[inline]
        .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
1,199,037 ( 0.03%)      if hir_id.owner != hir_owner {
        .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
        .               }
        .           }
        .           
        .           #[cold]
        .           #[inline(never)]
        .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
        .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
        .           }
        .           
        .           impl<'a, V> LocalTableInContext<'a, V> {
        .               pub fn contains_key(&self, id: hir::HirId) -> bool {
        .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.data.contains_key(&id.local_id)
        .               }
        .           
  835,980 ( 0.02%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
  163,261 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
  163,261 ( 0.00%)          self.data.get(&id.local_id)
  672,830 ( 0.02%)      }
        .           
        .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
        .                   self.data.iter()
        .               }
        .           }
        .           
        .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
        .               type Output = V;
        .           
      666 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
        .                   self.get(key).expect("LocalTableInContext: key not found")
      444 ( 0.00%)      }
        .           }
        .           
        .           pub struct LocalTableInContextMut<'a, V> {
        .               hir_owner: LocalDefId,
        .               data: &'a mut ItemLocalMap<V>,
        .           }
        .           
        .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
        .               pub treat_byte_string_as_slice: ItemLocalSet,
        .           
        .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
        .               /// on closure size.
        .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
        .           }
        .           
        .           impl<'tcx> TypeckResults<'tcx> {
    2,826 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
   33,441 ( 0.00%)          TypeckResults {
        .                       hir_owner,
        .                       type_dependent_defs: Default::default(),
        .                       field_indices: Default::default(),
        .                       user_provided_types: Default::default(),
        .                       user_provided_sigs: Default::default(),
        .                       node_types: Default::default(),
        .                       node_substs: Default::default(),
        .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
        .                       tainted_by_errors: None,
        .                       concrete_opaque_types: Default::default(),
        .                       closure_min_captures: Default::default(),
        .                       closure_fake_reads: Default::default(),
        .                       generator_interior_types: ty::Binder::dummy(Default::default()),
        .                       treat_byte_string_as_slice: Default::default(),
        .                       closure_size_eval: Default::default(),
        .                   }
    2,826 ( 0.00%)      }
        .           
        .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
  129,921 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
   86,614 ( 0.00%)          match *qpath {
   19,680 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
        .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
        .                           .type_dependent_def(id)
  240,162 ( 0.01%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
        .                   }
  216,535 ( 0.01%)      }
        .           
    9,977 ( 0.00%)      pub fn type_dependent_defs(
        .                   &self,
        .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
   20,740 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
    9,977 ( 0.00%)      }
        .           
   50,414 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
   91,114 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
  100,828 ( 0.00%)      }
        .           
    2,692 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
        .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    2,692 ( 0.00%)      }
        .           
   86,008 ( 0.00%)      pub fn type_dependent_defs_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
   86,008 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
   86,008 ( 0.00%)      }
        .           
        .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
      836 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
      150 ( 0.00%)      }
        .           
        .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    1,230 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
      615 ( 0.00%)      }
        .           
        .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
   21,934 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
   10,967 ( 0.00%)      }
        .           
        .               pub fn user_provided_types_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
      196 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
       98 ( 0.00%)      }
        .           
        .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
  152,678 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
   76,339 ( 0.00%)      }
        .           
        .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
  302,474 ( 0.01%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
  151,237 ( 0.00%)      }
        .           
1,660,746 ( 0.04%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
  276,791 ( 0.01%)          self.node_type_opt(id).unwrap_or_else(|| {
        .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
        .                   })
1,383,955 ( 0.04%)      }
        .           
  341,951 ( 0.01%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
  341,951 ( 0.01%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_types.get(&id.local_id).cloned()
  683,902 ( 0.02%)      }
        .           
        .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    1,782 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
      891 ( 0.00%)      }
        .           
   86,796 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
   86,796 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
  173,592 ( 0.00%)      }
        .           
   65,165 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
   65,165 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned()
  130,330 ( 0.00%)      }
        .           
        .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
        .               // doesn't provide type parameter substitutions.
        .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    1,188 ( 0.00%)          self.node_type(pat.hir_id)
        .               }
        .           
        .               // Returns the type of an expression as a monotype.
        .               //
        .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
        .               // some cases, we insert `Adjustment` annotations such as auto-deref or
        .               // auto-ref.  The type returned by this function does not consider such
        .               // adjustments.  See `expr_ty_adjusted()` instead.
        .               //
        .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
        .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
        .               // instead of "fn(ty) -> T with T = isize".
        .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
  338,918 ( 0.01%)          self.node_type(expr.hir_id)
        .               }
        .           
        .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
  259,563 ( 0.01%)          self.node_type_opt(expr.hir_id)
        .               }
        .           
        .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  129,802 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
   64,901 ( 0.00%)      }
        .           
        .               pub fn adjustments_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  133,978 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
   66,989 ( 0.00%)      }
        .           
  129,098 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
  258,196 ( 0.01%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
        .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
  258,196 ( 0.01%)      }
        .           
        .               /// Returns the type of `expr`, considering any `Adjustment`
        .               /// entry recorded for that expression.
      690 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
      138 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
      288 ( 0.00%)      }
        .           
      665 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
      133 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
      384 ( 0.00%)      }
        .           
   10,763 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
        .                   // Only paths and method calls/overloaded operators have
        .                   // entries in type_dependent_defs, ignore the former here.
   21,526 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
        .                       return false;
        .                   }
        .           
   21,970 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
   21,526 ( 0.00%)      }
        .           
    2,991 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
        .                   self.pat_binding_modes().get(id).copied().or_else(|| {
        .                       s.delay_span_bug(sp, "missing binding mode");
        .                       None
        .                   })
    3,988 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
    2,597 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
      800 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    1,324 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
      662 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    3,938 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    1,969 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    1,286 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
      643 ( 0.00%)      }
        .           
        .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
        .               /// by the closure.
    1,000 ( 0.00%)      pub fn closure_min_captures_flattened(
        .                   &self,
        .                   closure_def_id: DefId,
        .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
        .                   self.closure_min_captures
        .                       .get(&closure_def_id)
        .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
        .                       .into_iter()
        .                       .flatten()
    1,250 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
      278 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
      139 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
        .               }
        .           
        .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
      722 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
      361 ( 0.00%)      }
        .           
        .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
      444 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
      222 ( 0.00%)      }
        .           
        .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
      278 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
      139 ( 0.00%)      }
        .           
        .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
        .               }
        .           
       36 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
       12 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
        .                   self.coercion_casts.contains(&hir_id.local_id)
       24 ( 0.00%)      }
        .           
        .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
        .                   self.coercion_casts.insert(id);
        .               }
        .           
        .               pub fn coercion_casts(&self) -> &ItemLocalSet {
      139 ( 0.00%)          &self.coercion_casts
      139 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
        .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
        .                   let ty::TypeckResults {
        .                       hir_owner,
        .                       ref type_dependent_defs,
        .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
        .                   const START_INDEX = 0,
        .               }
        .           }
        .           
        .           /// Mapping of type annotation indices to canonical user type annotations.
        .           pub type CanonicalUserTypeAnnotations<'tcx> =
        .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
        .           
      132 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
        .           pub struct CanonicalUserTypeAnnotation<'tcx> {
        .               pub user_ty: CanonicalUserType<'tcx>,
        .               pub span: Span,
       66 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
        .           }
        .           
        .           /// Canonicalized user type annotation.
        .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
        .           
        .           impl<'tcx> CanonicalUserType<'tcx> {
        .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
        .               /// i.e., each thing is mapped to a canonical variable with the same index.
      256 ( 0.00%)      pub fn is_identity(&self) -> bool {
      512 ( 0.00%)          match self.value {
        .                       UserType::Ty(_) => false,
        .                       UserType::TypeOf(_, user_substs) => {
      256 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
        .                               return false;
        .                           }
        .           
        .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
        .                               match kind.unpack() {
      668 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
        .                                       ty::Bound(debruijn, b) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
      334 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == b.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
       44 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
        .                                       ty::ReLateBound(debruijn, br) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
        .                                           assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == br.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
        .                                           cvar == b
        .                                       }
        .                                       _ => false,
        .                                   },
        .                               }
        .                           })
        .                       }
        .                   }
      512 ( 0.00%)      }
        .           }
        .           
        .           /// A user-given type annotation attached to a constant. These arise
        .           /// from constants that are named via paths, like `Foo::<A>::new` and
        .           /// so forth.
      396 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
    2,848 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub enum UserType<'tcx> {
        .               Ty(Ty<'tcx>),
        .           
        .               /// The canonical type is the result of `type_of(def_id)` with the
        .               /// given substitutions applied.
        .               TypeOf(DefId, UserSubsts<'tcx>),
        .           }
        .           
        .           impl<'tcx> CommonTypes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
      111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
        .           
        .                   CommonTypes {
        .                       unit: mk(Tuple(List::empty())),
        .                       bool: mk(Bool),
        .                       char: mk(Char),
        .                       never: mk(Never),
        .                       isize: mk(Int(ty::IntTy::Isize)),
        .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
        .           
        .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonLifetimes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
       67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
        .           
        .                   CommonLifetimes {
        5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
        5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
        5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonConsts<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
        6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
        .           
        .                   CommonConsts {
        .                       unit: mk_const(ty::Const {
        .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
        .                           ty: types.unit,
        .                       }),
        .                   }
        .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
        .           
        .               /// Stores memory for globals (statics/consts).
        .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
        .           
        .               output_filenames: Arc<OutputFilenames>,
        .           }
        .           
        .           impl<'tcx> TyCtxt<'tcx> {
  105,810 ( 0.00%)      pub fn typeck_opt_const_arg(
        .                   self,
        .                   def: ty::WithOptConstParam<LocalDefId>,
        .               ) -> &'tcx TypeckResults<'tcx> {
   42,324 ( 0.00%)          if let Some(param_did) = def.const_param_did {
        .                       self.typeck_const_arg((def.did, param_did))
        .                   } else {
        .                       self.typeck(def.did)
        .                   }
   84,648 ( 0.00%)      }
        .           
      474 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
      158 ( 0.00%)          self.arena.alloc(Steal::new(thir))
      632 ( 0.00%)      }
        .           
    2,620 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
      524 ( 0.00%)          self.arena.alloc(Steal::new(mir))
    3,668 ( 0.00%)      }
        .           
      632 ( 0.00%)      pub fn alloc_steal_promoted(
        .                   self,
        .                   promoted: IndexVec<Promoted, Body<'tcx>>,
        .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
      158 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
      790 ( 0.00%)      }
        .           
      369 ( 0.00%)      pub fn alloc_adt_def(
        .                   self,
        .                   did: DefId,
        .                   kind: AdtKind,
        .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
        .                   repr: ReprOptions,
        .               ) -> &'tcx ty::AdtDef {
      656 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
      164 ( 0.00%)      }
        .           
        .               /// Allocates a read-only byte or string literal for `mir::interpret`.
        .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
        .                   // Create an allocation that just contains these bytes.
        .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
        .                   let alloc = self.intern_const_alloc(alloc);
        .                   self.create_memory_alloc(alloc)
        .               }
        .           
        .               /// Returns a range of the start/end indices specified with the
        .               /// `rustc_layout_scalar_valid_range` attribute.
        .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
    2,256 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    1,128 ( 0.00%)          let attrs = self.get_attrs(def_id);
    4,794 ( 0.00%)          let get = |name| {
    1,128 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
        .                           Some(attr) => attr,
        .                           None => return Bound::Unbounded,
        .                       };
        .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
        .                       if let Some(
        .                           &[
        .                               ast::NestedMetaItem::Literal(ast::Lit {
        .                                   kind: ast::LitKind::Int(a, _), ..
-- line 1111 ----------------------------------------
-- line 1114 ----------------------------------------
        .                       ) = attr.meta_item_list().as_deref()
        .                       {
        .                           Bound::Included(a)
        .                       } else {
        .                           self.sess
        .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
        .                           Bound::Unbounded
        .                       }
    5,640 ( 0.00%)          };
    1,692 ( 0.00%)          (
    1,692 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
      846 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
        .                   )
    2,256 ( 0.00%)      }
        .           
        .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
        .                   value.lift_to_tcx(self)
        .               }
        .           
        .               /// Creates a type context and call the closure with a `TyCtxt` reference
        .               /// to the context. The closure enforces that the type context and any interned
        .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
        .               /// reference to the context, to allow formatting values that need it.
       23 ( 0.00%)      pub fn create_global_ctxt(
        .                   s: &'tcx Session,
        .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
        .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
        .                   resolutions: ty::ResolverOutputs,
        .                   krate: &'tcx hir::Crate<'tcx>,
        .                   dep_graph: DepGraph,
        .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
        .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
        .                   query_kinds: &'tcx [DepKindStruct],
        .                   crate_name: &str,
        .                   output_filenames: OutputFilenames,
        .               ) -> GlobalCtxt<'tcx> {
        1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
        .                       s.fatal(&err);
        .                   });
        .                   let interners = CtxtInterners::new(arena);
        .                   let common_types = CommonTypes::new(&interners);
        .                   let common_lifetimes = CommonLifetimes::new(&interners);
        .                   let common_consts = CommonConsts::new(&interners, &common_types);
        .           
      127 ( 0.00%)          GlobalCtxt {
        .                       sess: s,
        6 ( 0.00%)              lint_store,
        .                       arena,
        2 ( 0.00%)              interners,
        5 ( 0.00%)              dep_graph,
        4 ( 0.00%)              untracked_resolutions: resolutions,
        2 ( 0.00%)              prof: s.prof.clone(),
        .                       types: common_types,
        .                       lifetimes: common_lifetimes,
        .                       consts: common_consts,
        .                       untracked_crate: krate,
        .                       on_disk_cache,
        .                       queries,
        .                       query_caches: query::QueryCaches::default(),
        .                       query_kinds,
        .                       ty_rcache: Default::default(),
        .                       pred_rcache: Default::default(),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
        .                       data_layout,
        .                       alloc_map: Lock::new(interpret::AllocMap::new()),
        .                       output_filenames: Arc::new(output_filenames),
        .                   }
        9 ( 0.00%)      }
        .           
        .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
        .                   &self.query_kinds[k as usize]
        .               }
        .           
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   ty: Ty<'tcx>,
        .                   span: S,
        .                   msg: &str,
        .               ) -> &'tcx Const<'tcx> {
        .                   self.sess.delay_span_bug(span, msg);
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
        .               }
        .           
       70 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
       10 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
       80 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
       80 ( 0.00%)      }
        .           
        .               /// Obtain all lang items of this crate and all dependencies (recursively)
1,898,218 ( 0.05%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
        .                   self.get_lang_items(())
2,440,566 ( 0.06%)      }
        .           
        .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
        .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
       21 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
        .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
       24 ( 0.00%)      }
        .           
        .               /// Obtain the diagnostic item's name
  212,765 ( 0.01%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
        .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
  243,160 ( 0.01%)      }
        .           
        .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
   76,853 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
        .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
   87,832 ( 0.00%)      }
        .           
    2,009 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
        .                   self.stability_index(())
    2,583 ( 0.00%)      }
        .           
  640,703 ( 0.02%)      pub fn features(self) -> &'tcx rustc_feature::Features {
        .                   self.features_query(())
  732,232 ( 0.02%)      }
        .           
        .               pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
        .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
   64,940 ( 0.00%)          if let Some(id) = id.as_local() {
        .                       self.untracked_resolutions.definitions.def_key(id)
        .                   } else {
    2,037 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
        .                   }
        .               }
        .           
        .               /// Converts a `DefId` into its fully expanded `DefPath` (every
        .               /// `DefId` is really just an interned `DefPath`).
        .               ///
        .               /// Note that if `id` is not local to this crate, the result will
        .               ///  be a non-local `DefPath`.
-- line 1272 ----------------------------------------
-- line 1277 ----------------------------------------
        .                   } else {
        .                       self.untracked_resolutions.cstore.def_path(id)
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    1,194 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
        .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
        .                   } else {
      188 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
        .                   if crate_num == LOCAL_CRATE {
        .                       self.sess.local_stable_crate_id()
        .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
        .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
        .                       self.def_path(def_id).to_string_no_crate_verbose()
        .                   )
        .               }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
   41,202 ( 0.00%)          &*self.untracked_resolutions.cstore
   20,601 ( 0.00%)      }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
        .                   &self.untracked_resolutions.definitions
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
       51 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
      254 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
        .                   let resolutions = &self.gcx.untracked_resolutions;
        .                   StableHashingContext::ignore_spans(
        .                       self.sess,
        .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
        .               /// If `true`, we should use the MIR-based borrowck, but also
        .               /// fall back on the AST borrowck if the MIR-based one errors.
        .               pub fn migrate_borrowck(self) -> bool {
        .                   self.borrowck_mode().migrate()
        .               }
        .           
        .               /// What mode(s) of borrowck should we run? AST? MIR? both?
        .               /// (Also considers the `#![feature(nll)]` setting.)
      278 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
        .                   // Here are the main constraints we need to deal with:
        .                   //
        .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
        .                   //    synonymous with no `-Z borrowck=...` flag at all.
        .                   //
        .                   // 2. We want to allow developers on the Nightly channel
        .                   //    to opt back into the "hard error" mode for NLL,
        .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
        .                   //   errors. (To simplify the code here, it now even overrides
        .                   //   a user's attempt to specify `-Z borrowck=compare`, which
        .                   //   we arguably do not need anymore and should remove.)
        .                   //
        .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
        .                   //
        .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
        .           
      417 ( 0.00%)          if self.features().nll {
        .                       return BorrowckMode::Mir;
        .                   }
        .           
      139 ( 0.00%)          self.sess.opts.borrowck_mode
      556 ( 0.00%)      }
        .           
        .               /// If `true`, we should use lazy normalization for constants, otherwise
        .               /// we still evaluate them eagerly.
        .               #[inline]
        .               pub fn lazy_normalization(self) -> bool {
      165 ( 0.00%)          let features = self.features();
        .                   // Note: We only use lazy normalization for generic const expressions.
       99 ( 0.00%)          features.generic_const_exprs
        .               }
        .           
        .               #[inline]
        .               pub fn local_crate_exports_generics(self) -> bool {
        .                   debug_assert!(self.sess.opts.share_generics());
        .           
        .                   self.sess.crate_types().iter().any(|crate_type| {
        .                       match crate_type {
-- line 1442 ----------------------------------------
-- line 1554 ----------------------------------------
        .                   self.mk_imm_ref(
        .                       self.lifetimes.re_static,
        .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
        .                           .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
        .                   )
        .               }
        .           
        .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
      770 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
      560 ( 0.00%)          match self.def_kind(def_id) {
        .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
        .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
        .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
        .                       },
    1,260 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
        .                   }
      630 ( 0.00%)      }
        .           
        .               pub fn type_length_limit(self) -> Limit {
        .                   self.limits(()).type_length_limit
        .               }
        .           
  288,960 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
        .                   self.limits(()).recursion_limit
  330,240 ( 0.01%)      }
        .           
        .               pub fn move_size_limit(self) -> Limit {
        .                   self.limits(()).move_size_limit
        .               }
        .           
      238 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
        .                   self.limits(()).const_eval_limit
      272 ( 0.00%)      }
        .           
        .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
        .                   iter::once(LOCAL_CRATE)
        .                       .chain(self.crates(()).iter().copied())
        .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
        .               }
        .           }
        .           
-- line 1594 ----------------------------------------
-- line 1684 ----------------------------------------
        .               /// This is the implicit state of rustc. It contains the current
        .               /// `TyCtxt` and query. It is updated when creating a local interner or
        .               /// executing a new query. Whenever there's a `TyCtxt` value available
        .               /// you should also have access to an `ImplicitCtxt` through the functions
        .               /// in this module.
        .               #[derive(Clone)]
        .               pub struct ImplicitCtxt<'a, 'tcx> {
        .                   /// The current `TyCtxt`.
        1 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
        .           
        .                   /// The current query job, if any. This is updated by `JobOwner::start` in
        .                   /// `ty::query::plumbing` when executing a query.
        .                   pub query: Option<query::QueryJobId<DepKind>>,
        .           
        .                   /// Where to store diagnostics for the current query job, if any.
        .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
        .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
        .                   pub layout_depth: usize,
        .           
        .                   /// The current dep graph task. This is used to add dependencies to queries
        .                   /// when executing them.
        .                   pub task_deps: TaskDepsRef<'a>,
        .               }
        .           
        .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
        5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
        .                       let tcx = TyCtxt { gcx };
       25 ( 0.00%)              ImplicitCtxt {
        .                           tcx,
        .                           query: None,
        .                           diagnostics: None,
        .                           layout_depth: 0,
        .                           task_deps: TaskDepsRef::Ignore,
        .                       }
        5 ( 0.00%)          }
        .               }
        .           
        .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
        .               /// to `value` during the call to `f`. It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(parallel_compiler)]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
        .           
        .               /// Sets TLV to `value` during the call to `f`.
        .               /// It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
        .                   let old = get_tlv();
   35,811 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
        .                   TLV.with(|tlv| tlv.set(value));
        .                   f()
        .               }
        .           
        .               /// Gets the pointer to the current `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
        .               }
        .           
        .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
        .               #[inline]
        .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
        .               {
        1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
        .               }
        .           
        .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
        .               #[inline]
        .               pub fn with_context_opt<F, R>(f: F) -> R
        .               where
        .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
        .               {
        .                   let context = get_tlv();
  140,357 ( 0.00%)          if context == 0 {
        .                       f(None)
        .                   } else {
        .                       // We could get an `ImplicitCtxt` pointer from another thread.
        .                       // Ensure that `ImplicitCtxt` is `Sync`.
        .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
        .           
        .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
        .                   }
-- line 1789 ----------------------------------------
-- line 1805 ----------------------------------------
        .               /// This will panic if you pass it a `TyCtxt` which is different from the current
        .               /// `ImplicitCtxt`'s `tcx` field.
        .               #[inline]
        .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
        .               {
        .                   with_context(|context| unsafe {
   69,616 ( 0.00%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
        .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
   69,554 ( 0.00%)              f(context)
        .                   })
        .               }
        .           
        .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
        .               /// Panics if there is no `ImplicitCtxt` available.
        .               #[inline]
        .               pub fn with<F, R>(f: F) -> R
        .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
        .               fn into_pointer(&self) -> *const () {
        .                   self.0 as *const _ as *const ()
        .               }
        .           }
        .           
        .           #[allow(rustc::usage_of_ty_tykind)]
        .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
  145,821 ( 0.00%)          &self.0.kind()
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   42,996 ( 0.00%)          self.0.kind().hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
  118,467 ( 0.00%)          &self.0.kind
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   14,332 ( 0.00%)          self.0.kind.hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
        .               fn borrow<'a>(&'a self) -> &'a [T] {
  171,177 ( 0.00%)          &self.0[..]
        .               }
        .           }
        .           
        .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
        .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
        .           
        .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   18,389 ( 0.00%)          self.0[..].hash(s)
        .               }
        .           }
        .           
        .           macro_rules! direct_interners {
        .               ($($name:ident: $method:ident($ty:ty),)+) => {
        .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
        .                       fn borrow<'a>(&'a self) -> &'a $ty {
   74,111 ( 0.00%)                  &self.0
        .                       }
        .                   }
        .           
        .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
        .                       fn eq(&self, other: &Self) -> bool {
        .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
        .                           // equals `x == y`.
        .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
        .                   }
        .           
        .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
        .           
        .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
        .                       fn hash<H: Hasher>(&self, s: &mut H) {
        .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
        .                           // x.hash(s)`.
   17,723 ( 0.00%)                  self.0.hash(s)
        .                       }
        .                   }
        .           
        .                   impl<'tcx> TyCtxt<'tcx> {
  623,208 ( 0.02%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
  416,596 ( 0.01%)                  self.interners.$name.intern(v, |v| {
    4,132 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
        .                           }).0
  700,551 ( 0.02%)              }
        .                   })+
        .               }
        .           }
        .           
        .           direct_interners! {
        .               region: mk_region(RegionKind),
        .               const_: mk_const(Const<'tcx>),
        .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
        .               adt_def: intern_adt_def(AdtDef),
        .               stability: intern_stability(attr::Stability),
        .               const_stability: intern_const_stability(attr::ConstStability),
        .           }
        .           
        .           macro_rules! slice_interners {
        .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
        .                   impl<'tcx> TyCtxt<'tcx> {
1,757,349 ( 0.04%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
        .                           self.interners.$field.intern_ref(v, || {
        .                               Interned(List::from_arena(&*self.arena, v))
        .                           }).0
1,575,729 ( 0.04%)              })+
        .                   }
        .               );
        .           }
        .           
        .           slice_interners!(
        .               type_list: _intern_type_list(Ty<'tcx>),
        .               substs: _intern_substs(GenericArg<'tcx>),
        .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2188 ----------------------------------------
        .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
        .                   })
        .               }
        .           
        .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
        .               /// `*r == kind`.
        .               #[inline]
        .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
   23,464 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
        .               }
        .           
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline]
        .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
1,261,285 ( 0.03%)          self.interners.intern_ty(st)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
1,359,261 ( 0.03%)          let inner = self.interners.intern_predicate(binder);
        .                   Predicate { inner }
        .               }
        .           
        .               #[inline]
  191,160 ( 0.00%)      pub fn reuse_or_mk_predicate(
        .                   self,
        .                   pred: Predicate<'tcx>,
        .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> Predicate<'tcx> {
   11,876 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
  191,160 ( 0.00%)      }
        .           
        .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
      183 ( 0.00%)          match tm {
        .                       IntTy::Isize => self.types.isize,
        .                       IntTy::I8 => self.types.i8,
        .                       IntTy::I16 => self.types.i16,
        .                       IntTy::I32 => self.types.i32,
        .                       IntTy::I64 => self.types.i64,
        .                       IntTy::I128 => self.types.i128,
        .                   }
      183 ( 0.00%)      }
        .           
        .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
      280 ( 0.00%)          match tm {
        .                       UintTy::Usize => self.types.usize,
        .                       UintTy::U8 => self.types.u8,
        .                       UintTy::U16 => self.types.u16,
        .                       UintTy::U32 => self.types.u32,
        .                       UintTy::U64 => self.types.u64,
        .                       UintTy::U128 => self.types.u128,
        .                   }
      280 ( 0.00%)      }
        .           
        .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
        .                   match tm {
        .                       FloatTy::F32 => self.types.f32,
        .                       FloatTy::F64 => self.types.f64,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn mk_static_str(self) -> Ty<'tcx> {
    1,284 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   // Take a copy of substs so that we own the vectors inside.
        .                   self.mk_ty(Adt(def, substs))
        .               }
        .           
-- line 2259 ----------------------------------------
-- line 2329 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
        .               }
        .           
        .               #[inline]
  298,119 ( 0.01%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
        .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
  317,992 ( 0.01%)      }
        .           
        .               #[inline]
        .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Slice(ty))
        .               }
        .           
        .               #[inline]
        .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
      136 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
      278 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
        .               }
        .           
        .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
    5,220 ( 0.00%)          iter.intern_with(|ts| {
   14,720 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
   22,936 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
    4,698 ( 0.00%)          })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_unit(self) -> Ty<'tcx> {
      118 ( 0.00%)          self.types.unit
        .               }
        .           
        .               #[inline]
        .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
        .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(FnDef(def_id, substs))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
      400 ( 0.00%)          self.mk_ty(FnPtr(fty))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_dynamic(
        .                   self,
        .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   reg: ty::Region<'tcx>,
        .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(TyVar(v))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
    1,182 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(IntVar(v))
        .               }
        .           
        .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
        .                   self.mk_ty(Param(ParamTy { index, name }))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
        .               }
        .           
    1,071 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
      625 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
      420 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
        .                       }
      166 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
        .                       GenericParamDefKind::Const { .. } => {
        .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
        .                       }
        .                   }
    1,071 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Opaque(def_id, substs))
        .               }
        .           
    1,790 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
    1,790 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
    3,580 ( 0.00%)      }
        .           
        .               pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Deref)
        .               }
        .           
        .               pub fn mk_place_downcast(
        .                   self,
        .                   place: Place<'tcx>,
-- line 2480 ----------------------------------------
-- line 2497 ----------------------------------------
        .           
        .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Index(index))
        .               }
        .           
        .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
        .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
        .               /// flight.
   16,110 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
        .                   let mut projection = place.projection.to_vec();
        .                   projection.push(elem);
        .           
        .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
   17,900 ( 0.00%)      }
        .           
      343 ( 0.00%)      pub fn intern_poly_existential_predicates(
        .                   self,
        .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
       49 ( 0.00%)          assert!(!eps.is_empty());
        .                   assert!(
        .                       eps.array_windows()
       30 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
        .                               != Ordering::Greater)
        .                   );
      196 ( 0.00%)          self._intern_poly_existential_predicates(eps)
      392 ( 0.00%)      }
        .           
        .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
        .                   // FIXME consider asking the input slice to be sorted to avoid
        .                   // re-interning permutations, in which case that would be asserted
        .                   // here.
    2,176 ( 0.00%)          if preds.is_empty() {
        .                       // The macro-generated method below asserts we don't intern an empty slice.
        .                       List::empty()
        .                   } else {
      462 ( 0.00%)              self._intern_predicates(preds)
        .                   }
    3,432 ( 0.00%)      }
        .           
        .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
   20,241 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
   19,926 ( 0.00%)      }
        .           
        .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
  323,253 ( 0.01%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
   72,030 ( 0.00%)      }
        .           
        .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
        .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
        .               }
        .           
        .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
    6,060 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    1,104 ( 0.00%)      }
        .           
        .               pub fn intern_canonical_var_infos(
        .                   self,
        .                   ts: &[CanonicalVarInfo<'tcx>],
        .               ) -> CanonicalVarInfos<'tcx> {
    7,527 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
      110 ( 0.00%)      }
        .           
        .               pub fn intern_bound_variable_kinds(
        .                   self,
        .                   ts: &[ty::BoundVariableKind],
        .               ) -> &'tcx List<ty::BoundVariableKind> {
    1,756 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
    2,466 ( 0.00%)      }
        .           
        .               pub fn mk_fn_sig<I>(
        .                   self,
        .                   inputs: I,
        .                   output: I::Item,
        .                   c_variadic: bool,
        .                   unsafety: hir::Unsafety,
        .                   abi: abi::Abi,
        .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
        .               where
        .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
        .               {
        .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    1,021 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
      168 ( 0.00%)              c_variadic,
      245 ( 0.00%)              unsafety,
      182 ( 0.00%)              abi,
      190 ( 0.00%)          })
        .               }
        .           
        .               pub fn mk_poly_existential_predicates<
        .                   I: InternAs<
        .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   >,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
      187 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
        .               }
        .           
        .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
       18 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
        .               }
        .           
        .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
   60,989 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
        .               }
        .           
        .               pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
  242,015 ( 0.01%)          iter.intern_with(|xs| self.intern_substs(xs))
        .               }
        .           
        .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
       54 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
        .               }
        .           
   58,536 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
        .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
  117,072 ( 0.00%)      }
        .           
        .               pub fn mk_bound_variable_kinds<
        .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
    9,650 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
        .               }
        .           
        .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
        .               /// It stops at `bound` and just returns it if reached.
  901,362 ( 0.02%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
  901,362 ( 0.02%)          let hir = self.hir();
        .                   loop {
1,100,130 ( 0.03%)              if id == bound {
        .                           return bound;
        .                       }
        .           
1,189,912 ( 0.03%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
        .                           return id;
        .                       }
        .                       let next = hir.get_parent_node(id);
  713,832 ( 0.02%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
1,287,660 ( 0.03%)      }
        .           
    1,576 ( 0.00%)      pub fn lint_level_at_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   mut id: hir::HirId,
        .               ) -> (Level, LintLevelSource) {
        .                   let sets = self.lint_levels(());
        .                   loop {
    6,781 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
        .                           return pair;
        .                       }
      447 ( 0.00%)              let next = self.hir().get_parent_node(id);
    1,341 ( 0.00%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
    1,576 ( 0.00%)      }
        .           
       42 ( 0.00%)      pub fn struct_span_lint_hir(
        .                   self,
        .                   lint: &'static Lint,
        .                   hir_id: HirId,
        .                   span: impl Into<MultiSpan>,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
      174 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
       59 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
       24 ( 0.00%)      }
        .           
        .               pub fn struct_lint_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   id: HirId,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
        .                   let (level, src) = self.lint_level_at_node(lint, id);
        .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
        .               }
        .           
   71,197 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
   20,342 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
        .                   let candidates = map.get(&id.local_id)?;
   20,342 ( 0.00%)          Some(&*candidates)
   81,368 ( 0.00%)      }
        .           
    3,591 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
        .                   debug!(?id, "named_region");
        .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
    4,617 ( 0.00%)      }
        .           
      252 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
        .                   self.is_late_bound_map(id.owner)
       20 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
      224 ( 0.00%)      }
        .           
    2,436 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
        .                   self.object_lifetime_defaults_map(id.owner)
    3,132 ( 0.00%)      }
        .           
    1,890 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
        .                   self.mk_bound_variable_kinds(
        .                       self.late_bound_vars_map(id.owner)
        .                           .and_then(|map| map.get(&id.local_id).cloned())
        .                           .unwrap_or_else(|| {
        .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
        .                           })
        .                           .iter(),
        .                   )
    1,890 ( 0.00%)      }
        .           
        .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
        .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
        .               }
        .           
        .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
        .               /// feature gates
      190 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
       19 ( 0.00%)          if self.is_const_fn_raw(def_id) {
       10 ( 0.00%)              match self.lookup_const_stability(def_id) {
       20 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
        .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
        .                               // corresponding feature gate.
        6 ( 0.00%)                      self.features()
        .                                   .declared_lib_features
        .                                   .iter()
        .                                   .any(|&(sym, _)| sym == stability.feature)
        .                           }
        .                           // functions without const stability are either stable user written
        .                           // const fn or the user is using feature gates and we thus don't
        .                           // care what they do
        .                           _ => true,
        .                       }
        .                   } else {
        .                       false
        .                   }
      171 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TyCtxtAt<'tcx> {
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
        .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
        .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
        .           }
        .           
        .           impl<I, T, R, E> InternAs<[T], R> for I
        .           where
        .               E: InternIteratorElement<T, R>,
        .               I: Iterator<Item = E>,
        .           {
        .               type Output = E::Output;
   77,912 ( 0.00%)      fn intern_with<F>(self, f: F) -> Self::Output
        .               where
        .                   F: FnOnce(&[T]) -> R,
        .               {
  727,484 ( 0.02%)          E::intern_with(self, f)
   80,253 ( 0.00%)      }
        .           }
        .           
        .           pub trait InternIteratorElement<T, R>: Sized {
        .               type Output;
        .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
        .           }
        .           
        .           impl<T, R> InternIteratorElement<T, R> for T {
        .               type Output = R;
  269,583 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`.
  362,600 ( 0.01%)          match iter.size_hint() {
        .                       (0, Some(0)) => {
        3 ( 0.00%)                  assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
        .                           let t0 = iter.next().unwrap();
        1 ( 0.00%)                  assert!(iter.next().is_none());
   43,098 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
        .                           let t0 = iter.next().unwrap();
        .                           let t1 = iter.next().unwrap();
       96 ( 0.00%)                  assert!(iter.next().is_none());
   52,116 ( 0.00%)                  f(&[t0, t1])
        .                       }
      288 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
        .                   }
  272,851 ( 0.01%)      }
        .           }
        .           
        .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
        .           where
        .               T: Clone + 'a,
        .           {
        .               type Output = R;
    1,332 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
        .                   // This code isn't hot.
       76 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    1,134 ( 0.00%)      }
        .           }
        .           
        .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
        .               type Output = Result<R, E>;
   95,926 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`, unless a failure happens first, in which case the result
        .                   // will be an error anyway.
   76,826 ( 0.00%)          Ok(match iter.size_hint() {
        .                       (0, Some(0)) => {
        .                           assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
      117 ( 0.00%)                  let t0 = iter.next().unwrap()?;
        .                           assert!(iter.next().is_none());
    3,422 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
      286 ( 0.00%)                  let t0 = iter.next().unwrap()?;
      286 ( 0.00%)                  let t1 = iter.next().unwrap()?;
      429 ( 0.00%)                  assert!(iter.next().is_none());
    6,908 ( 0.00%)                  f(&[t0, t1])
        .                       }
      710 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
        .                   })
  109,506 ( 0.00%)      }
        .           }
        .           
        .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
        .           // won't work for us.
        .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
   69,616 ( 0.00%)      t as *const () == u as *const ()
        .           }
        .           
        .           pub fn provide(providers: &mut ty::query::Providers) {
        2 ( 0.00%)      providers.in_scope_traits_map =
        .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
        3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
        2 ( 0.00%)      providers.module_reexports =
        .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
        2 ( 0.00%)      providers.crate_name = |tcx, id| {
        1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
        1 ( 0.00%)          tcx.crate_name
        .               };
        2 ( 0.00%)      providers.maybe_unused_trait_import =
        .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
        2 ( 0.00%)      providers.maybe_unused_extern_crates =
        .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
        2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
        .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
        .               };
        .           
       38 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_const_stability =
       27 ( 0.00%)          |tcx, id| tcx.stability().local_const_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_deprecation_entry =
    2,232 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
        2 ( 0.00%)      providers.extern_mod_stmt_cnum =
        .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
        3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
        3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
        2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
        .                   assert_eq!(cnum, LOCAL_CRATE);
        .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
        .               };
        2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
        .                   assert_eq!(cnum, LOCAL_CRATE);
        .                   tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
        .               };
        2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        .                   // We want to check if the panic handler was defined in this crate
        3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
        .               };
        .           }

2,152,115 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs
--------------------------------------------------------------------------------
Ir                 

-- line 26 ----------------------------------------
        .               /// }
        .               ///
        .               /// assert_eq!(letters[&'s'], 2);
        .               /// assert_eq!(letters[&'t'], 3);
        .               /// assert_eq!(letters[&'u'], 1);
        .               /// assert_eq!(letters.get(&'y'), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
2,826,866 ( 0.07%)      pub fn rustc_entry(&mut self, key: K) -> RustcEntry<'_, K, V, A> {
        .                   let hash = make_insert_hash(&self.hash_builder, &key);
      632 ( 0.00%)          if let Some(elem) = self.table.find(hash, |q| q.0.eq(&key)) {
  691,628 ( 0.02%)              RustcEntry::Occupied(RustcOccupiedEntry {
    6,364 ( 0.00%)                  key: Some(key),
        .                           elem,
        .                           table: &mut self.table,
        .                       })
        .                   } else {
        .                       // Ideally we would put this in VacantEntry::insert, but Entry is not
        .                       // generic over the BuildHasher and adding a generic parameter would be
        .                       // a breaking change.
        .                       self.reserve(1);
        .           
  189,207 ( 0.00%)              RustcEntry::Vacant(RustcVacantEntry {
        .                           hash,
   33,060 ( 0.00%)                  key,
        .                           table: &mut self.table,
        .                       })
        .                   }
2,286,486 ( 0.06%)      }
        .           }
        .           
        .           /// A view into a single entry in a map, which may either be vacant or occupied.
        .           ///
        .           /// This `enum` is constructed from the [`entry`] method on [`HashMap`].
        .           ///
        .           /// [`HashMap`]: struct.HashMap.html
        .           /// [`entry`]: struct.HashMap.html#method.rustc_entry
-- line 62 ----------------------------------------
-- line 405 ----------------------------------------
        .               /// if let RustcEntry::Occupied(o) = map.rustc_entry("poneyland") {
        .               ///     *o.into_mut() += 10;
        .               /// }
        .               ///
        .               /// assert_eq!(map["poneyland"], 22);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn into_mut(self) -> &'a mut V {
    3,356 ( 0.00%)          unsafe { &mut self.elem.as_mut().1 }
        .               }
        .           
        .               /// Sets the value of the entry, and returns the entry's old value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
-- line 421 ----------------------------------------
-- line 568 ----------------------------------------
        .               /// let mut map: HashMap<&str, u32> = HashMap::new();
        .               ///
        .               /// if let RustcEntry::Vacant(o) = map.rustc_entry("poneyland") {
        .               ///     o.insert(37);
        .               /// }
        .               /// assert_eq!(map["poneyland"], 37);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
    5,143 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
        .                   unsafe {
   25,517 ( 0.00%)              let bucket = self.table.insert_no_grow(self.hash, (self.key, value));
    2,649 ( 0.00%)              &mut bucket.as_mut().1
        .                   }
    7,040 ( 0.00%)      }
        .           
        .               /// Sets the value of the entry with the RustcVacantEntry's key,
        .               /// and returns a RustcOccupiedEntry.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
-- line 589 ----------------------------------------

  824,387 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/encoder.rs
--------------------------------------------------------------------------------
Ir                 

-- line 83 ----------------------------------------
        .                   if $self.is_proc_macro {
        .                       return Lazy::empty();
        .                   }
        .               };
        .           }
        .           
        .           macro_rules! encoder_methods {
        .               ($($name:ident($ty:ty);)*) => {
    7,906 ( 0.00%)          $(fn $name(&mut self, value: $ty) -> Result<(), Self::Error> {
        .                       self.opaque.$name(value)
    9,718 ( 0.00%)          })*
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> Encoder for EncodeContext<'a, 'tcx> {
        .               type Error = <opaque::Encoder as Encoder>::Error;
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> Result<(), Self::Error> {
-- line 101 ----------------------------------------
-- line 125 ----------------------------------------
        .                   emit_raw_bytes(&[u8]);
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> Encodable<EncodeContext<'a, 'tcx>>
        .               for Lazy<T>
        .           {
        .               fn encode(&self, e: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
    1,745 ( 0.00%)          e.emit_lazy_distance(*self)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> Encodable<EncodeContext<'a, 'tcx>>
        .               for Lazy<[T]>
        .           {
       10 ( 0.00%)      fn encode(&self, e: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
        .                   e.emit_usize(self.meta)?;
      244 ( 0.00%)          if self.meta == 0 {
        .                       return Ok(());
        .                   }
      614 ( 0.00%)          e.emit_lazy_distance(*self)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, I: Idx, T: Encodable<EncodeContext<'a, 'tcx>>> Encodable<EncodeContext<'a, 'tcx>>
        .               for Lazy<Table<I, T>>
        .           where
        .               Option<T>: FixedSizeEncoding,
        .           {
        .               fn encode(&self, e: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
        .                   e.emit_usize(self.meta)?;
      144 ( 0.00%)          e.emit_lazy_distance(*self)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for CrateNum {
    3,437 ( 0.00%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
    4,894 ( 0.00%)          if *self != LOCAL_CRATE && s.is_proc_macro {
        .                       panic!("Attempted to encode non-local CrateNum {:?} for proc-macro crate", self);
        .                   }
        .                   s.emit_u32(self.as_u32())
    2,946 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for DefIndex {
    2,125 ( 0.00%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
        .                   s.emit_u32(self.as_u32())
    2,550 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for ExpnIndex {
        .               fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
        .                   s.emit_u32(self.as_u32())
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for SyntaxContext {
  683,705 ( 0.02%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
  410,223 ( 0.01%)          rustc_span::hygiene::raw_encode_syntax_context(*self, &s.hygiene_ctxt, s)
  820,446 ( 0.02%)      }
        .           }
        .           
        .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for ExpnId {
        .               fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
      401 ( 0.00%)          if self.krate == LOCAL_CRATE {
        .                       // We will only write details for local expansions.  Non-local expansions will fetch
        .                       // data from the corresponding crate's metadata.
        .                       // FIXME(#43047) FIXME(#74731) We may eventually want to avoid relying on external
        .                       // metadata from proc-macro crates.
    1,438 ( 0.00%)              s.hygiene_ctxt.schedule_expn_data_for_encoding(*self);
        .                   }
      989 ( 0.00%)          self.krate.encode(s)?;
        .                   self.local_id.encode(s)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for Span {
1,092,920 ( 0.03%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
  819,690 ( 0.02%)          let span = self.data();
        .           
        .                   // Don't serialize any `SyntaxContext`s from a proc-macro crate,
        .                   // since we don't load proc-macro dependencies during serialization.
        .                   // This means that any hygiene information from macros used *within*
        .                   // a proc-macro crate (e.g. invoking a macro that expands to a proc-macro
        .                   // definition) will be lost.
        .                   //
        .                   // This can show up in two ways:
-- line 211 ----------------------------------------
-- line 228 ----------------------------------------
        .                   // None of these user-visible effects should result in any
        .                   // cross-crate inconsistencies (getting one behavior in the same
        .                   // crate, and a different behavior in another crate) due to the
        .                   // limited surface that proc-macros can expose.
        .                   //
        .                   // IMPORTANT: If this is ever changed, be sure to update
        .                   // `rustc_span::hygiene::raw_encode_expn_id` to handle
        .                   // encoding `ExpnData` for proc-macro crates.
  273,230 ( 0.01%)          if s.is_proc_macro {
        .                       SyntaxContext::root().encode(s)?;
        .                   } else {
  136,615 ( 0.00%)              span.ctxt.encode(s)?;
        .                   }
        .           
  136,615 ( 0.00%)          if self.is_dummy() {
        .                       return TAG_PARTIAL_SPAN.encode(s);
        .                   }
        .           
        .                   // The Span infrastructure should make sure that this invariant holds:
        .                   debug_assert!(span.lo <= span.hi);
        .           
  682,481 ( 0.02%)          if !s.source_file_cache.0.contains(span.lo) {
      250 ( 0.00%)              let source_map = s.tcx.sess.source_map();
      500 ( 0.00%)              let source_file_index = source_map.lookup_source_file_idx(span.lo);
      250 ( 0.00%)              s.source_file_cache =
      500 ( 0.00%)                  (source_map.files()[source_file_index].clone(), source_file_index);
        .                   }
        .           
  410,063 ( 0.01%)          if !s.source_file_cache.0.contains(span.hi) {
        .                       // Unfortunately, macro expansion still sometimes generates Spans
        .                       // that malformed in this way.
        .                       return TAG_PARTIAL_SPAN.encode(s);
        .                   }
        .           
        .                   let source_files = s.required_source_files.as_mut().expect("Already encoded SourceMap!");
        .                   // Record the fact that we need to encode the data for this `SourceFile`
  136,521 ( 0.00%)          source_files.insert(s.source_file_cache.1);
        .           
        .                   // There are two possible cases here:
        .                   // 1. This span comes from a 'foreign' crate - e.g. some crate upstream of the
        .                   // crate we are writing metadata for. When the metadata for *this* crate gets
        .                   // deserialized, the deserializer will need to know which crate it originally came
        .                   // from. We use `TAG_VALID_SPAN_FOREIGN` to indicate that a `CrateNum` should
        .                   // be deserialized after the rest of the span data, which tells the deserializer
        .                   // which crate contains the source map information.
-- line 272 ----------------------------------------
-- line 274 ----------------------------------------
        .                   // write `TAG_VALID_SPAN_LOCAL` to let the deserializer know that it should use
        .                   // our own source map information.
        .                   //
        .                   // If we're a proc-macro crate, we always treat this as a local `Span`.
        .                   // In `encode_source_map`, we serialize foreign `SourceFile`s into our metadata
        .                   // if we're a proc-macro crate.
        .                   // This allows us to avoid loading the dependencies of proc-macro crates: all of
        .                   // the information we need to decode `Span`s is stored in the proc-macro crate.
  819,126 ( 0.02%)          let (tag, lo, hi) = if s.source_file_cache.0.is_imported() && !s.is_proc_macro {
        .                       // To simplify deserialization, we 'rebase' this span onto the crate it originally came from
        .                       // (the crate that 'owns' the file it references. These rebased 'lo' and 'hi' values
        .                       // are relative to the source map information for the 'foreign' crate whose CrateNum
        .                       // we write into the metadata. This allows `imported_source_files` to binary
        .                       // search through the 'foreign' crate's source map information, using the
        .                       // deserialized 'lo' and 'hi' values directly.
        .                       //
        .                       // All of this logic ensures that the final result of deserialization is a 'normal'
        .                       // Span that can be used without any additional trouble.
        .                       let external_start_pos = {
        .                           // Introduce a new scope so that we drop the 'lock()' temporary
      120 ( 0.00%)                  match &*s.source_file_cache.0.external_src.lock() {
       40 ( 0.00%)                      ExternalSource::Foreign { original_start_pos, .. } => *original_start_pos,
        .                               src => panic!("Unexpected external source {:?}", src),
        .                           }
        .                       };
      120 ( 0.00%)              let lo = (span.lo - s.source_file_cache.0.start_pos) + external_start_pos;
       40 ( 0.00%)              let hi = (span.hi - s.source_file_cache.0.start_pos) + external_start_pos;
        .           
        .                       (TAG_VALID_SPAN_FOREIGN, lo, hi)
        .                   } else {
  409,443 ( 0.01%)              (TAG_VALID_SPAN_LOCAL, span.lo, span.hi)
        .                   };
        .           
        .                   tag.encode(s)?;
        .                   lo.encode(s)?;
        .           
        .                   // Encode length which is usually less than span.hi and profits more
        .                   // from the variable-length integer encoding that we use.
        .                   let len = hi - lo;
        .                   len.encode(s)?;
        .           
  273,042 ( 0.01%)          if tag == TAG_VALID_SPAN_FOREIGN {
        .                       // This needs to be two lines to avoid holding the `s.source_file_cache`
        .                       // while calling `cnum.encode(s)`
      160 ( 0.00%)              let cnum = s.source_file_cache.0.cnum;
      120 ( 0.00%)              cnum.encode(s)?;
        .                   }
        .           
        .                   Ok(())
1,092,920 ( 0.03%)      }
        .           }
        .           
        .           impl<'a, 'tcx> TyEncoder<'tcx> for EncodeContext<'a, 'tcx> {
        .               const CLEAR_CROSS_CRATE: bool = true;
        .           
        .               fn position(&self) -> usize {
        .                   self.opaque.position()
        .               }
-- line 331 ----------------------------------------
-- line 361 ----------------------------------------
        .           }
        .           
        .           /// Helper trait to allow overloading `EncodeContext::lazy` for iterators.
        .           trait EncodeContentsForLazy<'a, 'tcx, T: ?Sized + LazyMeta> {
        .               fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) -> T::Meta;
        .           }
        .           
        .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> EncodeContentsForLazy<'a, 'tcx, T> for &T {
    3,529 ( 0.00%)      fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) {
    1,281 ( 0.00%)          self.encode(ecx).unwrap()
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> EncodeContentsForLazy<'a, 'tcx, T> for T {
    6,680 ( 0.00%)      fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) {
    3,799 ( 0.00%)          self.encode(ecx).unwrap()
    3,959 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx, I, T: Encodable<EncodeContext<'a, 'tcx>>> EncodeContentsForLazy<'a, 'tcx, [T]> for I
        .           where
        .               I: IntoIterator,
        .               I::Item: EncodeContentsForLazy<'a, 'tcx, T>,
        .           {
      602 ( 0.00%)      fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) -> usize {
    1,957 ( 0.00%)          self.into_iter().map(|value| value.encode_contents_for_lazy(ecx)).count()
      774 ( 0.00%)      }
        .           }
        .           
        .           // Shorthand for `$self.$tables.$table.set($def_id.index, $self.lazy($value))`, which would
        .           // normally need extra variables to avoid errors about multiple mutable borrows.
        .           macro_rules! record {
        .               ($self:ident.$tables:ident.$table:ident[$def_id:expr] <- $value:expr) => {{
        .                   {
        .                       let value = $value;
        .                       let lazy = $self.lazy(value);
        .                       $self.$tables.$table.set($def_id.index, lazy);
        .                   }
        .               }};
        .           }
        .           
        .           impl<'a, 'tcx> EncodeContext<'a, 'tcx> {
    2,055 ( 0.00%)      fn emit_lazy_distance<T: ?Sized + LazyMeta>(
        .                   &mut self,
        .                   lazy: Lazy<T>,
        .               ) -> Result<(), <Self as Encoder>::Error> {
        .                   let pos = lazy.position.get();
    1,335 ( 0.00%)          let distance = match self.lazy_state {
        .                       LazyState::NoNode => bug!("emit_lazy_distance: outside of a metadata node"),
      360 ( 0.00%)              LazyState::NodeStart(start) => {
        .                           let start = start.get();
      720 ( 0.00%)                  assert!(pos <= start);
        .                           start - pos
        .                       }
       51 ( 0.00%)              LazyState::Previous(last_pos) => {
       51 ( 0.00%)                  assert!(
        .                               last_pos <= lazy.position,
        .                               "make sure that the calls to `lazy*` \
        .                                are in the same order as the metadata fields",
        .                           );
      153 ( 0.00%)                  lazy.position.get() - last_pos.get()
        .                       }
        .                   };
      822 ( 0.00%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(pos).unwrap());
        .                   self.emit_usize(distance)
    2,055 ( 0.00%)      }
        .           
    3,932 ( 0.00%)      fn lazy<T: ?Sized + LazyMeta>(
        .                   &mut self,
        .                   value: impl EncodeContentsForLazy<'a, 'tcx, T>,
        .               ) -> Lazy<T> {
        .                   let pos = NonZeroUsize::new(self.position()).unwrap();
        .           
    4,697 ( 0.00%)          assert_eq!(self.lazy_state, LazyState::NoNode);
   13,751 ( 0.00%)          self.lazy_state = LazyState::NodeStart(pos);
   10,369 ( 0.00%)          let meta = value.encode_contents_for_lazy(self);
    5,651 ( 0.00%)          self.lazy_state = LazyState::NoNode;
        .           
    9,873 ( 0.00%)          assert!(pos.get() <= self.position());
        .           
        .                   Lazy::from_position_and_meta(pos, meta)
    5,723 ( 0.00%)      }
        .           
        .               fn encode_info_for_items(&mut self) {
        9 ( 0.00%)          self.encode_info_for_mod(CRATE_DEF_ID, self.tcx.hir().root_module());
        .           
        .                   // Proc-macro crates only export proc-macro items, which are looked
        .                   // up using `proc_macro_data`
        2 ( 0.00%)          if self.is_proc_macro {
        .                       return;
        .                   }
        .           
        6 ( 0.00%)          self.tcx.hir().visit_all_item_likes(&mut self.as_deep_visitor());
        .               }
        .           
        .               fn encode_def_path_table(&mut self) {
        4 ( 0.00%)          let table = self.tcx.resolutions(()).definitions.def_path_table();
        2 ( 0.00%)          if self.is_proc_macro {
        .                       for def_index in std::iter::once(CRATE_DEF_INDEX)
        .                           .chain(self.tcx.resolutions(()).proc_macros.iter().map(|p| p.local_def_index))
        .                       {
        .                           let def_key = self.lazy(table.def_key(def_index));
        .                           let def_path_hash = self.lazy(table.def_path_hash(def_index));
        .                           self.tables.def_keys.set(def_index, def_key);
        .                           self.tables.def_path_hashes.set(def_index, def_path_hash);
        .                       }
        .                   } else {
        5 ( 0.00%)              for (def_index, def_key, def_path_hash) in table.enumerated_keys_and_path_hashes() {
        .                           let def_key = self.lazy(def_key);
        .                           let def_path_hash = self.lazy(def_path_hash);
    1,496 ( 0.00%)                  self.tables.def_keys.set(def_index, def_key);
    1,496 ( 0.00%)                  self.tables.def_path_hashes.set(def_index, def_path_hash);
        .                       }
        .                   }
        .               }
        .           
        .               fn encode_def_path_hash_map(&mut self) -> Lazy<DefPathHashMapRef<'tcx>> {
        .                   self.lazy(DefPathHashMapRef::BorrowedFromTcx(
        2 ( 0.00%)              self.tcx.resolutions(()).definitions.def_path_hash_to_def_index_map(),
        .                   ))
        .               }
        .           
        .               fn encode_source_map(&mut self) -> Lazy<[rustc_span::SourceFile]> {
        2 ( 0.00%)          let source_map = self.tcx.sess.source_map();
        3 ( 0.00%)          let all_source_files = source_map.files();
        .           
        .                   // By replacing the `Option` with `None`, we ensure that we can't
        .                   // accidentally serialize any more `Span`s after the source map encoding
        .                   // is done.
        .                   let required_source_files = self.required_source_files.take().unwrap();
        .           
        .                   let adapted = all_source_files
        .                       .iter()
        .                       .enumerate()
        .                       .filter(|(idx, source_file)| {
        .                           // Only serialize `SourceFile`s that were used
        .                           // during the encoding of a `Span`
    1,055 ( 0.00%)                  required_source_files.contains(*idx) &&
        .                           // Don't serialize imported `SourceFile`s, unless
        .                           // we're in a proc-macro crate.
       51 ( 0.00%)                  (!source_file.is_imported() || self.is_proc_macro)
        .                       })
        .                       .map(|(_, source_file)| {
        6 ( 0.00%)                  let mut adapted = match source_file.name {
        .                               FileName::Real(ref realname) => {
        4 ( 0.00%)                          let mut adapted = (**source_file).clone();
       32 ( 0.00%)                          adapted.name = FileName::Real(match realname {
        .                                       RealFileName::LocalPath(path_to_file) => {
        .                                           // Prepend path of working directory onto potentially
        .                                           // relative paths, because they could become relative
        .                                           // to a wrong directory.
        .                                           // We include `working_dir` as part of the crate hash,
        .                                           // so it's okay for us to use it as part of the encoded
        .                                           // metadata.
        4 ( 0.00%)                                  let working_dir = &self.tcx.sess.opts.working_dir;
        4 ( 0.00%)                                  match working_dir {
        .                                               RealFileName::LocalPath(absolute) => {
        .                                                   // Although neither working_dir or the file name were subject
        .                                                   // to path remapping, the concatenation between the two may
        .                                                   // be. Hence we need to do a remapping here.
        .                                                   let joined = Path::new(absolute).join(path_to_file);
       14 ( 0.00%)                                          let (joined, remapped) =
       22 ( 0.00%)                                              source_map.path_mapping().map_prefix(joined);
        4 ( 0.00%)                                          if remapped {
        .                                                       RealFileName::Remapped {
        .                                                           local_path: None,
        .                                                           virtual_name: joined,
        .                                                       }
        .                                                   } else {
        .                                                       RealFileName::LocalPath(joined)
        .                                                   }
        .                                               }
-- line 532 ----------------------------------------
-- line 544 ----------------------------------------
        .                                       RealFileName::Remapped { local_path: _, virtual_name } => {
        .                                           RealFileName::Remapped {
        .                                               // We do not want any local path to be exported into metadata
        .                                               local_path: None,
        .                                               virtual_name: virtual_name.clone(),
        .                                           }
        .                                       }
        .                                   });
        4 ( 0.00%)                          adapted.name_hash = {
        .                                       let mut hasher: StableHasher = StableHasher::new();
        2 ( 0.00%)                              adapted.name.hash(&mut hasher);
        .                                       hasher.finish::<u128>()
        .                                   };
        2 ( 0.00%)                          Lrc::new(adapted)
        .                               }
        .           
        .                               // expanded code, not from a file
        .                               _ => source_file.clone(),
        .                           };
        .           
        .                           // We're serializing this `SourceFile` into our crate metadata,
        .                           // so mark it as coming from this crate.
        .                           // This also ensures that we don't try to deserialize the
        .                           // `CrateNum` for a proc-macro dependency - since proc macro
        .                           // dependencies aren't loaded when we deserialize a proc-macro,
        .                           // trying to remap the `CrateNum` would fail.
        4 ( 0.00%)                  if self.is_proc_macro {
        .                               Lrc::make_mut(&mut adapted).cnum = LOCAL_CRATE;
        .                           }
        .                           adapted
        .                       })
        .                       .collect::<Vec<_>>();
        .           
        .                   self.lazy(adapted.iter().map(|rc| &**rc))
        .               }
        .           
        8 ( 0.00%)      fn encode_crate_root(&mut self) -> Lazy<CrateRoot<'tcx>> {
        .                   let mut i = self.position();
        .           
        .                   // Encode the crate deps
        .                   let crate_deps = self.encode_crate_deps();
        .                   let dylib_dependency_formats = self.encode_dylib_dependency_formats();
        5 ( 0.00%)          let dep_bytes = self.position() - i;
        .           
        .                   // Encode the lib features.
        .                   i = self.position();
        .                   let lib_features = self.encode_lib_features();
        7 ( 0.00%)          let lib_feature_bytes = self.position() - i;
        .           
        .                   // Encode the language items.
        .                   i = self.position();
        .                   let lang_items = self.encode_lang_items();
        .                   let lang_items_missing = self.encode_lang_items_missing();
        5 ( 0.00%)          let lang_item_bytes = self.position() - i;
        .           
        .                   // Encode the diagnostic items.
        .                   i = self.position();
        .                   let diagnostic_items = self.encode_diagnostic_items();
        5 ( 0.00%)          let diagnostic_item_bytes = self.position() - i;
        .           
        .                   // Encode the native libraries used
        .                   i = self.position();
        .                   let native_libraries = self.encode_native_libraries();
        4 ( 0.00%)          let native_lib_bytes = self.position() - i;
        .           
        .                   let foreign_modules = self.encode_foreign_modules();
        .           
        .                   // Encode DefPathTable
        .                   i = self.position();
        .                   self.encode_def_path_table();
        5 ( 0.00%)          let def_path_table_bytes = self.position() - i;
        .           
        .                   // Encode the def IDs of traits, for rustdoc and diagnostics.
        .                   i = self.position();
        .                   let traits = self.encode_traits();
        5 ( 0.00%)          let traits_bytes = self.position() - i;
        .           
        .                   // Encode the def IDs of impls, for coherence checking.
        .                   i = self.position();
        .                   let impls = self.encode_impls();
        5 ( 0.00%)          let impls_bytes = self.position() - i;
        .           
        3 ( 0.00%)          let tcx = self.tcx;
        .           
        .                   // Encode MIR.
        .                   i = self.position();
        .                   self.encode_mir();
        5 ( 0.00%)          let mir_bytes = self.position() - i;
        .           
        .                   // Encode the items.
        .                   i = self.position();
        .                   self.encode_def_ids();
        .                   self.encode_info_for_items();
        4 ( 0.00%)          let item_bytes = self.position() - i;
        .           
        .                   // Encode the allocation index
        .                   let interpret_alloc_index = {
        .                       let mut interpret_alloc_index = Vec::new();
        .                       let mut n = 0;
        .                       trace!("beginning to encode alloc ids");
        .                       loop {
        .                           let new_n = self.interpret_allocs.len();
        .                           // if we have found new ids, serialize those, too
        2 ( 0.00%)                  if n == new_n {
        .                               // otherwise, abort
        .                               break;
        .                           }
        .                           trace!("encoding {} further alloc ids", new_n - n);
        .                           for idx in n..new_n {
        .                               let id = self.interpret_allocs[idx];
        .                               let pos = self.position() as u32;
        .                               interpret_alloc_index.push(pos);
        .                               interpret::specialized_encode_alloc_id(self, tcx, id).unwrap();
        .                           }
        .                           n = new_n;
        .                       }
        6 ( 0.00%)              self.lazy(interpret_alloc_index)
        .                   };
        .           
        .                   // Encode the proc macro data. This affects 'tables',
        .                   // so we need to do this before we encode the tables
        .                   i = self.position();
        .                   let proc_macro_data = self.encode_proc_macros();
        4 ( 0.00%)          let proc_macro_data_bytes = self.position() - i;
        .           
        .                   i = self.position();
        4 ( 0.00%)          let tables = self.tables.encode(&mut self.opaque);
        4 ( 0.00%)          let tables_bytes = self.position() - i;
        .           
        .                   // Encode exported symbols info. This is prefetched in `encode_metadata` so we encode
        .                   // this as late as possible to give the prefetching as much time as possible to complete.
        .                   i = self.position();
        .                   let exported_symbols = tcx.exported_symbols(LOCAL_CRATE);
        .                   let exported_symbols = self.encode_exported_symbols(&exported_symbols);
        4 ( 0.00%)          let exported_symbols_bytes = self.position() - i;
        .           
        .                   // Encode the hygiene data,
        .                   // IMPORTANT: this *must* be the last thing that we encode (other than `SourceMap`). The process
        .                   // of encoding other items (e.g. `optimized_mir`) may cause us to load
        .                   // data from the incremental cache. If this causes us to deserialize a `Span`,
        .                   // then we may load additional `SyntaxContext`s into the global `HygieneData`.
        .                   // Therefore, we need to encode the hygiene data last to ensure that we encode
        .                   // any `SyntaxContext`s that might be used.
        .                   i = self.position();
        .                   let (syntax_contexts, expn_data, expn_hashes) = self.encode_hygiene();
        5 ( 0.00%)          let hygiene_bytes = self.position() - i;
        .           
        .                   i = self.position();
        .                   let def_path_hash_map = self.encode_def_path_hash_map();
        1 ( 0.00%)          let def_path_hash_map_bytes = self.position() - i;
        .           
        .                   // Encode source_map. This needs to be done last,
        .                   // since encoding `Span`s tells us which `SourceFiles` we actually
        .                   // need to encode.
        .                   i = self.position();
        .                   let source_map = self.encode_source_map();
        4 ( 0.00%)          let source_map_bytes = self.position() - i;
        .           
        3 ( 0.00%)          let attrs = tcx.hir().krate_attrs();
        7 ( 0.00%)          let has_default_lib_allocator = tcx.sess.contains_name(&attrs, sym::default_lib_allocator);
        .           
      118 ( 0.00%)          let root = self.lazy(CrateRoot {
        .                       name: tcx.crate_name(LOCAL_CRATE),
        3 ( 0.00%)              extra_filename: tcx.sess.opts.cg.extra_filename.clone(),
        1 ( 0.00%)              triple: tcx.sess.opts.target_triple.clone(),
        .                       hash: tcx.crate_hash(LOCAL_CRATE),
        .                       stable_crate_id: tcx.def_path_hash(LOCAL_CRATE.as_def_id()).stable_crate_id(),
        3 ( 0.00%)              panic_strategy: tcx.sess.panic_strategy(),
        3 ( 0.00%)              panic_in_drop_strategy: tcx.sess.opts.debugging_opts.panic_in_drop,
        2 ( 0.00%)              edition: tcx.sess.edition(),
        .                       has_global_allocator: tcx.has_global_allocator(LOCAL_CRATE),
        .                       has_panic_handler: tcx.has_panic_handler(LOCAL_CRATE),
        .                       has_default_lib_allocator,
        .                       proc_macro_data,
        6 ( 0.00%)              compiler_builtins: tcx.sess.contains_name(&attrs, sym::compiler_builtins),
        6 ( 0.00%)              needs_allocator: tcx.sess.contains_name(&attrs, sym::needs_allocator),
        6 ( 0.00%)              needs_panic_runtime: tcx.sess.contains_name(&attrs, sym::needs_panic_runtime),
        6 ( 0.00%)              no_builtins: tcx.sess.contains_name(&attrs, sym::no_builtins),
        5 ( 0.00%)              panic_runtime: tcx.sess.contains_name(&attrs, sym::panic_runtime),
        5 ( 0.00%)              profiler_runtime: tcx.sess.contains_name(&attrs, sym::profiler_runtime),
        2 ( 0.00%)              symbol_mangling_version: tcx.sess.opts.get_symbol_mangling_version(),
        .           
        .                       crate_deps,
        .                       dylib_dependency_formats,
        .                       lib_features,
        .                       lang_items,
        .                       diagnostic_items,
        .                       lang_items_missing,
        .                       native_libraries,
        .                       foreign_modules,
        .                       source_map,
        .                       traits,
        .                       impls,
        .                       exported_symbols,
        .                       interpret_alloc_index,
        2 ( 0.00%)              tables,
        .                       syntax_contexts,
        .                       expn_data,
        .                       expn_hashes,
        .                       def_path_hash_map,
        .                   });
        .           
        1 ( 0.00%)          let total_bytes = self.position();
        .           
        4 ( 0.00%)          if tcx.sess.meta_stats() {
        .                       let mut zero_bytes = 0;
        .                       for e in self.opaque.data.iter() {
        .                           if *e == 0 {
        .                               zero_bytes += 1;
        .                           }
        .                       }
        .           
        .                       eprintln!("metadata stats:");
-- line 756 ----------------------------------------
-- line 770 ----------------------------------------
        .                       eprintln!("            item bytes: {}", item_bytes);
        .                       eprintln!("           table bytes: {}", tables_bytes);
        .                       eprintln!("         hygiene bytes: {}", hygiene_bytes);
        .                       eprintln!("            zero bytes: {}", zero_bytes);
        .                       eprintln!("           total bytes: {}", total_bytes);
        .                   }
        .           
        .                   root
        9 ( 0.00%)      }
        .           }
        .           
        .           fn should_encode_visibility(def_kind: DefKind) -> bool {
        .               match def_kind {
        .                   DefKind::Mod
        .                   | DefKind::Struct
        .                   | DefKind::Union
        .                   | DefKind::Enum
-- line 786 ----------------------------------------
-- line 853 ----------------------------------------
        .           /// Whether we should encode MIR.
        .           ///
        .           /// Computing, optimizing and encoding the MIR is a relatively expensive operation.
        .           /// We want to avoid this work when not required. Therefore:
        .           /// - we only compute `mir_for_ctfe` on items with const-eval semantics;
        .           /// - we skip `optimized_mir` for check runs.
        .           ///
        .           /// Return a pair, resp. for CTFE and for LLVM.
    1,449 ( 0.00%)  fn should_encode_mir(tcx: TyCtxt<'_>, def_id: LocalDefId) -> (bool, bool) {
      805 ( 0.00%)      match tcx.def_kind(def_id) {
        .                   // Constructors
        .                   DefKind::Ctor(_, _) => {
       18 ( 0.00%)              let mir_opt_base = tcx.sess.opts.output_types.should_codegen()
        .                           || tcx.sess.opts.debugging_opts.always_encode_mir;
        .                       (true, mir_opt_base)
        .                   }
        .                   // Constants
        .                   DefKind::AnonConst
        .                   | DefKind::InlineConst
        .                   | DefKind::AssocConst
        .                   | DefKind::Static
        .                   | DefKind::Const => (true, false),
        .                   // Full-fledged functions
        .                   DefKind::AssocFn | DefKind::Fn => {
        .                       let generics = tcx.generics_of(def_id);
      538 ( 0.00%)              let needs_inline = (generics.requires_monomorphization(tcx)
      170 ( 0.00%)                  || tcx.codegen_fn_attrs(def_id).requests_inline())
      162 ( 0.00%)                  && tcx.sess.opts.output_types.should_codegen();
        .                       // The function has a `const` modifier or is annotated with `default_method_body_is_const`.
       92 ( 0.00%)              let is_const_fn = tcx.is_const_fn_raw(def_id.to_def_id())
      445 ( 0.00%)                  || tcx.has_attr(def_id.to_def_id(), sym::default_method_body_is_const);
        .                       let always_encode_mir = tcx.sess.opts.debugging_opts.always_encode_mir;
      184 ( 0.00%)              (is_const_fn, needs_inline || always_encode_mir)
        .                   }
        .                   // Closures can't be const fn.
        .                   DefKind::Closure => {
        .                       let generics = tcx.generics_of(def_id);
       76 ( 0.00%)              let needs_inline = (generics.requires_monomorphization(tcx)
        .                           || tcx.codegen_fn_attrs(def_id).requests_inline())
       38 ( 0.00%)                  && tcx.sess.opts.output_types.should_codegen();
       38 ( 0.00%)              let always_encode_mir = tcx.sess.opts.debugging_opts.always_encode_mir;
       38 ( 0.00%)              (false, needs_inline || always_encode_mir)
        .                   }
        .                   // Generators require optimized MIR to compute layout.
        .                   DefKind::Generator => (false, true),
        .                   // The others don't have MIR.
        .                   _ => (false, false),
        .               }
    1,449 ( 0.00%)  }
        .           
        .           fn should_encode_variances(def_kind: DefKind) -> bool {
        .               match def_kind {
        .                   DefKind::Struct
        .                   | DefKind::Union
        .                   | DefKind::Enum
        .                   | DefKind::Variant
        .                   | DefKind::Fn
-- line 909 ----------------------------------------
-- line 969 ----------------------------------------
        .                   | DefKind::LifetimeParam
        .                   | DefKind::GlobalAsm
        .                   | DefKind::ExternCrate => false,
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> EncodeContext<'a, 'tcx> {
        .               fn encode_def_ids(&mut self) {
        2 ( 0.00%)          if self.is_proc_macro {
        .                       return;
        .                   }
        1 ( 0.00%)          let tcx = self.tcx;
        3 ( 0.00%)          let hir = tcx.hir();
       45 ( 0.00%)          for local_id in hir.iter_local_def_id() {
        .                       let def_id = local_id.to_def_id();
        .                       let def_kind = tcx.opt_def_kind(local_id);
    2,244 ( 0.00%)              let def_kind = if let Some(def_kind) = def_kind { def_kind } else { continue };
    5,728 ( 0.00%)              record!(self.tables.def_kind[def_id] <- match def_kind {
        .                           // Replace Ctor by the enclosing object to avoid leaking details in children crates.
        .                           DefKind::Ctor(CtorOf::Struct, _) => DefKind::Struct,
        .                           DefKind::Ctor(CtorOf::Variant, _) => DefKind::Variant,
        .                           def_kind => def_kind,
        .                       });
    1,074 ( 0.00%)              record!(self.tables.span[def_id] <- tcx.def_span(def_id));
    4,296 ( 0.00%)              record!(self.tables.attributes[def_id] <- tcx.get_attrs(def_id));
    2,864 ( 0.00%)              record!(self.tables.expn_that_defined[def_id] <- self.tcx.expn_that_defined(def_id));
        .                       if should_encode_visibility(def_kind) {
    1,680 ( 0.00%)                  record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));
        .                       }
        .                       if should_encode_stability(def_kind) {
        .                           self.encode_stability(def_id);
        .                           self.encode_const_stability(def_id);
    1,674 ( 0.00%)                  self.encode_deprecation(def_id);
        .                       }
        .                       if should_encode_variances(def_kind) {
      306 ( 0.00%)                  let v = self.tcx.variances_of(def_id);
    1,071 ( 0.00%)                  record!(self.tables.variances[def_id] <- v);
        .                       }
        .                       if should_encode_generics(def_kind) {
        .                           let g = tcx.generics_of(def_id);
    1,316 ( 0.00%)                  record!(self.tables.generics[def_id] <- g);
    3,948 ( 0.00%)                  record!(self.tables.explicit_predicates[def_id] <- self.tcx.explicit_predicates_of(def_id));
      329 ( 0.00%)                  let inferred_outlives = self.tcx.inferred_outlives_of(def_id);
      363 ( 0.00%)                  if !inferred_outlives.is_empty() {
        .                               record!(self.tables.inferred_outlives[def_id] <- inferred_outlives);
        .                           }
        .                       }
    2,506 ( 0.00%)              if let DefKind::Trait | DefKind::TraitAlias = def_kind {
        .                           record!(self.tables.super_predicates[def_id] <- self.tcx.super_predicates_of(def_id));
        .                       }
        .                   }
        .                   let inherent_impls = tcx.crate_inherent_impls(());
        .                   for (def_id, implementations) in inherent_impls.inherent_impls.iter() {
        7 ( 0.00%)              if implementations.is_empty() {
        .                           continue;
        .                       }
       63 ( 0.00%)              record!(self.tables.inherent_impls[def_id.to_def_id()] <- implementations.iter().map(|&def_id| {
        7 ( 0.00%)                  assert!(def_id.is_local());
        .                           def_id.index
        .                       }));
        .                   }
        .               }
        .           
    2,240 ( 0.00%)      fn encode_item_type(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_item_type({:?})", def_id);
    1,920 ( 0.00%)          record!(self.tables.ty[def_id] <- self.tcx.type_of(def_id));
    2,560 ( 0.00%)      }
        .           
        .               fn encode_enum_variant_info(&mut self, def: &ty::AdtDef, index: VariantIdx) {
        .                   let tcx = self.tcx;
        .                   let variant = &def.variants[index];
      100 ( 0.00%)          let def_id = variant.def_id;
        .                   debug!("EncodeContext::encode_enum_variant_info({:?})", def_id);
        .           
      150 ( 0.00%)          let data = VariantData {
       25 ( 0.00%)              ctor_kind: variant.ctor_kind,
        .                       discr: variant.discr,
       25 ( 0.00%)              ctor: variant.ctor_def_id.map(|did| did.index),
       25 ( 0.00%)              is_non_exhaustive: variant.is_field_list_non_exhaustive(),
        .                   };
        .           
        .                   record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));
        .                   record!(self.tables.children[def_id] <- variant.fields.iter().map(|f| {
        2 ( 0.00%)              assert!(f.did.is_local());
        .                       f.did.index
        .                   }));
       25 ( 0.00%)          self.encode_ident_span(def_id, variant.ident(tcx));
       25 ( 0.00%)          self.encode_item_type(def_id);
       25 ( 0.00%)          if variant.ctor_kind == CtorKind::Fn {
        .                       // FIXME(eddyb) encode signature only in `encode_enum_variant_ctor`.
        .                       if let Some(ctor_def_id) = variant.ctor_def_id {
        .                           record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(ctor_def_id));
        .                       }
        .                   }
        .               }
        .           
        .               fn encode_enum_variant_ctor(&mut self, def: &ty::AdtDef, index: VariantIdx) {
        .                   let tcx = self.tcx;
        .                   let variant = &def.variants[index];
      115 ( 0.00%)          let def_id = variant.ctor_def_id.unwrap();
        .                   debug!("EncodeContext::encode_enum_variant_ctor({:?})", def_id);
        .           
        .                   // FIXME(eddyb) encode only the `CtorKind` for constructors.
        .                   let data = VariantData {
       23 ( 0.00%)              ctor_kind: variant.ctor_kind,
        .                       discr: variant.discr,
        .                       ctor: Some(def_id.index),
       23 ( 0.00%)              is_non_exhaustive: variant.is_field_list_non_exhaustive(),
        .                   };
        .           
       92 ( 0.00%)          record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));
       69 ( 0.00%)          self.encode_item_type(def_id);
       23 ( 0.00%)          if variant.ctor_kind == CtorKind::Fn {
        .                       record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
        .                   }
        .               }
        .           
       20 ( 0.00%)      fn encode_info_for_mod(&mut self, local_def_id: LocalDefId, md: &hir::Mod<'_>) {
        4 ( 0.00%)          let tcx = self.tcx;
        .                   let def_id = local_def_id.to_def_id();
        .                   debug!("EncodeContext::encode_info_for_mod({:?})", def_id);
        .           
        .                   // If we are encoding a proc-macro crates, `encode_info_for_mod` will
        .                   // only ever get called for the crate root. We still want to encode
        .                   // the crate root for consistency with other crates (some of the resolver
        .                   // code uses it). However, we skip encoding anything relating to child
        .                   // items - we encode information about proc-macros later on.
        6 ( 0.00%)          let reexports = if !self.is_proc_macro {
        4 ( 0.00%)              match tcx.module_reexports(local_def_id) {
        .                           Some(exports) => self.lazy(exports),
        .                           _ => Lazy::empty(),
        .                       }
        .                   } else {
        .                       Lazy::empty()
        .                   };
        .           
        8 ( 0.00%)          record!(self.tables.kind[def_id] <- EntryKind::Mod(reexports));
        4 ( 0.00%)          if self.is_proc_macro {
        .                       // Encode this here because we don't do it in encode_def_ids.
        .                       record!(self.tables.expn_that_defined[def_id] <- tcx.expn_that_defined(local_def_id));
        .                   } else {
        .                       let direct_children = md.item_ids.iter().map(|item_id| item_id.def_id.local_def_index);
        .                       // Foreign items are planted into their parent modules from name resolution point of view.
        4 ( 0.00%)              let tcx = self.tcx;
        .                       let foreign_item_children = md
        .                           .item_ids
        .                           .iter()
      570 ( 0.00%)                  .filter_map(|item_id| match tcx.hir().item(*item_id).kind {
        .                               hir::ItemKind::ForeignMod { items, .. } => {
        .                                   Some(items.iter().map(|fi_ref| fi_ref.id.def_id.local_def_index))
        .                               }
        .                               _ => None,
        .                           })
        .                           .flatten();
        .           
       14 ( 0.00%)              record!(self.tables.children[def_id] <- direct_children.chain(foreign_item_children));
        .                   }
       16 ( 0.00%)      }
        .           
        .               fn encode_field(
        .                   &mut self,
        .                   adt_def: &ty::AdtDef,
        .                   variant_index: VariantIdx,
        .                   field_index: usize,
        .               ) {
        .                   let variant = &adt_def.variants[variant_index];
        .                   let field = &variant.fields[field_index];
        .           
        .                   let def_id = field.did;
        .                   debug!("EncodeContext::encode_field({:?})", def_id);
        .           
        .                   record!(self.tables.kind[def_id] <- EntryKind::Field);
       34 ( 0.00%)          self.encode_ident_span(def_id, field.ident(self.tcx));
       51 ( 0.00%)          self.encode_item_type(def_id);
        .               }
        .           
        .               fn encode_struct_ctor(&mut self, adt_def: &ty::AdtDef, def_id: DefId) {
        .                   debug!("EncodeContext::encode_struct_ctor({:?})", def_id);
        3 ( 0.00%)          let tcx = self.tcx;
        9 ( 0.00%)          let variant = adt_def.non_enum_variant();
        .           
        .                   let data = VariantData {
        3 ( 0.00%)              ctor_kind: variant.ctor_kind,
        .                       discr: variant.discr,
        .                       ctor: Some(def_id.index),
        3 ( 0.00%)              is_non_exhaustive: variant.is_field_list_non_exhaustive(),
        .                   };
        .           
       21 ( 0.00%)          record!(self.tables.kind[def_id] <- EntryKind::Struct(self.lazy(data), adt_def.repr));
       15 ( 0.00%)          self.encode_item_type(def_id);
        3 ( 0.00%)          if variant.ctor_kind == CtorKind::Fn {
        3 ( 0.00%)              record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
        .                   }
        .               }
        .           
       42 ( 0.00%)      fn encode_explicit_item_bounds(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_explicit_item_bounds({:?})", def_id);
        7 ( 0.00%)          let bounds = self.tcx.explicit_item_bounds(def_id);
        7 ( 0.00%)          if !bounds.is_empty() {
       84 ( 0.00%)              record!(self.tables.explicit_item_bounds[def_id] <- bounds);
        .                   }
        .               }
        .           
        .               fn encode_info_for_trait_item(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_info_for_trait_item({:?})", def_id);
        .                   let tcx = self.tcx;
        .           
        .                   let ast_item = tcx.hir().expect_trait_item(def_id.expect_local());
-- line 1176 ----------------------------------------
-- line 1234 ----------------------------------------
        .                   }
        .                   if trait_item.kind == ty::AssocKind::Fn {
        .                       record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
        .                   }
        .               }
        .           
        .               fn encode_info_for_impl_item(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_info_for_impl_item({:?})", def_id);
      168 ( 0.00%)          let tcx = self.tcx;
        .           
      504 ( 0.00%)          let ast_item = self.tcx.hir().expect_impl_item(def_id.expect_local());
       84 ( 0.00%)          let impl_item = self.tcx.associated_item(def_id);
        .           
      336 ( 0.00%)          let container = match impl_item.defaultness {
        .                       hir::Defaultness::Default { has_value: true } => AssocContainer::ImplDefault,
        .                       hir::Defaultness::Final => AssocContainer::ImplFinal,
        .                       hir::Defaultness::Default { has_value: false } => {
        .                           span_bug!(ast_item.span, "impl items always have values (currently)")
        .                       }
        .                   };
        .           
      504 ( 0.00%)          match impl_item.kind {
        .                       ty::AssocKind::Const => {
        .                           if let hir::ImplItemKind::Const(_, body_id) = ast_item.kind {
        .                               let qualifs = self.tcx.at(ast_item.span).mir_const_qualif(def_id);
        .           
        .                               record!(self.tables.kind[def_id] <- EntryKind::AssocConst(
        .                                   container,
        .                                   qualifs,
        .                                   self.encode_rendered_const_for_body(body_id))
        .                               );
        .                           } else {
        .                               bug!()
        .                           }
        .                       }
        .                       ty::AssocKind::Fn => {
      150 ( 0.00%)                  let fn_data = if let hir::ImplItemKind::Fn(ref sig, body) = ast_item.kind {
        .                               FnData {
        .                                   asyncness: sig.header.asyncness,
        .                                   // Can be inside `impl const Trait`, so using sig.header.constness is not reliable
       75 ( 0.00%)                          constness: if self.tcx.is_const_fn_raw(def_id) {
        .                                       hir::Constness::Const
        .                                   } else {
        .                                       hir::Constness::NotConst
        .                                   },
        .                                   param_names: self.encode_fn_param_names_for_body(body),
        .                               }
        .                           } else {
        .                               bug!()
-- line 1282 ----------------------------------------
-- line 1286 ----------------------------------------
        .                               container,
        .                               has_self: impl_item.fn_has_self_parameter,
        .                           })));
        .                       }
        .                       ty::AssocKind::Type => {
        .                           record!(self.tables.kind[def_id] <- EntryKind::AssocType(container));
        .                       }
        .                   }
      252 ( 0.00%)          self.encode_ident_span(def_id, impl_item.ident(self.tcx));
      420 ( 0.00%)          self.encode_item_type(def_id);
      336 ( 0.00%)          if let Some(trait_item_def_id) = impl_item.trait_item_def_id {
        .                       record!(self.tables.trait_item_def_id[def_id] <- trait_item_def_id);
        .                   }
       84 ( 0.00%)          if impl_item.kind == ty::AssocKind::Fn {
        .                       record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
        .                   }
        .               }
        .           
      136 ( 0.00%)      fn encode_fn_param_names_for_body(&mut self, body_id: hir::BodyId) -> Lazy<[Ident]> {
      610 ( 0.00%)          self.lazy(self.tcx.hir().body_param_names(body_id))
      136 ( 0.00%)      }
        .           
        .               fn encode_fn_param_names(&mut self, param_names: &[Ident]) -> Lazy<[Ident]> {
        .                   self.lazy(param_names.iter())
        .               }
        .           
        .               fn encode_mir(&mut self) {
        3 ( 0.00%)          if self.is_proc_macro {
        .                       return;
        .                   }
        .           
        .                   let keys_and_jobs = self
        .                       .tcx
        .                       .mir_keys(())
        .                       .iter()
        .                       .filter_map(|&def_id| {
      805 ( 0.00%)                  let (encode_const, encode_opt) = should_encode_mir(self.tcx, def_id);
      642 ( 0.00%)                  if encode_const || encode_opt {
      106 ( 0.00%)                      Some((def_id, encode_const, encode_opt))
        .                           } else {
        .                               None
        .                           }
      322 ( 0.00%)              })
        .                       .collect::<Vec<_>>();
      270 ( 0.00%)          for (def_id, encode_const, encode_opt) in keys_and_jobs.into_iter() {
        .                       debug_assert!(encode_const || encode_opt);
        .           
        .                       debug!("EntryBuilder::encode_mir({:?})", def_id);
       53 ( 0.00%)              if encode_opt {
        .                           record!(self.tables.mir[def_id.to_def_id()] <- self.tcx.optimized_mir(def_id));
        .                       }
       53 ( 0.00%)              if encode_const {
      212 ( 0.00%)                  record!(self.tables.mir_for_ctfe[def_id.to_def_id()] <- self.tcx.mir_for_ctfe(def_id));
        .           
        .                           // FIXME(generic_const_exprs): this feels wrong to have in `encode_mir`
       53 ( 0.00%)                  let abstract_const = self.tcx.thir_abstract_const(def_id);
      212 ( 0.00%)                  if let Ok(Some(abstract_const)) = abstract_const {
        .                               record!(self.tables.thir_abstract_consts[def_id.to_def_id()] <- abstract_const);
        .                           }
        .                       }
      212 ( 0.00%)              record!(self.tables.promoted_mir[def_id.to_def_id()] <- self.tcx.promoted_mir(def_id));
        .           
        .                       let instance =
        .                           ty::InstanceDef::Item(ty::WithOptConstParam::unknown(def_id.to_def_id()));
       53 ( 0.00%)              let unused = self.tcx.unused_generic_params(instance);
       53 ( 0.00%)              if !unused.is_empty() {
        .                           record!(self.tables.unused_generic_params[def_id.to_def_id()] <- unused);
        .                       }
        .                   }
        .               }
        .           
        .               fn encode_stability(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_stability({:?})", def_id);
        .           
        .                   // The query lookup can take a measurable amount of time in crates with many items. Check if
        .                   // the stability attributes are even enabled before using their queries.
    2,232 ( 0.00%)          if self.feat.staged_api || self.tcx.sess.opts.debugging_opts.force_unstable_if_unmarked {
        .                       if let Some(stab) = self.tcx.lookup_stability(def_id) {
        .                           record!(self.tables.stability[def_id] <- stab)
        .                       }
        .                   }
        .               }
        .           
        .               fn encode_const_stability(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_const_stability({:?})", def_id);
        .           
        .                   // The query lookup can take a measurable amount of time in crates with many items. Check if
        .                   // the stability attributes are even enabled before using their queries.
    1,953 ( 0.00%)          if self.feat.staged_api || self.tcx.sess.opts.debugging_opts.force_unstable_if_unmarked {
        .                       if let Some(stab) = self.tcx.lookup_const_stability(def_id) {
        .                           record!(self.tables.const_stability[def_id] <- stab)
        .                       }
        .                   }
        .               }
        .           
    1,674 ( 0.00%)      fn encode_deprecation(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_deprecation({:?})", def_id);
    1,395 ( 0.00%)          if let Some(depr) = self.tcx.lookup_deprecation(def_id) {
        .                       record!(self.tables.deprecation[def_id] <- depr);
        .                   }
    1,395 ( 0.00%)      }
        .           
      282 ( 0.00%)      fn encode_rendered_const_for_body(&mut self, body_id: hir::BodyId) -> Lazy<RenderedConst> {
      141 ( 0.00%)          let hir = self.tcx.hir();
       94 ( 0.00%)          let body = hir.body(body_id);
      376 ( 0.00%)          let rendered = rustc_hir_pretty::to_string(&(&hir as &dyn intravisit::Map<'_>), |s| {
      141 ( 0.00%)              s.print_expr(&body.value)
        .                   });
       94 ( 0.00%)          let rendered_const = &RenderedConst(rendered);
        .                   self.lazy(rendered_const)
      329 ( 0.00%)      }
        .           
    1,053 ( 0.00%)      fn encode_info_for_item(&mut self, def_id: DefId, item: &'tcx hir::Item<'tcx>) {
        .                   let tcx = self.tcx;
        .           
        .                   debug!("EncodeContext::encode_info_for_item({:?})", def_id);
        .           
        .                   self.encode_ident_span(def_id, item.ident);
        .           
      702 ( 0.00%)          let entry_kind = match item.kind {
        .                       hir::ItemKind::Static(_, hir::Mutability::Mut, _) => EntryKind::MutStatic,
        .                       hir::ItemKind::Static(_, hir::Mutability::Not, _) => EntryKind::ImmStatic,
       42 ( 0.00%)              hir::ItemKind::Const(_, body_id) => {
       42 ( 0.00%)                  let qualifs = self.tcx.at(item.span).mir_const_qualif(def_id);
       98 ( 0.00%)                  EntryKind::Const(qualifs, self.encode_rendered_const_for_body(body_id))
        .                       }
       34 ( 0.00%)              hir::ItemKind::Fn(ref sig, .., body) => {
        .                           let data = FnData {
       17 ( 0.00%)                      asyncness: sig.header.asyncness,
       17 ( 0.00%)                      constness: sig.header.constness,
       34 ( 0.00%)                      param_names: self.encode_fn_param_names_for_body(body),
        .                           };
        .           
        .                           EntryKind::Fn(self.lazy(data))
        .                       }
        .                       hir::ItemKind::Macro(ref macro_def) => {
        .                           EntryKind::MacroDef(self.lazy(macro_def.clone()))
        .                       }
        .                       hir::ItemKind::Mod(ref m) => {
       12 ( 0.00%)                  return self.encode_info_for_mod(item.def_id, m);
        .                       }
        .                       hir::ItemKind::ForeignMod { .. } => EntryKind::ForeignMod,
        .                       hir::ItemKind::GlobalAsm(..) => EntryKind::GlobalAsm,
        .                       hir::ItemKind::TyAlias(..) => EntryKind::Type,
        .                       hir::ItemKind::OpaqueTy(..) => {
       35 ( 0.00%)                  self.encode_explicit_item_bounds(def_id);
        .                           EntryKind::OpaqueTy
        .                       }
       18 ( 0.00%)              hir::ItemKind::Enum(..) => EntryKind::Enum(self.tcx.adt_def(def_id).repr),
        .                       hir::ItemKind::Struct(ref struct_def, _) => {
       14 ( 0.00%)                  let adt_def = self.tcx.adt_def(def_id);
       21 ( 0.00%)                  let variant = adt_def.non_enum_variant();
        .           
        .                           // Encode def_ids for each field and method
        .                           // for methods, write all the stuff get_trait_method
        .                           // needs to know
       28 ( 0.00%)                  let ctor = struct_def
        .                               .ctor_hir_id()
       12 ( 0.00%)                      .map(|ctor_hir_id| self.tcx.hir().local_def_id(ctor_hir_id).local_def_index);
        .           
        .                           EntryKind::Struct(
        .                               self.lazy(VariantData {
        7 ( 0.00%)                          ctor_kind: variant.ctor_kind,
       28 ( 0.00%)                          discr: variant.discr,
        .                                   ctor,
        .                                   is_non_exhaustive: variant.is_field_list_non_exhaustive(),
        .                               }),
       21 ( 0.00%)                      adt_def.repr,
        .                           )
        .                       }
        .                       hir::ItemKind::Union(..) => {
        .                           let adt_def = self.tcx.adt_def(def_id);
        .                           let variant = adt_def.non_enum_variant();
        .           
        .                           EntryKind::Union(
        .                               self.lazy(VariantData {
-- line 1461 ----------------------------------------
-- line 1462 ----------------------------------------
        .                                   ctor_kind: variant.ctor_kind,
        .                                   discr: variant.discr,
        .                                   ctor: None,
        .                                   is_non_exhaustive: variant.is_field_list_non_exhaustive(),
        .                               }),
        .                               adt_def.repr,
        .                           )
        .                       }
      272 ( 0.00%)              hir::ItemKind::Impl(hir::Impl { defaultness, constness, .. }) => {
      258 ( 0.00%)                  let trait_ref = self.tcx.impl_trait_ref(def_id);
      136 ( 0.00%)                  let polarity = self.tcx.impl_polarity(def_id);
      136 ( 0.00%)                  let parent = if let Some(trait_ref) = trait_ref {
       61 ( 0.00%)                      let trait_def = self.tcx.trait_def(trait_ref.def_id);
      366 ( 0.00%)                      trait_def.ancestors(self.tcx, def_id).ok().and_then(|mut an| {
      366 ( 0.00%)                          an.nth(1).and_then(|node| match node {
        .                                       specialization_graph::Node::Impl(parent) => Some(parent),
        .                                       _ => None,
        .                                   })
        .                               })
        .                           } else {
        .                               None
        .                           };
        .           
        .                           // if this is an impl of `CoerceUnsized`, create its
        .                           // "unsized info", else just store None
        .                           let coerce_unsized_info = trait_ref.and_then(|t| {
      366 ( 0.00%)                      if Some(t.def_id) == self.tcx.lang_items().coerce_unsized_trait() {
        .                                   Some(self.tcx.at(item.span).coerce_unsized_info(def_id))
        .                               } else {
        .                                   None
        .                               }
        .                           });
        .           
        .                           let data = ImplData {
        .                               polarity,
-- line 1496 ----------------------------------------
-- line 1518 ----------------------------------------
        .                       }
        .                       hir::ItemKind::TraitAlias(..) => EntryKind::TraitAlias,
        .                       hir::ItemKind::ExternCrate(_) | hir::ItemKind::Use(..) => {
        .                           bug!("cannot encode info for item {:?}", item)
        .                       }
        .                   };
        .                   record!(self.tables.kind[def_id] <- entry_kind);
        .                   // FIXME(eddyb) there should be a nicer way to do this.
      580 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::Enum(..) => record!(self.tables.children[def_id] <-
        6 ( 0.00%)                  self.tcx.adt_def(def_id).variants.iter().map(|v| {
       25 ( 0.00%)                      assert!(v.def_id.is_local());
        .                               v.def_id.index
        .                           })
        .                       ),
        .                       hir::ItemKind::Struct(..) | hir::ItemKind::Union(..) => {
        .                           record!(self.tables.children[def_id] <-
       21 ( 0.00%)                      self.tcx.adt_def(def_id).non_enum_variant().fields.iter().map(|f| {
       15 ( 0.00%)                          assert!(f.did.is_local());
        .                                   f.did.index
        .                               })
        .                           )
        .                       }
        .                       hir::ItemKind::Impl { .. } | hir::ItemKind::Trait(..) => {
      136 ( 0.00%)                  let associated_item_def_ids = self.tcx.associated_item_def_ids(def_id);
        .                           record!(self.tables.children[def_id] <-
        .                               associated_item_def_ids.iter().map(|&def_id| {
       84 ( 0.00%)                          assert!(def_id.is_local());
        .                                   def_id.index
        .                               })
        .                           );
        .                       }
        .                       _ => {}
        .                   }
      310 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::Static(..)
        .                       | hir::ItemKind::Const(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::TyAlias(..)
        .                       | hir::ItemKind::OpaqueTy(..)
        .                       | hir::ItemKind::Enum(..)
        .                       | hir::ItemKind::Struct(..)
        .                       | hir::ItemKind::Union(..)
      464 ( 0.00%)              | hir::ItemKind::Impl { .. } => self.encode_item_type(def_id),
        .                       _ => {}
        .                   }
      348 ( 0.00%)          if let hir::ItemKind::Fn(..) = item.kind {
       68 ( 0.00%)              record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
        .                   }
      249 ( 0.00%)          if let hir::ItemKind::Impl { .. } = item.kind {
      340 ( 0.00%)              if let Some(trait_ref) = self.tcx.impl_trait_ref(def_id) {
      305 ( 0.00%)                  record!(self.tables.impl_trait_ref[def_id] <- trait_ref);
        .                       }
        .                   }
      928 ( 0.00%)      }
        .           
        .               fn encode_info_for_generic_param(&mut self, def_id: DefId, kind: EntryKind, encode_type: bool) {
       27 ( 0.00%)          record!(self.tables.kind[def_id] <- kind);
        9 ( 0.00%)          if encode_type {
        .                       self.encode_item_type(def_id);
        .                   }
        .               }
        .           
        .               fn encode_info_for_closure(&mut self, hir_id: hir::HirId) {
      114 ( 0.00%)          let def_id = self.tcx.hir().local_def_id(hir_id);
        .                   debug!("EncodeContext::encode_info_for_closure({:?})", def_id);
        .           
        .                   // NOTE(eddyb) `tcx.type_of(def_id)` isn't used because it's fully generic,
        .                   // including on the signature, which is inferred in `typeck.
       57 ( 0.00%)          let ty = self.tcx.typeck(def_id).node_type(hir_id);
        .           
       57 ( 0.00%)          match ty.kind() {
        .                       ty::Generator(..) => {
        .                           let data = self.tcx.generator_kind(def_id).unwrap();
        .                           record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::Generator(data));
        .                       }
        .           
        .                       ty::Closure(..) => {
        .                           record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::Closure);
        .                       }
        .           
        .                       _ => bug!("closure that is neither generator nor closure"),
        .                   }
       76 ( 0.00%)          self.encode_item_type(def_id.to_def_id());
       76 ( 0.00%)          if let ty::Closure(def_id, substs) = *ty.kind() {
      171 ( 0.00%)              record!(self.tables.fn_sig[def_id] <- substs.as_closure().sig());
        .                   }
        .               }
        .           
        .               fn encode_info_for_anon_const(&mut self, id: hir::HirId) {
      231 ( 0.00%)          let def_id = self.tcx.hir().local_def_id(id);
        .                   debug!("EncodeContext::encode_info_for_anon_const({:?})", def_id);
      165 ( 0.00%)          let body_id = self.tcx.hir().body_owned_by(id);
      132 ( 0.00%)          let const_data = self.encode_rendered_const_for_body(body_id);
       33 ( 0.00%)          let qualifs = self.tcx.mir_const_qualif(def_id);
        .           
      132 ( 0.00%)          record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::AnonConst(qualifs, const_data));
      132 ( 0.00%)          self.encode_item_type(def_id.to_def_id());
        .               }
        .           
        .               fn encode_native_libraries(&mut self) -> Lazy<[NativeLib]> {
        2 ( 0.00%)          empty_proc_macro!(self);
        2 ( 0.00%)          let used_libraries = self.tcx.native_libraries(LOCAL_CRATE);
        .                   self.lazy(used_libraries.iter())
        .               }
        .           
        .               fn encode_foreign_modules(&mut self) -> Lazy<[ForeignModule]> {
        5 ( 0.00%)          empty_proc_macro!(self);
        2 ( 0.00%)          let foreign_modules = self.tcx.foreign_modules(LOCAL_CRATE);
        .                   self.lazy(foreign_modules.iter().map(|(_, m)| m).cloned())
        .               }
        .           
        .               fn encode_hygiene(&mut self) -> (SyntaxContextTable, ExpnDataTable, ExpnHashTable) {
        .                   let mut syntax_contexts: TableBuilder<_, _> = Default::default();
        .                   let mut expn_data_table: TableBuilder<_, _> = Default::default();
        .                   let mut expn_hash_table: TableBuilder<_, _> = Default::default();
        .           
        2 ( 0.00%)          let _: Result<(), !> = self.hygiene_ctxt.encode(
        8 ( 0.00%)              &mut (&mut *self, &mut syntax_contexts, &mut expn_data_table, &mut expn_hash_table),
        .                       |(this, syntax_contexts, _, _), index, ctxt_data| {
        .                           syntax_contexts.set(index, this.lazy(ctxt_data));
        .                           Ok(())
        .                       },
        .                       |(this, _, expn_data_table, expn_hash_table), index, expn_data, hash| {
        .                           if let Some(index) = index.as_local() {
       98 ( 0.00%)                      expn_data_table.set(index.as_raw(), this.lazy(expn_data));
       98 ( 0.00%)                      expn_hash_table.set(index.as_raw(), this.lazy(hash));
        .                           }
        .                           Ok(())
        .                       },
        .                   );
        .           
        .                   (
        .                       syntax_contexts.encode(&mut self.opaque),
        .                       expn_data_table.encode(&mut self.opaque),
        .                       expn_hash_table.encode(&mut self.opaque),
        .                   )
        .               }
        .           
        .               fn encode_proc_macros(&mut self) -> Option<ProcMacroData> {
        6 ( 0.00%)          let is_proc_macro = self.tcx.sess.crate_types().contains(&CrateType::ProcMacro);
        .                   if is_proc_macro {
        .                       let tcx = self.tcx;
        .                       let hir = tcx.hir();
        .           
        .                       let proc_macro_decls_static = tcx.proc_macro_decls_static(()).unwrap().local_def_index;
        .                       let stability = tcx.lookup_stability(DefId::local(CRATE_DEF_INDEX)).copied();
        .                       let macros =
        .                           self.lazy(tcx.resolutions(()).proc_macros.iter().map(|p| p.local_def_index));
-- line 1666 ----------------------------------------
-- line 1725 ----------------------------------------
        .           
        .                       Some(ProcMacroData { proc_macro_decls_static, stability, macros })
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               fn encode_crate_deps(&mut self) -> Lazy<[CrateDep]> {
        7 ( 0.00%)          empty_proc_macro!(self);
        .           
        1 ( 0.00%)          let deps = self
        .                       .tcx
        .                       .crates(())
        .                       .iter()
        .                       .map(|&cnum| {
        .                           let dep = CrateDep {
       19 ( 0.00%)                      name: self.tcx.crate_name(cnum),
       19 ( 0.00%)                      hash: self.tcx.crate_hash(cnum),
       19 ( 0.00%)                      host_hash: self.tcx.crate_host_hash(cnum),
       19 ( 0.00%)                      kind: self.tcx.dep_kind(cnum),
       19 ( 0.00%)                      extra_filename: self.tcx.extra_filename(cnum),
        .                           };
       95 ( 0.00%)                  (cnum, dep)
        .                       })
        .                       .collect::<Vec<_>>();
        .           
        .                   {
        .                       // Sanity-check the crate numbers
        .                       let mut expected_cnum = 1;
       38 ( 0.00%)              for &(n, _) in &deps {
       48 ( 0.00%)                  assert_eq!(n, CrateNum::new(expected_cnum));
        .                           expected_cnum += 1;
        .                       }
        .                   }
        .           
        .                   // We're just going to write a list of crate 'name-hash-version's, with
        .                   // the assumption that they are numbered 1 to n.
        .                   // FIXME (#2166): This is not nearly enough to support correct versioning
        .                   // but is enough to get transitive crate dependencies working.
        .                   self.lazy(deps.iter().map(|&(_, ref dep)| dep))
        .               }
        .           
        .               fn encode_lib_features(&mut self) -> Lazy<[(Symbol, Option<Symbol>)]> {
        2 ( 0.00%)          empty_proc_macro!(self);
        1 ( 0.00%)          let tcx = self.tcx;
        .                   let lib_features = tcx.lib_features(());
        2 ( 0.00%)          self.lazy(lib_features.to_vec())
        .               }
        .           
        .               fn encode_diagnostic_items(&mut self) -> Lazy<[(Symbol, DefIndex)]> {
        3 ( 0.00%)          empty_proc_macro!(self);
        1 ( 0.00%)          let tcx = self.tcx;
        .                   let diagnostic_items = &tcx.diagnostic_items(LOCAL_CRATE).name_to_id;
        .                   self.lazy(diagnostic_items.iter().map(|(&name, def_id)| (name, def_id.index)))
        .               }
        .           
        .               fn encode_lang_items(&mut self) -> Lazy<[(DefIndex, usize)]> {
        4 ( 0.00%)          empty_proc_macro!(self);
        1 ( 0.00%)          let tcx = self.tcx;
        1 ( 0.00%)          let lang_items = tcx.lang_items();
        2 ( 0.00%)          let lang_items = lang_items.items().iter();
        .                   self.lazy(lang_items.enumerate().filter_map(|(i, &opt_def_id)| {
      568 ( 0.00%)              if let Some(def_id) = opt_def_id {
        .                           if def_id.is_local() {
        .                               return Some((def_id.index, i));
        .                           }
        .                       }
        .                       None
        .                   }))
        .               }
        .           
        .               fn encode_lang_items_missing(&mut self) -> Lazy<[lang_items::LangItem]> {
        2 ( 0.00%)          empty_proc_macro!(self);
        1 ( 0.00%)          let tcx = self.tcx;
        1 ( 0.00%)          self.lazy(&tcx.lang_items().missing)
        .               }
        .           
        .               fn encode_traits(&mut self) -> Lazy<[DefIndex]> {
        3 ( 0.00%)          empty_proc_macro!(self);
        1 ( 0.00%)          self.lazy(self.tcx.traits_in_crate(LOCAL_CRATE).iter().map(|def_id| def_id.index))
        .               }
        .           
        .               /// Encodes an index, mapping each trait to its (local) implementations.
        .               fn encode_impls(&mut self) -> Lazy<[TraitImpls]> {
        .                   debug!("EncodeContext::encode_traits_and_impls()");
        2 ( 0.00%)          empty_proc_macro!(self);
        2 ( 0.00%)          let tcx = self.tcx;
        5 ( 0.00%)          let mut visitor = ImplsVisitor { tcx, impls: FxHashMap::default() };
        4 ( 0.00%)          tcx.hir().visit_all_item_likes(&mut visitor);
        .           
        .                   let mut all_impls: Vec<_> = visitor.impls.into_iter().collect();
        .           
        .                   // Bring everything into deterministic order for hashing
       15 ( 0.00%)          all_impls.sort_by_cached_key(|&(trait_def_id, _)| tcx.def_path_hash(trait_def_id));
        .           
        .                   let all_impls: Vec<_> = all_impls
        .                       .into_iter()
      225 ( 0.00%)              .map(|(trait_def_id, mut impls)| {
        .                           // Bring everything into deterministic order for hashing
       14 ( 0.00%)                  impls.sort_by_cached_key(|&(index, _)| {
       60 ( 0.00%)                      tcx.hir().def_path_hash(LocalDefId { local_def_index: index })
        .                           });
        .           
       60 ( 0.00%)                  TraitImpls {
        .                               trait_id: (trait_def_id.krate.as_u32(), trait_def_id.index),
       45 ( 0.00%)                      impls: self.lazy(&impls),
        .                           }
      120 ( 0.00%)              })
        .                       .collect();
        .           
        .                   self.lazy(&all_impls)
        .               }
        .           
        .               // Encodes all symbols exported from this crate into the metadata.
        .               //
        .               // This pass is seeded off the reachability list calculated in the
        .               // middle::reachable module but filters out items that either don't have a
        .               // symbol associated with them (they weren't translated) or if they're an FFI
        .               // definition (as that's not defined in this crate).
        .               fn encode_exported_symbols(
        .                   &mut self,
        .                   exported_symbols: &[(ExportedSymbol<'tcx>, SymbolExportLevel)],
        .               ) -> Lazy<[(ExportedSymbol<'tcx>, SymbolExportLevel)]> {
        2 ( 0.00%)          empty_proc_macro!(self);
        .                   // The metadata symbol name is special. It should not show up in
        .                   // downstream crates.
        9 ( 0.00%)          let metadata_symbol_name = SymbolName::new(self.tcx, &metadata_symbol_name(self.tcx));
        .           
        .                   self.lazy(
        .                       exported_symbols
        .                           .iter()
        .                           .filter(|&&(ref exported_symbol, _)| match *exported_symbol {
        .                               ExportedSymbol::NoDefId(symbol_name) => symbol_name != metadata_symbol_name,
        .                               _ => true,
        .                           })
        .                           .cloned(),
        .                   )
        .               }
        .           
        .               fn encode_dylib_dependency_formats(&mut self) -> Lazy<[Option<LinkagePreference>]> {
        2 ( 0.00%)          empty_proc_macro!(self);
        2 ( 0.00%)          let formats = self.tcx.dependency_formats(());
        4 ( 0.00%)          for (ty, arr) in formats.iter() {
        2 ( 0.00%)              if *ty != CrateType::Dylib {
        .                           continue;
        .                       }
        .                       return self.lazy(arr.iter().map(|slot| match *slot {
        .                           Linkage::NotLinked | Linkage::IncludedFromDylib => None,
        .           
        .                           Linkage::Dynamic => Some(LinkagePreference::RequireDynamic),
        .                           Linkage::Static => Some(LinkagePreference::RequireStatic),
        .                       }));
-- line 1876 ----------------------------------------
-- line 1914 ----------------------------------------
        .               }
        .           }
        .           
        .           // FIXME(eddyb) make metadata encoding walk over all definitions, instead of HIR.
        .           impl<'a, 'tcx> Visitor<'tcx> for EncodeContext<'a, 'tcx> {
        .               type NestedFilter = nested_filter::OnlyBodies;
        .           
        .               fn nested_visit_map(&mut self) -> Self::Map {
      158 ( 0.00%)          self.tcx.hir()
        .               }
  576,837 ( 0.01%)      fn visit_expr(&mut self, ex: &'tcx hir::Expr<'tcx>) {
   64,093 ( 0.00%)          intravisit::walk_expr(self, ex);
        .                   self.encode_info_for_expr(ex);
  512,744 ( 0.01%)      }
      297 ( 0.00%)      fn visit_anon_const(&mut self, c: &'tcx AnonConst) {
        .                   intravisit::walk_anon_const(self, c);
       66 ( 0.00%)          self.encode_info_for_anon_const(c.hir_id);
      264 ( 0.00%)      }
        .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
      384 ( 0.00%)          intravisit::walk_item(self, item);
      256 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::ExternCrate(_) | hir::ItemKind::Use(..) => {} // ignore these
      468 ( 0.00%)              _ => self.encode_info_for_item(item.def_id.to_def_id(), item),
        .                   }
      512 ( 0.00%)          self.encode_addl_info_for_item(item);
        .               }
        .               fn visit_foreign_item(&mut self, ni: &'tcx hir::ForeignItem<'tcx>) {
        .                   intravisit::walk_foreign_item(self, ni);
        .                   self.encode_info_for_foreign_item(ni.def_id.to_def_id(), ni);
        .               }
    1,611 ( 0.00%)      fn visit_generics(&mut self, generics: &'tcx hir::Generics<'tcx>) {
        .                   intravisit::walk_generics(self, generics);
        .                   self.encode_info_for_generics(generics);
    1,432 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> EncodeContext<'a, 'tcx> {
       70 ( 0.00%)      fn encode_fields(&mut self, adt_def: &ty::AdtDef) {
        .                   for (variant_index, variant) in adt_def.variants.iter_enumerated() {
        .                       for (field_index, _field) in variant.fields.iter().enumerate() {
        .                           self.encode_field(adt_def, variant_index, field_index);
        .                       }
        .                   }
       80 ( 0.00%)      }
        .           
        .               fn encode_info_for_generics(&mut self, generics: &hir::Generics<'tcx>) {
        .                   for param in generics.params {
      108 ( 0.00%)              let def_id = self.tcx.hir().local_def_id(param.hir_id);
      124 ( 0.00%)              match param.kind {
        .                           GenericParamKind::Lifetime { .. } => continue,
        .                           GenericParamKind::Type { default, .. } => {
        .                               self.encode_info_for_generic_param(
        .                                   def_id.to_def_id(),
        .                                   EntryKind::TypeParam,
        .                                   default.is_some(),
        .                               );
        .                           }
-- line 1970 ----------------------------------------
-- line 1975 ----------------------------------------
        .                                   record!(self.tables.const_defaults[def_id] <- self.tcx.const_param_default(def_id))
        .                               }
        .                           }
        .                       }
        .                   }
        .               }
        .           
        .               fn encode_info_for_expr(&mut self, expr: &hir::Expr<'_>) {
  128,186 ( 0.00%)          if let hir::ExprKind::Closure(..) = expr.kind {
        .                       self.encode_info_for_closure(expr.hir_id);
        .                   }
        .               }
        .           
        .               fn encode_ident_span(&mut self, def_id: DefId, ident: Ident) {
        .                   record!(self.tables.ident_span[def_id] <- ident.span);
        .               }
        .           
        .               /// In some cases, along with the item itself, we also
        .               /// encode some sub-items. Usually we want some info from the item
        .               /// so it's easier to do that here then to wait until we would encounter
        .               /// normally in the visitor walk.
    1,152 ( 0.00%)      fn encode_addl_info_for_item(&mut self, item: &hir::Item<'_>) {
      640 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::Static(..)
        .                       | hir::ItemKind::Const(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::Macro(..)
        .                       | hir::ItemKind::Mod(..)
        .                       | hir::ItemKind::ForeignMod { .. }
        .                       | hir::ItemKind::GlobalAsm(..)
        .                       | hir::ItemKind::ExternCrate(..)
        .                       | hir::ItemKind::Use(..)
        .                       | hir::ItemKind::TyAlias(..)
        .                       | hir::ItemKind::OpaqueTy(..)
        .                       | hir::ItemKind::TraitAlias(..) => {
        .                           // no sub-item recording needed in these cases
        .                       }
        .                       hir::ItemKind::Enum(..) => {
        3 ( 0.00%)                  let def = self.tcx.adt_def(item.def_id.to_def_id());
        6 ( 0.00%)                  self.encode_fields(def);
        .           
        .                           for (i, variant) in def.variants.iter_enumerated() {
        .                               self.encode_enum_variant_info(def, i);
        .           
       75 ( 0.00%)                      if let Some(_ctor_def_id) = variant.ctor_def_id {
        .                                   self.encode_enum_variant_ctor(def, i);
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::Struct(ref struct_def, _) => {
        7 ( 0.00%)                  let def = self.tcx.adt_def(item.def_id.to_def_id());
       14 ( 0.00%)                  self.encode_fields(def);
        .           
        .                           // If the struct has a constructor, encode it.
       28 ( 0.00%)                  if let Some(ctor_hir_id) = struct_def.ctor_hir_id() {
       18 ( 0.00%)                      let ctor_def_id = self.tcx.hir().local_def_id(ctor_hir_id);
        .                               self.encode_struct_ctor(def, ctor_def_id.to_def_id());
        .                           }
        .                       }
        .                       hir::ItemKind::Union(..) => {
        .                           let def = self.tcx.adt_def(item.def_id.to_def_id());
        .                           self.encode_fields(def);
        .                       }
        .                       hir::ItemKind::Impl { .. } => {
      336 ( 0.00%)                  for &trait_item_def_id in
       68 ( 0.00%)                      self.tcx.associated_item_def_ids(item.def_id.to_def_id()).iter()
        .                           {
        .                               self.encode_info_for_impl_item(trait_item_def_id);
        .                           }
        .                       }
        .                       hir::ItemKind::Trait(..) => {
        .                           for &item_def_id in self.tcx.associated_item_def_ids(item.def_id.to_def_id()).iter()
        .                           {
        .                               self.encode_info_for_trait_item(item_def_id);
        .                           }
        .                       }
        .                   }
    1,024 ( 0.00%)      }
        .           }
        .           
        .           struct ImplsVisitor<'tcx> {
        .               tcx: TyCtxt<'tcx>,
        .               impls: FxHashMap<DefId, Vec<(DefIndex, Option<SimplifiedType>)>>,
        .           }
        .           
        .           impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplsVisitor<'tcx> {
      896 ( 0.00%)      fn visit_item(&mut self, item: &hir::Item<'_>) {
      256 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::Impl(..) => {
      258 ( 0.00%)                  if let Some(trait_ref) = self.tcx.impl_trait_ref(item.def_id.to_def_id()) {
      366 ( 0.00%)                      let simplified_self_ty = fast_reject::simplify_type(
        .                                   self.tcx,
        .                                   trait_ref.self_ty(),
        .                                   SimplifyParams::No,
        .                                   StripReferences::No,
        .                               );
        .           
        .                               self.impls
        .                                   .entry(trait_ref.def_id)
        .                                   .or_default()
        .                                   .push((item.def_id.local_def_index, simplified_self_ty));
        .                           }
        .                       }
        .                       _ => {}
        .                   }
    1,024 ( 0.00%)      }
        .           
        .               fn visit_trait_item(&mut self, _trait_item: &'v hir::TraitItem<'v>) {}
        .           
        .               fn visit_impl_item(&mut self, _impl_item: &'v hir::ImplItem<'v>) {
        .                   // handled in `visit_item` above
        .               }
        .           
        .               fn visit_foreign_item(&mut self, _foreign_item: &'v hir::ForeignItem<'v>) {}
-- line 2088 ----------------------------------------
-- line 2146 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               pub fn raw_data(&self) -> &[u8] {
        .                   &self.raw_data
        .               }
        .           }
        .           
       10 ( 0.00%)  pub fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {
        5 ( 0.00%)      let _prof_timer = tcx.prof.verbose_generic_activity("generate_crate_metadata");
        .           
        .               // Since encoding metadata is not in a query, and nothing is cached,
        .               // there's no need to do dep-graph tracking for any of it.
        .               tcx.dep_graph.assert_ignored();
        .           
        7 ( 0.00%)      join(
        3 ( 0.00%)          || encode_metadata_impl(tcx),
        .                   || {
        5 ( 0.00%)              if tcx.sess.threads() == 1 {
        .                           return;
        .                       }
        .                       // Prefetch some queries used by metadata encoding.
        .                       // This is not necessary for correctness, but is only done for performance reasons.
        .                       // It can be removed if it turns out to cause trouble or be detrimental to performance.
        .                       join(|| prefetch_mir(tcx), || tcx.exported_symbols(LOCAL_CRATE));
        .                   },
        .               )
        .               .0
        9 ( 0.00%)  }
        .           
        9 ( 0.00%)  fn encode_metadata_impl(tcx: TyCtxt<'_>) -> EncodedMetadata {
        1 ( 0.00%)      let mut encoder = opaque::Encoder::new(vec![]);
        .               encoder.emit_raw_bytes(METADATA_HEADER).unwrap();
        .           
        .               // Will be filled with the root position after encoding everything.
        .               encoder.emit_raw_bytes(&[0, 0, 0, 0]).unwrap();
        .           
        2 ( 0.00%)      let source_map_files = tcx.sess.source_map().files();
        3 ( 0.00%)      let source_file_cache = (source_map_files[0].clone(), 0);
        2 ( 0.00%)      let required_source_files = Some(GrowableBitSet::with_capacity(source_map_files.len()));
        .               drop(source_map_files);
        .           
        .               let hygiene_ctxt = HygieneEncodeContext::default();
        .           
       35 ( 0.00%)      let mut ecx = EncodeContext {
        4 ( 0.00%)          opaque: encoder,
        .                   tcx,
        2 ( 0.00%)          feat: tcx.features(),
        .                   tables: Default::default(),
        .                   lazy_state: LazyState::NoNode,
        .                   type_shorthands: Default::default(),
        .                   predicate_shorthands: Default::default(),
        4 ( 0.00%)          source_file_cache,
        .                   interpret_allocs: Default::default(),
        4 ( 0.00%)          required_source_files,
        2 ( 0.00%)          is_proc_macro: tcx.sess.crate_types().contains(&CrateType::ProcMacro),
        .                   hygiene_ctxt: &hygiene_ctxt,
        .               };
        .           
        .               // Encode the rustc version string in a predictable location.
        .               rustc_version().encode(&mut ecx).unwrap();
        .           
        .               // Encode all the entries and extra information in the crate,
        .               // culminating in the `CrateRoot` which points to all of it.
        1 ( 0.00%)      let root = ecx.encode_crate_root();
        .           
        7 ( 0.00%)      let mut result = ecx.opaque.into_inner();
        .           
        .               // Encode the root position.
        .               let header = METADATA_HEADER.len();
        .               let pos = root.position.get();
        3 ( 0.00%)      result[header + 0] = (pos >> 24) as u8;
        3 ( 0.00%)      result[header + 1] = (pos >> 16) as u8;
        1 ( 0.00%)      result[header + 2] = (pos >> 8) as u8;
        5 ( 0.00%)      result[header + 3] = (pos >> 0) as u8;
        .           
        .               // Record metadata size for self-profiling
        .               tcx.prof.artifact_size("crate_metadata", "crate_metadata", result.len() as u64);
        .           
        5 ( 0.00%)      EncodedMetadata { raw_data: result }
       12 ( 0.00%)  }
        .           
        .           pub fn provide(providers: &mut Providers) {
        2 ( 0.00%)      *providers = Providers {
        .                   traits_in_crate: |tcx, cnum| {
        1 ( 0.00%)              assert_eq!(cnum, LOCAL_CRATE);
        .           
        1 ( 0.00%)              #[derive(Default)]
        .                       struct TraitsVisitor {
        .                           traits: Vec<DefId>,
        .                       }
        .                       impl ItemLikeVisitor<'_> for TraitsVisitor {
        .                           fn visit_item(&mut self, item: &hir::Item<'_>) {
      512 ( 0.00%)                      if let hir::ItemKind::Trait(..) | hir::ItemKind::TraitAlias(..) = item.kind {
        .                                   self.traits.push(item.def_id.to_def_id());
        .                               }
        .                           }
        .                           fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}
        .                           fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}
        .                           fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}
        .                       }
        .           
        .                       let mut visitor = TraitsVisitor::default();
        4 ( 0.00%)              tcx.hir().visit_all_item_likes(&mut visitor);
        .                       // Bring everything into deterministic order.
        .                       visitor.traits.sort_by_cached_key(|&def_id| tcx.def_path_hash(def_id));
        .                       tcx.arena.alloc_slice(&visitor.traits)
        .                   },
        .           
        .                   ..*providers
        .               };
        .           }
-- line 2257 ----------------------------------------

  292,134 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/encoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 417 ----------------------------------------
         .               /// # #![allow(unused_mut)]
         .               /// let mut vec: Vec<i32> = Vec::new();
         .               /// ```
         .               #[inline]
         .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[must_use]
         .               pub const fn new() -> Self {
 7,455,532 ( 0.19%)          Vec { buf: RawVec::NEW, len: 0 }
       123 ( 0.00%)      }
         .           
         .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
         .               ///
         .               /// The vector will be able to hold exactly `capacity` elements without
         .               /// reallocating. If `capacity` is 0, the vector will not allocate.
         .               ///
         .               /// It is important to note that although the returned vector has the
         .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
         .               /// vec.push(11);
         .               /// assert_eq!(vec.len(), 11);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[unstable(feature = "allocator_api", issue = "32838")]
         .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
 1,573,776 ( 0.04%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
         .               }
         .           
         .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
         .               ///
         .               /// # Safety
         .               ///
         .               /// This is highly unsafe, due to the number of invariants that aren't
         .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
         .               ///     // Put everything back together into a Vec
         .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
         .               ///     assert_eq!(rebuilt, [4, 5, 6]);
         .               /// }
         .               /// ```
         .               #[inline]
         .               #[unstable(feature = "allocator_api", issue = "32838")]
         .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
    74,715 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
         .               }
         .           
         .               /// Decomposes a `Vec<T>` into its raw components.
         .               ///
         .               /// Returns the raw pointer to the underlying data, the length of
         .               /// the vector (in elements), and the allocated capacity of the
         .               /// data (in elements). These are the same arguments in the same
         .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let vec: Vec<i32> = Vec::with_capacity(10);
         .               /// assert_eq!(vec.capacity(), 10);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn capacity(&self) -> usize {
 1,280,224 ( 0.03%)          self.buf.capacity()
         .               }
         .           
         .               /// Reserves capacity for at least `additional` more elements to be inserted
         .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
         .               /// frequent reallocations. After calling `reserve`, capacity will be
         .               /// greater than or equal to `self.len() + additional`. Does nothing if
         .               /// capacity is already sufficient.
         .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1];
         .               /// vec.reserve(10);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn reserve(&mut self, additional: usize) {
   729,560 ( 0.02%)          self.buf.reserve(self.len, additional);
         .               }
         .           
         .               /// Reserves the minimum capacity for exactly `additional` more elements to
         .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
         .               /// capacity will be greater than or equal to `self.len() + additional`.
         .               /// Does nothing if the capacity is already sufficient.
         .               ///
         .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1];
         .               /// vec.reserve_exact(10);
         .               /// assert!(vec.capacity() >= 11);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn reserve_exact(&mut self, additional: usize) {
     3,009 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
         .               }
         .           
         .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
         .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
         .               /// frequent reallocations. After calling `try_reserve`, capacity will be
         .               /// greater than or equal to `self.len() + additional`. Does nothing if
         .               /// capacity is already sufficient.
         .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
         .               /// assert!(vec.capacity() >= 3);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn shrink_to_fit(&mut self) {
         .                   // The capacity is never less than the length, and there's nothing to do when
         .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
         .                   // by only calling it with a greater capacity.
    97,230 ( 0.00%)          if self.capacity() > self.len {
     2,491 ( 0.00%)              self.buf.shrink_to_fit(self.len);
         .                   }
         .               }
         .           
         .               /// Shrinks the capacity of the vector with a lower bound.
         .               ///
         .               /// The capacity will remain at least as large as both the length
         .               /// and the supplied value.
         .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
         .               /// let slice = vec.into_boxed_slice();
         .               /// assert_eq!(slice.into_vec().capacity(), 3);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
         .                   unsafe {
         .                       self.shrink_to_fit();
    22,460 ( 0.00%)              let me = ManuallyDrop::new(self);
         .                       let buf = ptr::read(&me.buf);
         .                       let len = me.len();
         .                       buf.into_box(len).assume_init()
         .                   }
         .               }
         .           
         .               /// Shortens the vector, keeping the first `len` elements and dropping
         .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
         .               /// let mut vec = vec![1, 2, 3];
         .               /// vec.truncate(0);
         .               /// assert_eq!(vec, []);
         .               /// ```
         .               ///
         .               /// [`clear`]: Vec::clear
         .               /// [`drain`]: Vec::drain
         .               #[stable(feature = "rust1", since = "1.0.0")]
   696,772 ( 0.02%)      pub fn truncate(&mut self, len: usize) {
         .                   // This is safe because:
         .                   //
         .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
         .                   //   case avoids creating an invalid slice, and
         .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
         .                   //   such that no value will be dropped twice in case `drop_in_place`
         .                   //   were to panic once (if it panics twice, the program aborts).
         .                   unsafe {
         .                       // Note: It's intentional that this is `>` and not `>=`.
         .                       //       Changing it to `>=` has negative performance
         .                       //       implications in some cases. See #78884 for more.
   525,999 ( 0.01%)              if len > self.len {
         .                           return;
         .                       }
         .                       let remaining_len = self.len - len;
         .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
   399,296 ( 0.01%)              self.len = len;
     1,720 ( 0.00%)              ptr::drop_in_place(s);
         .                   }
   836,126 ( 0.02%)      }
         .           
         .               /// Extracts a slice containing the entire vector.
         .               ///
         .               /// Equivalent to `&s[..]`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
         .               /// ```
         .               ///
         .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
         .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
         .               #[inline]
         .               pub fn as_ptr(&self) -> *const T {
         .                   // We shadow the slice method of the same name to avoid going through
         .                   // `deref`, which creates an intermediate reference.
10,767,372 ( 0.27%)          let ptr = self.buf.ptr();
         .                   unsafe {
         .                       assume(!ptr.is_null());
         .                   }
         .                   ptr
         .               }
         .           
         .               /// Returns an unsafe mutable pointer to the vector's buffer.
         .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
         .               /// }
         .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
         .               /// ```
         .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
         .               #[inline]
         .               pub fn as_mut_ptr(&mut self) -> *mut T {
         .                   // We shadow the slice method of the same name to avoid going through
         .                   // `deref_mut`, which creates an intermediate reference.
 6,986,636 ( 0.18%)          let ptr = self.buf.ptr();
         .                   unsafe {
         .                       assume(!ptr.is_null());
         .                   }
         .                   ptr
         .               }
         .           
         .               /// Returns a reference to the underlying allocator.
         .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
         .               ///
         .               /// Normally, here, one would use [`clear`] instead to correctly drop
         .               /// the contents and thus not leak memory.
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub unsafe fn set_len(&mut self, new_len: usize) {
         .                   debug_assert!(new_len <= self.capacity());
         .           
 1,738,734 ( 0.04%)          self.len = new_len;
    20,170 ( 0.00%)      }
         .           
         .               /// Removes an element from the vector and returns it.
         .               ///
         .               /// The removed element is replaced by the last element of the vector.
         .               ///
         .               /// This does not preserve ordering, but is *O*(1).
         .               /// If you need to preserve the element order, use [`remove`] instead.
         .               ///
-- line 1276 ----------------------------------------
-- line 1329 ----------------------------------------
         .               /// let mut vec = vec![1, 2, 3];
         .               /// vec.insert(1, 4);
         .               /// assert_eq!(vec, [1, 4, 2, 3]);
         .               /// vec.insert(4, 5);
         .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
     1,701 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
         .                   #[cold]
         .                   #[inline(never)]
         .                   fn assert_failed(index: usize, len: usize) -> ! {
         .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
         .                   }
         .           
       306 ( 0.00%)          let len = self.len();
     1,016 ( 0.00%)          if index > len {
         .                       assert_failed(index, len);
         .                   }
         .           
         .                   // space for the new element
     2,134 ( 0.00%)          if len == self.buf.capacity() {
         .                       self.reserve(1);
         .                   }
         .           
         .                   unsafe {
         .                       // infallible
         .                       // The spot to put the new value
         .                       {
         .                           let p = self.as_mut_ptr().add(index);
         .                           // Shift everything over to make space. (Duplicating the
         .                           // `index`th element into two consecutive places.)
     3,012 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
         .                           // Write it in, overwriting the first copy of the `index`th
         .                           // element.
         .                           ptr::write(p, element);
         .                       }
     2,134 ( 0.00%)              self.set_len(len + 1);
         .                   }
     1,458 ( 0.00%)      }
         .           
         .               /// Removes and returns the element at position `index` within the vector,
         .               /// shifting all elements after it to the left.
         .               ///
         .               /// Note: Because this shifts over the remaining elements, it has a
         .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
         .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
         .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
         .               pub fn remove(&mut self, index: usize) -> T {
         .                   #[cold]
         .                   #[inline(never)]
         .                   #[track_caller]
         .                   fn assert_failed(index: usize, len: usize) -> ! {
         .                       panic!("removal index (is {}) should be < len (is {})", index, len);
         .                   }
         .           
        90 ( 0.00%)          let len = self.len();
       352 ( 0.00%)          if index >= len {
         .                       assert_failed(index, len);
         .                   }
         .                   unsafe {
         .                       // infallible
         .                       let ret;
         .                       {
         .                           // the place we are taking from.
         .                           let ptr = self.as_mut_ptr().add(index);
         .                           // copy it out, unsafely having a copy of the value on
         .                           // the stack and in the vector at the same time.
       128 ( 0.00%)                  ret = ptr::read(ptr);
         .           
         .                           // Shift everything down to fill in that spot.
       262 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
         .                       }
       114 ( 0.00%)              self.set_len(len - 1);
         .                       ret
         .                   }
         .               }
         .           
         .               /// Retains only the elements specified by the predicate.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
         .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2, 3, 4, 5];
         .               /// let keep = [false, true, true, false, true];
         .               /// let mut iter = keep.iter();
         .               /// vec.retain(|_| *iter.next().unwrap());
         .               /// assert_eq!(vec, [2, 3, 5]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
   563,412 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
         .               where
         .                   F: FnMut(&T) -> bool,
         .               {
   163,144 ( 0.00%)          self.retain_mut(|elem| f(elem));
   531,592 ( 0.01%)      }
         .           
         .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
         .               /// This method operates in place, visiting each element exactly once in the
         .               /// original order, and preserves the order of the retained elements.
         .               ///
         .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
         .               /// });
         .               /// assert_eq!(vec, [2, 3, 4]);
         .               /// ```
         .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
         .               pub fn retain_mut<F>(&mut self, mut f: F)
         .               where
         .                   F: FnMut(&mut T) -> bool,
         .               {
    66,723 ( 0.00%)          let original_len = self.len();
         .                   // Avoid double drop if the drop guard is not executed,
         .                   // since we may make some holes during the process.
         .                   unsafe { self.set_len(0) };
         .           
         .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
         .                   //      |<-              processed len   ->| ^- next to check
         .                   //                  |<-  deleted cnt     ->|
         .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
         .                       v: &'a mut Vec<T, A>,
         .                       processed_len: usize,
         .                       deleted_cnt: usize,
         .                       original_len: usize,
         .                   }
         .           
         .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
         .                       fn drop(&mut self) {
     5,130 ( 0.00%)                  if self.deleted_cnt > 0 {
         .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
         .                               unsafe {
         .                                   ptr::copy(
         .                                       self.v.as_ptr().add(self.processed_len),
     3,536 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
         .                                       self.original_len - self.processed_len,
         .                                   );
         .                               }
         .                           }
         .                           // SAFETY: After filling holes, all items are in contiguous memory.
         .                           unsafe {
         2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
         .                           }
         .                       }
         .                   }
         .           
         .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
         .           
         .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
         .                       original_len: usize,
         .                       f: &mut F,
         .                       g: &mut BackshiftOnDrop<'_, T, A>,
         .                   ) where
         .                       F: FnMut(&mut T) -> bool,
         .                   {
 1,086,712 ( 0.03%)              while g.processed_len != original_len {
         .                           // SAFETY: Unchecked element must be valid.
         .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
   333,004 ( 0.01%)                  if !f(cur) {
         .                               // Advance early to avoid double drop if `drop_in_place` panicked.
       253 ( 0.00%)                      g.processed_len += 1;
        68 ( 0.00%)                      g.deleted_cnt += 1;
         .                               // SAFETY: We never touch this element again after dropped.
       120 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
         .                               // We already advanced the counter.
         .                               if DELETED {
         .                                   continue;
         .                               } else {
         .                                   break;
         .                               }
         .                           }
         .                           if DELETED {
         .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
         .                               // We use copy for move, and never touch this element again.
         .                               unsafe {
       825 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
         .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
         .                               }
         .                           }
       550 ( 0.00%)                  g.processed_len += 1;
         .                       }
         .                   }
         .           
         .                   // Stage 1: Nothing was deleted.
         .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
         .           
         .                   // Stage 2: Some elements were deleted.
         .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
         .               ///
         .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
         .               ///
         .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
         .               /// ```
         .               #[stable(feature = "dedup_by", since = "1.16.0")]
       553 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
         .               where
         .                   F: FnMut(&mut T, &mut T) -> bool,
         .               {
    10,007 ( 0.00%)          let len = self.len();
    20,446 ( 0.00%)          if len <= 1 {
         .                       return;
         .                   }
         .           
         .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
         .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
         .                       /* Offset of the element we want to check if it is duplicate */
         .                       read: usize,
         .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
         .                   let ptr = gap.vec.as_mut_ptr();
         .           
         .                   /* Drop items while going through Vec, it should be more efficient than
         .                    * doing slice partition_dedup + truncate */
         .           
         .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
         .                    * are always in-bounds and read_ptr never aliases prev_ptr */
         .                   unsafe {
    50,087 ( 0.00%)              while gap.read < len {
         .                           let read_ptr = ptr.add(gap.read);
         .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
         .           
       259 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
         .                               // Increase `gap.read` now since the drop may panic.
         .                               gap.read += 1;
         .                               /* We have found duplicate, drop it in-place */
         .                               ptr::drop_in_place(read_ptr);
         .                           } else {
         .                               let write_ptr = ptr.add(gap.write);
         .           
         .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
         .                                * have to use `copy` or conditional `copy_nonoverlapping`.
         .                                * Looks like the first option is faster. */
         .                               ptr::copy(read_ptr, write_ptr, 1);
         .           
         .                               /* We have filled that place, so go further */
    29,933 ( 0.00%)                      gap.write += 1;
         .                               gap.read += 1;
         .                           }
         .                       }
         .           
         .                       /* Technically we could let `gap` clean up with its Drop, but
         .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
         .                        * the codegen, so we just do it manually */
         .                       gap.vec.set_len(gap.write);
         .                       mem::forget(gap);
         .                   }
       632 ( 0.00%)      }
         .           
         .               /// Appends an element to the back of a collection.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
         .               ///
         .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2];
         .               /// vec.push(3);
         .               /// assert_eq!(vec, [1, 2, 3]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
       170 ( 0.00%)      pub fn push(&mut self, value: T) {
         .                   // This will panic or abort if we would allocate > isize::MAX bytes
         .                   // or if the length increment would overflow for zero-sized types.
 8,522,253 ( 0.22%)          if self.len == self.buf.capacity() {
   386,322 ( 0.01%)              self.buf.reserve_for_push(self.len);
         .                   }
         .                   unsafe {
   174,332 ( 0.00%)              let end = self.as_mut_ptr().add(self.len);
         .                       ptr::write(end, value);
12,240,166 ( 0.31%)              self.len += 1;
         .                   }
       136 ( 0.00%)      }
         .           
         .               /// Removes the last element from a vector and returns it, or [`None`] if it
         .               /// is empty.
         .               ///
         .               /// If you'd like to pop the first element, consider using
         .               /// [`VecDeque::pop_front`] instead.
         .               ///
         .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
         .               /// ```
         .               /// let mut vec = vec![1, 2, 3];
         .               /// assert_eq!(vec.pop(), Some(3));
         .               /// assert_eq!(vec, [1, 2]);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn pop(&mut self) -> Option<T> {
 2,912,836 ( 0.07%)          if self.len == 0 {
         2 ( 0.00%)              None
         .                   } else {
         .                       unsafe {
 2,153,284 ( 0.05%)                  self.len -= 1;
   397,301 ( 0.01%)                  Some(ptr::read(self.as_ptr().add(self.len())))
         .                       }
         .                   }
         .               }
         .           
         .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
         .               ///
         .               /// # Panics
         .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
         .               /// let mut vec2 = vec![4, 5, 6];
         .               /// vec.append(&mut vec2);
         .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
         .               /// assert_eq!(vec2, []);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "append", since = "1.4.0")]
       147 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
         .                   unsafe {
         .                       self.append_elements(other.as_slice() as _);
         .                       other.set_len(0);
         .                   }
       126 ( 0.00%)      }
         .           
         .               /// Appends elements to `Self` from other buffer.
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               unsafe fn append_elements(&mut self, other: *const [T]) {
         .                   let count = unsafe { (*other).len() };
         .                   self.reserve(count);
   124,545 ( 0.00%)          let len = self.len();
         .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
 1,104,549 ( 0.03%)          self.len += count;
         .               }
         .           
         .               /// Creates a draining iterator that removes the specified range in the vector
         .               /// and yields the removed items.
         .               ///
         .               /// When the iterator **is** dropped, all elements in the range are removed
         .               /// from the vector, even if the iterator was not fully consumed. If the
         .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
         .                   // When the Drain is first created, it shortens the length of
         .                   // the source vector to make sure no uninitialized or moved-from elements
         .                   // are accessible at all if the Drain's destructor never gets to run.
         .                   //
         .                   // Drain will ptr::read out the values to remove.
         .                   // When finished, remaining tail of the vec is copied back to cover
         .                   // the hole, and the vector length is restored to the new length.
         .                   //
     8,019 ( 0.00%)          let len = self.len();
         .                   let Range { start, end } = slice::range(range, ..len);
         .           
         .                   unsafe {
         .                       // set self.vec length's to start, to be safe in case Drain is leaked
         .                       self.set_len(start);
         .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
         .                       // whole Drain iterator (like &mut T).
     2,631 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
     2,529 ( 0.00%)              Drain {
         .                           tail_start: end,
     1,756 ( 0.00%)                  tail_len: len - end,
         .                           iter: range_slice.iter(),
         .                           vec: NonNull::from(self),
         .                       }
         .                   }
         .               }
         .           
         .               /// Clears the vector, removing all values.
         .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
         .               ///
         .               /// v.clear();
         .               ///
         .               /// assert!(v.is_empty());
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn clear(&mut self) {
 1,253,874 ( 0.03%)          self.truncate(0)
         .               }
         .           
         .               /// Returns the number of elements in the vector, also referred to
         .               /// as its 'length'.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
         .               /// let mut v = Vec::new();
         .               /// assert!(v.is_empty());
         .               ///
         .               /// v.push(1);
         .               /// assert!(!v.is_empty());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn is_empty(&self) -> bool {
 1,296,130 ( 0.03%)          self.len() == 0
         .               }
         .           
         .               /// Splits the collection into two at the given index.
         .               ///
         .               /// Returns a newly allocated vector containing the elements in the range
         .               /// `[at, len)`. After the call, the original vector will be left containing
         .               /// the elements `[0, at)` with its previous capacity unchanged.
         .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
         .                   A: Clone,
         .               {
         .                   #[cold]
         .                   #[inline(never)]
         .                   fn assert_failed(at: usize, len: usize) -> ! {
         .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
         .                   }
         .           
       548 ( 0.00%)          if at > self.len() {
         .                       assert_failed(at, self.len());
         .                   }
         .           
       412 ( 0.00%)          if at == 0 {
         .                       // the new vector can take over the original buffer and avoid the copy
         .                       return mem::replace(
         .                           self,
         .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
         .                       );
         .                   }
         .           
         .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
         .               ///
         .               /// let mut vec = vec![];
         .               /// let mut p = 1;
         .               /// vec.resize_with(4, || { p *= 2; p });
         .               /// assert_eq!(vec, [2, 4, 8, 16]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    13,732 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
         .               where
         .                   F: FnMut() -> T,
         .               {
     1,894 ( 0.00%)          let len = self.len();
     3,788 ( 0.00%)          if new_len > len {
    38,360 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
         .                   } else {
         .                       self.truncate(new_len);
         .                   }
    11,838 ( 0.00%)      }
         .           
         .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
         .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
         .               /// `'a`. If the type has only static references, or none at all, then this
         .               /// may be chosen to be `'static`.
         .               ///
         .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
         .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
         .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
         .               #[inline]
         .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
         .                   // Note:
         .                   // This method is not implemented in terms of `split_at_spare_mut`,
         .                   // to prevent invalidation of pointers to the buffer.
         .                   unsafe {
         .                       slice::from_raw_parts_mut(
         2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
        21 ( 0.00%)                  self.buf.capacity() - self.len,
         .                       )
         .                   }
         .               }
         .           
         .               /// Returns vector content as a slice of `T`, along with the remaining spare
         .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
         .               ///
         .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
         .               /// assert_eq!(vec, ["hello", "world", "world"]);
         .               ///
         .               /// let mut vec = vec![1, 2, 3, 4];
         .               /// vec.resize(2, 0);
         .               /// assert_eq!(vec, [1, 2]);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "vec_resize", since = "1.5.0")]
    99,810 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
     9,981 ( 0.00%)          let len = self.len();
         .           
    29,943 ( 0.00%)          if new_len > len {
     5,478 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
         .                   } else {
         .                       self.truncate(new_len);
         .                   }
    15,789 ( 0.00%)      }
         .           
         .               /// Clones and appends all elements in a slice to the `Vec`.
         .               ///
         .               /// Iterates over the slice `other`, clones each element, and then appends
         .               /// it to this `Vec`. The `other` slice is traversed in-order.
         .               ///
         .               /// Note that this function is same as [`extend`] except that it is
         .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2271 ----------------------------------------
         .           trait ExtendWith<T> {
         .               fn next(&mut self) -> T;
         .               fn last(self) -> T;
         .           }
         .           
         .           struct ExtendElement<T>(T);
         .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
         .               fn next(&mut self) -> T {
       468 ( 0.00%)          self.0.clone()
         .               }
         .               fn last(self) -> T {
         .                   self.0
         .               }
         .           }
         .           
         .           struct ExtendFunc<F>(F);
         .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
-- line 2287 ----------------------------------------
-- line 2291 ----------------------------------------
         .               fn last(mut self) -> T {
         .                   (self.0)()
         .               }
         .           }
         .           
         .           impl<T, A: Allocator> Vec<T, A> {
         .               #[cfg(not(no_global_oom_handling))]
         .               /// Extend the vector by `n` values, using the given generator.
   542,285 ( 0.01%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
         .                   self.reserve(n);
         .           
         .                   unsafe {
     2,986 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
         .                       // Use SetLenOnDrop to work around bug where compiler
         .                       // might not realize the store through `ptr` through self.set_len()
         .                       // don't alias.
         .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
         .           
         .                       // Write all elements except the last one
         .                       for _ in 1..n {
         .                           ptr::write(ptr, value.next());
         .                           ptr = ptr.offset(1);
         .                           // Increment the length in every step in case next() panics
         .                           local_len.increment_len(1);
         .                       }
         .           
   343,602 ( 0.01%)              if n > 0 {
         .                           // We can write the last element directly without cloning needlessly
         .                           ptr::write(ptr, value.last());
         .                           local_len.increment_len(1);
         .                       }
         .           
         .                       // len set by scope guard
         .                   }
   433,581 ( 0.01%)      }
         .           }
         .           
         .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
         .               /// Removes consecutive repeated elements in the vector according to the
         .               /// [`PartialEq`] trait implementation.
         .               ///
         .               /// If the vector is sorted, this removes all duplicates.
         .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
         .               ///
         .               /// vec.dedup();
         .               ///
         .               /// assert_eq!(vec, [1, 2, 3, 2]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               pub fn dedup(&mut self) {
        87 ( 0.00%)          self.dedup_by(|a, b| a == b)
         .               }
         .           }
         .           
         .           ////////////////////////////////////////////////////////////////////////////////
         .           // Internal methods and functions
         .           ////////////////////////////////////////////////////////////////////////////////
         .           
         .           #[doc(hidden)]
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
   176,827 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   511,084 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
   178,138 ( 0.00%)  }
         .           
         .           #[doc(hidden)]
         .           #[cfg(not(no_global_oom_handling))]
         .           #[unstable(feature = "allocator_api", issue = "32838")]
         .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
         .               <T as SpecFromElem>::from_elem(elem, n, alloc)
         .           }
         .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
         .           // Common trait implementations for Vec
         .           ////////////////////////////////////////////////////////////////////////////////
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
         .               type Target = [T];
         .           
         .               fn deref(&self) -> &[T] {
18,872,361 ( 0.48%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
        72 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
         .               fn deref_mut(&mut self) -> &mut [T] {
 4,987,828 ( 0.13%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           trait SpecCloneFrom {
         .               fn clone_from(this: &mut Self, other: &Self);
         .           }
         .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
         .                   this.extend_from_slice(other);
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
         .               #[cfg(not(test))]
   405,238 ( 0.01%)      fn clone(&self) -> Self {
         .                   let alloc = self.allocator().clone();
         2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   468,230 ( 0.01%)      }
         .           
         .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
         .               // required for this method definition, is not available. Instead use the
         .               // `slice::to_vec`  function which is only available with cfg(test)
         .               // NB see the slice::hack module in slice.rs for more information
         .               #[cfg(test)]
         .               fn clone(&self) -> Self {
         .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
         .               message = "vector indices are of type `usize` or ranges of `usize`",
         .               label = "vector indices are of type `usize` or ranges of `usize`"
         .           )]
         .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
         .               type Output = I::Output;
         .           
         .               #[inline]
         .               fn index(&self, index: I) -> &Self::Output {
   621,603 ( 0.02%)          Index::index(&**self, index)
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_on_unimplemented(
         .               message = "vector indices are of type `usize` or ranges of `usize`",
         .               label = "vector indices are of type `usize` or ranges of `usize`"
         .           )]
         .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
         .               #[inline]
         .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
       168 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T> FromIterator<T> for Vec<T> {
         .               #[inline]
         .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
 2,628,732 ( 0.07%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
         .               type Item = T;
         .               type IntoIter = IntoIter<T, A>;
         .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
         .               /// for s in v.into_iter() {
         .               ///     // s has type String, not &String
         .               ///     println!("{}", s);
         .               /// }
         .               /// ```
         .               #[inline]
         .               fn into_iter(self) -> IntoIter<T, A> {
         .                   unsafe {
 1,481,581 ( 0.04%)              let mut me = ManuallyDrop::new(self);
         .                       let alloc = ptr::read(me.allocator());
         .                       let begin = me.as_mut_ptr();
         .                       let end = if mem::size_of::<T>() == 0 {
         .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
         .                       } else {
         .                           begin.add(me.len()) as *const T
         .                       };
         .                       let cap = me.buf.capacity();
   395,431 ( 0.01%)              IntoIter {
         .                           buf: NonNull::new_unchecked(begin),
         .                           phantom: PhantomData,
         .                           cap,
         .                           alloc,
         .                           ptr: begin,
         .                           end,
         .                       }
         .                   }
-- line 2589 ----------------------------------------
-- line 2601 ----------------------------------------
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
         .               type Item = &'a mut T;
         .               type IntoIter = slice::IterMut<'a, T>;
         .           
         .               fn into_iter(self) -> slice::IterMut<'a, T> {
     1,052 ( 0.00%)          self.iter_mut()
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
         .               #[inline]
       656 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
   985,530 ( 0.03%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
       656 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn extend_one(&mut self, item: T) {
         .                   self.push(item);
         .               }
         .           
         .               #[inline]
         .               fn extend_reserve(&mut self, additional: usize) {
-- line 2627 ----------------------------------------
-- line 2636 ----------------------------------------
         .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
         .                   // This is the case for a general iterator.
         .                   //
         .                   // This function should be the moral equivalent of:
         .                   //
         .                   //      for item in iterator {
         .                   //          self.push(item);
         .                   //      }
    33,025 ( 0.00%)          while let Some(element) = iterator.next() {
     8,312 ( 0.00%)              let len = self.len();
   538,189 ( 0.01%)              if len == self.capacity() {
       568 ( 0.00%)                  let (lower, _) = iterator.size_hint();
         .                           self.reserve(lower.saturating_add(1));
         .                       }
         .                       unsafe {
         .                           ptr::write(self.as_mut_ptr().add(len), element);
         .                           // Since next() executes user code which can panic we have to bump the length
         .                           // after each step.
         .                           // NB can't overflow since we would have had to alloc the address space
   312,267 ( 0.01%)                  self.set_len(len + 1);
         .                       }
         .                   }
       950 ( 0.00%)      }
         .           
         .               /// Creates a splicing iterator that replaces the specified range in the vector
         .               /// with the given `replace_with` iterator and yields the removed items.
         .               /// `replace_with` does not need to be the same length as `range`.
         .               ///
         .               /// `range` is removed even if the iterator is not consumed until the end.
         .               ///
         .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "vec_splice", since = "1.21.0")]
         .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
         .               where
         .                   R: RangeBounds<usize>,
         .                   I: IntoIterator<Item = T>,
         .               {
    16,089 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
         .               }
         .           
         .               /// Creates an iterator which uses a closure to determine if an element should be removed.
         .               ///
         .               /// If the closure returns true, then the element is removed and yielded.
         .               /// If the closure returns false, the element will remain in the vector and will not be yielded
         .               /// by the iterator.
         .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
         .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
         .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
         .               /// ```
         .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
         .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
         .               where
         .                   F: FnMut(&mut T) -> bool,
         .               {
       841 ( 0.00%)          let old_len = self.len();
         .           
         .                   // Guard against us getting leaked (leak amplification)
         .                   unsafe {
         .                       self.set_len(0);
         .                   }
         .           
     2,816 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
         .               }
         .           }
         .           
         .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
         .           ///
         .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
         .           /// append the entire slice at once.
         .           ///
-- line 2768 ----------------------------------------
-- line 2803 ----------------------------------------
         .               #[inline]
         .               fn cmp(&self, other: &Self) -> Ordering {
         .                   Ord::cmp(&**self, &**other)
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
 2,251,769 ( 0.06%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // use drop for [T]
         .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
         .                       // could avoid questions of validity in certain cases
   848,768 ( 0.02%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
         .                   }
         .                   // RawVec handles deallocation
 2,672,936 ( 0.07%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
         .           impl<T> const Default for Vec<T> {
         .               /// Creates an empty `Vec<T>`.
         .               fn default() -> Vec<T> {
         .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
         .               /// newly-allocated buffer with exactly the right capacity.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
         .               /// ```
         .               fn from(v: Vec<T, A>) -> Self {
         4 ( 0.00%)          v.into_boxed_slice()
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl From<&str> for Vec<u8> {
         .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
         .               ///
-- line 2992 ----------------------------------------

 4,334,851 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 97 ----------------------------------------
        .           
        .               /// If true, the capture is behind a reference.
        .               by_ref: bool,
        .           }
        .           
        .           const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];
        .           
        .           pub fn provide(providers: &mut Providers) {
        4 ( 0.00%)      *providers = Providers {
        .                   mir_borrowck: |tcx, did| {
      172 ( 0.00%)              if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {
        .                           tcx.mir_borrowck_const_arg(def)
        .                       } else {
      632 ( 0.00%)                  mir_borrowck(tcx, ty::WithOptConstParam::unknown(did))
        .                       }
        .                   },
        .                   mir_borrowck_const_arg: |tcx, (did, param_did)| {
        .                       mir_borrowck(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })
        .                   },
        .                   ..*providers
        .               };
        1 ( 0.00%)  }
        .           
    1,580 ( 0.00%)  fn mir_borrowck<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               def: ty::WithOptConstParam<LocalDefId>,
        .           ) -> &'tcx BorrowCheckResult<'tcx> {
        .               let (input_body, promoted) = tcx.mir_promoted(def);
        .               debug!("run query mir_borrowck: {}", tcx.def_path_str(def.did.to_def_id()));
        .           
    2,054 ( 0.00%)      let opt_closure_req = tcx.infer_ctxt().with_opaque_type_inference(def.did).enter(|infcx| {
        .                   let input_body: &Body<'_> = &input_body.borrow();
        .                   let promoted: &IndexVec<_, _> = &promoted.borrow();
    2,212 ( 0.00%)          do_mir_borrowck(&infcx, input_body, promoted, false).0
      632 ( 0.00%)      });
        .               debug!("mir_borrowck done");
        .           
      158 ( 0.00%)      tcx.arena.alloc(opt_closure_req)
    1,264 ( 0.00%)  }
        .           
        .           /// Perform the actual borrow checking.
        .           ///
        .           /// If `return_body_with_facts` is true, then return the body with non-erased
        .           /// region ids on which the borrow checking was performed together with Polonius
        .           /// facts.
    3,476 ( 0.00%)  #[instrument(skip(infcx, input_body, input_promoted), level = "debug")]
        .           fn do_mir_borrowck<'a, 'tcx>(
        .               infcx: &InferCtxt<'a, 'tcx>,
        .               input_body: &Body<'tcx>,
        .               input_promoted: &IndexVec<Promoted, Body<'tcx>>,
        .               return_body_with_facts: bool,
        .           ) -> (BorrowCheckResult<'tcx>, Option<Box<BodyWithBorrowckFacts<'tcx>>>) {
    1,580 ( 0.00%)      let def = input_body.source.with_opt_param().as_local().unwrap();
        .           
        .               debug!(?def);
        .           
      316 ( 0.00%)      let tcx = infcx.tcx;
        .               let param_env = tcx.param_env(def.did);
      158 ( 0.00%)      let id = tcx.hir().local_def_id_to_hir_id(def.did);
        .           
      316 ( 0.00%)      let mut local_names = IndexVec::from_elem(None, &input_body.local_decls);
        .               for var_debug_info in &input_body.var_debug_info {
    1,350 ( 0.00%)          if let VarDebugInfoContents::Place(place) = var_debug_info.value {
      671 ( 0.00%)              if let Some(local) = place.as_local() {
      993 ( 0.00%)                  if let Some(prev_name) = local_names[local] {
        .                               if var_debug_info.name != prev_name {
        .                                   span_bug!(
        .                                       var_debug_info.source_info.span,
        .                                       "local {:?} has many names (`{}` vs `{}`)",
        .                                       local,
        .                                       prev_name,
        .                                       var_debug_info.name
        .                                   );
        .                               }
        .                           }
      993 ( 0.00%)                  local_names[local] = Some(var_debug_info.name);
        .                       }
        .                   }
        .               }
        .           
        .               // Gather the upvars of a closure, if any.
      632 ( 0.00%)      let tables = tcx.typeck_opt_const_arg(def);
      316 ( 0.00%)      if let Some(ErrorReported) = tables.tainted_by_errors {
        .                   infcx.set_tainted_by_errors();
        .               }
      632 ( 0.00%)      let upvars: Vec<_> = tables
        .                   .closure_min_captures_flattened(def.did.to_def_id())
        .                   .map(|captured_place| {
        .                       let capture = captured_place.info.capture_kind;
        9 ( 0.00%)              let by_ref = match capture {
        .                           ty::UpvarCapture::ByValue => false,
        .                           ty::UpvarCapture::ByRef(..) => true,
        .                       };
        .                       Upvar { place: captured_place.clone(), by_ref }
        .                   })
        .                   .collect();
        .           
        .               // Replace all regions with fresh inference variables. This
        .               // requires first making our own copy of the MIR. This copy will
        .               // be modified (in place) to contain non-lexical lifetimes. It
        .               // will have a lifetime tied to the inference context.
      316 ( 0.00%)      let mut body_owned = input_body.clone();
        .               let mut promoted = input_promoted.clone();
        .               let free_regions =
      474 ( 0.00%)          nll::replace_regions_in_mir(infcx, param_env, &mut body_owned, &mut promoted);
        .               let body = &body_owned; // no further changes
        .           
      158 ( 0.00%)      let location_table_owned = LocationTable::new(body);
        .               let location_table = &location_table_owned;
        .           
        .               let mut errors_buffer = Vec::new();
      474 ( 0.00%)      let (move_data, move_errors): (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>) =
    1,106 ( 0.00%)          match MoveData::gather_moves(&body, tcx, param_env) {
      948 ( 0.00%)              Ok(move_data) => (move_data, Vec::new()),
        .                       Err((move_data, move_errors)) => (move_data, move_errors),
        .                   };
        .               let promoted_errors = promoted
        .                   .iter_enumerated()
      290 ( 0.00%)          .map(|(idx, body)| (idx, MoveData::gather_moves(&body, tcx, param_env)));
        .           
      948 ( 0.00%)      let mdpe = MoveDataParamEnv { move_data, param_env };
        .           
    1,264 ( 0.00%)      let mut flow_inits = MaybeInitializedPlaces::new(tcx, &body, &mdpe)
      158 ( 0.00%)          .into_engine(tcx, &body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint()
        .                   .into_results_cursor(&body);
        .           
    1,896 ( 0.00%)      let locals_are_invalidated_at_exit = tcx.hir().body_owner_kind(id).is_fn_or_closure();
        .               let borrow_set =
    1,580 ( 0.00%)          Rc::new(BorrowSet::build(tcx, body, locals_are_invalidated_at_exit, &mdpe.move_data));
        .           
      790 ( 0.00%)      let use_polonius = return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius;
        .           
        .               // Compute non-lexical lifetimes.
        .               let nll::NllOutput {
      474 ( 0.00%)          regioncx,
      632 ( 0.00%)          opaque_type_values,
      316 ( 0.00%)          polonius_input,
      474 ( 0.00%)          polonius_output,
      632 ( 0.00%)          opt_closure_req,
    1,580 ( 0.00%)          nll_errors,
    2,844 ( 0.00%)      } = nll::compute_regions(
        .                   infcx,
    2,528 ( 0.00%)          free_regions,
        .                   body,
        .                   &promoted,
        .                   location_table,
        .                   param_env,
        .                   &mut flow_inits,
        .                   &mdpe.move_data,
        .                   &borrow_set,
        .                   &upvars,
        .                   use_polonius,
        .               );
        .           
        .               // Dump MIR results into a file, if that is enabled. This let us
        .               // write unit-tests, as well as helping with debugging.
      474 ( 0.00%)      nll::dump_mir_results(infcx, &body, &regioncx, &opt_closure_req);
        .           
        .               // We also have a `#[rustc_regions]` annotation that causes us to dump
        .               // information.
      316 ( 0.00%)      nll::dump_annotation(
        .                   infcx,
        .                   &body,
        .                   &regioncx,
        .                   &opt_closure_req,
        .                   &opaque_type_values,
        .                   &mut errors_buffer,
        .               );
        .           
        .               // The various `flow_*` structures can be large. We drop `flow_inits` here
        .               // so it doesn't overlap with the others below. This reduces peak memory
        .               // usage significantly on some benchmarks.
    2,528 ( 0.00%)      drop(flow_inits);
        .           
      158 ( 0.00%)      let regioncx = Rc::new(regioncx);
        .           
      948 ( 0.00%)      let flow_borrows = Borrows::new(tcx, body, &regioncx, &borrow_set)
      158 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
      948 ( 0.00%)      let flow_uninits = MaybeUninitializedPlaces::new(tcx, body, &mdpe)
      158 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
      948 ( 0.00%)      let flow_ever_inits = EverInitializedPlaces::new(tcx, body, &mdpe)
      158 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
        .           
      392 ( 0.00%)      let movable_generator = !matches!(
    1,024 ( 0.00%)          tcx.hir().get(id),
        .                   Node::Expr(&hir::Expr {
        .                       kind: hir::ExprKind::Closure(.., Some(hir::Movability::Static)),
        .                       ..
        .                   })
        .               );
        .           
      203 ( 0.00%)      for (idx, move_data_results) in promoted_errors {
        .                   let promoted_body = &promoted[idx];
        .           
       58 ( 0.00%)          if let Err((move_data, move_errors)) = move_data_results {
        .                       let mut promoted_mbcx = MirBorrowckCtxt {
        .                           infcx,
        .                           param_env,
        .                           body: promoted_body,
        .                           move_data: &move_data,
        .                           location_table, // no need to create a real one for the promoted, it is not used
        .                           movable_generator,
        .                           fn_self_span_reported: Default::default(),
-- line 307 ----------------------------------------
-- line 325 ----------------------------------------
        .                       };
        .                       promoted_mbcx.report_move_errors(move_errors);
        .                       errors_buffer = promoted_mbcx.errors_buffer;
        .                   };
        .               }
        .           
        .               let dominators = body.dominators();
        .           
    7,110 ( 0.00%)      let mut mbcx = MirBorrowckCtxt {
        .                   infcx,
        .                   param_env,
        .                   body,
        .                   move_data: &mdpe.move_data,
        .                   location_table,
        .                   movable_generator,
        .                   locals_are_invalidated_at_exit,
        .                   fn_self_span_reported: Default::default(),
        .                   access_place_error_reported: Default::default(),
        .                   reservation_error_reported: Default::default(),
        .                   reservation_warnings: Default::default(),
        .                   move_error_reported: BTreeMap::new(),
        .                   uninitialized_error_reported: Default::default(),
      632 ( 0.00%)          errors_buffer,
      158 ( 0.00%)          regioncx: Rc::clone(&regioncx),
        .                   used_mut: Default::default(),
        .                   used_mut_upvars: SmallVec::new(),
      158 ( 0.00%)          borrow_set: Rc::clone(&borrow_set),
      948 ( 0.00%)          dominators,
      632 ( 0.00%)          upvars,
      632 ( 0.00%)          local_names,
        .                   region_names: RefCell::default(),
        .                   next_region_name: RefCell::new(1),
        .                   polonius_output,
        .               };
        .           
        .               // Compute and report region errors, if any.
      474 ( 0.00%)      mbcx.report_region_errors(nll_errors);
        .           
        .               let results = BorrowckResults {
      948 ( 0.00%)          ever_inits: flow_ever_inits,
    1,264 ( 0.00%)          uninits: flow_uninits,
    1,738 ( 0.00%)          borrows: flow_borrows,
        .               };
        .           
      948 ( 0.00%)      mbcx.report_move_errors(move_errors);
        .           
      158 ( 0.00%)      rustc_mir_dataflow::visit_results(
        .                   body,
      158 ( 0.00%)          traversal::reverse_postorder(body).map(|(bb, _)| bb),
        .                   &results,
        .                   &mut mbcx,
        .               );
        .           
        .               // Convert any reservation warnings into lints.
        .               let reservation_warnings = mem::take(&mut mbcx.reservation_warnings);
        .               for (_, (place, span, location, bk, borrow)) in reservation_warnings {
        .                   let mut initial_diag = mbcx.report_conflicting_borrow(location, (place, span), bk, &borrow);
-- line 381 ----------------------------------------
-- line 406 ----------------------------------------
        .               // For each non-user used mutable variable, check if it's been assigned from
        .               // a user-declared local. If so, then put that local into the used_mut set.
        .               // Note that this set is expected to be small - only upvars from closures
        .               // would have a chance of erroneously adding non-user-defined mutable vars
        .               // to the set.
        .               let temporary_used_locals: FxHashSet<Local> = mbcx
        .                   .used_mut
        .                   .iter()
      158 ( 0.00%)          .filter(|&local| !mbcx.body.local_decls[*local].is_user_variable())
        .                   .cloned()
        .                   .collect();
        .               // For the remaining unused locals that are marked as mutable, we avoid linting any that
        .               // were never initialized. These locals may have been removed as unreachable code; or will be
        .               // linted as unused variables.
        .               let unused_mut_locals =
      158 ( 0.00%)          mbcx.body.mut_vars_iter().filter(|local| !mbcx.used_mut.contains(local)).collect();
      632 ( 0.00%)      mbcx.gather_used_muts(temporary_used_locals, unused_mut_locals);
        .           
        .               debug!("mbcx.used_mut: {:?}", mbcx.used_mut);
      632 ( 0.00%)      let used_mut = mbcx.used_mut;
      158 ( 0.00%)      for local in mbcx.body.mut_vars_and_args_iter().filter(|local| !used_mut.contains(local)) {
       22 ( 0.00%)          let local_decl = &mbcx.body.local_decls[local];
      132 ( 0.00%)          let lint_root = match &mbcx.body.source_scopes[local_decl.source_info.scope].local_data {
        .                       ClearCrossCrate::Set(data) => data.lint_root,
        .                       _ => continue,
        .                   };
        .           
        .                   // Skip over locals that begin with an underscore or have no name
       66 ( 0.00%)          match mbcx.local_names[local] {
        .                       Some(name) => {
        .                           if name.as_str().starts_with('_') {
        .                               continue;
        .                           }
        .                       }
        .                       None => continue,
        .                   }
        .           
-- line 442 ----------------------------------------
-- line 455 ----------------------------------------
        .                               String::new(),
        .                               Applicability::MachineApplicable,
        .                           )
        .                           .emit();
        .                   })
        .               }
        .           
        .               // Buffer any move errors that we collected and de-duplicated.
    1,422 ( 0.00%)      for (_, (_, diag)) in mbcx.move_error_reported {
        .                   diag.buffer(&mut mbcx.errors_buffer);
        .               }
        .           
      158 ( 0.00%)      if !mbcx.errors_buffer.is_empty() {
        .                   mbcx.errors_buffer.sort_by_key(|diag| diag.sort_span);
        .           
        .                   for diag in mbcx.errors_buffer.drain(..) {
        .                       mbcx.infcx.tcx.sess.diagnostic().emit_diagnostic(&diag);
        .                   }
        .               }
        .           
        .               let result = BorrowCheckResult {
      632 ( 0.00%)          concrete_opaque_types: opaque_type_values,
      790 ( 0.00%)          closure_requirements: opt_closure_req,
      948 ( 0.00%)          used_mut_upvars: mbcx.used_mut_upvars,
        .               };
        .           
      316 ( 0.00%)      let body_with_facts = if return_body_with_facts {
        .                   let output_facts = mbcx.polonius_output.expect("Polonius output was not computed");
        .                   Some(Box::new(BodyWithBorrowckFacts {
        .                       body: body_owned,
        .                       input_facts: *polonius_input.expect("Polonius input facts were not generated"),
        .                       output_facts,
        .                       location_table: location_table_owned,
        .                   }))
        .               } else {
        .                   None
        .               };
        .           
        .               debug!("do_mir_borrowck: result = {:#?}", result);
        .           
    2,212 ( 0.00%)      (result, body_with_facts)
    1,896 ( 0.00%)  }
        .           
        .           /// A `Body` with information computed by the borrow checker. This struct is
        .           /// intended to be consumed by compiler consumers.
        .           ///
        .           /// We need to include the MIR body here because the region identifiers must
        .           /// match the ones in the Polonius facts.
        .           pub struct BodyWithBorrowckFacts<'tcx> {
        .               /// A mir body that contains region identifiers.
-- line 504 ----------------------------------------
-- line 608 ----------------------------------------
        .           // Check that:
        .           // 1. assignments are always made to mutable locations (FIXME: does that still really go here?)
        .           // 2. loans made in overlapping scopes do not conflict
        .           // 3. assignments do not affect things loaned out as immutable
        .           // 4. moves do not affect things loaned out in any way
        .           impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx> {
        .               type FlowState = Flows<'cx, 'tcx>;
        .           
  518,598 ( 0.01%)      fn visit_statement_before_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   stmt: &'cx Statement<'tcx>,
        .                   location: Location,
        .               ) {
        .                   debug!("MirBorrowckCtxt::process_statement({:?}, {:?}): {:?}", location, stmt, flow_state);
        .                   let span = stmt.source_info.span;
        .           
        .                   self.check_activations(location, span, flow_state);
        .           
  288,110 ( 0.01%)          match &stmt.kind {
   25,176 ( 0.00%)              StatementKind::Assign(box (lhs, ref rhs)) => {
        .                           self.consume_rvalue(location, (rhs, span), flow_state);
        .           
   50,352 ( 0.00%)                  self.mutate_place(location, (*lhs, span), Shallow(None), flow_state);
        .                       }
      141 ( 0.00%)              StatementKind::FakeRead(box (_, ref place)) => {
        .                           // Read for match doesn't access any memory and is used to
        .                           // assert that a place is safe and live. So we don't have to
        .                           // do any checks here.
        .                           //
        .                           // FIXME: Remove check that the place is initialized. This is
        .                           // needed for now because matches don't have never patterns yet.
        .                           // So this is the only place we prevent
        .                           //      let x: !;
        .                           //      match x {};
        .                           // from compiling.
      564 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
    1,269 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .                       StatementKind::SetDiscriminant { place, variant_index: _ } => {
        .                           self.mutate_place(location, (**place, span), Shallow(None), flow_state);
        .                       }
        .                       StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {
        .                           ..
-- line 655 ----------------------------------------
-- line 663 ----------------------------------------
        .                       | StatementKind::Coverage(..)
        .                       | StatementKind::AscribeUserType(..)
        .                       | StatementKind::Retag { .. }
        .                       | StatementKind::StorageLive(..) => {
        .                           // `Nop`, `AscribeUserType`, `Retag`, and `StorageLive` are irrelevant
        .                           // to borrow check.
        .                       }
        .                       StatementKind::StorageDead(local) => {
  135,102 ( 0.00%)                  self.access_place(
        .                               location,
  247,687 ( 0.01%)                      (Place::from(*local), span),
        .                               (Shallow(None), Write(WriteKind::StorageDeadOrDrop)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .                       }
        .                   }
  460,976 ( 0.01%)      }
        .           
   90,912 ( 0.00%)      fn visit_terminator_before_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   term: &'cx Terminator<'tcx>,
        .                   loc: Location,
        .               ) {
        .                   debug!("MirBorrowckCtxt::process_terminator({:?}, {:?}): {:?}", loc, term, flow_state);
        .                   let span = term.source_info.span;
        .           
        .                   self.check_activations(loc, span, flow_state);
        .           
   56,820 ( 0.00%)          match term.kind {
      716 ( 0.00%)              TerminatorKind::SwitchInt { ref discr, switch_ty: _, targets: _ } => {
      716 ( 0.00%)                  self.consume_operand(loc, (discr, span), flow_state);
        .                       }
      160 ( 0.00%)              TerminatorKind::Drop { place, target: _, unwind: _ } => {
        .                           debug!(
        .                               "visit_terminator_drop \
        .                                loc: {:?} term: {:?} place: {:?} span: {:?}",
        .                               loc, term, place, span
        .                           );
        .           
      480 ( 0.00%)                  self.access_place(
        .                               loc,
      720 ( 0.00%)                      (place, span),
        .                               (AccessDepth::Drop, Write(WriteKind::StorageDeadOrDrop)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .                       }
        .                       TerminatorKind::DropAndReplace {
        .                           place: drop_place,
        .                           value: ref new_value,
        .                           target: _,
        .                           unwind: _,
        .                       } => {
        .                           self.mutate_place(loc, (drop_place, span), Deep, flow_state);
        .                           self.consume_operand(loc, (new_value, span), flow_state);
        .                       }
        .                       TerminatorKind::Call {
   30,990 ( 0.00%)                  ref func,
        .                           ref args,
        .                           ref destination,
        .                           cleanup: _,
        .                           from_hir_call: _,
        .                           fn_span: _,
        .                       } => {
   82,640 ( 0.00%)                  self.consume_operand(loc, (func, span), flow_state);
        .                           for arg in args {
   63,258 ( 0.00%)                      self.consume_operand(loc, (arg, span), flow_state);
        .                           }
   41,319 ( 0.00%)                  if let Some((dest, _ /*bb*/)) = *destination {
  123,948 ( 0.00%)                      self.mutate_place(loc, (dest, span), Deep, flow_state);
        .                           }
        .                       }
      222 ( 0.00%)              TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {
       37 ( 0.00%)                  self.consume_operand(loc, (cond, span), flow_state);
        .                           use rustc_middle::mir::AssertKind;
      134 ( 0.00%)                  if let AssertKind::BoundsCheck { ref len, ref index } = *msg {
      200 ( 0.00%)                      self.consume_operand(loc, (len, span), flow_state);
        .                               self.consume_operand(loc, (index, span), flow_state);
        .                           }
        .                       }
        .           
        .                       TerminatorKind::Yield { ref value, resume: _, resume_arg, drop: _ } => {
        .                           self.consume_operand(loc, (value, span), flow_state);
        .                           self.mutate_place(loc, (resume_arg, span), Deep, flow_state);
        .                       }
-- line 749 ----------------------------------------
-- line 790 ----------------------------------------
        .                       | TerminatorKind::Resume
        .                       | TerminatorKind::Return
        .                       | TerminatorKind::GeneratorDrop
        .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
        .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ } => {
        .                           // no data used, thus irrelevant to borrowck
        .                       }
        .                   }
   89,320 ( 0.00%)      }
        .           
   79,548 ( 0.00%)      fn visit_terminator_after_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   term: &'cx Terminator<'tcx>,
        .                   loc: Location,
        .               ) {
   11,364 ( 0.00%)          let span = term.source_info.span;
        .           
   45,456 ( 0.00%)          match term.kind {
        .                       TerminatorKind::Yield { value: _, resume: _, resume_arg: _, drop: _ } => {
        .                           if self.movable_generator {
        .                               // Look for any active borrows to locals
        .                               let borrow_set = self.borrow_set.clone();
        .                               for i in flow_state.borrows.iter() {
        .                                   let borrow = &borrow_set[i];
        .                                   self.check_for_local_borrow(borrow, span);
        .                               }
-- line 816 ----------------------------------------
-- line 817 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {
        .                           // Returning from the function implicitly kills storage for all locals and statics.
        .                           // Often, the storage will already have been killed by an explicit
        .                           // StorageDead, but we don't always emit those (notably on unwind paths),
        .                           // so this "extra check" serves as a kind of backup.
      520 ( 0.00%)                  let borrow_set = self.borrow_set.clone();
        .                           for i in flow_state.borrows.iter() {
        .                               let borrow = &borrow_set[i];
        .                               self.check_for_invalidation_at_exit(loc, borrow, span);
        .                           }
        .                       }
        .           
        .                       TerminatorKind::Abort
        .                       | TerminatorKind::Assert { .. }
-- line 833 ----------------------------------------
-- line 836 ----------------------------------------
        .                       | TerminatorKind::DropAndReplace { .. }
        .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
        .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ }
        .                       | TerminatorKind::Goto { .. }
        .                       | TerminatorKind::SwitchInt { .. }
        .                       | TerminatorKind::Unreachable
        .                       | TerminatorKind::InlineAsm { .. } => {}
        .                   }
   90,912 ( 0.00%)      }
        .           }
        .           
        .           use self::AccessDepth::{Deep, Shallow};
        .           use self::ReadOrWrite::{Activation, Read, Reservation, Write};
        .           
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           enum ArtificialField {
        .               ArrayLength,
-- line 852 ----------------------------------------
-- line 913 ----------------------------------------
        .           /// When checking permissions for a place access, this flag is used to indicate that an immutable
        .           /// local place can be mutated.
        .           //
        .           // FIXME: @nikomatsakis suggested that this flag could be removed with the following modifications:
        .           // - Merge `check_access_permissions()` and `check_if_reassignment_to_immutable_state()`.
        .           // - Split `is_mutable()` into `is_assignable()` (can be directly assigned) and
        .           //   `is_declared_mutable()`.
        .           // - Take flow state into consideration in `is_assignable()` for local variables.
   22,524 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           enum LocalMutationIsAllowed {
        .               Yes,
        .               /// We want use of immutable upvars to cause a "write to immutable upvar"
        .               /// error, not an "reassignment" error.
        .               ExceptUpvars,
        .               No,
        .           }
        .           
-- line 929 ----------------------------------------
-- line 970 ----------------------------------------
        .               }
        .           
        .               /// Checks an access to the given place to see if it is allowed. Examines the set of borrows
        .               /// that are in scope, as well as which paths have been initialized, to ensure that (a) the
        .               /// place is initialized and (b) it is not borrowed in some way that would prevent this
        .               /// access.
        .               ///
        .               /// Returns `true` if an error is reported.
1,090,384 ( 0.03%)      fn access_place(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   kind: (AccessDepth, ReadOrWrite),
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   let (sd, rw) = kind;
        .           
  272,596 ( 0.01%)          if let Activation(_, borrow_index) = rw {
      194 ( 0.00%)              if self.reservation_error_reported.contains(&place_span.0) {
        .                           debug!(
        .                               "skipping access_place for activation of invalid reservation \
        .                                place: {:?} borrow_index: {:?}",
        .                               place_span.0, borrow_index
        .                           );
        .                           return;
        .                       }
        .                   }
        .           
        .                   // Check is_empty() first because it's the common case, and doing that
        .                   // way we avoid the clone() call.
   68,149 ( 0.00%)          if !self.access_place_error_reported.is_empty()
        .                       && self.access_place_error_reported.contains(&(place_span.0, place_span.1))
        .                   {
        .                       debug!(
        .                           "access_place: suppressing error place_span=`{:?}` kind=`{:?}`",
        .                           place_span, kind
        .                       );
        .                       return;
        .                   }
        .           
  408,894 ( 0.01%)          let mutability_error = self.check_access_permissions(
  272,596 ( 0.01%)              place_span,
        .                       rw,
        .                       is_local_mutation_allowed,
        .                       flow_state,
        .                       location,
        .                   );
        .                   let conflict_error =
  749,639 ( 0.02%)              self.check_access_for_conflict(location, place_span, sd, rw, flow_state);
        .           
  204,447 ( 0.01%)          if let (Activation(_, borrow_idx), true) = (kind.1, conflict_error) {
        .                       // Suppress this warning when there's an error being emitted for the
        .                       // same borrow: fixing the error is likely to fix the warning.
        .                       self.reservation_warnings.remove(&borrow_idx);
        .                   }
        .           
  204,447 ( 0.01%)          if conflict_error || mutability_error {
        .                       debug!("access_place: logging error place_span=`{:?}` kind=`{:?}`", place_span, kind);
        .           
        .                       self.access_place_error_reported.insert((place_span.0, place_span.1));
        .                   }
  545,192 ( 0.01%)      }
        .           
        .               fn check_access_for_conflict(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   sd: AccessDepth,
        .                   rw: ReadOrWrite,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) -> bool {
        .                   debug!(
        .                       "check_access_for_conflict(location={:?}, place_span={:?}, sd={:?}, rw={:?})",
        .                       location, place_span, sd, rw,
        .                   );
        .           
   68,149 ( 0.00%)          let mut error_reported = false;
  204,447 ( 0.01%)          let tcx = self.infcx.tcx;
        .                   let body = self.body;
  136,298 ( 0.00%)          let borrow_set = self.borrow_set.clone();
        .           
        .                   // Use polonius output if it has been enabled.
  136,298 ( 0.00%)          let polonius_output = self.polonius_output.clone();
        .                   let borrows_in_scope = if let Some(polonius) = &polonius_output {
        .                       let location = self.location_table.start_index(location);
        .                       Either::Left(polonius.errors_at(location).iter().copied())
        .                   } else {
        .                       Either::Right(flow_state.borrows.iter())
        .                   };
        .           
  885,937 ( 0.02%)          each_borrow_involving_path(
        .                       self,
        .                       tcx,
        .                       body,
        .                       location,
  408,894 ( 0.01%)              (sd, place_span.0),
        .                       &borrow_set,
  408,894 ( 0.01%)              borrows_in_scope,
  750,900 ( 0.02%)              |this, borrow_index, borrow| match (rw, borrow.kind) {
        .                           // Obviously an activation is compatible with its own
        .                           // reservation (or even prior activating uses of same
        .                           // borrow); so don't check if they interfere.
        .                           //
        .                           // NOTE: *reservations* do conflict with themselves;
        .                           // thus aren't injecting unsoundenss w/ this check.)
       97 ( 0.00%)                  (Activation(_, activating), _) if activating == borrow_index => {
        .                               debug!(
        .                                   "check_access_for_conflict place_span: {:?} sd: {:?} rw: {:?} \
        .                                    skipping {:?} b/c activation of same borrow_index",
        .                                   place_span,
        .                                   sd,
        .                                   rw,
        .                                   (borrow_index, borrow),
        .                               );
-- line 1084 ----------------------------------------
-- line 1179 ----------------------------------------
        .                                   }
        .                               }
        .                               Control::Break
        .                           }
        .                       },
        .                   );
        .           
        .                   error_reported
  204,447 ( 0.01%)      }
        .           
  229,170 ( 0.01%)      fn mutate_place(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   kind: AccessDepth,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   // Write of P[i] or *P requires P init'd.
  206,253 ( 0.01%)          self.check_if_assigned_path_is_moved(location, place_span, flow_state);
        .           
        .                   // Special case: you can assign an immutable local variable
        .                   // (e.g., `x = ...`) so long as it has never been initialized
        .                   // before (at this point in the flow).
   22,917 ( 0.00%)          if let Some(local) = place_span.0.as_local() {
   91,644 ( 0.00%)              if let Mutability::Not = self.body.local_decls[local].mutability {
        .                           // check for reassignments to immutable local variables
        .                           self.check_if_reassignment_to_immutable_state(
        .                               location, local, place_span, flow_state,
        .                           );
        .                           return;
        .                       }
        .                   }
        .           
        .                   // Otherwise, use the normal access permission rules.
  269,028 ( 0.01%)          self.access_place(
        .                       location,
   89,676 ( 0.00%)              place_span,
        .                       (kind, Write(WriteKind::Mutate)),
        .                       LocalMutationIsAllowed::No,
        .                       flow_state,
        .                   );
  183,336 ( 0.00%)      }
        .           
        .               fn consume_rvalue(
        .                   &mut self,
        .                   location: Location,
        .                   (rvalue, span): (&'cx Rvalue<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
   75,528 ( 0.00%)          match *rvalue {
    2,139 ( 0.00%)              Rvalue::Ref(_ /*rgn*/, bk, place) => {
    8,342 ( 0.00%)                  let access_kind = match bk {
        .                               BorrowKind::Shallow => {
        .                                   (Shallow(Some(ArtificialField::ShallowBorrow)), Read(ReadKind::Borrow(bk)))
        .                               }
        .                               BorrowKind::Shared => (Deep, Read(ReadKind::Borrow(bk))),
        .                               BorrowKind::Unique | BorrowKind::Mut { .. } => {
        .                                   let wk = WriteKind::MutableBorrow(bk);
      214 ( 0.00%)                          if allow_two_phase_borrow(bk) {
        .                                       (Deep, Reservation(wk))
        .                                   } else {
        .                                       (Deep, Write(wk))
        .                                   }
        .                               }
        .                           };
        .           
   14,973 ( 0.00%)                  self.access_place(
        .                               location,
    2,852 ( 0.00%)                      (place, span),
        .                               access_kind,
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
        .           
        .                           let action = if bk == BorrowKind::Shallow {
        .                               InitializationRequiringAction::MatchOn
        .                           } else {
        .                               InitializationRequiringAction::Borrow
        .                           };
        .           
    4,991 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               action,
    4,991 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .           
        .                       Rvalue::AddressOf(mutability, place) => {
        .                           let access_kind = match mutability {
        .                               Mutability::Mut => (
        .                                   Deep,
-- line 1270 ----------------------------------------
-- line 1302 ----------------------------------------
        .                       }
        .           
        .                       Rvalue::Len(place) | Rvalue::Discriminant(place) => {
        .                           let af = match *rvalue {
        .                               Rvalue::Len(..) => Some(ArtificialField::ArrayLength),
        .                               Rvalue::Discriminant(..) => None,
        .                               _ => unreachable!(),
        .                           };
    1,264 ( 0.00%)                  self.access_place(
        .                               location,
      316 ( 0.00%)                      (place, span),
        .                               (Shallow(af), Read(ReadKind::Copy)),
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
      553 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
      553 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .           
        .                       Rvalue::BinaryOp(_bin_op, box (ref operand1, ref operand2))
        .                       | Rvalue::CheckedBinaryOp(_bin_op, box (ref operand1, ref operand2)) => {
      910 ( 0.00%)                  self.consume_operand(location, (operand1, span), flow_state);
      637 ( 0.00%)                  self.consume_operand(location, (operand2, span), flow_state);
        .                       }
        .           
        .                       Rvalue::NullaryOp(_op, _ty) => {
        .                           // nullary ops take no dynamic input; no borrowck effect.
        .                       }
        .           
        .                       Rvalue::Aggregate(ref aggregate_kind, ref operands) => {
        .                           // We need to report back the list of mutable upvars that were
        .                           // moved into the closure and subsequently used by the closure,
        .                           // in order to populate our used_mut set.
   33,009 ( 0.00%)                  match **aggregate_kind {
        .                               AggregateKind::Closure(def_id, _) | AggregateKind::Generator(def_id, _, _) => {
        .                                   let BorrowCheckResult { used_mut_upvars, .. } =
       76 ( 0.00%)                              self.infcx.tcx.mir_borrowck(def_id.expect_local());
        .                                   debug!("{:?} used_mut_upvars={:?}", def_id, used_mut_upvars);
        .                                   for field in used_mut_upvars {
        2 ( 0.00%)                              self.propagate_closure_used_mut_upvar(&operands[field.index()]);
        .                                   }
        .                               }
        .                               AggregateKind::Adt(..)
        .                               | AggregateKind::Array(..)
        .                               | AggregateKind::Tuple { .. } => (),
        .                           }
        .           
        .                           for operand in operands {
-- line 1353 ----------------------------------------
-- line 1391 ----------------------------------------
        .           
        .                       // Handle(b)
        .                       this.used_mut.insert(place.local);
        .                   };
        .           
        .                   // This relies on the current way that by-value
        .                   // captures of a closure are copied/moved directly
        .                   // when generating MIR.
        6 ( 0.00%)          match *operand {
        .                       Operand::Move(place) | Operand::Copy(place) => {
        2 ( 0.00%)                  match place.as_local() {
        2 ( 0.00%)                      Some(local) if !self.body.local_decls[local].is_user_variable() => {
        2 ( 0.00%)                          if self.body.local_decls[local].ty.is_mutable_ptr() {
        .                                       // The variable will be marked as mutable by the borrow.
        .                                       return;
        .                                   }
        .                                   // This is an edge case where we have a `move` closure
        .                                   // inside a non-move closure, and the inner closure
        .                                   // contains a mutation:
        .                                   //
        .                                   // let mut i = 0;
-- line 1411 ----------------------------------------
-- line 1448 ----------------------------------------
        .                               }
        .                               _ => propagate_closure_used_mut_place(self, place),
        .                           }
        .                       }
        .                       Operand::Constant(..) => {}
        .                   }
        .               }
        .           
  264,156 ( 0.01%)      fn consume_operand(
        .                   &mut self,
        .                   location: Location,
        .                   (operand, span): (&'cx Operand<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
  383,170 ( 0.01%)          match *operand {
      948 ( 0.00%)              Operand::Copy(place) => {
        .                           // copy of place: check if this is "copy of frozen path"
        .                           // (FIXME: see check_loans.rs)
    1,896 ( 0.00%)                  self.access_place(
        .                               location,
    1,580 ( 0.00%)                      (place, span),
        .                               (Deep, Read(ReadKind::Copy)),
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
        .           
        .                           // Finally, check if path was already moved.
        .                           self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
        .                               (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
   65,784 ( 0.00%)              Operand::Move(place) => {
        .                           // move of place: check if this is move of already borrowed path
  219,178 ( 0.01%)                  self.access_place(
        .                               location,
  109,640 ( 0.00%)                      (place, span),
        .                               (Deep, Write(WriteKind::Move)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .           
        .                           // Finally, check if path was already moved.
   87,576 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
   65,682 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .                       Operand::Constant(_) => {}
        .                   }
  176,104 ( 0.00%)      }
        .           
        .               /// Checks whether a borrow of this place is invalidated when the function
        .               /// exits
        .               fn check_for_invalidation_at_exit(
        .                   &mut self,
        .                   location: Location,
        .                   borrow: &BorrowData<'tcx>,
        .                   span: Span,
-- line 1510 ----------------------------------------
-- line 1573 ----------------------------------------
        .                       err.buffer(&mut self.errors_buffer);
        .                   }
        .               }
        .           
        .               fn check_activations(&mut self, location: Location, span: Span, flow_state: &Flows<'cx, 'tcx>) {
        .                   // Two-phase borrow support: For each activation that is newly
        .                   // generated at this statement, check if it interferes with
        .                   // another borrow.
  137,972 ( 0.00%)          let borrow_set = self.borrow_set.clone();
  264,677 ( 0.01%)          for &borrow_index in borrow_set.activations_at_location(location) {
        .                       let borrow = &borrow_set[borrow_index];
        .           
        .                       // only mutable borrows should be 2-phase
      485 ( 0.00%)              assert!(match borrow.kind {
        .                           BorrowKind::Shared | BorrowKind::Shallow => false,
        .                           BorrowKind::Unique | BorrowKind::Mut { .. } => true,
        .                       });
        .           
    1,164 ( 0.00%)              self.access_place(
        .                           location,
      582 ( 0.00%)                  (borrow.borrowed_place, span),
      873 ( 0.00%)                  (Deep, Activation(WriteKind::MutableBorrow(borrow.kind), borrow_index)),
        .                           LocalMutationIsAllowed::No,
        .                           flow_state,
        .                       );
        .                       // We do not need to call `check_if_path_or_subpath_is_moved`
        .                       // again, as we already called it when we made the
        .                       // initial reservation.
        .                   }
        .               }
-- line 1602 ----------------------------------------
-- line 1606 ----------------------------------------
        .                   location: Location,
        .                   local: Local,
        .                   place_span: (Place<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   debug!("check_if_reassignment_to_immutable_state({:?})", local);
        .           
        .                   // Check if any of the initializiations of `local` have happened yet:
    2,988 ( 0.00%)          if let Some(init_index) = self.is_local_ever_initialized(local, flow_state) {
        .                       // And, if so, report an error.
        .                       let init = &self.move_data.inits[init_index];
        .                       let span = init.span(&self.body);
        .                       self.report_illegal_reassignment(location, place_span, span, place_span.0);
        .                   }
        .               }
        .           
  301,379 ( 0.01%)      fn check_if_full_path_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   desired_action: InitializationRequiringAction,
        .                   place_span: (PlaceRef<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   let maybe_uninits = &flow_state.uninits;
        .           
-- line 1630 ----------------------------------------
-- line 1660 ----------------------------------------
        .                   // Therefore, if we seek out the *closest* prefix for which we
        .                   // have a MovePath, that should capture the initialization
        .                   // state for the place scenario.
        .                   //
        .                   // This code covers scenarios 1, 2, and 3.
        .           
        .                   debug!("check_if_full_path_is_moved place: {:?}", place_span.0);
        .                   let (prefix, mpi) = self.move_path_closest_to(place_span.0);
   23,183 ( 0.00%)          if maybe_uninits.contains(mpi) {
        .                       self.report_use_of_moved_or_uninitialized(
        .                           location,
        .                           desired_action,
        .                           (prefix, place_span.0, place_span.1),
        .                           mpi,
        .                       );
        .                   } // Only query longest prefix with a MovePath, not further
        .                   // ancestors; dataflow recurs on children when parents
        .                   // move (to support partial (re)inits).
        .                   //
        .                   // (I.e., querying parents breaks scenario 7; but may want
        .                   // to do such a query based on partial-init feature-gate.)
  185,464 ( 0.00%)      }
        .           
        .               /// Subslices correspond to multiple move paths, so we iterate through the
        .               /// elements of the base array. For each element we check
        .               ///
        .               /// * Does this element overlap with our slice.
        .               /// * Is any part of it uninitialized.
        .               fn check_if_subslice_element_is_moved(
        .                   &mut self,
-- line 1689 ----------------------------------------
-- line 1719 ----------------------------------------
        .                                       return; // don't bother finding other problems.
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
        .               }
        .           
  254,947 ( 0.01%)      fn check_if_path_or_subpath_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   desired_action: InitializationRequiringAction,
        .                   place_span: (PlaceRef<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
   46,354 ( 0.00%)          let maybe_uninits = &flow_state.uninits;
        .           
        .                   // Bad scenarios:
        .                   //
        .                   // 1. Move of `a.b.c`, use of `a` or `a.b`
        .                   //    partial initialization support, one might have `a.x`
        .                   //    initialized but not `a.b`.
        .                   // 2. All bad scenarios from `check_if_full_path_is_moved`
        .                   //
-- line 1742 ----------------------------------------
-- line 1743 ----------------------------------------
        .                   // OK scenarios:
        .                   //
        .                   // 3. Move of `a.b.c`, use of `a.b.d`
        .                   // 4. Uninitialized `a.x`, initialized `a.b`, use of `a.b`
        .                   // 5. Copied `(a.b: &_)`, use of `*(a.b).c`; note that `a.b`
        .                   //    must have been initialized for the use to be sound.
        .                   // 6. Move of `a.b.c` then reinit of `a.b.c.d`, use of `a.b.c.d`
        .           
  162,239 ( 0.00%)          self.check_if_full_path_is_moved(location, desired_action, place_span, flow_state);
        .           
    3,196 ( 0.00%)          if let Some((place_base, ProjectionElem::Subslice { from, to, from_end: false })) =
   23,177 ( 0.00%)              place_span.0.last_projection()
        .                   {
        .                       let place_ty = place_base.ty(self.body(), self.infcx.tcx);
        .                       if let ty::Array(..) = place_ty.ty.kind() {
        .                           self.check_if_subslice_element_is_moved(
        .                               location,
        .                               desired_action,
        .                               (place_base, place_span.1),
        .                               maybe_uninits,
-- line 1762 ----------------------------------------
-- line 1772 ----------------------------------------
        .                   //
        .                   // (Distinct from handling of scenarios 1+2+4 above because
        .                   // `place` does not interfere with suffixes of its prefixes,
        .                   // e.g., `a.b.c` does not interfere with `a.b.d`)
        .                   //
        .                   // This code covers scenario 1.
        .           
        .                   debug!("check_if_path_or_subpath_is_moved place: {:?}", place_span.0);
   92,708 ( 0.00%)          if let Some(mpi) = self.move_path_for_place(place_span.0) {
   89,652 ( 0.00%)              let uninit_mpi = self
        .                           .move_data
        .                           .find_in_move_path_or_its_descendants(mpi, |mpi| maybe_uninits.contains(mpi));
        .           
   44,826 ( 0.00%)              if let Some(uninit_mpi) = uninit_mpi {
        .                           self.report_use_of_moved_or_uninitialized(
        .                               location,
        .                               desired_action,
        .                               (place_span.0, place_span.0, place_span.1),
        .                               uninit_mpi,
        .                           );
        .                           return; // don't bother finding other problems.
        .                       }
        .                   }
  185,416 ( 0.00%)      }
        .           
        .               /// Currently MoveData does not store entries for all places in
        .               /// the input MIR. For example it will currently filter out
        .               /// places that are Copy; thus we do not track places of shared
        .               /// reference type. This routine will walk up a place along its
        .               /// prefixes, searching for a foundational place that *is*
        .               /// tracked in the MoveData.
        .               ///
        .               /// An Err result includes a tag indicated why the search failed.
        .               /// Currently this can only occur if the place is built off of a
        .               /// static variable, as we do not track those in the MoveData.
        .               fn move_path_closest_to(&mut self, place: PlaceRef<'tcx>) -> (PlaceRef<'tcx>, MovePathIndex) {
  301,379 ( 0.01%)          match self.move_data.rev_lookup.find(place) {
        .                       LookupResult::Parent(Some(mpi)) | LookupResult::Exact(mpi) => {
        .                           (self.move_data.move_paths[mpi].place.as_ref(), mpi)
        .                       }
        .                       LookupResult::Parent(None) => panic!("should have move path for every Local"),
        .                   }
        .               }
        .           
        .               fn move_path_for_place(&mut self, place: PlaceRef<'tcx>) -> Option<MovePathIndex> {
        .                   // If returns None, then there is no move path corresponding
        .                   // to a direct owner of `place` (which means there is nothing
        .                   // that borrowck tracks for its analysis).
        .           
  208,641 ( 0.01%)          match self.move_data.rev_lookup.find(place) {
        .                       LookupResult::Parent(_) => None,
        .                       LookupResult::Exact(mpi) => Some(mpi),
        .                   }
        .               }
        .           
        .               fn check_if_assigned_path_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   (place, span): (Place<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   debug!("check_if_assigned_path_is_moved place: {:?}", place);
        .           
        .                   // None case => assigning to `x` does not require `x` be initialized.
        6 ( 0.00%)          for (place_base, elem) in place.iter_projections().rev() {
       60 ( 0.00%)              match elem {
        .                           ProjectionElem::Index(_/*operand*/) |
        .                           ProjectionElem::ConstantIndex { .. } |
        .                           // assigning to P[i] requires P to be valid.
        .                           ProjectionElem::Downcast(_/*adt_def*/, _/*variant_idx*/) =>
        .                           // assigning to (P->variant) is okay if assigning to `P` is okay
        .                           //
        .                           // FIXME: is this true even if P is an adt with a dtor?
        .                           { }
        .           
        .                           // assigning to (*P) requires P to be initialized
        .                           ProjectionElem::Deref => {
       42 ( 0.00%)                      self.check_if_full_path_is_moved(
        .                                   location, InitializationRequiringAction::Use,
       36 ( 0.00%)                          (place_base, span), flow_state);
        .                               // (base initialized; no need to
        .                               // recur further)
        .                               break;
        .                           }
        .           
        .                           ProjectionElem::Subslice { .. } => {
        .                               panic!("we don't allow assignments to subslices, location: {:?}",
        .                                      location);
        .                           }
        .           
        .                           ProjectionElem::Field(..) => {
        .                               // if type of `P` has a dtor, then
        .                               // assigning to `P.f` requires `P` itself
        .                               // be already initialized
        .                               let tcx = self.infcx.tcx;
        6 ( 0.00%)                      let base_ty = place_base.ty(self.body(), tcx).ty;
       18 ( 0.00%)                      match base_ty.kind() {
       36 ( 0.00%)                          ty::Adt(def, _) if def.has_dtor(tcx) => {
        .                                       self.check_if_path_or_subpath_is_moved(
        .                                           location, InitializationRequiringAction::Assignment,
        .                                           (place_base, span), flow_state);
        .           
        .                                       // (base initialized; no need to
        .                                       // recur further)
        .                                       break;
        .                                   }
-- line 1877 ----------------------------------------
-- line 1931 ----------------------------------------
        .           
        .                       // Shallow so that we'll stop at any dereference; we'll
        .                       // report errors about issues with such bases elsewhere.
        .                       let maybe_uninits = &flow_state.uninits;
        .           
        .                       // Find the shortest uninitialized prefix you can reach
        .                       // without going over a Deref.
        .                       let mut shortest_uninit_seen = None;
      132 ( 0.00%)              for prefix in this.prefixes(base, PrefixSet::Shallow) {
        6 ( 0.00%)                  let mpi = match this.move_path_for_place(prefix) {
        .                               Some(mpi) => mpi,
        .                               None => continue,
        .                           };
        .           
        .                           if maybe_uninits.contains(mpi) {
        .                               debug!(
        .                                   "check_parent_of_field updating shortest_uninit_seen from {:?} to {:?}",
        .                                   shortest_uninit_seen,
-- line 1948 ----------------------------------------
-- line 1949 ----------------------------------------
        .                                   Some((prefix, mpi))
        .                               );
        .                               shortest_uninit_seen = Some((prefix, mpi));
        .                           } else {
        .                               debug!("check_parent_of_field {:?} is definitely initialized", (prefix, mpi));
        .                           }
        .                       }
        .           
       18 ( 0.00%)              if let Some((prefix, mpi)) = shortest_uninit_seen {
        .                           // Check for a reassignment into an uninitialized field of a union (for example,
        .                           // after a move out). In this case, do not report an error here. There is an
        .                           // exception, if this is the first assignment into the union (that is, there is
        .                           // no move out from an earlier location) then this is an attempt at initialization
        .                           // of the union - we should error in that case.
        .                           let tcx = this.infcx.tcx;
        .                           if base.ty(this.body(), tcx).ty.is_union() {
        .                               if this.move_data.path_map[mpi].iter().any(|moi| {
-- line 1965 ----------------------------------------
-- line 1979 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Checks the permissions for the given place and read or write kind
        .               ///
        .               /// Returns `true` if an error is reported.
        .               fn check_access_permissions(
        .                   &mut self,
  136,298 ( 0.00%)          (place, span): (Place<'tcx>, Span),
        .                   kind: ReadOrWrite,
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   location: Location,
        .               ) -> bool {
        .                   debug!(
        .                       "check_access_permissions({:?}, {:?}, is_local_mutation_allowed: {:?})",
        .                       place, kind, is_local_mutation_allowed
        .                   );
        .           
        .                   let error_access;
        .                   let the_place_err;
        .           
1,147,981 ( 0.03%)          match kind {
        .                       Reservation(WriteKind::MutableBorrow(
        .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
        .                       ))
        .                       | Write(WriteKind::MutableBorrow(
        .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
        .                       )) => {
    1,070 ( 0.00%)                  let is_local_mutation_allowed = match borrow_kind {
        .                               BorrowKind::Unique => LocalMutationIsAllowed::Yes,
        .                               BorrowKind::Mut { .. } => is_local_mutation_allowed,
        .                               BorrowKind::Shared | BorrowKind::Shallow => unreachable!(),
        .                           };
      749 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
        .                               Ok(root_place) => {
        .                                   self.add_used_mut(root_place, flow_state);
        .                                   return false;
        .                               }
        .                               Err(place_err) => {
        .                                   error_access = AccessKind::MutableBorrow;
        .                                   the_place_err = place_err;
        .                               }
        .                           }
        .                       }
        .                       Reservation(WriteKind::Mutate) | Write(WriteKind::Mutate) => {
  156,933 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
        .                               Ok(root_place) => {
        .                                   self.add_used_mut(root_place, flow_state);
        .                                   return false;
        .                               }
        .                               Err(place_err) => {
        .                                   error_access = AccessKind::Mutate;
        .                                   the_place_err = place_err;
        .                               }
-- line 2033 ----------------------------------------
-- line 2041 ----------------------------------------
        .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
        .                       )
        .                       | Write(
        .                           WriteKind::Move
        .                           | WriteKind::StorageDeadOrDrop
        .                           | WriteKind::MutableBorrow(BorrowKind::Shared)
        .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
        .                       ) => {
   89,050 ( 0.00%)                  if let (Err(_), true) = (
  311,675 ( 0.01%)                      self.is_mutable(place.as_ref(), is_local_mutation_allowed),
        .                               self.errors_buffer.is_empty(),
        .                           ) {
        .                               // rust-lang/rust#46908: In pure NLL mode this code path should be
        .                               // unreachable, but we use `delay_span_bug` because we can hit this when
        .                               // dereferencing a non-Copy raw pointer *and* have `-Ztreat-err-as-bug`
        .                               // enabled. We don't want to ICE for that case, as other errors will have
        .                               // been emitted (#52262).
        .                               self.infcx.tcx.sess.delay_span_bug(
-- line 2058 ----------------------------------------
-- line 2094 ----------------------------------------
        .                   if previously_initialized {
        .                       self.report_mutability_error(place, span, the_place_err, error_access, location);
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
  114,850 ( 0.00%)      fn is_local_ever_initialized(
        .                   &self,
        .                   local: Local,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) -> Option<InitIndex> {
   68,910 ( 0.00%)          let mpi = self.move_data.rev_lookup.find_local(local);
   22,970 ( 0.00%)          let ii = &self.move_data.init_path_map[mpi];
   93,031 ( 0.00%)          for &index in ii {
   48,242 ( 0.00%)              if flow_state.ever_inits.contains(index) {
        .                           return Some(index);
        .                       }
        .                   }
        .                   None
   91,880 ( 0.00%)      }
        .           
        .               /// Adds the place into the used mutable variables set
   90,104 ( 0.00%)      fn add_used_mut(&mut self, root_place: RootPlace<'tcx>, flow_state: &Flows<'cx, 'tcx>) {
        4 ( 0.00%)          match root_place {
   67,578 ( 0.00%)              RootPlace { place_local: local, place_projection: [], is_local_mutation_allowed } => {
        .                           // If the local may have been initialized, and it is now currently being
        .                           // mutated, then it is justified to be annotated with the `mut`
        .                           // keyword, since the mutation may be a possible reassignment.
   44,996 ( 0.00%)                  if is_local_mutation_allowed != LocalMutationIsAllowed::Yes
   67,416 ( 0.00%)                      && self.is_local_ever_initialized(local, flow_state).is_some()
        .                           {
        .                               self.used_mut.insert(local);
        .                           }
        .                       }
        .                       RootPlace {
        .                           place_local: _,
        .                           place_projection: _,
        .                           is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
        .                       } => {}
        .                       RootPlace {
        2 ( 0.00%)                  place_local,
        2 ( 0.00%)                  place_projection: place_projection @ [.., _],
        .                           is_local_mutation_allowed: _,
        .                       } => {
        4 ( 0.00%)                  if let Some(field) = self.is_upvar_field_projection(PlaceRef {
        .                               local: place_local,
        .                               projection: place_projection,
        .                           }) {
        2 ( 0.00%)                      self.used_mut_upvars.push(field);
        .                           }
        .                       }
        .                   }
   89,588 ( 0.00%)      }
        .           
        .               /// Whether this value can be written or borrowed mutably.
        .               /// Returns the root place if the place passed in is a projection.
  738,694 ( 0.02%)      fn is_mutable(
        .                   &self,
        .                   place: PlaceRef<'tcx>,
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .               ) -> Result<RootPlace<'tcx>, PlaceRef<'tcx>> {
        .                   debug!("is_mutable: place={:?}, is_local...={:?}", place, is_local_mutation_allowed);
  201,668 ( 0.01%)          match place.last_projection() {
        .                       None => {
   67,051 ( 0.00%)                  let local = &self.body.local_decls[place.local];
  201,153 ( 0.01%)                  match local.mutability {
    1,190 ( 0.00%)                      Mutability::Not => match is_local_mutation_allowed {
    3,570 ( 0.00%)                          LocalMutationIsAllowed::Yes => Ok(RootPlace {
        .                                       place_local: place.local,
        .                                       place_projection: place.projection,
        .                                       is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
        .                                   }),
        .                                   LocalMutationIsAllowed::ExceptUpvars => Ok(RootPlace {
        .                                       place_local: place.local,
        .                                       place_projection: place.projection,
        .                                       is_local_mutation_allowed: LocalMutationIsAllowed::ExceptUpvars,
        .                                   }),
        .                                   LocalMutationIsAllowed::No => Err(place),
        .                               },
  132,912 ( 0.00%)                      Mutability::Mut => Ok(RootPlace {
        .                                   place_local: place.local,
        .                                   place_projection: place.projection,
        .                                   is_local_mutation_allowed,
        .                               }),
        .                           }
        .                       }
        .                       Some((place_base, elem)) => {
      309 ( 0.00%)                  match elem {
        .                               ProjectionElem::Deref => {
      112 ( 0.00%)                          let base_ty = place_base.ty(self.body(), self.infcx.tcx).ty;
        .           
        .                                   // Check the kind of deref to decide
      336 ( 0.00%)                          match base_ty.kind() {
        .                                       ty::Ref(_, _, mutbl) => {
      112 ( 0.00%)                                  match mutbl {
        .                                               // Shared borrowed data is never mutable
        .                                               hir::Mutability::Not => Err(place),
        .                                               // Mutably borrowed data is mutable, but only if we have a
        .                                               // unique path to the `&mut`
        .                                               hir::Mutability::Mut => {
      112 ( 0.00%)                                          let mode = match self.is_upvar_field_projection(place) {
       10 ( 0.00%)                                              Some(field) if self.upvars[field.index()].by_ref => {
        .                                                           is_local_mutation_allowed
        .                                                       }
        .                                                       _ => LocalMutationIsAllowed::Yes,
        .                                                   };
        .           
      336 ( 0.00%)                                          self.is_mutable(place_base, mode)
        .                                               }
        .                                           }
        .                                       }
        .                                       ty::RawPtr(tnm) => {
        .                                           match tnm.mutbl {
        .                                               // `*const` raw pointers are not mutable
        .                                               hir::Mutability::Not => Err(place),
        .                                               // `*mut` raw pointers are always mutable, regardless of
-- line 2211 ----------------------------------------
-- line 2228 ----------------------------------------
        .                               // All other projections are owned by their base path, so mutable if
        .                               // base path is mutable
        .                               ProjectionElem::Field(..)
        .                               | ProjectionElem::Index(..)
        .                               | ProjectionElem::ConstantIndex { .. }
        .                               | ProjectionElem::Subslice { .. }
        .                               | ProjectionElem::Downcast(..) => {
        .                                   let upvar_field_projection = self.is_upvar_field_projection(place);
       94 ( 0.00%)                          if let Some(field) = upvar_field_projection {
        .                                       let upvar = &self.upvars[field.index()];
        .                                       debug!(
        .                                           "is_mutable: upvar.mutability={:?} local_mutation_is_allowed={:?} \
        .                                            place={:?}, place_base={:?}",
        .                                           upvar, is_local_mutation_allowed, place, place_base
        .                                       );
       10 ( 0.00%)                              match (upvar.place.mutability, is_local_mutation_allowed) {
        .                                           (
        .                                               Mutability::Not,
        .                                               LocalMutationIsAllowed::No
        .                                               | LocalMutationIsAllowed::ExceptUpvars,
        .                                           ) => Err(place),
        .                                           (Mutability::Not, LocalMutationIsAllowed::Yes)
        .                                           | (Mutability::Mut, _) => {
        .                                               // Subtle: this is an upvar
-- line 2251 ----------------------------------------
-- line 2270 ----------------------------------------
        .                                               // fn main() {
        .                                               //     let var = Vec::new();
        .                                               //     foo(move || {
        .                                               //         var.push(1);
        .                                               //     });
        .                                               // }
        .                                               // ```
        .                                               let _ =
       18 ( 0.00%)                                          self.is_mutable(place_base, is_local_mutation_allowed)?;
        .                                               Ok(RootPlace {
        .                                                   place_local: place.local,
        .                                                   place_projection: place.projection,
        .                                                   is_local_mutation_allowed,
        .                                               })
        .                                           }
        .                                       }
        .                                   } else {
        .                                       self.is_mutable(place_base, is_local_mutation_allowed)
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
  537,232 ( 0.01%)      }
        .           
        .               /// If `place` is a field projection, and the field is being projected from a closure type,
        .               /// then returns the index of the field being projected. Note that this closure will always
        .               /// be `self` in the current MIR, because that is the only time we directly access the fields
        .               /// of a closure type.
        .               fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {
      943 ( 0.00%)          path_utils::is_upvar_field_projection(self.infcx.tcx, &self.upvars, place_ref, self.body())
        .               }
        .           }
        .           
        .           /// The degree of overlap between 2 places for borrow-checking.
        .           enum Overlap {
        .               /// The places might partially overlap - in this case, we give
        .               /// up and say that they might conflict. This occurs when
        .               /// different fields of a union are borrowed. For example,
-- line 2308 ----------------------------------------

1,922,093 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/query/type_op/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 72 ----------------------------------------
        .               /// it might do things like invoke `sub_regions`, which would be
        .               /// bad, because it would create subregion relationships that are
        .               /// not captured in the return value.
        .               fn perform_query(
        .                   tcx: TyCtxt<'tcx>,
        .                   canonicalized: Canonicalized<'tcx, ParamEnvAnd<'tcx, Self>>,
        .               ) -> Fallible<CanonicalizedQueryResponse<'tcx, Self::QueryResponse>>;
        .           
1,291,507 ( 0.03%)      fn fully_perform_into(
        .                   query_key: ParamEnvAnd<'tcx, Self>,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   output_query_region_constraints: &mut QueryRegionConstraints<'tcx>,
        .               ) -> Fallible<(
        .                   Self::QueryResponse,
        .                   Option<Canonical<'tcx, ParamEnvAnd<'tcx, Self>>>,
        .                   PredicateObligations<'tcx>,
        .                   Certainty,
        .               )> {
  305,630 ( 0.01%)          if let Some(result) = QueryTypeOp::try_fast_path(infcx.tcx, &query_key) {
  613,835 ( 0.02%)              return Ok((result, None, vec![], Certainty::Proven));
        .                   }
        .           
        .                   // FIXME(#33684) -- We need to use
        .                   // `canonicalize_query_keep_static` here because of things
        .                   // like the subtype query, which go awry around
        .                   // `'static` otherwise.
   44,458 ( 0.00%)          let mut canonical_var_values = OriginalQueryValues::default();
       64 ( 0.00%)          let old_param_env = query_key.param_env;
        .                   let canonical_self =
   22,395 ( 0.00%)              infcx.canonicalize_query_keep_static(query_key, &mut canonical_var_values);
  220,943 ( 0.01%)          let canonical_result = Self::perform_query(infcx.tcx, canonical_self)?;
        .           
  269,761 ( 0.01%)          let InferOk { value, obligations } = infcx
        .                       .instantiate_nll_query_response_and_region_obligations(
        .                           &ObligationCause::dummy(),
        .                           old_param_env,
        .                           &canonical_var_values,
        .                           canonical_result,
        .                           output_query_region_constraints,
        .                       )?;
        .           
  316,466 ( 0.01%)          Ok((value, Some(canonical_self), obligations, canonical_result.value.certainty))
1,163,741 ( 0.03%)      }
        .           }
        .           
        .           impl<'tcx, Q> TypeOp<'tcx> for ParamEnvAnd<'tcx, Q>
        .           where
        .               Q: QueryTypeOp<'tcx>,
        .           {
        .               type Output = Q::QueryResponse;
        .           
1,065,952 ( 0.03%)      fn fully_perform(self, infcx: &InferCtxt<'_, 'tcx>) -> Fallible<TypeOpOutput<'tcx, Self>> {
        .                   let mut region_constraints = QueryRegionConstraints::default();
  892,557 ( 0.02%)          let (output, canonicalized_query, mut obligations, _) =
  216,559 ( 0.01%)              Q::fully_perform_into(self, infcx, &mut region_constraints)?;
        .           
        .                   // Typically, instantiating NLL query results does not
        .                   // create obligations. However, in some cases there
        .                   // are unresolved type variables, and unify them *can*
        .                   // create obligations. In that case, we have to go
        .                   // fulfill them. We do this via a (recursive) query.
  133,244 ( 0.00%)          while !obligations.is_empty() {
        .                       trace!("{:#?}", obligations);
        .                       let mut progress = false;
        .                       for obligation in std::mem::take(&mut obligations) {
        .                           let obligation = infcx.resolve_vars_if_possible(obligation);
        .                           match ProvePredicate::fully_perform_into(
        .                               obligation.param_env.and(ProvePredicate::new(obligation.predicate)),
        .                               infcx,
        .                               &mut region_constraints,
-- line 141 ----------------------------------------
-- line 153 ----------------------------------------
        .                       if !progress {
        .                           return Err(NoSolution);
        .                       }
        .                   }
        .           
        .                   // Promote the final query-region-constraints into a
        .                   // (optional) ref-counted vector:
        .                   let region_constraints =
  532,976 ( 0.01%)              if region_constraints.is_empty() { None } else { Some(Rc::new(region_constraints)) };
        .           
1,704,626 ( 0.04%)          Ok(TypeOpOutput { output, constraints: region_constraints, canonicalized_query })
1,332,440 ( 0.03%)      }
        .           }

  973,798 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/query/type_op/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/traversal.rs
--------------------------------------------------------------------------------
Ir                 

-- line 23 ----------------------------------------
        .           pub struct Preorder<'a, 'tcx> {
        .               body: &'a Body<'tcx>,
        .               visited: BitSet<BasicBlock>,
        .               worklist: Vec<BasicBlock>,
        .               root_is_start_block: bool,
        .           }
        .           
        .           impl<'a, 'tcx> Preorder<'a, 'tcx> {
   10,400 ( 0.00%)      pub fn new(body: &'a Body<'tcx>, root: BasicBlock) -> Preorder<'a, 'tcx> {
    1,040 ( 0.00%)          let worklist = vec![root];
        .           
    3,120 ( 0.00%)          Preorder {
        .                       body,
        .                       visited: BitSet::new_empty(body.basic_blocks().len()),
    4,160 ( 0.00%)              worklist,
        .                       root_is_start_block: root == START_BLOCK,
        .                   }
    9,360 ( 0.00%)      }
        .           }
        .           
    1,148 ( 0.00%)  pub fn preorder<'a, 'tcx>(body: &'a Body<'tcx>) -> Preorder<'a, 'tcx> {
    3,944 ( 0.00%)      Preorder::new(body, START_BLOCK)
    1,722 ( 0.00%)  }
        .           
        .           impl<'a, 'tcx> Iterator for Preorder<'a, 'tcx> {
        .               type Item = (BasicBlock, &'a BasicBlockData<'tcx>);
        .           
1,187,681 ( 0.03%)      fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {
  160,051 ( 0.00%)          while let Some(idx) = self.worklist.pop() {
  160,051 ( 0.00%)              if !self.visited.insert(idx) {
        .                           continue;
        .                       }
        .           
  106,931 ( 0.00%)              let data = &self.body[idx];
        .           
  534,655 ( 0.01%)              if let Some(ref term) = data.terminator {
        .                           self.worklist.extend(term.successors());
        .                       }
        .           
        .                       return Some((idx, data));
        .                   }
        .           
        .                   None
  971,739 ( 0.02%)      }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // All the blocks, minus the number of blocks we've visited.
        .                   let upper = self.body.basic_blocks().len() - self.visited.count();
        .           
        .                   let lower = if self.root_is_start_block {
        .                       // We will visit all remaining blocks exactly once.
        .                       upper
-- line 74 ----------------------------------------
-- line 101 ----------------------------------------
        .           pub struct Postorder<'a, 'tcx> {
        .               body: &'a Body<'tcx>,
        .               visited: BitSet<BasicBlock>,
        .               visit_stack: Vec<(BasicBlock, Successors<'a>)>,
        .               root_is_start_block: bool,
        .           }
        .           
        .           impl<'a, 'tcx> Postorder<'a, 'tcx> {
    9,471 ( 0.00%)      pub fn new(body: &'a Body<'tcx>, root: BasicBlock) -> Postorder<'a, 'tcx> {
        .                   let mut po = Postorder {
        .                       body,
        .                       visited: BitSet::new_empty(body.basic_blocks().len()),
        .                       visit_stack: Vec::new(),
        .                       root_is_start_block: root == START_BLOCK,
        .                   };
        .           
        .                   let data = &po.body[root];
        .           
    9,471 ( 0.00%)          if let Some(ref term) = data.terminator {
        .                       po.visited.insert(root);
    5,412 ( 0.00%)              po.visit_stack.push((root, term.successors()));
    2,706 ( 0.00%)              po.traverse_successor();
        .                   }
        .           
        .                   po
   12,177 ( 0.00%)      }
        .           
  915,628 ( 0.02%)      fn traverse_successor(&mut self) {
        .                   // This is quite a complex loop due to 1. the borrow checker not liking it much
        .                   // and 2. what exactly is going on is not clear
        .                   //
        .                   // It does the actual traversal of the graph, while the `next` method on the iterator
        .                   // just pops off of the stack. `visit_stack` is a stack containing pairs of nodes and
        .                   // iterators over the successors of those nodes. Each iteration attempts to get the next
        .                   // node from the top of the stack, then pushes that node and an iterator over the
        .                   // successors to the top of the stack. This loop only grows `visit_stack`, stopping when
-- line 136 ----------------------------------------
-- line 169 ----------------------------------------
        .                   //
        .                   // Now that the top of the stack has no successors we can traverse, each item will
        .                   // be popped off during iteration until we get back to `A`. This yields [E, D, B].
        .                   //
        .                   // When we yield `B` and call `traverse_successor`, we push `C` to the stack, but
        .                   // since we've already visited `E`, that child isn't added to the stack. The last
        .                   // two iterations yield `C` and finally `A` for a final traversal of [E, D, B, C, A]
        .                   loop {
1,026,864 ( 0.03%)              let bb = if let Some(&mut (_, ref mut iter)) = self.visit_stack.last_mut() {
  637,158 ( 0.02%)                  if let Some(&bb) = iter.next() {
        .                               bb
        .                           } else {
        .                               break;
        .                           }
        .                       } else {
        .                           break;
        .                       };
        .           
  212,386 ( 0.01%)              if self.visited.insert(bb) {
  896,686 ( 0.02%)                  if let Some(term) = &self.body[bb].terminator {
  512,392 ( 0.01%)                      self.visit_stack.push((bb, term.successors()));
        .                           }
        .                       }
        .                   }
1,046,432 ( 0.03%)      }
        .           }
        .           
      100 ( 0.00%)  pub fn postorder<'a, 'tcx>(body: &'a Body<'tcx>) -> Postorder<'a, 'tcx> {
      100 ( 0.00%)      Postorder::new(body, START_BLOCK)
      150 ( 0.00%)  }
        .           
        .           impl<'a, 'tcx> Iterator for Postorder<'a, 'tcx> {
        .               type Item = (BasicBlock, &'a BasicBlockData<'tcx>);
        .           
   30,126 ( 0.00%)      fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {
        .                   let next = self.visit_stack.pop();
  129,451 ( 0.00%)          if next.is_some() {
  257,599 ( 0.01%)              self.traverse_successor();
        .                   }
        .           
  129,451 ( 0.00%)          next.map(|(bb, _)| (bb, &self.body[bb]))
   50,210 ( 0.00%)      }
        .           
      530 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // All the blocks, minus the number of blocks we've visited.
    5,188 ( 0.00%)          let upper = self.body.basic_blocks().len() - self.visited.count();
        .           
    5,188 ( 0.00%)          let lower = if self.root_is_start_block {
        .                       // We will visit all remaining blocks exactly once.
        .                       upper
        .                   } else {
        .                       self.visit_stack.len()
        .                   };
        .           
      318 ( 0.00%)          (lower, Some(upper))
      742 ( 0.00%)      }
        .           }
        .           
        .           /// Reverse postorder traversal of a graph
        .           ///
        .           /// Reverse postorder is the reverse order of a postorder traversal.
        .           /// This is different to a preorder traversal and represents a natural
        .           /// linearization of control-flow.
        .           ///
-- line 232 ----------------------------------------
-- line 253 ----------------------------------------
        .           pub struct ReversePostorder<'a, 'tcx> {
        .               body: &'a Body<'tcx>,
        .               blocks: Vec<BasicBlock>,
        .               idx: usize,
        .           }
        .           
        .           impl<'a, 'tcx> ReversePostorder<'a, 'tcx> {
        .               pub fn new(body: &'a Body<'tcx>, root: BasicBlock) -> ReversePostorder<'a, 'tcx> {
    2,606 ( 0.00%)          let blocks: Vec<_> = Postorder::new(body, root).map(|(bb, _)| bb).collect();
        .           
    1,303 ( 0.00%)          let len = blocks.len();
        .           
    6,515 ( 0.00%)          ReversePostorder { body, blocks, idx: len }
        .               }
        .           }
        .           
    7,818 ( 0.00%)  pub fn reverse_postorder<'a, 'tcx>(body: &'a Body<'tcx>) -> ReversePostorder<'a, 'tcx> {
        .               ReversePostorder::new(body, START_BLOCK)
    6,515 ( 0.00%)  }
        .           
        .           impl<'a, 'tcx> Iterator for ReversePostorder<'a, 'tcx> {
        .               type Item = (BasicBlock, &'a BasicBlockData<'tcx>);
        .           
  120,762 ( 0.00%)      fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {
  483,048 ( 0.01%)          if self.idx == 0 {
        .                       return None;
        .                   }
  238,918 ( 0.01%)          self.idx -= 1;
        .           
        .                   self.blocks.get(self.idx).map(|&bb| (bb, &self.body[bb]))
  241,524 ( 0.01%)      }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.idx, Some(self.idx))
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> ExactSizeIterator for ReversePostorder<'a, 'tcx> {}
        .           
-- line 291 ----------------------------------------
-- line 295 ----------------------------------------
        .           /// This is clearer than writing `preorder` in cases where the order doesn't matter.
        .           pub fn reachable<'a, 'tcx>(
        .               body: &'a Body<'tcx>,
        .           ) -> impl 'a + Iterator<Item = (BasicBlock, &'a BasicBlockData<'tcx>)> {
        .               preorder(body)
        .           }
        .           
        .           /// Returns a `BitSet` containing all basic blocks reachable from the `START_BLOCK`.
    2,796 ( 0.00%)  pub fn reachable_as_bitset<'tcx>(body: &Body<'tcx>) -> BitSet<BasicBlock> {
        .               let mut iter = preorder(body);
        .               (&mut iter).for_each(drop);
    1,864 ( 0.00%)      iter.visited
    2,796 ( 0.00%)  }

1,279,838 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/traversal.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/step.rs
--------------------------------------------------------------------------------
Ir                 

-- line 8 ----------------------------------------
        .           
        .           use super::{InterpCx, Machine};
        .           
        .           /// Classify whether an operator is "left-homogeneous", i.e., the LHS has the
        .           /// same type as the result.
        .           #[inline]
        .           fn binop_left_homogeneous(op: mir::BinOp) -> bool {
        .               use rustc_middle::mir::BinOp::*;
   60,210 ( 0.00%)      match op {
        .                   Add | Sub | Mul | Div | Rem | BitXor | BitAnd | BitOr | Offset | Shl | Shr => true,
        .                   Eq | Ne | Lt | Le | Gt | Ge => false,
        .               }
        .           }
        .           /// Classify whether an operator is "right-homogeneous", i.e., the RHS has the
        .           /// same type as the LHS.
        .           #[inline]
        .           fn binop_right_homogeneous(op: mir::BinOp) -> bool {
        .               use rustc_middle::mir::BinOp::*;
  180,630 ( 0.00%)      match op {
        .                   Add | Sub | Mul | Div | Rem | BitXor | BitAnd | BitOr | Eq | Ne | Lt | Le | Gt | Ge => true,
        .                   Offset | Shl | Shr => false,
        .               }
        .           }
        .           
        .           impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {
      119 ( 0.00%)      pub fn run(&mut self) -> InterpResult<'tcx> {
        .                   while self.step()? {}
        .                   Ok(())
      153 ( 0.00%)      }
        .           
        .               /// Returns `true` as long as there are more things to do.
        .               ///
        .               /// This is used by [priroda](https://github.com/oli-obk/priroda)
        .               ///
        .               /// This is marked `#inline(always)` to work around adverserial codegen when `opt-level = 3`
        .               #[inline(always)]
        .               pub fn step(&mut self) -> InterpResult<'tcx, bool> {
  473,925 ( 0.01%)          if self.stack().is_empty() {
        .                       return Ok(false);
        .                   }
        .           
1,421,775 ( 0.04%)          let loc = match self.frame().loc {
  473,925 ( 0.01%)              Ok(loc) => loc,
        .                       Err(_) => {
        .                           // We are unwinding and this fn has no cleanup code.
        .                           // Just go on unwinding.
        .                           trace!("unwinding: skipping frame");
        .                           self.pop_stack_frame(/* unwinding */ true)?;
        .                           return Ok(true);
        .                       }
        .                   };
        .                   let basic_block = &self.body().basic_blocks()[loc.block];
        .           
        .                   let old_frames = self.frame_idx();
        .           
  473,925 ( 0.01%)          if let Some(stmt) = basic_block.statements.get(loc.statement_index) {
        .                       assert_eq!(old_frames, self.frame_idx());
        .                       self.statement(stmt)?;
        .                       return Ok(true);
        .                   }
        .           
        .                   M::before_terminator(self)?;
        .           
        .                   let terminator = basic_block.terminator();
-- line 71 ----------------------------------------
-- line 80 ----------------------------------------
        .                   info!("{:?}", stmt);
        .           
        .                   use rustc_middle::mir::StatementKind::*;
        .           
        .                   // Some statements (e.g., box) push new stack frames.
        .                   // We have to record the stack frame number *before* executing the statement.
        .                   let frame_idx = self.frame_idx();
        .           
2,543,766 ( 0.06%)          match &stmt.kind {
  546,165 ( 0.01%)              Assign(box (place, rvalue)) => self.eval_rvalue_into_place(rvalue, *place)?,
        .           
        .                       SetDiscriminant { place, variant_index } => {
        .                           let dest = self.eval_place(**place)?;
        .                           self.write_discriminant(*variant_index, &dest)?;
        .                       }
        .           
        .                       // Mark locals as alive
        .                       StorageLive(local) => {
  241,906 ( 0.01%)                  self.storage_live(*local)?;
        .                       }
        .           
        .                       // Mark locals as dead
        .                       StorageDead(local) => {
  241,906 ( 0.01%)                  self.storage_dead(*local)?;
        .                       }
        .           
        .                       // No dynamic semantics attached to `FakeRead`; MIR
        .                       // interpreter is solely intended for borrowck'ed code.
        .                       FakeRead(..) => {}
        .           
        .                       // Stacked Borrows.
        .                       Retag(kind, place) => {
-- line 111 ----------------------------------------
-- line 137 ----------------------------------------
        .                       // FIXME(#73156): Handle source code coverage in const eval
        .                       Coverage(..) => {}
        .           
        .                       // Defined to do nothing. These are added by optimization passes, to avoid changing the
        .                       // size of MIR constantly.
        .                       Nop => {}
        .                   }
        .           
2,119,805 ( 0.05%)          self.stack_mut()[frame_idx].loc.as_mut().unwrap().statement_index += 1;
        .                   Ok(())
        .               }
        .           
        .               /// Evaluate an assignment statement.
        .               ///
        .               /// There is no separate `eval_rvalue` function. Instead, the code for handling each rvalue
        .               /// type writes its results directly into the memory specified by the place.
        .               pub fn eval_rvalue_into_place(
        .                   &mut self,
        .                   rvalue: &mir::Rvalue<'tcx>,
        .                   place: mir::Place<'tcx>,
        .               ) -> InterpResult<'tcx> {
  728,220 ( 0.02%)          let dest = self.eval_place(place)?;
        .           
        .                   use rustc_middle::mir::Rvalue::*;
  910,275 ( 0.02%)          match *rvalue {
        .                       ThreadLocalRef(did) => {
        .                           let ptr = M::thread_local_static_base_pointer(self, did)?;
        .                           self.write_pointer(ptr, &dest)?;
        .                       }
        .           
   71,884 ( 0.00%)              Use(ref operand) => {
        .                           // Avoid recomputing the layout
  575,072 ( 0.01%)                  let op = self.eval_operand(operand, Some(dest.layout))?;
        .                           self.copy_op(&op, &dest)?;
        .                       }
        .           
   30,105 ( 0.00%)              BinaryOp(bin_op, box (ref left, ref right)) => {
        .                           let layout = binop_left_homogeneous(bin_op).then_some(dest.layout);
  240,840 ( 0.01%)                  let left = self.read_immediate(&self.eval_operand(left, layout)?)?;
   90,315 ( 0.00%)                  let layout = binop_right_homogeneous(bin_op).then_some(left.layout);
  270,945 ( 0.01%)                  let right = self.read_immediate(&self.eval_operand(right, layout)?)?;
  150,525 ( 0.00%)                  self.binop_ignore_overflow(bin_op, &left, &right, &dest)?;
        .                       }
        .           
        .                       CheckedBinaryOp(bin_op, box (ref left, ref right)) => {
        .                           // Due to the extra boolean in the result, we can never reuse the `dest.layout`.
        .                           let left = self.read_immediate(&self.eval_operand(left, None)?)?;
        .                           let layout = binop_right_homogeneous(bin_op).then_some(left.layout);
        .                           let right = self.read_immediate(&self.eval_operand(right, layout)?)?;
        .                           self.binop_with_overflow(bin_op, &left, &right, &dest)?;
-- line 186 ----------------------------------------
-- line 191 ----------------------------------------
        .                           let val = self.read_immediate(&self.eval_operand(operand, Some(dest.layout))?)?;
        .                           let val = self.unary_op(un_op, &val)?;
        .                           assert_eq!(val.layout, dest.layout, "layout mismatch for result of {:?}", un_op);
        .                           self.write_immediate(*val, &dest)?;
        .                       }
        .           
        .                       Aggregate(ref kind, ref operands) => {
        .                           // active_field_index is for union initialization.
  238,272 ( 0.01%)                  let (dest, active_field_index) = match **kind {
        .                               mir::AggregateKind::Adt(adt_did, variant_index, _, _, active_field_index) => {
        .                                   self.write_discriminant(variant_index, &dest)?;
        .                                   if self.tcx.adt_def(adt_did).is_enum() {
        .                                       assert!(active_field_index.is_none());
        .                                       (self.place_downcast(&dest, variant_index)?, None)
        .                                   } else {
        .                                       if active_field_index.is_some() {
        .                                           assert_eq!(operands.len(), 1);
        .                                       }
        .                                       (dest, active_field_index)
        .                                   }
        .                               }
  178,704 ( 0.00%)                      _ => (dest, None),
        .                           };
        .           
        .                           for (i, operand) in operands.iter().enumerate() {
  349,165 ( 0.01%)                      let op = self.eval_operand(operand, None)?;
        .                               let field_index = active_field_index.unwrap_or(i);
  349,165 ( 0.01%)                      let field_dest = self.place_field(&dest, field_index)?;
        .                               self.copy_op(&op, &field_dest)?;
        .                           }
        .                       }
        .           
        .                       Repeat(ref operand, _) => {
        .                           let src = self.eval_operand(operand, None)?;
        .                           assert!(!src.layout.is_unsized());
        .                           let dest = self.force_allocation(&dest)?;
-- line 226 ----------------------------------------
-- line 251 ----------------------------------------
        .                                   first.layout.align.abi,
        .                                   elem_size,
        .                                   length - 1,
        .                                   /*nonoverlapping:*/ true,
        .                               )?;
        .                           }
        .                       }
        .           
   90,315 ( 0.00%)              Len(place) => {
  150,525 ( 0.00%)                  let src = self.eval_place(place)?;
   30,105 ( 0.00%)                  let mplace = self.force_allocation(&src)?;
  150,525 ( 0.00%)                  let len = mplace.len(self)?;
        .                           self.write_scalar(Scalar::from_machine_usize(len, self), &dest)?;
        .                       }
        .           
        .                       AddressOf(_, place) | Ref(_, _, place) => {
        .                           let src = self.eval_place(place)?;
        .                           let place = self.force_allocation(&src)?;
        .                           self.write_immediate(place.to_ref(self), &dest)?;
        .                       }
-- line 270 ----------------------------------------
-- line 288 ----------------------------------------
        .                       }
        .           
        .                       ShallowInitBox(ref operand, _) => {
        .                           let src = self.eval_operand(operand, None)?;
        .                           let v = self.read_immediate(&src)?;
        .                           self.write_immediate(*v, &dest)?;
        .                       }
        .           
   90,315 ( 0.00%)              Cast(cast_kind, ref operand, cast_ty) => {
  210,735 ( 0.01%)                  let src = self.eval_operand(operand, None)?;
        .                           let cast_ty =
        .                               self.subst_from_current_frame_and_normalize_erasing_regions(cast_ty)?;
  301,050 ( 0.01%)                  self.cast(&src, cast_kind, cast_ty, &dest)?;
        .                       }
        .           
        .                       Discriminant(place) => {
        .                           let op = self.eval_place_to_op(place, None)?;
        .                           let discr_val = self.read_discriminant(&op)?.0;
        .                           self.write_scalar(discr_val, &dest)?;
        .                       }
        .                   }
-- line 308 ----------------------------------------
-- line 311 ----------------------------------------
        .           
        .                   Ok(())
        .               }
        .           
        .               fn terminator(&mut self, terminator: &mir::Terminator<'tcx>) -> InterpResult<'tcx> {
        .                   info!("{:?}", terminator.kind);
        .           
        .                   self.eval_terminator(terminator)?;
   49,964 ( 0.00%)          if !self.stack().is_empty() {
  349,629 ( 0.01%)              if let Ok(loc) = self.frame().loc {
        .                           info!("// executing {:?}", loc.block);
        .                       }
        .                   }
        .                   Ok(())
        .               }
        .           }

3,742,908 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/step.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/eval_context.rs
--------------------------------------------------------------------------------
Ir                 

-- line 58 ----------------------------------------
        .               fn new() -> Self {
        .                   Self(tracing::Span::none(), std::marker::PhantomData)
        .               }
        .           
        .               /// If a span is entered, we exit the previous span (if any, normally none) and enter the
        .               /// new span. This is mainly so we don't have to use `Option` for the `tracing_span` field of
        .               /// `Frame` by creating a dummy span to being with and then entering it once the frame has
        .               /// been pushed.
   39,752 ( 0.00%)      fn enter(&mut self, span: tracing::Span) {
        .                   // This executes the destructor on the previous instance of `SpanGuard`, ensuring that
        .                   // we never enter or exit more spans than vice versa. Unless you `mem::leak`, then we
        .                   // can't protect the tracing stack, but that'll just lead to weird logging, no actual
        .                   // problems.
   79,504 ( 0.00%)          *self = Self(span, std::marker::PhantomData);
        .                   self.0.with_subscriber(|(id, dispatch)| {
        .                       dispatch.enter(id);
        .                   });
   39,752 ( 0.00%)      }
        .           }
        .           
        .           impl Drop for SpanGuard {
        .               fn drop(&mut self) {
        .                   self.0.with_subscriber(|(id, dispatch)| {
        .                       dispatch.exit(id);
        .                   });
        .               }
-- line 83 ----------------------------------------
-- line 168 ----------------------------------------
        .           pub struct LocalState<'tcx, Tag: Provenance = AllocId> {
        .               pub value: LocalValue<Tag>,
        .               /// Don't modify if `Some`, this is only used to prevent computing the layout twice
        .               #[stable_hasher(ignore)]
        .               pub layout: Cell<Option<TyAndLayout<'tcx>>>,
        .           }
        .           
        .           /// Current value of a local variable
   39,732 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, HashStable, Debug)] // Miri debug-prints these
        .           pub enum LocalValue<Tag: Provenance = AllocId> {
        .               /// This local is not currently alive, and cannot be used at all.
        .               Dead,
        .               /// This local is alive but not yet initialized. It can be written to
        .               /// but not read from or its address taken. Locals get initialized on
        .               /// first write because for unsized locals, we do not know their size
        .               /// before that.
        .               Uninitialized,
-- line 184 ----------------------------------------
-- line 191 ----------------------------------------
        .           }
        .           
        .           impl<'tcx, Tag: Provenance + 'static> LocalState<'tcx, Tag> {
        .               /// Read the local's value or error if the local is not yet live or not live anymore.
        .               ///
        .               /// Note: This may only be invoked from the `Machine::access_local` hook and not from
        .               /// anywhere else. You may be invalidating machine invariants if you do!
        .               pub fn access(&self) -> InterpResult<'tcx, Operand<Tag>> {
2,261,790 ( 0.06%)          match self.value {
        .                       LocalValue::Dead => throw_ub!(DeadLocal),
        .                       LocalValue::Uninitialized => {
        .                           bug!("The type checker should prevent reading from a never-written local")
        .                       }
        .                       LocalValue::Live(val) => Ok(val),
        .                   }
        .               }
        .           
-- line 207 ----------------------------------------
-- line 208 ----------------------------------------
        .               /// Overwrite the local.  If the local can be overwritten in place, return a reference
        .               /// to do so; otherwise return the `MemPlace` to consult instead.
        .               ///
        .               /// Note: This may only be invoked from the `Machine::access_local_mut` hook and not from
        .               /// anywhere else. You may be invalidating machine invariants if you do!
        .               pub fn access_mut(
        .                   &mut self,
        .               ) -> InterpResult<'tcx, Result<&mut LocalValue<Tag>, MemPlace<Tag>>> {
3,988,713 ( 0.10%)          match self.value {
        .                       LocalValue::Dead => throw_ub!(DeadLocal),
1,052,454 ( 0.03%)              LocalValue::Live(Operand::Indirect(mplace)) => Ok(Err(mplace)),
        .                       ref mut
        .                       local @ (LocalValue::Live(Operand::Immediate(_)) | LocalValue::Uninitialized) => {
  100,986 ( 0.00%)                  Ok(Ok(local))
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<'mir, 'tcx, Tag: Provenance> Frame<'mir, 'tcx, Tag> {
        .               pub fn with_extra<Extra>(self, extra: Extra) -> Frame<'mir, 'tcx, Tag, Extra> {
        .                   Frame {
-- line 229 ----------------------------------------
-- line 289 ----------------------------------------
        .                       Ok(())
        .                   })
        .               }
        .           }
        .           
        .           impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> HasDataLayout for InterpCx<'mir, 'tcx, M> {
        .               #[inline]
        .               fn data_layout(&self) -> &TargetDataLayout {
  199,200 ( 0.01%)          &self.tcx.data_layout
        .               }
        .           }
        .           
        .           impl<'mir, 'tcx, M> layout::HasTyCtxt<'tcx> for InterpCx<'mir, 'tcx, M>
        .           where
        .               M: Machine<'mir, 'tcx>,
        .           {
        .               #[inline]
        .               fn tcx(&self) -> TyCtxt<'tcx> {
1,082,019 ( 0.03%)          *self.tcx
        .               }
        .           }
        .           
        .           impl<'mir, 'tcx, M> layout::HasParamEnv<'tcx> for InterpCx<'mir, 'tcx, M>
        .           where
        .               M: Machine<'mir, 'tcx>,
        .           {
        .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
  458,119 ( 0.01%)          self.param_env
        .               }
        .           }
        .           
        .           impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> LayoutOfHelpers<'tcx> for InterpCx<'mir, 'tcx, M> {
        .               type LayoutOfResult = InterpResult<'tcx, TyAndLayout<'tcx>>;
        .           
        .               #[inline]
        .               fn layout_tcx_at_span(&self) -> Span {
   39,684 ( 0.00%)          self.tcx.span
        .               }
        .           
        .               #[inline]
        .               fn handle_layout_err(
        .                   &self,
        .                   err: LayoutError<'tcx>,
        .                   _: Span,
        .                   _: Ty<'tcx>,
-- line 333 ----------------------------------------
-- line 361 ----------------------------------------
        .               param_env: ParamEnv<'tcx>,
        .               src: TyAndLayout<'tcx>,
        .               dest: TyAndLayout<'tcx>,
        .           ) -> bool {
        .               // Type-changing assignments can happen when subtyping is used. While
        .               // all normal lifetimes are erased, higher-ranked types with their
        .               // late-bound lifetimes are still around and can lead to type
        .               // differences. So we compare ignoring lifetimes.
  725,740 ( 0.02%)      if equal_up_to_regions(tcx, param_env, src.ty, dest.ty) {
        .                   // Make sure the layout is equal, too -- just to be safe. Miri really
        .                   // needs layout equality. For performance reason we skip this check when
        .                   // the types are equal. Equal types *can* have different layouts when
        .                   // enum downcast is involved (as enum variants carry the type of the
        .                   // enum), but those should never occur in assignments.
        .                   if cfg!(debug_assertions) || src.ty != dest.ty {
        .                       assert_eq!(src.layout, dest.layout);
        .                   }
-- line 377 ----------------------------------------
-- line 385 ----------------------------------------
        .           /// or compute the layout.
        .           #[cfg_attr(not(debug_assertions), inline(always))]
        .           pub(super) fn from_known_layout<'tcx>(
        .               tcx: TyCtxtAt<'tcx>,
        .               param_env: ParamEnv<'tcx>,
        .               known_layout: Option<TyAndLayout<'tcx>>,
        .               compute: impl FnOnce() -> InterpResult<'tcx, TyAndLayout<'tcx>>,
        .           ) -> InterpResult<'tcx, TyAndLayout<'tcx>> {
  141,422 ( 0.00%)      match known_layout {
   40,052 ( 0.00%)          None => compute(),
        .                   Some(known_layout) => {
        .                       if cfg!(debug_assertions) {
        .                           let check_layout = compute()?;
        .                           if !mir_assign_valid_types(tcx.tcx, param_env, check_layout, known_layout) {
        .                               span_bug!(
        .                                   tcx.span,
        .                                   "expected type differs from actual type.\nexpected: {:?}\nactual: {:?}",
        .                                   known_layout.ty,
-- line 402 ----------------------------------------
-- line 412 ----------------------------------------
        .           impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {
        .               pub fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   root_span: Span,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   machine: M,
        .                   memory_extra: M::MemoryExtra,
        .               ) -> Self {
      816 ( 0.00%)          InterpCx {
      136 ( 0.00%)              machine,
        .                       tcx: tcx.at(root_span),
        .                       param_env,
        .                       memory: Memory::new(tcx, memory_extra),
       68 ( 0.00%)              recursion_limit: tcx.recursion_limit(),
        .                   }
        .               }
        .           
        .               #[inline(always)]
        .               pub fn cur_span(&self) -> Span {
        .                   self.stack()
        .                       .iter()
        .                       .rev()
        .                       .find(|frame| !frame.instance.def.requires_caller_location(*self.tcx))
        .                       .map_or(self.tcx.span, |f| f.current_span())
        .               }
        .           
        .               #[inline(always)]
        .               pub fn scalar_to_ptr(&self, scalar: Scalar<M::PointerTag>) -> Pointer<Option<M::PointerTag>> {
    9,232 ( 0.00%)          self.memory.scalar_to_ptr(scalar)
        .               }
        .           
        .               /// Call this to turn untagged "global" pointers (obtained via `tcx`) into
        .               /// the machine pointer to the allocation.  Must never be used
        .               /// for any other pointers, nor for TLS statics.
        .               ///
        .               /// Using the resulting pointer represents a *direct* access to that memory
        .               /// (e.g. by directly using a `static`),
        .               /// as opposed to access through a pointer that was created by the program.
        .               ///
        .               /// This function can fail only if `ptr` points to an `extern static`.
        .               #[inline(always)]
        .               pub fn global_base_pointer(&self, ptr: Pointer) -> InterpResult<'tcx, Pointer<M::PointerTag>> {
    2,970 ( 0.00%)          self.memory.global_base_pointer(ptr)
        .               }
        .           
        .               #[inline(always)]
        .               pub(crate) fn stack(&self) -> &[Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>] {
        .                   M::stack(self)
        .               }
        .           
        .               #[inline(always)]
-- line 462 ----------------------------------------
-- line 464 ----------------------------------------
        .                   &mut self,
        .               ) -> &mut Vec<Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>> {
        .                   M::stack_mut(self)
        .               }
        .           
        .               #[inline(always)]
        .               pub fn frame_idx(&self) -> usize {
        .                   let stack = self.stack();
  675,805 ( 0.02%)          assert!(!stack.is_empty());
  655,963 ( 0.02%)          stack.len() - 1
        .               }
        .           
        .               #[inline(always)]
        .               pub fn frame(&self) -> &Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra> {
        .                   self.stack().last().expect("no call frames exist")
        .               }
        .           
        .               #[inline(always)]
        .               pub fn frame_mut(&mut self) -> &mut Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra> {
        .                   self.stack_mut().last_mut().expect("no call frames exist")
        .               }
        .           
        .               #[inline(always)]
        .               pub(super) fn body(&self) -> &'mir mir::Body<'tcx> {
  503,739 ( 0.01%)          self.frame().body
        .               }
        .           
        .               #[inline(always)]
        .               pub fn sign_extend(&self, value: u128, ty: TyAndLayout<'_>) -> u128 {
        .                   assert!(ty.abi.is_signed());
        .                   ty.size.sign_extend(value)
        .               }
        .           
-- line 496 ----------------------------------------
-- line 499 ----------------------------------------
        .                   ty.size.truncate(value)
        .               }
        .           
        .               #[inline]
        .               pub fn type_is_freeze(&self, ty: Ty<'tcx>) -> bool {
        .                   ty.is_freeze(self.tcx, self.param_env)
        .               }
        .           
   99,380 ( 0.00%)      pub fn load_mir(
        .                   &self,
        .                   instance: ty::InstanceDef<'tcx>,
        .                   promoted: Option<mir::Promoted>,
        .               ) -> InterpResult<'tcx, &'tcx mir::Body<'tcx>> {
        .                   // do not continue if typeck errors occurred (can only occur in local crate)
    9,938 ( 0.00%)          let def = instance.with_opt_param();
   59,628 ( 0.00%)          if let Some(def) = def.as_local() {
   39,740 ( 0.00%)              if self.tcx.has_typeck_results(def.did) {
   49,675 ( 0.00%)                  if let Some(error_reported) = self.tcx.typeck_opt_const_arg(def).tainted_by_errors {
        .                               throw_inval!(AlreadyReported(error_reported))
        .                           }
        .                       }
        .                   }
        .                   trace!("load mir(instance={:?}, promoted={:?})", instance, promoted);
   19,876 ( 0.00%)          if let Some(promoted) = promoted {
        .                       return Ok(&self.tcx.promoted_mir_opt_const_arg(def)[promoted]);
        .                   }
   79,504 ( 0.00%)          M::load_mir(self, instance)
   79,504 ( 0.00%)      }
        .           
        .               /// Call this on things you got out of the MIR (so it is as generic as the current
        .               /// stack frame), to bring it into the proper environment for this interpreter.
  565,688 ( 0.01%)      pub(super) fn subst_from_current_frame_and_normalize_erasing_regions<T: TypeFoldable<'tcx>>(
        .                   &self,
        .                   value: T,
        .               ) -> Result<T, InterpError<'tcx>> {
  120,420 ( 0.00%)          self.subst_from_frame_and_normalize_erasing_regions(self.frame(), value)
  565,688 ( 0.01%)      }
        .           
        .               /// Call this on things you got out of the MIR (so it is as generic as the provided
        .               /// stack frame), to bring it into the proper environment for this interpreter.
2,311,270 ( 0.06%)      pub(super) fn subst_from_frame_and_normalize_erasing_regions<T: TypeFoldable<'tcx>>(
        .                   &self,
        .                   frame: &Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>,
        .                   value: T,
        .               ) -> Result<T, InterpError<'tcx>> {
  372,549 ( 0.01%)          frame
        .                       .instance
  674,387 ( 0.02%)              .try_subst_mir_and_normalize_erasing_regions(*self.tcx, self.param_env, value)
        .                       .or_else(|e| {
        .                           self.tcx.sess.delay_span_bug(
        .                               self.cur_span(),
        .                               format!("failed to normalize {}", e.get_type_for_failure()).as_str(),
        .                           );
        .           
        .                           Err(InterpError::InvalidProgram(InvalidProgramInfo::TooGeneric))
        .                       })
2,080,143 ( 0.05%)      }
        .           
        .               /// The `substs` are assumed to already be in our interpreter "universe" (param_env).
        .               pub(super) fn resolve(
        .                   &self,
        .                   def: ty::WithOptConstParam<DefId>,
        .                   substs: SubstsRef<'tcx>,
        .               ) -> InterpResult<'tcx, ty::Instance<'tcx>> {
        .                   trace!("resolve: {:?}, {:#?}", def, substs);
        .                   trace!("param_env: {:#?}", self.param_env);
        .                   trace!("substs: {:#?}", substs);
   79,368 ( 0.00%)          match ty::Instance::resolve_opt_const_arg(*self.tcx, self.param_env, def, substs) {
   79,368 ( 0.00%)              Ok(Some(instance)) => Ok(instance),
        .                       Ok(None) => throw_inval!(TooGeneric),
        .           
        .                       // FIXME(eddyb) this could be a bit more specific than `AlreadyReported`.
        .                       Err(error_reported) => throw_inval!(AlreadyReported(error_reported)),
        .                   }
        .               }
        .           
        .               #[inline(always)]
-- line 575 ----------------------------------------
-- line 576 ----------------------------------------
        .               pub fn layout_of_local(
        .                   &self,
        .                   frame: &Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>,
        .                   local: mir::Local,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, TyAndLayout<'tcx>> {
        .                   // `const_prop` runs into this with an invalid (empty) frame, so we
        .                   // have to support that case (mostly by skipping all caching).
1,702,404 ( 0.04%)          match frame.locals.get(local).and_then(|state| state.layout.get()) {
        .                       None => {
        .                           let layout = from_known_layout(self.tcx, self.param_env, layout, || {
1,005,110 ( 0.03%)                      let local_ty = frame.body.local_decls[local].ty;
        .                               let local_ty =
  402,044 ( 0.01%)                          self.subst_from_frame_and_normalize_erasing_regions(frame, local_ty)?;
  402,044 ( 0.01%)                      self.layout_of(local_ty)
  201,022 ( 0.01%)                  })?;
  201,022 ( 0.01%)                  if let Some(state) = frame.locals.get(local) {
        .                               // Layouts of locals are requested a lot, so we cache them.
        .                               state.layout.set(Some(layout));
        .                           }
        .                           Ok(layout)
        .                       }
        .                       Some(layout) => Ok(layout),
        .                   }
        .               }
        .           
        .               /// Returns the actual dynamic size and alignment of the place at the given type.
        .               /// Only the "meta" (metadata) part of the place matters.
        .               /// This can fail to provide an answer for extern types.
  408,560 ( 0.01%)      pub(super) fn size_and_align_of(
        .                   &self,
        .                   metadata: &MemPlaceMeta<M::PointerTag>,
        .                   layout: &TyAndLayout<'tcx>,
        .               ) -> InterpResult<'tcx, Option<(Size, Align)>> {
  153,210 ( 0.00%)          if !layout.is_unsized() {
  100,986 ( 0.00%)              return Ok(Some((layout.size, layout.align.abi)));
        .                   }
    2,885 ( 0.00%)          match layout.ty.kind() {
        .                       ty::Adt(..) | ty::Tuple(..) => {
        .                           // First get the size of all statically known fields.
        .                           // Don't use type_of::sizing_type_of because that expects t to be sized,
        .                           // and it also rounds up to alignment, which we want to avoid,
        .                           // as the unsized field's alignment could be smaller.
        .                           assert!(!layout.ty.is_simd());
        .                           assert!(layout.fields.count() > 0);
        .                           trace!("DST layout: {:?}", layout);
-- line 621 ----------------------------------------
-- line 669 ----------------------------------------
        .                       }
        .                       ty::Dynamic(..) => {
        .                           let vtable = self.scalar_to_ptr(metadata.unwrap_meta());
        .                           // Read size and align from vtable (already checks size).
        .                           Ok(Some(self.read_size_and_align_from_vtable(vtable)?))
        .                       }
        .           
        .                       ty::Slice(_) | ty::Str => {
      577 ( 0.00%)                  let len = metadata.unwrap_meta().to_machine_usize(self)?;
        .                           let elem = layout.field(self, 0);
        .           
        .                           // Make sure the slice is not too big.
        .                           let size = elem.size.checked_mul(len, self).ok_or_else(|| {
        .                               err_ub!(InvalidMeta("slice is bigger than largest supported object"))
        .                           })?;
    1,154 ( 0.00%)                  Ok(Some((size, elem.align.abi)))
        .                       }
        .           
        .                       ty::Foreign(_) => Ok(None),
        .           
        .                       _ => span_bug!(self.cur_span(), "size_and_align_of::<{:?}> not supported", layout.ty),
        .                   }
  459,630 ( 0.01%)      }
        .               #[inline]
        .               pub fn size_and_align_of_mplace(
        .                   &self,
        .                   mplace: &MPlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, Option<(Size, Align)>> {
    2,308 ( 0.00%)          self.size_and_align_of(&mplace.meta, &mplace.layout)
        .               }
        .           
   89,442 ( 0.00%)      pub fn push_stack_frame(
        .                   &mut self,
        .                   instance: ty::Instance<'tcx>,
        .                   body: &'mir mir::Body<'tcx>,
        .                   return_place: Option<&PlaceTy<'tcx, M::PointerTag>>,
        .                   return_to_block: StackPopCleanup,
        .               ) -> InterpResult<'tcx> {
        .                   // first push a stack frame so we have access to the local substs
        .                   let pre_frame = Frame {
        .                       body,
    9,938 ( 0.00%)              loc: Err(body.span), // Span used for errors caused during preamble.
        .                       return_to_block,
        .                       return_place: return_place.copied(),
        .                       // empty local array, we fill it in below, after we are inside the stack frame and
        .                       // all methods actually know about the frame
        .                       locals: IndexVec::new(),
        .                       instance,
        .                       tracing_span: SpanGuard::new(),
        .                       extra: (),
        .                   };
  248,450 ( 0.01%)          let frame = M::init_frame_extra(self, pre_frame)?;
   49,690 ( 0.00%)          self.stack_mut().push(frame);
        .           
        .                   // Make sure all the constants required by this frame evaluate successfully (post-monomorphization check).
        .                   for const_ in &body.required_consts {
        .                       let span = const_.span;
        .                       let const_ =
        .                           self.subst_from_current_frame_and_normalize_erasing_regions(const_.literal)?;
        .                       self.mir_const_to_op(&const_, None).map_err(|err| {
        .                           // If there was an error, set the span of the current frame to this constant.
-- line 729 ----------------------------------------
-- line 730 ----------------------------------------
        .                           // Avoiding doing this when evaluation succeeds.
        .                           self.frame_mut().loc = Err(span);
        .                           err
        .                       })?;
        .                   }
        .           
        .                   // Locals are initially uninitialized.
        .                   let dummy = LocalState { value: LocalValue::Uninitialized, layout: Cell::new(None) };
    9,938 ( 0.00%)          let mut locals = IndexVec::from_elem(dummy, &body.local_decls);
        .           
        .                   // Now mark those locals as dead that we do not want to initialize
        .                   // Mark locals that use `Storage*` annotations as dead on function entry.
    9,938 ( 0.00%)          let always_live = AlwaysLiveLocals::new(self.body());
    9,938 ( 0.00%)          for local in locals.indices() {
  201,022 ( 0.01%)              if !always_live.contains(local) {
  483,812 ( 0.01%)                  locals[local].value = LocalValue::Dead;
        .                       }
        .                   }
        .                   // done
   99,380 ( 0.00%)          self.frame_mut().locals = locals;
        .                   M::after_stack_push(self)?;
   29,814 ( 0.00%)          self.frame_mut().loc = Ok(mir::Location::START);
        .           
   19,876 ( 0.00%)          let span = info_span!("frame", "{}", instance);
   79,504 ( 0.00%)          self.frame_mut().tracing_span.enter(span);
        .           
        .                   Ok(())
   89,442 ( 0.00%)      }
        .           
        .               /// Jump to the given block.
        .               #[inline]
        .               pub fn go_to_block(&mut self, target: mir::BasicBlock) {
  129,999 ( 0.00%)          self.frame_mut().loc = Ok(mir::Location { block: target, statement_index: 0 });
        .               }
        .           
        .               /// *Return* to the given `target` basic block.
        .               /// Do *not* use for unwinding! Use `unwind_to_block` instead.
        .               ///
        .               /// If `target` is `None`, that indicates the function cannot return, so we raise UB.
    9,921 ( 0.00%)      pub fn return_to_block(&mut self, target: Option<mir::BasicBlock>) -> InterpResult<'tcx> {
   19,842 ( 0.00%)          if let Some(target) = target {
        .                       self.go_to_block(target);
        .                       Ok(())
        .                   } else {
        .                       throw_ub!(Unreachable)
        .                   }
   19,842 ( 0.00%)      }
        .           
        .               /// *Unwind* to the given `target` basic block.
        .               /// Do *not* use for returning! Use `return_to_block` instead.
        .               ///
        .               /// If `target` is `StackPopUnwind::Skip`, that indicates the function does not need cleanup
        .               /// during unwinding, and we will just keep propagating that upwards.
        .               ///
        .               /// If `target` is `StackPopUnwind::NotAllowed`, that indicates the function does not allow
-- line 784 ----------------------------------------
-- line 802 ----------------------------------------
        .               /// and continue execution as normal.
        .               ///
        .               /// If `unwinding` is `true`, then we are in the middle of a panic,
        .               /// and need to unwind this frame. In this case, we jump to the
        .               /// `cleanup` block for the function, which is responsible for running
        .               /// `Drop` impls for any locals that have been initialized at this point.
        .               /// The cleanup block ends with a special `Resume` terminator, which will
        .               /// cause us to continue unwinding.
   99,380 ( 0.00%)      pub(super) fn pop_stack_frame(&mut self, unwinding: bool) -> InterpResult<'tcx> {
        .                   info!(
        .                       "popping stack frame ({})",
        .                       if unwinding { "during unwinding" } else { "returning from function" }
        .                   );
        .           
        .                   // Sanity check `unwinding`.
   39,752 ( 0.00%)          assert_eq!(
        .                       unwinding,
   39,752 ( 0.00%)              match self.frame().loc {
   39,752 ( 0.00%)                  Ok(loc) => self.body().basic_blocks()[loc.block].is_cleanup,
        .                           Err(_) => true,
        .                       }
        .                   );
        .           
   19,876 ( 0.00%)          if unwinding && self.frame_idx() == 0 {
        .                       throw_ub_format!("unwinding past the topmost frame of the stack");
        .                   }
        .           
        .                   let frame =
        .                       self.stack_mut().pop().expect("tried to pop a stack frame, but there were none");
        .           
   19,876 ( 0.00%)          if !unwinding {
        .                       // Copy the return value to the caller's stack frame.
   19,876 ( 0.00%)              if let Some(ref return_place) = frame.return_place {
   59,628 ( 0.00%)                  let op = self.access_local(&frame, mir::RETURN_PLACE, None)?;
   49,690 ( 0.00%)                  self.copy_op_transmute(&op, return_place)?;
        .                           trace!("{:?}", self.dump_place(**return_place));
        .                       } else {
        .                           throw_ub!(Unreachable);
        .                       }
        .                   }
        .           
   29,814 ( 0.00%)          let return_to_block = frame.return_to_block;
        .           
        .                   // Now where do we jump next?
        .           
        .                   // Usually we want to clean up (deallocate locals), but in a few rare cases we don't.
        .                   // In that case, we return early. We also avoid validation in that case,
        .                   // because this is CTFE and the final value will be thoroughly validated anyway.
    9,921 ( 0.00%)          let cleanup = match return_to_block {
        .                       StackPopCleanup::Goto { .. } => true,
        .                       StackPopCleanup::Root { cleanup, .. } => cleanup,
        .                   };
        .           
   19,893 ( 0.00%)          if !cleanup {
       17 ( 0.00%)              assert!(self.stack().is_empty(), "only the topmost frame should ever be leaked");
       34 ( 0.00%)              assert!(!unwinding, "tried to skip cleanup during unwinding");
        .                       // Leak the locals, skip validation, skip machine hook.
        .                       return Ok(());
        .                   }
        .           
        .                   // Cleanup: deallocate all locals that are backed by an allocation.
        .                   for local in &frame.locals {
   39,684 ( 0.00%)              self.deallocate_local(local.value)?;
        .                   }
        .           
   89,289 ( 0.00%)          if M::after_stack_pop(self, frame, unwinding)? == StackPopJump::NoJump {
        .                       // The hook already did everything.
        .                       // We want to skip the `info!` below, hence early return.
        .                       return Ok(());
        .                   }
        .                   // Normal return, figure out where to jump.
   19,842 ( 0.00%)          if unwinding {
        .                       // Follow the unwind edge.
        .                       let unwind = match return_to_block {
        .                           StackPopCleanup::Goto { unwind, .. } => unwind,
        .                           StackPopCleanup::Root { .. } => {
        .                               panic!("encountered StackPopCleanup::Root when unwinding!")
        .                           }
        .                       };
        .                       self.unwind_to_block(unwind)
        .                   } else {
        .                       // Follow the normal return edge.
    9,921 ( 0.00%)              match return_to_block {
   39,684 ( 0.00%)                  StackPopCleanup::Goto { ret, .. } => self.return_to_block(ret),
        .                           StackPopCleanup::Root { .. } => {
        .                               assert!(
        .                                   self.stack().is_empty(),
        .                                   "only the topmost frame can have StackPopCleanup::Root"
        .                               );
        .                               Ok(())
        .                           }
        .                       }
        .                   }
   89,459 ( 0.00%)      }
        .           
        .               /// Mark a storage as live, killing the previous content.
        .               pub fn storage_live(&mut self, local: mir::Local) -> InterpResult<'tcx> {
  120,953 ( 0.00%)          assert!(local != mir::RETURN_PLACE, "Cannot make return place live");
        .                   trace!("{:?} is now live", local);
        .           
        .                   let local_val = LocalValue::Uninitialized;
        .                   // StorageLive expects the local to be dead, and marks it live.
        .                   let old = mem::replace(&mut self.frame_mut().locals[local].value, local_val);
  362,859 ( 0.01%)          if !matches!(old, LocalValue::Dead) {
        .                       throw_ub_format!("StorageLive on a local that was already live");
        .                   }
        .                   Ok(())
        .               }
        .           
        .               pub fn storage_dead(&mut self, local: mir::Local) -> InterpResult<'tcx> {
  120,953 ( 0.00%)          assert!(local != mir::RETURN_PLACE, "Cannot make return place dead");
        .                   trace!("{:?} is now dead", local);
        .           
        .                   // It is entirely okay for this local to be already dead (at least that's how we currently generate MIR)
  120,953 ( 0.00%)          let old = mem::replace(&mut self.frame_mut().locals[local].value, LocalValue::Dead);
        .                   self.deallocate_local(old)?;
        .                   Ok(())
        .               }
        .           
        .               fn deallocate_local(&mut self, local: LocalValue<M::PointerTag>) -> InterpResult<'tcx> {
  763,119 ( 0.02%)          if let LocalValue::Live(Operand::Indirect(MemPlace { ptr, .. })) = local {
        .                       // All locals have a backing allocation, even if the allocation is empty
        .                       // due to the local having ZST type. Hence we can `unwrap`.
        .                       trace!(
        .                           "deallocating local {:?}: {:?}",
        .                           local,
        .                           self.memory.dump_alloc(ptr.provenance.unwrap().get_alloc_id())
        .                       );
  373,202 ( 0.01%)              self.memory.deallocate(ptr, None, MemoryKind::Stack)?;
        .                   };
        .                   Ok(())
        .               }
        .           
        .               pub fn eval_to_allocation(
        .                   &self,
        .                   gid: GlobalId<'tcx>,
        .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
-- line 938 ----------------------------------------

4,282,774 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/eval_context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
1,390,644 ( 0.04%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       15 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,040 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    2,644 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
        4 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
       16 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    2,108 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
        .               pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
        2 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    5,400 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    6,296 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        .               QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
-- line 281 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       14 ( 0.00%)      fn from(p: PathBuf) -> Self {
        4 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       12 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       14 ( 0.00%)      }
        .           }
        .           
        2 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
        8 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
       12 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
       12 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
        .               pub fn to_string_lossy(&self) -> Cow<'_, str> {
        .                   match self.inner {
        .                       FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
        .               }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,056 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
-- line 353 ----------------------------------------
-- line 357 ----------------------------------------
        .               }
        .           
        .               pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
        .               }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        2 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
        4 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
        4 ( 0.00%)      pub lo: BytePos,
        4 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
       12 ( 0.00%)      pub ctxt: SyntaxContext,
        4 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
  753,956 ( 0.02%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
      363 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
   17,976 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
   13,482 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
   17,976 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
  203,526 ( 0.01%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
  135,684 ( 0.00%)      }
        .               #[inline]
    1,024 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
    1,024 ( 0.00%)      }
        .               #[inline]
    4,401 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
    2,934 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
    1,715 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
    1,029 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
       63 ( 0.00%)      pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
       42 ( 0.00%)      }
        .           
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
        .                   self.data_untracked().is_dummy()
        .               }
        .           
        .               /// Returns `true` if this span comes from a macro or desugaring.
-- line 574 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
      135 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
       90 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
    1,089 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
      726 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 663 ----------------------------------------
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
        .               pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
        .               }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
      330 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
      165 ( 0.00%)          while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
      363 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
   64,059 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
   42,706 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
   10,822 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
      616 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
   20,573 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
      245 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
       49 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
      196 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
  141,715 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
  121,470 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
  101,225 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
      220 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
      264 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
      176 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
       12 ( 0.00%)      pub fn allows_unsafe(self) -> bool {
        3 ( 0.00%)          self.ctxt().outer_expn_data().allow_internal_unsafe
       12 ( 0.00%)      }
        .           
        .               pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
        .                   let mut prev_span = DUMMY_SP;
        .                   std::iter::from_fn(move || {
        .                       loop {
        .                           let expn_data = self.ctxt().outer_expn_data();
        .                           if expn_data.is_root() {
        .                               return None;
-- line 752 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
1,081,784 ( 0.03%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
  196,359 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
      329 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
      311 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
  686,140 ( 0.02%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
  885,096 ( 0.02%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
      231 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
      147 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
      168 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
      462 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
       84 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
      294 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
      378 ( 0.00%)      }
        .           
        .               pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
        .               }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
      482 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
        4 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
    2,916 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
    1,701 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
-- line 892 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
  101,178 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
   67,452 ( 0.00%)          let mut span = self.data();
   56,098 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
  101,178 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
  112,308 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
       54 ( 0.00%)      pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
       68 ( 0.00%)          let mut span = self.data();
       94 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
      182 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
       60 ( 0.00%)      }
        .           
        .               #[inline]
  173,192 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
  151,543 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
      515 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
       15 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
       84 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        3 ( 0.00%)      }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
        .                   self.primary_spans.iter().any(|sp| !sp.is_dummy())
        .               }
        .           
        .               /// Returns `true` if this contains only a dummy primary span with any hygienic context.
        .               pub fn is_dummy(&self) -> bool {
-- line 1084 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
      515 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
      515 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
       15 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
       12 ( 0.00%)          MultiSpan::from_spans(spans)
       15 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      308 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      154 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      462 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
        6 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1267 ----------------------------------------
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,052 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       12 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,104 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        .                   let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
        6 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        .                   let len = self.hash_len();
        .                   &self.value[..len]
        .               }
        .           
        .               fn hash_len(&self) -> usize {
        6 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      116 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        2 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        2 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        2 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
        8 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
        4 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
        4 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
        6 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       22 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    4,734 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      526 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  865,776 ( 0.02%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,052 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    5,786 ( 0.00%)              SourceFile {
    4,208 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,104 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,104 ( 0.00%)                  lines,
    2,104 ( 0.00%)                  multibyte_chars,
    2,104 ( 0.00%)                  non_narrow_chars,
    2,104 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    4,734 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
       22 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
        6 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
        4 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
        4 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
        6 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
       24 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
        4 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
       34 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
       22 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
        8 ( 0.00%)              lines,
        8 ( 0.00%)              multibyte_chars,
        8 ( 0.00%)              non_narrow_chars,
        8 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
       18 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
        .               pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
        .                   self.lines[line_index]
        .               }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
      875 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
      125 ( 0.00%)          if matches!(
      250 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        .                       let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        .                       if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
      125 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
    1,125 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      528 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
  137,051 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
   14,237 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
   39,757 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
   26,337 ( 0.00%)          assert!(line_index < self.lines.len());
   39,036 ( 0.00%)          if line_index == (self.lines.len() - 1) {
       18 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
   26,010 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
        2 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
        6 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
        .                       if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
       12 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
       10 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
        4 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
        7 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
        2 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
        .                   match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
        1 ( 0.00%)                  let linebpos = self.lines[a];
        2 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
        1 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
        8 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
        3 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
        2 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
        1 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
        5 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
        7 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
       20 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
       18 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        2 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        2 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
  229,425 ( 0.01%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
   11,485 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
  429,231 ( 0.01%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
2,071,649 ( 0.05%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
3,508,830 ( 0.09%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
   78,136 ( 0.00%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
1,031,667 ( 0.03%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
  151,227 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
  880,440 ( 0.02%)          let span = self.data_untracked();
  430,617 ( 0.01%)          span.ctxt.hash_stable(ctx, hasher);
  442,143 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
  295,067 ( 0.01%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
  294,152 ( 0.01%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
  588,304 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
  294,152 ( 0.01%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
  147,076 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
  147,076 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
1,179,048 ( 0.03%)      }
        .           }

3,643,303 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs
--------------------------------------------------------------------------------
Ir                  

-- line 30 ----------------------------------------
         .               // Both start and end are inclusive.
         .               let start = match range.start_bound().cloned() {
         .                   Bound::Included(start) => start.index(),
         .                   Bound::Excluded(start) => start.index() + 1,
         .                   Bound::Unbounded => 0,
         .               };
         .               let end = match range.end_bound().cloned() {
         .                   Bound::Included(end) => end.index(),
        20 ( 0.00%)          Bound::Excluded(end) => end.index().checked_sub(1)?,
         .                   Bound::Unbounded => domain - 1,
         .               };
        40 ( 0.00%)      assert!(end < domain);
        40 ( 0.00%)      if start > end {
         .                   return None;
         .               }
         .               Some((start, end))
         .           }
         .           
         .           macro_rules! bit_relations_inherent_impls {
         .               () => {
         .                   /// Sets `self = self | other` and returns `true` if `self` changed
         .                   /// (i.e., if new bits were added).
   525,660 ( 0.01%)          pub fn union<Rhs>(&mut self, other: &Rhs) -> bool
         .                   where
         .                       Self: BitRelations<Rhs>,
         .                   {
         .                       <Self as BitRelations<Rhs>>::union(self, other)
   397,327 ( 0.01%)          }
         .           
         .                   /// Sets `self = self - other` and returns `true` if `self` changed.
         .                   /// (i.e., if any bits were removed).
    15,410 ( 0.00%)          pub fn subtract<Rhs>(&mut self, other: &Rhs) -> bool
         .                   where
         .                       Self: BitRelations<Rhs>,
         .                   {
         .                       <Self as BitRelations<Rhs>>::subtract(self, other)
    15,410 ( 0.00%)          }
         .           
         .                   /// Sets `self = self & other` and return `true` if `self` changed.
         .                   /// (i.e., if any bits were removed).
         .                   pub fn intersect<Rhs>(&mut self, other: &Rhs) -> bool
         .                   where
         .                       Self: BitRelations<Rhs>,
         .                   {
         .                       <Self as BitRelations<Rhs>>::intersect(self, other)
-- line 74 ----------------------------------------
-- line 92 ----------------------------------------
         .               domain_size: usize,
         .               words: Vec<Word>,
         .               marker: PhantomData<T>,
         .           }
         .           
         .           impl<T> BitSet<T> {
         .               /// Gets the domain size.
         .               pub fn domain_size(&self) -> usize {
        65 ( 0.00%)          self.domain_size
         .               }
         .           }
         .           
         .           impl<T: Idx> BitSet<T> {
         .               /// Creates a new, empty bitset with a given `domain_size`.
         .               #[inline]
         .               pub fn new_empty(domain_size: usize) -> BitSet<T> {
         .                   let num_words = num_words(domain_size);
    18,540 ( 0.00%)          BitSet { domain_size, words: vec![0; num_words], marker: PhantomData }
         .               }
         .           
         .               /// Creates a new, filled bitset with a given `domain_size`.
         .               #[inline]
         .               pub fn new_filled(domain_size: usize) -> BitSet<T> {
         .                   let num_words = num_words(domain_size);
    49,925 ( 0.00%)          let mut result = BitSet { domain_size, words: vec![!0; num_words], marker: PhantomData };
         .                   result.clear_excess_bits();
         .                   result
         .               }
         .           
         .               /// Clear all elements.
         .               #[inline]
         .               pub fn clear(&mut self) {
         .                   for word in &mut self.words {
       364 ( 0.00%)              *word = 0;
         .                   }
         .               }
         .           
         .               /// Clear excess bits in the final word.
         .               fn clear_excess_bits(&mut self) {
       208 ( 0.00%)          let num_bits_in_final_word = self.domain_size % WORD_BITS;
    20,386 ( 0.00%)          if num_bits_in_final_word > 0 {
    20,178 ( 0.00%)              let mask = (1 << num_bits_in_final_word) - 1;
    40,564 ( 0.00%)              let final_word_idx = self.words.len() - 1;
    10,193 ( 0.00%)              self.words[final_word_idx] &= mask;
         .                   }
         .               }
         .           
         .               /// Count the number of set bits in the set.
         .               pub fn count(&self) -> usize {
         .                   self.words.iter().map(|e| e.count_ones() as usize).sum()
         .               }
         .           
         .               /// Returns `true` if `self` contains `elem`.
         .               #[inline]
         .               pub fn contains(&self, elem: T) -> bool {
   877,575 ( 0.02%)          assert!(elem.index() < self.domain_size);
         .                   let (word_index, mask) = word_index_and_mask(elem);
 1,107,572 ( 0.03%)          (self.words[word_index] & mask) != 0
         .               }
         .           
         .               /// Is `self` is a (non-strict) superset of `other`?
         .               #[inline]
         .               pub fn superset(&self, other: &BitSet<T>) -> bool {
         .                   assert_eq!(self.domain_size, other.domain_size);
         .                   self.words.iter().zip(&other.words).all(|(a, b)| (a & b) == *b)
         .               }
-- line 157 ----------------------------------------
-- line 160 ----------------------------------------
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
         .                   self.words.iter().all(|a| *a == 0)
         .               }
         .           
         .               /// Insert `elem`. Returns whether the set has changed.
         .               #[inline]
         .               pub fn insert(&mut self, elem: T) -> bool {
 2,305,351 ( 0.06%)          assert!(elem.index() < self.domain_size);
         .                   let (word_index, mask) = word_index_and_mask(elem);
         .                   let word_ref = &mut self.words[word_index];
   629,476 ( 0.02%)          let word = *word_ref;
 1,258,952 ( 0.03%)          let new_word = word | mask;
 1,183,741 ( 0.03%)          *word_ref = new_word;
   664,013 ( 0.02%)          new_word != word
         .               }
         .           
         .               #[inline]
         .               pub fn insert_range(&mut self, elems: impl RangeBounds<T>) {
         .                   let Some((start, end)) = inclusive_start_end(elems, self.domain_size) else {
         .                       return;
         .                   };
         .           
-- line 182 ----------------------------------------
-- line 199 ----------------------------------------
         .                   } else {
         .                       self.words[start_word_index] |= end_mask | (end_mask - start_mask);
         .                   }
         .               }
         .           
         .               /// Sets all bits to true.
         .               pub fn insert_all(&mut self) {
         .                   for word in &mut self.words {
       416 ( 0.00%)              *word = !0;
         .                   }
         .                   self.clear_excess_bits();
         .               }
         .           
         .               /// Returns `true` if the set has changed.
         .               #[inline]
         .               pub fn remove(&mut self, elem: T) -> bool {
 1,373,956 ( 0.03%)          assert!(elem.index() < self.domain_size);
         .                   let (word_index, mask) = word_index_and_mask(elem);
         .                   let word_ref = &mut self.words[word_index];
     4,022 ( 0.00%)          let word = *word_ref;
 1,350,092 ( 0.03%)          let new_word = word & !mask;
   706,116 ( 0.02%)          *word_ref = new_word;
     8,044 ( 0.00%)          new_word != word
         .               }
         .           
         .               /// Gets a slice of the underlying words.
         .               pub fn words(&self) -> &[Word] {
         .                   &self.words
         .               }
         .           
         .               /// Iterates over the indices of set bits in a sorted order.
-- line 229 ----------------------------------------
-- line 273 ----------------------------------------
         .                   not_already |= (self.words[current_index] ^ new_bit_mask) != 0;
         .                   // Any bits in the tail? Note `clear_excess_bits` before.
         .                   not_already |= self.words[current_index + 1..].iter().any(|&x| x != 0);
         .           
         .                   not_already
         .               }
         .           
         .               fn last_set_in(&self, range: impl RangeBounds<T>) -> Option<T> {
        20 ( 0.00%)          let (start, end) = inclusive_start_end(range, self.domain_size)?;
         .                   let (start_word_index, _) = word_index_and_mask(start);
         .                   let (end_word_index, end_mask) = word_index_and_mask(end);
         .           
       100 ( 0.00%)          let end_word = self.words[end_word_index] & (end_mask | (end_mask - 1));
        40 ( 0.00%)          if end_word != 0 {
        54 ( 0.00%)              let pos = max_bit(end_word) + WORD_BITS * end_word_index;
        36 ( 0.00%)              if start <= pos {
         .                           return Some(T::new(pos));
         .                       }
         .                   }
         .           
         .                   // We exclude end_word_index from the range here, because we don't want
         .                   // to limit ourselves to *just* the last word: the bits set it in may be
         .                   // after `end`, so it may not work out.
         .                   if let Some(offset) =
         1 ( 0.00%)              self.words[start_word_index..end_word_index].iter().rposition(|&w| w != 0)
         .                   {
         2 ( 0.00%)              let word_idx = start_word_index + offset;
         1 ( 0.00%)              let start_word = self.words[word_idx];
         5 ( 0.00%)              let pos = max_bit(start_word) + WORD_BITS * word_idx;
         2 ( 0.00%)              if start <= pos {
         .                           return Some(T::new(pos));
         .                       }
         .                   }
         .           
         .                   None
         .               }
         .           
         .               bit_relations_inherent_impls! {}
         .           }
         .           
         .           // dense REL dense
         .           impl<T: Idx> BitRelations<BitSet<T>> for BitSet<T> {
         .               fn union(&mut self, other: &BitSet<T>) -> bool {
   384,999 ( 0.01%)          assert_eq!(self.domain_size, other.domain_size);
10,730,680 ( 0.27%)          bitwise(&mut self.words, &other.words, |a, b| a | b)
         .               }
         .           
         .               fn subtract(&mut self, other: &BitSet<T>) -> bool {
         .                   assert_eq!(self.domain_size, other.domain_size);
       365 ( 0.00%)          bitwise(&mut self.words, &other.words, |a, b| a & !b)
         .               }
         .           
         .               fn intersect(&mut self, other: &BitSet<T>) -> bool {
         .                   assert_eq!(self.domain_size, other.domain_size);
         .                   bitwise(&mut self.words, &other.words, |a, b| a & b)
         .               }
         .           }
         .           
         .           // Applies a function to mutate a bitset, and returns true if any
         .           // of the applications return true
         .           fn sequential_update<T: Idx>(
         .               mut self_update: impl FnMut(T) -> bool,
         .               it: impl Iterator<Item = T>,
         .           ) -> bool {
         .               let mut changed = false;
     6,943 ( 0.00%)      for elem in it {
    20,829 ( 0.00%)          changed |= self_update(elem);
         .               }
         .               changed
    12,216 ( 0.00%)  }
         .           
         .           // Optimization of intersection for SparseBitSet that's generic
         .           // over the RHS
         .           fn sparse_intersect<T: Idx>(
         .               set: &mut SparseBitSet<T>,
         .               other_contains: impl Fn(&T) -> bool,
         .           ) -> bool {
         .               let size = set.elems.len();
-- line 350 ----------------------------------------
-- line 413 ----------------------------------------
         .                       HybridBitSet::Dense(dense) => dense.intersect(other),
         .                   }
         .               }
         .           }
         .           
         .           // dense REL hybrid
         .           impl<T: Idx> BitRelations<HybridBitSet<T>> for BitSet<T> {
         .               fn union(&mut self, other: &HybridBitSet<T>) -> bool {
    12,328 ( 0.00%)          assert_eq!(self.domain_size, other.domain_size());
     6,164 ( 0.00%)          match other {
         .                       HybridBitSet::Sparse(sparse) => {
         .                           sequential_update(|elem| self.insert(elem), sparse.iter().cloned())
         .                       }
         .                       HybridBitSet::Dense(dense) => self.union(dense),
         .                   }
         .               }
         .           
         .               fn subtract(&mut self, other: &HybridBitSet<T>) -> bool {
    12,328 ( 0.00%)          assert_eq!(self.domain_size, other.domain_size());
     6,164 ( 0.00%)          match other {
         .                       HybridBitSet::Sparse(sparse) => {
         .                           sequential_update(|elem| self.remove(elem), sparse.iter().cloned())
         .                       }
         .                       HybridBitSet::Dense(dense) => self.subtract(dense),
         .                   }
         .               }
         .           
         .               fn intersect(&mut self, other: &HybridBitSet<T>) -> bool {
-- line 440 ----------------------------------------
-- line 455 ----------------------------------------
         .                       HybridBitSet::Dense(dense) => self.intersect(dense),
         .                   }
         .               }
         .           }
         .           
         .           // hybrid REL hybrid
         .           impl<T: Idx> BitRelations<HybridBitSet<T>> for HybridBitSet<T> {
         .               fn union(&mut self, other: &HybridBitSet<T>) -> bool {
     2,502 ( 0.00%)          assert_eq!(self.domain_size(), other.domain_size());
       834 ( 0.00%)          match self {
         .                       HybridBitSet::Sparse(_) => {
       834 ( 0.00%)                  match other {
         .                               HybridBitSet::Sparse(other_sparse) => {
         .                                   // Both sets are sparse. Add the elements in
         .                                   // `other_sparse` to `self` one at a time. This
         .                                   // may or may not cause `self` to be densified.
         .                                   let mut changed = false;
         .                                   for elem in other_sparse.iter() {
     2,520 ( 0.00%)                              changed |= self.insert(*elem);
         .                                   }
         .                                   changed
         .                               }
         .           
         .                               HybridBitSet::Dense(other_dense) => self.union(other_dense),
         .                           }
         .                       }
         .           
-- line 481 ----------------------------------------
-- line 511 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<T> Clone for BitSet<T> {
         .               fn clone(&self) -> Self {
         .                   BitSet { domain_size: self.domain_size, words: self.words.clone(), marker: PhantomData }
         .               }
         .           
   604,352 ( 0.02%)      fn clone_from(&mut self, from: &Self) {
   402,552 ( 0.01%)          if self.domain_size != from.domain_size {
         .                       self.words.resize(from.domain_size, 0);
         .                       self.domain_size = from.domain_size;
         .                   }
         .           
         .                   self.words.copy_from_slice(&from.words);
         .               }
         .           }
         .           
-- line 528 ----------------------------------------
-- line 599 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, T: Idx> Iterator for BitIter<'a, T> {
         .               type Item = T;
         .               fn next(&mut self) -> Option<T> {
         .                   loop {
   216,956 ( 0.01%)              if self.word != 0 {
         .                           // Get the position of the next set bit in the current word,
         .                           // then clear the bit.
         .                           let bit_pos = self.word.trailing_zeros() as usize;
         .                           let bit = 1 << bit_pos;
         .                           self.word ^= bit;
    67,344 ( 0.00%)                  return Some(T::new(bit_pos + self.offset));
         .                       }
         .           
         .                       // Move onto the next word. `wrapping_add()` is needed to handle
         .                       // the degenerate initial value given to `offset` in `new()`.
         .                       let word = self.iter.next()?;
     6,943 ( 0.00%)              self.word = *word;
         .                       self.offset = self.offset.wrapping_add(WORD_BITS);
         .                   }
         .               }
         .           }
         .           
         .           #[inline]
         .           fn bitwise<Op>(out_vec: &mut [Word], in_vec: &[Word], op: Op) -> bool
         .           where
         .               Op: Fn(Word, Word) -> Word,
         .           {
   513,556 ( 0.01%)      assert_eq!(out_vec.len(), in_vec.len());
         .               let mut changed = 0;
   216,118 ( 0.01%)      for (out_elem, in_elem) in iter::zip(out_vec, in_vec) {
10,835,106 ( 0.28%)          let old_val = *out_elem;
10,615,403 ( 0.27%)          let new_val = op(old_val, *in_elem);
10,730,819 ( 0.27%)          *out_elem = new_val;
         .                   // This is essentially equivalent to a != with changed being a bool, but
         .                   // in practice this code gets auto-vectorized by the compiler for most
         .                   // operators. Using != here causes us to generate quite poor code as the
         .                   // compiler tries to go back to a boolean on each loop iteration.
21,670,261 ( 0.55%)          changed |= old_val ^ new_val;
         .               }
         .               changed != 0
         .           }
         .           
         .           const SPARSE_MAX: usize = 8;
         .           
         .           /// A fixed-size bitset type with a sparse representation and a maximum of
         .           /// `SPARSE_MAX` elements. The elements are stored as a sorted `ArrayVec` with
         .           /// no duplicates.
         .           ///
         .           /// This type is used by `HybridBitSet`; do not use directly.
         .           #[derive(Clone, Debug)]
         .           pub struct SparseBitSet<T> {
     4,456 ( 0.00%)      domain_size: usize,
         .               elems: ArrayVec<T, SPARSE_MAX>,
         .           }
         .           
         .           impl<T: Idx> SparseBitSet<T> {
         .               fn new_empty(domain_size: usize) -> Self {
         .                   SparseBitSet { domain_size, elems: ArrayVec::new() }
         .               }
         .           
         .               fn len(&self) -> usize {
    20,252 ( 0.00%)          self.elems.len()
         .               }
         .           
         .               fn is_empty(&self) -> bool {
         .                   self.elems.len() == 0
         .               }
         .           
         .               fn contains(&self, elem: T) -> bool {
       223 ( 0.00%)          assert!(elem.index() < self.domain_size);
         .                   self.elems.contains(&elem)
         .               }
         .           
         .               fn insert(&mut self, elem: T) -> bool {
    20,160 ( 0.00%)          assert!(elem.index() < self.domain_size);
     8,402 ( 0.00%)          let changed = if let Some(i) = self.elems.iter().position(|&e| e.index() >= elem.index()) {
     4,056 ( 0.00%)              if self.elems[i] == elem {
         .                           // `elem` is already in the set.
         .                           false
         .                       } else {
         .                           // `elem` is smaller than one or more existing elements.
         .                           self.elems.insert(i, elem);
         .                           true
         .                       }
         .                   } else {
         .                       // `elem` is larger than all existing elements.
         .                       self.elems.push(elem);
         .                       true
         .                   };
    20,160 ( 0.00%)          assert!(self.len() <= SPARSE_MAX);
         .                   changed
         .               }
         .           
         .               fn remove(&mut self, elem: T) -> bool {
    13,354 ( 0.00%)          assert!(elem.index() < self.domain_size);
         .                   if let Some(i) = self.elems.iter().position(|&e| e == elem) {
     4,012 ( 0.00%)              self.elems.remove(i);
         .                       true
         .                   } else {
         .                       false
         .                   }
         .               }
         .           
         .               fn to_dense(&self) -> BitSet<T> {
         .                   let mut dense = BitSet::new_empty(self.domain_size);
         .                   for elem in self.elems.iter() {
       336 ( 0.00%)              dense.insert(*elem);
         .                   }
         .                   dense
         .               }
         .           
         .               fn iter(&self) -> slice::Iter<'_, T> {
     4,414 ( 0.00%)          self.elems.iter()
         .               }
         .           
         .               bit_relations_inherent_impls! {}
         .           }
         .           
         .           impl<T: Idx + Ord> SparseBitSet<T> {
         .               fn last_set_in(&self, range: impl RangeBounds<T>) -> Option<T> {
         .                   let mut last_leq = None;
-- line 723 ----------------------------------------
-- line 738 ----------------------------------------
         .           /// number of elements, but a large `domain_size`, and are cleared frequently.
         .           ///
         .           /// `T` is an index type, typically a newtyped `usize` wrapper, but it can also
         .           /// just be `usize`.
         .           ///
         .           /// All operations that involve an element will panic if the element is equal
         .           /// to or greater than the domain size. All operations that involve two bitsets
         .           /// will panic if the bitsets have differing domain sizes.
    40,104 ( 0.00%)  #[derive(Clone)]
         .           pub enum HybridBitSet<T> {
         .               Sparse(SparseBitSet<T>),
         .               Dense(BitSet<T>),
         .           }
         .           
         .           impl<T: Idx> fmt::Debug for HybridBitSet<T> {
         .               fn fmt(&self, w: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   match self {
-- line 754 ----------------------------------------
-- line 767 ----------------------------------------
         .                   match self {
         .                       HybridBitSet::Sparse(sparse) => sparse.domain_size,
         .                       HybridBitSet::Dense(dense) => dense.domain_size,
         .                   }
         .               }
         .           
         .               pub fn clear(&mut self) {
         .                   let domain_size = self.domain_size();
     1,822 ( 0.00%)          *self = HybridBitSet::new_empty(domain_size);
         .               }
         .           
         .               pub fn contains(&self, elem: T) -> bool {
       170 ( 0.00%)          match self {
         .                       HybridBitSet::Sparse(sparse) => sparse.contains(elem),
         .                       HybridBitSet::Dense(dense) => dense.contains(elem),
         .                   }
         .               }
         .           
         .               pub fn superset(&self, other: &HybridBitSet<T>) -> bool {
         .                   match (self, other) {
         .                       (HybridBitSet::Dense(self_dense), HybridBitSet::Dense(other_dense)) => {
-- line 787 ----------------------------------------
-- line 799 ----------------------------------------
         .                       HybridBitSet::Sparse(sparse) => sparse.is_empty(),
         .                       HybridBitSet::Dense(dense) => dense.is_empty(),
         .                   }
         .               }
         .           
         .               /// Returns the previous element present in the bitset from `elem`,
         .               /// inclusively of elem. That is, will return `Some(elem)` if elem is in the
         .               /// bitset.
     4,454 ( 0.00%)      pub fn last_set_in(&self, range: impl RangeBounds<T>) -> Option<T>
         .               where
         .                   T: Ord,
         .               {
     4,454 ( 0.00%)          match self {
         .                       HybridBitSet::Sparse(sparse) => sparse.last_set_in(range),
         .                       HybridBitSet::Dense(dense) => dense.last_set_in(range),
         .                   }
     6,681 ( 0.00%)      }
         .           
    93,186 ( 0.00%)      pub fn insert(&mut self, elem: T) -> bool {
         .                   // No need to check `elem` against `self.domain_size` here because all
         .                   // the match cases check it, one way or another.
    20,708 ( 0.00%)          match self {
    20,252 ( 0.00%)              HybridBitSet::Sparse(sparse) if sparse.len() < SPARSE_MAX => {
         .                           // The set is sparse and has space for `elem`.
         .                           sparse.insert(elem)
         .                       }
         .                       HybridBitSet::Sparse(sparse) if sparse.contains(elem) => {
         .                           // The set is sparse and does not have space for `elem`, but
         .                           // that doesn't matter because `elem` is already present.
         .                           false
         .                       }
         .                       HybridBitSet::Sparse(sparse) => {
         .                           // The set is sparse and full. Convert to a dense set.
         .                           let mut dense = sparse.to_dense();
         .                           let changed = dense.insert(elem);
        42 ( 0.00%)                  assert!(changed);
       252 ( 0.00%)                  *self = HybridBitSet::Dense(dense);
         .                           changed
         .                       }
         .                       HybridBitSet::Dense(dense) => dense.insert(elem),
         .                   }
    82,832 ( 0.00%)      }
         .           
         .               pub fn insert_range(&mut self, elems: impl RangeBounds<T>) {
         .                   // No need to check `elem` against `self.domain_size` here because all
         .                   // the match cases check it, one way or another.
         .                   let start = match elems.start_bound().cloned() {
         .                       Bound::Included(start) => start.index(),
         .                       Bound::Excluded(start) => start.index() + 1,
         .                       Bound::Unbounded => 0,
-- line 848 ----------------------------------------
-- line 879 ----------------------------------------
         .                   match self {
         .                       HybridBitSet::Sparse(_) => {
         .                           *self = HybridBitSet::Dense(BitSet::new_filled(domain_size));
         .                       }
         .                       HybridBitSet::Dense(dense) => dense.insert_all(),
         .                   }
         .               }
         .           
     6,604 ( 0.00%)      pub fn remove(&mut self, elem: T) -> bool {
         .                   // Note: we currently don't bother going from Dense back to Sparse.
    13,370 ( 0.00%)          match self {
         .                       HybridBitSet::Sparse(sparse) => sparse.remove(elem),
         .                       HybridBitSet::Dense(dense) => dense.remove(elem),
         .                   }
    13,208 ( 0.00%)      }
         .           
         .               /// Converts to a dense set, consuming itself in the process.
         .               pub fn to_dense(self) -> BitSet<T> {
         .                   match self {
         .                       HybridBitSet::Sparse(sparse) => sparse.to_dense(),
         .                       HybridBitSet::Dense(dense) => dense,
         .                   }
         .               }
         .           
         .               pub fn iter(&self) -> HybridIter<'_, T> {
     1,224 ( 0.00%)          match self {
     2,470 ( 0.00%)              HybridBitSet::Sparse(sparse) => HybridIter::Sparse(sparse.iter()),
         .                       HybridBitSet::Dense(dense) => HybridIter::Dense(dense.iter()),
         .                   }
         .               }
         .           
         .               bit_relations_inherent_impls! {}
         .           }
         .           
         .           pub enum HybridIter<'a, T: Idx> {
-- line 913 ----------------------------------------
-- line 935 ----------------------------------------
         .           /// to or greater than the domain size.
         .           #[derive(Clone, Debug, PartialEq)]
         .           pub struct GrowableBitSet<T: Idx> {
         .               bit_set: BitSet<T>,
         .           }
         .           
         .           impl<T: Idx> GrowableBitSet<T> {
         .               /// Ensure that the set can hold at least `min_domain_size` elements.
   955,647 ( 0.02%)      pub fn ensure(&mut self, min_domain_size: usize) {
   273,042 ( 0.01%)          if self.bit_set.domain_size < min_domain_size {
         .                       self.bit_set.domain_size = min_domain_size;
         .                   }
         .           
         .                   let min_num_words = num_words(min_domain_size);
   546,084 ( 0.01%)          if self.bit_set.words.len() < min_num_words {
         .                       self.bit_set.words.resize(min_num_words, 0)
         .                   }
   819,126 ( 0.02%)      }
         .           
         .               pub fn new_empty() -> GrowableBitSet<T> {
       168 ( 0.00%)          GrowableBitSet { bit_set: BitSet::new_empty(0) }
         .               }
         .           
         .               pub fn with_capacity(capacity: usize) -> GrowableBitSet<T> {
         4 ( 0.00%)          GrowableBitSet { bit_set: BitSet::new_empty(capacity) }
         .               }
         .           
         .               /// Returns `true` if the set has changed.
         .               #[inline]
         .               pub fn insert(&mut self, elem: T) -> bool {
   682,605 ( 0.02%)          self.ensure(elem.index() + 1);
         .                   self.bit_set.insert(elem)
         .               }
         .           
         .               /// Returns `true` if the set has changed.
         .               #[inline]
         .               pub fn remove(&mut self, elem: T) -> bool {
         .                   self.ensure(elem.index() + 1);
         .                   self.bit_set.remove(elem)
-- line 973 ----------------------------------------
-- line 976 ----------------------------------------
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
         .                   self.bit_set.is_empty()
         .               }
         .           
         .               #[inline]
         .               pub fn contains(&self, elem: T) -> bool {
         .                   let (word_index, mask) = word_index_and_mask(elem);
       528 ( 0.00%)          self.bit_set.words.get(word_index).map_or(false, |word| (word & mask) != 0)
         .               }
         .           }
         .           
         .           /// A fixed-size 2D bit matrix type with a dense representation.
         .           ///
         .           /// `R` and `C` are index types used to identify rows and columns respectively;
         .           /// typically newtyped `usize` wrappers, but they can also just be `usize`.
         .           ///
-- line 992 ----------------------------------------
-- line 1001 ----------------------------------------
         .           }
         .           
         .           impl<R: Idx, C: Idx> BitMatrix<R, C> {
         .               /// Creates a new `rows x columns` matrix, initially empty.
         .               pub fn new(num_rows: usize, num_columns: usize) -> BitMatrix<R, C> {
         .                   // For every element, we need one bit for every other
         .                   // element. Round up to an even number of words.
         .                   let words_per_row = num_words(num_columns);
     1,336 ( 0.00%)          BitMatrix {
         .                       num_rows,
         .                       num_columns,
       972 ( 0.00%)              words: vec![0; num_rows * words_per_row],
         .                       marker: PhantomData,
         .                   }
         .               }
         .           
         .               /// Creates a new matrix, with `row` used as the value for every row.
         .               pub fn from_row_n(row: &BitSet<C>, num_rows: usize) -> BitMatrix<R, C> {
         .                   let num_columns = row.domain_size();
         .                   let words_per_row = num_words(num_columns);
-- line 1020 ----------------------------------------
-- line 1029 ----------------------------------------
         .           
         .               pub fn rows(&self) -> impl Iterator<Item = R> {
         .                   (0..self.num_rows).map(R::new)
         .               }
         .           
         .               /// The range of bits for a given row.
         .               fn range(&self, row: R) -> (usize, usize) {
         .                   let words_per_row = num_words(self.num_columns);
    19,584 ( 0.00%)          let start = row.index() * words_per_row;
    16,566 ( 0.00%)          (start, start + words_per_row)
         .               }
         .           
         .               /// Sets the cell at `(row, column)` to true. Put another way, insert
         .               /// `column` to the bitset for `row`.
         .               ///
         .               /// Returns `true` if this changed the matrix.
         .               pub fn insert(&mut self, row: R, column: C) -> bool {
    10,502 ( 0.00%)          assert!(row.index() < self.num_rows && column.index() < self.num_columns);
         .                   let (start, _) = self.range(row);
         .                   let (word_index, mask) = word_index_and_mask(column);
         .                   let words = &mut self.words[..];
    10,530 ( 0.00%)          let word = words[start + word_index];
     4,212 ( 0.00%)          let new_word = word | mask;
     2,106 ( 0.00%)          words[start + word_index] = new_word;
     4,212 ( 0.00%)          word != new_word
         .               }
         .           
         .               /// Do the bits from `row` contain `column`? Put another way, is
         .               /// the matrix cell at `(row, column)` true?  Put yet another way,
         .               /// if the matrix represents (transitive) reachability, can
         .               /// `row` reach `column`?
       912 ( 0.00%)      pub fn contains(&self, row: R, column: C) -> bool {
     4,560 ( 0.00%)          assert!(row.index() < self.num_rows && column.index() < self.num_columns);
         .                   let (start, _) = self.range(row);
         .                   let (word_index, mask) = word_index_and_mask(column);
     4,560 ( 0.00%)          (self.words[start + word_index] & mask) != 0
     1,824 ( 0.00%)      }
         .           
         .               /// Returns those indices that are true in rows `a` and `b`. This
         .               /// is an *O*(*n*) operation where *n* is the number of elements
         .               /// (somewhat independent from the actual size of the
         .               /// intersection, in particular).
         .               pub fn intersect_rows(&self, row1: R, row2: R) -> Vec<C> {
         .                   assert!(row1.index() < self.num_rows && row2.index() < self.num_rows);
         .                   let (row1_start, row1_end) = self.range(row1);
-- line 1073 ----------------------------------------
-- line 1090 ----------------------------------------
         .           
         .               /// Adds the bits from row `read` to the bits from row `write`, and
         .               /// returns `true` if anything changed.
         .               ///
         .               /// This is used when computing transitive reachability because if
         .               /// you have an edge `write -> read`, because in that case
         .               /// `write` can reach everything that `read` can (and
         .               /// potentially more).
     2,078 ( 0.00%)      pub fn union_rows(&mut self, read: R, write: R) -> bool {
    10,530 ( 0.00%)          assert!(read.index() < self.num_rows && write.index() < self.num_rows);
     2,106 ( 0.00%)          let (read_start, read_end) = self.range(read);
         .                   let (write_start, write_end) = self.range(write);
         .                   let words = &mut self.words[..];
         .                   let mut changed = false;
         .                   for (read_index, write_index) in iter::zip(read_start..read_end, write_start..write_end) {
    10,754 ( 0.00%)              let word = words[write_index];
     6,318 ( 0.00%)              let new_word = word | words[read_index];
     2,106 ( 0.00%)              words[write_index] = new_word;
    10,558 ( 0.00%)              changed |= word != new_word;
         .                   }
         .                   changed
     6,234 ( 0.00%)      }
         .           
         .               /// Adds the bits from `with` to the bits from row `write`, and
         .               /// returns `true` if anything changed.
         .               pub fn union_row_with(&mut self, with: &BitSet<C>, write: R) -> bool {
         .                   assert!(write.index() < self.num_rows);
         .                   assert_eq!(with.domain_size(), self.num_columns);
         .                   let (write_start, write_end) = self.range(write);
         .                   let mut changed = false;
-- line 1119 ----------------------------------------
-- line 1209 ----------------------------------------
         .               /// Creates a new empty sparse bit matrix with no rows or columns.
         .               pub fn new(num_columns: usize) -> Self {
         .                   Self { num_columns, rows: IndexVec::new() }
         .               }
         .           
         .               fn ensure_row(&mut self, row: R) -> &mut HybridBitSet<C> {
         .                   // Instantiate any missing rows up to and including row `row` with an empty HybridBitSet.
         .                   // Then replace row `row` with a full HybridBitSet if necessary.
       959 ( 0.00%)          self.rows.get_or_insert_with(row, || HybridBitSet::new_empty(self.num_columns))
         .               }
         .           
         .               /// Sets the cell at `(row, column)` to true. Put another way, insert
         .               /// `column` to the bitset for `row`.
         .               ///
         .               /// Returns `true` if this changed the matrix.
         .               pub fn insert(&mut self, row: R, column: C) -> bool {
     1,164 ( 0.00%)          self.ensure_row(row).insert(column)
         .               }
         .           
         .               /// Sets the cell at `(row, column)` to false. Put another way, delete
         .               /// `column` from the bitset for `row`. Has no effect if `row` does not
         .               /// exist.
         .               ///
         .               /// Returns `true` if this changed the matrix.
         .               pub fn remove(&mut self, row: R, column: C) -> bool {
-- line 1233 ----------------------------------------
-- line 1255 ----------------------------------------
         .           
         .               /// Adds the bits from row `read` to the bits from row `write`, and
         .               /// returns `true` if anything changed.
         .               ///
         .               /// This is used when computing transitive reachability because if
         .               /// you have an edge `write -> read`, because in that case
         .               /// `write` can reach everything that `read` can (and
         .               /// potentially more).
    71,750 ( 0.00%)      pub fn union_rows(&mut self, read: R, write: R) -> bool {
    10,250 ( 0.00%)          if read == write || self.row(read).is_none() {
         .                       return false;
         .                   }
         .           
         .                   self.ensure_row(write);
     4,587 ( 0.00%)          if let (Some(read_row), Some(write_row)) = self.rows.pick2_mut(read, write) {
         .                       write_row.union(read_row)
         .                   } else {
         .                       unreachable!()
         .                   }
    92,250 ( 0.00%)      }
         .           
         .               /// Insert all bits in the given row.
         .               pub fn insert_all_into_row(&mut self, row: R) {
         .                   self.ensure_row(row).insert_all();
         .               }
         .           
         .               pub fn rows(&self) -> impl Iterator<Item = R> {
         .                   self.rows.indices()
-- line 1282 ----------------------------------------
-- line 1284 ----------------------------------------
         .           
         .               /// Iterates through all the columns set to true in a given row of
         .               /// the matrix.
         .               pub fn iter<'a>(&'a self, row: R) -> impl Iterator<Item = C> + 'a {
         .                   self.row(row).into_iter().flat_map(|r| r.iter())
         .               }
         .           
         .               pub fn row(&self, row: R) -> Option<&HybridBitSet<C>> {
    26,194 ( 0.00%)          if let Some(Some(row)) = self.rows.get(row) { Some(row) } else { None }
         .               }
         .           
         .               /// Interescts `row` with `set`. `set` can be either `BitSet` or
         .               /// `HybridBitSet`. Has no effect if `row` does not exist.
         .               ///
         .               /// Returns true if the row was changed.
         .               pub fn intersect_row<Set>(&mut self, row: R, set: &Set) -> bool
         .               where
-- line 1300 ----------------------------------------
-- line 1329 ----------------------------------------
         .                   HybridBitSet<C>: BitRelations<Set>,
         .               {
         .                   self.ensure_row(row).union(set)
         .               }
         .           }
         .           
         .           #[inline]
         .           fn num_words<T: Idx>(domain_size: T) -> usize {
   667,259 ( 0.02%)      (domain_size.index() + WORD_BITS - 1) / WORD_BITS
         .           }
         .           
         .           #[inline]
         .           fn word_index_and_mask<T: Idx>(elem: T) -> (usize, Word) {
         .               let elem = elem.index();
 4,295,941 ( 0.11%)      let word_index = elem / WORD_BITS;
 1,044,973 ( 0.03%)      let mask = 1 << (elem % WORD_BITS);
         .               (word_index, mask)
         .           }
         .           
         .           #[inline]
         .           fn max_bit(word: Word) -> usize {
         2 ( 0.00%)      WORD_BITS - 1 - word.leading_zeros() as usize
         .           }
         .           
         .           /// Integral type used to represent the bit set.
         .           pub trait FiniteBitSetTy:
         .               BitAnd<Output = Self>
         .               + BitAndAssign
         .               + BitOrAssign
         .               + Clone
-- line 1358 ----------------------------------------

 1,422,338 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/allocation.rs
--------------------------------------------------------------------------------
Ir                 

-- line 18 ----------------------------------------
        .           };
        .           use crate::ty;
        .           
        .           /// This type represents an Allocation in the Miri/CTFE core engine.
        .           ///
        .           /// Its public API is rather low-level, working directly with allocation offsets and a custom error
        .           /// type to account for the lack of an AllocId on this level. The Miri/CTFE core engine `memory`
        .           /// module provides higher-level access.
   36,533 ( 0.00%)  #[derive(Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct Allocation<Tag = AllocId, Extra = ()> {
        .               /// The actual bytes of the allocation.
        .               /// Note that the bytes of a pointer represent the offset of the pointer.
    5,229 ( 0.00%)      bytes: Box<[u8]>,
        .               /// Maps from byte addresses to extra data for each pointer.
        .               /// Only the first byte of a pointer is inserted into the map; i.e.,
        .               /// every entry in this map applies to `pointer_size` consecutive bytes starting
        .               /// at the given offset.
      585 ( 0.00%)      relocations: Relocations<Tag>,
        .               /// Denotes which part of this allocation is initialized.
        .               init_mask: InitMask,
        .               /// The alignment of the allocation to detect unaligned reads.
        .               /// (`Align` guarantees that this is a power of two.)
    2,327 ( 0.00%)      pub align: Align,
        .               /// `true` if the allocation is mutable.
        .               /// Also used by codegen to determine if a static should be put into mutable memory,
        .               /// which happens for `static mut` and `static` with interior mutability.
    1,163 ( 0.00%)      pub mutability: Mutability,
        .               /// Extra state for the machine.
        .               pub extra: Extra,
        .           }
        .           
        .           /// We have our own error type that does not know about the `AllocId`; that information
        .           /// is added when converting to `InterpError`.
        .           #[derive(Debug)]
        .           pub enum AllocError {
-- line 53 ----------------------------------------
-- line 91 ----------------------------------------
        .           impl AllocRange {
        .               #[inline(always)]
        .               pub fn end(self) -> Size {
        .                   self.start + self.size // This does overflow checking.
        .               }
        .           
        .               /// Returns the `subrange` within this range; panics if it is not a subrange.
        .               #[inline]
  103,707 ( 0.00%)      pub fn subrange(self, subrange: AllocRange) -> AllocRange {
        .                   let sub_start = self.start + subrange.start;
        .                   let range = alloc_range(sub_start, subrange.size);
  103,707 ( 0.00%)          assert!(range.end() <= self.end(), "access outside the bounds for given AllocRange");
        .                   range
  311,121 ( 0.01%)      }
        .           }
        .           
        .           // The constructors are all without extra; the extra gets added by a machine hook later.
        .           impl<Tag> Allocation<Tag> {
        .               /// Creates an allocation initialized by the given bytes
        .               pub fn from_bytes<'a>(
        .                   slice: impl Into<Cow<'a, [u8]>>,
        .                   align: Align,
        .                   mutability: Mutability,
        .               ) -> Self {
        .                   let bytes = Box::<[u8]>::from(slice.into());
        .                   let size = Size::from_bytes(bytes.len());
    2,488 ( 0.00%)          Self {
        .                       bytes,
        .                       relocations: Relocations::new(),
      933 ( 0.00%)              init_mask: InitMask::new(size, true),
        .                       align,
        .                       mutability,
        .                       extra: (),
        .                   }
        .               }
        .           
        .               pub fn from_bytes_byte_aligned_immutable<'a>(slice: impl Into<Cow<'a, [u8]>>) -> Self {
        .                   Allocation::from_bytes(slice, Align::ONE, Mutability::Not)
        .               }
        .           
        .               /// Try to create an Allocation of `size` bytes, failing if there is not enough memory
        .               /// available to the compiler to do so.
  555,610 ( 0.01%)      pub fn uninit(size: Size, align: Align, panic_on_fail: bool) -> InterpResult<'static, Self> {
        .                   let bytes = Box::<[u8]>::try_new_zeroed_slice(size.bytes_usize()).map_err(|_| {
        .                       // This results in an error that can happen non-deterministically, since the memory
        .                       // available to the compiler can change between runs. Normally queries are always
        .                       // deterministic. However, we can be non-determinstic here because all uses of const
        .                       // evaluation (including ConstProp!) will make compilation fail (via hard error
        .                       // or ICE) upon encountering a `MemoryExhausted` error.
        .                       if panic_on_fail {
        .                           panic!("Allocation::uninit called with panic_on_fail had allocation failure")
-- line 141 ----------------------------------------
-- line 142 ----------------------------------------
        .                       }
        .                       ty::tls::with(|tcx| {
        .                           tcx.sess.delay_span_bug(DUMMY_SP, "exhausted memory during interpreation")
        .                       });
        .                       InterpError::ResourceExhaustion(ResourceExhaustionInfo::MemoryExhausted)
        .                   })?;
        .                   // SAFETY: the box was zero-allocated, which is a valid initial value for Box<[u8]>
        .                   let bytes = unsafe { bytes.assume_init() };
  707,140 ( 0.02%)          Ok(Allocation {
        .                       bytes,
        .                       relocations: Relocations::new(),
  151,530 ( 0.00%)              init_mask: InitMask::new(size, false),
        .                       align,
        .                       mutability: Mutability::Mut,
        .                       extra: (),
        .                   })
  454,590 ( 0.01%)      }
        .           }
        .           
        .           impl Allocation {
        .               /// Convert Tag and add Extra fields
        .               pub fn convert_tag_add_extra<Tag, Extra>(
        .                   self,
        .                   cx: &impl HasDataLayout,
        .                   extra: Extra,
-- line 166 ----------------------------------------
-- line 194 ----------------------------------------
        .           
        .           /// Raw accessors. Provide access to otherwise private bytes.
        .           impl<Tag, Extra> Allocation<Tag, Extra> {
        .               pub fn len(&self) -> usize {
        .                   self.bytes.len()
        .               }
        .           
        .               pub fn size(&self) -> Size {
  275,327 ( 0.01%)          Size::from_bytes(self.len())
        .               }
        .           
        .               /// Looks at a slice which may describe uninitialized bytes or describe a relocation. This differs
        .               /// from `get_bytes_with_uninit_and_ptr` in that it does no relocation checks (even on the
        .               /// edges) at all.
        .               /// This must not be used for reads affecting the interpreter execution.
        .               pub fn inspect_with_uninit_and_ptr_outside_interpreter(&self, range: Range<usize>) -> &[u8] {
        .                   &self.bytes[range]
-- line 210 ----------------------------------------
-- line 227 ----------------------------------------
        .               /// or pointer bytes. You should never call this, call `get_bytes` or
        .               /// `get_bytes_with_uninit_and_ptr` instead,
        .               ///
        .               /// This function also guarantees that the resulting pointer will remain stable
        .               /// even when new allocations are pushed to the `HashMap`. `copy_repeatedly` relies
        .               /// on that.
        .               ///
        .               /// It is the caller's responsibility to check bounds and alignment beforehand.
1,001,784 ( 0.03%)      fn get_bytes_internal(
        .                   &self,
        .                   cx: &impl HasDataLayout,
        .                   range: AllocRange,
        .                   check_init_and_ptr: bool,
        .               ) -> AllocResult<&[u8]> {
  166,964 ( 0.00%)          if check_init_and_ptr {
    2,280 ( 0.00%)              self.check_init(range)?;
        .                       self.check_relocations(cx, range)?;
        .                   } else {
        .                       // We still don't want relocations on the *edges*.
        .                       self.check_relocation_edges(cx, range)?;
        .                   }
        .           
  333,928 ( 0.01%)          Ok(&self.bytes[range.start.bytes_usize()..range.end().bytes_usize()])
  751,338 ( 0.02%)      }
        .           
        .               /// Checks that these bytes are initialized and not pointer bytes, and then return them
        .               /// as a slice.
        .               ///
        .               /// It is the caller's responsibility to check bounds and alignment beforehand.
        .               /// Most likely, you want to use the `PlaceTy` and `OperandTy`-based methods
        .               /// on `InterpCx` instead.
        .               #[inline]
        .               pub fn get_bytes(&self, cx: &impl HasDataLayout, range: AllocRange) -> AllocResult<&[u8]> {
    1,140 ( 0.00%)          self.get_bytes_internal(cx, range, true)
        .               }
        .           
        .               /// It is the caller's responsibility to handle uninitialized and pointer bytes.
        .               /// However, this still checks that there are no relocations on the *edges*.
        .               ///
        .               /// It is the caller's responsibility to check bounds and alignment beforehand.
        .               #[inline]
        .               pub fn get_bytes_with_uninit_and_ptr(
        .                   &self,
        .                   cx: &impl HasDataLayout,
        .                   range: AllocRange,
        .               ) -> AllocResult<&[u8]> {
  408,368 ( 0.01%)          self.get_bytes_internal(cx, range, false)
        .               }
        .           
        .               /// Just calling this already marks everything as defined and removes relocations,
        .               /// so be sure to actually put data there!
        .               ///
        .               /// It is the caller's responsibility to check bounds and alignment beforehand.
        .               /// Most likely, you want to use the `PlaceTy` and `OperandTy`-based methods
        .               /// on `InterpCx` instead.
  675,037 ( 0.02%)      pub fn get_bytes_mut(
        .                   &mut self,
        .                   cx: &impl HasDataLayout,
        .                   range: AllocRange,
        .               ) -> AllocResult<&mut [u8]> {
        .                   self.mark_init(range, true);
  306,835 ( 0.01%)          self.clear_relocations(cx, range)?;
        .           
  245,468 ( 0.01%)          Ok(&mut self.bytes[range.start.bytes_usize()..range.end().bytes_usize()])
  490,936 ( 0.01%)      }
        .           
        .               /// A raw pointer variant of `get_bytes_mut` that avoids invalidating existing aliases into this memory.
  446,292 ( 0.01%)      pub fn get_bytes_mut_ptr(
        .                   &mut self,
        .                   cx: &impl HasDataLayout,
        .                   range: AllocRange,
        .               ) -> AllocResult<*mut [u8]> {
        .                   self.mark_init(range, true);
  202,860 ( 0.01%)          self.clear_relocations(cx, range)?;
        .           
   81,144 ( 0.00%)          assert!(range.end().bytes_usize() <= self.bytes.len()); // need to do our own bounds-check
        .                   let begin_ptr = self.bytes.as_mut_ptr().wrapping_add(range.start.bytes_usize());
   81,144 ( 0.00%)          let len = range.end().bytes_usize() - range.start.bytes_usize();
  162,288 ( 0.00%)          Ok(ptr::slice_from_raw_parts_mut(begin_ptr, len))
  324,576 ( 0.01%)      }
        .           }
        .           
        .           /// Reading and writing.
        .           impl<Tag: Provenance, Extra> Allocation<Tag, Extra> {
        .               /// Validates that `ptr.offset` and `ptr.offset + size` do not point to the middle of a
        .               /// relocation. If `allow_uninit_and_ptr` is `false`, also enforces that the memory in the
        .               /// given range contains neither relocations nor uninitialized bytes.
        .               pub fn check_bytes(
-- line 314 ----------------------------------------
-- line 315 ----------------------------------------
        .                   &self,
        .                   cx: &impl HasDataLayout,
        .                   range: AllocRange,
        .                   allow_uninit_and_ptr: bool,
        .               ) -> AllocResult {
        .                   // Check bounds and relocations on the edges.
        .                   self.get_bytes_with_uninit_and_ptr(cx, range)?;
        .                   // Check uninit and ptr.
   19,842 ( 0.00%)          if !allow_uninit_and_ptr {
   39,684 ( 0.00%)              self.check_init(range)?;
        .                       self.check_relocations(cx, range)?;
        .                   }
        .                   Ok(())
        .               }
        .           
        .               /// Reads a *non-ZST* scalar.
        .               ///
        .               /// ZSTs can't be read because in order to obtain a `Pointer`, we need to check
        .               /// for ZSTness anyway due to integer pointers being valid for ZSTs.
        .               ///
        .               /// It is the caller's responsibility to check bounds and alignment beforehand.
        .               /// Most likely, you want to call `InterpCx::read_scalar` instead of this method.
  421,447 ( 0.01%)      pub fn read_scalar(
        .                   &self,
        .                   cx: &impl HasDataLayout,
        .                   range: AllocRange,
        .               ) -> AllocResult<ScalarMaybeUninit<Tag>> {
        .                   // `get_bytes_with_uninit_and_ptr` tests relocation edges.
        .                   // We deliberately error when loading data that partially has provenance, or partially
        .                   // initialized data (that's the check below), into a scalar. The LLVM semantics of this are
        .                   // unclear so we are conservative. See <https://github.com/rust-lang/rust/issues/69488> for
-- line 345 ----------------------------------------
-- line 348 ----------------------------------------
        .                   // Uninit check happens *after* we established that the alignment is correct.
        .                   // We must not return `Ok()` for unaligned pointers!
        .                   if self.is_init(range).is_err() {
        .                       // This inflates uninitialized bytes to the entire scalar, even if only a few
        .                       // bytes are uninitialized.
        .                       return Ok(ScalarMaybeUninit::Uninit);
        .                   }
        .                   // Now we do the actual reading.
   32,419 ( 0.00%)          let bits = read_target_uint(cx.data_layout().endian, bytes).unwrap();
        .                   // See if we got a pointer.
   32,419 ( 0.00%)          if range.size != cx.data_layout().pointer_size {
        .                       // Not a pointer.
        .                       // *Now*, we better make sure that the inside is free of relocations too.
        .                       self.check_relocations(cx, range)?;
        .                   } else {
        .                       // Maybe a pointer.
        .                       if let Some(&prov) = self.relocations.get(&range.start) {
        .                           let ptr = Pointer::new(prov, Size::from_bytes(bits));
    5,770 ( 0.00%)                  return Ok(ScalarMaybeUninit::from_pointer(ptr, cx));
        .                       }
        .                   }
        .                   // We don't. Just return the bits.
  187,590 ( 0.00%)          Ok(ScalarMaybeUninit::Scalar(Scalar::from_uint(bits, range.size)))
  291,771 ( 0.01%)      }
        .           
        .               /// Writes a *non-ZST* scalar.
        .               ///
        .               /// ZSTs can't be read because in order to obtain a `Pointer`, we need to check
        .               /// for ZSTness anyway due to integer pointers being valid for ZSTs.
        .               ///
        .               /// It is the caller's responsibility to check bounds and alignment beforehand.
        .               /// Most likely, you want to call `InterpCx::write_scalar` instead of this method.
  429,569 ( 0.01%)      pub fn write_scalar(
        .                   &mut self,
        .                   cx: &impl HasDataLayout,
        .                   range: AllocRange,
        .                   val: ScalarMaybeUninit<Tag>,
        .               ) -> AllocResult {
   61,367 ( 0.00%)          assert!(self.mutability == Mutability::Mut);
        .           
  184,101 ( 0.00%)          let val = match val {
        .                       ScalarMaybeUninit::Scalar(scalar) => scalar,
        .                       ScalarMaybeUninit::Uninit => {
        .                           self.mark_init(range, false);
        .                           return Ok(());
        .                       }
        .                   };
        .           
        .                   // `to_bits_or_ptr_internal` is the right method because we just want to store this data
        .                   // as-is into memory.
  245,468 ( 0.01%)          let (bytes, provenance) = match val.to_bits_or_ptr_internal(range.size) {
        .                       Err(val) => {
        .                           let (provenance, offset) = val.into_parts();
        .                           (u128::from(offset.bytes()), Some(provenance))
        .                       }
        .                       Ok(data) => (data, None),
        .                   };
        .           
  184,101 ( 0.00%)          let endian = cx.data_layout().endian;
  184,101 ( 0.00%)          let dst = self.get_bytes_mut(cx, range)?;
        .                   write_target_uint(endian, dst, bytes).unwrap();
        .           
        .                   // See if we have to also write a relocation.
  183,524 ( 0.00%)          if let Some(provenance) = provenance {
    2,308 ( 0.00%)              self.relocations.0.insert(range.start, provenance);
        .                   }
        .           
        .                   Ok(())
  552,303 ( 0.01%)      }
        .           }
        .           
        .           /// Relocations.
        .           impl<Tag: Copy, Extra> Allocation<Tag, Extra> {
        .               /// Returns all relocations overlapping with the given pointer-offset pair.
  925,095 ( 0.02%)      pub fn get_relocations(&self, cx: &impl HasDataLayout, range: AllocRange) -> &[(Size, Tag)] {
        .                   // We have to go back `pointer_size - 1` bytes, as that one would still overlap with
        .                   // the beginning of this range.
1,046,811 ( 0.03%)          let start = range.start.bytes().saturating_sub(cx.data_layout().pointer_size.bytes() - 1);
        .                   self.relocations.range(Size::from_bytes(start)..range.end())
1,233,460 ( 0.03%)      }
        .           
        .               /// Checks that there are no relocations overlapping with the given range.
        .               #[inline(always)]
        .               fn check_relocations(&self, cx: &impl HasDataLayout, range: AllocRange) -> AllocResult {
1,238,556 ( 0.03%)          if self.get_relocations(cx, range).is_empty() {
        .                       Ok(())
        .                   } else {
        .                       Err(AllocError::ReadPointerAsBytes)
        .                   }
        .               }
        .           
        .               /// Removes all relocations inside the given range.
        .               /// If there are relocations overlapping with the edges, they
        .               /// are removed as well *and* the bytes they cover are marked as
        .               /// uninitialized. This is a somewhat odd "spooky action at a distance",
        .               /// but it allows strictly more code to run than if we would just error
        .               /// immediately in that case.
1,121,329 ( 0.03%)      fn clear_relocations(&mut self, cx: &impl HasDataLayout, range: AllocRange) -> AllocResult
        .               where
        .                   Tag: Provenance,
        .               {
        .                   // Find the start and end of the given range and its outermost relocations.
        .                   let (first, last) = {
        .                       // Find all relocations overlapping the given range.
  509,695 ( 0.01%)              let relocations = self.get_relocations(cx, range);
  101,939 ( 0.00%)              if relocations.is_empty() {
        .                           return Ok(());
        .                       }
        .           
        .                       (
        .                           relocations.first().unwrap().0,
        .                           relocations.last().unwrap().0 + cx.data_layout().pointer_size,
        .                       )
        .                   };
-- line 461 ----------------------------------------
-- line 478 ----------------------------------------
        .                       }
        .                       self.init_mask.set_range(end, last, false);
        .                   }
        .           
        .                   // Forget all the relocations.
        .                   self.relocations.0.remove_range(first..last);
        .           
        .                   Ok(())
  713,573 ( 0.02%)      }
        .           
        .               /// Errors if there are relocations overlapping with the edges of the
        .               /// given memory range.
        .               #[inline]
        .               fn check_relocation_edges(&self, cx: &impl HasDataLayout, range: AllocRange) -> AllocResult {
        .                   self.check_relocations(cx, alloc_range(range.start, Size::ZERO))?;
        .                   self.check_relocations(cx, alloc_range(range.end(), Size::ZERO))?;
        .                   Ok(())
-- line 494 ----------------------------------------
-- line 496 ----------------------------------------
        .           }
        .           
        .           /// "Relocations" stores the provenance information of pointers stored in memory.
        .           #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           pub struct Relocations<Tag = AllocId>(SortedMap<Size, Tag>);
        .           
        .           impl<Tag> Relocations<Tag> {
        .               pub fn new() -> Self {
  101,642 ( 0.00%)          Relocations(SortedMap::new())
        .               }
        .           
        .               // The caller must guarantee that the given relocations are already sorted
        .               // by address and contain no duplicates.
        .               pub fn from_presorted(r: Vec<(Size, Tag)>) -> Self {
        .                   Relocations(SortedMap::from_presorted_elements(r))
        .               }
        .           }
-- line 512 ----------------------------------------
-- line 520 ----------------------------------------
        .           }
        .           
        .           /// A partial, owned list of relocations to transfer into another allocation.
        .           pub struct AllocationRelocations<Tag> {
        .               relative_relocations: Vec<(Size, Tag)>,
        .           }
        .           
        .           impl<Tag: Copy, Extra> Allocation<Tag, Extra> {
  405,720 ( 0.01%)      pub fn prepare_relocation_copy(
        .                   &self,
        .                   cx: &impl HasDataLayout,
        .                   src: AllocRange,
        .                   dest: Size,
        .                   count: u64,
        .               ) -> AllocationRelocations<Tag> {
        .                   let relocations = self.get_relocations(cx, src);
   40,572 ( 0.00%)          if relocations.is_empty() {
   80,336 ( 0.00%)              return AllocationRelocations { relative_relocations: Vec::new() };
        .                   }
        .           
      404 ( 0.00%)          let size = src.size;
    1,212 ( 0.00%)          let mut new_relocations = Vec::with_capacity(relocations.len() * (count as usize));
        .           
      404 ( 0.00%)          for i in 0..count {
        .                       new_relocations.extend(relocations.iter().map(|&(offset, reloc)| {
        .                           // compute offset for current repetition
    4,512 ( 0.00%)                  let dest_offset = dest + size * i; // `Size` operations
        .                           (
        .                               // shift offsets from source allocation to destination allocation
    1,128 ( 0.00%)                      (offset + dest_offset) - src.start, // `Size` operations
        .                               reloc,
        .                           )
        .                       }));
        .                   }
        .           
    2,828 ( 0.00%)          AllocationRelocations { relative_relocations: new_relocations }
  365,148 ( 0.01%)      }
        .           
        .               /// Applies a relocation copy.
        .               /// The affected range, as defined in the parameters to `prepare_relocation_copy` is expected
        .               /// to be clear of relocations.
  284,004 ( 0.01%)      pub fn mark_relocation_range(&mut self, relocations: AllocationRelocations<Tag>) {
  162,288 ( 0.00%)          self.relocations.0.insert_presorted(relocations.relative_relocations);
  324,576 ( 0.01%)      }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Uninitialized byte tracking
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           type Block = u64;
        .           
-- line 571 ----------------------------------------
-- line 582 ----------------------------------------
        .               pub const BLOCK_SIZE: u64 = 64;
        .           
        .               #[inline]
        .               fn bit_index(bits: Size) -> (usize, usize) {
        .                   // BLOCK_SIZE is the number of bits that can fit in a `Block`.
        .                   // Each bit in a `Block` represents the initialization state of one byte of an allocation,
        .                   // so we use `.bytes()` here.
        .                   let bits = bits.bytes();
1,027,308 ( 0.03%)          let a = bits / InitMask::BLOCK_SIZE;
  388,620 ( 0.01%)          let b = bits % InitMask::BLOCK_SIZE;
        .                   (usize::try_from(a).unwrap(), usize::try_from(b).unwrap())
        .               }
        .           
        .               #[inline]
        .               fn size_from_bit_index(block: impl TryInto<u64>, bit: impl TryInto<u64>) -> Size {
        .                   let block = block.try_into().ok().unwrap();
        .                   let bit = bit.try_into().ok().unwrap();
   73,492 ( 0.00%)          Size::from_bytes(block * InitMask::BLOCK_SIZE + bit)
        .               }
        .           
  203,284 ( 0.01%)      pub fn new(size: Size, state: bool) -> Self {
  101,642 ( 0.00%)          let mut m = InitMask { blocks: vec![], len: Size::ZERO };
   50,821 ( 0.00%)          m.grow(size, state);
        .                   m
  254,105 ( 0.01%)      }
        .           
  815,512 ( 0.02%)      pub fn set_range(&mut self, start: Size, end: Size, new_state: bool) {
  203,878 ( 0.01%)          let len = self.len;
  101,939 ( 0.00%)          if end > len {
        .                       self.grow(end - len, new_state);
        .                   }
1,019,390 ( 0.03%)          self.set_range_inbounds(start, end, new_state);
        .               }
        .           
  777,240 ( 0.02%)      pub fn set_range_inbounds(&mut self, start: Size, end: Size, new_state: bool) {
        .                   let (blocka, bita) = Self::bit_index(start);
        .                   let (blockb, bitb) = Self::bit_index(end);
  388,620 ( 0.01%)          if blocka == blockb {
        .                       // First set all bits except the first `bita`,
        .                       // then unset the last `64 - bitb` bits.
  385,846 ( 0.01%)              let range = if bitb == 0 {
        .                           u64::MAX << bita
        .                       } else {
1,350,461 ( 0.03%)                  (u64::MAX << bita) & (u64::MAX >> (64 - bitb))
        .                       };
  385,846 ( 0.01%)              if new_state {
  142,006 ( 0.00%)                  self.blocks[blocka] |= range;
        .                       } else {
  101,834 ( 0.00%)                  self.blocks[blocka] &= !range;
        .                       }
        .                       return;
        .                   }
        .                   // across block boundaries
    2,774 ( 0.00%)          if new_state {
        .                       // Set `bita..64` to `1`.
    3,915 ( 0.00%)              self.blocks[blocka] |= u64::MAX << bita;
        .                       // Set `0..bitb` to `1`.
    2,610 ( 0.00%)              if bitb != 0 {
    3,860 ( 0.00%)                  self.blocks[blockb] |= u64::MAX >> (64 - bitb);
        .                       }
        .                       // Fill in all the other blocks (much faster than one bit at a time).
        .                       for block in (blocka + 1)..blockb {
    1,142 ( 0.00%)                  self.blocks[block] = u64::MAX;
        .                       }
        .                   } else {
        .                       // Set `bita..64` to `0`.
      328 ( 0.00%)              self.blocks[blocka] &= !(u64::MAX << bita);
        .                       // Set `0..bitb` to `0`.
      164 ( 0.00%)              if bitb != 0 {
      108 ( 0.00%)                  self.blocks[blockb] &= !(u64::MAX >> (64 - bitb));
        .                       }
        .                       // Fill in all the other blocks (much faster than one bit at a time).
        .                       for block in (blocka + 1)..blockb {
    1,232 ( 0.00%)                  self.blocks[block] = 0;
        .                       }
        .                   }
  388,620 ( 0.01%)      }
        .           
        .               #[inline]
        .               pub fn get(&self, i: Size) -> bool {
        .                   let (block, bit) = Self::bit_index(i);
  284,004 ( 0.01%)          (self.blocks[block] & (1 << bit)) != 0
        .               }
        .           
        .               #[inline]
        .               pub fn set(&mut self, i: Size, new_state: bool) {
        .                   let (block, bit) = Self::bit_index(i);
        .                   self.set_bit(block, bit, new_state);
        .               }
        .           
-- line 671 ----------------------------------------
-- line 673 ----------------------------------------
        .               fn set_bit(&mut self, block: usize, bit: usize, new_state: bool) {
        .                   if new_state {
        .                       self.blocks[block] |= 1 << bit;
        .                   } else {
        .                       self.blocks[block] &= !(1 << bit);
        .                   }
        .               }
        .           
  304,926 ( 0.01%)      pub fn grow(&mut self, amount: Size, new_state: bool) {
  101,642 ( 0.00%)          if amount.bytes() == 0 {
        .                       return;
        .                   }
        .                   let unused_trailing_bits =
  406,552 ( 0.01%)              u64::try_from(self.blocks.len()).unwrap() * Self::BLOCK_SIZE - self.len.bytes();
  101,638 ( 0.00%)          if amount.bytes() > unused_trailing_bits {
  152,457 ( 0.00%)              let additional_blocks = amount.bytes() / Self::BLOCK_SIZE + 1;
        .                       self.blocks.extend(
        .                           // FIXME(oli-obk): optimize this by repeating `new_state as Block`.
        .                           iter::repeat(0).take(usize::try_from(additional_blocks).unwrap()),
        .                       );
        .                   }
   50,819 ( 0.00%)          let start = self.len;
        .                   self.len += amount;
  457,371 ( 0.01%)          self.set_range_inbounds(start, start + amount, new_state); // `Size` operation
       14 ( 0.00%)      }
        .           
        .               /// Returns the index of the first bit in `start..end` (end-exclusive) that is equal to is_init.
  168,924 ( 0.00%)      fn find_bit(&self, start: Size, end: Size, is_init: bool) -> Option<Size> {
        .                   /// A fast implementation of `find_bit`,
        .                   /// which skips over an entire block at a time if it's all 0s (resp. 1s),
        .                   /// and finds the first 1 (resp. 0) bit inside a block using `trailing_zeros` instead of a loop.
        .                   ///
        .                   /// Note that all examples below are written with 8 (instead of 64) bit blocks for simplicity,
        .                   /// and with the least significant bit (and lowest block) first:
        .                   ///
        .                   ///          00000000|00000000
-- line 708 ----------------------------------------
-- line 728 ----------------------------------------
        .                           //   start_bit = 3
        .                           //   is_init = false
        .                           // Note that, for the examples in this function, the most significant bit is written first,
        .                           // which is backwards compared to the comments in `find_bit`/`find_bit_fast`.
        .           
        .                           // Invert bits so we're always looking for the first set bit.
        .                           //        ! 0b00111011
        .                           //   bits = 0b11000100
  337,848 ( 0.01%)                  let bits = if is_init { bits } else { !bits };
        .                           // Mask off unused start bits.
        .                           //          0b11000100
        .                           //        & 0b11111000
        .                           //   bits = 0b11000000
  253,386 ( 0.01%)                  let bits = bits & (!0 << start_bit);
        .                           // Find set bit, if any.
        .                           //   bit = trailing_zeros(0b11000000)
        .                           //   bit = 6
  172,765 ( 0.00%)                  if bits == 0 {
        .                               None
        .                           } else {
        .                               let bit = bits.trailing_zeros();
        .                               Some(InitMask::size_from_bit_index(block, bit))
        .                           }
        .                       }
        .           
   84,462 ( 0.00%)              if start >= end {
        .                           return None;
        .                       }
        .           
        .                       // Convert `start` and `end` to block indexes and bit indexes within each block.
        .                       // We must convert `end` to an inclusive bound to handle block boundaries correctly.
        .                       //
        .                       // For example:
        .                       //
-- line 761 ----------------------------------------
-- line 819 ----------------------------------------
        .                       // The block marked (3) in this example is the first block that will be handled by this loop,
        .                       // and it will be skipped for that reason:
        .                       //
        .                       //                   (3)
        .                       //                --------
        .                       //   (e) 01000000|00000000|00000001
        .                       //          ^~~~~~~~~~~~~~~~~~^
        .                       //        start              end
   22,352 ( 0.00%)              if start_block < end_block_inclusive {
        .                           // This loop is written in a specific way for performance.
        .                           // Notably: `..end_block_inclusive + 1` is used for an inclusive range instead of `..=end_block_inclusive`,
        .                           // and `.zip(start_block + 1..)` is used to track the index instead of `.enumerate().skip().take()`,
        .                           // because both alternatives result in significantly worse codegen.
        .                           // `end_block_inclusive + 1` is guaranteed not to wrap, because `end_block_inclusive <= end / BLOCK_SIZE`,
        .                           // and `BLOCK_SIZE` (the number of bits per block) will always be at least 8 (1 byte).
      399 ( 0.00%)                  for (&bits, block) in init_mask.blocks[start_block + 1..end_block_inclusive + 1]
        .                               .iter()
        .                               .zip(start_block + 1..)
        .                           {
        .                               if let Some(i) = search_block(bits, block, 0, is_init) {
        .                                   // If this is the last block, we may find a matching bit after `end`.
        .                                   //
        .                                   // For example, we shouldn't successfully find bit (4), because it's after `end`:
        .                                   //
-- line 842 ----------------------------------------
-- line 879 ----------------------------------------
        .                       "optimized implementation of find_bit is wrong for start={:?} end={:?} is_init={} init_mask={:#?}",
        .                       start,
        .                       end,
        .                       is_init,
        .                       self
        .                   );
        .           
        .                   result
  168,924 ( 0.00%)      }
        .           }
        .           
        .           /// A contiguous chunk of initialized or uninitialized memory.
        .           pub enum InitChunk {
        .               Init(Range<Size>),
        .               Uninit(Range<Size>),
        .           }
        .           
-- line 895 ----------------------------------------
-- line 913 ----------------------------------------
        .           
        .           impl InitMask {
        .               /// Checks whether the range `start..end` (end-exclusive) is entirely initialized.
        .               ///
        .               /// Returns `Ok(())` if it's initialized. Otherwise returns a range of byte
        .               /// indexes for the first contiguous span of the uninitialized access.
        .               #[inline]
        .               pub fn is_range_initialized(&self, start: Size, end: Size) -> Result<(), Range<Size>> {
   53,401 ( 0.00%)          if end > self.len {
        .                       return Err(self.len..end);
        .                   }
        .           
  214,550 ( 0.01%)          let uninit_start = self.find_bit(start, end, false);
        .           
   85,820 ( 0.00%)          match uninit_start {
        .                       Some(uninit_start) => {
        .                           let uninit_end = self.find_bit(uninit_start, end, true).unwrap_or(end);
        .                           Err(uninit_start..uninit_end)
        .                       }
        .                       None => Ok(()),
        .                   }
        .               }
        .           
-- line 935 ----------------------------------------
-- line 938 ----------------------------------------
        .               ///
        .               /// The iterator guarantees the following:
        .               /// - Chunks are nonempty.
        .               /// - Chunks are adjacent (each range's start is equal to the previous range's end).
        .               /// - Chunks span exactly `start..end` (the first starts at `start`, the last ends at `end`).
        .               /// - Chunks alternate between [`InitChunk::Init`] and [`InitChunk::Uninit`].
        .               #[inline]
        .               pub fn range_as_init_chunks(&self, start: Size, end: Size) -> InitChunkIter<'_> {
   40,572 ( 0.00%)          assert!(end <= self.len);
        .           
   40,572 ( 0.00%)          let is_init = if start < end {
        .                       self.get(start)
        .                   } else {
        .                       // `start..end` is empty: there are no chunks, so use some arbitrary value
        .                       false
        .                   };
        .           
        .                   InitChunkIter { init_mask: self, is_init, start, end }
        .               }
-- line 956 ----------------------------------------
-- line 968 ----------------------------------------
        .               end: Size,
        .           }
        .           
        .           impl<'a> Iterator for InitChunkIter<'a> {
        .               type Item = InitChunk;
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<Self::Item> {
   41,552 ( 0.00%)          if self.start >= self.end {
        .                       return None;
        .                   }
        .           
        .                   let end_of_chunk =
  209,720 ( 0.01%)              self.init_mask.find_bit(self.start, self.end, !self.is_init).unwrap_or(self.end);
        .                   let range = self.start..end_of_chunk;
        .           
        .                   let ret =
  165,228 ( 0.00%)              Some(if self.is_init { InitChunk::Init(range) } else { InitChunk::Uninit(range) });
        .           
        .                   self.is_init = !self.is_init;
        .                   self.start = end_of_chunk;
        .           
        .                   ret
        .               }
        .           }
        .           
-- line 993 ----------------------------------------
-- line 998 ----------------------------------------
        .               /// Returns `Ok(())` if it's initialized. Otherwise returns the range of byte
        .               /// indexes of the first contiguous uninitialized access.
        .               fn is_init(&self, range: AllocRange) -> Result<(), Range<Size>> {
        .                   self.init_mask.is_range_initialized(range.start, range.end()) // `Size` addition
        .               }
        .           
        .               /// Checks that a range of bytes is initialized. If not, returns the `InvalidUninitBytes`
        .               /// error which will report the first range of bytes which is uninitialized.
   94,419 ( 0.00%)      fn check_init(&self, range: AllocRange) -> AllocResult {
        .                   self.is_init(range).map_err(|idx_range| {
        .                       AllocError::InvalidUninitBytes(Some(UninitBytesAccess {
        .                           access_offset: range.start,
        .                           access_size: range.size,
        .                           uninit_offset: idx_range.start,
        .                           uninit_size: idx_range.end - idx_range.start, // `Size` subtraction
        .                       }))
        .                   })
   83,928 ( 0.00%)      }
        .           
        .               pub fn mark_init(&mut self, range: AllocRange, is_init: bool) {
  203,878 ( 0.01%)          if range.size.bytes() == 0 {
        .                       return;
        .                   }
  101,939 ( 0.00%)          assert!(self.mutability == Mutability::Mut);
  407,756 ( 0.01%)          self.init_mask.set_range(range.start, range.end(), is_init);
        .               }
        .           }
        .           
        .           /// Run-length encoding of the uninit mask.
        .           /// Used to copy parts of a mask multiple times to another allocation.
        .           pub struct InitMaskCompressed {
        .               /// Whether the first range is initialized.
        .               initial: bool,
-- line 1030 ----------------------------------------
-- line 1032 ----------------------------------------
        .               /// The initialization state of the ranges alternate starting with `initial`.
        .               ranges: smallvec::SmallVec<[u64; 1]>,
        .           }
        .           
        .           impl InitMaskCompressed {
        .               pub fn no_bytes_init(&self) -> bool {
        .                   // The `ranges` are run-length encoded and of alternating initialization state.
        .                   // So if `ranges.len() > 1` then the second block is an initialized range.
   81,144 ( 0.00%)          !self.initial && self.ranges.len() == 1
   40,572 ( 0.00%)      }
        .           }
        .           
        .           /// Transferring the initialization mask to other allocations.
        .           impl<Tag, Extra> Allocation<Tag, Extra> {
        .               /// Creates a run-length encoding of the initialization mask; panics if range is empty.
        .               ///
        .               /// This is essentially a more space-efficient version of
        .               /// `InitMask::range_as_init_chunks(...).collect::<Vec<_>>()`.
  284,004 ( 0.01%)      pub fn compress_uninit_range(&self, range: AllocRange) -> InitMaskCompressed {
        .                   // Since we are copying `size` bytes from `src` to `dest + i * size` (`for i in 0..repeat`),
        .                   // a naive initialization mask copying algorithm would repeatedly have to read the initialization mask from
        .                   // the source and write it to the destination. Even if we optimized the memory accesses,
        .                   // we'd be doing all of this `repeat` times.
        .                   // Therefore we precompute a compressed version of the initialization mask of the source value and
        .                   // then write it back `repeat` times without computing any more information from the source.
        .           
        .                   // A precomputed cache for ranges of initialized / uninitialized bits
-- line 1058 ----------------------------------------
-- line 1062 ----------------------------------------
        .           
        .                   let mut ranges = smallvec::SmallVec::<[u64; 1]>::new();
        .           
        .                   let mut chunks = self.init_mask.range_as_init_chunks(range.start, range.end()).peekable();
        .           
        .                   let initial = chunks.peek().expect("range should be nonempty").is_init();
        .           
        .                   // Here we rely on `range_as_init_chunks` to yield alternating init/uninit chunks.
    1,960 ( 0.00%)          for chunk in chunks {
   83,104 ( 0.00%)              let len = chunk.range().end.bytes() - chunk.range().start.bytes();
        .                       ranges.push(len);
        .                   }
        .           
  284,004 ( 0.01%)          InitMaskCompressed { ranges, initial }
  324,576 ( 0.01%)      }
        .           
        .               /// Applies multiple instances of the run-length encoding to the initialization mask.
  446,292 ( 0.01%)      pub fn mark_compressed_init_range(
        .                   &mut self,
        .                   defined: &InitMaskCompressed,
        .                   range: AllocRange,
        .                   repeat: u64,
        .               ) {
        .                   // An optimization where we can just overwrite an entire range of initialization
        .                   // bits if they are going to be uniformly `1` or `0`.
   81,144 ( 0.00%)          if defined.ranges.len() <= 1 {
  403,260 ( 0.01%)              self.init_mask.set_range_inbounds(
        .                           range.start,
        .                           range.start + range.size * repeat, // `Size` operations
   40,326 ( 0.00%)                  defined.initial,
        .                       );
        .                       return;
        .                   }
        .           
        .                   for mut j in 0..repeat {
      738 ( 0.00%)              j *= range.size.bytes();
      492 ( 0.00%)              j += range.start.bytes();
        .                       let mut cur = defined.initial;
        .                       for range in &defined.ranges {
        .                           let old_j = j;
        .                           j += range;
    3,678 ( 0.00%)                  self.init_mask.set_range_inbounds(
        .                               Size::from_bytes(old_j),
        .                               Size::from_bytes(j),
    4,904 ( 0.00%)                      cur,
        .                           );
        .                           cur = !cur;
        .                       }
        .                   }
    1,968 ( 0.00%)      }
        .           }

2,384,880 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/allocation.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 294 ----------------------------------------
        .           #[allow(deprecated)]
        .           impl From<LayoutErr> for CollectionAllocErr {
        .               fn from(_: LayoutErr) -> Self {
        .                   CollectionAllocErr::CapacityOverflow
        .               }
        .           }
        .           
        .           fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
  579,388 ( 0.01%)      match result {
        .                   Ok(x) => x,
        .                   Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
        .                   Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
        .               }
        .           }
        .           
        .           /// FIXME: use `Layout::array` when we require a Rust version where it’s stable
        .           /// https://github.com/rust-lang/rust/issues/55724
-- line 310 ----------------------------------------
-- line 422 ----------------------------------------
        .           #[cfg(feature = "union")]
        .           impl<A: Array> SmallVecData<A> {
        .               #[inline]
        .               unsafe fn inline(&self) -> *const A::Item {
        .                   self.inline.as_ptr() as *const A::Item
        .               }
        .               #[inline]
        .               unsafe fn inline_mut(&mut self) -> *mut A::Item {
  151,500 ( 0.00%)          self.inline.as_mut_ptr() as *mut A::Item
        .               }
        .               #[inline]
        .               fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
        .                   SmallVecData {
        .                       inline: core::mem::ManuallyDrop::new(inline),
        .                   }
        .               }
        .               #[inline]
        .               unsafe fn into_inline(self) -> MaybeUninit<A> {
        .                   core::mem::ManuallyDrop::into_inner(self.inline)
        .               }
        .               #[inline]
        .               unsafe fn heap(&self) -> (*mut A::Item, usize) {
    1,709 ( 0.00%)          self.heap
        .               }
        .               #[inline]
        .               unsafe fn heap_mut(&mut self) -> &mut (*mut A::Item, usize) {
        .                   &mut self.heap
        .               }
        .               #[inline]
        .               fn from_heap(ptr: *mut A::Item, len: usize) -> SmallVecData<A> {
        .                   SmallVecData { heap: (ptr, len) }
-- line 452 ----------------------------------------
-- line 557 ----------------------------------------
        .               #[inline]
        .               pub fn new() -> SmallVec<A> {
        .                   // Try to detect invalid custom implementations of `Array`. Hopefully,
        .                   // this check should be optimized away entirely for valid ones.
        .                   assert!(
        .                       mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
        .                           && mem::align_of::<A>() >= mem::align_of::<A::Item>()
        .                   );
  803,923 ( 0.02%)          SmallVec {
        .                       capacity: 0,
        .                       data: SmallVecData::from_inline(MaybeUninit::uninit()),
        .                   }
        .               }
        .           
        .               /// Construct an empty vector with enough capacity pre-allocated to store at least `n`
        .               /// elements.
        .               ///
-- line 573 ----------------------------------------
-- line 635 ----------------------------------------
        .               /// let small_vec: SmallVec<_> = SmallVec::from_buf(buf);
        .               ///
        .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
        .               /// ```
        .               #[inline]
        .               pub fn from_buf(buf: A) -> SmallVec<A> {
        .                   SmallVec {
        .                       capacity: A::size(),
   71,540 ( 0.00%)              data: SmallVecData::from_inline(MaybeUninit::new(buf)),
        .                   }
        .               }
        .           
        .               /// Constructs a new `SmallVec` on the stack from an `A` without
        .               /// copying elements. Also sets the length, which must be less or
        .               /// equal to the size of `buf`.
        .               ///
        .               /// ```rust
-- line 651 ----------------------------------------
-- line 653 ----------------------------------------
        .               ///
        .               /// let buf = [1, 2, 3, 4, 5, 0, 0, 0];
        .               /// let small_vec: SmallVec<_> = SmallVec::from_buf_and_len(buf, 5);
        .               ///
        .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
        .               /// ```
        .               #[inline]
        .               pub fn from_buf_and_len(buf: A, len: usize) -> SmallVec<A> {
       12 ( 0.00%)          assert!(len <= A::size());
       36 ( 0.00%)          unsafe { SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), len) }
        .               }
        .           
        .               /// Constructs a new `SmallVec` on the stack from an `A` without
        .               /// copying elements. Also sets the length. The user is responsible
        .               /// for ensuring that `len <= A::size()`.
        .               ///
        .               /// ```rust
        .               /// use smallvec::SmallVec;
-- line 670 ----------------------------------------
-- line 674 ----------------------------------------
        .               /// let small_vec: SmallVec<_> = unsafe {
        .               ///     SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), 5)
        .               /// };
        .               ///
        .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
        .               /// ```
        .               #[inline]
        .               pub unsafe fn from_buf_and_len_unchecked(buf: MaybeUninit<A>, len: usize) -> SmallVec<A> {
        6 ( 0.00%)          SmallVec {
        .                       capacity: len,
        .                       data: SmallVecData::from_inline(buf),
        .                   }
        .               }
        .           
        .               /// Sets the length of a vector.
        .               ///
        .               /// This will explicitly set the size of the vector, without actually
        .               /// modifying its buffers, so it is up to the caller to ensure that the
        .               /// vector is actually the specified size.
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   let (_, len_ptr, _) = self.triple_mut();
   60,724 ( 0.00%)          *len_ptr = new_len;
        .               }
        .           
        .               /// The maximum number of elements this vector can hold inline
        .               #[inline]
        .               fn inline_capacity() -> usize {
        .                   if mem::size_of::<A::Item>() > 0 {
        .                       A::size()
        .                   } else {
-- line 703 ----------------------------------------
-- line 725 ----------------------------------------
        .               #[inline]
        .               pub fn len(&self) -> usize {
        .                   self.triple().1
        .               }
        .           
        .               /// Returns `true` if the vector is empty
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
  106,435 ( 0.00%)          self.len() == 0
        .               }
        .           
        .               /// The number of items the vector can hold without reallocating
        .               #[inline]
        .               pub fn capacity(&self) -> usize {
        .                   self.triple().2
        .               }
        .           
        .               /// Returns a tuple with (data ptr, len, capacity)
        .               /// Useful to get all SmallVec properties with a single check of the current storage variant.
        .               #[inline]
        .               fn triple(&self) -> (*const A::Item, usize, usize) {
        .                   unsafe {
5,375,600 ( 0.14%)              if self.spilled() {
        .                           let (ptr, len) = self.data.heap();
        .                           (ptr, len, self.capacity)
        .                       } else {
        .                           (self.data.inline(), self.capacity, Self::inline_capacity())
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns a tuple with (data ptr, len ptr, capacity)
        .               #[inline]
        .               fn triple_mut(&mut self) -> (*mut A::Item, &mut usize, usize) {
        .                   unsafe {
6,776,293 ( 0.17%)              if self.spilled() {
   96,357 ( 0.00%)                  let &mut (ptr, ref mut len_ptr) = self.data.heap_mut();
        .                           (ptr, len_ptr, self.capacity)
        .                       } else {
        .                           (
        .                               self.data.inline_mut(),
        .                               &mut self.capacity,
        .                               Self::inline_capacity(),
        .                           )
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns `true` if the data has spilled into a separate heap-allocated buffer.
        .               #[inline]
        .               pub fn spilled(&self) -> bool {
9,096,201 ( 0.23%)          self.capacity > Self::inline_capacity()
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// Note 1: The element range is removed even if the iterator is only
        .               /// partially consumed or not consumed at all.
        .               ///
-- line 784 ----------------------------------------
-- line 821 ----------------------------------------
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Append an item to the vector.
        .               #[inline]
  138,280 ( 0.00%)      pub fn push(&mut self, value: A::Item) {
        .                   unsafe {
        .                       let (mut ptr, mut len, cap) = self.triple_mut();
  981,215 ( 0.02%)              if *len == cap {
       76 ( 0.00%)                  self.reserve(1);
    2,027 ( 0.00%)                  let &mut (heap_ptr, ref mut heap_len) = self.data.heap_mut();
        .                           ptr = heap_ptr;
        .                           len = heap_len;
        .                       }
    2,007 ( 0.00%)              ptr::write(ptr.add(*len), value);
1,885,250 ( 0.05%)              *len += 1;
        .                   }
  110,624 ( 0.00%)      }
        .           
        .               /// Remove an item from the end of the vector and return it, or None if empty.
        .               #[inline]
        .               pub fn pop(&mut self) -> Option<A::Item> {
        .                   unsafe {
        .                       let (ptr, len_ptr, _) = self.triple_mut();
  482,684 ( 0.01%)              if *len_ptr == 0 {
        .                           return None;
        .                       }
  109,350 ( 0.00%)              let last_index = *len_ptr - 1;
  109,374 ( 0.00%)              *len_ptr = last_index;
  109,084 ( 0.00%)              Some(ptr::read(ptr.add(last_index)))
        .                   }
        1 ( 0.00%)      }
        .           
        .               /// Moves all the elements of `other` into `self`, leaving `other` empty.
        .               ///
        .               /// # Example
        .               ///
        .               /// ```
        .               /// # use smallvec::{SmallVec, smallvec};
        .               /// let mut v0: SmallVec<[u8; 16]> = smallvec![1, 2, 3];
-- line 863 ----------------------------------------
-- line 879 ----------------------------------------
        .               /// or if the capacity computation overflows `usize`.
        .               pub fn grow(&mut self, new_cap: usize) {
        .                   infallible(self.try_grow(new_cap))
        .               }
        .           
        .               /// Re-allocate to set the capacity to `max(new_cap, inline_size())`.
        .               ///
        .               /// Panics if `new_cap` is less than the vector's length
    3,998 ( 0.00%)      pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
        .                   unsafe {
       34 ( 0.00%)              let (ptr, &mut len, cap) = self.triple_mut();
        .                       let unspilled = !self.spilled();
    4,346 ( 0.00%)              assert!(new_cap >= len);
    4,346 ( 0.00%)              if new_cap <= self.inline_size() {
        .                           if unspilled {
        .                               return Ok(());
        .                           }
        .                           self.data = SmallVecData::from_inline(MaybeUninit::uninit());
        .                           ptr::copy_nonoverlapping(ptr, self.data.inline_mut(), len);
        .                           self.capacity = len;
        .                           deallocate(ptr, cap);
    4,346 ( 0.00%)              } else if new_cap != cap {
    4,154 ( 0.00%)                  let layout = layout_array::<A::Item>(new_cap)?;
        .                           debug_assert!(layout.size() > 0);
        .                           let new_alloc;
    2,173 ( 0.00%)                  if unspilled {
        .                               new_alloc = NonNull::new(alloc::alloc::alloc(layout))
        .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
        .                                   .cast()
        .                                   .as_ptr();
        .                               ptr::copy_nonoverlapping(ptr, new_alloc, len);
        .                           } else {
        .                               // This should never fail since the same succeeded
        .                               // when previously allocating `ptr`.
    1,310 ( 0.00%)                      let old_layout = layout_array::<A::Item>(cap)?;
        .           
        .                               let new_ptr = alloc::alloc::realloc(ptr as *mut u8, old_layout, layout.size());
        .                               new_alloc = NonNull::new(new_ptr)
        .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
        .                                   .cast()
        .                                   .as_ptr();
        .                           }
    4,346 ( 0.00%)                  self.data = SmallVecData::from_heap(new_alloc, len);
    6,613 ( 0.00%)                  self.capacity = new_cap;
        .                       }
        .                       Ok(())
        .                   }
    4,032 ( 0.00%)      }
        .           
        .               /// Reserve capacity for `additional` more elements to be inserted.
        .               ///
        .               /// May reserve more space to avoid frequent reallocations.
        .               ///
        .               /// Panics if the capacity computation overflows `usize`.
        .               #[inline]
  308,866 ( 0.01%)      pub fn reserve(&mut self, additional: usize) {
  588,777 ( 0.01%)          infallible(self.try_reserve(additional))
  352,752 ( 0.01%)      }
        .           
        .               /// Reserve capacity for `additional` more elements to be inserted.
        .               ///
        .               /// May reserve more space to avoid frequent reallocations.
2,520,974 ( 0.06%)      pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
        .                   // prefer triple_mut() even if triple() would work
        .                   // so that the optimizer removes duplicated calls to it
        .                   // from callers like insert()
    2,196 ( 0.00%)          let (_, &mut len, cap) = self.triple_mut();
1,866,086 ( 0.05%)          if cap - len >= additional {
        .                       return Ok(());
        .                   }
        .                   let new_cap = len
        .                       .checked_add(additional)
        .                       .and_then(usize::checked_next_power_of_two)
        .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
      320 ( 0.00%)          self.try_grow(new_cap)
2,605,106 ( 0.07%)      }
        .           
        .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
        .               ///
        .               /// Panics if the new capacity overflows `usize`.
        .               pub fn reserve_exact(&mut self, additional: usize) {
        .                   infallible(self.try_reserve_exact(additional))
        .               }
        .           
        .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
        .               pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
        .                   let (_, &mut len, cap) = self.triple_mut();
   74,417 ( 0.00%)          if cap - len >= additional {
        .                       return Ok(());
        .                   }
        .                   let new_cap = len
        .                       .checked_add(additional)
        .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
      376 ( 0.00%)          self.try_grow(new_cap)
      376 ( 0.00%)      }
        .           
        .               /// Shrink the capacity of the vector as much as possible.
        .               ///
        .               /// When possible, this will move data from an external heap buffer to the vector's inline
        .               /// storage.
        .               pub fn shrink_to_fit(&mut self) {
        .                   if !self.spilled() {
        .                       return;
-- line 981 ----------------------------------------
-- line 999 ----------------------------------------
        .               /// If `len` is greater than or equal to the vector's current length, this has no
        .               /// effect.
        .               ///
        .               /// This does not re-allocate.  If you want the vector's capacity to shrink, call
        .               /// `shrink_to_fit` after truncating.
        .               pub fn truncate(&mut self, len: usize) {
        .                   unsafe {
        .                       let (ptr, len_ptr, _) = self.triple_mut();
   11,864 ( 0.00%)              while len < *len_ptr {
        .                           let last_index = *len_ptr - 1;
        .                           *len_ptr = last_index;
        .                           ptr::drop_in_place(ptr.add(last_index));
        .                       }
        .                   }
        .               }
        .           
        .               /// Extracts a slice containing the entire vector.
-- line 1015 ----------------------------------------
-- line 1044 ----------------------------------------
        .               pub fn clear(&mut self) {
        .                   self.truncate(0);
        .               }
        .           
        .               /// Remove and return the element at position `index`, shifting all elements after it to the
        .               /// left.
        .               ///
        .               /// Panics if `index` is out of bounds.
       16 ( 0.00%)      pub fn remove(&mut self, index: usize) -> A::Item {
        .                   unsafe {
        .                       let (mut ptr, len_ptr, _) = self.triple_mut();
      940 ( 0.00%)              let len = *len_ptr;
    3,192 ( 0.00%)              assert!(index < len);
   50,738 ( 0.00%)              *len_ptr = len - 1;
        .                       ptr = ptr.add(index);
        .                       let item = ptr::read(ptr);
    2,128 ( 0.00%)              ptr::copy(ptr.add(1), ptr, len - index - 1);
        .                       item
        .                   }
       20 ( 0.00%)      }
        .           
        .               /// Insert an element at position `index`, shifting all elements after it to the right.
        .               ///
        .               /// Panics if `index` is out of bounds.
   25,969 ( 0.00%)      pub fn insert(&mut self, index: usize, element: A::Item) {
        .                   self.reserve(1);
        .           
        .                   unsafe {
        .                       let (mut ptr, len_ptr, _) = self.triple_mut();
    2,387 ( 0.00%)              let len = *len_ptr;
    4,750 ( 0.00%)              assert!(index <= len);
    9,500 ( 0.00%)              *len_ptr = len + 1;
        .                       ptr = ptr.add(index);
    4,750 ( 0.00%)              ptr::copy(ptr, ptr.add(1), len - index);
        .                       ptr::write(ptr, element);
        .                   }
   16,528 ( 0.00%)      }
        .           
        .               /// Insert multiple elements at position `index`, shifting all following elements toward the
        .               /// back.
        .               pub fn insert_many<I: IntoIterator<Item = A::Item>>(&mut self, index: usize, iterable: I) {
        .                   let mut iter = iterable.into_iter();
        .                   if index == self.len() {
        .                       return self.extend(iter);
        .                   }
-- line 1088 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place and preserves the order of the retained
        .               /// elements.
   27,261 ( 0.00%)      pub fn retain<F: FnMut(&mut A::Item) -> bool>(&mut self, mut f: F) {
        .                   let mut del = 0;
        .                   let len = self.len();
        .                   for i in 0..len {
    6,664 ( 0.00%)              if !f(&mut self[i]) {
       76 ( 0.00%)                  del += 1;
    1,964 ( 0.00%)              } else if del > 0 {
       24 ( 0.00%)                  self.swap(i - del, i);
        .                       }
        .                   }
    6,058 ( 0.00%)          self.truncate(len - del);
   24,232 ( 0.00%)      }
        .           
        .               /// Removes consecutive duplicate elements.
        .               pub fn dedup(&mut self)
        .               where
        .                   A::Item: PartialEq<A::Item>,
        .               {
        .                   self.dedup_by(|a, b| a == b);
        .               }
-- line 1228 ----------------------------------------
-- line 1418 ----------------------------------------
        .                           capacity: len,
        .                           data: SmallVecData::from_inline(unsafe {
        .                               let mut data: MaybeUninit<A> = MaybeUninit::uninit();
        .                               ptr::copy_nonoverlapping(
        .                                   slice.as_ptr(),
        .                                   data.as_mut_ptr() as *mut A::Item,
        .                                   len,
        .                               );
      232 ( 0.00%)                      data
        .                           }),
        .                       }
        .                   } else {
        .                       let mut b = slice.to_vec();
        .                       let (ptr, cap) = (b.as_mut_ptr(), b.capacity());
        .                       mem::forget(b);
        .                       SmallVec {
        .                           capacity: cap,
-- line 1434 ----------------------------------------
-- line 1436 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Copy elements from a slice into the vector at position `index`, shifting any following
        .               /// elements toward the back.
        .               ///
        .               /// For slices of `Copy` types, this is more efficient than `insert`.
   65,835 ( 0.00%)      pub fn insert_from_slice(&mut self, index: usize, slice: &[A::Item]) {
        .                   self.reserve(slice.len());
        .           
        .                   let len = self.len();
   19,881 ( 0.00%)          assert!(index <= len);
        .           
        .                   unsafe {
        .                       let slice_ptr = slice.as_ptr();
        .                       let ptr = self.as_mut_ptr().add(index);
        .                       ptr::copy(ptr, ptr.add(slice.len()), len - index);
        .                       ptr::copy_nonoverlapping(slice_ptr, ptr, slice.len());
   13,254 ( 0.00%)              self.set_len(len + slice.len());
        .                   }
   53,016 ( 0.00%)      }
        .           
        .               /// Copy elements from a slice and append them to the vector.
        .               ///
        .               /// For slices of `Copy` types, this is more efficient than `extend`.
        .               #[inline]
        .               pub fn extend_from_slice(&mut self, slice: &[A::Item]) {
        .                   let len = self.len();
   16,604 ( 0.00%)          self.insert_from_slice(len, slice);
        .               }
        .           }
        .           
        .           impl<A: Array> SmallVec<A>
        .           where
        .               A::Item: Clone,
        .           {
        .               /// Resizes the vector so that its length is equal to `len`.
-- line 1473 ----------------------------------------
-- line 1522 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Array> ops::DerefMut for SmallVec<A> {
        .               #[inline]
        .               fn deref_mut(&mut self) -> &mut [A::Item] {
        .                   unsafe {
    9,517 ( 0.00%)              let (ptr, &mut len, _) = self.triple_mut();
        .                       slice::from_raw_parts_mut(ptr, len)
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Array> AsRef<[A::Item]> for SmallVec<A> {
        .               #[inline]
        .               fn as_ref(&self) -> &[A::Item] {
-- line 1538 ----------------------------------------
-- line 1716 ----------------------------------------
        .                   SmallVec::extend_from_slice(self, other)
        .               }
        .           }
        .           
        .           impl<A: Array> FromIterator<A::Item> for SmallVec<A> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
        .                   let mut v = SmallVec::new();
  849,175 ( 0.02%)          v.extend(iterable);
        .                   v
        .               }
        .           }
        .           
        .           impl<A: Array> Extend<A::Item> for SmallVec<A> {
3,443,593 ( 0.09%)      fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
  126,124 ( 0.00%)          let mut iter = iterable.into_iter();
        .                   let (lower_size_bound, _) = iter.size_hint();
   45,524 ( 0.00%)          self.reserve(lower_size_bound);
        .           
        .                   unsafe {
        .                       let (ptr, len_ptr, cap) = self.triple_mut();
        .                       let mut len = SetLenOnDrop::new(len_ptr);
1,336,635 ( 0.03%)              while len.get() < cap {
  240,500 ( 0.01%)                  if let Some(out) = iter.next() {
        .                               ptr::write(ptr.add(len.get()), out);
        .                               len.increment_len(1);
        .                           } else {
        .                               return;
        .                           }
        .                       }
        .                   }
        .           
   25,913 ( 0.00%)          for elem in iter {
    2,176 ( 0.00%)              self.push(elem);
        .                   }
2,845,938 ( 0.07%)      }
        .           }
        .           
        .           impl<A: Array> fmt::Debug for SmallVec<A>
        .           where
        .               A::Item: fmt::Debug,
        .           {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   f.debug_list().entries(self.iter()).finish()
-- line 1759 ----------------------------------------
-- line 1764 ----------------------------------------
        .               #[inline]
        .               fn default() -> SmallVec<A> {
        .                   SmallVec::new()
        .               }
        .           }
        .           
        .           #[cfg(feature = "may_dangle")]
        .           unsafe impl<#[may_dangle] A: Array> Drop for SmallVec<A> {
  653,393 ( 0.02%)      fn drop(&mut self) {
        .                   unsafe {
1,914,278 ( 0.05%)              if self.spilled() {
        .                           let (ptr, len) = self.data.heap();
        .                           Vec::from_raw_parts(ptr, len, self.capacity);
        .                       } else {
        .                           ptr::drop_in_place(&mut self[..]);
        .                       }
        .                   }
  761,472 ( 0.02%)      }
        .           }
        .           
        .           #[cfg(not(feature = "may_dangle"))]
        .           impl<A: Array> Drop for SmallVec<A> {
        .               fn drop(&mut self) {
        .                   unsafe {
        .                       if self.spilled() {
        .                           let (ptr, len) = self.data.heap();
-- line 1789 ----------------------------------------
-- line 1888 ----------------------------------------
        .               A::Item: Clone,
        .           {
        .               fn clone(&self) -> IntoIter<A> {
        .                   SmallVec::from(self.as_slice()).into_iter()
        .               }
        .           }
        .           
        .           impl<A: Array> Drop for IntoIter<A> {
      737 ( 0.00%)      fn drop(&mut self) {
   52,938 ( 0.00%)          for _ in self {}
      664 ( 0.00%)      }
        .           }
        .           
        .           impl<A: Array> Iterator for IntoIter<A> {
        .               type Item = A::Item;
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<A::Item> {
  190,582 ( 0.00%)          if self.current == self.end {
        .                       None
        .                   } else {
        .                       unsafe {
        .                           let current = self.current;
   77,810 ( 0.00%)                  self.current += 1;
    1,117 ( 0.00%)                  Some(ptr::read(self.data.as_ptr().add(current)))
        .                       }
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
    2,786 ( 0.00%)          let size = self.end - self.current;
        .                   (size, Some(size))
        .               }
        .           }
        .           
        .           impl<A: Array> DoubleEndedIterator for IntoIter<A> {
        .               #[inline]
        .               fn next_back(&mut self) -> Option<A::Item> {
        .                   if self.current == self.end {
-- line 1927 ----------------------------------------
-- line 1955 ----------------------------------------
        .           impl<A: Array> IntoIterator for SmallVec<A> {
        .               type IntoIter = IntoIter<A>;
        .               type Item = A::Item;
        .               fn into_iter(mut self) -> Self::IntoIter {
        .                   unsafe {
        .                       // Set SmallVec len to zero as `IntoIter` drop handles dropping of the elements
        .                       let len = self.len();
        .                       self.set_len(0);
   12,615 ( 0.00%)              IntoIter {
  170,176 ( 0.00%)                  data: self,
        .                           current: 0,
        .                           end: len,
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, A: Array> IntoIterator for &'a SmallVec<A> {
-- line 1972 ----------------------------------------
-- line 2000 ----------------------------------------
        .               len: &'a mut usize,
        .               local_len: usize,
        .           }
        .           
        .           impl<'a> SetLenOnDrop<'a> {
        .               #[inline]
        .               fn new(len: &'a mut usize) -> Self {
        .                   SetLenOnDrop {
  357,322 ( 0.01%)              local_len: *len,
        .                       len,
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn get(&self) -> usize {
        .                   self.local_len
        .               }
        .           
        .               #[inline]
        .               fn increment_len(&mut self, increment: usize) {
  121,768 ( 0.00%)          self.local_len += increment;
        .               }
        .           }
        .           
        .           impl<'a> Drop for SetLenOnDrop<'a> {
        .               #[inline]
        .               fn drop(&mut self) {
  364,158 ( 0.01%)          *self.len = self.local_len;
        .               }
        .           }
        .           
        .           #[cfg(feature = "const_new")]
        .           impl<T, const N: usize> SmallVec<[T; N]> {
        .               /// Construct an empty vector.
        .               ///
        .               /// This is a `const` version of [`SmallVec::new`] that is enabled by the feature `const_new`, with the limitation that it only works for arrays.
-- line 2035 ----------------------------------------

5,513,530 ( 0.14%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .                   #[inline]
        .                   pub fn $fn_name(
        .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
        .                       mut value: $int_ty,
        .                   ) -> &[u8] {
        .                       let mut i = 0;
        .           
        .                       loop {
3,235,037 ( 0.08%)                  if value < 0x80 {
        .                               unsafe {
1,346,619 ( 0.03%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
        .                               }
        .           
1,952,136 ( 0.05%)                      i += 1;
        .                               break;
        .                           } else {
        .                               unsafe {
1,603,544 ( 0.04%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
        .                               }
        .           
  674,124 ( 0.02%)                      value >>= 7;
        .                               i += 1;
        .                           }
        .                       }
        .           
        .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
        .                   }
        .               };
        .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
        .           macro_rules! impl_read_unsigned_leb128 {
        .               ($fn_name:ident, $int_ty:ty) => {
        .                   #[inline]
        .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
        .                       // The first iteration of this loop is unpeeled. This is a
        .                       // performance win because this code is hot and integer values less
        .                       // than 128 are very common, typically occurring 50-80% or more of
        .                       // the time, even for u64 and u128.
1,573,672 ( 0.04%)              let byte = slice[*position];
  786,836 ( 0.02%)              *position += 1;
  786,836 ( 0.02%)              if (byte & 0x80) == 0 {
        6 ( 0.00%)                  return byte as $int_ty;
        .                       }
    1,054 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
        .                       let mut shift = 7;
        .                       loop {
  516,873 ( 0.01%)                  let byte = slice[*position];
  337,947 ( 0.01%)                  *position += 1;
  344,582 ( 0.01%)                  if (byte & 0x80) == 0 {
  271,619 ( 0.01%)                      result |= (byte as $int_ty) << shift;
        .                               return result;
        .                           } else {
        .                               result |= ((byte & 0x7F) as $int_ty) << shift;
        .                           }
        .                           shift += 7;
        .                       }
        .                   }
        .               };
-- line 80 ----------------------------------------

1,062,440 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 59 ----------------------------------------
        .                   &mut self,
        .                   def_id: DefId,
        .                   kind: &str,
        .                   descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy>;
        .           
        .               /// Not overridden, but used to actually visit types and traits.
        .               fn skeleton(&mut self) -> DefIdVisitorSkeleton<'_, 'tcx, Self> {
  723,967 ( 0.02%)          DefIdVisitorSkeleton {
        .                       def_id_visitor: self,
        .                       visited_opaque_tys: Default::default(),
        .                       dummy: Default::default(),
        .                   }
        .               }
      612 ( 0.00%)      fn visit(&mut self, ty_fragment: impl TypeFoldable<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   ty_fragment.visit_with(&mut self.skeleton())
    1,020 ( 0.00%)      }
      366 ( 0.00%)      fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   self.skeleton().visit_trait(trait_ref)
      366 ( 0.00%)      }
        .               fn visit_projection_ty(
        .                   &mut self,
        .                   projection: ty::ProjectionTy<'tcx>,
        .               ) -> ControlFlow<Self::BreakTy> {
       40 ( 0.00%)          self.skeleton().visit_projection_ty(projection)
        .               }
        .               fn visit_predicates(
        .                   &mut self,
        .                   predicates: ty::GenericPredicates<'tcx>,
        .               ) -> ControlFlow<Self::BreakTy> {
      299 ( 0.00%)          self.skeleton().visit_predicates(predicates)
        .               }
        .           }
        .           
        .           struct DefIdVisitorSkeleton<'v, 'tcx, V: ?Sized> {
        .               def_id_visitor: &'v mut V,
        .               visited_opaque_tys: FxHashSet<DefId>,
        .               dummy: PhantomData<TyCtxt<'tcx>>,
        .           }
        .           
        .           impl<'tcx, V> DefIdVisitorSkeleton<'_, 'tcx, V>
        .           where
        .               V: DefIdVisitor<'tcx> + ?Sized,
        .           {
        .               fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<V::BreakTy> {
       61 ( 0.00%)          let TraitRef { def_id, substs } = trait_ref;
    8,641 ( 0.00%)          self.def_id_visitor.visit_def_id(def_id, "trait", &trait_ref.print_only_trait_path())?;
       61 ( 0.00%)          if self.def_id_visitor.shallow() { ControlFlow::CONTINUE } else { substs.visit_with(self) }
        .               }
        .           
    1,600 ( 0.00%)      fn visit_projection_ty(
        .                   &mut self,
        .                   projection: ty::ProjectionTy<'tcx>,
        .               ) -> ControlFlow<V::BreakTy> {
    1,280 ( 0.00%)          let (trait_ref, assoc_substs) =
      320 ( 0.00%)              projection.trait_ref_and_own_substs(self.def_id_visitor.tcx());
        .                   self.visit_trait(trait_ref)?;
        .                   if self.def_id_visitor.shallow() {
        .                       ControlFlow::CONTINUE
        .                   } else {
        .                       assoc_substs.iter().try_for_each(|subst| subst.visit_with(self))
        .                   }
    1,440 ( 0.00%)      }
        .           
        .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<V::BreakTy> {
      367 ( 0.00%)          match predicate.kind().skip_binder() {
        .                       ty::PredicateKind::Trait(ty::TraitPredicate {
        .                           trait_ref,
        .                           constness: _,
        .                           polarity: _,
        .                       }) => self.visit_trait(trait_ref),
        .                       ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, term }) => {
       64 ( 0.00%)                  term.visit_with(self)?;
      452 ( 0.00%)                  self.visit_projection_ty(projection_ty)
        .                       }
        .                       ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty, _region)) => {
        .                           ty.visit_with(self)
        .                       }
        .                       ty::PredicateKind::RegionOutlives(..) => ControlFlow::CONTINUE,
        .                       ty::PredicateKind::ConstEvaluatable(uv)
        .                           if self.def_id_visitor.tcx().features().generic_const_exprs =>
        .                       {
-- line 140 ----------------------------------------
-- line 157 ----------------------------------------
        .                       ACNode::Leaf(leaf) => self.visit_const(leaf),
        .                       ACNode::Cast(_, _, ty) => self.visit_ty(ty),
        .                       ACNode::Binop(..) | ACNode::UnaryOp(..) | ACNode::FunctionCall(_, _) => {
        .                           ControlFlow::CONTINUE
        .                       }
        .                   })
        .               }
        .           
    2,247 ( 0.00%)      fn visit_predicates(
        .                   &mut self,
        .                   predicates: ty::GenericPredicates<'tcx>,
        .               ) -> ControlFlow<V::BreakTy> {
        .                   let ty::GenericPredicates { parent: _, predicates } = predicates;
        .                   predicates.iter().try_for_each(|&(predicate, _span)| self.visit_predicate(predicate))
    2,568 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx, V> TypeVisitor<'tcx> for DefIdVisitorSkeleton<'_, 'tcx, V>
        .           where
        .               V: DefIdVisitor<'tcx> + ?Sized,
        .           {
        .               type BreakTy = V::BreakTy;
        .           
1,430,290 ( 0.04%)      fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<V::BreakTy> {
  159,096 ( 0.00%)          let tcx = self.def_id_visitor.tcx();
        .                   // InternalSubsts are not visited here because they are visited below in `super_visit_with`.
  794,380 ( 0.02%)          match *ty.kind() {
  135,449 ( 0.00%)              ty::Adt(&ty::AdtDef { did: def_id, .. }, ..)
        .                       | ty::Foreign(def_id)
        .                       | ty::FnDef(def_id, ..)
        .                       | ty::Closure(def_id, ..)
        .                       | ty::Generator(def_id, ..) => {
  769,884 ( 0.02%)                  self.def_id_visitor.visit_def_id(def_id, "type", &ty)?;
        .                           if self.def_id_visitor.shallow() {
        .                               return ControlFlow::CONTINUE;
        .                           }
        .                           // Default type visitor doesn't visit signatures of fn types.
        .                           // Something like `fn() -> Priv {my_func}` is considered a private type even if
        .                           // `my_func` is public, so we need to visit signatures.
  165,832 ( 0.00%)                  if let ty::FnDef(..) = ty.kind() {
        .                               tcx.fn_sig(def_id).visit_with(self)?;
        .                           }
        .                           // Inherent static methods don't have self type in substs.
        .                           // Something like `fn() {my_method}` type of the method
        .                           // `impl Pub<Priv> { pub fn my_method() {} }` is considered a private type,
        .                           // so we need to visit the self type additionally.
  223,808 ( 0.01%)                  if let Some(assoc_item) = tcx.opt_associated_item(def_id) {
   41,294 ( 0.00%)                      if let ty::ImplContainer(impl_def_id) = assoc_item.container {
   20,268 ( 0.00%)                          tcx.type_of(impl_def_id).visit_with(self)?;
        .                               }
        .                           }
        .                       }
       90 ( 0.00%)              ty::Projection(proj) => {
        .                           if self.def_id_visitor.skip_assoc_tys() {
        .                               // Visitors searching for minimal visibility/reachability want to
        .                               // conservatively approximate associated types like `<Type as Trait>::Alias`
        .                               // as visible/reachable even if both `Type` and `Trait` are private.
        .                               // Ideally, associated types should be substituted in the same way as
        .                               // free type aliases, but this isn't done yet.
        .                               return ControlFlow::CONTINUE;
        .                           }
        .                           // This will also visit substs if necessary, so we don't need to recurse.
      450 ( 0.00%)                  return self.visit_projection_ty(proj);
        .                       }
       14 ( 0.00%)              ty::Dynamic(predicates, ..) => {
        .                           // All traits in the list are considered the "primary" part of the type
        .                           // and are visited by shallow visitors.
      112 ( 0.00%)                  for predicate in predicates {
       84 ( 0.00%)                      let trait_ref = match predicate.skip_binder() {
       84 ( 0.00%)                          ty::ExistentialPredicate::Trait(trait_ref) => trait_ref,
        .                                   ty::ExistentialPredicate::Projection(proj) => proj.trait_ref(tcx),
        .                                   ty::ExistentialPredicate::AutoTrait(def_id) => {
        .                                       ty::ExistentialTraitRef { def_id, substs: InternalSubsts::empty() }
        .                                   }
        .                               };
       28 ( 0.00%)                      let ty::ExistentialTraitRef { def_id, substs: _ } = trait_ref;
      168 ( 0.00%)                      self.def_id_visitor.visit_def_id(def_id, "trait", &trait_ref)?;
        .                           }
        .                       }
      858 ( 0.00%)              ty::Opaque(def_id, ..) => {
        .                           // Skip repeated `Opaque`s to avoid infinite recursion.
      858 ( 0.00%)                  if self.visited_opaque_tys.insert(def_id) {
        .                               // The intent is to treat `impl Trait1 + Trait2` identically to
        .                               // `dyn Trait1 + Trait2`. Therefore we ignore def-id of the opaque type itself
        .                               // (it either has no visibility, or its visibility is insignificant, like
        .                               // visibilities of type aliases) and recurse into bounds instead to go
        .                               // through the trait list (default type visitor doesn't visit those traits).
        .                               // All traits in the list are considered the "primary" part of the type
        .                               // and are visited by shallow visitors.
       44 ( 0.00%)                      self.visit_predicates(ty::GenericPredicates {
        .                                   parent: None,
        .                                   predicates: tcx.explicit_item_bounds(def_id),
        .                               })?;
        .                           }
        .                       }
        .                       // These types don't have their own def-ids (but may have subcomponents
        .                       // with def-ids that should be visited recursively).
        .                       ty::Bool
-- line 254 ----------------------------------------
-- line 270 ----------------------------------------
        .                       ty::Bound(..) | ty::Placeholder(..) | ty::Infer(..) => {
        .                           bug!("unexpected type: {:?}", ty)
        .                       }
        .                   }
        .           
        .                   if self.def_id_visitor.shallow() {
        .                       ControlFlow::CONTINUE
        .                   } else {
  474,173 ( 0.01%)              ty.super_visit_with(self)
        .                   }
1,427,101 ( 0.04%)      }
        .           
        .               fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {
  121,152 ( 0.00%)          self.visit_ty(c.ty)?;
   20,192 ( 0.00%)          let tcx = self.def_id_visitor.tcx();
  141,344 ( 0.00%)          if let Ok(Some(ct)) = AbstractConst::from_const(tcx, c) {
        .                       self.visit_abstract_const_expr(tcx, ct)?;
        .                   }
        .                   ControlFlow::CONTINUE
        .               }
        .           }
        .           
        .           fn min(vis1: ty::Visibility, vis2: ty::Visibility, tcx: TyCtxt<'_>) -> ty::Visibility {
      213 ( 0.00%)      if vis1.is_at_least(vis2, tcx) { vis2 } else { vis1 }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           /// Visitor used to determine if pub(restricted) is used anywhere in the crate.
        .           ///
        .           /// This is done so that `private_in_public` warnings can be turned into hard errors
        .           /// in crates that have been updated to use pub(restricted).
        .           ////////////////////////////////////////////////////////////////////////////////
-- line 301 ----------------------------------------
-- line 303 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               has_pub_restricted: bool,
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for PubRestrictedVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               fn nested_visit_map(&mut self) -> Self::Map {
      370 ( 0.00%)          self.tcx.hir()
        .               }
        .               fn visit_vis(&mut self, vis: &'tcx hir::Visibility<'tcx>) {
    1,162 ( 0.00%)          self.has_pub_restricted = self.has_pub_restricted || vis.node.is_pub_restricted();
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           /// Visitor used to determine impl visibility and reachability.
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           struct FindMin<'a, 'tcx, VL: VisibilityLike> {
-- line 322 ----------------------------------------
-- line 336 ----------------------------------------
        .                   true
        .               }
        .               fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   _kind: &str,
        .                   _descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
    2,049 ( 0.00%)          self.min = VL::new_min(self, def_id);
        .                   ControlFlow::CONTINUE
        .               }
        .           }
        .           
        .           trait VisibilityLike: Sized {
        .               const MAX: Self;
        .               const SHALLOW: bool = false;
        .               fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self;
        .           
        .               // Returns an over-approximation (`skip_assoc_tys` = true) of visibility due to
        .               // associated types for which we can't determine visibility precisely.
    1,428 ( 0.00%)      fn of_impl(def_id: LocalDefId, tcx: TyCtxt<'_>, access_levels: &AccessLevels) -> Self {
      680 ( 0.00%)          let mut find = FindMin { tcx, access_levels, min: Self::MAX };
      204 ( 0.00%)          find.visit(tcx.type_of(def_id));
      612 ( 0.00%)          if let Some(trait_ref) = tcx.impl_trait_ref(def_id) {
       61 ( 0.00%)              find.visit_trait(trait_ref);
        .                   }
      164 ( 0.00%)          find.min
    1,632 ( 0.00%)      }
        .           }
        .           impl VisibilityLike for ty::Visibility {
        .               const MAX: Self = ty::Visibility::Public;
    1,400 ( 0.00%)      fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {
      600 ( 0.00%)          min(find.tcx.visibility(def_id), find.min, find.tcx)
    2,000 ( 0.00%)      }
        .           }
        .           impl VisibilityLike for Option<AccessLevel> {
        .               const MAX: Self = Some(AccessLevel::Public);
        .               // Type inference is very smart sometimes.
        .               // It can make an impl reachable even some components of its type or trait are unreachable.
        .               // E.g. methods of `impl ReachableTrait<UnreachableTy> for ReachableTy<UnreachableTy> { ... }`
        .               // can be usable from other crates (#57264). So we skip substs when calculating reachability
        .               // and consider an impl reachable if its "shallow" type and trait are reachable.
        .               //
        .               // The assumption we make here is that type-inference won't let you use an impl without knowing
        .               // both "shallow" version of its self type and "shallow" version of its trait if it exists
        .               // (which require reaching the `DefId`s in them).
        .               const SHALLOW: bool = true;
      774 ( 0.00%)      fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {
        .                   cmp::min(
      774 ( 0.00%)              if let Some(def_id) = def_id.as_local() {
      272 ( 0.00%)                  find.access_levels.map.get(&def_id).copied()
        .                       } else {
        .                           Self::MAX
        .                       },
      478 ( 0.00%)              find.min,
        .                   )
    1,032 ( 0.00%)      }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           /// The embargo visitor, used to determine the exports of the AST.
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           struct EmbargoVisitor<'tcx> {
        .               tcx: TyCtxt<'tcx>,
-- line 400 ----------------------------------------
-- line 422 ----------------------------------------
        .           
        .           struct ReachEverythingInTheInterfaceVisitor<'a, 'tcx> {
        .               access_level: Option<AccessLevel>,
        .               item_def_id: LocalDefId,
        .               ev: &'a mut EmbargoVisitor<'tcx>,
        .           }
        .           
        .           impl<'tcx> EmbargoVisitor<'tcx> {
    2,160 ( 0.00%)      fn get(&self, def_id: LocalDefId) -> Option<AccessLevel> {
        .                   self.access_levels.map.get(&def_id).copied()
    2,160 ( 0.00%)      }
        .           
        .               fn update_with_hir_id(
        .                   &mut self,
        .                   hir_id: hir::HirId,
        .                   level: Option<AccessLevel>,
        .               ) -> Option<AccessLevel> {
      578 ( 0.00%)          let def_id = self.tcx.hir().local_def_id(hir_id);
        .                   self.update(def_id, level)
        .               }
        .           
        .               /// Updates node level and returns the updated level.
        .               fn update(&mut self, def_id: LocalDefId, level: Option<AccessLevel>) -> Option<AccessLevel> {
    2,428 ( 0.00%)          let old_level = self.get(def_id);
        .                   // Accessibility levels can only grow.
        .                   if level > old_level {
        .                       self.access_levels.map.insert(def_id, level.unwrap());
       73 ( 0.00%)              self.changed = true;
        .                       level
        .                   } else {
        .                       old_level
        .                   }
        .               }
        .           
        .               fn reach(
        .                   &mut self,
-- line 457 ----------------------------------------
-- line 458 ----------------------------------------
        .                   def_id: LocalDefId,
        .                   access_level: Option<AccessLevel>,
        .               ) -> ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {
        .                   ReachEverythingInTheInterfaceVisitor {
        .                       access_level: cmp::min(access_level, Some(AccessLevel::Reachable)),
        .                       item_def_id: def_id,
        .                       ev: self,
        .                   }
      548 ( 0.00%)      }
        .           
        .               // We have to make sure that the items that macros might reference
        .               // are reachable, since they might be exported transitively.
        .               fn update_reachability_from_macro(&mut self, local_def_id: LocalDefId, md: &MacroDef) {
        .                   // Non-opaque macros cannot make other items more accessible than they already are.
        .           
        .                   let hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);
        .                   let attrs = self.tcx.hir().attrs(hir_id);
-- line 474 ----------------------------------------
-- line 630 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
      740 ( 0.00%)          self.tcx.hir()
        .               }
        .           
    2,304 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
      512 ( 0.00%)          let item_level = match item.kind {
        .                       hir::ItemKind::Impl { .. } => {
        .                           let impl_level =
      816 ( 0.00%)                      Option::<AccessLevel>::of_impl(item.def_id, self.tcx, &self.access_levels);
      136 ( 0.00%)                  self.update(item.def_id, impl_level)
        .                       }
      480 ( 0.00%)              _ => self.get(item.def_id),
        .                   };
        .           
        .                   // Update levels of nested things.
    1,308 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::Enum(ref def, _) => {
        6 ( 0.00%)                  for variant in def.variants {
      150 ( 0.00%)                      let variant_level = self.update_with_hir_id(variant.id, item_level);
      200 ( 0.00%)                      if let Some(ctor_hir_id) = variant.data.ctor_hir_id() {
        .                                   self.update_with_hir_id(ctor_hir_id, item_level);
        .                               }
      100 ( 0.00%)                      for field in variant.data.fields() {
        8 ( 0.00%)                          self.update_with_hir_id(field.hir_id, variant_level);
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::Impl(ref impl_) => {
      408 ( 0.00%)                  for impl_item_ref in impl_.items {
      754 ( 0.00%)                      if impl_.of_trait.is_some()
      112 ( 0.00%)                          || self.tcx.visibility(impl_item_ref.id.def_id) == ty::Visibility::Public
        .                               {
      304 ( 0.00%)                          self.update(impl_item_ref.id.def_id, item_level);
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::Trait(.., trait_item_refs) => {
        .                           for trait_item_ref in trait_item_refs {
        .                               self.update(trait_item_ref.id.def_id, item_level);
        .                           }
        .                       }
        .                       hir::ItemKind::Struct(ref def, _) | hir::ItemKind::Union(ref def, _) => {
       56 ( 0.00%)                  if let Some(ctor_hir_id) = def.ctor_hir_id() {
        .                               self.update_with_hir_id(ctor_hir_id, item_level);
        .                           }
       28 ( 0.00%)                  for field in def.fields() {
      120 ( 0.00%)                      if field.vis.node.is_pub() {
        .                                   self.update_with_hir_id(field.hir_id, item_level);
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::Macro(ref macro_def) => {
        .                           self.update_reachability_from_macro(item.def_id, macro_def);
        .                       }
        .                       hir::ItemKind::ForeignMod { items, .. } => {
-- line 691 ----------------------------------------
-- line 704 ----------------------------------------
        .                       | hir::ItemKind::TyAlias(..)
        .                       | hir::ItemKind::Mod(..)
        .                       | hir::ItemKind::TraitAlias(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::ExternCrate(..) => {}
        .                   }
        .           
        .                   // Mark all items in interfaces of reachable items as reachable.
    1,280 ( 0.00%)          match item.kind {
        .                       // The interface is empty.
        .                       hir::ItemKind::Macro(..) | hir::ItemKind::ExternCrate(..) => {}
        .                       // All nested items are checked by `visit_item`.
        .                       hir::ItemKind::Mod(..) => {}
        .                       // Handled in the access level of in rustc_resolve
        .                       hir::ItemKind::Use(..) => {}
        .                       // The interface is empty.
        .                       hir::ItemKind::GlobalAsm(..) => {}
        .                       hir::ItemKind::OpaqueTy(..) => {
        .                           // HACK(jynelson): trying to infer the type of `impl trait` breaks `async-std` (and `pub async fn` in general)
        .                           // Since rustdoc never needs to do codegen and doesn't care about link-time reachability,
        .                           // mark this as unreachable.
        .                           // See https://github.com/rust-lang/rust/issues/75100
       56 ( 0.00%)                  if !self.tcx.sess.opts.actually_rustdoc {
        .                               // FIXME: This is some serious pessimization intended to workaround deficiencies
        .                               // in the reachability pass (`middle/reachable.rs`). Types are marked as link-time
        .                               // reachable if they are returned via `impl Trait`, even from private functions.
        .                               let exist_level =
        .                                   cmp::max(item_level, Some(AccessLevel::ReachableFromImplTrait));
       42 ( 0.00%)                      self.reach(item.def_id, exist_level).generics().predicates().ty();
        .                           }
        .                       }
        .                       // Visit everything.
        .                       hir::ItemKind::Const(..)
        .                       | hir::ItemKind::Static(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::TyAlias(..) => {
       62 ( 0.00%)                  if item_level.is_some() {
        .                               self.reach(item.def_id, item_level).generics().predicates().ty();
        .                           }
        .                       }
        .                       hir::ItemKind::Trait(.., trait_item_refs) => {
        .                           if item_level.is_some() {
        .                               self.reach(item.def_id, item_level).generics().predicates();
        .           
        .                               for trait_item_ref in trait_item_refs {
-- line 748 ----------------------------------------
-- line 761 ----------------------------------------
        .                       }
        .                       hir::ItemKind::TraitAlias(..) => {
        .                           if item_level.is_some() {
        .                               self.reach(item.def_id, item_level).generics().predicates();
        .                           }
        .                       }
        .                       // Visit everything except for private impl items.
        .                       hir::ItemKind::Impl(ref impl_) => {
      136 ( 0.00%)                  if item_level.is_some() {
      560 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates().ty().trait_ref();
        .           
       56 ( 0.00%)                      for impl_item_ref in impl_.items {
      252 ( 0.00%)                          let impl_item_level = self.get(impl_item_ref.id.def_id);
      324 ( 0.00%)                          if impl_item_level.is_some() {
      820 ( 0.00%)                              self.reach(impl_item_ref.id.def_id, impl_item_level)
        .                                           .generics()
        .                                           .predicates()
        .                                           .ty();
        .                                   }
        .                               }
        .                           }
        .                       }
        .           
        .                       // Visit everything, but enum variants have their own levels.
        .                       hir::ItemKind::Enum(ref def, _) => {
        6 ( 0.00%)                  if item_level.is_some() {
       32 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
        .                           }
        6 ( 0.00%)                  for variant in def.variants {
      450 ( 0.00%)                      let variant_level = self.get(self.tcx.hir().local_def_id(variant.id));
       50 ( 0.00%)                      if variant_level.is_some() {
       72 ( 0.00%)                          for field in variant.data.fields() {
        .                                       self.reach(self.tcx.hir().local_def_id(field.hir_id), variant_level)
        .                                           .ty();
        .                                   }
        .                                   // Corner case: if the variant is reachable, but its
        .                                   // enum is not, make the enum reachable as well.
       72 ( 0.00%)                          self.update(item.def_id, variant_level);
        .                               }
        .                           }
        .                       }
        .                       // Visit everything, but foreign items have their own levels.
        .                       hir::ItemKind::ForeignMod { items, .. } => {
        .                           for foreign_item in items {
        .                               let foreign_item_level = self.get(foreign_item.id.def_id);
        .                               if foreign_item_level.is_some() {
-- line 806 ----------------------------------------
-- line 808 ----------------------------------------
        .                                       .generics()
        .                                       .predicates()
        .                                       .ty();
        .                               }
        .                           }
        .                       }
        .                       // Visit everything except for private fields.
        .                       hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {
       14 ( 0.00%)                  if item_level.is_some() {
       32 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
        8 ( 0.00%)                      for field in struct_def.fields() {
      112 ( 0.00%)                          let def_id = self.tcx.hir().local_def_id(field.hir_id);
       48 ( 0.00%)                          let field_level = self.get(def_id);
       16 ( 0.00%)                          if field_level.is_some() {
        .                                       self.reach(def_id, field_level).ty();
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
        .           
        .                   let orig_level = mem::replace(&mut self.prev_level, item_level);
      768 ( 0.00%)          intravisit::walk_item(self, item);
      256 ( 0.00%)          self.prev_level = orig_level;
    2,048 ( 0.00%)      }
        .           
        .               fn visit_block(&mut self, b: &'tcx hir::Block<'tcx>) {
        .                   // Blocks can have public items, for example impls, but they always
        .                   // start as completely private regardless of publicity of a function,
        .                   // constant, type, field, etc., in which this block resides.
        .                   let orig_level = mem::replace(&mut self.prev_level, None);
        .                   intravisit::walk_block(self, b);
        .                   self.prev_level = orig_level;
        .               }
        .           }
        .           
        .           impl ReachEverythingInTheInterfaceVisitor<'_, '_> {
    1,120 ( 0.00%)      fn generics(&mut self) -> &mut Self {
      640 ( 0.00%)          for param in &self.ev.tcx.generics_of(self.item_def_id).params {
      180 ( 0.00%)              match param.kind {
        .                           GenericParamDefKind::Lifetime => {}
        2 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
        2 ( 0.00%)                      if has_default {
        .                                   self.visit(self.ev.tcx.type_of(param.def_id));
        .                               }
        .                           }
        .                           GenericParamDefKind::Const { has_default, .. } => {
        .                               self.visit(self.ev.tcx.type_of(param.def_id));
        .                               if has_default {
        .                                   self.visit(self.ev.tcx.const_param_default(param.def_id));
        .                               }
        .                           }
        .                       }
        .                   }
        .                   self
    1,440 ( 0.00%)      }
        .           
      800 ( 0.00%)      fn predicates(&mut self) -> &mut Self {
      480 ( 0.00%)          self.visit_predicates(self.ev.tcx.predicates_of(self.item_def_id));
        .                   self
      960 ( 0.00%)      }
        .           
      760 ( 0.00%)      fn ty(&mut self) -> &mut Self {
      456 ( 0.00%)          self.visit(self.ev.tcx.type_of(self.item_def_id));
        .                   self
      912 ( 0.00%)      }
        .           
        .               fn trait_ref(&mut self) -> &mut Self {
      336 ( 0.00%)          if let Some(trait_ref) = self.ev.tcx.impl_trait_ref(self.item_def_id) {
        .                       self.visit_trait(trait_ref);
        .                   }
        .                   self
        .               }
        .           }
        .           
        .           impl<'tcx> DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
    2,324 ( 0.00%)          self.ev.tcx
        .               }
    2,730 ( 0.00%)      fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   _kind: &str,
        .                   _descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
    1,638 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
    1,533 ( 0.00%)              if let (ty::Visibility::Public, _) | (_, Some(AccessLevel::ReachableFromImplTrait)) =
      384 ( 0.00%)                  (self.tcx().visibility(def_id.to_def_id()), self.access_level)
        .                       {
        .                           self.ev.update(def_id, self.access_level);
        .                       }
        .                   }
        .                   ControlFlow::CONTINUE
    3,822 ( 0.00%)      }
        .           }
        .           
        .           //////////////////////////////////////////////////////////////////////////////////////
        .           /// Name privacy visitor, checks privacy and reports violations.
        .           /// Most of name privacy checks are performed during the main resolution phase,
        .           /// or later in type checking when field accesses and associated items are resolved.
        .           /// This pass performs remaining checks for fields in struct expressions and patterns.
        .           //////////////////////////////////////////////////////////////////////////////////////
-- line 909 ----------------------------------------
-- line 920 ----------------------------------------
        .               /// `Expr` or `Pat` nodes (they are guaranteed to be found only in bodies).
        .               #[track_caller]
        .               fn typeck_results(&self) -> &'tcx ty::TypeckResults<'tcx> {
        .                   self.maybe_typeck_results
        .                       .expect("`NamePrivacyVisitor::typeck_results` called outside of body")
        .               }
        .           
        .               // Checks that a field in a struct constructor (expression or pattern) is accessible.
    1,350 ( 0.00%)      fn check_field(
        .                   &mut self,
        .                   use_ctxt: Span,        // syntax context of the field name at the use site
        .                   span: Span,            // span of the field pattern, e.g., `x: 0`
        .                   def: &'tcx ty::AdtDef, // definition of the struct or enum
        .                   field: &'tcx ty::FieldDef,
        .                   in_update_syntax: bool,
        .               ) {
      270 ( 0.00%)          if def.is_enum() {
        .                       return;
        .                   }
        .           
        .                   // definition of the field
        .                   let ident = Ident::new(kw::Empty, use_ctxt);
      216 ( 0.00%)          let hir_id = self.tcx.hir().local_def_id_to_hir_id(self.current_item);
      756 ( 0.00%)          let def_id = self.tcx.adjust_ident_and_get_scope(ident, def.did, hir_id).1;
      108 ( 0.00%)          if !field.vis.is_accessible_from(def_id, self.tcx) {
        .                       let label = if in_update_syntax {
        .                           format!("field `{}` is private", field.name)
        .                       } else {
        .                           "private field".to_string()
        .                       };
        .           
        .                       struct_span_err!(
        .                           self.tcx.sess,
-- line 952 ----------------------------------------
-- line 955 ----------------------------------------
        .                           "field `{}` of {} `{}` is private",
        .                           field.name,
        .                           def.variant_descr(),
        .                           self.tcx.def_path_str(def.did)
        .                       )
        .                       .span_label(span, label)
        .                       .emit();
        .                   }
    1,080 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for NamePrivacyVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
      210 ( 0.00%)          self.tcx.hir()
        .               }
        .           
        .               fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {
        .                   // Don't visit nested modules, since we run a separate visitor walk
        .                   // for each module in `privacy_access_levels`
        .               }
        .           
        .               fn visit_nested_body(&mut self, body: hir::BodyId) {
        .                   let old_maybe_typeck_results =
      845 ( 0.00%)              self.maybe_typeck_results.replace(self.tcx.typeck_body(body));
      948 ( 0.00%)          let body = self.tcx.hir().body(body);
        .                   self.visit_body(body);
       81 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
        .               }
        .           
        .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
      128 ( 0.00%)          let orig_current_item = mem::replace(&mut self.current_item, item.def_id);
      382 ( 0.00%)          intravisit::walk_item(self, item);
      128 ( 0.00%)          self.current_item = orig_current_item;
        .               }
        .           
  576,837 ( 0.01%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
  128,186 ( 0.00%)          if let hir::ExprKind::Struct(qpath, fields, ref base) = expr.kind {
      174 ( 0.00%)              let res = self.typeck_results().qpath_res(qpath, expr.hir_id);
       87 ( 0.00%)              let adt = self.typeck_results().expr_ty(expr).ty_adt_def().unwrap();
      261 ( 0.00%)              let variant = adt.variant_of_res(res);
      116 ( 0.00%)              if let Some(base) = *base {
        .                           // If the expression uses FRU we need to make sure all the unmentioned fields
        .                           // are checked for privacy (RFC 736). Rather than computing the set of
        .                           // unmentioned fields, just check them all.
        .                           for (vf_index, variant_field) in variant.fields.iter().enumerate() {
        .                               let field = fields.iter().find(|f| {
        .                                   self.tcx.field_index(f.hir_id, self.typeck_results()) == vf_index
        .                               });
        .                               let (use_ctxt, span) = match field {
        .                                   Some(field) => (field.ident.span, field.span),
        .                                   None => (base.span, base.span),
        .                               };
        .                               self.check_field(use_ctxt, span, adt, variant_field, true);
        .                           }
        .                       } else {
        .                           for field in fields {
       63 ( 0.00%)                      let use_ctxt = field.ident.span;
      460 ( 0.00%)                      let index = self.tcx.field_index(field.hir_id, self.typeck_results());
      693 ( 0.00%)                      self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);
        .                           }
        .                       }
        .                   }
        .           
  640,930 ( 0.02%)          intravisit::walk_expr(self, expr);
        .               }
        .           
    4,856 ( 0.00%)      fn visit_pat(&mut self, pat: &'tcx hir::Pat<'tcx>) {
    1,251 ( 0.00%)          if let PatKind::Struct(ref qpath, fields, _) = pat.kind {
      259 ( 0.00%)              let res = self.typeck_results().qpath_res(qpath, pat.hir_id);
      148 ( 0.00%)              let adt = self.typeck_results().pat_ty(pat).ty_adt_def().unwrap();
      296 ( 0.00%)              let variant = adt.variant_of_res(res);
        .                       for field in fields {
       72 ( 0.00%)                  let use_ctxt = field.ident.span;
      450 ( 0.00%)                  let index = self.tcx.field_index(field.hir_id, self.typeck_results());
      720 ( 0.00%)                  self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);
        .                       }
        .                   }
        .           
    5,463 ( 0.00%)          intravisit::walk_pat(self, pat);
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////////////////
        .           /// Type privacy visitor, checks types for privacy and reports violations.
        .           /// Both explicitly written types and inferred types of expressions and patterns are checked.
        .           /// Checks are performed on "semantic" types regardless of names and their hygiene.
        .           ////////////////////////////////////////////////////////////////////////////////////////////
-- line 1045 ----------------------------------------
-- line 1061 ----------------------------------------
        .                       .expect("`TypePrivacyVisitor::typeck_results` called outside of body")
        .               }
        .           
        .               fn item_is_accessible(&self, did: DefId) -> bool {
        .                   self.tcx.visibility(did).is_accessible_from(self.current_item.to_def_id(), self.tcx)
        .               }
        .           
        .               // Take node-id of an expression or pattern and check its type for privacy.
  453,964 ( 0.01%)      fn check_expr_pat_type(&mut self, id: hir::HirId, span: Span) -> bool {
   64,852 ( 0.00%)          self.span = span;
   64,852 ( 0.00%)          let typeck_results = self.typeck_results();
        .                   let result: ControlFlow<()> = try {
  259,408 ( 0.01%)              self.visit(typeck_results.node_type(id))?;
  518,816 ( 0.01%)              self.visit(typeck_results.node_substs(id))?;
  583,668 ( 0.01%)              if let Some(adjustments) = typeck_results.adjustments().get(id) {
        .                           adjustments.iter().try_for_each(|adjustment| self.visit(adjustment.target))?;
        .                       }
        .                   };
        .                   result.is_break()
  518,816 ( 0.01%)      }
        .           
        .               fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {
  109,802 ( 0.00%)          let is_error = !self.item_is_accessible(def_id);
        .                   if is_error {
        .                       self.tcx
        .                           .sess
        .                           .struct_span_err(self.span, &format!("{} `{}` is private", kind, descr))
        .                           .span_label(self.span, &format!("private {}", kind))
        .                           .emit();
        .                   }
        .                   is_error
-- line 1091 ----------------------------------------
-- line 1093 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
      210 ( 0.00%)          self.tcx.hir()
        .               }
        .           
        .               fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {
        .                   // Don't visit nested modules, since we run a separate visitor walk
        .                   // for each module in `privacy_access_levels`
        .               }
        .           
    1,580 ( 0.00%)      fn visit_nested_body(&mut self, body: hir::BodyId) {
        .                   let old_maybe_typeck_results =
      474 ( 0.00%)              self.maybe_typeck_results.replace(self.tcx.typeck_body(body));
      948 ( 0.00%)          let body = self.tcx.hir().body(body);
        .                   self.visit_body(body);
      158 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
    1,264 ( 0.00%)      }
        .           
        .               fn visit_generic_arg(&mut self, generic_arg: &'tcx hir::GenericArg<'tcx>) {
      515 ( 0.00%)          match generic_arg {
      196 ( 0.00%)              hir::GenericArg::Type(t) => self.visit_ty(t),
        .                       hir::GenericArg::Infer(inf) => self.visit_infer(inf),
        .                       hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}
        .                   }
        .               }
        .           
   74,396 ( 0.00%)      fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'tcx>) {
   21,256 ( 0.00%)          self.span = hir_ty.span;
   31,884 ( 0.00%)          if let Some(typeck_results) = self.maybe_typeck_results {
        .                       // Types in bodies.
   30,141 ( 0.00%)              if self.visit(typeck_results.node_type(hir_ty.hir_id)).is_break() {
        .                           return;
        .                       }
        .                   } else {
        .                       // Types in signatures.
        .                       // FIXME: This is very ineffective. Ideally each HIR type should be converted
        .                       // into a semantic type only once and the result should be cached somehow.
    1,743 ( 0.00%)              if self.visit(rustc_typeck::hir_ty_to_ty(self.tcx, hir_ty)).is_break() {
        .                           return;
        .                       }
        .                   }
        .           
   31,884 ( 0.00%)          intravisit::walk_ty(self, hir_ty);
   63,768 ( 0.00%)      }
        .           
        .               fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {
        .                   self.span = inf.span;
        .                   if let Some(typeck_results) = self.maybe_typeck_results {
        .                       if let Some(ty) = typeck_results.node_type_opt(inf.hir_id) {
        .                           if self.visit(ty).is_break() {
        .                               return;
        .                           }
-- line 1150 ----------------------------------------
-- line 1152 ----------------------------------------
        .                           // We don't do anything for const infers here.
        .                       }
        .                   } else {
        .                       bug!("visit_infer without typeck_results");
        .                   }
        .                   intravisit::walk_inf(self, inf);
        .               }
        .           
      640 ( 0.00%)      fn visit_trait_ref(&mut self, trait_ref: &'tcx hir::TraitRef<'tcx>) {
      240 ( 0.00%)          self.span = trait_ref.path.span;
       80 ( 0.00%)          if self.maybe_typeck_results.is_none() {
        .                       // Avoid calling `hir_trait_to_predicates` in bodies, it will ICE.
        .                       // The traits' privacy in bodies is already checked as a part of trait object types.
       80 ( 0.00%)              let bounds = rustc_typeck::hir_trait_to_predicates(
       80 ( 0.00%)                  self.tcx,
        .                           trait_ref,
        .                           // NOTE: This isn't really right, but the actual type doesn't matter here. It's
        .                           // just required by `ty::TraitRef`.
      240 ( 0.00%)                  self.tcx.types.never,
        .                       );
        .           
      720 ( 0.00%)              for (trait_predicate, _, _) in bounds.trait_bounds {
      560 ( 0.00%)                  if self.visit_trait(trait_predicate.skip_binder()).is_break() {
        .                               return;
        .                           }
        .                       }
        .           
      550 ( 0.00%)              for (poly_predicate, _) in bounds.projection_bounds {
       60 ( 0.00%)                  let pred = poly_predicate.skip_binder();
        .                           let poly_pred_term = self.visit(pred.term);
       40 ( 0.00%)                  if poly_pred_term.is_break()
        .                               || self.visit_projection_ty(pred.projection_ty).is_break()
        .                           {
        .                               return;
        .                           }
        .                       }
        .                   }
        .           
        .                   intravisit::walk_trait_ref(self, trait_ref);
      640 ( 0.00%)      }
        .           
        .               // Check types of expressions
  576,837 ( 0.01%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
  576,837 ( 0.01%)          if self.check_expr_pat_type(expr.hir_id, expr.span) {
        .                       // Do not check nested expressions if the error already happened.
        .                       return;
        .                   }
  447,677 ( 0.01%)          match expr.kind {
      121 ( 0.00%)              hir::ExprKind::Assign(_, rhs, _) | hir::ExprKind::Match(rhs, ..) => {
        .                           // Do not report duplicate errors for `x = y` and `match x { ... }`.
      644 ( 0.00%)                  if self.check_expr_pat_type(rhs.hir_id, rhs.span) {
        .                               return;
        .                           }
        .                       }
      212 ( 0.00%)              hir::ExprKind::MethodCall(segment, ..) => {
        .                           // Method calls have to be checked specially.
      424 ( 0.00%)                  self.span = segment.ident.span;
    1,272 ( 0.00%)                  if let Some(def_id) = self.typeck_results().type_dependent_def_id(expr.hir_id) {
      636 ( 0.00%)                      if self.visit(self.tcx.type_of(def_id)).is_break() {
        .                                   return;
        .                               }
        .                           } else {
        .                               self.tcx
        .                                   .sess
        .                                   .delay_span_bug(expr.span, "no type-dependent def for method call");
        .                           }
        .                       }
        .                       _ => {}
        .                   }
        .           
  192,279 ( 0.00%)          intravisit::walk_expr(self, expr);
  512,744 ( 0.01%)      }
        .           
        .               // Prohibit access to associated items with insufficient nominal visibility.
        .               //
        .               // Additionally, until better reachability analysis for macros 2.0 is available,
        .               // we prohibit access to private statics from other crates, this allows to give
        .               // more code internal visibility at link time. (Access to private functions
        .               // is already prohibited by type privacy for function types.)
  214,130 ( 0.01%)      fn visit_qpath(&mut self, qpath: &'tcx hir::QPath<'tcx>, id: hir::HirId, span: Span) {
   42,826 ( 0.00%)          let def = match qpath {
   34,158 ( 0.00%)              hir::QPath::Resolved(_, path) => match path.res {
   63,030 ( 0.00%)                  Res::Def(kind, def_id) => Some((kind, def_id)),
        .                           _ => None,
        .                       },
   10,027 ( 0.00%)              hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
        .                           .maybe_typeck_results
   90,243 ( 0.00%)                  .and_then(|typeck_results| typeck_results.type_dependent_def(id)),
        .                   };
        .                   let def = def.filter(|(kind, _)| {
   41,064 ( 0.00%)              matches!(
        .                           kind,
        .                           DefKind::AssocFn | DefKind::AssocConst | DefKind::AssocTy | DefKind::Static
        .                       )
        .                   });
        .                   if let Some((kind, def_id)) = def {
        .                       let is_local_static =
   39,980 ( 0.00%)                  if let DefKind::Static = kind { def_id.is_local() } else { false };
   59,690 ( 0.00%)              if !self.item_is_accessible(def_id) && !is_local_static {
        .                           let sess = self.tcx.sess;
        .                           let sm = sess.source_map();
        .                           let name = match qpath {
        .                               hir::QPath::Resolved(..) | hir::QPath::LangItem(..) => {
        .                                   sm.span_to_snippet(qpath.span()).ok()
        .                               }
        .                               hir::QPath::TypeRelative(_, segment) => Some(segment.ident.to_string()),
        .                           };
-- line 1258 ----------------------------------------
-- line 1263 ----------------------------------------
        .                           };
        .                           sess.struct_span_err(span, &msg)
        .                               .span_label(span, &format!("private {}", kind))
        .                               .emit();
        .                           return;
        .                       }
        .                   }
        .           
  235,543 ( 0.01%)          intravisit::walk_qpath(self, qpath, id, span);
        .               }
        .           
        .               // Check types of patterns.
        .               fn visit_pat(&mut self, pattern: &'tcx hir::Pat<'tcx>) {
    3,808 ( 0.00%)          if self.check_expr_pat_type(pattern.hir_id, pattern.span) {
        .                       // Do not check nested patterns if the error already happened.
        .                       return;
        .                   }
        .           
    2,019 ( 0.00%)          intravisit::walk_pat(self, pattern);
        .               }
        .           
      375 ( 0.00%)      fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>) {
      225 ( 0.00%)          if let Some(init) = local.init {
      420 ( 0.00%)              if self.check_expr_pat_type(init.hir_id, init.span) {
        .                           // Do not report duplicate errors for `let x = y`.
        .                           return;
        .                       }
        .                   }
        .           
        .                   intravisit::walk_local(self, local);
      232 ( 0.00%)      }
        .           
        .               // Check types in item interfaces.
        .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
      128 ( 0.00%)          let orig_current_item = mem::replace(&mut self.current_item, item.def_id);
        .                   let old_maybe_typeck_results = self.maybe_typeck_results.take();
      382 ( 0.00%)          intravisit::walk_item(self, item);
      128 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
      142 ( 0.00%)          self.current_item = orig_current_item;
        .               }
        .           }
        .           
        .           impl<'tcx> DefIdVisitor<'tcx> for TypePrivacyVisitor<'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
  354,600 ( 0.01%)          self.tcx
        .               }
  823,515 ( 0.02%)      fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   kind: &str,
        .                   descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
        .                   if self.check_def_id(def_id, kind, descr) {
        .                       ControlFlow::BREAK
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
  494,109 ( 0.01%)      }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////////
        .           /// Obsolete visitors for checking for private items in public interfaces.
        .           /// These visitors are supposed to be kept in frozen state and produce an
        .           /// "old error node set". For backward compatibility the new visitor reports
        .           /// warnings instead of hard errors when the erroneous node is not in this old set.
        .           ///////////////////////////////////////////////////////////////////////////////
-- line 1328 ----------------------------------------
-- line 1342 ----------------------------------------
        .               /// Whether we've recurred at all (i.e., if we're pointing at the
        .               /// first type on which `visit_ty` was called).
        .               at_outer_type: bool,
        .               /// Whether that first type is a public path.
        .               outer_type_is_public_path: bool,
        .           }
        .           
        .           impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {
      140 ( 0.00%)      fn path_is_private_type(&self, path: &hir::Path<'_>) -> bool {
      420 ( 0.00%)          let did = match path.res {
        .                       Res::PrimTy(..) | Res::SelfTy(..) | Res::Err => return false,
      564 ( 0.00%)              res => res.def_id(),
        .                   };
        .           
        .                   // A path can only be private if:
        .                   // it's in this crate...
       94 ( 0.00%)          if let Some(did) = did.as_local() {
        .                       // .. and it corresponds to a private type in the AST (this returns
        .                       // `None` for type parameters).
      420 ( 0.00%)              match self.tcx.hir().find(self.tcx.hir().local_def_id_to_hir_id(did)) {
      336 ( 0.00%)                  Some(Node::Item(item)) => !item.vis.node.is_pub(),
        .                           Some(_) | None => false,
        .                       }
        .                   } else {
        .                       false
        .                   }
      280 ( 0.00%)      }
        .           
        .               fn trait_is_public(&self, trait_id: LocalDefId) -> bool {
        .                   // FIXME: this would preferably be using `exported_items`, but all
        .                   // traits are exported currently (see `EmbargoVisitor.exported_trait`).
        .                   self.access_levels.is_public(trait_id)
        .               }
        .           
        .               fn check_generic_bound(&mut self, bound: &hir::GenericBound<'_>) {
-- line 1376 ----------------------------------------
-- line 1377 ----------------------------------------
        .                   if let hir::GenericBound::Trait(ref trait_ref, _) = *bound {
        .                       if self.path_is_private_type(trait_ref.trait_ref.path) {
        .                           self.old_error_set.insert(trait_ref.trait_ref.hir_ref_id);
        .                       }
        .                   }
        .               }
        .           
        .               fn item_is_public(&self, def_id: LocalDefId, vis: &hir::Visibility<'_>) -> bool {
      104 ( 0.00%)          self.access_levels.is_reachable(def_id) || vis.node.is_pub()
        .               }
        .           }
        .           
        .           impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {
        .               fn visit_generic_arg(&mut self, generic_arg: &'v hir::GenericArg<'v>) {
        .                   match generic_arg {
        .                       hir::GenericArg::Type(t) => self.visit_ty(t),
        .                       hir::GenericArg::Infer(inf) => self.visit_ty(&inf.to_ty()),
        .                       hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}
        .                   }
        .               }
        .           
        .               fn visit_ty(&mut self, ty: &hir::Ty<'_>) {
      320 ( 0.00%)          if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = ty.kind {
      256 ( 0.00%)              if self.inner.path_is_private_type(path) {
        .                           self.contains_private = true;
        .                           // Found what we're looking for, so let's stop working.
        .                           return;
        .                       }
        .                   }
        .                   if let hir::TyKind::Path(_) = ty.kind {
        .                       if self.at_outer_type {
       59 ( 0.00%)                  self.outer_type_is_public_path = true;
        .                       }
        .                   }
      118 ( 0.00%)          self.at_outer_type = false;
      118 ( 0.00%)          intravisit::walk_ty(self, ty)
      236 ( 0.00%)      }
        .           
        .               // Don't want to recurse into `[, .. expr]`.
        .               fn visit_expr(&mut self, _: &hir::Expr<'_>) {}
        .           }
        .           
        .           impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
      166 ( 0.00%)          self.tcx.hir()
        .               }
        .           
    1,062 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
      472 ( 0.00%)          match item.kind {
        .                       // Contents of a private mod can be re-exported, so we need
        .                       // to check internals.
        .                       hir::ItemKind::Mod(_) => {}
        .           
        .                       // An `extern {}` doesn't introduce a new privacy
        .                       // namespace (the contents have their own privacies).
        .                       hir::ItemKind::ForeignMod { .. } => {}
        .           
-- line 1437 ----------------------------------------
-- line 1454 ----------------------------------------
        .                           // `impl [... for] Private` is never visible.
        .                           let self_contains_private;
        .                           // `impl [... for] Public<...>`, but not `impl [... for]
        .                           // Vec<Public>` or `(Public,)`, etc.
        .                           let self_is_public_path;
        .           
        .                           // Check the properties of the `Self` type:
        .                           {
      256 ( 0.00%)                      let mut visitor = ObsoleteCheckTypeForPrivatenessVisitor {
        .                                   inner: self,
        .                                   contains_private: false,
        .                                   at_outer_type: true,
        .                                   outer_type_is_public_path: false,
        .                               };
       64 ( 0.00%)                      visitor.visit_ty(impl_.self_ty);
        .                               self_contains_private = visitor.contains_private;
        .                               self_is_public_path = visitor.outer_type_is_public_path;
        .                           }
        .           
        .                           // Miscellaneous info about the impl:
        .           
        .                           // `true` iff this is `impl Private for ...`.
        .                           let not_private_trait = impl_.of_trait.as_ref().map_or(
        .                               true, // no trait counts as public trait
        .                               |tr| {
      171 ( 0.00%)                          if let Some(def_id) = tr.path.res.def_id().as_local() {
        .                                       self.trait_is_public(def_id)
        .                                   } else {
        .                                       true // external traits must be public
        .                                   }
        .                               },
        .                           );
        .           
        .                           // `true` iff this is a trait impl or at least one method is public.
-- line 1487 ----------------------------------------
-- line 1488 ----------------------------------------
        .                           //
        .                           // `impl Public { $( fn ...() {} )* }` is not visible.
        .                           //
        .                           // This is required over just using the methods' privacy
        .                           // directly because we might have `impl<T: Foo<Private>> ...`,
        .                           // and we shouldn't warn about the generics if all the methods
        .                           // are private (because `T` won't be visible externally).
        .                           let trait_or_some_public_method = impl_.of_trait.is_some()
        7 ( 0.00%)                      || impl_.items.iter().any(|impl_item_ref| {
       36 ( 0.00%)                          let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
       53 ( 0.00%)                          match impl_item.kind {
        .                                       hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..) => {
        .                                           self.access_levels.is_reachable(impl_item_ref.id.def_id)
        .                                       }
        .                                       hir::ImplItemKind::TyAlias(_) => false,
        .                                   }
        .                               });
        .           
      116 ( 0.00%)                  if !self_contains_private && not_private_trait && trait_or_some_public_method {
        .                               intravisit::walk_generics(self, &impl_.generics);
        .           
      112 ( 0.00%)                      match impl_.of_trait {
        .                                   None => {
        1 ( 0.00%)                              for impl_item_ref in impl_.items {
        .                                           // This is where we choose whether to walk down
        .                                           // further into the impl to check its items. We
        .                                           // should only walk into public items so that we
        .                                           // don't erroneously report errors for private
        .                                           // types in private items.
      120 ( 0.00%)                                  let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
      105 ( 0.00%)                                  match impl_item.kind {
        .                                               hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..)
       40 ( 0.00%)                                          if self
       20 ( 0.00%)                                              .item_is_public(impl_item.def_id, &impl_item.vis) =>
        .                                               {
        .                                                   intravisit::walk_impl_item(self, impl_item)
        .                                               }
        .                                               hir::ImplItemKind::TyAlias(..) => {
        .                                                   intravisit::walk_impl_item(self, impl_item)
        .                                               }
        .                                               _ => {}
        .                                           }
-- line 1529 ----------------------------------------
-- line 1538 ----------------------------------------
        .                                       //
        .                                       // Those in 1. can only occur if the trait is in
        .                                       // this crate and will've been warned about on the
        .                                       // trait definition (there's no need to warn twice
        .                                       // so we don't check the methods).
        .                                       //
        .                                       // Those in 2. are warned via walk_generics and this
        .                                       // call here.
      165 ( 0.00%)                              intravisit::walk_path(self, tr.path);
        .           
        .                                       // Those in 3. are warned with this call.
       55 ( 0.00%)                              for impl_item_ref in impl_.items {
      245 ( 0.00%)                                  let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
      371 ( 0.00%)                                  if let hir::ImplItemKind::TyAlias(ty) = impl_item.kind {
        .                                               self.visit_ty(ty);
        .                                           }
        .                                       }
        .                                   }
        .                               }
       24 ( 0.00%)                  } else if impl_.of_trait.is_none() && self_is_public_path {
        .                               // `impl Public<Private> { ... }`. Any public static
        .                               // methods will be visible as `Public::foo`.
        .                               let mut found_pub_static = false;
        3 ( 0.00%)                      for impl_item_ref in impl_.items {
       12 ( 0.00%)                          if self.access_levels.is_reachable(impl_item_ref.id.def_id)
        6 ( 0.00%)                              || self.tcx.visibility(impl_item_ref.id.def_id)
        .                                           == ty::Visibility::Public
        .                                   {
        .                                       let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
        .                                       match impl_item_ref.kind {
        .                                           AssocItemKind::Const => {
        .                                               found_pub_static = true;
        .                                               intravisit::walk_impl_item(self, impl_item);
        .                                           }
-- line 1571 ----------------------------------------
-- line 1572 ----------------------------------------
        .                                           AssocItemKind::Fn { has_self: false } => {
        .                                               found_pub_static = true;
        .                                               intravisit::walk_impl_item(self, impl_item);
        .                                           }
        .                                           _ => {}
        .                                       }
        .                                   }
        .                               }
        6 ( 0.00%)                      if found_pub_static {
        .                                   intravisit::walk_generics(self, &impl_.generics)
        .                               }
        .                           }
        .                           return;
        .                       }
        .           
        .                       // `type ... = ...;` can contain private types, because
        .                       // we're introducing a new name.
        .                       hir::ItemKind::TyAlias(..) => return,
        .           
        .                       // Not at all public, so we don't care.
      345 ( 0.00%)              _ if !self.item_is_public(item.def_id, &item.vis) => {
        .                           return;
        .                       }
        .           
        .                       _ => {}
        .                   }
        .           
        .                   // We've carefully constructed it so that if we're here, then
        .                   // any `visit_ty`'s will be called on things that are in
        .                   // public signatures, i.e., things that we're interested in for
        .                   // this visitor.
      210 ( 0.00%)          intravisit::walk_item(self, item);
      776 ( 0.00%)      }
        .           
      208 ( 0.00%)      fn visit_generics(&mut self, generics: &'tcx hir::Generics<'tcx>) {
        .                   for param in generics.params {
        .                       for bound in param.bounds {
        .                           self.check_generic_bound(bound);
        .                       }
        .                   }
       26 ( 0.00%)          for predicate in generics.where_clause.predicates {
        .                       match predicate {
        .                           hir::WherePredicate::BoundPredicate(bound_pred) => {
        .                               for bound in bound_pred.bounds.iter() {
        .                                   self.check_generic_bound(bound)
        .                               }
        .                           }
        .                           hir::WherePredicate::RegionPredicate(_) => {}
        .                           hir::WherePredicate::EqPredicate(eq_pred) => {
        .                               self.visit_ty(eq_pred.rhs_ty);
        .                           }
        .                       }
        .                   }
      208 ( 0.00%)      }
        .           
        .               fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem<'tcx>) {
        .                   if self.access_levels.is_reachable(item.def_id) {
        .                       intravisit::walk_foreign_item(self, item)
        .                   }
        .               }
        .           
        .               fn visit_ty(&mut self, t: &'tcx hir::Ty<'tcx>) {
      327 ( 0.00%)          if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = t.kind {
      148 ( 0.00%)              if self.path_is_private_type(path) {
        .                           self.old_error_set.insert(t.hir_id);
        .                       }
        .                   }
      579 ( 0.00%)          intravisit::walk_ty(self, t)
        .               }
        .           
      144 ( 0.00%)      fn visit_variant(
        .                   &mut self,
        .                   v: &'tcx hir::Variant<'tcx>,
        .                   g: &'tcx hir::Generics<'tcx>,
        .                   item_id: hir::HirId,
        .               ) {
      180 ( 0.00%)          if self.access_levels.is_reachable(self.tcx.hir().local_def_id(v.id)) {
       18 ( 0.00%)              self.in_variant = true;
        .                       intravisit::walk_variant(self, v, g, item_id);
       18 ( 0.00%)              self.in_variant = false;
        .                   }
      126 ( 0.00%)      }
        .           
       50 ( 0.00%)      fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {
       60 ( 0.00%)          if s.vis.node.is_pub() || self.in_variant {
        .                       intravisit::walk_field_def(self, s);
        .                   }
       40 ( 0.00%)      }
        .           
        .               // We don't need to introspect into these at all: an
        .               // expression/block context can't possibly contain exported things.
        .               // (Making them no-ops stops us from traversing the whole AST without
        .               // having to be super careful about our `walk_...` calls above.)
        .               fn visit_block(&mut self, _: &'tcx hir::Block<'tcx>) {}
        .               fn visit_expr(&mut self, _: &'tcx hir::Expr<'tcx>) {}
        .           }
-- line 1667 ----------------------------------------
-- line 1679 ----------------------------------------
        .               /// The visitor checks that each component type is at least this visible.
        .               required_visibility: ty::Visibility,
        .               has_pub_restricted: bool,
        .               has_old_errors: bool,
        .               in_assoc_ty: bool,
        .           }
        .           
        .           impl SearchInterfaceForPrivateItemsVisitor<'_> {
      973 ( 0.00%)      fn generics(&mut self) -> &mut Self {
      417 ( 0.00%)          for param in &self.tcx.generics_of(self.item_def_id).params {
      135 ( 0.00%)              match param.kind {
        .                           GenericParamDefKind::Lifetime => {}
        9 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
        9 ( 0.00%)                      if has_default {
        .                                   self.visit(self.tcx.type_of(param.def_id));
        .                               }
        .                           }
        .                           // FIXME(generic_const_exprs): May want to look inside const here
        .                           GenericParamDefKind::Const { .. } => {
        .                               self.visit(self.tcx.type_of(param.def_id));
        .                           }
        .                       }
        .                   }
        .                   self
    1,112 ( 0.00%)      }
        .           
      660 ( 0.00%)      fn predicates(&mut self) -> &mut Self {
        .                   // N.B., we use `explicit_predicates_of` and not `predicates_of`
        .                   // because we don't want to report privacy errors due to where
        .                   // clauses that the compiler inferred. We only want to
        .                   // consider the ones that the user wrote. This is important
        .                   // for the inferred outlives rules; see
        .                   // `src/test/ui/rfc-2093-infer-outlives/privacy.rs`.
      264 ( 0.00%)          self.visit_predicates(self.tcx.explicit_predicates_of(self.item_def_id));
        .                   self
      792 ( 0.00%)      }
        .           
       35 ( 0.00%)      fn bounds(&mut self) -> &mut Self {
        .                   self.visit_predicates(ty::GenericPredicates {
        .                       parent: None,
       14 ( 0.00%)              predicates: self.tcx.explicit_item_bounds(self.item_def_id),
        .                   });
        .                   self
       35 ( 0.00%)      }
        .           
      660 ( 0.00%)      fn ty(&mut self) -> &mut Self {
      264 ( 0.00%)          self.visit(self.tcx.type_of(self.item_def_id));
        .                   self
      660 ( 0.00%)      }
        .           
        .               fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {
    1,996 ( 0.00%)          if self.leaks_private_dep(def_id) {
        .                       self.tcx.struct_span_lint_hir(
        .                           lint::builtin::EXPORTED_PRIVATE_DEPENDENCIES,
        .                           self.tcx.hir().local_def_id_to_hir_id(self.item_def_id),
        .                           self.tcx.def_span(self.item_def_id.to_def_id()),
        .                           |lint| {
        .                               lint.build(&format!(
        .                                   "{} `{}` from private dependency '{}' in public \
        .                                                           interface",
-- line 1738 ----------------------------------------
-- line 1740 ----------------------------------------
        .                                   descr,
        .                                   self.tcx.crate_name(def_id.krate)
        .                               ))
        .                               .emit()
        .                           },
        .                       );
        .                   }
        .           
    1,008 ( 0.00%)          let hir_id = match def_id.as_local() {
      290 ( 0.00%)              Some(def_id) => self.tcx.hir().local_def_id_to_hir_id(def_id),
        .                       None => return false,
        .                   };
        .           
        .                   let vis = self.tcx.visibility(def_id);
      519 ( 0.00%)          if !vis.is_at_least(self.required_visibility, self.tcx) {
        .                       let vis_descr = match vis {
        .                           ty::Visibility::Public => "public",
        .                           ty::Visibility::Invisible => "private",
        .                           ty::Visibility::Restricted(vis_def_id) => {
        .                               if vis_def_id == self.tcx.parent_module(hir_id).to_def_id() {
        .                                   "private"
        .                               } else if vis_def_id.is_top_level_module() {
        .                                   "crate-private"
-- line 1762 ----------------------------------------
-- line 1792 ----------------------------------------
        .                   false
        .               }
        .           
        .               /// An item is 'leaked' from a private dependency if all
        .               /// of the following are true:
        .               /// 1. It's contained within a public type
        .               /// 2. It comes from a private crate
        .               fn leaks_private_dep(&self, item_id: DefId) -> bool {
    1,284 ( 0.00%)          let ret = self.required_visibility.is_public() && self.tcx.is_private_dep(item_id.krate);
        .           
        .                   tracing::debug!("leaks_private_dep(item_id={:?})={}", item_id, ret);
        .                   ret
        .               }
        .           }
        .           
        .           impl<'tcx> DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
      962 ( 0.00%)          self.tcx
        .               }
    6,848 ( 0.00%)      fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   kind: &str,
        .                   descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
        .                   if self.check_def_id(def_id, kind, descr) {
        .                       ControlFlow::BREAK
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
    3,852 ( 0.00%)      }
        .           }
        .           
        .           struct PrivateItemsInPublicInterfacesVisitor<'tcx> {
        .               tcx: TyCtxt<'tcx>,
        .               has_pub_restricted: bool,
        .               old_error_set_ancestry: LocalDefIdSet,
        .           }
        .           
        .           impl<'tcx> PrivateItemsInPublicInterfacesVisitor<'tcx> {
        .               fn check(
        .                   &self,
        .                   def_id: LocalDefId,
        .                   required_visibility: ty::Visibility,
        .               ) -> SearchInterfaceForPrivateItemsVisitor<'tcx> {
    1,225 ( 0.00%)          SearchInterfaceForPrivateItemsVisitor {
      101 ( 0.00%)              tcx: self.tcx,
        .                       item_def_id: def_id,
        .                       required_visibility,
      173 ( 0.00%)              has_pub_restricted: self.has_pub_restricted,
        .                       has_old_errors: self.old_error_set_ancestry.contains(&def_id),
        .                       in_assoc_ty: false,
        .                   }
        .               }
        .           
    1,092 ( 0.00%)      fn check_assoc_item(
        .                   &self,
        .                   def_id: LocalDefId,
        .                   assoc_item_kind: AssocItemKind,
        .                   defaultness: hir::Defaultness,
        .                   vis: ty::Visibility,
        .               ) {
        .                   let mut check = self.check(def_id, vis);
        .           
      168 ( 0.00%)          let (check_ty, is_assoc_ty) = match assoc_item_kind {
        .                       AssocItemKind::Const | AssocItemKind::Fn { .. } => (true, false),
       18 ( 0.00%)              AssocItemKind::Type => (defaultness.has_value(), true),
        .                   };
      168 ( 0.00%)          check.in_assoc_ty = is_assoc_ty;
      336 ( 0.00%)          check.generics().predicates();
       18 ( 0.00%)          if check_ty {
       84 ( 0.00%)              check.ty();
        .                   }
      672 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'tcx> {
        .               type NestedFilter = nested_filter::OnlyBodies;
        .           
        .               fn nested_visit_map(&mut self) -> Self::Map {
       98 ( 0.00%)          self.tcx.hir()
        .               }
        .           
    1,152 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
      128 ( 0.00%)          let tcx = self.tcx;
      128 ( 0.00%)          let item_visibility = tcx.visibility(item.def_id);
        .           
      640 ( 0.00%)          match item.kind {
        .                       // Crates are always public.
        .                       hir::ItemKind::ExternCrate(..) => {}
        .                       // All nested items are checked by `visit_item`.
        .                       hir::ItemKind::Mod(..) => {}
        .                       // Checked in resolve.
        .                       hir::ItemKind::Use(..) => {}
        .                       // No subitems.
        .                       hir::ItemKind::Macro(..) | hir::ItemKind::GlobalAsm(..) => {}
        .                       // Subitems of these items have inherited publicity.
        .                       hir::ItemKind::Const(..)
        .                       | hir::ItemKind::Static(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::TyAlias(..) => {
      186 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates().ty();
        .                       }
        .                       hir::ItemKind::OpaqueTy(..) => {
        .                           // `ty()` for opaque types is the underlying type,
        .                           // it's not a part of interface, so we skip it.
       35 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().bounds();
        .                       }
        .                       hir::ItemKind::Trait(.., trait_item_refs) => {
        .                           self.check(item.def_id, item_visibility).generics().predicates();
        .           
        .                           for trait_item_ref in trait_item_refs {
        .                               self.check_assoc_item(
        .                                   trait_item_ref.id.def_id,
        .                                   trait_item_ref.kind,
-- line 1906 ----------------------------------------
-- line 1912 ----------------------------------------
        .                                   self.check(trait_item_ref.id.def_id, item_visibility).bounds();
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::TraitAlias(..) => {
        .                           self.check(item.def_id, item_visibility).generics().predicates();
        .                       }
        .                       hir::ItemKind::Enum(ref def, _) => {
       12 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
        .           
        3 ( 0.00%)                  for variant in def.variants {
       25 ( 0.00%)                      for field in variant.data.fields() {
       24 ( 0.00%)                          self.check(self.tcx.hir().local_def_id(field.hir_id), item_visibility).ty();
        .                               }
        .                           }
        .                       }
        .                       // Subitems of foreign modules have their own publicity.
        .                       hir::ItemKind::ForeignMod { items, .. } => {
        .                           for foreign_item in items {
        .                               let vis = tcx.visibility(foreign_item.id.def_id);
        .                               self.check(foreign_item.id.def_id, vis).generics().predicates().ty();
        .                           }
        .                       }
        .                       // Subitems of structs and unions have their own publicity.
        .                       hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {
       28 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
        .           
       21 ( 0.00%)                  for field in struct_def.fields() {
       90 ( 0.00%)                      let def_id = tcx.hir().local_def_id(field.hir_id);
        .                               let field_visibility = tcx.visibility(def_id);
       45 ( 0.00%)                      self.check(def_id, min(item_visibility, field_visibility, tcx)).ty();
        .                           }
        .                       }
        .                       // An inherent impl is public when its type is public
        .                       // Subitems of inherent impls have their own publicity.
        .                       // A trait impl is public when both its type and its trait are public
        .                       // Subitems of trait impls have inherited publicity.
        .                       hir::ItemKind::Impl(ref impl_) => {
      272 ( 0.00%)                  let impl_vis = ty::Visibility::of_impl(item.def_id, tcx, &Default::default());
        .                           // check that private components do not appear in the generics or predicates of inherent impls
        .                           // this check is intentionally NOT performed for impls of traits, per #90586
      136 ( 0.00%)                  if impl_.of_trait.is_none() {
       35 ( 0.00%)                      self.check(item.def_id, impl_vis).generics().predicates();
        .                           }
       68 ( 0.00%)                  for impl_item_ref in impl_.items {
       91 ( 0.00%)                      let impl_item_vis = if impl_.of_trait.is_none() {
       28 ( 0.00%)                          min(tcx.visibility(impl_item_ref.id.def_id), impl_vis, tcx)
        .                               } else {
        .                                   impl_vis
        .                               };
      476 ( 0.00%)                      self.check_assoc_item(
       84 ( 0.00%)                          impl_item_ref.id.def_id,
        .                                   impl_item_ref.kind,
        .                                   impl_item_ref.defaultness,
        .                                   impl_item_vis,
        .                               );
        .                           }
        .                       }
        .                   }
    1,024 ( 0.00%)      }
        .           }
        .           
        .           pub fn provide(providers: &mut Providers) {
        8 ( 0.00%)      *providers = Providers {
        .                   visibility,
        .                   privacy_access_levels,
        .                   check_private_in_public,
        .                   check_mod_privacy,
        .                   ..*providers
        .               };
        1 ( 0.00%)  }
        .           
    2,700 ( 0.00%)  fn visibility(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Visibility {
      300 ( 0.00%)      let def_id = def_id.expect_local();
        .               match tcx.resolutions(()).visibilities.get(&def_id) {
      436 ( 0.00%)          Some(vis) => *vis,
        .                   None => {
        .                       let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);
      917 ( 0.00%)              match tcx.hir().get(hir_id) {
        .                           // Unique types created for closures participate in type privacy checking.
        .                           // They have visibilities inherited from the module they are defined in.
        .                           Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => {
      114 ( 0.00%)                      ty::Visibility::Restricted(tcx.parent_module(hir_id).to_def_id())
        .                           }
        .                           // - AST lowering may clone `use` items and the clones don't
        .                           //   get their entries in the resolver's visibility table.
        .                           // - AST lowering also creates opaque type items with inherited visibilies.
        .                           //   Visibility on them should have no effect, but to avoid the visibility
        .                           //   query failing on some items, we provide it for opaque types as well.
        .                           Node::Item(hir::Item {
        7 ( 0.00%)                      vis,
        .                               kind: hir::ItemKind::Use(..) | hir::ItemKind::OpaqueTy(..),
        .                               ..
       42 ( 0.00%)                  }) => ty::Visibility::from_hir(vis, hir_id, tcx),
        .                           // Visibilities of trait impl items are inherited from their traits
        .                           // and are not filled in resolve.
        .                           Node::ImplItem(impl_item) => {
      728 ( 0.00%)                      match tcx.hir().get_by_def_id(tcx.hir().get_parent_item(hir_id)) {
        .                                   Node::Item(hir::Item {
        .                                       kind: hir::ItemKind::Impl(hir::Impl { of_trait: Some(tr), .. }),
        .                                       ..
       56 ( 0.00%)                          }) => tr.path.res.opt_def_id().map_or_else(
        .                                       || {
        .                                           tcx.sess.delay_span_bug(tr.path.span, "trait without a def-id");
        .                                           ty::Visibility::Public
        .                                       },
        .                                       |def_id| tcx.visibility(def_id),
        .                                   ),
        .                                   _ => span_bug!(impl_item.span, "the parent is not a trait impl"),
        .                               }
-- line 2021 ----------------------------------------
-- line 2023 ----------------------------------------
        .                           _ => span_bug!(
        .                               tcx.def_span(def_id),
        .                               "visibility table unexpectedly missing a def-id: {:?}",
        .                               def_id,
        .                           ),
        .                       }
        .                   }
        .               }
    2,400 ( 0.00%)  }
        .           
       16 ( 0.00%)  fn check_mod_privacy(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {
        .               // Check privacy of names not checked in previous compilation stages.
        .               let mut visitor =
        8 ( 0.00%)          NamePrivacyVisitor { tcx, maybe_typeck_results: None, current_item: module_def_id };
       18 ( 0.00%)      let (module, span, hir_id) = tcx.hir().get_module(module_def_id);
        .           
        .               intravisit::walk_mod(&mut visitor, module, hir_id);
        .           
        .               // Check privacy of explicitly written types and traits as well as
        .               // inferred types of expressions and patterns.
        .               let mut visitor =
       12 ( 0.00%)          TypePrivacyVisitor { tcx, maybe_typeck_results: None, current_item: module_def_id, span };
        .               intravisit::walk_mod(&mut visitor, module, hir_id);
       16 ( 0.00%)  }
        .           
        7 ( 0.00%)  fn privacy_access_levels(tcx: TyCtxt<'_>, (): ()) -> &AccessLevels {
        .               // Build up a set of all exported items in the AST. This is a set of all
        .               // items which are reachable from external crates based on visibility.
        9 ( 0.00%)      let mut visitor = EmbargoVisitor {
        .                   tcx,
        .                   access_levels: tcx.resolutions(()).access_levels.clone(),
        .                   macro_reachable: Default::default(),
        .                   prev_level: Some(AccessLevel::Public),
        .                   changed: false,
        .               };
        .           
        .               loop {
        .                   tcx.hir().walk_toplevel_module(&mut visitor);
        4 ( 0.00%)          if visitor.changed {
        3 ( 0.00%)              visitor.changed = false;
        .                   } else {
        .                       break;
        .                   }
        .               }
        .           
        1 ( 0.00%)      tcx.arena.alloc(visitor.access_levels)
        9 ( 0.00%)  }
        .           
        8 ( 0.00%)  fn check_private_in_public(tcx: TyCtxt<'_>, (): ()) {
        .               let access_levels = tcx.privacy_access_levels(());
        .           
        9 ( 0.00%)      let mut visitor = ObsoleteVisiblePrivateTypesVisitor {
        .                   tcx,
        .                   access_levels,
        .                   in_variant: false,
        .                   old_error_set: Default::default(),
        .               };
        .               tcx.hir().walk_toplevel_module(&mut visitor);
        .           
        .               let has_pub_restricted = {
        5 ( 0.00%)          let mut pub_restricted_visitor = PubRestrictedVisitor { tcx, has_pub_restricted: false };
        .                   tcx.hir().walk_toplevel_module(&mut pub_restricted_visitor);
        1 ( 0.00%)          pub_restricted_visitor.has_pub_restricted
        .               };
        .           
        .               let mut old_error_set_ancestry = HirIdSet::default();
        9 ( 0.00%)      for mut id in visitor.old_error_set.iter().copied() {
        .                   loop {
        .                       if !old_error_set_ancestry.insert(id) {
        .                           break;
        .                       }
        .                       let parent = tcx.hir().get_parent_node(id);
        .                       if parent == id {
        .                           break;
        .                       }
        .                       id = parent;
        .                   }
        .               }
        .           
        .               // Check for private types and traits in public interfaces.
        8 ( 0.00%)      let mut visitor = PrivateItemsInPublicInterfacesVisitor {
        .                   tcx,
        .                   has_pub_restricted,
        .                   // Only definition IDs are ever searched in `old_error_set_ancestry`,
        .                   // so we can filter away all non-definition IDs at this point.
        .                   old_error_set_ancestry: old_error_set_ancestry
        .                       .into_iter()
        .                       .filter_map(|hir_id| tcx.hir().opt_local_def_id(hir_id))
        .                       .collect(),
        .               };
        6 ( 0.00%)      tcx.hir().visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));
        8 ( 0.00%)  }

  848,808 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                 

-- line 186 ----------------------------------------
        .           /// // use the values stored in map
        .           /// ```
        .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
        .               pub(crate) hash_builder: S,
        .               pub(crate) table: RawTable<(K, V), A>,
        .           }
        .           
        .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
      136 ( 0.00%)      fn clone(&self) -> Self {
      180 ( 0.00%)          HashMap {
        .                       hash_builder: self.hash_builder.clone(),
       26 ( 0.00%)              table: self.table.clone(),
        .                   }
      153 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   self.table.clone_from(&source.table);
        .           
        .                   // Update hash_builder only if we successfully cloned all elements.
        .                   self.hash_builder.clone_from(&source.hash_builder);
        .               }
        .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash,
        .               S: BuildHasher,
        .           {
  342,422 ( 0.01%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
1,024,159 ( 0.03%)      move |x| k.eq(x.0.borrow())
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
  421,059 ( 0.01%)      move |x| k.eq(x.borrow())
        .           }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
        .               use core::hash::Hasher;
        .               let mut state = hash_builder.build_hasher();
        .               val.hash(&mut state);
        .               state.finish()
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           #[cfg_attr(feature = "inline-more", inline)]
        2 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
        .               S: BuildHasher,
        .           {
        .               hash_builder.hash_one(val)
        4 ( 0.00%)  }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
        .           where
        .               K: Hash,
        .               S: BuildHasher,
        .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               ///
        .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub const fn with_hasher(hash_builder: S) -> Self {
  861,583 ( 0.02%)          Self {
        .                       hash_builder,
        .                       table: RawTable::new(),
        .                   }
        .               }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys.
        .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
        .               /// use hashbrown::hash_map::DefaultHashBuilder;
        .               ///
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
       61 ( 0.00%)          Self {
        .                       hash_builder,
        .                       table: RawTable::new_in(alloc),
        .                   }
        .               }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys. It will be allocated with the given allocator.
        .               ///
-- line 453 ----------------------------------------
-- line 663 ----------------------------------------
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert_eq!(a.len(), 0);
        .               /// a.insert(1, "a");
        .               /// assert_eq!(a.len(), 1);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn len(&self) -> usize {
   43,799 ( 0.00%)          self.table.len()
        .               }
        .           
        .               /// Returns `true` if the map contains no elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert!(a.is_empty());
        .               /// a.insert(1, "a");
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn is_empty(&self) -> bool {
  318,686 ( 0.01%)          self.len() == 0
        .               }
        .           
        .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
        .               /// allocated memory for reuse.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// a.insert(1, "a");
        .               /// a.clear();
        .               /// assert!(a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        6 ( 0.00%)      pub fn clear(&mut self) {
        .                   self.table.clear();
        6 ( 0.00%)      }
        .           
        .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
        .               /// The map cannot be used after calling this.
        .               /// The iterator element type is `K`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
        .               /// }
        .               ///
        .               /// assert_eq!(letters[&'s'], 2);
        .               /// assert_eq!(letters[&'t'], 3);
        .               /// assert_eq!(letters[&'u'], 1);
        .               /// assert_eq!(letters.get(&'y'), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      176 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
        .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
       10 ( 0.00%)              Entry::Occupied(OccupiedEntry {
        .                           hash,
        .                           key: Some(key),
        .                           elem,
        .                           table: self,
        .                       })
        .                   } else {
      210 ( 0.00%)              Entry::Vacant(VacantEntry {
        .                           hash,
        .                           key,
        .                           table: self,
        .                       })
        .                   }
      220 ( 0.00%)      }
        .           
        .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
        .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
2,525,487 ( 0.06%)          match self.get_inner(k) {
        .                       Some(&(_, ref v)) => Some(v),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
3,157,702 ( 0.08%)          if self.table.is_empty() {
        .                       None
        .                   } else {
        1 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
        .                       self.table.get(hash, equivalent_key(k))
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.contains_key(&1), true);
        .               /// assert_eq!(map.contains_key(&2), false);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
  641,616 ( 0.02%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   self.get_inner(k).is_some()
  927,586 ( 0.02%)      }
        .           
        .               /// Returns a mutable reference to the value corresponding to the key.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
        .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// if let Some(x) = map.get_mut(&1) {
        .               ///     *x = "b";
        .               /// }
        .               /// assert_eq!(map[&1], "b");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      166 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
      498 ( 0.00%)          match self.get_inner_mut(k) {
        .                       Some(&mut (_, ref mut v)) => Some(v),
        .                       None => None,
        .                   }
      332 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
      166 ( 0.00%)          if self.table.is_empty() {
        .                       None
        .                   } else {
        .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
        .                       self.table.get_mut(hash, equivalent_key(k))
        .                   }
        .               }
        .           
        .               /// Attempts to get mutable references to `N` values in the map at once.
-- line 1219 ----------------------------------------
-- line 1495 ----------------------------------------
        .               /// assert_eq!(map.insert(37, "a"), None);
        .               /// assert_eq!(map.is_empty(), false);
        .               ///
        .               /// map.insert(37, "b");
        .               /// assert_eq!(map.insert(37, "c"), Some("b"));
        .               /// assert_eq!(map[&37], "c");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
5,242,017 ( 0.13%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
      170 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
       10 ( 0.00%)              Some(mem::replace(item, v))
        .                   } else {
1,549,363 ( 0.04%)              self.table
1,811,333 ( 0.05%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
  187,909 ( 0.00%)              None
        .                   }
5,013,426 ( 0.13%)      }
        .           
        .               /// Insert a key-value pair into the map without checking
        .               /// if the key already exists in the map.
        .               ///
        .               /// Returns a reference to the key and value just inserted.
        .               ///
        .               /// This operation is safe if a key does not exist in the map.
        .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.remove(&1), Some("a"));
        .               /// assert_eq!(map.remove(&1), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
  265,307 ( 0.01%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  874,635 ( 0.02%)          match self.remove_entry(k) {
  802,908 ( 0.02%)              Some((_, v)) => Some(v),
  218,949 ( 0.01%)              None => None,
        .                   }
  669,492 ( 0.02%)      }
        .           
        .               /// Removes a key from the map, returning the stored key and value if the
        .               /// key was previously in the map.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
  531,166 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
        .               }
        .           }
        .           
        .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
        .               /// Creates a raw entry builder for the HashMap.
        .               ///
        .               /// Raw entries provide the lowest level of control for searching and
        .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
        .               /// Creates a `RawEntryMut` from the given key and its hash.
        .               #[inline]
        .               #[allow(clippy::wrong_self_convention)]
        .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
1,421,124 ( 0.04%)          self.from_hash(hash, equivalent(k))
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
        .               /// Creates a `RawEntryMut` from the given hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
3,880,241 ( 0.10%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
        .                   self.search(hash, is_match)
4,126,580 ( 0.10%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
  375,936 ( 0.01%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
2,587,846 ( 0.07%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
        .                           elem,
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
  141,570 ( 0.00%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
        .                   self.from_key_hashed_nocheck(hash, k)
        .               }
        .           
        .               /// Access an entry by a key and its hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
3,178,166 ( 0.08%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
2,941,658 ( 0.07%)          self.from_hash(hash, equivalent(k))
5,560,056 ( 0.14%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
        .               where
        .                   F: FnMut(&K) -> bool,
        .               {
4,820,718 ( 0.12%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
        .                       Some(&(ref key, ref value)) => Some((key, value)),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Access an entry by hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
        .               /// and returns a mutable reference to it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::shadow_unrelated)]
        .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
        .               where
        .                   K: Hash,
        .                   S: BuildHasher,
        .               {
  232,169 ( 0.01%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
        .                       hash,
        .                       (key, value),
        .                       make_hasher::<K, _, V, S>(self.hash_builder),
        .                   );
        .                   (k, v)
        .               }
        .           
        .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
        .               /// map.insert("a", 1);
        .               /// map.insert("b", 2);
        .               /// map.insert("c", 3);
        .               ///
        .               /// // Not possible with .iter()
        .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      452 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
   10,969 ( 0.00%)          IntoIter {
    6,320 ( 0.00%)              inner: self.table.into_iter(),
        .                   }
    1,356 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
        .               type Item = (&'a K, &'a V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  387,180 ( 0.01%)          match self.inner.next() {
        .                       Some(x) => unsafe {
        .                           let r = x.as_ref();
      295 ( 0.00%)                  Some((&r.0, &r.1))
        .                       },
        .                       None => None,
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        8 ( 0.00%)          self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn len(&self) -> usize {
        .                   self.inner.len()
        .               }
        .           }
-- line 3013 ----------------------------------------
-- line 3051 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
        .               type Item = (K, V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(K, V)> {
      432 ( 0.00%)          self.inner.next()
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
        .                   f.debug_list().entries(self.iter()).finish()
        .               }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
        .               type Item = &'a K;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
       25 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match self.inner.next() {
        .                       Some((k, _)) => Some(k),
        .                       None => None,
        .                   }
       50 ( 0.00%)      }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn insert(self, value: V) -> &'a mut V
        .               where
        .                   K: Hash,
        .                   S: BuildHasher,
        .               {
        .                   let table = &mut self.table.table;
       10 ( 0.00%)          let entry = table.insert_entry(
        .                       self.hash,
        .                       (self.key, value),
        .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
        .                   );
        .                   &mut entry.1
        .               }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
        .           /// keys with new values returned from the iterator.
        .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
        .           where
        .               K: Eq + Hash,
        .               S: BuildHasher,
        .               A: Allocator + Clone,
        .           {
        .               #[cfg_attr(feature = "inline-more", inline)]
    8,742 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
        .                   // Keys may be already present or show multiple times in the iterator.
        .                   // Reserve the entire hint lower bound if the map is empty.
        .                   // Otherwise reserve half the hint (rounded up), so the map
        .                   // will only resize twice in the worst case.
    7,061 ( 0.00%)          let iter = iter.into_iter();
   35,290 ( 0.00%)          let reserve = if self.is_empty() {
        .                       iter.size_hint().0
        .                   } else {
        3 ( 0.00%)              (iter.size_hint().0 + 1) / 2
        .                   };
        .                   self.reserve(reserve);
        .                   iter.for_each(move |(k, v)| {
  108,681 ( 0.00%)              self.insert(k, v);
        .                   });
    6,036 ( 0.00%)      }
        .           
        .               #[inline]
        .               #[cfg(feature = "nightly")]
        .               fn extend_one(&mut self, (k, v): (K, V)) {
        .                   self.insert(k, v);
        .               }
        .           
        .               #[inline]
-- line 4588 ----------------------------------------

2,653,770 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/writeback.rs
--------------------------------------------------------------------------------
Ir                 

-- line 30 ----------------------------------------
        .           // the final TypeckResults since all of the types should have been
        .           // inferred once typeck is done.
        .           // When type inference is running however, having to update the typeck
        .           // typeck results every time a new type is inferred would be unreasonably slow,
        .           // so instead all of the replacement happens at the end in
        .           // resolve_type_vars_in_body, which creates a new TypeTables which
        .           // doesn't contain any inference types.
        .           impl<'a, 'tcx> FnCtxt<'a, 'tcx> {
    1,251 ( 0.00%)      pub fn resolve_type_vars_in_body(
        .                   &self,
        .                   body: &'tcx hir::Body<'tcx>,
        .               ) -> &'tcx ty::TypeckResults<'tcx> {
    1,390 ( 0.00%)          let item_id = self.tcx.hir().body_owner(body.id());
      834 ( 0.00%)          let item_def_id = self.tcx.hir().local_def_id(item_id);
        .           
        .                   // This attribute causes us to dump some writeback information
        .                   // in the form of errors, which is used for unit tests.
        .                   let rustc_dump_user_substs =
      834 ( 0.00%)              self.tcx.has_attr(item_def_id.to_def_id(), sym::rustc_dump_user_substs);
        .           
        .                   let mut wbcx = WritebackCx::new(self, body, rustc_dump_user_substs);
      556 ( 0.00%)          for param in body.params {
    1,152 ( 0.00%)              wbcx.visit_node_id(param.pat.span, param.hir_id);
        .                   }
        .                   // Type only exists for constants and statics, not functions.
    1,529 ( 0.00%)          match self.tcx.hir().body_owner_kind(item_id) {
        .                       hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => {
      235 ( 0.00%)                  wbcx.visit_node_id(body.value.span, item_id);
        .                       }
        .                       hir::BodyOwnerKind::Closure | hir::BodyOwnerKind::Fn => (),
        .                   }
        .                   wbcx.visit_body(body);
      139 ( 0.00%)          wbcx.visit_min_capture_map();
      139 ( 0.00%)          wbcx.eval_closure_size();
      139 ( 0.00%)          wbcx.visit_fake_reads_map();
      139 ( 0.00%)          wbcx.visit_closures();
      139 ( 0.00%)          wbcx.visit_liberated_fn_sigs();
      139 ( 0.00%)          wbcx.visit_fru_field_types();
      417 ( 0.00%)          wbcx.visit_opaque_types(body.value.span);
      139 ( 0.00%)          wbcx.visit_coercion_casts();
      139 ( 0.00%)          wbcx.visit_user_provided_tys();
      139 ( 0.00%)          wbcx.visit_user_provided_sigs();
      139 ( 0.00%)          wbcx.visit_generator_interior_types();
        .           
        .                   let used_trait_imports =
      278 ( 0.00%)              mem::take(&mut self.typeck_results.borrow_mut().used_trait_imports);
        .                   debug!("used_trait_imports({:?}) = {:?}", item_def_id, used_trait_imports);
      278 ( 0.00%)          wbcx.typeck_results.used_trait_imports = used_trait_imports;
        .           
      695 ( 0.00%)          wbcx.typeck_results.treat_byte_string_as_slice =
      139 ( 0.00%)              mem::take(&mut self.typeck_results.borrow_mut().treat_byte_string_as_slice);
        .           
      417 ( 0.00%)          if self.is_tainted_by_errors() {
        .                       // FIXME(eddyb) keep track of `ErrorReported` from where the error was emitted.
        .                       wbcx.typeck_results.tainted_by_errors = Some(ErrorReported);
        .                   }
        .           
        .                   debug!("writeback: typeck results for {:?} are {:#?}", item_def_id, wbcx.typeck_results);
        .           
      278 ( 0.00%)          self.tcx.arena.alloc(wbcx.typeck_results)
    1,251 ( 0.00%)      }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // The Writeback context. This visitor walks the HIR, checking the
        .           // fn-specific typeck results to find references to types or regions. It
        .           // resolves those regions to remove inference variables and writes the
        .           // final result back into the master typeck results in the tcx. Here and
        .           // there, it applies a few ad-hoc checks that were not convenient to
-- line 98 ----------------------------------------
-- line 109 ----------------------------------------
        .           }
        .           
        .           impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {
        .               fn new(
        .                   fcx: &'cx FnCtxt<'cx, 'tcx>,
        .                   body: &'tcx hir::Body<'tcx>,
        .                   rustc_dump_user_substs: bool,
        .               ) -> WritebackCx<'cx, 'tcx> {
      278 ( 0.00%)          let owner = body.id().hir_id.owner;
        .           
    1,251 ( 0.00%)          WritebackCx {
        .                       fcx,
      556 ( 0.00%)              typeck_results: ty::TypeckResults::new(owner),
        .                       body,
        .                       rustc_dump_user_substs,
        .                   }
        .               }
        .           
        .               fn tcx(&self) -> TyCtxt<'tcx> {
      371 ( 0.00%)          self.fcx.tcx
        .               }
        .           
        .               fn write_ty_to_typeck_results(&mut self, hir_id: hir::HirId, ty: Ty<'tcx>) {
        .                   debug!("write_ty_to_typeck_results({:?}, {:?})", hir_id, ty);
  225,861 ( 0.01%)          assert!(!ty.needs_infer() && !ty.has_placeholders() && !ty.has_free_regions());
  301,116 ( 0.01%)          self.typeck_results.node_types_mut().insert(hir_id, ty);
        .               }
        .           
        .               // Hacky hack: During type-checking, we treat *all* operators
        .               // as potentially overloaded. But then, during writeback, if
        .               // we observe that something like `a+b` is (known to be)
        .               // operating on scalars, we clear the overload.
        .               fn fix_scalar_builtin_expr(&mut self, e: &hir::Expr<'_>) {
  448,967 ( 0.01%)          match e.kind {
       16 ( 0.00%)              hir::ExprKind::Unary(hir::UnOp::Neg | hir::UnOp::Not, inner) => {
       64 ( 0.00%)                  let inner_ty = self.fcx.node_ty(inner.hir_id);
        .                           let inner_ty = self.fcx.resolve_vars_if_possible(inner_ty);
        .           
        .                           if inner_ty.is_scalar() {
       16 ( 0.00%)                      let mut typeck_results = self.fcx.typeck_results.borrow_mut();
       96 ( 0.00%)                      typeck_results.type_dependent_defs_mut().remove(e.hir_id);
       32 ( 0.00%)                      typeck_results.node_substs_mut().remove(e.hir_id);
        .                           }
        .                       }
        .                       hir::ExprKind::Binary(ref op, lhs, rhs) | hir::ExprKind::AssignOp(ref op, lhs, rhs) => {
      760 ( 0.00%)                  let lhs_ty = self.fcx.node_ty(lhs.hir_id);
        .                           let lhs_ty = self.fcx.resolve_vars_if_possible(lhs_ty);
        .           
      608 ( 0.00%)                  let rhs_ty = self.fcx.node_ty(rhs.hir_id);
        .                           let rhs_ty = self.fcx.resolve_vars_if_possible(rhs_ty);
        .           
        .                           if lhs_ty.is_scalar() && rhs_ty.is_scalar() {
      123 ( 0.00%)                      let mut typeck_results = self.fcx.typeck_results.borrow_mut();
      615 ( 0.00%)                      typeck_results.type_dependent_defs_mut().remove(e.hir_id);
      123 ( 0.00%)                      typeck_results.node_substs_mut().remove(e.hir_id);
        .           
      254 ( 0.00%)                      match e.kind {
        .                                   hir::ExprKind::Binary(..) => {
      476 ( 0.00%)                              if !op.node.is_by_value() {
       54 ( 0.00%)                                  let mut adjustments = typeck_results.adjustments_mut();
      324 ( 0.00%)                                  if let Some(a) = adjustments.get_mut(lhs.hir_id) {
        .                                               a.pop();
        .                                           }
      216 ( 0.00%)                                  if let Some(a) = adjustments.get_mut(rhs.hir_id) {
        .                                               a.pop();
        .                                           }
        .                                       }
        .                                   }
        .                                   hir::ExprKind::AssignOp(..)
       20 ( 0.00%)                              if let Some(a) = typeck_results.adjustments_mut().get_mut(lhs.hir_id) =>
        .                                   {
        .                                       a.pop();
        .                                   }
        .                                   _ => {}
        .                               }
        .                           }
        .                       }
        .                       _ => {}
-- line 186 ----------------------------------------
-- line 187 ----------------------------------------
        .                   }
        .               }
        .           
        .               // Similar to operators, indexing is always assumed to be overloaded
        .               // Here, correct cases where an indexing expression can be simplified
        .               // to use builtin indexing because the index type is known to be
        .               // usize-ish
        .               fn fix_index_builtin_expr(&mut self, e: &hir::Expr<'_>) {
  128,641 ( 0.00%)          if let hir::ExprKind::Index(ref base, ref index) = e.kind {
       74 ( 0.00%)              let mut typeck_results = self.fcx.typeck_results.borrow_mut();
        .           
        .                       // All valid indexing looks like this; might encounter non-valid indexes at this point.
       74 ( 0.00%)              let base_ty = typeck_results
       37 ( 0.00%)                  .expr_ty_adjusted_opt(base)
        .                           .map(|t| self.fcx.resolve_vars_if_possible(t).kind());
        .                       if base_ty.is_none() {
        .                           // When encountering `return [0][0]` outside of a `fn` body we can encounter a base
        .                           // that isn't in the type table. We assume more relevant errors have already been
        .                           // emitted, so we delay an ICE if none have. (#64638)
        .                           self.tcx().sess.delay_span_bug(e.span, &format!("bad base: `{:?}`", base));
        .                       }
       74 ( 0.00%)              if let Some(ty::Ref(_, base_ty, _)) = base_ty {
      148 ( 0.00%)                  let index_ty = typeck_results.expr_ty_adjusted_opt(index).unwrap_or_else(|| {
        .                               // When encountering `return [0][0]` outside of a `fn` body we would attempt
        .                               // to access an unexistend index. We assume that more relevant errors will
        .                               // already have been emitted, so we only gate on this with an ICE if no
        .                               // error has been emitted. (#64638)
        .                               self.fcx.tcx.ty_error_with_message(
        .                                   e.span,
        .                                   &format!("bad index {:?} for base: `{:?}`", index, base),
        .                               )
        .                           });
        .                           let index_ty = self.fcx.resolve_vars_if_possible(index_ty);
        .           
      159 ( 0.00%)                  if base_ty.builtin_index().is_some() && index_ty == self.fcx.tcx.types.usize {
        .                               // Remove the method call record
      120 ( 0.00%)                      typeck_results.type_dependent_defs_mut().remove(e.hir_id);
      120 ( 0.00%)                      typeck_results.node_substs_mut().remove(e.hir_id);
        .           
      200 ( 0.00%)                      if let Some(a) = typeck_results.adjustments_mut().get_mut(base.hir_id) {
        .                                   // Discard the need for a mutable borrow
        .           
        .                                   // Extra adjustment made when indexing causes a drop
        .                                   // of size information - we need to get rid of it
        .                                   // Since this is "after" the other adjustment to be
        .                                   // discarded, we do an extra `pop()`
       40 ( 0.00%)                          if let Some(Adjustment {
        .                                       kind: Adjust::Pointer(PointerCast::Unsize), ..
        .                                   }) = a.pop()
        .                                   {
        .                                       // So the borrow discard actually happens here
        .                                       a.pop();
        .                                   }
        .                               }
        .                           }
-- line 241 ----------------------------------------
-- line 248 ----------------------------------------
        .           // Impl of Visitor for Resolver
        .           //
        .           // This is the master code which walks the AST. It delegates most of
        .           // the heavy lifting to the generic visit and resolve functions
        .           // below. In general, a function is made into a `visitor` if it must
        .           // traffic in node-ids or update typeck results in the type context etc.
        .           
        .           impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {
  576,837 ( 0.01%)      fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {
   64,093 ( 0.00%)          self.fix_scalar_builtin_expr(e);
        .                   self.fix_index_builtin_expr(e);
        .           
  320,465 ( 0.01%)          self.visit_node_id(e.span, e.hir_id);
        .           
  256,372 ( 0.01%)          match e.kind {
       38 ( 0.00%)              hir::ExprKind::Closure(_, _, body, _, _) => {
      114 ( 0.00%)                  let body = self.fcx.tcx.hir().body(body);
       38 ( 0.00%)                  for param in body.params {
       95 ( 0.00%)                      self.visit_node_id(e.span, param.hir_id);
        .                           }
        .           
        .                           self.visit_body(body);
        .                       }
       29 ( 0.00%)              hir::ExprKind::Struct(_, fields, _) => {
        .                           for field in fields {
      252 ( 0.00%)                      self.visit_field_id(field.hir_id);
        .                           }
        .                       }
        .                       hir::ExprKind::Field(..) => {
      350 ( 0.00%)                  self.visit_field_id(e.hir_id);
        .                       }
        .                       hir::ExprKind::ConstBlock(anon_const) => {
        .                           self.visit_node_id(e.span, anon_const.hir_id);
        .           
        .                           let body = self.tcx().hir().body(anon_const.body);
        .                           self.visit_body(body);
        .                       }
        .                       _ => {}
        .                   }
        .           
  192,279 ( 0.00%)          intravisit::walk_expr(self, e);
  512,744 ( 0.01%)      }
        .           
    2,439 ( 0.00%)      fn visit_block(&mut self, b: &'tcx hir::Block<'tcx>) {
    1,084 ( 0.00%)          self.visit_node_id(b.span, b.hir_id);
        .                   intravisit::walk_block(self, b);
      552 ( 0.00%)      }
        .           
    5,463 ( 0.00%)      fn visit_pat(&mut self, p: &'tcx hir::Pat<'tcx>) {
    2,373 ( 0.00%)          match p.kind {
        .                       hir::PatKind::Binding(..) => {
      662 ( 0.00%)                  let typeck_results = self.fcx.typeck_results.borrow();
      993 ( 0.00%)                  if let Some(bm) =
    2,648 ( 0.00%)                      typeck_results.extract_binding_mode(self.tcx().sess, p.hir_id, p.span)
        .                           {
      993 ( 0.00%)                      self.typeck_results.pat_binding_modes_mut().insert(p.hir_id, bm);
        .                           }
        .                       }
       37 ( 0.00%)              hir::PatKind::Struct(_, fields, _) => {
        .                           for field in fields {
      288 ( 0.00%)                      self.visit_field_id(field.hir_id);
        .                           }
        .                       }
        .                       _ => {}
        .                   };
        .           
    2,428 ( 0.00%)          self.visit_pat_adjustments(p.span, p.hir_id);
        .           
    3,035 ( 0.00%)          self.visit_node_id(p.span, p.hir_id);
    1,821 ( 0.00%)          intravisit::walk_pat(self, p);
    4,856 ( 0.00%)      }
        .           
      600 ( 0.00%)      fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {
        .                   intravisit::walk_local(self, l);
      450 ( 0.00%)          let var_ty = self.fcx.local_ty(l.span, l.hir_id).decl_ty;
        .                   let var_ty = self.resolve(var_ty, &l.span);
        .                   self.write_ty_to_typeck_results(l.hir_id, var_ty);
        .               }
        .           
   70,217 ( 0.00%)      fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'tcx>) {
   10,063 ( 0.00%)          intravisit::walk_ty(self, hir_ty);
   40,188 ( 0.00%)          let ty = self.fcx.node_ty(hir_ty.hir_id);
   10,031 ( 0.00%)          let ty = self.resolve(ty, &hir_ty.span);
        .                   self.write_ty_to_typeck_results(hir_ty.hir_id, ty);
        .               }
        .           
        .               fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {
        .                   intravisit::walk_inf(self, inf);
        .                   // Ignore cases where the inference is a const.
        .                   if let Some(ty) = self.fcx.node_ty_opt(inf.hir_id) {
        .                       let ty = self.resolve(ty, &inf.span);
        .                       self.write_ty_to_typeck_results(inf.hir_id, ty);
        .                   }
        .               }
        .           }
        .           
        .           impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {
      973 ( 0.00%)      fn eval_closure_size(&mut self) {
        .                   let mut res: FxHashMap<DefId, ClosureSizeProfileData<'tcx>> = Default::default();
      417 ( 0.00%)          for (closure_def_id, data) in self.fcx.typeck_results.borrow().closure_size_eval.iter() {
        .                       let closure_hir_id =
        .                           self.tcx().hir().local_def_id_to_hir_id(closure_def_id.expect_local());
        .           
        .                       let data = self.resolve(*data, &closure_hir_id);
        .           
        .                       res.insert(*closure_def_id, data);
        .                   }
        .           
    1,390 ( 0.00%)          self.typeck_results.closure_size_eval = res;
    1,112 ( 0.00%)      }
      973 ( 0.00%)      fn visit_min_capture_map(&mut self) {
        .                   let mut min_captures_wb = ty::MinCaptureInformationMap::with_capacity_and_hasher(
      278 ( 0.00%)              self.fcx.typeck_results.borrow().closure_min_captures.len(),
        .                       Default::default(),
        .                   );
        .                   for (closure_def_id, root_min_captures) in
      278 ( 0.00%)              self.fcx.typeck_results.borrow().closure_min_captures.iter()
        .                   {
        .                       let mut root_var_map_wb = ty::RootVariableMinCaptureList::with_capacity_and_hasher(
        .                           root_min_captures.len(),
        .                           Default::default(),
        .                       );
        .                       for (var_hir_id, min_list) in root_min_captures.iter() {
        .                           let min_list_wb = min_list
        .                               .iter()
        .                               .map(|captured_place| {
       27 ( 0.00%)                          let locatable = captured_place.info.path_expr_id.unwrap_or_else(|| {
        .                                       self.tcx().hir().local_def_id_to_hir_id(closure_def_id.expect_local())
        .                                   });
        .           
        .                                   self.resolve(captured_place.clone(), &locatable)
        .                               })
        .                               .collect();
       18 ( 0.00%)                  root_var_map_wb.insert(*var_hir_id, min_list_wb);
        .                       }
       16 ( 0.00%)              min_captures_wb.insert(*closure_def_id, root_var_map_wb);
        .                   }
        .           
    1,251 ( 0.00%)          self.typeck_results.closure_min_captures = min_captures_wb;
    1,112 ( 0.00%)      }
        .           
      973 ( 0.00%)      fn visit_fake_reads_map(&mut self) {
        .                   let mut resolved_closure_fake_reads: FxHashMap<
        .                       DefId,
        .                       Vec<(HirPlace<'tcx>, FakeReadCause, hir::HirId)>,
        .                   > = Default::default();
        .                   for (closure_def_id, fake_reads) in
      278 ( 0.00%)              self.fcx.typeck_results.borrow().closure_fake_reads.iter()
        .                   {
        .                       let mut resolved_fake_reads = Vec::<(HirPlace<'tcx>, FakeReadCause, hir::HirId)>::new();
        .                       for (place, cause, hir_id) in fake_reads.iter() {
        .                           let locatable =
        .                               self.tcx().hir().local_def_id_to_hir_id(closure_def_id.expect_local());
        .           
        .                           let resolved_fake_read = self.resolve(place.clone(), &locatable);
        .                           resolved_fake_reads.push((resolved_fake_read, *cause, *hir_id));
        .                       }
       38 ( 0.00%)              resolved_closure_fake_reads.insert(*closure_def_id, resolved_fake_reads);
        .                   }
    1,251 ( 0.00%)          self.typeck_results.closure_fake_reads = resolved_closure_fake_reads;
    1,112 ( 0.00%)      }
        .           
      973 ( 0.00%)      fn visit_closures(&mut self) {
      278 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
      417 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
        .                   let common_hir_owner = fcx_typeck_results.hir_owner;
        .           
      139 ( 0.00%)          for (id, origin) in fcx_typeck_results.closure_kind_origins().iter() {
        .                       let hir_id = hir::HirId { owner: common_hir_owner, local_id: *id };
        .                       let place_span = origin.0;
        .                       let place = self.resolve(origin.1.clone(), &place_span);
        .                       self.typeck_results.closure_kind_origins_mut().insert(hir_id, (place_span, place));
        .                   }
    1,112 ( 0.00%)      }
        .           
      973 ( 0.00%)      fn visit_coercion_casts(&mut self) {
      278 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
      139 ( 0.00%)          let fcx_coercion_casts = fcx_typeck_results.coercion_casts();
      278 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
        .           
        .                   for local_id in fcx_coercion_casts {
        .                       self.typeck_results.set_coercion_cast(*local_id);
        .                   }
    1,112 ( 0.00%)      }
        .           
    1,112 ( 0.00%)      fn visit_user_provided_tys(&mut self) {
      278 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
      556 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
        .                   let common_hir_owner = fcx_typeck_results.hir_owner;
        .           
        .                   let mut errors_buffer = Vec::new();
      237 ( 0.00%)          for (&local_id, c_ty) in fcx_typeck_results.user_provided_types().iter() {
        .                       let hir_id = hir::HirId { owner: common_hir_owner, local_id };
        .           
        .                       if cfg!(debug_assertions) && c_ty.needs_infer() {
        .                           span_bug!(
        .                               hir_id.to_span(self.fcx.tcx),
        .                               "writeback: `{:?}` has inference variables",
        .                               c_ty
        .                           );
        .                       };
        .           
      441 ( 0.00%)              self.typeck_results.user_provided_types_mut().insert(hir_id, *c_ty);
        .           
      258 ( 0.00%)              if let ty::UserType::TypeOf(_, user_substs) = c_ty.value {
       64 ( 0.00%)                  if self.rustc_dump_user_substs {
        .                               // This is a unit-testing mechanism.
        .                               let span = self.tcx().hir().span(hir_id);
        .                               // We need to buffer the errors in order to guarantee a consistent
        .                               // order when emitting them.
        .                               let err = self
        .                                   .tcx()
        .                                   .sess
        .                                   .struct_span_err(span, &format!("user substs: {:?}", user_substs));
        .                               err.buffer(&mut errors_buffer);
        .                           }
        .                       }
        .                   }
        .           
      139 ( 0.00%)          if !errors_buffer.is_empty() {
        .                       errors_buffer.sort_by_key(|diag| diag.span.primary_span());
        .                       for diag in errors_buffer.drain(..) {
        .                           self.tcx().sess.diagnostic().emit_diagnostic(&diag);
        .                       }
        .                   }
    1,112 ( 0.00%)      }
        .           
      973 ( 0.00%)      fn visit_user_provided_sigs(&mut self) {
      278 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
      278 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
        .           
       38 ( 0.00%)          for (&def_id, c_sig) in fcx_typeck_results.user_provided_sigs.iter() {
        .                       if cfg!(debug_assertions) && c_sig.needs_infer() {
        .                           span_bug!(
        .                               self.fcx.tcx.hir().span_if_local(def_id).unwrap(),
        .                               "writeback: `{:?}` has inference variables",
        .                               c_sig
        .                           );
        .                       };
        .           
      114 ( 0.00%)              self.typeck_results.user_provided_sigs.insert(def_id, *c_sig);
        .                   }
    1,112 ( 0.00%)      }
        .           
      695 ( 0.00%)      fn visit_generator_interior_types(&mut self) {
      278 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
      278 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
      834 ( 0.00%)          self.typeck_results.generator_interior_types =
      278 ( 0.00%)              fcx_typeck_results.generator_interior_types.clone();
      834 ( 0.00%)      }
        .           
    2,224 ( 0.00%)      #[instrument(skip(self, span), level = "debug")]
        .               fn visit_opaque_types(&mut self, span: Span) {
      139 ( 0.00%)          let opaque_types = self.fcx.infcx.inner.borrow().opaque_types.clone();
      570 ( 0.00%)          for (opaque_type_key, opaque_defn) in opaque_types {
        .                       let hir_id =
       14 ( 0.00%)                  self.tcx().hir().local_def_id_to_hir_id(opaque_type_key.def_id.expect_local());
        .                       let instantiated_ty = self.resolve(opaque_defn.concrete_ty, &hir_id);
        .           
        .                       debug_assert!(!instantiated_ty.has_escaping_bound_vars());
        .           
       35 ( 0.00%)              let opaque_type_key = self.fcx.fully_resolve(opaque_type_key).unwrap();
        .           
        .                       // Prevent:
        .                       // * `fn foo<T>() -> Foo<T>`
        .                       // * `fn foo<T: Bound + Other>() -> Foo<T>`
        .                       // from being defining.
        .           
        .                       // Also replace all generic params with the ones from the opaque type
        .                       // definition so that
        .                       // ```rust
        .                       // type Foo<T> = impl Baz + 'static;
        .                       // fn foo<U>() -> Foo<U> { .. }
        .                       // ```
        .                       // figures out the concrete type with `U`, but the stored type is with `T`.
        .           
        .                       // FIXME: why are we calling this here? This seems too early, and duplicated.
       42 ( 0.00%)              let definition_ty = self.fcx.infer_opaque_definition_from_instantiation(
        .                           opaque_type_key,
        .                           instantiated_ty,
        .                           span,
        .                       );
        .           
        .                       let mut skip_add = false;
        .           
       28 ( 0.00%)              if let ty::Opaque(definition_ty_def_id, _substs) = *definition_ty.kind() {
        .                           if opaque_defn.origin == hir::OpaqueTyOrigin::TyAlias {
        .                               if opaque_type_key.def_id == definition_ty_def_id {
        .                                   debug!(
        .                                       "skipping adding concrete definition for opaque type {:?} {:?}",
        .                                       opaque_defn, opaque_type_key.def_id
        .                                   );
        .                                   skip_add = true;
        .                               }
-- line 541 ----------------------------------------
-- line 546 ----------------------------------------
        .                           span_bug!(span, "{:#?} has inference variables", opaque_type_key.substs)
        .                       }
        .           
        .                       // We only want to add an entry into `concrete_opaque_types`
        .                       // if we actually found a defining usage of this opaque type.
        .                       // Otherwise, we do nothing - we'll either find a defining usage
        .                       // in some other location, or we'll end up emitting an error due
        .                       // to the lack of defining usage
       14 ( 0.00%)              if !skip_add {
        .                           self.typeck_results.concrete_opaque_types.insert(opaque_type_key.def_id);
        .                       }
        .                   }
        .               }
        .           
    1,230 ( 0.00%)      fn visit_field_id(&mut self, hir_id: hir::HirId) {
    1,025 ( 0.00%)          if let Some(index) = self.fcx.typeck_results.borrow_mut().field_indices_mut().remove(hir_id)
        .                   {
      615 ( 0.00%)              self.typeck_results.field_indices_mut().insert(hir_id, index);
        .                   }
    1,435 ( 0.00%)      }
        .           
1,172,970 ( 0.03%)      #[instrument(skip(self, span), level = "debug")]
        .               fn visit_node_id(&mut self, span: Span, hir_id: hir::HirId) {
        .                   // Export associated path extensions and method resolutions.
  260,660 ( 0.01%)          if let Some(def) =
  195,495 ( 0.00%)              self.fcx.typeck_results.borrow_mut().type_dependent_defs_mut().remove(hir_id)
        .                   {
   20,572 ( 0.00%)              self.typeck_results.type_dependent_defs_mut().insert(hir_id, def);
        .                   }
        .           
        .                   // Resolve any borrowings for the node with id `node_id`
        .                   self.visit_adjustments(span, hir_id);
        .           
        .                   // Resolve the type of the node with id `node_id`
  260,660 ( 0.01%)          let n_ty = self.fcx.node_ty(hir_id);
        .                   let n_ty = self.resolve(n_ty, &span);
        .                   self.write_ty_to_typeck_results(hir_id, n_ty);
        .                   debug!(?n_ty);
        .           
        .                   // Resolve any substitutions
  390,990 ( 0.01%)          if let Some(substs) = self.fcx.typeck_results.borrow().node_substs_opt(hir_id) {
        .                       let substs = self.resolve(substs, &span);
        .                       debug!("write_substs_to_tcx({:?}, {:?})", hir_id, substs);
        .                       assert!(!substs.needs_infer() && !substs.has_placeholders());
      620 ( 0.00%)              self.typeck_results.node_substs_mut().insert(hir_id, substs);
        .                   }
        .               }
        .           
        .               #[instrument(skip(self, span), level = "debug")]
        .               fn visit_adjustments(&mut self, span: Span, hir_id: hir::HirId) {
  195,495 ( 0.00%)          let adjustment = self.fcx.typeck_results.borrow_mut().adjustments_mut().remove(hir_id);
  325,825 ( 0.01%)          match adjustment {
        .                       None => {
        .                           debug!("no adjustments for node");
        .                       }
        .           
        .                       Some(adjustment) => {
    1,480 ( 0.00%)                  let resolved_adjustment = self.resolve(adjustment, &span);
        .                           debug!(?resolved_adjustment);
    4,440 ( 0.00%)                  self.typeck_results.adjustments_mut().insert(hir_id, resolved_adjustment);
        .                       }
        .                   }
        .               }
        .           
        .               #[instrument(skip(self, span), level = "debug")]
        .               fn visit_pat_adjustments(&mut self, span: Span, hir_id: hir::HirId) {
    1,821 ( 0.00%)          let adjustment = self.fcx.typeck_results.borrow_mut().pat_adjustments_mut().remove(hir_id);
    1,214 ( 0.00%)          match adjustment {
        .                       None => {
        .                           debug!("no pat_adjustments for node");
        .                       }
        .           
        .                       Some(adjustment) => {
      180 ( 0.00%)                  let resolved_adjustment = self.resolve(adjustment, &span);
        .                           debug!(?resolved_adjustment);
      108 ( 0.00%)                  self.typeck_results.pat_adjustments_mut().insert(hir_id, resolved_adjustment);
        .                       }
        .                   }
        .               }
        .           
    1,112 ( 0.00%)      fn visit_liberated_fn_sigs(&mut self) {
      278 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
      556 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
        .                   let common_hir_owner = fcx_typeck_results.hir_owner;
        .           
      583 ( 0.00%)          for (&local_id, &fn_sig) in fcx_typeck_results.liberated_fn_sigs().iter() {
      333 ( 0.00%)              let hir_id = hir::HirId { owner: common_hir_owner, local_id };
        .                       let fn_sig = self.resolve(fn_sig, &hir_id);
      333 ( 0.00%)              self.typeck_results.liberated_fn_sigs_mut().insert(hir_id, fn_sig);
        .                   }
    1,112 ( 0.00%)      }
        .           
    1,112 ( 0.00%)      fn visit_fru_field_types(&mut self) {
      278 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
      556 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
        .                   let common_hir_owner = fcx_typeck_results.hir_owner;
        .           
      139 ( 0.00%)          for (&local_id, ftys) in fcx_typeck_results.fru_field_types().iter() {
        .                       let hir_id = hir::HirId { owner: common_hir_owner, local_id };
        .                       let ftys = self.resolve(ftys.clone(), &hir_id);
        .                       self.typeck_results.fru_field_types_mut().insert(hir_id, ftys);
        .                   }
    1,112 ( 0.00%)      }
        .           
      126 ( 0.00%)      fn resolve<T>(&mut self, x: T, span: &dyn Locatable) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  152,217 ( 0.00%)          let mut resolver = Resolver::new(self.fcx, span, self.body);
      845 ( 0.00%)          let x = x.fold_with(&mut resolver);
        .                   if cfg!(debug_assertions) && x.needs_infer() {
        .                       span_bug!(span.to_span(self.fcx.tcx), "writeback: `{:?}` has inference variables", x);
        .                   }
        .           
        .                   // We may have introduced e.g. `ty::Error`, if inference failed, make sure
        .                   // to mark the `TypeckResults` as tainted in that case, so that downstream
        .                   // users of the typeck results don't produce extra errors, or worse, ICEs.
  156,622 ( 0.00%)          if resolver.replaced_with_error {
        .                       // FIXME(eddyb) keep track of `ErrorReported` from where the error was emitted.
        .                       self.typeck_results.tainted_by_errors = Some(ErrorReported);
        .                   }
        .           
        .                   x
      144 ( 0.00%)      }
        .           }
        .           
        .           crate trait Locatable {
        .               fn to_span(&self, tcx: TyCtxt<'_>) -> Span;
        .           }
        .           
        .           impl Locatable for Span {
        .               fn to_span(&self, _: TyCtxt<'_>) -> Span {
-- line 677 ----------------------------------------
-- line 698 ----------------------------------------
        .           }
        .           
        .           impl<'cx, 'tcx> Resolver<'cx, 'tcx> {
        .               fn new(
        .                   fcx: &'cx FnCtxt<'cx, 'tcx>,
        .                   span: &'cx dyn Locatable,
        .                   body: &'tcx hir::Body<'tcx>,
        .               ) -> Resolver<'cx, 'tcx> {
  753,150 ( 0.02%)          Resolver { tcx: fcx.tcx, infcx: fcx, span, body, replaced_with_error: false }
        .               }
        .           
        .               fn report_type_error(&self, t: Ty<'tcx>) {
        .                   if !self.tcx.sess.has_errors() {
        .                       self.infcx
        .                           .emit_inference_failure_err(
        .                               Some(self.body.id()),
        .                               self.span.to_span(self.tcx),
-- line 714 ----------------------------------------
-- line 736 ----------------------------------------
        .           }
        .           
        .           struct EraseEarlyRegions<'tcx> {
        .               tcx: TyCtxt<'tcx>,
        .           }
        .           
        .           impl<'tcx> TypeFolder<'tcx> for EraseEarlyRegions<'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
    3,439 ( 0.00%)          self.tcx
        .               }
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
   80,171 ( 0.00%)          if ty.has_type_flags(ty::TypeFlags::HAS_FREE_REGIONS) {
    6,496 ( 0.00%)              ty.super_fold_with(self)
        .                   } else {
        .                       ty
        .                   }
        .               }
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
    8,680 ( 0.00%)          if let ty::ReLateBound(..) = r { r } else { self.tcx.lifetimes.re_erased }
        .               }
        .           }
        .           
        .           impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {
        .               fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {
      404 ( 0.00%)          self.tcx
        .               }
        .           
  693,018 ( 0.02%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
  231,006 ( 0.01%)          match self.infcx.fully_resolve(t) {
        .                       Ok(t) => {
        .                           // Do not anonymize late-bound regions
        .                           // (e.g. keep `for<'a>` named `for<'a>`).
        .                           // This allows NLL to generate error messages that
        .                           // refer to the higher-ranked lifetime names written by the user.
  154,004 ( 0.00%)                  EraseEarlyRegions { tcx: self.infcx.tcx }.fold_ty(t)
        .                       }
        .                       Err(_) => {
        .                           debug!("Resolver::fold_ty: input type `{:?}` not fully resolvable", t);
        .                           self.report_type_error(t);
        .                           self.replaced_with_error = true;
        .                           self.tcx().ty_error()
        .                       }
        .                   }
  616,016 ( 0.02%)      }
        .           
        .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
        .                   debug_assert!(!r.is_late_bound(), "Should not be resolving bound region.");
    2,201 ( 0.00%)          self.tcx.lifetimes.re_erased
        .               }
        .           
        .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
        .                   match self.infcx.fully_resolve(ct) {
        .                       Ok(ct) => self.infcx.tcx.erase_regions(ct),
        .                       Err(_) => {
        .                           debug!("Resolver::fold_const: input const `{:?}` not fully resolvable", ct);
        .                           self.report_const_error(ct);
-- line 791 ----------------------------------------

  917,884 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/writeback.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 57 ----------------------------------------
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
       176 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
        88 ( 0.00%)              from_str_radix(src, radix)
       264 ( 0.00%)          }
         .           
         .                   /// Returns the number of ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[doc(alias = "popcount")]
         .                   #[doc(alias = "popcnt")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn count_ones(self) -> u32 {
   386,250 ( 0.01%)              intrinsics::ctpop(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of zeros in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
         .                   /// assert_eq!(n.leading_zeros(), 2);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn leading_zeros(self) -> u32 {
   505,459 ( 0.01%)              intrinsics::ctlz(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of trailing zeros in the binary representation
         .                   /// of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
         .                   /// assert_eq!(n.trailing_zeros(), 3);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn trailing_zeros(self) -> u32 {
 1,081,416 ( 0.03%)              intrinsics::cttz(self) as u32
         .                   }
         .           
         .                   /// Returns the number of leading ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn rotate_left(self, n: u32) -> Self {
14,875,366 ( 0.38%)              intrinsics::rotate_left(self, n as $SelfT)
         .                   }
         .           
         .                   /// Shifts the bits to the right by a specified amount, `n`,
         .                   /// wrapping the truncated bits to the beginning of the resulting
         .                   /// integer.
         .                   ///
         .                   /// Please note this isn't the same operation as the `>>` shifting operator!
         .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
         .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
         2 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
         .                       if unlikely!(b) {None} else {Some(a)}
         .                   }
         .           
         .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
         .                   /// cannot occur.
         .                   ///
         .                   /// # Safety
         .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_add`.
 1,370,695 ( 0.03%)              unsafe { intrinsics::unchecked_add(self, rhs) }
         .                   }
         .           
         .                   /// Checked addition with a signed integer. Computes `self + rhs`,
         .                   /// returning `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_sub`.
   136,275 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
         .                   }
         .           
         .                   /// Checked integer multiplication. Computes `self * rhs`, returning
         .                   /// `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 1035 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   300,796 ( 0.01%)              intrinsics::saturating_add(self, rhs)
         .                   }
         .           
         .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
   698,978 ( 0.02%)              intrinsics::saturating_sub(self, rhs)
         .                   }
         .           
         .                   /// Saturating integer multiplication. Computes `self * rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
 9,875,403 ( 0.25%)              intrinsics::wrapping_add(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) addition with a signed integer. Computes
         .                   /// `self + rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
 5,499,040 ( 0.14%)              intrinsics::wrapping_sub(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) multiplication. Computes `self *
         .                   /// rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
         .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
10,948,064 ( 0.28%)              intrinsics::wrapping_mul(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) division. Computes `self / rhs`.
         .                   /// Wrapped division on unsigned types is just normal division.
         .                   /// There's no way wrapping could ever happen.
         .                   /// This function exists, so that all operations
         .                   /// are accounted for in the wrapping operations.
         .                   ///
-- line 1256 ----------------------------------------
-- line 1492 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
 3,772,124 ( 0.10%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         .                   }
         .           
         .                   /// Calculates `self + rhs + carry` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
         .                   /// additional bit of overflow. This allows for chaining together multiple additions
         .                   /// to create "big integers" which represent larger values.
-- line 1508 ----------------------------------------
-- line 1588 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   427,463 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         .                   }
         .           
         .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
         .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
         .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1674 ----------------------------------------
         .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                     without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
 2,258,753 ( 0.06%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         .                   }
         .           
         .                   /// Calculates the divisor when `self` is divided by `rhs`.
         .                   ///
         .                   /// Returns a tuple of the divisor along with a boolean indicating
         .                   /// whether an arithmetic overflow would occur. Note that for unsigned
         .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 2132 ----------------------------------------
         .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
         .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
         .                   /// ```
         .                   #[must_use]
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
         .                   #[inline(always)]
         .                   pub const fn is_power_of_two(self) -> bool {
       150 ( 0.00%)              self.count_ones() == 1
         .                   }
         .           
         .                   // Returns one less than next power of two.
         .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
         .                   //
         .                   // 8u8.one_less_than_next_power_of_two() == 7
         .                   // 6u8.one_less_than_next_power_of_two() == 7
         .                   //
         .                   // This method cannot overflow, as in the `next_power_of_two`
         .                   // overflow cases it instead ends up returning the maximum value
         .                   // of the type, and can return 0 for 0.
         .                   #[inline]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   const fn one_less_than_next_power_of_two(self) -> Self {
     3,606 ( 0.00%)              if self <= 1 { return 0; }
         .           
     7,065 ( 0.00%)              let p = self - 1;
         .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
         .                       // That means the shift is always in-bounds, and some processors
         .                       // (such as intel pre-haswell) have more efficient ctlz
         .                       // intrinsics when the argument is non-zero.
    21,103 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
     7,125 ( 0.00%)              <$SelfT>::MAX >> z
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `self`.
         .                   ///
         .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
         .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
         .                   /// release mode (the only situation in which method can return 0).
         .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   #[rustc_inherit_overflow_checks]
         .                   pub const fn next_power_of_two(self) -> Self {
    10,508 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `n`. If
         .                   /// the next power of two is greater than the type's maximum value,
         .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 2195 ----------------------------------------

    88,903 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs
--------------------------------------------------------------------------------
Ir                 

-- line 18 ----------------------------------------
        .           use rustc_middle::ty::{self, AdtKind, Ty, UpvarSubsts, UserType};
        .           use rustc_span::def_id::DefId;
        .           use rustc_span::Span;
        .           use rustc_target::abi::VariantIdx;
        .           
        .           impl<'tcx> Cx<'tcx> {
        .               crate fn mirror_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) -> ExprId {
        .                   // `mirror_expr` is recursing very deep. Make sure the stack doesn't overflow.
  100,544 ( 0.00%)          ensure_sufficient_stack(|| self.mirror_expr_inner(expr))
        .               }
        .           
   20,116 ( 0.00%)      crate fn mirror_exprs(&mut self, exprs: &'tcx [hir::Expr<'tcx>]) -> Box<[ExprId]> {
  155,835 ( 0.00%)          exprs.iter().map(|expr| self.mirror_expr_inner(expr)).collect()
   40,232 ( 0.00%)      }
        .           
  576,252 ( 0.01%)      pub(super) fn mirror_expr_inner(&mut self, hir_expr: &'tcx hir::Expr<'tcx>) -> ExprId {
  448,196 ( 0.01%)          let temp_lifetime = self.region_scope_tree.temporary_scope(hir_expr.hir_id.local_id);
        .                   let expr_scope =
        .                       region::Scope { id: hir_expr.hir_id.local_id, data: region::ScopeData::Node };
        .           
        .                   debug!("Expr::make_mirror(): id={}, span={:?}", hir_expr.hir_id, hir_expr.span);
        .           
  256,112 ( 0.01%)          let mut expr = self.make_mirror_unadjusted(hir_expr);
        .           
  384,168 ( 0.01%)          let adjustment_span = match self.adjustment_span {
    2,268 ( 0.00%)              Some((hir_id, span)) if hir_id == hir_expr.hir_id => Some(span),
        .                       _ => None,
        .                   };
        .           
        .                   // Now apply adjustments, if any.
  256,112 ( 0.01%)          for adjustment in self.typeck_results.expr_adjustments(hir_expr) {
        .                       debug!("make_mirror: expr={:?} applying adjustment={:?}", expr, adjustment);
    2,440 ( 0.00%)              let span = expr.span;
    6,923 ( 0.00%)              expr =
   17,802 ( 0.00%)                  self.apply_adjustment(hir_expr, expr, adjustment, adjustment_span.unwrap_or(span));
        .                   }
        .           
        .                   // Next, wrap this up in the expr's scope.
  832,364 ( 0.02%)          expr = Expr {
        .                       temp_lifetime,
   63,418 ( 0.00%)              ty: expr.ty,
   64,028 ( 0.00%)              span: hir_expr.span,
        .                       kind: ExprKind::Scope {
        .                           region_scope: expr_scope,
1,152,504 ( 0.03%)                  value: self.thir.exprs.push(expr),
  128,056 ( 0.00%)                  lint_level: LintLevel::Explicit(hir_expr.hir_id),
        .                       },
        .                   };
        .           
        .                   // Finally, create a destruction scope, if any.
  192,084 ( 0.00%)          if let Some(region_scope) =
  128,056 ( 0.00%)              self.region_scope_tree.opt_destruction_scope(hir_expr.hir_id.local_id)
        .                   {
    6,540 ( 0.00%)              expr = Expr {
        .                           temp_lifetime,
        .                           ty: expr.ty,
      545 ( 0.00%)                  span: hir_expr.span,
        .                           kind: ExprKind::Scope {
        .                               region_scope,
    7,630 ( 0.00%)                      value: self.thir.exprs.push(expr),
        .                               lint_level: LintLevel::Inherited,
        .                           },
        .                       };
        .                   }
        .           
        .                   // OK, all done!
1,408,616 ( 0.04%)          self.thir.exprs.push(expr)
  576,252 ( 0.01%)      }
        .           
        .               fn apply_adjustment(
        .                   &mut self,
        .                   hir_expr: &'tcx hir::Expr<'tcx>,
        .                   mut expr: Expr<'tcx>,
        .                   adjustment: &Adjustment<'tcx>,
        .                   mut span: Span,
        .               ) -> Expr<'tcx> {
    1,978 ( 0.00%)          let Expr { temp_lifetime, .. } = expr;
        .           
        .                   // Adjust the span from the block, to the last expression of the
        .                   // block. This is a better span when returning a mutable reference
        .                   // with too short a lifetime. The error message will use the span
        .                   // from the assignment to the return place, which should only point
        .                   // at the returned value, not the entire function body.
        .                   //
        .                   // fn return_short_lived<'a>(x: &'a mut i32) -> &'static mut i32 {
        .                   //      x
        .                   //   // ^ error message points at this expression.
        .                   // }
        .                   let mut adjust_span = |expr: &mut Expr<'tcx>| {
      870 ( 0.00%)              if let ExprKind::Block { body } = &expr.kind {
        .                           if let Some(last_expr) = body.expr {
        .                               span = self.thir[last_expr].span;
        .                               expr.span = span;
        .                           }
        .                       }
        .                   };
        .           
    8,844 ( 0.00%)          let kind = match adjustment.kind {
        .                       Adjust::Pointer(PointerCast::Unsize) => {
        .                           adjust_span(&mut expr);
      425 ( 0.00%)                  ExprKind::Pointer { cast: PointerCast::Unsize, source: self.thir.exprs.push(expr) }
        .                       }
        .                       Adjust::Pointer(cast) => ExprKind::Pointer { cast, source: self.thir.exprs.push(expr) },
      697 ( 0.00%)              Adjust::NeverToAny => ExprKind::NeverToAny { source: self.thir.exprs.push(expr) },
        .                       Adjust::Deref(None) => {
        .                           adjust_span(&mut expr);
    6,970 ( 0.00%)                  ExprKind::Deref { arg: self.thir.exprs.push(expr) }
        .                       }
       52 ( 0.00%)              Adjust::Deref(Some(deref)) => {
        .                           // We don't need to do call adjust_span here since
        .                           // deref coercions always start with a built-in deref.
       65 ( 0.00%)                  let call = deref.method_call(self.tcx(), expr.ty);
        .           
       78 ( 0.00%)                  expr = Expr {
        .                               temp_lifetime,
       13 ( 0.00%)                      ty: self
        .                                   .tcx
       26 ( 0.00%)                          .mk_ref(deref.region, ty::TypeAndMut { ty: expr.ty, mutbl: deref.mutbl }),
        .                               span,
        .                               kind: ExprKind::Borrow {
        .                                   borrow_kind: deref.mutbl.to_borrow_kind(),
      195 ( 0.00%)                          arg: self.thir.exprs.push(expr),
        .                               },
        .                           };
        .           
      273 ( 0.00%)                  let expr = Box::new([self.thir.exprs.push(expr)]);
        .           
      169 ( 0.00%)                  self.overloaded_place(hir_expr, adjustment.target, Some(call), expr, deref.span)
        .                       }
    2,000 ( 0.00%)              Adjust::Borrow(AutoBorrow::Ref(_, m)) => ExprKind::Borrow {
        .                           borrow_kind: m.to_borrow_kind(),
    7,000 ( 0.00%)                  arg: self.thir.exprs.push(expr),
        .                       },
        .                       Adjust::Borrow(AutoBorrow::RawPtr(mutability)) => {
        .                           ExprKind::AddressOf { mutability, arg: self.thir.exprs.push(expr) }
        .                       }
        .                   };
        .           
   18,791 ( 0.00%)          Expr { temp_lifetime, ty: adjustment.target, span, kind }
        .               }
        .           
  640,280 ( 0.02%)      fn make_mirror_unadjusted(&mut self, expr: &'tcx hir::Expr<'tcx>) -> Expr<'tcx> {
  256,112 ( 0.01%)          let expr_ty = self.typeck_results().expr_ty(expr);
   64,028 ( 0.00%)          let expr_span = expr.span;
  320,140 ( 0.01%)          let temp_lifetime = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);
        .           
  384,885 ( 0.01%)          let kind = match expr.kind {
        .                       // Here comes the interesting stuff:
      636 ( 0.00%)              hir::ExprKind::MethodCall(segment, ref args, fn_span) => {
        .                           // Rewrite a.b(c) into UFCS form like Trait::b(a, c)
    1,484 ( 0.00%)                  let expr = self.method_callee(expr, segment.ident.span, None);
        .                           // When we apply adjustments to the receiver, use the span of
        .                           // the overall method call for better diagnostics. args[0]
        .                           // is guaranteed to exist, since a method call always has a receiver.
      848 ( 0.00%)                  let old_adjustment_span = self.adjustment_span.replace((args[0].hir_id, expr_span));
        .                           tracing::info!("Using method span: {:?}", expr.span);
      212 ( 0.00%)                  let args = self.mirror_exprs(args);
      424 ( 0.00%)                  self.adjustment_span = old_adjustment_span;
    1,484 ( 0.00%)                  ExprKind::Call {
      212 ( 0.00%)                      ty: expr.ty,
    2,968 ( 0.00%)                      fun: self.thir.exprs.push(expr),
        .                               args,
        .                               from_hir_call: true,
        .                               fn_span,
        .                           }
        .                       }
        .           
        .                       hir::ExprKind::Call(ref fun, ref args) => {
   40,476 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
        .                               // The callee is something implementing Fn, FnMut, or FnOnce.
        .                               // Find the actual method implementation being called and
        .                               // build the appropriate UFCS call expression with the
        .                               // callee-object as expr parameter.
        .           
        .                               // rewrite f(u, v) into FnOnce::call_once(f, (u, v))
        .           
        .                               let method = self.method_callee(expr, fun.span, None);
-- line 194 ----------------------------------------
-- line 206 ----------------------------------------
        .                                   ty: method.ty,
        .                                   fun: self.thir.exprs.push(method),
        .                                   args: Box::new([self.mirror_expr(fun), tupled_args]),
        .                                   from_hir_call: true,
        .                                   fn_span: expr.span,
        .                               }
        .                           } else {
        .                               let adt_data =
   50,595 ( 0.00%)                          if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = fun.kind {
        .                                       // Tuple-like ADTs are represented as ExprKind::Call. We convert them here.
      984 ( 0.00%)                              expr_ty.ty_adt_def().and_then(|adt_def| match path.res {
      122 ( 0.00%)                                  Res::Def(DefKind::Ctor(_, CtorKind::Fn), ctor_id) => {
      244 ( 0.00%)                                      Some((adt_def, adt_def.variant_index_with_ctor_id(ctor_id)))
        .                                           }
        .                                           Res::SelfCtor(..) => Some((adt_def, VariantIdx::new(0))),
        .                                           _ => None,
        .                                       })
        .                                   } else {
        .                                       None
        .                                   };
      288 ( 0.00%)                      if let Some((adt_def, index)) = adt_data {
      305 ( 0.00%)                          let substs = self.typeck_results().node_substs(fun.hir_id);
      183 ( 0.00%)                          let user_provided_types = self.typeck_results().user_provided_types();
        .                                   let user_ty =
      305 ( 0.00%)                              user_provided_types.get(fun.hir_id).copied().map(|mut u_ty| {
        .                                           if let UserType::TypeOf(ref mut did, _) = &mut u_ty.value {
        .                                               *did = adt_def.did;
        .                                           }
        .                                           u_ty
        .                                       });
        .                                   debug!("make_mirror_unadjusted: (call) user_ty={:?}", user_ty);
        .           
       61 ( 0.00%)                          let field_refs = args
        .                                       .iter()
        .                                       .enumerate()
        .                                       .map(|(idx, e)| FieldExpr {
        .                                           name: Field::new(idx),
        .                                           expr: self.mirror_expr(e),
        .                                       })
        .                                       .collect();
        .                                   ExprKind::Adt(Box::new(Adt {
-- line 246 ----------------------------------------
-- line 247 ----------------------------------------
        .                                       adt_def,
        .                                       substs,
        .                                       variant_index: index,
        .                                       fields: field_refs,
        .                                       user_ty,
        .                                       base: None,
        .                                   }))
        .                               } else {
   40,232 ( 0.00%)                          ExprKind::Call {
   50,373 ( 0.00%)                              ty: self.typeck_results().node_type(fun.hir_id),
   10,058 ( 0.00%)                              fun: self.mirror_expr(fun),
   40,232 ( 0.00%)                              args: self.mirror_exprs(args),
        .                                       from_hir_call: true,
   10,058 ( 0.00%)                              fn_span: expr.span,
        .                                   }
        .                               }
        .                           }
        .                       }
        .           
        .                       hir::ExprKind::AddrOf(hir::BorrowKind::Ref, mutbl, ref arg) => {
      550 ( 0.00%)                  ExprKind::Borrow { borrow_kind: mutbl.to_borrow_kind(), arg: self.mirror_expr(arg) }
        .                       }
        .           
        .                       hir::ExprKind::AddrOf(hir::BorrowKind::Raw, mutability, ref arg) => {
        .                           ExprKind::AddressOf { mutability, arg: self.mirror_expr(arg) }
        .                       }
        .           
    3,696 ( 0.00%)              hir::ExprKind::Block(ref blk, _) => ExprKind::Block { body: self.mirror_block(blk) },
        .           
        .                       hir::ExprKind::Assign(ref lhs, ref rhs, _) => {
      174 ( 0.00%)                  ExprKind::Assign { lhs: self.mirror_expr(lhs), rhs: self.mirror_expr(rhs) }
        .                       }
        .           
        4 ( 0.00%)              hir::ExprKind::AssignOp(op, ref lhs, ref rhs) => {
       16 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
        .                               let lhs = self.mirror_expr(lhs);
        .                               let rhs = self.mirror_expr(rhs);
        .                               self.overloaded_operator(expr, Box::new([lhs, rhs]))
        .                           } else {
       20 ( 0.00%)                      ExprKind::AssignOp {
       12 ( 0.00%)                          op: bin_op(op.node),
        4 ( 0.00%)                          lhs: self.mirror_expr(lhs),
        4 ( 0.00%)                          rhs: self.mirror_expr(rhs),
        .                               }
        .                           }
        .                       }
        .           
   30,907 ( 0.00%)              hir::ExprKind::Lit(ref lit) => ExprKind::Literal {
  123,628 ( 0.00%)                  literal: self.const_eval_literal(&lit.node, expr_ty, lit.span, false),
        .                           user_ty: None,
        .                           const_id: None,
        .                       },
        .           
      148 ( 0.00%)              hir::ExprKind::Binary(op, ref lhs, ref rhs) => {
      592 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
       29 ( 0.00%)                      let lhs = self.mirror_expr(lhs);
       29 ( 0.00%)                      let rhs = self.mirror_expr(rhs);
        .                               self.overloaded_operator(expr, Box::new([lhs, rhs]))
        .                           } else {
        .                               // FIXME overflow
      408 ( 0.00%)                      match op.node {
      136 ( 0.00%)                          hir::BinOpKind::And => ExprKind::LogicalOp {
        .                                       op: LogicalOp::And,
       34 ( 0.00%)                              lhs: self.mirror_expr(lhs),
       34 ( 0.00%)                              rhs: self.mirror_expr(rhs),
        .                                   },
       72 ( 0.00%)                          hir::BinOpKind::Or => ExprKind::LogicalOp {
        .                                       op: LogicalOp::Or,
       18 ( 0.00%)                              lhs: self.mirror_expr(lhs),
       18 ( 0.00%)                              rhs: self.mirror_expr(rhs),
        .                                   },
        .                                   _ => {
      268 ( 0.00%)                              let op = bin_op(op.node);
      335 ( 0.00%)                              ExprKind::Binary {
        .                                           op,
       67 ( 0.00%)                                  lhs: self.mirror_expr(lhs),
       67 ( 0.00%)                                  rhs: self.mirror_expr(rhs),
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                       }
        .           
        .                       hir::ExprKind::Index(ref lhs, ref index) => {
      185 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
        .                               let lhs = self.mirror_expr(lhs);
        .                               let index = self.mirror_expr(index);
      221 ( 0.00%)                      self.overloaded_place(expr, expr_ty, None, Box::new([lhs, index]), expr.span)
        .                           } else {
       80 ( 0.00%)                      ExprKind::Index { lhs: self.mirror_expr(lhs), index: self.mirror_expr(index) }
        .                           }
        .                       }
        .           
        .                       hir::ExprKind::Unary(hir::UnOp::Deref, ref arg) => {
      695 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
        .                               let arg = self.mirror_expr(arg);
        9 ( 0.00%)                      self.overloaded_place(expr, expr_ty, None, Box::new([arg]), expr.span)
        .                           } else {
      414 ( 0.00%)                      ExprKind::Deref { arg: self.mirror_expr(arg) }
        .                           }
        .                       }
        .           
        .                       hir::ExprKind::Unary(hir::UnOp::Not, ref arg) => {
       80 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
        .                               let arg = self.mirror_expr(arg);
        .                               self.overloaded_operator(expr, Box::new([arg]))
        .                           } else {
       48 ( 0.00%)                      ExprKind::Unary { op: UnOp::Not, arg: self.mirror_expr(arg) }
        .                           }
        .                       }
        .           
        .                       hir::ExprKind::Unary(hir::UnOp::Neg, ref arg) => {
        .                           if self.typeck_results().is_method_call(expr) {
        .                               let arg = self.mirror_expr(arg);
        .                               self.overloaded_operator(expr, Box::new([arg]))
        .                           } else if let hir::ExprKind::Lit(ref lit) = arg.kind {
-- line 362 ----------------------------------------
-- line 365 ----------------------------------------
        .                                   user_ty: None,
        .                                   const_id: None,
        .                               }
        .                           } else {
        .                               ExprKind::Unary { op: UnOp::Neg, arg: self.mirror_expr(arg) }
        .                           }
        .                       }
        .           
       58 ( 0.00%)              hir::ExprKind::Struct(ref qpath, ref fields, ref base) => match expr_ty.kind() {
       58 ( 0.00%)                  ty::Adt(adt, substs) => match adt.adt_kind() {
        .                               AdtKind::Struct | AdtKind::Union => {
       75 ( 0.00%)                          let user_provided_types = self.typeck_results().user_provided_types();
      100 ( 0.00%)                          let user_ty = user_provided_types.get(expr.hir_id).copied();
        .                                   debug!("make_mirror_unadjusted: (struct/union) user_ty={:?}", user_ty);
      100 ( 0.00%)                          ExprKind::Adt(Box::new(Adt {
       50 ( 0.00%)                              adt_def: adt,
        .                                       variant_index: VariantIdx::new(0),
       50 ( 0.00%)                              substs,
        .                                       user_ty,
       50 ( 0.00%)                              fields: self.field_refs(fields),
      100 ( 0.00%)                              base: base.as_ref().map(|base| FruInfo {
        .                                           base: self.mirror_expr(base),
        .                                           field_types: self.typeck_results().fru_field_types()[expr.hir_id]
        .                                               .iter()
        .                                               .copied()
        .                                               .collect(),
        .                                       }),
        .                                   }))
        .                               }
        .                               AdtKind::Enum => {
       24 ( 0.00%)                          let res = self.typeck_results().qpath_res(qpath, expr.hir_id);
       16 ( 0.00%)                          match res {
       12 ( 0.00%)                              Res::Def(DefKind::Variant, variant_id) => {
        4 ( 0.00%)                                  assert!(base.is_none());
        .           
       12 ( 0.00%)                                  let index = adt.variant_index_with_id(variant_id);
        .                                           let user_provided_types =
       16 ( 0.00%)                                      self.typeck_results().user_provided_types();
       16 ( 0.00%)                                  let user_ty = user_provided_types.get(expr.hir_id).copied();
        .                                           debug!("make_mirror_unadjusted: (variant) user_ty={:?}", user_ty);
        .                                           ExprKind::Adt(Box::new(Adt {
        4 ( 0.00%)                                      adt_def: adt,
        .                                               variant_index: index,
        8 ( 0.00%)                                      substs,
        .                                               user_ty,
        8 ( 0.00%)                                      fields: self.field_refs(fields),
        .                                               base: None,
        .                                           }))
        .                                       }
        .                                       _ => {
        .                                           span_bug!(expr.span, "unexpected res: {:?}", res);
        .                                       }
        .                                   }
        .                               }
        .                           },
        .                           _ => {
        .                               span_bug!(expr.span, "unexpected type for struct literal: {:?}", expr_ty);
        .                           }
        .                       },
        .           
        .                       hir::ExprKind::Closure(..) => {
       57 ( 0.00%)                  let closure_ty = self.typeck_results().expr_ty(expr);
       57 ( 0.00%)                  let (def_id, substs, movability) = match *closure_ty.kind() {
        .                               ty::Closure(def_id, substs) => (def_id, UpvarSubsts::Closure(substs), None),
        .                               ty::Generator(def_id, substs, movability) => {
        .                                   (def_id, UpvarSubsts::Generator(substs), Some(movability))
        .                               }
        .                               _ => {
        .                                   span_bug!(expr.span, "closure expr w/o closure type: {:?}", closure_ty);
        .                               }
        .                           };
        .           
      114 ( 0.00%)                  let upvars = self
        .                               .typeck_results
        .                               .closure_min_captures_flattened(def_id)
        .                               .zip(substs.upvar_tys())
        .                               .map(|(captured_place, ty)| {
       45 ( 0.00%)                          let upvars = self.capture_upvar(expr, captured_place, ty);
      126 ( 0.00%)                          self.thir.exprs.push(upvars)
        .                               })
        .                               .collect();
        .           
        .                           // Convert the closure fake reads, if any, from hir `Place` to ExprRef
       19 ( 0.00%)                  let fake_reads = match self.typeck_results.closure_fake_reads.get(&def_id) {
        .                               Some(fake_reads) => fake_reads
        .                                   .iter()
        .                                   .map(|(place, cause, hir_id)| {
        .                                       let expr = self.convert_captured_hir_place(expr, place.clone());
        .                                       (self.thir.exprs.push(expr), *cause, *hir_id)
        .                                   })
        .                                   .collect(),
        .                               None => Vec::new(),
        .                           };
        .           
      361 ( 0.00%)                  ExprKind::Closure { closure_id: def_id, substs, upvars, movability, fake_reads }
        .                       }
        .           
   10,786 ( 0.00%)              hir::ExprKind::Path(ref qpath) => {
   43,144 ( 0.00%)                  let res = self.typeck_results().qpath_res(qpath, expr.hir_id);
   43,144 ( 0.00%)                  self.convert_path_expr(expr, res)
        .                       }
        .           
        .                       hir::ExprKind::InlineAsm(ref asm) => ExprKind::InlineAsm {
        .                           template: asm.template,
        .                           operands: asm
        .                               .operands
        .                               .iter()
        .                               .map(|(op, _op_sp)| {
-- line 472 ----------------------------------------
-- line 572 ----------------------------------------
        .                       hir::ExprKind::ConstBlock(ref anon_const) => {
        .                           let anon_const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);
        .                           let value = ty::Const::from_inline_const(self.tcx, anon_const_def_id);
        .           
        .                           ExprKind::ConstBlock { value }
        .                       }
        .                       // Now comes the rote stuff:
        .                       hir::ExprKind::Repeat(ref v, _) => {
       15 ( 0.00%)                  let ty = self.typeck_results().expr_ty(expr);
       10 ( 0.00%)                  let count = match ty.kind() {
        .                               ty::Array(_, ct) => ct,
        .                               _ => span_bug!(expr.span, "unexpected repeat expr ty: {:?}", ty),
        .                           };
        .           
       30 ( 0.00%)                  ExprKind::Repeat { value: self.mirror_expr(v), count }
        .                       }
        .                       hir::ExprKind::Ret(ref v) => {
       93 ( 0.00%)                  ExprKind::Return { value: v.as_ref().map(|v| self.mirror_expr(v)) }
        .                       }
       21 ( 0.00%)              hir::ExprKind::Break(dest, ref value) => match dest.target_id {
       35 ( 0.00%)                  Ok(target_id) => ExprKind::Break {
        .                               label: region::Scope { id: target_id.local_id, data: region::ScopeData::Node },
        .                               value: value.as_ref().map(|value| self.mirror_expr(value)),
        .                           },
        .                           Err(err) => bug!("invalid loop id for break: {}", err),
        .                       },
        .                       hir::ExprKind::Continue(dest) => match dest.target_id {
        .                           Ok(loop_id) => ExprKind::Continue {
        .                               label: region::Scope { id: loop_id.local_id, data: region::ScopeData::Node },
        .                           },
        .                           Err(err) => bug!("invalid loop id for continue: {}", err),
        .                       },
      200 ( 0.00%)              hir::ExprKind::Let(let_expr) => ExprKind::Let {
       25 ( 0.00%)                  expr: self.mirror_expr(let_expr.init),
       75 ( 0.00%)                  pat: self.pattern_from_hir(let_expr.pat),
        .                       },
      979 ( 0.00%)              hir::ExprKind::If(cond, then, else_opt) => ExprKind::If {
        .                           if_then_scope: region::Scope {
       89 ( 0.00%)                      id: then.hir_id.local_id,
        .                               data: region::ScopeData::IfThen,
        .                           },
        .                           cond: self.mirror_expr(cond),
        .                           then: self.mirror_expr(then),
        .                           else_opt: else_opt.map(|el| self.mirror_expr(el)),
        .                       },
      315 ( 0.00%)              hir::ExprKind::Match(ref discr, ref arms, _) => ExprKind::Match {
       63 ( 0.00%)                  scrutinee: self.mirror_expr(discr),
      462 ( 0.00%)                  arms: arms.iter().map(|a| self.convert_arm(a)).collect(),
        .                       },
        .                       hir::ExprKind::Loop(ref body, ..) => {
       35 ( 0.00%)                  let block_ty = self.typeck_results().node_type(body.hir_id);
       42 ( 0.00%)                  let temp_lifetime = self.region_scope_tree.temporary_scope(body.hir_id.local_id);
       28 ( 0.00%)                  let block = self.mirror_block(body);
      105 ( 0.00%)                  let body = self.thir.exprs.push(Expr {
        .                               ty: block_ty,
        .                               temp_lifetime,
        7 ( 0.00%)                      span: block.span,
       56 ( 0.00%)                      kind: ExprKind::Block { body: block },
        .                           });
       21 ( 0.00%)                  ExprKind::Loop { body }
        .                       }
      280 ( 0.00%)              hir::ExprKind::Field(ref source, ..) => ExprKind::Field {
       70 ( 0.00%)                  lhs: self.mirror_expr(source),
      420 ( 0.00%)                  name: Field::new(self.tcx.field_index(expr.hir_id, self.typeck_results)),
        .                       },
        .                       hir::ExprKind::Cast(ref source, ref cast_ty) => {
        .                           // Check for a user-given type annotation on this `cast`
       48 ( 0.00%)                  let user_provided_types = self.typeck_results.user_provided_types();
       72 ( 0.00%)                  let user_ty = user_provided_types.get(cast_ty.hir_id);
        .           
        .                           debug!(
        .                               "cast({:?}) has ty w/ hir_id {:?} and user provided ty {:?}",
        .                               expr, cast_ty.hir_id, user_ty,
        .                           );
        .           
        .                           // Check to see if this cast is a "coercion cast", where the cast is actually done
        .                           // using a coercion (or is a no-op).
       72 ( 0.00%)                  let cast = if self.typeck_results().is_coercion_cast(source.hir_id) {
        .                               // Convert the lexpr to a vexpr.
        .                               ExprKind::Use { source: self.mirror_expr(source) }
       36 ( 0.00%)                  } else if self.typeck_results().expr_ty(source).is_region_ptr() {
        .                               // Special cased so that we can type check that the element
        .                               // type of the source matches the pointed to type of the
        .                               // destination.
        .                               ExprKind::Pointer {
        .                                   source: self.mirror_expr(source),
        .                                   cast: PointerCast::ArrayToPointer,
        .                               }
        .                           } else {
-- line 660 ----------------------------------------
-- line 664 ----------------------------------------
        .                               // enum's layout (or its tag type) to compute it during const eval
        .                               // Example:
        .                               // enum Foo {
        .                               //     A,
        .                               //     B = A as isize + 4,
        .                               // }
        .                               // The correct solution would be to add symbolic computations to miri,
        .                               // so we wouldn't have to compute and store the actual value
       38 ( 0.00%)                      let var = if let hir::ExprKind::Path(ref qpath) = source.kind {
       12 ( 0.00%)                          let res = self.typeck_results().qpath_res(qpath, source.hir_id);
       14 ( 0.00%)                          self.typeck_results().node_type(source.hir_id).ty_adt_def().and_then(
        .                                       |adt_def| match res {
        .                                           Res::Def(
        .                                               DefKind::Ctor(CtorOf::Variant, CtorKind::Const),
        .                                               variant_ctor_id,
        .                                           ) => {
        .                                               let idx = adt_def.variant_index_with_ctor_id(variant_ctor_id);
        .                                               let (d, o) = adt_def.discriminant_def_for_variant(idx);
        .                                               use rustc_middle::ty::util::IntTypeExt;
-- line 682 ----------------------------------------
-- line 683 ----------------------------------------
        .                                               let ty = adt_def.repr.discr_type();
        .                                               let ty = ty.to_ty(self.tcx());
        .                                               Some((d, o, ty))
        .                                           }
        .                                           _ => None,
        .                                       },
        .                                   )
        .                               } else {
       20 ( 0.00%)                          None
        .                               };
        .           
        6 ( 0.00%)                      let source = if let Some((did, offset, var_ty)) = var {
        .                                   let mk_const = |literal| Expr {
        .                                       temp_lifetime,
        .                                       ty: var_ty,
        .                                       span: expr.span,
        .                                       kind: ExprKind::Literal { literal, user_ty: None, const_id: None },
        .                                   };
        .                                   let offset = self.thir.exprs.push(mk_const(ty::Const::from_bits(
        .                                       self.tcx,
-- line 702 ----------------------------------------
-- line 723 ----------------------------------------
        .                                               ty: var_ty,
        .                                               span: expr.span,
        .                                               kind: bin,
        .                                           })
        .                                       }
        .                                       None => offset,
        .                                   }
        .                               } else {
        2 ( 0.00%)                          self.mirror_expr(source)
        .                               };
        .           
        .                               ExprKind::Cast { source: source }
        .                           };
        .           
       24 ( 0.00%)                  if let Some(user_ty) = user_ty {
        .                               // NOTE: Creating a new Expr and wrapping a Cast inside of it may be
        .                               //       inefficient, revisit this when performance becomes an issue.
        .                               let cast_expr = self.thir.exprs.push(Expr {
        .                                   temp_lifetime,
        .                                   ty: expr_ty,
        .                                   span: expr.span,
        .                                   kind: cast,
        .                               });
        .                               debug!("make_mirror_unadjusted: (cast) user_ty={:?}", user_ty);
        .           
        .                               ExprKind::ValueTypeAscription { source: cast_expr, user_ty: Some(*user_ty) }
        .                           } else {
       48 ( 0.00%)                      cast
        .                           }
        .                       }
        .                       hir::ExprKind::Type(ref source, ref ty) => {
        .                           let user_provided_types = self.typeck_results.user_provided_types();
        .                           let user_ty = user_provided_types.get(ty.hir_id).copied();
        .                           debug!("make_mirror_unadjusted: (type) user_ty={:?}", user_ty);
        .                           let mirrored = self.mirror_expr(source);
        .                           if source.is_syntactic_place_expr() {
        .                               ExprKind::PlaceTypeAscription { source: mirrored, user_ty }
        .                           } else {
        .                               ExprKind::ValueTypeAscription { source: mirrored, user_ty }
        .                           }
        .                       }
        .                       hir::ExprKind::DropTemps(ref source) => {
      276 ( 0.00%)                  ExprKind::Use { source: self.mirror_expr(source) }
        .                       }
        .                       hir::ExprKind::Box(ref value) => ExprKind::Box { value: self.mirror_expr(value) },
        .                       hir::ExprKind::Array(ref fields) => {
   49,690 ( 0.00%)                  ExprKind::Array { fields: self.mirror_exprs(fields) }
        .                       }
    4,465 ( 0.00%)              hir::ExprKind::Tup(ref fields) => ExprKind::Tuple { fields: self.mirror_exprs(fields) },
        .           
        .                       hir::ExprKind::Yield(ref v, _) => ExprKind::Yield { value: self.mirror_expr(v) },
        .                       hir::ExprKind::Err => unreachable!(),
        .                   };
        .           
2,176,952 ( 0.06%)          Expr { temp_lifetime, ty: expr_ty, span: expr.span, kind }
  512,224 ( 0.01%)      }
        .           
   92,997 ( 0.00%)      fn user_substs_applied_to_res(
        .                   &mut self,
        .                   hir_id: hir::HirId,
        .                   res: Res,
        .               ) -> Option<ty::CanonicalUserType<'tcx>> {
        .                   debug!("user_substs_applied_to_res: res={:?}", res);
   61,998 ( 0.00%)          let user_provided_type = match res {
        .                       // A reference to something callable -- e.g., a fn, method, or
        .                       // a tuple-struct or tuple-variant. This has the type of a
        .                       // `Fn` but with the user-given substitutions.
        .                       Res::Def(DefKind::Fn, _)
        .                       | Res::Def(DefKind::AssocFn, _)
        .                       | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _)
        .                       | Res::Def(DefKind::Const, _)
        .                       | Res::Def(DefKind::AssocConst, _) => {
   72,331 ( 0.00%)                  self.typeck_results().user_provided_types().get(hir_id).copied()
        .                       }
        .           
        .                       // A unit struct/variant which is used as a value (e.g.,
        .                       // `None`). This has the type of the enum/struct that defines
        .                       // this variant -- but with the substitutions given by the
        .                       // user.
        .                       Res::Def(DefKind::Ctor(_, CtorKind::Const), _) => {
        .                           self.user_substs_applied_to_ty_of_hir_id(hir_id)
-- line 803 ----------------------------------------
-- line 805 ----------------------------------------
        .           
        .                       // `Self` is used in expression as a tuple struct constructor or a unit struct constructor
        .                       Res::SelfCtor(_) => self.user_substs_applied_to_ty_of_hir_id(hir_id),
        .           
        .                       _ => bug!("user_substs_applied_to_res: unexpected res {:?} at {:?}", res, hir_id),
        .                   };
        .                   debug!("user_substs_applied_to_res: user_provided_type={:?}", user_provided_type);
        .                   user_provided_type
   61,998 ( 0.00%)      }
        .           
    3,536 ( 0.00%)      fn method_callee(
        .                   &mut self,
        .                   expr: &hir::Expr<'_>,
        .                   span: Span,
        .                   overloaded_callee: Option<(DefId, SubstsRef<'tcx>)>,
        .               ) -> Expr<'tcx> {
    1,632 ( 0.00%)          let temp_lifetime = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);
    2,176 ( 0.00%)          let (def_id, substs, user_ty) = match overloaded_callee {
        .                       Some((def_id, substs)) => (def_id, substs, None),
        .                       None => {
        .                           let (kind, def_id) =
    2,331 ( 0.00%)                      self.typeck_results().type_dependent_def(expr.hir_id).unwrap_or_else(|| {
        .                                   span_bug!(expr.span, "no type-dependent def for method callee")
        .                               });
    3,885 ( 0.00%)                  let user_ty = self.user_substs_applied_to_res(expr.hir_id, Res::Def(kind, def_id));
        .                           debug!("method_callee: user_ty={:?}", user_ty);
    3,885 ( 0.00%)                  (def_id, self.typeck_results().node_substs(expr.hir_id), user_ty)
        .                       }
        .                   };
        .                   let ty = self.tcx().mk_fn_def(def_id, substs);
    3,536 ( 0.00%)          Expr {
        .                       temp_lifetime,
        .                       ty,
        .                       span,
        .                       kind: ExprKind::Literal {
        .                           literal: ty::Const::zero_sized(self.tcx(), ty),
    1,632 ( 0.00%)                  user_ty,
        .                           const_id: None,
        .                       },
        .                   }
    2,176 ( 0.00%)      }
        .           
    1,197 ( 0.00%)      fn convert_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) -> ArmId {
    1,064 ( 0.00%)          let arm = Arm {
      399 ( 0.00%)              pattern: self.pattern_from_hir(&arm.pat),
        .                       guard: arm.guard.as_ref().map(|g| match g {
        .                           hir::Guard::If(ref e) => Guard::If(self.mirror_expr(e)),
        .                           hir::Guard::IfLet(ref pat, ref e) => {
        .                               Guard::IfLet(self.pattern_from_hir(pat), self.mirror_expr(e))
        .                           }
        .                       }),
      133 ( 0.00%)              body: self.mirror_expr(arm.body),
      266 ( 0.00%)              lint_level: LintLevel::Explicit(arm.hir_id),
        .                       scope: region::Scope { id: arm.hir_id.local_id, data: region::ScopeData::Node },
      133 ( 0.00%)              span: arm.span,
        .                   };
    1,995 ( 0.00%)          self.thir.arms.push(arm)
    1,197 ( 0.00%)      }
        .           
        .               fn convert_path_expr(&mut self, expr: &'tcx hir::Expr<'tcx>, res: Res) -> ExprKind<'tcx> {
   75,502 ( 0.00%)          let substs = self.typeck_results().node_substs(expr.hir_id);
   75,872 ( 0.00%)          match res {
        .                       // A regular function, constructor function or a constant.
        .                       Res::Def(DefKind::Fn, _)
        .                       | Res::Def(DefKind::AssocFn, _)
        .                       | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _)
        .                       | Res::SelfCtor(..) => {
  100,580 ( 0.00%)                  let user_ty = self.user_substs_applied_to_res(expr.hir_id, res);
        .                           debug!("convert_path_expr: user_ty={:?}", user_ty);
   10,058 ( 0.00%)                  ExprKind::Literal {
        .                               literal: ty::Const::zero_sized(
   20,116 ( 0.00%)                          self.tcx,
   30,174 ( 0.00%)                          self.typeck_results().node_type(expr.hir_id),
        .                               ),
   80,464 ( 0.00%)                      user_ty,
        .                               const_id: None,
        .                           }
        .                       }
        .           
        .                       Res::Def(DefKind::ConstParam, def_id) => {
        .                           let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id.expect_local());
        .                           let item_id = self.tcx.hir().get_parent_node(hir_id);
        .                           let item_def_id = self.tcx.hir().local_def_id(item_id);
-- line 887 ----------------------------------------
-- line 895 ----------------------------------------
        .                                   ty: self.typeck_results().node_type(expr.hir_id),
        .                               }),
        .                               user_ty: None,
        .                               const_id: Some(def_id),
        .                           }
        .                       }
        .           
        .                       Res::Def(DefKind::Const, def_id) | Res::Def(DefKind::AssocConst, def_id) => {
      144 ( 0.00%)                  let user_ty = self.user_substs_applied_to_res(expr.hir_id, res);
        .                           debug!("convert_path_expr: (const) user_ty={:?}", user_ty);
       80 ( 0.00%)                  ExprKind::Literal {
      192 ( 0.00%)                      literal: self.tcx.mk_const(ty::Const {
        .                                   val: ty::ConstKind::Unevaluated(ty::Unevaluated::new(
        .                                       ty::WithOptConstParam::unknown(def_id),
        .                                       substs,
        .                                   )),
       48 ( 0.00%)                          ty: self.typeck_results().node_type(expr.hir_id),
        .                               }),
      128 ( 0.00%)                      user_ty,
        .                               const_id: Some(def_id),
        .                           }
        .                       }
        .           
      370 ( 0.00%)              Res::Def(DefKind::Ctor(_, CtorKind::Const), def_id) => {
      370 ( 0.00%)                  let user_provided_types = self.typeck_results.user_provided_types();
      296 ( 0.00%)                  let user_provided_type = user_provided_types.get(expr.hir_id).copied();
        .                           debug!("convert_path_expr: user_provided_type={:?}", user_provided_type);
      296 ( 0.00%)                  let ty = self.typeck_results().node_type(expr.hir_id);
      148 ( 0.00%)                  match ty.kind() {
        .                               // A unit struct/variant which is used as a value.
        .                               // We return a completely different ExprKind here to account for this special case.
        .                               ty::Adt(adt_def, substs) => ExprKind::Adt(Box::new(Adt {
       74 ( 0.00%)                          adt_def,
      370 ( 0.00%)                          variant_index: adt_def.variant_index_with_ctor_id(def_id),
       74 ( 0.00%)                          substs,
        .                                   user_ty: user_provided_type,
        .                                   fields: Box::new([]),
        .                                   base: None,
        .                               })),
        .                               _ => bug!("unexpected ty: {:?}", ty),
        .                           }
        .                       }
        .           
-- line 937 ----------------------------------------
-- line 953 ----------------------------------------
        .                                   def_id: id,
        .                               }
        .                           };
        .                           ExprKind::Deref {
        .                               arg: self.thir.exprs.push(Expr { ty, temp_lifetime, span: expr.span, kind }),
        .                           }
        .                       }
        .           
    5,104 ( 0.00%)              Res::Local(var_hir_id) => self.convert_var(var_hir_id),
        .           
        .                       _ => span_bug!(expr.span, "res `{:?}` not yet implemented", res),
        .                   }
        .               }
        .           
    6,470 ( 0.00%)      fn convert_var(&mut self, var_hir_id: hir::HirId) -> ExprKind<'tcx> {
        .                   // We want upvars here not captures.
        .                   // Captures will be handled in MIR.
        .                   let is_upvar = self
        .                       .tcx
        .                       .upvars_mentioned(self.body_owner)
        .                       .map_or(false, |upvars| upvars.contains_key(&var_hir_id));
        .           
        .                   debug!(
        .                       "convert_var({:?}): is_upvar={}, body_owner={:?}",
        .                       var_hir_id, is_upvar, self.body_owner
        .                   );
        .           
       23 ( 0.00%)          if is_upvar {
       70 ( 0.00%)              ExprKind::UpvarRef { closure_def_id: self.body_owner, var_hir_id }
        .                   } else {
    1,911 ( 0.00%)              ExprKind::VarRef { id: var_hir_id }
        .                   }
    5,176 ( 0.00%)      }
        .           
      319 ( 0.00%)      fn overloaded_operator(
        .                   &mut self,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .                   args: Box<[ExprId]>,
        .               ) -> ExprKind<'tcx> {
      203 ( 0.00%)          let fun = self.method_callee(expr, expr.span, None);
      435 ( 0.00%)          let fun = self.thir.exprs.push(fun);
      203 ( 0.00%)          ExprKind::Call {
      145 ( 0.00%)              ty: self.thir[fun].ty,
        .                       fun,
        .                       args,
        .                       from_hir_call: false,
        .                       fn_span: expr.span,
        .                   }
      232 ( 0.00%)      }
        .           
      434 ( 0.00%)      fn overloaded_place(
        .                   &mut self,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .                   place_ty: Ty<'tcx>,
        .                   overloaded_callee: Option<(DefId, SubstsRef<'tcx>)>,
        .                   args: Box<[ExprId]>,
        .                   span: Span,
        .               ) -> ExprKind<'tcx> {
        .                   // For an overloaded *x or x[y] expression of type T, the method
        .                   // call returns an &T and we must add the deref so that the types
        .                   // line up (this is because `*x` and `x[y]` represent places):
        .           
        .                   // Reconstruct the output assuming it's a reference with the
        .                   // same region and mutability as the receiver. This holds for
        .                   // `Deref(Mut)::Deref(_mut)` and `Index(Mut)::index(_mut)`.
      248 ( 0.00%)          let (region, mutbl) = match *self.thir[args[0]].ty.kind() {
       62 ( 0.00%)              ty::Ref(region, _, mutbl) => (region, mutbl),
        .                       _ => span_bug!(span, "overloaded_place: receiver is not a reference"),
        .                   };
       31 ( 0.00%)          let ref_ty = self.tcx.mk_ref(region, ty::TypeAndMut { ty: place_ty, mutbl });
        .           
        .                   // construct the complete expression `foo()` for the overloaded call,
        .                   // which will yield the &T type
      124 ( 0.00%)          let temp_lifetime = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);
      186 ( 0.00%)          let fun = self.method_callee(expr, span, overloaded_callee);
      434 ( 0.00%)          let fun = self.thir.exprs.push(fun);
      186 ( 0.00%)          let fun_ty = self.thir[fun].ty;
      434 ( 0.00%)          let ref_expr = self.thir.exprs.push(Expr {
        .                       temp_lifetime,
        .                       ty: ref_ty,
        .                       span,
        .                       kind: ExprKind::Call { ty: fun_ty, fun, args, from_hir_call: false, fn_span: span },
        .                   });
        .           
        .                   // construct and return a deref wrapper `*foo()`
       62 ( 0.00%)          ExprKind::Deref { arg: ref_expr }
      248 ( 0.00%)      }
        .           
       99 ( 0.00%)      fn convert_captured_hir_place(
        .                   &mut self,
        .                   closure_expr: &'tcx hir::Expr<'tcx>,
        .                   place: HirPlace<'tcx>,
        .               ) -> Expr<'tcx> {
       36 ( 0.00%)          let temp_lifetime = self.region_scope_tree.temporary_scope(closure_expr.hir_id.local_id);
        .                   let var_ty = place.base_ty;
        .           
        .                   // The result of capture analysis in `rustc_typeck/check/upvar.rs`represents a captured path
        .                   // as it's seen for use within the closure and not at the time of closure creation.
        .                   //
        .                   // That is we see expect to see it start from a captured upvar and not something that is local
        .                   // to the closure's parent.
       18 ( 0.00%)          let var_hir_id = match place.base {
       18 ( 0.00%)              HirPlaceBase::Upvar(upvar_id) => upvar_id.var_path.hir_id,
        .                       base => bug!("Expected an upvar, found {:?}", base),
        .                   };
        .           
      153 ( 0.00%)          let mut captured_place_expr = Expr {
        .                       temp_lifetime,
        .                       ty: var_ty,
        9 ( 0.00%)              span: closure_expr.span,
       45 ( 0.00%)              kind: self.convert_var(var_hir_id),
        .                   };
        .           
        .                   for proj in place.projections.iter() {
        .                       let kind = match proj.kind {
        .                           HirProjectionKind::Deref => {
        .                               ExprKind::Deref { arg: self.thir.exprs.push(captured_place_expr) }
        .                           }
        .                           HirProjectionKind::Field(field, ..) => {
-- line 1071 ----------------------------------------
-- line 1082 ----------------------------------------
        .                           }
        .                       };
        .           
        .                       captured_place_expr =
        .                           Expr { temp_lifetime, ty: proj.ty, span: closure_expr.span, kind };
        .                   }
        .           
        .                   captured_place_expr
       81 ( 0.00%)      }
        .           
       90 ( 0.00%)      fn capture_upvar(
        .                   &mut self,
        .                   closure_expr: &'tcx hir::Expr<'tcx>,
        .                   captured_place: &'tcx ty::CapturedPlace<'tcx>,
        .                   upvar_ty: Ty<'tcx>,
        .               ) -> Expr<'tcx> {
        .                   let upvar_capture = captured_place.info.capture_kind;
        .                   let captured_place_expr =
       63 ( 0.00%)              self.convert_captured_hir_place(closure_expr, captured_place.place.clone());
       27 ( 0.00%)          let temp_lifetime = self.region_scope_tree.temporary_scope(closure_expr.hir_id.local_id);
        .           
       18 ( 0.00%)          match upvar_capture {
        .                       ty::UpvarCapture::ByValue => captured_place_expr,
        .                       ty::UpvarCapture::ByRef(upvar_borrow) => {
       45 ( 0.00%)                  let borrow_kind = match upvar_borrow {
        .                               ty::BorrowKind::ImmBorrow => BorrowKind::Shared,
        .                               ty::BorrowKind::UniqueImmBorrow => BorrowKind::Unique,
        .                               ty::BorrowKind::MutBorrow => BorrowKind::Mut { allow_two_phase_borrow: false },
        .                           };
       63 ( 0.00%)                  Expr {
        .                               temp_lifetime,
        .                               ty: upvar_ty,
        9 ( 0.00%)                      span: closure_expr.span,
        .                               kind: ExprKind::Borrow {
        .                                   borrow_kind,
      135 ( 0.00%)                          arg: self.thir.exprs.push(captured_place_expr),
        .                               },
        .                           }
        .                       }
        .                   }
       81 ( 0.00%)      }
        .           
        .               /// Converts a list of named fields (i.e., for struct-like struct/enum ADTs) into FieldExpr.
        .               fn field_refs(&mut self, fields: &'tcx [hir::ExprField<'tcx>]) -> Box<[FieldExpr]> {
        .                   fields
        .                       .iter()
        .                       .map(|field| FieldExpr {
      189 ( 0.00%)                  name: Field::new(self.tcx.field_index(field.hir_id, self.typeck_results)),
        .                           expr: self.mirror_expr(field.expr),
        .                       })
        .                       .collect()
        .               }
        .           }
        .           
        .           trait ToBorrowKind {
        .               fn to_borrow_kind(&self) -> BorrowKind;
        .           }
        .           
        .           impl ToBorrowKind for AutoBorrowMutability {
        .               fn to_borrow_kind(&self) -> BorrowKind {
        .                   use rustc_middle::ty::adjustment::AllowTwoPhase;
    3,500 ( 0.00%)          match *self {
        .                       AutoBorrowMutability::Mut { allow_two_phase_borrow } => BorrowKind::Mut {
        .                           allow_two_phase_borrow: match allow_two_phase_borrow {
        .                               AllowTwoPhase::Yes => true,
        .                               AllowTwoPhase::No => false,
        .                           },
        .                       },
        .                       AutoBorrowMutability::Not => BorrowKind::Shared,
        .                   }
        .               }
        .           }
        .           
        .           impl ToBorrowKind for hir::Mutability {
        .               fn to_borrow_kind(&self) -> BorrowKind {
       26 ( 0.00%)          match *self {
        .                       hir::Mutability::Mut => BorrowKind::Mut { allow_two_phase_borrow: false },
        .                       hir::Mutability::Not => BorrowKind::Shared,
        .                   }
        .               }
        .           }
        .           
      142 ( 0.00%)  fn bin_op(op: hir::BinOpKind) -> BinOp {
      639 ( 0.00%)      match op {
        .                   hir::BinOpKind::Add => BinOp::Add,
        .                   hir::BinOpKind::Sub => BinOp::Sub,
        .                   hir::BinOpKind::Mul => BinOp::Mul,
        .                   hir::BinOpKind::Div => BinOp::Div,
        .                   hir::BinOpKind::Rem => BinOp::Rem,
        .                   hir::BinOpKind::BitXor => BinOp::BitXor,
        .                   hir::BinOpKind::BitAnd => BinOp::BitAnd,
        .                   hir::BinOpKind::BitOr => BinOp::BitOr,
-- line 1173 ----------------------------------------
-- line 1176 ----------------------------------------
        .                   hir::BinOpKind::Eq => BinOp::Eq,
        .                   hir::BinOpKind::Lt => BinOp::Lt,
        .                   hir::BinOpKind::Le => BinOp::Le,
        .                   hir::BinOpKind::Ne => BinOp::Ne,
        .                   hir::BinOpKind::Ge => BinOp::Ge,
        .                   hir::BinOpKind::Gt => BinOp::Gt,
        .                   _ => bug!("no equivalent for ast binop {:?}", op),
        .               }
      142 ( 0.00%)  }

  858,178 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 111 ----------------------------------------
         .           const EMPTY: u8 = 0b1111_1111;
         .           
         .           /// Control byte value for a deleted bucket.
         .           const DELETED: u8 = 0b1000_0000;
         .           
         .           /// Checks whether a control byte represents a full bucket (top bit is clear).
         .           #[inline]
         .           fn is_full(ctrl: u8) -> bool {
 2,555,639 ( 0.06%)      ctrl & 0x80 == 0
         .           }
         .           
         .           /// Checks whether a control byte represents a special value (top bit is set).
         .           #[inline]
         .           fn is_special(ctrl: u8) -> bool {
         .               ctrl & 0x80 != 0
         .           }
         .           
         .           /// Checks whether a special control value is EMPTY (just check 1 bit).
         .           #[inline]
         .           fn special_is_empty(ctrl: u8) -> bool {
         .               debug_assert!(is_special(ctrl));
    49,404 ( 0.00%)      ctrl & 0x01 != 0
         .           }
         .           
         .           /// Primary hash function, used to select the initial bucket to probe from.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
         .           fn h1(hash: u64) -> usize {
         .               // On 32-bit platforms we simply ignore the higher hash bits.
         .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
         .           /// Secondary hash function, saved in the low 7 bits of the control byte.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
         .           fn h2(hash: u64) -> u8 {
         .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
         .               // value, some hash functions (such as FxHash) produce a usize result
         .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
         .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
57,398,224 ( 1.46%)      let top7 = hash >> (hash_len * 8 - 7);
         .               (top7 & 0x7f) as u8 // truncation
         .           }
         .           
         .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
         .           /// table size is a power of two) to visit every group of elements exactly once.
         .           ///
         .           /// A triangular probe has us jump by 1 more group every time. So first we
         .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
         .               #[inline]
         .               fn move_next(&mut self, bucket_mask: usize) {
         .                   // We should have found an empty bucket by now and ended the probe.
         .                   debug_assert!(
         .                       self.stride <= bucket_mask,
         .                       "Went past end of probe sequence"
         .                   );
         .           
   202,250 ( 0.01%)          self.stride += Group::WIDTH;
   202,250 ( 0.01%)          self.pos += self.stride;
   178,974 ( 0.00%)          self.pos &= bucket_mask;
         .               }
         .           }
         .           
         .           /// Returns the number of buckets needed to hold the given number of items,
         .           /// taking the maximum load factor into account.
         .           ///
         .           /// Returns `None` if an overflow occurs.
         .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
         .           #[cfg_attr(target_os = "emscripten", inline(never))]
         .           #[cfg_attr(not(target_os = "emscripten"), inline)]
         .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
         .               debug_assert_ne!(cap, 0);
         .           
         .               // For small tables we require at least 1 empty bucket so that lookups are
         .               // guaranteed to terminate if an element doesn't exist in the table.
    80,876 ( 0.00%)      if cap < 8 {
         .                   // We don't bother with a table size of 2 buckets since that can only
         .                   // hold a single element. Instead we skip directly to a 4 bucket table
         .                   // which can hold 3 elements.
   182,525 ( 0.00%)          return Some(if cap < 4 { 4 } else { 8 });
         .               }
         .           
         .               // Otherwise require 1/8 buckets to be empty (87.5% load)
         .               //
         .               // Be careful when modifying this, calculate_layout relies on the
         .               // overflow check here.
    23,598 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
         .           
         .               // Any overflows will have been caught by the checked_mul. Also, any
         .               // rounding errors from the division above will be cleaned up by
         .               // next_power_of_two (which can't overflow because of the previous division).
         .               Some(adjusted_cap.next_power_of_two())
         .           }
         .           
         .           /// Returns the maximum effective capacity for the given bucket mask, taking
         .           /// the maximum load factor into account.
         .           #[inline]
         .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   187,351 ( 0.00%)      if bucket_mask < 8 {
         .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
         .                   // Keep in mind that the bucket mask is one less than the bucket count.
         .                   bucket_mask
         .               } else {
         .                   // For larger tables we reserve 12.5% of the slots as empty.
    33,862 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
         .               }
         .           }
         .           
         .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
         .           /// while keeping the rest of `calculate_layout_for` independent of `T`
         .           #[derive(Copy, Clone)]
         .           struct TableLayout {
         .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
         .           
         .               #[inline]
         .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   let TableLayout { size, ctrl_align } = self;
         .                   // Manual layout calculation since Layout methods are not yet stable.
         .                   let ctrl_offset =
   183,855 ( 0.00%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   231,706 ( 0.01%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
         .           
         .                   Some((
         .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
         .                       ctrl_offset,
         .                   ))
         .               }
         .           }
         .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub unsafe fn drop(&self) {
         .                   self.as_ptr().drop_in_place();
         .               }
         .               #[inline]
         .               pub unsafe fn read(&self) -> T {
       410 ( 0.00%)          self.as_ptr().read()
         .               }
         .               #[inline]
         .               pub unsafe fn write(&self, val: T) {
         .                   self.as_ptr().write(val);
         .               }
         .               #[inline]
         .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
         .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
         .               /// Creates a new empty hash table without allocating any memory, using the
         .               /// given allocator.
         .               ///
         .               /// In effect this returns a table with exactly 1 bucket. However we can
         .               /// leave the data pointer dangling since that bucket is never written to
         .               /// due to our load factor forcing us to always have at least 1 free bucket.
         .               #[inline]
         .               pub fn new_in(alloc: A) -> Self {
        75 ( 0.00%)          Self {
         .                       table: RawTableInner::new_in(alloc),
         .                       marker: PhantomData,
         .                   }
         .               }
         .           
         .               /// Allocates a new hash table with the given number of buckets.
         .               ///
         .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
         .               unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   Ok(Self {
        70 ( 0.00%)              table: RawTableInner::new_uninitialized(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           buckets,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
         .               /// Attempts to allocate a new hash table with at least enough capacity
         .               /// for inserting the given number of elements without reallocating.
         .               fn fallible_with_capacity(
         .                   alloc: A,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   Ok(Self {
     7,249 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           capacity,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
         .                   debug_assert_ne!(self.table.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               /// Erases an element from the table without dropping it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
     6,203 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
     6,203 ( 0.00%)          let index = self.bucket_index(item);
         .                   self.table.erase(index);
    12,406 ( 0.00%)      }
         .           
         .               /// Erases an element from the table, dropping it in place.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
         .                   // Erase the element from the table first since drop might panic.
     3,478 ( 0.00%)          self.erase_no_drop(&item);
         .                   item.drop();
         .               }
         .           
         .               /// Finds and erases an element from the table, dropping it in place.
         .               /// Returns true if an element was found.
         .               #[cfg(feature = "raw")]
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// Removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
     8,928 ( 0.00%)          self.erase_no_drop(&item);
        42 ( 0.00%)          item.read()
         .               }
         .           
         .               /// Finds and removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
   998,818 ( 0.03%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
       244 ( 0.00%)          match self.find(hash, eq) {
    42,496 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
   490,916 ( 0.01%)              None => None,
         .                   }
 1,691,446 ( 0.04%)      }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear_no_drop(&mut self) {
         .                   self.table.clear_no_drop();
         .               }
         .           
         .               /// Removes all elements from the table without freeing the backing memory.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear(&mut self) {
         .                   // Ensure that the table is reset even if one of the drops panic
         .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
         .                   unsafe {
         1 ( 0.00%)              self_.drop_elements();
         .                   }
         .               }
         .           
         7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
     4,198 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
         .                       for item in self.iter() {
         .                           item.drop();
         .                       }
         .                   }
         8 ( 0.00%)      }
         .           
         .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
         .                   // Calculate the minimal number of elements that we need to reserve
         .                   // space for.
         .                   let min_size = usize::max(self.table.items, min_size);
         .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Ensures that at least `additional` items can be inserted into the table
         .               /// without reallocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   144,359 ( 0.00%)          if additional > self.table.growth_left {
         .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   138,057 ( 0.00%)              if self
         .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
         .                           .is_err()
         .                       {
         .                           unsafe { hint::unreachable_unchecked() }
         .                       }
         .                   }
         .               }
         .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
         .                   } else {
         .                       Ok(())
         .                   }
         .               }
         .           
         .               /// Out-of-line slow path for `reserve` and `try_reserve`.
         .               #[cold]
         .               #[inline(never)]
   337,602 ( 0.01%)      fn reserve_rehash(
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
         .               ) -> Result<(), TryReserveError> {
         .                   unsafe {
         .                       self.table.reserve_rehash_inner(
         .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
         .                           TableLayout::new::<T>(),
         .                           if mem::needs_drop::<T>() {
         .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
         .                           } else {
         .                               None
         .                           },
         .                       )
         .                   }
   265,952 ( 0.01%)      }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
         .               /// current table into it.
         .               fn resize(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
         .                       )
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns its raw bucket.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
 3,197,906 ( 0.08%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
         .                   unsafe {
         .                       let mut index = self.table.find_insert_slot(hash);
         .           
         .                       // We can avoid growing the table once we have reached our load
         .                       // factor if we are replacing a tombstone. This works since the
         .                       // number of EMPTY slots does not change in this case.
     1,842 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 2,525,169 ( 0.06%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
         .                           self.reserve(1, hasher);
         .                           index = self.table.find_insert_slot(hash);
         .                       }
         .           
         .                       self.table.record_item_insert_at(index, old_ctrl, hash);
         .           
         .                       let bucket = self.bucket(index);
         2 ( 0.00%)              bucket.write(value);
         .                       bucket
         .                   }
 2,385,148 ( 0.06%)      }
         .           
         .               /// Attempts to insert a new element without growing the table and return its raw bucket.
         .               ///
         .               /// Returns an `Err` containing the given element if inserting it would require growing the
         .               /// table.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns a mutable reference to it.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
   331,272 ( 0.01%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
        74 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
   248,454 ( 0.01%)      }
         .           
         .               /// Inserts a new element into the table, without growing the table.
         .               ///
         .               /// There must be enough space in the table to insert the new element.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
       397 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   141,850 ( 0.00%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
     3,500 ( 0.00%)          let bucket = self.table.bucket(index);
         .           
         .                   // If we are replacing a DELETED entry then we don't need to update
         .                   // the load counter.
   293,079 ( 0.01%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
         .           
         .                   bucket.write(value);
   235,792 ( 0.01%)          self.table.items += 1;
         .                   bucket
       789 ( 0.00%)      }
         .           
         .               /// Temporary removes a bucket, applying the given function to the removed
         .               /// element and optionally put back the returned value in the same bucket.
         .               ///
         .               /// Returns `true` if the bucket still contains an element
         .               ///
         .               /// This does not check if the given bucket is actually occupied.
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
         .                       true
         .                   } else {
         .                       false
         .                   }
         .               }
         .           
         .               /// Searches for an element in the table.
         .               #[inline]
     1,368 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
   159,204 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
   101,151 ( 0.00%)              eq(self.bucket(index).as_ref())
   128,459 ( 0.00%)          });
         .           
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match result {
    30,617 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
         .                       None => None,
         .                   }
     1,384 ( 0.00%)      }
         .           
         .               /// Gets a reference to an element in the table.
         .               #[inline]
         .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
    64,292 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Gets a mutable reference to an element in the table.
         .               #[inline]
         .               pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
       955 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Attempts to get mutable references to `N` entries in the table at once.
         .               ///
         .               /// Returns an array of length `N` with the results of each query.
-- line 855 ----------------------------------------
-- line 920 ----------------------------------------
         .               #[inline]
         .               pub fn len(&self) -> usize {
         .                   self.table.items
         .               }
         .           
         .               /// Returns `true` if the table contains no elements.
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
 3,162,325 ( 0.08%)          self.len() == 0
         .               }
         .           
         .               /// Returns the number of buckets in the table.
         .               #[inline]
         .               pub fn buckets(&self) -> usize {
         .                   self.table.bucket_mask + 1
         .               }
         .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
         .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
         .               /// Because we cannot make the `next` method unsafe on the `RawIter`
         .               /// struct, we have to make the `iter` method unsafe.
         .               #[inline]
         .               pub unsafe fn iter(&self) -> RawIter<T> {
         .                   let data = Bucket::from_base_index(self.data_end(), 0);
         .                   RawIter {
         .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
   421,713 ( 0.01%)              items: self.table.items,
         .                   }
         .               }
         .           
         .               /// Returns an iterator over occupied buckets that could match a given hash.
         .               ///
         .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
         .               /// return items that have a hash value different than the one provided. You
         .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
         .               /// Iteration starts at the provided iterator's current location.
         .               ///
         .               /// It is up to the caller to ensure that the iterator is valid for this
         .               /// `RawTable` and covers all items that remain in the table.
         .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
         .                   debug_assert_eq!(iter.len(), self.len());
         .           
         .                   let alloc = self.table.alloc.clone();
     2,972 ( 0.00%)          let allocation = self.into_allocation();
     2,229 ( 0.00%)          RawIntoIter {
     3,715 ( 0.00%)              iter,
         .                       allocation,
         .                       marker: PhantomData,
         .                       alloc,
         .                   }
         .               }
         .           
         .               /// Converts the table into a raw allocation. The contents of the table
         .               /// should be dropped using a `RawIter` before freeing the allocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
     1,195 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
         .                       None
         .                   } else {
         .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
         .                           Some(lco) => lco,
         .                           None => unsafe { hint::unreachable_unchecked() },
         .                       };
         .                       Some((
       244 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
         .                           layout,
         .                       ))
         .                   };
         .                   mem::forget(self);
         .                   alloc
         .               }
         .           }
         .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<A> RawTableInner<A> {
         .               #[inline]
         .               const fn new_in(alloc: A) -> Self {
 1,475,940 ( 0.04%)          Self {
         .                       // Be careful to cast the entire slice to a raw pointer.
         .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
         .                       bucket_mask: 0,
         .                       items: 0,
         .                       growth_left: 0,
         .                       alloc,
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Allocator + Clone> RawTableInner<A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
   364,561 ( 0.01%)      unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
         .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
         .                   // such allocations will never succeed anyways.
         .                   //
         .                   // This mirrors what Vec does in the standard library.
         .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
         .                       return Err(fallibility.capacity_overflow());
         .                   }
         .           
    74,718 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
         .                       Ok(block) => block.cast(),
         .                       Err(_) => return Err(fallibility.alloc_err(layout)),
         .                   };
         .           
         .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   200,640 ( 0.01%)          Ok(Self {
         .                       ctrl,
    73,892 ( 0.00%)              bucket_mask: buckets - 1,
         .                       items: 0,
         .                       growth_left: bucket_mask_to_capacity(buckets - 1),
         .                       alloc,
         .                   })
   265,334 ( 0.01%)      }
         .           
         .               #[inline]
    16,823 ( 0.00%)      fn fallible_with_capacity(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
     4,310 ( 0.00%)          if capacity == 0 {
     3,940 ( 0.00%)              Ok(Self::new_in(alloc))
         .                   } else {
         .                       unsafe {
         .                           let buckets =
         .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
         .           
   165,877 ( 0.00%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
         .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
         .           
     8,036 ( 0.00%)                  Ok(result)
         .                       }
         .                   }
    16,823 ( 0.00%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element and sets the hash for that slot.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
    49,012 ( 0.00%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
         .                   let index = self.find_insert_slot(hash);
    49,012 ( 0.00%)          let old_ctrl = *self.ctrl(index);
         .                   self.set_ctrl_h2(index, hash);
         .                   (index, old_ctrl)
    98,024 ( 0.00%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
         .               fn find_insert_slot(&self, hash: u64) -> usize {
         .                   let mut probe_seq = self.probe_seq(hash);
         .                   loop {
         .                       unsafe {
         .                           let group = Group::load(self.ctrl(probe_seq.pos));
 1,573,569 ( 0.04%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 4,665,775 ( 0.12%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
         .           
         .                               // In tables smaller than the group width, trailing control
         .                               // bytes outside the range of the table are filled with
         .                               // EMPTY entries. These will unfortunately trigger a
         .                               // match, but once masked may point to a full bucket that
         .                               // is already occupied. We detect this situation here and
         .                               // perform a second scan starting at the beginning of the
         .                               // table. This second scan is guaranteed to find an empty
         .                               // slot (due to the load factor) before hitting the trailing
         .                               // control bytes (containing EMPTY).
 2,183,071 ( 0.06%)                      if unlikely(is_full(*self.ctrl(result))) {
         .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
         .                                   debug_assert_ne!(probe_seq.pos, 0);
         .                                   return Group::load_aligned(self.ctrl(0))
         .                                       .match_empty_or_deleted()
         .                                       .lowest_set_bit_nonzero();
         .                               }
         .           
         .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
         .           
         .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
         .               /// code generated, but it is eliminated by LLVM optimizations.
         .               #[inline]
         .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
         .                   let h2_hash = h2(hash);
         .                   let mut probe_seq = self.probe_seq(hash);
         .           
    22,396 ( 0.00%)          loop {
         .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
         .           
 7,592,120 ( 0.19%)              for bit in group.match_byte(h2_hash) {
16,357,871 ( 0.42%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
         .           
12,054,687 ( 0.31%)                  if likely(eq(index)) {
         .                               return Some(index);
         .                           }
         .                       }
         .           
 1,687,872 ( 0.04%)              if likely(group.match_empty().any_bit_set()) {
         .                           return None;
         .                       }
         .           
         .                       probe_seq.move_next(self.bucket_mask);
         .                   }
         .               }
         .           
         .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               #[inline]
         .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
         .                   debug_assert_ne!(self.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   let base: *mut u8 = self.data_end().as_ptr();
 6,782,032 ( 0.17%)          base.sub((index + 1) * size_of)
         .               }
         .           
         .               #[inline]
         .               unsafe fn data_end<T>(&self) -> NonNull<T> {
         .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
         .               }
         .           
         .               /// Returns an iterator-like object for a probe sequence on the table.
         .               ///
         .               /// This iterator never terminates, but is guaranteed to visit each bucket
         .               /// group exactly once. The loop using `probe_seq` must terminate upon
         .               /// reaching a group containing an empty bucket.
         .               #[inline]
         .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
         .                   ProbeSeq {
38,449,965 ( 0.98%)              pos: h1(hash) & self.bucket_mask,
         .                       stride: 0,
         .                   }
         .               }
         .           
         .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
         .               /// in the table, otherwise returns error
         .               #[cfg(feature = "raw")]
         .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
         .                   } else {
         .                       self.record_item_insert_at(index, old_ctrl, hash);
         .                       Ok(index)
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 3,156,190 ( 0.08%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
         .                   self.set_ctrl_h2(index, hash);
 2,524,952 ( 0.06%)          self.items += 1;
         .               }
         .           
         .               #[inline]
         .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
         .                   let probe_seq_pos = self.probe_seq(hash).pos;
         .                   let probe_index =
         .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
         .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
         .                   // replicate the buckets at the end of the trailing group. For example
         .                   // with 2 buckets and a group size of 4, the control bytes will look
         .                   // like this:
         .                   //
         .                   //     Real    |             Replicated
         .                   // ---------------------------------------------
         .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
         .                   // ---------------------------------------------
 4,585,188 ( 0.12%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
         .           
 1,528,396 ( 0.04%)          *self.ctrl(index) = ctrl;
 1,528,521 ( 0.04%)          *self.ctrl(index2) = ctrl;
         .               }
         .           
         .               /// Returns a pointer to a control byte.
         .               #[inline]
         .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
         .                   debug_assert!(index < self.num_ctrl_bytes());
         .                   self.ctrl.as_ptr().add(index)
         .               }
         .           
         .               #[inline]
         .               fn buckets(&self) -> usize {
   751,051 ( 0.02%)          self.bucket_mask + 1
         .               }
         .           
         .               #[inline]
         .               fn num_ctrl_bytes(&self) -> usize {
   185,448 ( 0.00%)          self.bucket_mask + 1 + Group::WIDTH
         .               }
         .           
         .               #[inline]
         .               fn is_empty_singleton(&self) -> bool {
 2,296,214 ( 0.06%)          self.bucket_mask == 0
         .               }
         .           
         .               #[allow(clippy::mut_mut)]
         .               #[inline]
         .               unsafe fn prepare_resize(
         .                   &self,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
         .                   debug_assert!(self.items <= capacity);
         .           
         .                   // Allocate and initialize the new table.
       924 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
         .                       self.alloc.clone(),
         .                       table_layout,
         .                       capacity,
         .                       fallibility,
         .                   )?;
    82,671 ( 0.00%)          new_table.growth_left -= self.items;
         .                   new_table.items = self.items;
         .           
         .                   // The hash function may panic, in which case we simply free the new
         .                   // table without dropping any elements that may have been copied into
         .                   // it.
         .                   //
         .                   // This guard is also used to free the old table on success, see
         .                   // the comment at the bottom of this function.
         .                   Ok(guard(new_table, move |self_| {
    39,406 ( 0.00%)              if !self_.is_empty_singleton() {
         .                           self_.free_buckets(table_layout);
         .                       }
         .                   }))
         .               }
         .           
         .               /// Reserves or rehashes to make room for `additional` more elements.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .                   drop: Option<fn(*mut u8)>,
         .               ) -> Result<(), TryReserveError> {
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
    78,812 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
         .                       Some(new_items) => new_items,
         .                       None => return Err(fallibility.capacity_overflow()),
         .                   };
    78,812 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   162,317 ( 0.00%)          if new_items <= full_capacity / 2 {
         .                       // Rehash in-place without re-allocating if we have plenty of spare
         .                       // capacity that is locked up due to DELETED entries.
         .                       self.rehash_in_place(hasher, layout.size, drop);
         .                       Ok(())
         .                   } else {
         .                       // Otherwise, conservatively resize to at least the next size up
         .                       // to avoid churning deletes into frequent rehashes.
         .                       self.resize_inner(
    39,406 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
         .                           hasher,
         .                           fallibility,
         .                           layout,
         .                       )
         .                   }
         .               }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
         .               #[inline(always)]
         .               unsafe fn resize_inner(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .               ) -> Result<(), TryReserveError> {
     2,264 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
         .           
         .                   // Copy all elements to the new table.
         .                   for i in 0..self.buckets() {
 1,003,806 ( 0.03%)              if !is_full(*self.ctrl(i)) {
         .                           continue;
         .                       }
         .           
         .                       // This may panic.
         .                       let hash = hasher(self, i);
         .           
         .                       // We can use a simpler version of insert() here since:
         .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
         .                   }
         .           
         .                   // We successfully copied all elements without panicking. Now replace
         .                   // self with the new table. The old table will have its memory freed but
         .                   // the items will not be dropped (since they have been moved into the
         .                   // new table).
         .                   mem::swap(self, &mut new_table);
         .           
    39,406 ( 0.00%)          Ok(())
         .               }
         .           
         .               /// Rehashes the contents of the table in place (i.e. without changing the
         .               /// allocation).
         .               ///
         .               /// If `hasher` panics then some the table's contents may be lost.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
         .               #[inline]
         .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
         .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
         .                       Some(lco) => lco,
         .                       None => hint::unreachable_unchecked(),
         .                   };
         .                   self.alloc.deallocate(
    33,077 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
         .                       layout,
         .                   );
         .               }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[inline]
         .               fn clear_no_drop(&mut self) {
     3,100 ( 0.00%)          if !self.is_empty_singleton() {
         .                       unsafe {
         .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
         .                       }
         .                   }
     3,621 ( 0.00%)          self.items = 0;
     3,100 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
         .               }
         .           
         .               #[inline]
         .               unsafe fn erase(&mut self, index: usize) {
         .                   debug_assert!(is_full(*self.ctrl(index)));
   113,817 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
         .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
         .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
         .           
         .                   // If we are inside a continuous block of Group::WIDTH full or deleted
         .                   // cells then a probe window may have seen a full block when trying to
         .                   // insert. We therefore need to keep that block non-empty so that
         .                   // lookups will continue searching to the next probe window.
         .                   //
         .                   // Note that in this context `leading_zeros` refers to the bytes at the
         .                   // end of a group, while `trailing_zeros` refers to the bytes at the
         .                   // beginning of a group.
   455,268 ( 0.01%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
         .                       DELETED
         .                   } else {
   564,405 ( 0.01%)              self.growth_left += 1;
         .                       EMPTY
         .                   };
         .                   self.set_ctrl(index, ctrl);
   455,268 ( 0.01%)          self.items -= 1;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
       216 ( 0.00%)      fn clone(&self) -> Self {
        44 ( 0.00%)          if self.table.is_empty_singleton() {
         .                       Self::new_in(self.table.alloc.clone())
         .                   } else {
         .                       unsafe {
         .                           let mut new_table = ManuallyDrop::new(
         .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
         .                               match Self::new_uninitialized(
         .                                   self.table.alloc.clone(),
         .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
         .                               // We need to free the memory allocated for the new table.
         .                               new_table.free_buckets();
         .                           });
         .           
         .                           // Return the newly created table.
         .                           ManuallyDrop::into_inner(new_table)
         .                       }
         .                   }
       243 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   if source.table.is_empty_singleton() {
         .                       *self = Self::new_in(self.table.alloc.clone());
         .                   } else {
         .                       unsafe {
         .                           // First, drop all our elements without clearing the control bytes.
         .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
         .                       .table
         .                       .ctrl(0)
         .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
         .                   source
         .                       .data_start()
         .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
         .           
         .                   self.table.items = source.table.items;
        28 ( 0.00%)          self.table.growth_left = source.table.growth_left;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
         .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
         .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
         .               fn default() -> Self {
         .                   Self::new_in(Default::default())
         .               }
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
   729,047 ( 0.02%)      fn drop(&mut self) {
   991,441 ( 0.03%)          if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
         .                           self.free_buckets();
         .                       }
         .                   }
   857,436 ( 0.02%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
         .               type Item = T;
         .               type IntoIter = RawIntoIter<T, A>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
     2,972 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
         .                   unsafe {
         .                       let iter = self.iter();
         .                       self.into_iter_from(iter)
         .                   }
     3,715 ( 0.00%)      }
         .           }
         .           
         .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
         .           /// not track an item count.
         .           pub(crate) struct RawIterRange<T> {
         .               // Mask of full buckets in the current group. Bits are cleared from this
         .               // mask as each element is processed.
         .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
         .           
         .           impl<T> Iterator for RawIterRange<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<Bucket<T>> {
         .                   unsafe {
         .                       loop {
   504,576 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
   101,036 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
   178,431 ( 0.00%)                      return Some(self.data.next_n(index));
         .                           }
         .           
   584,997 ( 0.01%)                  if self.next_ctrl >= self.end {
         .                               return None;
         .                           }
         .           
         .                           // We might read past self.end up to the next group boundary,
         .                           // but this is fine because it only occurs on tables smaller
         .                           // than the group size where the trailing control bytes are all
         .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
         .                           // to the group size (since tables are power-of-two sized).
    11,380 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
    21,288 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    12,533 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
         .                       }
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   // We don't have an item count, so just guess based on the range size.
         .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
         .                           }
         .                       } else {
         .                           // We must have already iterated past the removed item.
         .                       }
         .                   }
         .               }
         .           
         .               unsafe fn drop_elements(&mut self) {
       572 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
         .                       for item in self {
         .                           item.drop();
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Iterator for RawIter<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
   122,519 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
   228,584 ( 0.01%)          if let Some(b) = self.iter.next() {
   582,239 ( 0.01%)              self.items -= 1;
         .                       Some(b)
         .                   } else {
         .                       // We don't check against items == 0 here to allow the
         .                       // compiler to optimize away the item count entirely if the
         .                       // iterator length is never queried.
         .                       debug_assert_eq!(self.items, 0);
         .                       None
         .                   }
   245,038 ( 0.01%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   (self.items, Some(self.items))
         .               }
         .           }
         .           
         .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
     1,334 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
         .           
         .                       // Free the table
     5,559 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
         .                           self.alloc.deallocate(ptr, layout);
         .                       }
         .                   }
       270 ( 0.00%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
       218 ( 0.00%)      fn next(&mut self) -> Option<T> {
       126 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
       436 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         3 ( 0.00%)          self.iter.size_hint()
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
         .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
         .           
         .           /// Iterator which consumes elements without freeing the table storage.
         .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
         .           where
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         8 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements. Note that this may panic.
         .                       self.iter.drop_elements();
         .           
         .                       // Reset the contents of the table now that all elements have been
         .                       // dropped.
         .                       self.table.clear_no_drop();
         .           
         .                       // Move the now empty table back to its original location.
         1 ( 0.00%)              self.orig_table
         .                           .as_ptr()
         .                           .copy_from_nonoverlapping(&*self.table, 1);
         .                   }
         8 ( 0.00%)      }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<T> {
         .                   unsafe {
-- line 2289 ----------------------------------------

20,201,501 ( 0.51%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           use rustc_target::abi::{HasDataLayout, Size, VariantIdx, Variants};
        .           
        .           use super::{
        .               alloc_range, mir_assign_valid_types, AllocId, AllocRef, AllocRefMut, CheckInAllocMsg,
        .               ConstAlloc, ImmTy, Immediate, InterpCx, InterpResult, LocalValue, Machine, MemoryKind, OpTy,
        .               Operand, Pointer, PointerArithmetic, Provenance, Scalar, ScalarMaybeUninit,
        .           };
        .           
  742,807 ( 0.02%)  #[derive(Copy, Clone, Hash, PartialEq, Eq, HashStable, Debug)]
        .           /// Information required for the sound usage of a `MemPlace`.
        .           pub enum MemPlaceMeta<Tag: Provenance = AllocId> {
        .               /// The unsized payload (e.g. length for slices or vtable pointer for trait objects).
        .               Meta(Scalar<Tag>),
        .               /// `Sized` types or unsized `extern type`
        .               None,
        .               /// The address of this place may not be taken. This protects the `MemPlace` from coming from
        .               /// a ZST Operand without a backing allocation and being converted to an integer address. This
-- line 30 ----------------------------------------
-- line 33 ----------------------------------------
        .               Poison,
        .           }
        .           
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           rustc_data_structures::static_assert_size!(MemPlaceMeta, 24);
        .           
        .           impl<Tag: Provenance> MemPlaceMeta<Tag> {
        .               pub fn unwrap_meta(self) -> Scalar<Tag> {
    4,616 ( 0.00%)          match self {
    3,462 ( 0.00%)              Self::Meta(s) => s,
        .                       Self::None | Self::Poison => {
        .                           bug!("expected wide pointer extra data (e.g. slice length or trait object vtable)")
        .                       }
        .                   }
        .               }
        .               fn has_meta(self) -> bool {
  132,629 ( 0.00%)          match self {
        .                       Self::Meta(_) => true,
        .                       Self::None | Self::Poison => false,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Copy, Clone, Hash, PartialEq, Eq, HashStable, Debug)]
        .           pub struct MemPlace<Tag: Provenance = AllocId> {
        .               /// The pointer can be a pure integer, with the `None` tag.
       44 ( 0.00%)      pub ptr: Pointer<Option<Tag>>,
       88 ( 0.00%)      pub align: Align,
        .               /// Metadata for unsized places. Interpretation is up to the type.
        .               /// Must not be present for sized types, but can be missing for unsized types
        .               /// (e.g., `extern type`).
        .               pub meta: MemPlaceMeta<Tag>,
        .           }
        .           
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           rustc_data_structures::static_assert_size!(MemPlace, 48);
-- line 68 ----------------------------------------
-- line 93 ----------------------------------------
        .               type Target = Place<Tag>;
        .               #[inline(always)]
        .               fn deref(&self) -> &Place<Tag> {
        .                   &self.place
        .               }
        .           }
        .           
        .           /// A MemPlace with its layout. Constructing it is only possible in this module.
      308 ( 0.00%)  #[derive(Copy, Clone, Hash, Eq, PartialEq, Debug)]
        .           pub struct MPlaceTy<'tcx, Tag: Provenance = AllocId> {
        .               mplace: MemPlace<Tag>,
        .               pub layout: TyAndLayout<'tcx>,
        .           }
        .           
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           rustc_data_structures::static_assert_size!(MPlaceTy<'_>, 64);
        .           
-- line 109 ----------------------------------------
-- line 113 ----------------------------------------
        .               fn deref(&self) -> &MemPlace<Tag> {
        .                   &self.mplace
        .               }
        .           }
        .           
        .           impl<'tcx, Tag: Provenance> From<MPlaceTy<'tcx, Tag>> for PlaceTy<'tcx, Tag> {
        .               #[inline(always)]
        .               fn from(mplace: MPlaceTy<'tcx, Tag>) -> Self {
      612 ( 0.00%)          PlaceTy { place: Place::Ptr(mplace.mplace), layout: mplace.layout }
        .               }
        .           }
        .           
        .           impl<Tag: Provenance> MemPlace<Tag> {
        .               #[inline(always)]
        .               pub fn from_ptr(ptr: Pointer<Option<Tag>>, align: Align) -> Self {
        .                   MemPlace { ptr, align, meta: MemPlaceMeta::None }
        .               }
-- line 129 ----------------------------------------
-- line 163 ----------------------------------------
        .                   })
        .               }
        .           }
        .           
        .           impl<'tcx, Tag: Provenance> MPlaceTy<'tcx, Tag> {
        .               /// Produces a MemPlace that works for ZST but nothing else
        .               #[inline]
        .               pub fn dangling(layout: TyAndLayout<'tcx>) -> Self {
        2 ( 0.00%)          let align = layout.align.abi;
        .                   let ptr = Pointer::new(None, Size::from_bytes(align.bytes())); // no provenance, absolute address
        .                   // `Poison` this to make sure that the pointer value `ptr` is never observable by the program.
        .                   MPlaceTy { mplace: MemPlace { ptr, align, meta: MemPlaceMeta::Poison }, layout }
        .               }
        .           
        .               #[inline]
        .               pub fn offset(
        .                   &self,
        .                   offset: Size,
        .                   meta: MemPlaceMeta<Tag>,
        .                   layout: TyAndLayout<'tcx>,
        .                   cx: &impl HasDataLayout,
        .               ) -> InterpResult<'tcx, Self> {
  776,512 ( 0.02%)          Ok(MPlaceTy { mplace: self.mplace.offset(offset, meta, cx)?, layout })
        .               }
        .           
        .               #[inline]
        .               pub fn from_aligned_ptr(ptr: Pointer<Option<Tag>>, layout: TyAndLayout<'tcx>) -> Self {
       34 ( 0.00%)          MPlaceTy { mplace: MemPlace::from_ptr(ptr, layout.align.abi), layout }
        .               }
        .           
        .               #[inline]
   80,657 ( 0.00%)      pub(super) fn len(&self, cx: &impl HasDataLayout) -> InterpResult<'tcx, u64> {
  354,122 ( 0.01%)          if self.layout.is_unsized() {
        .                       // We need to consult `meta` metadata
    6,347 ( 0.00%)              match self.layout.ty.kind() {
    2,308 ( 0.00%)                  ty::Slice(..) | ty::Str => self.mplace.meta.unwrap_meta().to_machine_usize(cx),
        .                           _ => bug!("len not supported on unsized type {:?}", self.layout.ty),
        .                       }
        .                   } else {
        .                       // Go through the layout.  There are lots of types that support a length,
        .                       // e.g., SIMD types. (But not all repr(simd) types even have FieldsShape::Array!)
  180,002 ( 0.00%)              match self.layout.fields {
  170,081 ( 0.00%)                  FieldsShape::Array { count, .. } => Ok(count),
        .                           _ => bug!("len not supported on sized type {:?}", self.layout.ty),
        .                       }
        .                   }
  161,314 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub(super) fn vtable(&self) -> Scalar<Tag> {
        .                   match self.layout.ty.kind() {
        .                       ty::Dynamic(..) => self.mplace.meta.unwrap_meta(),
        .                       _ => bug!("vtable not supported on type {:?}", self.layout.ty),
        .                   }
        .               }
-- line 217 ----------------------------------------
-- line 218 ----------------------------------------
        .           }
        .           
        .           // These are defined here because they produce a place.
        .           impl<'tcx, Tag: Provenance> OpTy<'tcx, Tag> {
        .               #[inline(always)]
        .               /// Note: do not call `as_ref` on the resulting place. This function should only be used to
        .               /// read from the resulting mplace, not to get its address back.
        .               pub fn try_as_mplace(&self) -> Result<MPlaceTy<'tcx, Tag>, ImmTy<'tcx, Tag>> {
  752,122 ( 0.02%)          match **self {
1,831,216 ( 0.05%)              Operand::Indirect(mplace) => Ok(MPlaceTy { mplace, layout: self.layout }),
        1 ( 0.00%)              Operand::Immediate(_) if self.layout.is_zst() => Ok(MPlaceTy::dangling(self.layout)),
1,689,961 ( 0.04%)              Operand::Immediate(imm) => Err(ImmTy::from_immediate(imm, self.layout)),
        .                   }
        .               }
        .           
        .               #[inline(always)]
        .               /// Note: do not call `as_ref` on the resulting place. This function should only be used to
        .               /// read from the resulting mplace, not to get its address back.
        .               pub fn assert_mem_place(&self) -> MPlaceTy<'tcx, Tag> {
        .                   self.try_as_mplace().unwrap()
-- line 237 ----------------------------------------
-- line 263 ----------------------------------------
        .               M: Machine<'mir, 'tcx, PointerTag = Tag>,
        .           {
        .               /// Take a value, which represents a (thin or wide) reference, and make it a place.
        .               /// Alignment is just based on the type.  This is the inverse of `MemPlace::to_ref()`.
        .               ///
        .               /// Only call this if you are sure the place is "valid" (aligned and inbounds), or do not
        .               /// want to ever use the place for memory access!
        .               /// Generally prefer `deref_operand`.
   11,540 ( 0.00%)      pub fn ref_to_mplace(
        .                   &self,
        .                   val: &ImmTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
        .                   let pointee_type =
    3,462 ( 0.00%)              val.layout.ty.builtin_deref(true).expect("`ref_to_mplace` called on non-ptr type").ty;
    3,462 ( 0.00%)          let layout = self.layout_of(pointee_type)?;
    5,770 ( 0.00%)          let (ptr, meta) = match **val {
        .                       Immediate::Scalar(ptr) => (ptr, MemPlaceMeta::None),
    8,078 ( 0.00%)              Immediate::ScalarPair(ptr, meta) => (ptr, MemPlaceMeta::Meta(meta.check_init()?)),
        .                   };
        .           
        .                   let mplace = MemPlace {
        .                       ptr: self.scalar_to_ptr(ptr.check_init()?),
        .                       // We could use the run-time alignment here. For now, we do not, because
        .                       // the point of tracking the alignment here is to make sure that the *static*
        .                       // alignment information emitted with the loads is correct. The run-time
        .                       // alignment can only be more restrictive.
    1,154 ( 0.00%)              align: layout.align.abi,
        .                       meta,
        .                   };
   19,618 ( 0.00%)          Ok(MPlaceTy { mplace, layout })
   10,386 ( 0.00%)      }
        .           
        .               /// Take an operand, representing a pointer, and dereference it to a place -- that
        .               /// will always be a MemPlace.  Lives in `place.rs` because it creates a place.
        .               pub fn deref_operand(
        .                   &self,
        .                   src: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
        .                   let val = self.read_immediate(src)?;
-- line 301 ----------------------------------------
-- line 306 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               pub(super) fn get_alloc(
        .                   &self,
        .                   place: &MPlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, Option<AllocRef<'_, 'tcx, M::PointerTag, M::AllocExtra>>> {
        .                   assert!(!place.layout.is_unsized());
   71,838 ( 0.00%)          assert!(!place.meta.has_meta());
   71,838 ( 0.00%)          let size = place.layout.size;
  646,542 ( 0.02%)          self.memory.get(place.ptr, size, place.align)
        .               }
        .           
        .               #[inline]
        .               pub(super) fn get_alloc_mut(
        .                   &mut self,
        .                   place: &MPlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, Option<AllocRefMut<'_, 'tcx, M::PointerTag, M::AllocExtra>>> {
   60,793 ( 0.00%)          assert!(!place.layout.is_unsized());
   60,791 ( 0.00%)          assert!(!place.meta.has_meta());
   60,791 ( 0.00%)          let size = place.layout.size;
  364,746 ( 0.01%)          self.memory.get_mut(place.ptr, size, place.align)
        .               }
        .           
        .               /// Check if this mplace is dereferenceable and sufficiently aligned.
        .               fn check_mplace_access(
        .                   &self,
        .                   mplace: MPlaceTy<'tcx, M::PointerTag>,
        .                   msg: CheckInAllocMsg,
        .               ) -> InterpResult<'tcx> {
-- line 335 ----------------------------------------
-- line 349 ----------------------------------------
        .               /// This also works for arrays, but then the `usize` index type is restricting.
        .               /// For indexing into arrays, use `mplace_index`.
        .               #[inline(always)]
        .               pub fn mplace_field(
        .                   &self,
        .                   base: &MPlaceTy<'tcx, M::PointerTag>,
        .                   field: usize,
        .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
  396,042 ( 0.01%)          let offset = base.layout.fields.offset(field);
  302,867 ( 0.01%)          let field_layout = base.layout.field(self, field);
        .           
        .                   // Offset may need adjustment for unsized fields.
  610,144 ( 0.02%)          let (meta, offset) = if field_layout.is_unsized() {
        .                       // Re-use parent metadata to determine dynamic field layout.
        .                       // With custom DSTS, this *will* execute user-defined code, but the same
        .                       // happens at run-time so that's okay.
        .                       match self.size_and_align_of(&base.meta, &field_layout)? {
        .                           Some((_, align)) => (base.meta, offset.align_to(align)),
        .                           None => {
        .                               // For unsized types with an extern type tail we perform no adjustments.
        .                               // NOTE: keep this in sync with `PlaceRef::project_field` in the codegen backend.
-- line 369 ----------------------------------------
-- line 374 ----------------------------------------
        .                   } else {
        .                       // base.meta could be present; we might be accessing a sized field of an unsized
        .                       // struct.
        .                       (MemPlaceMeta::None, offset)
        .                   };
        .           
        .                   // We do not look at `base.layout.align` nor `field_layout.align`, unlike
        .                   // codegen -- mostly to see if we can get away with that
   46,684 ( 0.00%)          base.offset(offset, meta, field_layout, self)
        .               }
        .           
        .               /// Index into an array.
        .               #[inline(always)]
        .               pub fn mplace_index(
        .                   &self,
        .                   base: &MPlaceTy<'tcx, M::PointerTag>,
        .                   index: u64,
        .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
        .                   // Not using the layout method because we want to compute on u64
   90,315 ( 0.00%)          match base.layout.fields {
   30,105 ( 0.00%)              FieldsShape::Array { stride, .. } => {
  120,420 ( 0.00%)                  let len = base.len(self)?;
   60,210 ( 0.00%)                  if index >= len {
        .                               // This can only be reached in ConstProp and non-rustc-MIR.
        .                               throw_ub!(BoundsCheckFailed { len, index });
        .                           }
        .                           let offset = stride * index; // `Size` multiplication
        .                           // All fields have the same layout.
   60,210 ( 0.00%)                  let field_layout = base.layout.field(self, 0);
        .           
   30,105 ( 0.00%)                  assert!(!field_layout.is_unsized());
        .                           base.offset(offset, MemPlaceMeta::None, field_layout, self)
        .                       }
        .                       _ => span_bug!(
        .                           self.cur_span(),
        .                           "`mplace_index` called on non-array type {:?}",
        .                           base.layout.ty
        .                       ),
        .                   }
        .               }
        .           
        .               // Iterates over all fields of an array. Much more efficient than doing the
        .               // same by repeatedly calling `mplace_array`.
  204,470 ( 0.01%)      pub(super) fn mplace_array_fields<'a>(
        .                   &self,
        .                   base: &'a MPlaceTy<'tcx, Tag>,
        .               ) -> InterpResult<'tcx, impl Iterator<Item = InterpResult<'tcx, MPlaceTy<'tcx, Tag>>> + 'a>
        .               {
   81,788 ( 0.00%)          let len = base.len(self)?; // also asserts that we have a type where this makes sense
   61,341 ( 0.00%)          let stride = match base.layout.fields {
   20,447 ( 0.00%)              FieldsShape::Array { stride, .. } => stride,
        .                       _ => span_bug!(self.cur_span(), "mplace_array_fields: expected an array layout"),
        .                   };
   40,894 ( 0.00%)          let layout = base.layout.field(self, 0);
   20,447 ( 0.00%)          let dl = &self.tcx.data_layout;
        .                   // `Size` multiplication
  439,235 ( 0.01%)          Ok((0..len).map(move |i| base.offset(stride * i, MemPlaceMeta::None, layout, dl)))
  184,023 ( 0.00%)      }
        .           
        .               fn mplace_subslice(
        .                   &self,
        .                   base: &MPlaceTy<'tcx, M::PointerTag>,
        .                   from: u64,
        .                   to: u64,
        .                   from_end: bool,
        .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
-- line 439 ----------------------------------------
-- line 481 ----------------------------------------
        .                   variant: VariantIdx,
        .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
        .                   // Downcasts only change the layout
        .                   assert!(!base.meta.has_meta());
        .                   Ok(MPlaceTy { layout: base.layout.for_variant(self, variant), ..*base })
        .               }
        .           
        .               /// Project into an mplace
  301,050 ( 0.01%)      pub(super) fn mplace_projection(
        .                   &self,
        .                   base: &MPlaceTy<'tcx, M::PointerTag>,
        .                   proj_elem: mir::PlaceElem<'tcx>,
        .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
        .                   use rustc_middle::mir::ProjectionElem::*;
  722,520 ( 0.02%)          Ok(match proj_elem {
        .                       Field(field, _) => self.mplace_field(base, field.index())?,
        .                       Downcast(_, variant) => self.mplace_downcast(base, variant)?,
        .                       Deref => self.deref_operand(&base.into())?,
        .           
   30,105 ( 0.00%)              Index(local) => {
  150,525 ( 0.00%)                  let layout = self.layout_of(self.tcx.types.usize)?;
  180,630 ( 0.00%)                  let n = self.access_local(self.frame(), local, Some(layout))?;
   60,210 ( 0.00%)                  let n = self.read_scalar(&n)?;
   30,105 ( 0.00%)                  let n = n.to_machine_usize(self)?;
        .                           self.mplace_index(base, n)?
        .                       }
        .           
        .                       ConstantIndex { offset, min_length, from_end } => {
        .                           let n = base.len(self)?;
        .                           if n < min_length {
        .                               // This can only be reached in ConstProp and non-rustc-MIR.
        .                               throw_ub!(BoundsCheckFailed { len: min_length, index: n });
-- line 512 ----------------------------------------
-- line 520 ----------------------------------------
        .                               offset
        .                           };
        .           
        .                           self.mplace_index(base, index)?
        .                       }
        .           
        .                       Subslice { from, to, from_end } => self.mplace_subslice(base, from, to, from_end)?,
        .                   })
  240,840 ( 0.01%)      }
        .           
        .               /// Converts a repr(simd) place into a place where `place_index` accesses the SIMD elements.
        .               /// Also returns the number of elements.
        .               pub fn mplace_to_simd(
        .                   &self,
        .                   base: &MPlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, (MPlaceTy<'tcx, M::PointerTag>, u64)> {
        .                   // Basically we just transmute this place into an array following simd_size_and_type.
-- line 536 ----------------------------------------
-- line 542 ----------------------------------------
        .                   assert_eq!(layout.size, base.layout.size);
        .                   Ok((MPlaceTy { layout, ..*base }, len))
        .               }
        .           
        .               /// Gets the place of a field inside the place, and also the field's type.
        .               /// Just a convenience function, but used quite a bit.
        .               /// This is the only projection that might have a side-effect: We cannot project
        .               /// into the field of a local `ScalarPair`, we have to first allocate it.
  815,040 ( 0.02%)      pub fn place_field(
        .                   &mut self,
        .                   base: &PlaceTy<'tcx, M::PointerTag>,
        .                   field: usize,
        .               ) -> InterpResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {
        .                   // FIXME: We could try to be smarter and avoid allocation for fields that span the
        .                   // entire place.
   81,504 ( 0.00%)          let mplace = self.force_allocation(base)?;
  978,048 ( 0.02%)          Ok(self.mplace_field(&mplace, field)?.into())
  652,032 ( 0.02%)      }
        .           
        .               pub fn place_index(
        .                   &mut self,
        .                   base: &PlaceTy<'tcx, M::PointerTag>,
        .                   index: u64,
        .               ) -> InterpResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {
        .                   let mplace = self.force_allocation(base)?;
        .                   Ok(self.mplace_index(&mplace, index)?.into())
-- line 567 ----------------------------------------
-- line 586 ----------------------------------------
        .           
        .               /// Projects into a place.
        .               pub fn place_projection(
        .                   &mut self,
        .                   base: &PlaceTy<'tcx, M::PointerTag>,
        .                   &proj_elem: &mir::ProjectionElem<mir::Local, Ty<'tcx>>,
        .               ) -> InterpResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {
        .                   use rustc_middle::mir::ProjectionElem::*;
  175,065 ( 0.00%)          Ok(match proj_elem {
   58,355 ( 0.00%)              Field(field, _) => self.place_field(base, field.index())?,
        .                       Downcast(_, variant) => self.place_downcast(base, variant)?,
        .                       Deref => self.deref_operand(&self.place_to_op(base)?)?.into(),
        .                       // For the other variants, we have to force an allocation.
        .                       // This matches `operand_projection`.
        .                       Subslice { .. } | ConstantIndex { .. } | Index(_) => {
        .                           let mplace = self.force_allocation(base)?;
        .                           self.mplace_projection(&mplace, proj_elem)?.into()
        .                       }
-- line 603 ----------------------------------------
-- line 611 ----------------------------------------
        .                   base: &PlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, (MPlaceTy<'tcx, M::PointerTag>, u64)> {
        .                   let mplace = self.force_allocation(base)?;
        .                   self.mplace_to_simd(&mplace)
        .               }
        .           
        .               /// Computes a place. You should only use this if you intend to write into this
        .               /// place; for reading, a more efficient alternative is `eval_place_for_read`.
1,856,016 ( 0.05%)      pub fn eval_place(
        .                   &mut self,
        .                   place: mir::Place<'tcx>,
        .               ) -> InterpResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {
1,160,010 ( 0.03%)          let mut place_ty = PlaceTy {
        .                       // This works even for dead/uninitialized locals; we check further when writing
        .                       place: Place::Local { frame: self.frame_idx(), local: place.local },
        .                       layout: self.layout_of_local(self.frame(), place.local, None)?,
        .                   };
        .           
   23,342 ( 0.00%)          for elem in place.projection.iter() {
   11,671 ( 0.00%)              place_ty = self.place_projection(&place_ty, &elem)?
        .                   }
        .           
        .                   trace!("{:?}", self.dump_place(place_ty.place));
        .                   // Sanity-check the type we ended up with.
        .                   debug_assert!(mir_assign_valid_types(
        .                       *self.tcx,
        .                       self.param_env,
        .                       self.layout_of(self.subst_from_current_frame_and_normalize_erasing_regions(
        .                           place.ty(&self.frame().body.local_decls, *self.tcx).ty
        .                       )?)?,
        .                       place_ty.layout,
        .                   ));
4,176,036 ( 0.11%)          Ok(place_ty)
1,856,016 ( 0.05%)      }
        .           
        .               /// Write an immediate to a place
        .               #[inline(always)]
        .               pub fn write_immediate(
        .                   &mut self,
        .                   src: Immediate<M::PointerTag>,
        .                   dest: &PlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx> {
  270,945 ( 0.01%)          self.write_immediate_no_validate(src, dest)?;
        .           
        .                   if M::enforce_validity(self) {
        .                       // Data got changed, better make sure it matches the type!
        .                       self.validate_operand(&self.place_to_op(dest)?)?;
        .                   }
        .           
        .                   Ok(())
        .               }
-- line 661 ----------------------------------------
-- line 678 ----------------------------------------
        .                   dest: &PlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx> {
        .                   self.write_scalar(Scalar::from_maybe_pointer(ptr.into(), self), dest)
        .               }
        .           
        .               /// Write an immediate to a place.
        .               /// If you use this you are responsible for validating that things got copied at the
        .               /// right type.
  211,319 ( 0.01%)      fn write_immediate_no_validate(
        .                   &mut self,
        .                   src: Immediate<M::PointerTag>,
        .                   dest: &PlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx> {
        .                   if cfg!(debug_assertions) {
        .                       // This is a very common path, avoid some checks in release mode
        .                       assert!(!dest.layout.is_unsized(), "Cannot write unsized data");
        .                       match src {
-- line 694 ----------------------------------------
-- line 705 ----------------------------------------
        .                               // FIXME: Can we check anything here?
        .                           }
        .                       }
        .                   }
        .                   trace!("write_immediate: {:?} <- {:?}: {}", *dest, src, dest.layout.ty);
        .           
        .                   // See if we can avoid an allocation. This is the counterpart to `try_read_immediate`,
        .                   // but not factored as a separate function.
  422,638 ( 0.01%)          let mplace = match dest.place {
  301,056 ( 0.01%)              Place::Local { frame, local } => {
        .                           match M::access_local_mut(self, frame, local)? {
        .                               Ok(local) => {
        .                                   // Local can be updated in-place.
1,505,280 ( 0.04%)                          *local = LocalValue::Live(Operand::Immediate(src));
        .                                   return Ok(());
        .                               }
        .                               Err(mplace) => {
        .                                   // The local is in memory, go on below.
        .                                   mplace
        .                               }
        .                           }
        .                       }
  364,746 ( 0.01%)              Place::Ptr(mplace) => mplace, // already referring to memory
        .                   };
  547,119 ( 0.01%)          let dest = MPlaceTy { mplace, layout: dest.layout };
        .           
        .                   // This is already in memory, write there.
  668,701 ( 0.02%)          self.write_immediate_to_mplace_no_validate(src, &dest)
  422,638 ( 0.01%)      }
        .           
        .               /// Write an immediate to memory.
        .               /// If you use this you are responsible for validating that things got copied at the
        .               /// right type.
  607,910 ( 0.02%)      fn write_immediate_to_mplace_no_validate(
        .                   &mut self,
        .                   value: Immediate<M::PointerTag>,
        .                   dest: &MPlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx> {
        .                   // Note that it is really important that the type here is the right one, and matches the
        .                   // type things are read at. In case `src_val` is a `ScalarPair`, we don't do any magic here
        .                   // to handle padding properly, which is only correct if we never look at this data with the
        .                   // wrong type.
        .           
        .                   // Invalid places are a thing: the return place of a diverging function
   60,791 ( 0.00%)          let tcx = *self.tcx;
  121,582 ( 0.00%)          let mut alloc = match self.get_alloc_mut(dest)? {
  303,950 ( 0.01%)              Some(a) => a,
        .                       None => return Ok(()), // zero-sized access
        .                   };
        .           
        .                   // FIXME: We should check that there are dest.layout.size many bytes available in
        .                   // memory.  The code below is not sufficient, with enough padding it might not
        .                   // cover all the bytes!
  121,580 ( 0.00%)          match value {
        .                       Immediate::Scalar(scalar) => {
  120,426 ( 0.00%)                  match dest.layout.abi {
        .                               Abi::Scalar(_) => {} // fine
        .                               _ => span_bug!(
        .                                   self.cur_span(),
        .                                   "write_immediate_to_mplace: invalid Scalar layout: {:#?}",
        .                                   dest.layout
        .                               ),
        .                           }
  541,917 ( 0.01%)                  alloc.write_scalar(alloc_range(Size::ZERO, dest.layout.size), scalar)
        .                       }
        .                       Immediate::ScalarPair(a_val, b_val) => {
        .                           // We checked `ptr_align` above, so all fields will have the alignment they need.
        .                           // We would anyway check against `ptr_align.restrict_for_offset(b_offset)`,
        .                           // which `ptr.offset(b_offset)` cannot possibly fail to satisfy.
    1,154 ( 0.00%)                  let (a, b) = match dest.layout.abi {
    1,731 ( 0.00%)                      Abi::ScalarPair(a, b) => (a.value, b.value),
        .                               _ => span_bug!(
        .                                   self.cur_span(),
        .                                   "write_immediate_to_mplace: invalid ScalarPair layout: {:#?}",
        .                                   dest.layout
        .                               ),
        .                           };
        .                           let (a_size, b_size) = (a.size(&tcx), b.size(&tcx));
        .                           let b_offset = a_size.align_to(b.align(&tcx).abi);
        .           
        .                           // It is tempting to verify `b_offset` against `layout.fields.offset(1)`,
        .                           // but that does not work: We could be a newtype around a pair, then the
        .                           // fields do not match the `ScalarPair` components.
        .           
    5,770 ( 0.00%)                  alloc.write_scalar(alloc_range(Size::ZERO, a_size), a_val)?;
    4,616 ( 0.00%)                  alloc.write_scalar(alloc_range(b_offset, b_size), b_val)
        .                       }
        .                   }
  486,328 ( 0.01%)      }
        .           
        .               /// Copies the data from an operand to a place. This does not support transmuting!
        .               /// Use `copy_op_transmute` if the layouts could disagree.
        .               #[inline(always)]
        .               pub fn copy_op(
        .                   &mut self,
        .                   src: &OpTy<'tcx, M::PointerTag>,
        .                   dest: &PlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx> {
  957,149 ( 0.02%)          self.copy_op_no_validate(src, dest)?;
        .           
        .                   if M::enforce_validity(self) {
        .                       // Data got changed, better make sure it matches the type!
        .                       self.validate_operand(&self.place_to_op(dest)?)?;
        .                   }
        .           
        .                   Ok(())
        .               }
        .           
        .               /// Copies the data from an operand to a place. This does not support transmuting!
        .               /// Use `copy_op_transmute` if the layouts could disagree.
        .               /// Also, if you use this you are responsible for validating that things get copied at the
        .               /// right type.
1,292,608 ( 0.03%)      fn copy_op_no_validate(
        .                   &mut self,
        .                   src: &OpTy<'tcx, M::PointerTag>,
        .                   dest: &PlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx> {
        .                   // We do NOT compare the types for equality, because well-typed code can
        .                   // actually "transmute" `&mut T` to `&T` in an assignment without a cast.
2,908,368 ( 0.07%)          if !mir_assign_valid_types(*self.tcx, self.param_env, src.layout, dest.layout) {
        .                       span_bug!(
        .                           self.cur_span(),
        .                           "type mismatch when copying!\nsrc: {:?},\ndest: {:?}",
        .                           src.layout.ty,
        .                           dest.layout.ty,
        .                       );
        .                   }
        .           
        .                   // Let us see if the layout is simple so we take a shortcut, avoid force_allocation.
  807,880 ( 0.02%)          let src = match self.try_read_immediate(src)? {
        .                       Ok(src_val) => {
  121,006 ( 0.00%)                  assert!(!src.layout.is_unsized(), "cannot have unsized immediates");
        .                           // Yay, we got a value that we can write directly.
        .                           // FIXME: Add a check to make sure that if `src` is indirect,
        .                           // it does not overlap with `dest`.
1,573,052 ( 0.04%)                  return self.write_immediate_no_validate(*src_val, dest);
        .                       }
  324,576 ( 0.01%)              Err(mplace) => mplace,
        .                   };
        .                   // Slow path, this does not fit into an immediate. Just memcpy.
        .                   trace!("copy_op: {:?} <- {:?}: {}", *dest, src, dest.layout.ty);
        .           
        .                   // This interprets `src.meta` with the `dest` local's layout, if an unsized local
        .                   // is being initialized!
  527,436 ( 0.01%)          let (dest, size) = self.force_allocation_maybe_sized(dest, src.meta)?;
        .                   let size = size.unwrap_or_else(|| {
   62,190 ( 0.00%)              assert!(
        .                           !dest.layout.is_unsized(),
        .                           "Cannot copy into already initialized unsized place"
        .                       );
   20,730 ( 0.00%)              dest.layout.size
        .                   });
   40,572 ( 0.00%)          assert_eq!(src.meta, dest.meta, "Can only copy between equally-sized instances");
        .           
   40,572 ( 0.00%)          self.memory
  121,716 ( 0.00%)              .copy(src.ptr, src.align, dest.ptr, dest.align, size, /*nonoverlapping*/ true)
1,292,608 ( 0.03%)      }
        .           
        .               /// Copies the data from an operand to a place. The layouts may disagree, but they must
        .               /// have the same size.
  158,872 ( 0.00%)      pub fn copy_op_transmute(
        .                   &mut self,
        .                   src: &OpTy<'tcx, M::PointerTag>,
        .                   dest: &PlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx> {
  357,462 ( 0.01%)          if mir_assign_valid_types(*self.tcx, self.param_env, src.layout, dest.layout) {
        .                       // Fast path: Just use normal `copy_op`
        .                       return self.copy_op(src, dest);
        .                   }
        .                   // We still require the sizes to match.
        .                   if src.layout.size != dest.layout.size {
        .                       // FIXME: This should be an assert instead of an error, but if we transmute within an
        .                       // array length computation, `typeck` may not have yet been run and errored out. In fact
        .                       // most likey we *are* running `typeck` right now. Investigate whether we can bail out
-- line 878 ----------------------------------------
-- line 916 ----------------------------------------
        .               /// Ensures that a place is in memory, and returns where it is.
        .               /// If the place currently refers to a local that doesn't yet have a matching allocation,
        .               /// create such an allocation.
        .               /// This is essentially `force_to_memplace`.
        .               ///
        .               /// This supports unsized types and returns the computed size to avoid some
        .               /// redundant computation when copying; use `force_allocation` for a simpler, sized-only
        .               /// version.
1,369,629 ( 0.03%)      pub fn force_allocation_maybe_sized(
        .                   &mut self,
        .                   place: &PlaceTy<'tcx, M::PointerTag>,
        .                   meta: MemPlaceMeta<M::PointerTag>,
        .               ) -> InterpResult<'tcx, (MPlaceTy<'tcx, M::PointerTag>, Option<Size>)> {
1,521,810 ( 0.04%)          let (mplace, size) = match place.place {
  131,451 ( 0.00%)              Place::Local { frame, local } => {
  262,902 ( 0.01%)                  match M::access_local_mut(self, frame, local)? {
  454,437 ( 0.01%)                      Ok(&mut local_val) => {
        .                                   // We need to make an allocation.
        .           
        .                                   // We need the layout of the local.  We can NOT use the layout we got,
        .                                   // that might e.g., be an inner field of a struct with `Scalar` layout,
        .                                   // that has different alignment than the outer field.
        .                                   let local_layout =
  252,465 ( 0.01%)                              self.layout_of_local(&self.stack()[frame], local, None)?;
        .                                   // We also need to support unsized types, and hence cannot use `allocate`.
  201,972 ( 0.01%)                          let (size, align) = self
        .                                       .size_and_align_of(&meta, &local_layout)?
        .                                       .expect("Cannot allocate for non-dyn-sized type");
  353,451 ( 0.01%)                          let ptr = self.memory.allocate(size, align, MemoryKind::Stack)?;
        .                                   let mplace = MemPlace { ptr: ptr.into(), align, meta };
  252,465 ( 0.01%)                          if let LocalValue::Live(Operand::Immediate(value)) = local_val {
        .                                       // Preserve old value.
        .                                       // We don't have to validate as we can assume the local
        .                                       // was already valid for its type.
        .                                       let mplace = MPlaceTy { mplace, layout: local_layout };
        .                                       self.write_immediate_to_mplace_no_validate(value, &mplace)?;
        .                                   }
        .                                   // Now we can call `access_mut` again, asserting it goes well,
        .                                   // and actually overwrite things.
  959,367 ( 0.02%)                          *M::access_local_mut(self, frame, local).unwrap().unwrap() =
        .                                       LocalValue::Live(Operand::Indirect(mplace));
  353,451 ( 0.01%)                          (mplace, Some(size))
        .                               }
  809,580 ( 0.02%)                      Err(mplace) => (mplace, None), // this already was an indirect local
        .                           }
        .                       }
  269,490 ( 0.01%)              Place::Ptr(mplace) => (mplace, None),
        .                   };
        .                   // Return with the original layout, so that the caller can go on
1,826,172 ( 0.05%)          Ok((MPlaceTy { mplace, layout: place.layout }, size))
1,217,448 ( 0.03%)      }
        .           
        .               #[inline(always)]
        .               pub fn force_allocation(
        .                   &mut self,
        .                   place: &PlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
1,094,796 ( 0.03%)          Ok(self.force_allocation_maybe_sized(place, MemPlaceMeta::None)?.0)
        .               }
        .           
        .               pub fn allocate(
        .                   &mut self,
        .                   layout: TyAndLayout<'tcx>,
        .                   kind: MemoryKind<M::MemoryKind>,
        .               ) -> InterpResult<'static, MPlaceTy<'tcx, M::PointerTag>> {
      119 ( 0.00%)          let ptr = self.memory.allocate(layout.size, layout.align.abi, kind)?;
        .                   Ok(MPlaceTy::from_aligned_ptr(ptr.into(), layout))
        .               }
        .           
        .               /// Returns a wide MPlace of type `&'static [mut] str` to a new 1-aligned allocation.
        .               pub fn allocate_str(
        .                   &mut self,
        .                   str: &str,
        .                   kind: MemoryKind<M::MemoryKind>,
-- line 989 ----------------------------------------
-- line 1084 ----------------------------------------
        .                               self.write_immediate(*tag_val, &niche_dest)?;
        .                           }
        .                       }
        .                   }
        .           
        .                   Ok(())
        .               }
        .           
      153 ( 0.00%)      pub fn raw_const_to_mplace(
        .                   &self,
        .                   raw: ConstAlloc<'tcx>,
        .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
        .                   // This must be an allocation in `tcx`
       51 ( 0.00%)          let _ = self.tcx.global_alloc(raw.alloc_id);
        .                   let ptr = self.global_base_pointer(Pointer::from(raw.alloc_id))?;
       51 ( 0.00%)          let layout = self.layout_of(raw.ty)?;
      102 ( 0.00%)          Ok(MPlaceTy::from_aligned_ptr(ptr.into(), layout))
      119 ( 0.00%)      }
        .           
        .               /// Turn a place with a `dyn Trait` type into a place with the actual dynamic type.
        .               /// Also return some more information so drop doesn't have to run the same code twice.
        .               pub(super) fn unpack_dyn_trait(
        .                   &self,
        .                   mplace: &MPlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, (ty::Instance<'tcx>, MPlaceTy<'tcx, M::PointerTag>)> {
        .                   let vtable = self.scalar_to_ptr(mplace.vtable()); // also sanity checks the type
-- line 1109 ----------------------------------------

2,432,103 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/type_check/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 118 ----------------------------------------
        .           /// - `promoted` -- map of promoted constants within `body`
        .           /// - `universal_regions` -- the universal regions from `body`s function signature
        .           /// - `location_table` -- MIR location map of `body`
        .           /// - `borrow_set` -- information about borrows occurring in `body`
        .           /// - `all_facts` -- when using Polonius, this is the generated set of Polonius facts
        .           /// - `flow_inits` -- results of a maybe-init dataflow analysis
        .           /// - `move_data` -- move-data constructed when performing the maybe-init dataflow analysis
        .           /// - `elements` -- MIR region map
    1,896 ( 0.00%)  pub(crate) fn type_check<'mir, 'tcx>(
        .               infcx: &InferCtxt<'_, 'tcx>,
        .               param_env: ty::ParamEnv<'tcx>,
        .               body: &Body<'tcx>,
        .               promoted: &IndexVec<Promoted, Body<'tcx>>,
        .               universal_regions: &Rc<UniversalRegions<'tcx>>,
        .               location_table: &LocationTable,
        .               borrow_set: &BorrowSet<'tcx>,
        .               all_facts: &mut Option<AllFacts>,
        .               flow_inits: &mut ResultsCursor<'mir, 'tcx, MaybeInitializedPlaces<'mir, 'tcx>>,
        .               move_data: &MoveData<'tcx>,
        .               elements: &Rc<RegionValueElements>,
        .               upvars: &[Upvar<'tcx>],
        .           ) -> MirTypeckResults<'tcx> {
    1,422 ( 0.00%)      let implicit_region_bound = infcx.tcx.mk_region(ty::ReVar(universal_regions.fr_fn_body));
        .               let mut universe_causes = FxHashMap::default();
        .               universe_causes.insert(ty::UniverseIndex::from_u32(0), UniverseInfo::other());
    3,476 ( 0.00%)      let mut constraints = MirTypeckRegionConstraints {
        .                   placeholder_indices: PlaceholderIndices::default(),
        .                   placeholder_index_to_region: IndexVec::default(),
      158 ( 0.00%)          liveness_constraints: LivenessValues::new(elements.clone()),
        .                   outlives_constraints: OutlivesConstraintSet::default(),
        .                   member_constraints: MemberConstraintSet::default(),
        .                   closure_bounds_mapping: Default::default(),
        .                   type_tests: Vec::default(),
      632 ( 0.00%)          universe_causes,
        .               };
        .           
        .               let CreateResult {
      316 ( 0.00%)          universal_region_relations,
      632 ( 0.00%)          region_bound_pairs,
      632 ( 0.00%)          normalized_inputs_and_output,
      790 ( 0.00%)      } = free_region_relations::create(
        .                   infcx,
        .                   param_env,
        .                   Some(implicit_region_bound),
        .                   universal_regions,
        .                   &mut constraints,
        .               );
        .           
      316 ( 0.00%)      for u in ty::UniverseIndex::ROOT..infcx.universe() {
        .                   let info = UniverseInfo::other();
        .                   constraints.universe_causes.insert(u, info);
        .               }
        .           
    1,422 ( 0.00%)      let mut borrowck_context = BorrowCheckContext {
      158 ( 0.00%)          universal_regions,
        .                   location_table,
        .                   borrow_set,
        .                   all_facts,
        .                   constraints: &mut constraints,
        .                   upvars,
        .               };
        .           
        .               let opaque_type_values = type_check_internal(
-- line 180 ----------------------------------------
-- line 190 ----------------------------------------
        .                       liveness::generate(&mut cx, body, elements, flow_inits, move_data, location_table);
        .           
        .                       translate_outlives_facts(&mut cx);
        .                       let opaque_type_values = mem::take(&mut infcx.inner.borrow_mut().opaque_types);
        .           
        .                       opaque_type_values
        .                           .into_iter()
        .                           .filter_map(|(opaque_type_key, mut decl)| {
        7 ( 0.00%)                      decl.concrete_ty = infcx.resolve_vars_if_possible(decl.concrete_ty);
        .                               trace!(
        .                                   "finalized opaque type {:?} to {:#?}",
        .                                   opaque_type_key,
        .                                   decl.concrete_ty.kind()
        .                               );
        7 ( 0.00%)                      if decl.concrete_ty.has_infer_types_or_consts() {
        .                                   infcx.tcx.sess.delay_span_bug(
        .                                       body.span,
        .                                       &format!("could not resolve {:#?}", decl.concrete_ty.kind()),
        .                                   );
        .                                   decl.concrete_ty = infcx.tcx.ty_error();
        .                               }
       28 ( 0.00%)                      let concrete_is_opaque = if let ty::Opaque(def_id, _) = decl.concrete_ty.kind()
        .                               {
        .                                   *def_id == opaque_type_key.def_id
        .                               } else {
        .                                   false
        .                               };
        .           
        .                               if concrete_is_opaque {
        .                                   // We're using an opaque `impl Trait` type without
-- line 219 ----------------------------------------
-- line 243 ----------------------------------------
        .                               } else {
        .                                   Some((opaque_type_key, decl))
        .                               }
        .                           })
        .                           .collect()
        .                   },
        .               );
        .           
    1,896 ( 0.00%)      MirTypeckResults { constraints, universal_region_relations, opaque_type_values }
    1,264 ( 0.00%)  }
        .           
        .           #[instrument(
        .               skip(infcx, body, promoted, region_bound_pairs, borrowck_context, extra),
        .               level = "debug"
        .           )]
        .           fn type_check_internal<'a, 'tcx, R>(
        .               infcx: &'a InferCtxt<'a, 'tcx>,
        .               param_env: ty::ParamEnv<'tcx>,
-- line 260 ----------------------------------------
-- line 270 ----------------------------------------
        .                   body,
        .                   param_env,
        .                   region_bound_pairs,
        .                   implicit_region_bound,
        .                   borrowck_context,
        .               );
        .               let errors_reported = {
        .                   let mut verifier = TypeVerifier::new(&mut checker, body, promoted);
      158 ( 0.00%)          verifier.visit_body(&body);
      158 ( 0.00%)          verifier.errors_reported
        .               };
        .           
      158 ( 0.00%)      if !errors_reported {
        .                   // if verifier failed, don't do further checks to avoid ICEs
      158 ( 0.00%)          checker.typeck_mir(body);
        .               }
        .           
    2,054 ( 0.00%)      extra(checker)
        .           }
        .           
        .           fn translate_outlives_facts(typeck: &mut TypeChecker<'_, '_>) {
        .               let cx = &mut typeck.borrowck_context;
      632 ( 0.00%)      if let Some(facts) = cx.all_facts {
        .                   let _prof_timer = typeck.infcx.tcx.prof.generic_activity("polonius_fact_generation");
        .                   let location_table = cx.location_table;
        .                   facts.subset_base.extend(cx.constraints.outlives_constraints.outlives().iter().flat_map(
        .                       |constraint: &OutlivesConstraint<'_>| {
        .                           if let Some(from_location) = constraint.locations.from_location() {
        .                               Either::Left(iter::once((
        .                                   constraint.sup,
        .                                   constraint.sub,
-- line 300 ----------------------------------------
-- line 334 ----------------------------------------
        .               body: &'b Body<'tcx>,
        .               promoted: &'b IndexVec<Promoted, Body<'tcx>>,
        .               last_span: Span,
        .               errors_reported: bool,
        .           }
        .           
        .           impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {
        .               fn visit_span(&mut self, span: &Span) {
  537,788 ( 0.01%)          if !span.is_dummy() {
  134,411 ( 0.00%)              self.last_span = *span;
        .                   }
        .               }
        .           
  512,853 ( 0.01%)      fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, location: Location) {
        .                   self.sanitize_place(place, location, context);
  372,984 ( 0.01%)      }
        .           
  497,496 ( 0.01%)      fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) {
        .                   self.super_constant(constant, location);
  331,664 ( 0.01%)          let ty = self.sanitize_type(constant, constant.literal.ty());
        .           
  373,122 ( 0.01%)          self.cx.infcx.tcx.for_each_free_region(&ty, |live_region| {
        .                       let live_region_vid =
        .                           self.cx.borrowck_context.universal_regions.to_region_vid(live_region);
    1,818 ( 0.00%)              self.cx
        .                           .borrowck_context
        .                           .constraints
        .                           .liveness_constraints
    1,818 ( 0.00%)                  .add_element(live_region_vid, location);
        .                   });
        .           
  165,832 ( 0.00%)          if let Some(annotation_index) = constant.user_ty {
      270 ( 0.00%)              if let Err(terr) = self.cx.relate_type_and_user_type(
       60 ( 0.00%)                  constant.literal.ty(),
        .                           ty::Variance::Invariant,
       60 ( 0.00%)                  &UserTypeProjection { base: annotation_index, projs: vec![] },
       60 ( 0.00%)                  location.to_locations(),
        .                           ConstraintCategory::Boring,
        .                       ) {
        .                           let annotation = &self.cx.user_type_annotations[annotation_index];
        .                           span_mirbug!(
        .                               self,
        .                               constant,
        .                               "bad constant user type {:?} vs {:?}: {:?}",
        .                               annotation,
        .                               constant.literal.ty(),
        .                               terr,
        .                           );
        .                       }
        .                   } else {
        .                       let tcx = self.tcx();
  124,284 ( 0.00%)              let maybe_uneval = match constant.literal {
  124,284 ( 0.00%)                  ConstantKind::Ty(ct) => match ct.val {
       61 ( 0.00%)                      ty::ConstKind::Unevaluated(uv) => Some(uv),
        .                               _ => None,
        .                           },
        .                           _ => None,
        .                       };
      122 ( 0.00%)              if let Some(uv) = maybe_uneval {
      122 ( 0.00%)                  if let Some(promoted) = uv.promoted {
        .                               let check_err = |verifier: &mut TypeVerifier<'a, 'b, 'tcx>,
        .                                                promoted: &Body<'tcx>,
        .                                                ty,
        .                                                san_ty| {
       87 ( 0.00%)                          if let Err(terr) = verifier.cx.eq_types(
        .                                       ty,
        .                                       san_ty,
       58 ( 0.00%)                              location.to_locations(),
        .                                       ConstraintCategory::Boring,
        .                                   ) {
        .                                       span_mirbug!(
        .                                           verifier,
        .                                           promoted,
        .                                           "bad promoted type ({:?}: {:?}): {:?}",
        .                                           ty,
        .                                           san_ty,
        .                                           terr
        .                                       );
        .                                   };
        .                               };
        .           
       58 ( 0.00%)                      if !self.errors_reported {
       29 ( 0.00%)                          let promoted_body = &self.promoted[promoted];
      116 ( 0.00%)                          self.sanitize_promoted(promoted_body, location);
        .           
        .                                   let promoted_ty = promoted_body.return_ty();
        .                                   check_err(self, promoted_body, ty, promoted_ty);
        .                               }
        .                           } else {
      224 ( 0.00%)                      if let Err(terr) = self.cx.fully_perform_op(
       64 ( 0.00%)                          location.to_locations(),
        .                                   ConstraintCategory::Boring,
      224 ( 0.00%)                          self.cx.param_env.and(type_op::ascribe_user_type::AscribeUserType::new(
       64 ( 0.00%)                              constant.literal.ty(),
        .                                       uv.def.did,
      128 ( 0.00%)                              UserSubsts { substs: uv.substs, user_self_ty: None },
        .                                   )),
        .                               ) {
        .                                   span_mirbug!(
        .                                       self,
        .                                       constant,
        .                                       "bad constant type {:?} ({:?})",
        .                                       constant,
        .                                       terr
        .                                   );
        .                               }
        .                           }
  165,468 ( 0.00%)              } else if let Some(static_def_id) = constant.check_static_ptr(tcx) {
        .                           let unnormalized_ty = tcx.type_of(static_def_id);
        .                           let locations = location.to_locations();
        .                           let normalized_ty = self.cx.normalize(unnormalized_ty, locations);
        .                           let literal_ty = constant.literal.ty().builtin_deref(true).unwrap().ty;
        .           
        .                           if let Err(terr) = self.cx.eq_types(
        .                               literal_ty,
        .                               normalized_ty,
        .                               locations,
        .                               ConstraintCategory::Boring,
        .                           ) {
        .                               span_mirbug!(self, constant, "bad static type {:?} ({:?})", constant, terr);
        .                           }
        .                       }
        .           
  196,612 ( 0.00%)              if let ty::FnDef(def_id, substs) = *constant.literal.ty().kind() {
   20,600 ( 0.00%)                  let instantiated_predicates = tcx.predicates_of(def_id).instantiate(tcx, substs);
   20,600 ( 0.00%)                  self.cx.normalize_and_prove_instantiated_predicates(
        .                               def_id,
   61,800 ( 0.00%)                      instantiated_predicates,
   20,600 ( 0.00%)                      location.to_locations(),
        .                           );
        .                       }
        .                   }
  331,664 ( 0.01%)      }
        .           
  139,106 ( 0.00%)      fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {
        .                   self.super_rvalue(rvalue, location);
   37,938 ( 0.00%)          let rval_ty = rvalue.ty(self.body, self.tcx());
  151,752 ( 0.00%)          self.sanitize_type(rvalue, rval_ty);
        .               }
        .           
  229,760 ( 0.01%)      fn visit_local_decl(&mut self, local: Local, local_decl: &LocalDecl<'tcx>) {
        .                   self.super_local_decl(local, local_decl);
  114,880 ( 0.00%)          self.sanitize_type(local_decl, local_decl.ty);
        .           
   68,928 ( 0.00%)          if let Some(user_ty) = &local_decl.user_ty {
        2 ( 0.00%)              for (user_ty, span) in user_ty.projections_and_spans() {
       10 ( 0.00%)                  let ty = if !local_decl.is_nonref_binding() {
        .                               // If we have a binding of the form `let ref x: T = ..`
        .                               // then remove the outermost reference so we can check the
        .                               // type annotation for the remaining type.
        .                               if let ty::Ref(_, rty, _) = local_decl.ty.kind() {
        .                                   rty
        .                               } else {
        .                                   bug!("{:?} with ref binding has wrong type {}", local, local_decl.ty);
        .                               }
        .                           } else {
        .                               local_decl.ty
        .                           };
        .           
       16 ( 0.00%)                  if let Err(terr) = self.cx.relate_type_and_user_type(
        .                               ty,
        .                               ty::Variance::Invariant,
        .                               user_ty,
        6 ( 0.00%)                      Locations::All(*span),
        .                               ConstraintCategory::TypeAnnotation,
        .                           ) {
        .                               span_mirbug!(
        .                                   self,
        .                                   local,
        .                                   "bad user type on variable {:?}: {:?} != {:?} ({:?})",
        .                                   local,
        .                                   local_decl.ty,
        .                                   local_decl.user_ty,
        .                                   terr,
        .                               );
        .                           }
        .                       }
        .                   }
  183,808 ( 0.00%)      }
        .           
    1,309 ( 0.00%)      fn visit_body(&mut self, body: &Body<'tcx>) {
      561 ( 0.00%)          self.sanitize_type(&"return type", body.return_ty());
        .                   for local_decl in &body.local_decls {
  114,880 ( 0.00%)              self.sanitize_type(local_decl, local_decl.ty);
        .                   }
      374 ( 0.00%)          if self.errors_reported {
        .                       return;
        .                   }
        .                   self.super_body(body);
    1,496 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {
        .               fn new(
        .                   cx: &'a mut TypeChecker<'b, 'tcx>,
        .                   body: &'b Body<'tcx>,
        .                   promoted: &'b IndexVec<Promoted, Body<'tcx>>,
        .               ) -> Self {
    1,422 ( 0.00%)          TypeVerifier { body, promoted, cx, last_span: body.span, errors_reported: false }
        .               }
        .           
        .               fn tcx(&self) -> TyCtxt<'tcx> {
  168,462 ( 0.00%)          self.cx.infcx.tcx
        .               }
        .           
1,005,310 ( 0.03%)      fn sanitize_type(&mut self, parent: &dyn fmt::Debug, ty: Ty<'tcx>) -> Ty<'tcx> {
  201,062 ( 0.01%)          if ty.has_escaping_bound_vars() || ty.references_error() {
        .                       span_mirbug_and_err!(self, parent, "bad type {:?}", ty)
        .                   } else {
        .                       ty
        .                   }
  703,717 ( 0.02%)      }
        .           
        .               /// Checks that the types internal to the `place` match up with
        .               /// what would be expected.
        .               fn sanitize_place(
        .                   &mut self,
        .                   place: &Place<'tcx>,
        .                   location: Location,
        .                   context: PlaceContext,
        .               ) -> PlaceTy<'tcx> {
        .                   debug!("sanitize_place: {:?}", place);
        .           
  186,492 ( 0.00%)          let mut place_ty = PlaceTy::from_ty(self.body.local_decls[place.local].ty);
        .           
   48,831 ( 0.00%)          for elem in place.projection.iter() {
    1,104 ( 0.00%)              if place_ty.variant_index.is_none() {
    1,053 ( 0.00%)                  if place_ty.ty.references_error() {
        .                               assert!(self.errors_reported);
        .                               return PlaceTy::from_ty(self.tcx().ty_error());
        .                           }
        .                       }
        .                       place_ty = self.sanitize_projection(place_ty, elem, place, location);
        .                   }
        .           
  139,484 ( 0.00%)          if let PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) = context {
        .                       let tcx = self.tcx();
        .                       let trait_ref = ty::TraitRef {
    3,200 ( 0.00%)                  def_id: tcx.require_lang_item(LangItem::Copy, Some(self.last_span)),
    1,600 ( 0.00%)                  substs: tcx.mk_substs_trait(place_ty.ty, &[]),
        .                       };
        .           
        .                       // To have a `Copy` operand, the type `T` of the
        .                       // value must be `Copy`. Note that we prove that `T: Copy`,
        .                       // rather than using the `is_copy_modulo_regions`
        .                       // test. This is important because
        .                       // `is_copy_modulo_regions` ignores the resulting region
        .                       // obligations and assumes they pass. This can result in
        .                       // bounds from `Copy` impls being unsoundly ignored (e.g.,
        .                       // #29149). Note that we decide to use `Copy` before knowing
        .                       // whether the bounds fully apply: in effect, the rule is
        .                       // that if a value of some type could implement `Copy`, then
        .                       // it must.
      960 ( 0.00%)              self.cx.prove_trait_ref(
        .                           trait_ref,
        .                           location.to_locations(),
        .                           ConstraintCategory::CopyBound,
        .                       );
        .                   }
        .           
        .                   place_ty
        .               }
-- line 595 ----------------------------------------
-- line 598 ----------------------------------------
        .                   // Determine the constraints from the promoted MIR by running the type
        .                   // checker on the promoted MIR, then transfer the constraints back to
        .                   // the main MIR, changing the locations to the provided location.
        .           
        .                   let parent_body = mem::replace(&mut self.body, promoted_body);
        .           
        .                   // Use new sets of constraints and closure bounds so that we can
        .                   // modify their locations.
       29 ( 0.00%)          let all_facts = &mut None;
        .                   let mut constraints = Default::default();
        .                   let mut closure_bounds = Default::default();
        .                   let mut liveness_constraints =
       58 ( 0.00%)              LivenessValues::new(Rc::new(RegionValueElements::new(&promoted_body)));
        .                   // Don't try to add borrow_region facts for the promoted MIR
        .           
        .                   let mut swap_constraints = |this: &mut Self| {
      116 ( 0.00%)              mem::swap(this.cx.borrowck_context.all_facts, all_facts);
        .                       mem::swap(
      116 ( 0.00%)                  &mut this.cx.borrowck_context.constraints.outlives_constraints,
        .                           &mut constraints,
        .                       );
        .                       mem::swap(
      116 ( 0.00%)                  &mut this.cx.borrowck_context.constraints.closure_bounds_mapping,
        .                           &mut closure_bounds,
        .                       );
        .                       mem::swap(
      116 ( 0.00%)                  &mut this.cx.borrowck_context.constraints.liveness_constraints,
        .                           &mut liveness_constraints,
        .                       );
        .                   };
        .           
       29 ( 0.00%)          swap_constraints(self);
        .           
       87 ( 0.00%)          self.visit_body(&promoted_body);
        .           
       58 ( 0.00%)          if !self.errors_reported {
        .                       // if verifier failed, don't do further checks to avoid ICEs
       87 ( 0.00%)              self.cx.typeck_mir(promoted_body);
        .                   }
        .           
       29 ( 0.00%)          self.body = parent_body;
        .                   // Merge the outlives constraints back in, at the given location.
       29 ( 0.00%)          swap_constraints(self);
        .           
        .                   let locations = location.to_locations();
        .                   for constraint in constraints.outlives().iter() {
        .                       let mut constraint = constraint.clone();
        .                       constraint.locations = locations;
      312 ( 0.00%)              if let ConstraintCategory::Return(_)
        .                       | ConstraintCategory::UseAsConst
        .                       | ConstraintCategory::UseAsStatic = constraint.category
        .                       {
        .                           // "Returning" from a promoted is an assignment to a
        .                           // temporary from the user's point of view.
        .                           constraint.category = ConstraintCategory::Boring;
        .                       }
        .                       self.cx.borrowck_context.constraints.outlives_constraints.push(constraint)
        .                   }
        .                   for region in liveness_constraints.rows() {
        .                       // If the region is live at at least one location in the promoted MIR,
        .                       // then add a liveness constraint to the main MIR for this region
        .                       // at the location provided as an argument to this method
      828 ( 0.00%)              if liveness_constraints.get_elements(region).next().is_some() {
       42 ( 0.00%)                  self.cx
        .                               .borrowck_context
        .                               .constraints
        .                               .liveness_constraints
        .                               .add_element(region, location);
        .                       }
        .                   }
        .           
       29 ( 0.00%)          if !closure_bounds.is_empty() {
        .                       let combined_bounds_mapping =
        .                           closure_bounds.into_iter().flat_map(|(_, value)| value).collect();
        .                       let existing = self
        .                           .cx
        .                           .borrowck_context
        .                           .constraints
        .                           .closure_bounds_mapping
        .                           .insert(location, combined_bounds_mapping);
        .                       assert!(existing.is_none(), "Multiple promoteds/closures at the same location.");
        .                   }
      116 ( 0.00%)      }
        .           
        .               fn sanitize_projection(
        .                   &mut self,
        .                   base: PlaceTy<'tcx>,
        .                   pi: PlaceElem<'tcx>,
        .                   place: &Place<'tcx>,
        .                   location: Location,
        .               ) -> PlaceTy<'tcx> {
        .                   debug!("sanitize_projection: {:?} {:?} {:?}", base, pi, place);
        .                   let tcx = self.tcx();
    1,104 ( 0.00%)          let base_ty = base.ty;
    5,520 ( 0.00%)          match pi {
        .                       ProjectionElem::Deref => {
    2,235 ( 0.00%)                  let deref_ty = base_ty.builtin_deref(true);
        .                           PlaceTy::from_ty(deref_ty.map(|t| t.ty).unwrap_or_else(|| {
        .                               span_mirbug_and_err!(self, place, "deref of non-pointer {:?}", base_ty)
        .                           }))
        .                       }
       20 ( 0.00%)              ProjectionElem::Index(i) => {
       80 ( 0.00%)                  let index_ty = Place::from(i).ty(self.body, tcx).ty;
       20 ( 0.00%)                  if index_ty != tcx.types.usize {
        .                               PlaceTy::from_ty(span_mirbug_and_err!(self, i, "index by non-usize {:?}", i))
        .                           } else {
       20 ( 0.00%)                      PlaceTy::from_ty(base_ty.builtin_index().unwrap_or_else(|| {
        .                                   span_mirbug_and_err!(self, place, "index of non-array {:?}", base_ty)
        .                               }))
        .                           }
        .                       }
        .                       ProjectionElem::ConstantIndex { .. } => {
        .                           // consider verifying in-bounds
        .                           PlaceTy::from_ty(base_ty.builtin_index().unwrap_or_else(|| {
        .                               span_mirbug_and_err!(self, place, "index of non-array {:?}", base_ty)
-- line 712 ----------------------------------------
-- line 720 ----------------------------------------
        .                               }
        .                               ty::Slice(..) => {
        .                                   assert!(from_end, "slice subslices should use from_end");
        .                                   base_ty
        .                               }
        .                               _ => span_mirbug_and_err!(self, place, "slice of non-array {:?}", base_ty),
        .                           })
        .                       }
      153 ( 0.00%)              ProjectionElem::Downcast(maybe_name, index) => match base_ty.kind() {
      153 ( 0.00%)                  ty::Adt(adt_def, _substs) if adt_def.is_enum() => {
      153 ( 0.00%)                      if index.as_usize() >= adt_def.variants.len() {
        .                                   PlaceTy::from_ty(span_mirbug_and_err!(
        .                                       self,
        .                                       place,
        .                                       "cast to variant #{:?} but enum only has {:?}",
        .                                       index,
        .                                       adt_def.variants.len()
        .                                   ))
        .                               } else {
-- line 738 ----------------------------------------
-- line 752 ----------------------------------------
        .                                   )
        .                               } else {
        .                                   span_mirbug_and_err!(self, place, "can't downcast {:?}", base_ty)
        .                               };
        .                               PlaceTy::from_ty(ty)
        .                           }
        .                       },
        .                       ProjectionElem::Field(field, fty) => {
    1,440 ( 0.00%)                  let fty = self.sanitize_type(place, fty);
    4,032 ( 0.00%)                  let fty = self.cx.normalize(fty, location);
        .                           match self.field_ty(place, base, field, location) {
        .                               Ok(ty) => {
    2,304 ( 0.00%)                          let ty = self.cx.normalize(ty, location);
      576 ( 0.00%)                          if let Err(terr) = self.cx.eq_types(
        .                                       ty,
        .                                       fty,
        .                                       location.to_locations(),
        .                                       ConstraintCategory::Boring,
        .                                   ) {
        .                                       span_mirbug!(
        .                                           self,
        .                                           place,
-- line 773 ----------------------------------------
-- line 800 ----------------------------------------
        .                   &mut self,
        .                   parent: &dyn fmt::Debug,
        .                   base_ty: PlaceTy<'tcx>,
        .                   field: Field,
        .                   location: Location,
        .               ) -> Result<Ty<'tcx>, FieldAccessError> {
        .                   let tcx = self.tcx();
        .           
      288 ( 0.00%)          let (variant, substs) = match base_ty {
      204 ( 0.00%)              PlaceTy { ty, variant_index: Some(variant_index) } => match *ty.kind() {
      102 ( 0.00%)                  ty::Adt(adt_def, substs) => (&adt_def.variants[variant_index], substs),
        .                           ty::Generator(def_id, substs, _) => {
        .                               let mut variants = substs.as_generator().state_tys(def_id, tcx);
        .                               let mut variant = match variants.nth(variant_index.into()) {
        .                                   Some(v) => v,
        .                                   None => bug!(
        .                                       "variant_index of generator out of range: {:?}/{:?}",
        .                                       variant_index,
        .                                       substs.as_generator().state_tys(def_id, tcx).count()
-- line 818 ----------------------------------------
-- line 820 ----------------------------------------
        .                               };
        .                               return match variant.nth(field.index()) {
        .                                   Some(ty) => Ok(ty),
        .                                   None => Err(FieldAccessError::OutOfRange { field_count: variant.count() }),
        .                               };
        .                           }
        .                           _ => bug!("can't have downcast of non-adt non-generator type"),
        .                       },
      948 ( 0.00%)              PlaceTy { ty, variant_index: None } => match *ty.kind() {
      588 ( 0.00%)                  ty::Adt(adt_def, substs) if !adt_def.is_enum() => {
        .                               (&adt_def.variants[VariantIdx::new(0)], substs)
        .                           }
       19 ( 0.00%)                  ty::Closure(_, substs) => {
      171 ( 0.00%)                      return match substs
        .                                   .as_closure()
        .                                   .tupled_upvars_ty()
        .                                   .tuple_element_ty(field.index())
        .                               {
        .                                   Some(ty) => Ok(ty),
        .                                   None => Err(FieldAccessError::OutOfRange {
        .                                       field_count: substs.as_closure().upvar_tys().count(),
        .                                   }),
-- line 841 ----------------------------------------
-- line 846 ----------------------------------------
        .                               // accessible without a variant index.
        .                               return match substs.as_generator().prefix_tys().nth(field.index()) {
        .                                   Some(ty) => Ok(ty),
        .                                   None => Err(FieldAccessError::OutOfRange {
        .                                       field_count: substs.as_generator().prefix_tys().count(),
        .                                   }),
        .                               };
        .                           }
       71 ( 0.00%)                  ty::Tuple(tys) => {
       71 ( 0.00%)                      return match tys.get(field.index()) {
      284 ( 0.00%)                          Some(&ty) => Ok(ty.expect_ty()),
        .                                   None => Err(FieldAccessError::OutOfRange { field_count: tys.len() }),
        .                               };
        .                           }
        .                           _ => {
        .                               return Ok(span_mirbug_and_err!(
        .                                   self,
        .                                   parent,
        .                                   "can't project out of {:?}",
        .                                   base_ty
        .                               ));
        .                           }
        .                       },
        .                   };
        .           
      198 ( 0.00%)          if let Some(field) = variant.fields.get(field.index()) {
    1,980 ( 0.00%)              Ok(self.cx.normalize(field.ty(tcx, substs), location))
        .                   } else {
        .                       Err(FieldAccessError::OutOfRange { field_count: variant.fields.len() })
        .                   }
        .               }
        .           }
        .           
        .           /// The MIR type checker. Visits the MIR and enforces all the
        .           /// constraints needed for it to be valid and well-typed. Along the
-- line 880 ----------------------------------------
-- line 943 ----------------------------------------
        .                   FxHashMap<Location, FxHashMap<(RegionVid, RegionVid), (ConstraintCategory, Span)>>,
        .           
        .               crate universe_causes: FxHashMap<ty::UniverseIndex, UniverseInfo<'tcx>>,
        .           
        .               crate type_tests: Vec<TypeTest<'tcx>>,
        .           }
        .           
        .           impl<'tcx> MirTypeckRegionConstraints<'tcx> {
      240 ( 0.00%)      fn placeholder_region(
        .                   &mut self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   placeholder: ty::PlaceholderRegion,
        .               ) -> ty::Region<'tcx> {
        .                   let placeholder_index = self.placeholder_indices.insert(placeholder);
       48 ( 0.00%)          match self.placeholder_index_to_region.get(placeholder_index) {
       16 ( 0.00%)              Some(&v) => v,
        .                       None => {
       64 ( 0.00%)                  let origin = NllRegionVariableOrigin::Placeholder(placeholder);
      144 ( 0.00%)                  let region = infcx.next_nll_region_var_in_universe(origin, placeholder.universe);
        .                           self.placeholder_index_to_region.push(region);
        .                           region
        .                       }
        .                   }
      192 ( 0.00%)      }
        .           }
        .           
        .           /// The `Locations` type summarizes *where* region constraints are
        .           /// required to hold. Normally, this is at a particular point which
        .           /// created the obligation, but for constraints that the user gave, we
        .           /// want the constraint to hold at all points.
   10,816 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
        .           pub enum Locations {
        .               /// Indicates that a type constraint should always be true. This
        .               /// is particularly important in the new borrowck analysis for
        .               /// things like the type of the return slot. Consider this
        .               /// example:
        .               ///
        .               /// ```
        .               /// fn foo<'a>(x: &'a u32) -> &'a u32 {
-- line 981 ----------------------------------------
-- line 1020 ----------------------------------------
        .                   match self {
        .                       Locations::All(_) => None,
        .                       Locations::Single(from_location) => Some(*from_location),
        .                   }
        .               }
        .           
        .               /// Gets a span representing the location.
        .               pub fn span(&self, body: &Body<'_>) -> Span {
       48 ( 0.00%)          match self {
       13 ( 0.00%)              Locations::All(span) => *span,
       55 ( 0.00%)              Locations::Single(l) => body.source_info(*l).span,
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> TypeChecker<'a, 'tcx> {
        .               fn new(
        .                   infcx: &'a InferCtxt<'a, 'tcx>,
        .                   body: &'a Body<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   region_bound_pairs: &'a RegionBoundPairs<'tcx>,
        .                   implicit_region_bound: ty::Region<'tcx>,
        .                   borrowck_context: &'a mut BorrowCheckContext<'a, 'tcx>,
        .               ) -> Self {
    2,054 ( 0.00%)          let mut checker = Self {
        .                       infcx,
        .                       last_span: DUMMY_SP,
        .                       body,
      158 ( 0.00%)              user_type_annotations: &body.user_type_annotations,
        .                       param_env,
        .                       region_bound_pairs,
        .                       implicit_region_bound,
        .                       borrowck_context,
        .                       reported_errors: Default::default(),
        .                   };
        .                   checker.check_user_type_annotations();
        .                   checker
        .               }
        .           
        .               fn unsized_feature_enabled(&self) -> bool {
   45,598 ( 0.00%)          let features = self.tcx().features();
   91,196 ( 0.00%)          features.unsized_locals || features.unsized_fn_params
        .               }
        .           
        .               /// Equate the inferred type and the annotated type for user type annotations
        .               fn check_user_type_annotations(&mut self) {
        .                   debug!(
        .                       "check_user_type_annotations: user_type_annotations={:?}",
        .                       self.user_type_annotations
        .                   );
       66 ( 0.00%)          for user_annotation in self.user_type_annotations {
      132 ( 0.00%)              let CanonicalUserTypeAnnotation { span, ref user_ty, inferred_ty } = *user_annotation;
      396 ( 0.00%)              let inferred_ty = self.normalize(inferred_ty, Locations::All(span));
      132 ( 0.00%)              let annotation = self.instantiate_canonical_with_fresh_inference_vars(span, user_ty);
      132 ( 0.00%)              match annotation {
       68 ( 0.00%)                  UserType::Ty(mut ty) => {
      204 ( 0.00%)                      ty = self.normalize(ty, Locations::All(span));
        .           
       68 ( 0.00%)                      if let Err(terr) = self.eq_types(
        .                                   ty,
       34 ( 0.00%)                          inferred_ty,
        .                                   Locations::All(span),
        .                                   ConstraintCategory::BoringNoLocation,
        .                               ) {
        .                                   span_mirbug!(
        .                                       self,
        .                                       user_annotation,
        .                                       "bad user type ({:?} = {:?}): {:?}",
        .                                       ty,
        .                                       inferred_ty,
        .                                       terr
        .                                   );
        .                               }
        .           
      238 ( 0.00%)                      self.prove_predicate(
      102 ( 0.00%)                          ty::Binder::dummy(ty::PredicateKind::WellFormed(inferred_ty.into()))
        .                                       .to_predicate(self.tcx()),
       68 ( 0.00%)                          Locations::All(span),
        .                                   ConstraintCategory::TypeAnnotation,
        .                               );
        .                           }
      256 ( 0.00%)                  UserType::TypeOf(def_id, user_substs) => {
      288 ( 0.00%)                      if let Err(terr) = self.fully_perform_op(
       64 ( 0.00%)                          Locations::All(span),
        .                                   ConstraintCategory::BoringNoLocation,
      160 ( 0.00%)                          self.param_env.and(type_op::ascribe_user_type::AscribeUserType::new(
       32 ( 0.00%)                              inferred_ty,
        .                                       def_id,
       64 ( 0.00%)                              user_substs,
        .                                   )),
        .                               ) {
        .                                   span_mirbug!(
        .                                       self,
        .                                       user_annotation,
        .                                       "bad user type AscribeUserType({:?}, {:?} {:?}, type_of={:?}): {:?}",
        .                                       inferred_ty,
        .                                       def_id,
-- line 1116 ----------------------------------------
-- line 1128 ----------------------------------------
        .               fn push_region_constraints(
        .                   &mut self,
        .                   locations: Locations,
        .                   category: ConstraintCategory,
        .                   data: &QueryRegionConstraints<'tcx>,
        .               ) {
        .                   debug!("constraints generated: {:#?}", data);
        .           
      746 ( 0.00%)          constraint_conversion::ConstraintConversion::new(
        3 ( 0.00%)              self.infcx,
    1,475 ( 0.00%)              self.borrowck_context.universal_regions,
      739 ( 0.00%)              self.region_bound_pairs,
        .                       Some(self.implicit_region_bound),
       58 ( 0.00%)              self.param_env,
        .                       locations,
        .                       category,
      739 ( 0.00%)              &mut self.borrowck_context.constraints,
        .                   )
        .                   .convert_all(data);
        .               }
        .           
        .               /// Try to relate `sub <: sup`
        .               fn sub_types(
        .                   &mut self,
        .                   sub: Ty<'tcx>,
        .                   sup: Ty<'tcx>,
        .                   locations: Locations,
        .                   category: ConstraintCategory,
        .               ) -> Fallible<()> {
        .                   // Use this order of parameters because the sup type is usually the
        .                   // "expected" type in diagnostics.
  815,720 ( 0.02%)          self.relate_types(sup, ty::Variance::Contravariant, sub, locations, category)
        .               }
        .           
        .               #[instrument(skip(self, category), level = "debug")]
        .               fn eq_types(
        .                   &mut self,
        .                   expected: Ty<'tcx>,
        .                   found: Ty<'tcx>,
        .                   locations: Locations,
        .                   category: ConstraintCategory,
        .               ) -> Fallible<()> {
    7,601 ( 0.00%)          self.relate_types(expected, ty::Variance::Invariant, found, locations, category)
        .               }
        .           
      578 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               fn relate_type_and_user_type(
        .                   &mut self,
        .                   a: Ty<'tcx>,
        .                   v: ty::Variance,
        .                   user_ty: &UserTypeProjection,
        .                   locations: Locations,
        .                   category: ConstraintCategory,
        .               ) -> Fallible<()> {
      144 ( 0.00%)          let annotated_type = self.user_type_annotations[user_ty.base].inferred_ty;
        .                   let mut curr_projected_ty = PlaceTy::from_ty(annotated_type);
        .           
      108 ( 0.00%)          let tcx = self.infcx.tcx;
        .           
        .                   for proj in &user_ty.projs {
        .                       let projected_ty = curr_projected_ty.projection_ty_core(
        .                           tcx,
        .                           self.param_env,
        .                           proj,
        .                           |this, field, &()| {
        .                               let ty = this.field_ty(tcx, field);
-- line 1193 ----------------------------------------
-- line 1197 ----------------------------------------
        .                       curr_projected_ty = projected_ty;
        .                   }
        .                   debug!(
        .                       "user_ty base: {:?} freshened: {:?} projs: {:?} yields: {:?}",
        .                       user_ty.base, annotated_type, user_ty.projs, curr_projected_ty
        .                   );
        .           
        .                   let ty = curr_projected_ty.ty;
      582 ( 0.00%)          self.relate_types(ty, v.xform(ty::Variance::Contravariant), a, locations, category)?;
        .           
        .                   Ok(())
        .               }
        .           
        .               /// Equates a type `anon_ty` that may contain opaque types whose
        .               /// values are to be inferred by the MIR.
        .               ///
        .               /// The type `revealed_ty` contains the same type as `anon_ty`, but with the
-- line 1213 ----------------------------------------
-- line 1231 ----------------------------------------
        .               ///
        .               /// In terms of our function parameters:
        .               ///
        .               /// * `anon_ty` would be `Box<Foo<T>>` where `Foo<T>` is an opaque type
        .               ///   scoped to this function (note that it is parameterized by the
        .               ///   generics of `foo`). Note that `anon_ty` is not just the opaque type,
        .               ///   but the entire return type (which may contain opaque types within it).
        .               /// * `revealed_ty` would be `Box<(T, u32)>`
    3,363 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               fn eq_opaque_type_and_type(
        .                   &mut self,
        .                   revealed_ty: Ty<'tcx>,
        .                   anon_ty: Ty<'tcx>,
        .                   locations: Locations,
        .                   category: ConstraintCategory,
        .               ) -> Fallible<()> {
        .                   // Fast path for the common case.
      177 ( 0.00%)          if !anon_ty.has_opaque_types() {
      340 ( 0.00%)              if let Err(terr) = self.eq_types(anon_ty, revealed_ty, locations, category) {
        .                           span_mirbug!(
        .                               self,
        .                               locations,
        .                               "eq_opaque_type_and_type: `{:?}=={:?}` failed with `{:?}`",
        .                               revealed_ty,
        .                               anon_ty,
        .                               terr
        .                           );
        .                       }
        .                       return Ok(());
        .                   }
        .           
       14 ( 0.00%)          let param_env = self.param_env;
        7 ( 0.00%)          let body = self.body;
        .                   let mir_def_id = body.source.def_id().expect_local();
        .           
        .                   debug!(?mir_def_id);
        .                   self.fully_perform_op(
       35 ( 0.00%)              locations,
        .                       category,
        .                       CustomTypeOp::new(
        .                           |infcx| {
        .                               let mut obligations = ObligationAccumulator::default();
        .           
        .                               let dummy_body_id = hir::CRATE_HIR_ID;
        .           
        .                               // Replace the opaque types defined by this function with
        .                               // inference variables, creating a map. In our example above,
        .                               // this would transform the type `Box<Foo<T>>` (where `Foo` is an opaque type)
        .                               // to `Box<?T>`, returning an `opaque_type_map` mapping `{Foo<T> -> ?T}`.
        .                               // (Note that the key of the map is both the def-id of `Foo` along with
        .                               // any generic parameters.)
        .                               let output_ty = obligations.add(infcx.instantiate_opaque_types(
        .                                   dummy_body_id,
        7 ( 0.00%)                          param_env,
        7 ( 0.00%)                          anon_ty,
        .                                   locations.span(body),
        .                               ));
        .                               debug!(?output_ty, ?revealed_ty);
        .           
        .                               // Make sure that the inferred types are well-formed. I'm
        .                               // not entirely sure this is needed (the HIR type check
        .                               // didn't do this) but it seems sensible to prevent opaque
        .                               // types hiding ill-formed types.
        .                               obligations.obligations.push(traits::Obligation::new(
        .                                   ObligationCause::dummy(),
        7 ( 0.00%)                          param_env,
       28 ( 0.00%)                          ty::Binder::dummy(ty::PredicateKind::WellFormed(revealed_ty.into()))
        7 ( 0.00%)                              .to_predicate(infcx.tcx),
        .                               ));
        .                               obligations.add(
        .                                   infcx
        7 ( 0.00%)                              .at(&ObligationCause::dummy(), param_env)
        7 ( 0.00%)                              .eq(output_ty, revealed_ty)?,
        .                               );
        .           
        .                               debug!("equated");
        .           
       28 ( 0.00%)                      Ok(InferOk { value: (), obligations: obligations.into_vec() })
        7 ( 0.00%)                  },
        .                           || "input_output".to_string(),
        .                       ),
        .                   )?;
        .           
        .                   // Finally, if we instantiated the anon types successfully, we
        .                   // have to solve any bounds (e.g., `-> impl Iterator` needs to
        .                   // prove that `T: Iterator` where `T` is the type we
        .                   // instantiated it with).
        7 ( 0.00%)          let opaque_type_map = self.infcx.inner.borrow().opaque_types.clone();
       91 ( 0.00%)          for (opaque_type_key, opaque_decl) in opaque_type_map {
        .                       self.fully_perform_op(
       28 ( 0.00%)                  locations,
        .                           ConstraintCategory::OpaqueType,
        .                           CustomTypeOp::new(
        .                               |infcx| {
       21 ( 0.00%)                          infcx.constrain_opaque_type(opaque_type_key, &opaque_decl);
        7 ( 0.00%)                          Ok(InferOk { value: (), obligations: vec![] })
        .                               },
        .                               || "opaque_type_map".to_string(),
        .                           ),
        .                       )?;
        .                   }
        .                   Ok(())
        .               }
        .           
        .               fn tcx(&self) -> TyCtxt<'tcx> {
  388,348 ( 0.01%)          self.infcx.tcx
        .               }
        .           
        .               #[instrument(skip(self, body, location), level = "debug")]
        .               fn check_stmt(&mut self, body: &Body<'tcx>, stmt: &Statement<'tcx>, location: Location) {
        .                   let tcx = self.tcx();
  230,720 ( 0.01%)          match stmt.kind {
   12,646 ( 0.00%)              StatementKind::Assign(box (ref place, ref rv)) => {
        .                           // Assignments to temporaries are not "interesting";
        .                           // they are not caused by the user, but rather artifacts
        .                           // of lowering. Assignments to other sorts of places *are* interesting
        .                           // though.
   50,572 ( 0.00%)                  let category = match place.as_local() {
        .                               Some(RETURN_PLACE) => {
      472 ( 0.00%)                          let defining_ty = &self.borrowck_context.universal_regions.defining_ty;
      236 ( 0.00%)                          if defining_ty.is_const() {
      188 ( 0.00%)                              if tcx.is_static(defining_ty.def_id()) {
        .                                           ConstraintCategory::UseAsStatic
        .                                       } else {
        .                                           ConstraintCategory::UseAsConst
        .                                       }
        .                                   } else {
        .                                       ConstraintCategory::Return(ReturnConstraint::Normal)
        .                                   }
        .                               }
        .                               Some(l)
   13,516 ( 0.00%)                          if matches!(
   25,086 ( 0.00%)                              body.local_decls[l].local_info,
        .                                       Some(box LocalInfo::AggregateTemp)
        .                                   ) =>
        .                               {
        .                                   ConstraintCategory::Usage
        .                               }
        .                               Some(l) if !body.local_decls[l].is_user_variable() => {
        .                                   ConstraintCategory::Boring
        .                               }
-- line 1371 ----------------------------------------
-- line 1373 ----------------------------------------
        .                           };
        .                           debug!(
        .                               "assignment category: {:?} {:?}",
        .                               category,
        .                               place.as_local().map(|l| &body.local_decls[l])
        .                           );
        .           
        .                           let place_ty = place.ty(body, tcx).ty;
  151,752 ( 0.00%)                  let place_ty = self.normalize(place_ty, location);
   12,646 ( 0.00%)                  let rv_ty = rv.ty(body, tcx);
   75,876 ( 0.00%)                  let rv_ty = self.normalize(rv_ty, location);
   25,292 ( 0.00%)                  if let Err(terr) =
        .                               self.sub_types(rv_ty, place_ty, location.to_locations(), category)
        .                           {
        .                               span_mirbug!(
        .                                   self,
        .                                   stmt,
        .                                   "bad assignment ({:?} = {:?}): {:?}",
        .                                   place_ty,
        .                                   rv_ty,
        .                                   terr
        .                               );
        .                           }
        .           
      164 ( 0.00%)                  if let Some(annotation_index) = self.rvalue_user_ty(rv) {
       16 ( 0.00%)                      if let Err(terr) = self.relate_type_and_user_type(
        2 ( 0.00%)                          rv_ty,
        .                                   ty::Variance::Invariant,
        8 ( 0.00%)                          &UserTypeProjection { base: annotation_index, projs: vec![] },
        .                                   location.to_locations(),
        .                                   ConstraintCategory::Boring,
        .                               ) {
        .                                   let annotation = &self.user_type_annotations[annotation_index];
        .                                   span_mirbug!(
        .                                       self,
        .                                       stmt,
        .                                       "bad user type on rvalue ({:?} = {:?}): {:?}",
        .                                       annotation,
        .                                       rv_ty,
        .                                       terr
        .                                   );
        .                               }
        .                           }
        .           
   88,522 ( 0.00%)                  self.check_rvalue(body, rv, location);
   12,646 ( 0.00%)                  if !self.unsized_feature_enabled() {
        .                               let trait_ref = ty::TraitRef {
  139,106 ( 0.00%)                          def_id: tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),
   63,230 ( 0.00%)                          substs: tcx.mk_substs_trait(place_ty, &[]),
        .                               };
   37,938 ( 0.00%)                      self.prove_trait_ref(
        .                                   trait_ref,
        .                                   location.to_locations(),
        .                                   ConstraintCategory::SizedBound,
        .                               );
        .                           }
        .                       }
        .                       StatementKind::SetDiscriminant { ref place, variant_index } => {
        .                           let place_type = place.ty(body, tcx).ty;
-- line 1431 ----------------------------------------
-- line 1444 ----------------------------------------
        .                               span_bug!(
        .                                   stmt.source_info.span,
        .                                   "bad set discriminant ({:?} = {:?}): value of of range",
        .                                   place,
        .                                   variant_index
        .                               );
        .                           };
        .                       }
        2 ( 0.00%)              StatementKind::AscribeUserType(box (ref place, ref projection), variance) => {
        2 ( 0.00%)                  let place_ty = place.ty(body, tcx).ty;
        .                           if let Err(terr) = self.relate_type_and_user_type(
        .                               place_ty,
        .                               variance,
        .                               projection,
        8 ( 0.00%)                      Locations::All(stmt.source_info.span),
        .                               ConstraintCategory::TypeAnnotation,
        .                           ) {
        .                               let annotation = &self.user_type_annotations[projection.base];
        .                               span_mirbug!(
        .                                   self,
        .                                   stmt,
        .                                   "bad type assert ({:?} <: {:?} with projections {:?}): {:?}",
        .                                   place_ty,
-- line 1466 ----------------------------------------
-- line 1488 ----------------------------------------
        .               #[instrument(skip(self, body, term_location), level = "debug")]
        .               fn check_terminator(
        .                   &mut self,
        .                   body: &Body<'tcx>,
        .                   term: &Terminator<'tcx>,
        .                   term_location: Location,
        .               ) {
        .                   let tcx = self.tcx();
   56,965 ( 0.00%)          match term.kind {
        .                       TerminatorKind::Goto { .. }
        .                       | TerminatorKind::Resume
        .                       | TerminatorKind::Abort
        .                       | TerminatorKind::Return
        .                       | TerminatorKind::GeneratorDrop
        .                       | TerminatorKind::Unreachable
        .                       | TerminatorKind::Drop { .. }
        .                       | TerminatorKind::FalseEdge { .. }
-- line 1504 ----------------------------------------
-- line 1520 ----------------------------------------
        .                                   term,
        .                                   "bad DropAndReplace ({:?} = {:?}): {:?}",
        .                                   place_ty,
        .                                   rv_ty,
        .                                   terr
        .                               );
        .                           }
        .                       }
      716 ( 0.00%)              TerminatorKind::SwitchInt { ref discr, switch_ty, .. } => {
      537 ( 0.00%)                  self.check_operand(discr, term_location);
        .           
      179 ( 0.00%)                  let discr_ty = discr.ty(body, tcx);
      358 ( 0.00%)                  if let Err(terr) = self.sub_types(
        .                               discr_ty,
        .                               switch_ty,
        .                               term_location.to_locations(),
        .                               ConstraintCategory::Assignment,
        .                           ) {
        .                               span_mirbug!(
        .                                   self,
        .                                   term,
        .                                   "bad SwitchInt ({:?} on {:?}): {:?}",
        .                                   switch_ty,
        .                                   discr_ty,
        .                                   terr
        .                               );
        .                           }
      240 ( 0.00%)                  if !switch_ty.is_integral() && !switch_ty.is_char() && !switch_ty.is_bool() {
        .                               span_mirbug!(self, term, "bad SwitchInt discr ty {:?}", switch_ty);
        .                           }
        .                           // FIXME: check the values
        .                       }
   61,980 ( 0.00%)              TerminatorKind::Call { ref func, ref args, ref destination, from_hir_call, .. } => {
   51,650 ( 0.00%)                  self.check_operand(func, term_location);
        .                           for arg in args {
   52,715 ( 0.00%)                      self.check_operand(arg, term_location);
        .                           }
        .           
   10,330 ( 0.00%)                  let func_ty = func.ty(body, tcx);
        .                           debug!("check_terminator: call, func_ty={:?}", func_ty);
   41,320 ( 0.00%)                  let sig = match func_ty.kind() {
   41,320 ( 0.00%)                      ty::FnDef(..) | ty::FnPtr(_) => func_ty.fn_sig(tcx),
        .                               _ => {
        .                                   span_mirbug!(self, term, "call to non-function {:?}", func_ty);
        .                                   return;
        .                               }
        .                           };
  103,300 ( 0.00%)                  let (sig, map) = self.infcx.replace_bound_vars_with_fresh_vars(
   30,990 ( 0.00%)                      term.source_info.span,
        .                               LateBoundRegionConversionTime::FnCall,
        .                               sig,
        .                           );
   20,660 ( 0.00%)                  let sig = self.normalize(sig, term_location);
   41,320 ( 0.00%)                  self.check_call_dest(body, term, &sig, destination, term_location);
        .           
        .                           self.prove_predicates(
   10,330 ( 0.00%)                      sig.inputs_and_output
        .                                   .iter()
   41,746 ( 0.00%)                          .map(|ty| ty::Binder::dummy(ty::PredicateKind::WellFormed(ty.into()))),
        .                               term_location.to_locations(),
        .                               ConstraintCategory::Boring,
        .                           );
        .           
        .                           // The ordinary liveness rules will ensure that all
        .                           // regions in the type of the callee are live here. We
        .                           // then further constrain the late-bound regions that
        .                           // were instantiated at the call site to be live as
        .                           // well. The resulting is that all the input (and
        .                           // output) types in the signature must be live, since
        .                           // all the inputs that fed into it were live.
   62,866 ( 0.00%)                  for &late_bound_region in map.values() {
        .                               let region_vid =
      886 ( 0.00%)                          self.borrowck_context.universal_regions.to_region_vid(late_bound_region);
      886 ( 0.00%)                      self.borrowck_context
        .                                   .constraints
        .                                   .liveness_constraints
        .                                   .add_element(region_vid, term_location);
        .                           }
        .           
   20,660 ( 0.00%)                  self.check_call_inputs(body, term, &sig, args, term_location, from_hir_call);
        .                       }
       74 ( 0.00%)              TerminatorKind::Assert { ref cond, ref msg, .. } => {
      111 ( 0.00%)                  self.check_operand(cond, term_location);
        .           
       74 ( 0.00%)                  let cond_ty = cond.ty(body, tcx);
       37 ( 0.00%)                  if cond_ty != tcx.types.bool {
        .                               span_mirbug!(self, term, "bad Assert ({:?}, not bool", cond_ty);
        .                           }
        .           
      154 ( 0.00%)                  if let AssertKind::BoundsCheck { ref len, ref index } = *msg {
       20 ( 0.00%)                      if len.ty(body, tcx) != tcx.types.usize {
        .                                   span_mirbug!(self, len, "bounds-check length non-usize {:?}", len)
        .                               }
       20 ( 0.00%)                      if index.ty(body, tcx) != tcx.types.usize {
        .                                   span_mirbug!(self, index, "bounds-check index non-usize {:?}", index)
        .                               }
        .                           }
        .                       }
        .                       TerminatorKind::Yield { ref value, .. } => {
        .                           self.check_operand(value, term_location);
        .           
        .                           let value_ty = value.ty(body, tcx);
-- line 1621 ----------------------------------------
-- line 1647 ----------------------------------------
        .                   &mut self,
        .                   body: &Body<'tcx>,
        .                   term: &Terminator<'tcx>,
        .                   sig: &ty::FnSig<'tcx>,
        .                   destination: &Option<(Place<'tcx>, BasicBlock)>,
        .                   term_location: Location,
        .               ) {
        .                   let tcx = self.tcx();
   41,320 ( 0.00%)          match *destination {
        .                       Some((ref dest, _target_block)) => {
        .                           let dest_ty = dest.ty(body, tcx).ty;
   61,974 ( 0.00%)                  let dest_ty = self.normalize(dest_ty, term_location);
   51,645 ( 0.00%)                  let category = match dest.as_local() {
        .                               Some(RETURN_PLACE) => {
      441 ( 0.00%)                          if let BorrowCheckContext {
        .                                       universal_regions:
        .                                           UniversalRegions {
        .                                               defining_ty:
        .                                                   DefiningTy::Const(def_id, _)
        .                                                   | DefiningTy::InlineConst(def_id, _),
        .                                               ..
        .                                           },
        .                                       ..
-- line 1669 ----------------------------------------
-- line 1673 ----------------------------------------
        .                                           ConstraintCategory::UseAsStatic
        .                                       } else {
        .                                           ConstraintCategory::UseAsConst
        .                                       }
        .                                   } else {
        .                                       ConstraintCategory::Return(ReturnConstraint::Normal)
        .                                   }
        .                               }
      147 ( 0.00%)                      Some(l) if !body.local_decls[l].is_user_variable() => {
        .                                   ConstraintCategory::Boring
        .                               }
        .                               _ => ConstraintCategory::Assignment,
        .                           };
        .           
        .                           let locations = term_location.to_locations();
        .           
   72,303 ( 0.00%)                  if let Err(terr) = self.sub_types(sig.output(), dest_ty, locations, category) {
        .                               span_mirbug!(
        .                                   self,
        .                                   term,
        .                                   "call dest mismatch ({:?} <- {:?}): {:?}",
        .                                   dest_ty,
        .                                   sig.output(),
        .                                   terr
        .                               );
        .                           }
        .           
        .                           // When `unsized_fn_params` and `unsized_locals` are both not enabled,
        .                           // this check is done at `check_local`.
   10,329 ( 0.00%)                  if self.unsized_feature_enabled() {
        .                               let span = term.source_info.span;
        .                               self.ensure_place_sized(dest_ty, span);
        .                           }
        .                       }
        .                       None => {
        1 ( 0.00%)                  if !self
        .                               .tcx()
        3 ( 0.00%)                      .conservative_is_privately_uninhabited(self.param_env.and(sig.output()))
        .                           {
        .                               span_mirbug!(self, term, "call to converging function {:?} w/o dest", sig);
        .                           }
        .                       }
        .                   }
        .               }
        .           
        .               fn check_call_inputs(
-- line 1718 ----------------------------------------
-- line 1720 ----------------------------------------
        .                   body: &Body<'tcx>,
        .                   term: &Terminator<'tcx>,
        .                   sig: &ty::FnSig<'tcx>,
        .                   args: &[Operand<'tcx>],
        .                   term_location: Location,
        .                   from_hir_call: bool,
        .               ) {
        .                   debug!("check_call_inputs({:?}, {:?})", sig, args);
   72,310 ( 0.00%)          if args.len() < sig.inputs().len() || (args.len() > sig.inputs().len() && !sig.c_variadic) {
        .                       span_mirbug!(self, term, "call to {:?} with wrong # of args", sig);
        .                   }
   41,746 ( 0.00%)          for (n, (fn_arg, op_arg)) in iter::zip(sig.inputs(), args).enumerate() {
        .                       let op_arg_ty = op_arg.ty(body, self.tcx());
   42,172 ( 0.00%)              let op_arg_ty = self.normalize(op_arg_ty, term_location);
        .                       let category = if from_hir_call {
        .                           ConstraintCategory::CallArgument
        .                       } else {
        .                           ConstraintCategory::Boring
        .                       };
   21,086 ( 0.00%)              if let Err(terr) =
   21,086 ( 0.00%)                  self.sub_types(op_arg_ty, fn_arg, term_location.to_locations(), category)
        .                       {
        .                           span_mirbug!(
        .                               self,
        .                               term,
        .                               "bad arg #{:?} ({:?} <- {:?}): {:?}",
        .                               n,
        .                               fn_arg,
        .                               op_arg_ty,
        .                               terr
        .                           );
        .                       }
        .                   }
        .               }
        .           
        .               fn check_iscleanup(&mut self, body: &Body<'tcx>, block_data: &BasicBlockData<'tcx>) {
   10,698 ( 0.00%)          let is_cleanup = block_data.is_cleanup;
   34,179 ( 0.00%)          self.last_span = block_data.terminator().source_info.span;
   68,358 ( 0.00%)          match block_data.terminator().kind {
      359 ( 0.00%)              TerminatorKind::Goto { target } => {
    1,436 ( 0.00%)                  self.assert_iscleanup(body, block_data, target, is_cleanup)
        .                       }
      179 ( 0.00%)              TerminatorKind::SwitchInt { ref targets, .. } => {
      179 ( 0.00%)                  for target in targets.all_targets() {
    2,514 ( 0.00%)                      self.assert_iscleanup(body, block_data, *target, is_cleanup);
        .                           }
        .                       }
        .                       TerminatorKind::Resume => {
      102 ( 0.00%)                  if !is_cleanup {
        .                               span_mirbug!(self, block_data, "resume on non-cleanup block!")
        .                           }
        .                       }
        .                       TerminatorKind::Abort => {
        .                           if !is_cleanup {
        .                               span_mirbug!(self, block_data, "abort on non-cleanup block!")
        .                           }
        .                       }
        .                       TerminatorKind::Return => {
      187 ( 0.00%)                  if is_cleanup {
        .                               span_mirbug!(self, block_data, "return on cleanup block")
        .                           }
        .                       }
        .                       TerminatorKind::GeneratorDrop { .. } => {
        .                           if is_cleanup {
        .                               span_mirbug!(self, block_data, "generator_drop in cleanup block")
        .                           }
        .                       }
-- line 1786 ----------------------------------------
-- line 1792 ----------------------------------------
        .                           if let Some(drop) = drop {
        .                               self.assert_iscleanup(body, block_data, drop, is_cleanup);
        .                           }
        .                       }
        .                       TerminatorKind::Unreachable => {}
        .                       TerminatorKind::Drop { target, unwind, .. }
        .                       | TerminatorKind::DropAndReplace { target, unwind, .. }
        .                       | TerminatorKind::Assert { target, cleanup: unwind, .. } => {
      585 ( 0.00%)                  self.assert_iscleanup(body, block_data, target, is_cleanup);
      234 ( 0.00%)                  if let Some(unwind) = unwind {
       72 ( 0.00%)                      if is_cleanup {
        .                                   span_mirbug!(self, block_data, "unwind on cleanup block")
        .                               }
        .                               self.assert_iscleanup(body, block_data, unwind, true);
        .                           }
        .                       }
   10,330 ( 0.00%)              TerminatorKind::Call { ref destination, cleanup, .. } => {
   51,647 ( 0.00%)                  if let &Some((_, target)) = destination {
   20,658 ( 0.00%)                      self.assert_iscleanup(body, block_data, target, is_cleanup);
        .                           }
   30,990 ( 0.00%)                  if let Some(cleanup) = cleanup {
   10,330 ( 0.00%)                      if is_cleanup {
        .                                   span_mirbug!(self, block_data, "cleanup on cleanup block")
        .                               }
        .                               self.assert_iscleanup(body, block_data, cleanup, true);
        .                           }
        .                       }
      190 ( 0.00%)              TerminatorKind::FalseEdge { real_target, imaginary_target } => {
      570 ( 0.00%)                  self.assert_iscleanup(body, block_data, real_target, is_cleanup);
      475 ( 0.00%)                  self.assert_iscleanup(body, block_data, imaginary_target, is_cleanup);
        .                       }
       14 ( 0.00%)              TerminatorKind::FalseUnwind { real_target, unwind } => {
       35 ( 0.00%)                  self.assert_iscleanup(body, block_data, real_target, is_cleanup);
       14 ( 0.00%)                  if let Some(unwind) = unwind {
        7 ( 0.00%)                      if is_cleanup {
        .                                   span_mirbug!(self, block_data, "cleanup in cleanup block via false unwind");
        .                               }
        .                               self.assert_iscleanup(body, block_data, unwind, true);
        .                           }
        .                       }
        .                       TerminatorKind::InlineAsm { destination, cleanup, .. } => {
        .                           if let Some(target) = destination {
        .                               self.assert_iscleanup(body, block_data, target, is_cleanup);
-- line 1834 ----------------------------------------
-- line 1838 ----------------------------------------
        .                                   span_mirbug!(self, block_data, "cleanup on cleanup block")
        .                               }
        .                               self.assert_iscleanup(body, block_data, cleanup, true);
        .                           }
        .                       }
        .                   }
        .               }
        .           
  196,470 ( 0.00%)      fn assert_iscleanup(
        .                   &mut self,
        .                   body: &Body<'tcx>,
        .                   ctxt: &dyn fmt::Debug,
        .                   bb: BasicBlock,
        .                   iscleanuppad: bool,
        .               ) {
  130,980 ( 0.00%)          if body[bb].is_cleanup != iscleanuppad {
        .                       span_mirbug!(self, ctxt, "cleanuppad mismatch: {:?} should be {:?}", bb, iscleanuppad);
        .                   }
  109,150 ( 0.00%)      }
        .           
        .               fn check_local(&mut self, body: &Body<'tcx>, local: Local, local_decl: &LocalDecl<'tcx>) {
        .                   match body.local_kind(local) {
        .                       LocalKind::ReturnPointer | LocalKind::Arg => {
        .                           // return values of normal functions are required to be
        .                           // sized by typeck, but return values of ADT constructors are
        .                           // not because we don't include a `Self: Sized` bounds on them.
        .                           //
-- line 1864 ----------------------------------------
-- line 1866 ----------------------------------------
        .                           // - maybe we should make that a warning.
        .                           return;
        .                       }
        .                       LocalKind::Var | LocalKind::Temp => {}
        .                   }
        .           
        .                   // When `unsized_fn_params` or `unsized_locals` is enabled, only function calls
        .                   // and nullary ops are checked in `check_call_dest`.
   22,623 ( 0.00%)          if !self.unsized_feature_enabled() {
   45,246 ( 0.00%)              let span = local_decl.source_info.span;
   22,623 ( 0.00%)              let ty = local_decl.ty;
   45,246 ( 0.00%)              self.ensure_place_sized(ty, span);
        .                   }
        .               }
        .           
  203,607 ( 0.01%)      fn ensure_place_sized(&mut self, ty: Ty<'tcx>, span: Span) {
        .                   let tcx = self.tcx();
        .           
        .                   // Erase the regions from `ty` to get a global type.  The
        .                   // `Sized` bound in no way depends on precise regions, so this
        .                   // shouldn't affect `is_sized`.
        .                   let erased_ty = tcx.erase_regions(ty);
  135,738 ( 0.00%)          if !erased_ty.is_sized(tcx.at(span), self.param_env) {
        .                       // in current MIR construction, all non-control-flow rvalue
        .                       // expressions evaluate through `as_temp` or `into` a return
        .                       // slot or local, so to find all unsized rvalues it is enough
        .                       // to check all temps, return slots and locals.
        .                       if self.reported_errors.replace((ty, span)).is_none() {
        .                           let mut diag = struct_span_err!(
        .                               self.tcx().sess,
        .                               span,
-- line 1896 ----------------------------------------
-- line 1901 ----------------------------------------
        .                           );
        .           
        .                           // While this is located in `nll::typeck` this error is not
        .                           // an NLL error, it's a required check to prevent creation
        .                           // of unsized rvalues in a call expression.
        .                           diag.emit();
        .                       }
        .                   }
  135,738 ( 0.00%)      }
        .           
        .               fn aggregate_field_ty(
        .                   &mut self,
        .                   ak: &AggregateKind<'tcx>,
        .                   field_index: usize,
        .                   location: Location,
        .               ) -> Result<Ty<'tcx>, FieldAccessError> {
        .                   let tcx = self.tcx();
        .           
  199,355 ( 0.01%)          match *ak {
    1,116 ( 0.00%)              AggregateKind::Adt(adt_did, variant_index, substs, _, active_field_index) => {
        .                           let def = tcx.adt_def(adt_did);
        .                           let variant = &def.variants[variant_index];
        .                           let adj_field_index = active_field_index.unwrap_or(field_index);
      124 ( 0.00%)                  if let Some(field) = variant.fields.get(adj_field_index) {
    1,116 ( 0.00%)                      Ok(self.normalize(field.ty(tcx, substs), location))
        .                           } else {
        .                               Err(FieldAccessError::OutOfRange { field_count: variant.fields.len() })
        .                           }
        .                       }
        9 ( 0.00%)              AggregateKind::Closure(_, substs) => {
      108 ( 0.00%)                  match substs.as_closure().upvar_tys().nth(field_index) {
        .                               Some(ty) => Ok(ty),
        .                               None => Err(FieldAccessError::OutOfRange {
        .                                   field_count: substs.as_closure().upvar_tys().count(),
        .                               }),
        .                           }
        .                       }
        .                       AggregateKind::Generator(_, substs, _) => {
        .                           // It doesn't make sense to look at a field beyond the prefix;
-- line 1939 ----------------------------------------
-- line 1941 ----------------------------------------
        .                           // aggregate rvalues.
        .                           match substs.as_generator().prefix_tys().nth(field_index) {
        .                               Some(ty) => Ok(ty),
        .                               None => Err(FieldAccessError::OutOfRange {
        .                                   field_count: substs.as_generator().prefix_tys().count(),
        .                               }),
        .                           }
        .                       }
   39,738 ( 0.00%)              AggregateKind::Array(ty) => Ok(ty),
        .                       AggregateKind::Tuple => {
        .                           unreachable!("This should have been covered in check_rvalues");
        .                       }
        .                   }
        .               }
        .           
  445,424 ( 0.01%)      fn check_operand(&mut self, op: &Operand<'tcx>, location: Location) {
  127,264 ( 0.00%)          if let Operand::Constant(constant) = op {
  124,284 ( 0.00%)              let maybe_uneval = match constant.literal {
  124,284 ( 0.00%)                  ConstantKind::Ty(ct) => match ct.val {
       45 ( 0.00%)                      ty::ConstKind::Unevaluated(uv) => Some(uv),
        .                               _ => None,
        .                           },
        .                           _ => None,
        .                       };
       90 ( 0.00%)              if let Some(uv) = maybe_uneval {
       45 ( 0.00%)                  if uv.promoted.is_none() {
        .                               let tcx = self.tcx();
      112 ( 0.00%)                      let def_id = uv.def.def_id_for_type_of();
       64 ( 0.00%)                      if tcx.def_kind(def_id) == DefKind::InlineConst {
        .                                   let predicates = self.prove_closure_bounds(
        .                                       tcx,
        .                                       def_id.expect_local(),
        .                                       uv.substs,
        .                                       location,
        .                                   );
        .                                   self.normalize_and_prove_instantiated_predicates(
        .                                       def_id,
        .                                       predicates,
        .                                       location.to_locations(),
        .                                   );
        .                               }
        .                           }
        .                       }
        .                   }
  509,056 ( 0.01%)      }
        .           
  164,398 ( 0.00%)      fn check_rvalue(&mut self, body: &Body<'tcx>, rvalue: &Rvalue<'tcx>, location: Location) {
        .                   let tcx = self.tcx();
        .           
   63,526 ( 0.00%)          match rvalue {
        .                       Rvalue::Aggregate(ak, ops) => {
        .                           for op in ops {
  208,205 ( 0.01%)                      self.check_operand(op, location);
        .                           }
   22,028 ( 0.00%)                  self.check_aggregate_rvalue(&body, rvalue, ak, ops, location)
        .                       }
        .           
       15 ( 0.00%)              Rvalue::Repeat(operand, len) => {
       20 ( 0.00%)                  self.check_operand(operand, location);
        .           
        .                           // If the length cannot be evaluated we must assume that the length can be larger
        .                           // than 1.
        .                           // If the length is larger than 1, the repeat expression will need to copy the
        .                           // element, so we require the `Copy` trait.
       25 ( 0.00%)                  if len.try_eval_usize(tcx, self.param_env).map_or(true, |len| len > 1) {
       10 ( 0.00%)                      match operand {
        .                                   Operand::Copy(..) | Operand::Constant(..) => {
        .                                       // These are always okay: direct use of a const, or a value that can evidently be copied.
        .                                   }
        .                                   Operand::Move(place) => {
        .                                       // Make sure that repeated elements implement `Copy`.
        .                                       let span = body.source_info(location).span;
        .                                       let ty = operand.ty(body, tcx);
        .                                       if !self.infcx.type_is_copy_modulo_regions(self.param_env, ty, span) {
-- line 2014 ----------------------------------------
-- line 2071 ----------------------------------------
        .           
        .                           self.prove_trait_ref(
        .                               trait_ref,
        .                               location.to_locations(),
        .                               ConstraintCategory::SizedBound,
        .                           );
        .                       }
        .           
      148 ( 0.00%)              Rvalue::Cast(cast_kind, op, ty) => {
      148 ( 0.00%)                  self.check_operand(op, location);
        .           
      361 ( 0.00%)                  match cast_kind {
        .                               CastKind::Pointer(PointerCast::ReifyFnPointer) => {
        .                                   let fn_sig = op.ty(body, tcx).fn_sig(tcx);
        .           
        .                                   // The type that we see in the fcx is like
        .                                   // `foo::<'a, 'b>`, where `foo` is the path to a
        .                                   // function definition. When we extract the
        .                                   // signature, it comes from the `fn_sig` query,
        .                                   // and hence may contain unnormalized results.
-- line 2090 ----------------------------------------
-- line 2158 ----------------------------------------
        .                                           ty_fn_ptr_from,
        .                                           ty,
        .                                           terr
        .                                       );
        .                                   }
        .                               }
        .           
        .                               CastKind::Pointer(PointerCast::Unsize) => {
       75 ( 0.00%)                          let &ty = ty;
        .                                   let trait_ref = ty::TraitRef {
      275 ( 0.00%)                              def_id: tcx
       25 ( 0.00%)                                  .require_lang_item(LangItem::CoerceUnsized, Some(self.last_span)),
      300 ( 0.00%)                              substs: tcx.mk_substs_trait(op.ty(body, tcx), &[ty.into()]),
        .                                   };
        .           
      225 ( 0.00%)                          self.prove_trait_ref(
        .                                       trait_ref,
        .                                       location.to_locations(),
        .                                       ConstraintCategory::Cast,
        .                                   );
        .                               }
        .           
        .                               CastKind::Pointer(PointerCast::MutToConstPointer) => {
        .                                   let ty_from = match op.ty(body, tcx).kind() {
-- line 2181 ----------------------------------------
-- line 2290 ----------------------------------------
        .                                           ty_elem,
        .                                           ty_to,
        .                                           terr
        .                                       )
        .                                   }
        .                               }
        .           
        .                               CastKind::Misc => {
       12 ( 0.00%)                          let ty_from = op.ty(body, tcx);
       48 ( 0.00%)                          let cast_ty_from = CastTy::from_ty(ty_from);
       36 ( 0.00%)                          let cast_ty_to = CastTy::from_ty(ty);
      156 ( 0.00%)                          match (cast_ty_from, cast_ty_to) {
        .                                       (None, _)
        .                                       | (_, None | Some(CastTy::FnPtr))
        .                                       | (Some(CastTy::Float), Some(CastTy::Ptr(_)))
        .                                       | (Some(CastTy::Ptr(_) | CastTy::FnPtr), Some(CastTy::Float)) => {
        .                                           span_mirbug!(self, rvalue, "Invalid cast {:?} -> {:?}", ty_from, ty,)
        .                                       }
        .                                       (
        .                                           Some(CastTy::Int(_)),
-- line 2309 ----------------------------------------
-- line 2312 ----------------------------------------
        .                                       | (Some(CastTy::Float), Some(CastTy::Int(_) | CastTy::Float))
        .                                       | (Some(CastTy::Ptr(_)), Some(CastTy::Int(_) | CastTy::Ptr(_)))
        .                                       | (Some(CastTy::FnPtr), Some(CastTy::Int(_) | CastTy::Ptr(_))) => (),
        .                                   }
        .                               }
        .                           }
        .                       }
        .           
      742 ( 0.00%)              Rvalue::Ref(region, _borrow_kind, borrowed_place) => {
    4,452 ( 0.00%)                  self.add_reborrow_constraint(&body, location, region, borrowed_place);
        .                       }
        .           
        .                       Rvalue::BinaryOp(
        .                           BinOp::Eq | BinOp::Ne | BinOp::Lt | BinOp::Le | BinOp::Gt | BinOp::Ge,
      222 ( 0.00%)                  box (left, right),
        .                       ) => {
      370 ( 0.00%)                  self.check_operand(left, location);
      370 ( 0.00%)                  self.check_operand(right, location);
        .           
       74 ( 0.00%)                  let ty_left = left.ty(body, tcx);
      222 ( 0.00%)                  match ty_left.kind() {
        .                               // Types with regions are comparable if they have a common super-type.
        .                               ty::RawPtr(_) | ty::FnPtr(_) => {
        .                                   let ty_right = right.ty(body, tcx);
        .                                   let common_ty = self.infcx.next_ty_var(TypeVariableOrigin {
        .                                       kind: TypeVariableOriginKind::MiscVariable,
        .                                       span: body.source_info(location).span,
        .                                   });
        .                                   self.sub_types(
-- line 2340 ----------------------------------------
-- line 2360 ----------------------------------------
        .                                           ty_right,
        .                                           terr
        .                                       )
        .                                   }
        .                               }
        .                               // For types with no regions we can just check that the
        .                               // both operands have the same type.
        .                               ty::Int(_) | ty::Uint(_) | ty::Bool | ty::Char | ty::Float(_)
      370 ( 0.00%)                          if ty_left == right.ty(body, tcx) => {}
        .                               // Other types are compared by trait methods, not by
        .                               // `Rvalue::BinaryOp`.
        .                               _ => span_mirbug!(
        .                                   self,
        .                                   rvalue,
        .                                   "unexpected comparison types {:?} and {:?}",
        .                                   ty_left,
        .                                   right.ty(body, tcx)
        .                               ),
        .                           }
        .                       }
        .           
        .                       Rvalue::Use(operand) | Rvalue::UnaryOp(_, operand) => {
    1,356 ( 0.00%)                  self.check_operand(operand, location);
        .                       }
        .           
        .                       Rvalue::BinaryOp(_, box (left, right))
        .                       | Rvalue::CheckedBinaryOp(_, box (left, right)) => {
       68 ( 0.00%)                  self.check_operand(left, location);
       34 ( 0.00%)                  self.check_operand(right, location);
        .                       }
        .           
        .                       Rvalue::AddressOf(..)
        .                       | Rvalue::ThreadLocalRef(..)
        .                       | Rvalue::Len(..)
        .                       | Rvalue::Discriminant(..) => {}
        .                   }
   95,608 ( 0.00%)      }
        .           
        .               /// If this rvalue supports a user-given type annotation, then
        .               /// extract and return it. This represents the final type of the
        .               /// rvalue and will be unified with the inferred type.
        .               fn rvalue_user_ty(&self, rvalue: &Rvalue<'tcx>) -> Option<UserTypeAnnotationIndex> {
   50,584 ( 0.00%)          match rvalue {
        .                       Rvalue::Use(_)
        .                       | Rvalue::ThreadLocalRef(_)
        .                       | Rvalue::Repeat(..)
        .                       | Rvalue::Ref(..)
        .                       | Rvalue::AddressOf(..)
        .                       | Rvalue::Len(..)
        .                       | Rvalue::Cast(..)
        .                       | Rvalue::ShallowInitBox(..)
        .                       | Rvalue::BinaryOp(..)
        .                       | Rvalue::CheckedBinaryOp(..)
        .                       | Rvalue::NullaryOp(..)
        .                       | Rvalue::UnaryOp(..)
        .                       | Rvalue::Discriminant(..) => None,
        .           
   33,042 ( 0.00%)              Rvalue::Aggregate(aggregate, _) => match **aggregate {
      492 ( 0.00%)                  AggregateKind::Adt(_, _, _, user_ty, _) => user_ty,
        .                           AggregateKind::Array(_) => None,
        .                           AggregateKind::Tuple => None,
        .                           AggregateKind::Closure(_, _) => None,
        .                           AggregateKind::Generator(_, _, _) => None,
        .                       },
        .                   }
        .               }
        .           
-- line 2426 ----------------------------------------
-- line 2431 ----------------------------------------
        .                   aggregate_kind: &AggregateKind<'tcx>,
        .                   operands: &[Operand<'tcx>],
        .                   location: Location,
        .               ) {
        .                   let tcx = self.tcx();
        .           
        .                   self.prove_aggregate_predicates(aggregate_kind, location);
        .           
   11,014 ( 0.00%)          if *aggregate_kind == AggregateKind::Tuple {
        .                       // tuple rvalue field type is always the type of the op. Nothing to check here.
        .                       return;
        .                   }
        .           
   39,871 ( 0.00%)          for (i, operand) in operands.iter().enumerate() {
       27 ( 0.00%)              let field_ty = match self.aggregate_field_ty(aggregate_kind, i, location) {
   79,742 ( 0.00%)                  Ok(field_ty) => field_ty,
        .                           Err(FieldAccessError::OutOfRange { field_count }) => {
        .                               span_mirbug!(
        .                                   self,
        .                                   rvalue,
        .                                   "accessed field #{} but variant only has {}",
        .                                   i,
        .                                   field_count
        .                               );
        .                               continue;
        .                           }
        .                       };
        .                       let operand_ty = operand.ty(body, tcx);
  239,226 ( 0.01%)              let operand_ty = self.normalize(operand_ty, location);
        .           
   79,742 ( 0.00%)              if let Err(terr) = self.sub_types(
        .                           operand_ty,
   39,871 ( 0.00%)                  field_ty,
        .                           location.to_locations(),
        .                           ConstraintCategory::Boring,
        .                       ) {
        .                           span_mirbug!(
        .                               self,
        .                               rvalue,
        .                               "{:?} is not a subtype of {:?}: {:?}",
        .                               operand_ty,
-- line 2471 ----------------------------------------
-- line 2486 ----------------------------------------
        .               fn add_reborrow_constraint(
        .                   &mut self,
        .                   body: &Body<'tcx>,
        .                   location: Location,
        .                   borrow_region: ty::Region<'tcx>,
        .                   borrowed_place: &Place<'tcx>,
        .               ) {
        .                   // These constraints are only meaningful during borrowck:
      742 ( 0.00%)          let BorrowCheckContext { borrow_set, location_table, all_facts, constraints, .. } =
        .                       self.borrowck_context;
        .           
        .                   // In Polonius mode, we also push a `loan_issued_at` fact
        .                   // linking the loan to the region (in some cases, though,
        .                   // there is no loan associated with this borrow expression --
        .                   // that occurs when we are borrowing an unsafe place, for
        .                   // example).
    4,452 ( 0.00%)          if let Some(all_facts) = all_facts {
        .                       let _prof_timer = self.infcx.tcx.prof.generic_activity("polonius_fact_generation");
        .                       if let Some(borrow_index) = borrow_set.get_index_of(&location) {
        .                           let region_vid = borrow_region.to_region_vid();
        .                           all_facts.loan_issued_at.push((
        .                               region_vid,
        .                               borrow_index,
        .                               location_table.mid_index(location),
        .                           ));
-- line 2510 ----------------------------------------
-- line 2516 ----------------------------------------
        .                   // *p`, where the `p` has type `&'b mut Foo`, for example, we
        .                   // need to ensure that `'b: 'a`.
        .           
        .                   debug!(
        .                       "add_reborrow_constraint({:?}, {:?}, {:?})",
        .                       location, borrow_region, borrowed_place
        .                   );
        .           
      742 ( 0.00%)          let mut cursor = borrowed_place.projection.as_ref();
      742 ( 0.00%)          let tcx = self.infcx.tcx;
    1,484 ( 0.00%)          let field = path_utils::is_upvar_field_projection(
        .                       tcx,
    1,484 ( 0.00%)              &self.borrowck_context.upvars,
        .                       borrowed_place.as_ref(),
        .                       body,
        .                   );
    1,484 ( 0.00%)          let category = if let Some(field) = field {
       45 ( 0.00%)              let var_hir_id = self.borrowck_context.upvars[field.index()].place.get_root_variable();
        .                       // FIXME(project-rfc-2229#8): Use Place for better diagnostics
        .                       ConstraintCategory::ClosureUpvar(var_hir_id)
        .                   } else {
        .                       ConstraintCategory::Boring
        .                   };
        .           
    4,138 ( 0.00%)          while let [proj_base @ .., elem] = cursor {
        .                       cursor = proj_base;
        .           
        .                       debug!("add_reborrow_constraint - iteration {:?}", elem);
        .           
    4,297 ( 0.00%)              match elem {
        .                           ProjectionElem::Deref => {
    1,162 ( 0.00%)                      let base_ty = Place::ty_from(borrowed_place.local, proj_base, body, tcx).ty;
        .           
        .                               debug!("add_reborrow_constraint - base_ty = {:?}", base_ty);
    2,905 ( 0.00%)                      match base_ty.kind() {
        .                                   ty::Ref(ref_region, _, mutbl) => {
      581 ( 0.00%)                              constraints.outlives_constraints.push(OutlivesConstraint {
    1,162 ( 0.00%)                                  sup: ref_region.to_region_vid(),
        .                                           sub: borrow_region.to_region_vid(),
        .                                           locations: location.to_locations(),
        .                                           category,
        .                                           variance_info: ty::VarianceDiagInfo::default(),
        .                                       });
        .           
    1,693 ( 0.00%)                              match mutbl {
        .                                           hir::Mutability::Not => {
        .                                               // Immutable reference. We don't need the base
        .                                               // to be valid for the entire lifetime of
        .                                               // the borrow.
        .                                               break;
        .                                           }
        .                                           hir::Mutability::Mut => {
        .                                               // Mutable reference. We *do* need the base
-- line 2568 ----------------------------------------
-- line 2617 ----------------------------------------
        .               ) {
        .                   let tcx = self.tcx();
        .           
        .                   debug!(
        .                       "prove_aggregate_predicates(aggregate_kind={:?}, location={:?})",
        .                       aggregate_kind, location
        .                   );
        .           
  121,703 ( 0.00%)          let (def_id, instantiated_predicates) = match aggregate_kind {
        .                       AggregateKind::Adt(adt_did, _, substs, _, _) => {
    1,312 ( 0.00%)                  (*adt_did, tcx.predicates_of(*adt_did).instantiate(tcx, substs))
        .                       }
        .           
        .                       // For closures, we have some **extra requirements** we
        .                       //
        .                       // have to check. In particular, in their upvars and
        .                       // signatures, closures often reference various regions
        .                       // from the surrounding function -- we call those the
        .                       // closure's free regions. When we borrow-check (and hence
-- line 2635 ----------------------------------------
-- line 2644 ----------------------------------------
        .                       //
        .                       // Despite the opacity of the previous parapgrah, this is
        .                       // actually relatively easy to understand in terms of the
        .                       // desugaring. A closure gets desugared to a struct, and
        .                       // these extra requirements are basically like where
        .                       // clauses on the struct.
        .                       AggregateKind::Closure(def_id, substs)
        .                       | AggregateKind::Generator(def_id, substs, _) => {
      228 ( 0.00%)                  (*def_id, self.prove_closure_bounds(tcx, def_id.expect_local(), substs, location))
        .                       }
        .           
        .                       AggregateKind::Array(_) | AggregateKind::Tuple => {
   21,662 ( 0.00%)                  (CRATE_DEF_ID.to_def_id(), ty::InstantiatedPredicates::empty())
        .                       }
        .                   };
        .           
   11,014 ( 0.00%)          self.normalize_and_prove_instantiated_predicates(
        .                       def_id,
   33,042 ( 0.00%)              instantiated_predicates,
        .                       location.to_locations(),
        .                   );
        .               }
        .           
      171 ( 0.00%)      fn prove_closure_bounds(
        .                   &mut self,
        .                   tcx: TyCtxt<'tcx>,
        .                   def_id: LocalDefId,
        .                   substs: SubstsRef<'tcx>,
        .                   location: Location,
        .               ) -> ty::InstantiatedPredicates<'tcx> {
       57 ( 0.00%)          if let Some(ref closure_region_requirements) = tcx.mir_borrowck(def_id).closure_requirements
        .                   {
        3 ( 0.00%)              let closure_constraints = QueryRegionConstraints {
       18 ( 0.00%)                  outlives: closure_region_requirements.apply_requirements(
        .                               tcx,
        .                               def_id.to_def_id(),
        .                               substs,
        .                           ),
        .           
        .                           // Presently, closures never propagate member
        .                           // constraints to their parents -- they are enforced
        .                           // locally.  This is largely a non-issue as member
-- line 2685 ----------------------------------------
-- line 2688 ----------------------------------------
        .                           // closures.
        .                           member_constraints: vec![],
        .                       };
        .           
        .                       let bounds_mapping = closure_constraints
        .                           .outlives
        .                           .iter()
        .                           .enumerate()
        9 ( 0.00%)                  .filter_map(|(idx, constraint)| {
        .                               let ty::OutlivesPredicate(k1, r2) =
        6 ( 0.00%)                          constraint.no_bound_vars().unwrap_or_else(|| {
        .                                       bug!("query_constraint {:?} contained bound vars", constraint,);
        .                                   });
        .           
        .                               match k1.unpack() {
        .                                   GenericArgKind::Lifetime(r1) => {
        .                                       // constraint is r1: r2
        .                                       let r1_vid = self.borrowck_context.universal_regions.to_region_vid(r1);
        .                                       let r2_vid = self.borrowck_context.universal_regions.to_region_vid(r2);
        .                                       let outlives_requirements =
        .                                           &closure_region_requirements.outlives_requirements[idx];
        .                                       Some((
        .                                           (r1_vid, r2_vid),
        3 ( 0.00%)                                  (outlives_requirements.category, outlives_requirements.blame_span),
        .                                       ))
        .                                   }
        .                                   GenericArgKind::Type(_) | GenericArgKind::Const(_) => None,
        .                               }
        .                           })
        .                           .collect();
        .           
        .                       let existing = self
        .                           .borrowck_context
        .                           .constraints
        .                           .closure_bounds_mapping
        .                           .insert(location, bounds_mapping);
        3 ( 0.00%)              assert!(existing.is_none(), "Multiple closures at the same location.");
        .           
        .                       self.push_region_constraints(
        .                           location.to_locations(),
        .                           ConstraintCategory::ClosureBounds,
        .                           &closure_constraints,
        .                       );
        .                   }
        .           
       57 ( 0.00%)          tcx.predicates_of(def_id).instantiate(tcx, substs)
      152 ( 0.00%)      }
        .           
    2,805 ( 0.00%)      #[instrument(skip(self, body), level = "debug")]
        .               fn typeck_mir(&mut self, body: &Body<'tcx>) {
      748 ( 0.00%)          self.last_span = body.span;
        .                   debug!(?body.span);
        .           
        .                   for (local, local_decl) in body.local_decls.iter_enumerated() {
        .                       self.check_local(&body, local, local_decl);
        .                   }
        .           
        .                   for (block, block_data) in body.basic_blocks().iter_enumerated() {
        .                       let mut location = Location { block, statement_index: 0 };
        .                       for stmt in &block_data.statements {
  230,720 ( 0.01%)                  if !stmt.source_info.span.is_dummy() {
  230,708 ( 0.01%)                      self.last_span = stmt.source_info.span;
        .                           }
        .                           self.check_stmt(body, stmt, location);
   22,214 ( 0.00%)                  location.statement_index += 1;
        .                       }
        .           
        .                       self.check_terminator(&body, block_data.terminator(), location);
        .                       self.check_iscleanup(&body, block_data);
        .                   }
        .               }
        .           }
        .           
-- line 2760 ----------------------------------------
-- line 2765 ----------------------------------------
        .           impl NormalizeLocation for Locations {
        .               fn to_locations(self) -> Locations {
        .                   self
        .               }
        .           }
        .           
        .           impl NormalizeLocation for Location {
        .               fn to_locations(self) -> Locations {
  378,712 ( 0.01%)          Locations::Single(self)
        .               }
        .           }
        .           
        .           #[derive(Debug, Default)]
        .           struct ObligationAccumulator<'tcx> {
        .               obligations: PredicateObligations<'tcx>,
        .           }
        .           
-- line 2781 ----------------------------------------

  331,654 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/type_check/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 91 ----------------------------------------
        .           mod late;
        .           mod macros;
        .           
        .           enum Weak {
        .               Yes,
        .               No,
        .           }
        .           
   30,978 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Debug)]
        .           pub enum Determinacy {
        .               Determined,
        .               Undetermined,
        .           }
        .           
        .           impl Determinacy {
        .               fn determined(determined: bool) -> Determinacy {
        .                   if determined { Determinacy::Determined } else { Determinacy::Undetermined }
   20,652 ( 0.00%)      }
        .           }
        .           
        .           /// A specific scope in which a name can be looked up.
        .           /// This enum is currently used only for early resolution (imports and macros),
        .           /// but not for late resolution yet.
        .           #[derive(Clone, Copy)]
        .           enum Scope<'a> {
        .               DeriveHelpers(LocalExpnId),
-- line 116 ----------------------------------------
-- line 157 ----------------------------------------
        .               macro_rules: MacroRulesScopeRef<'a>,
        .               derives: &'a [ast::Path],
        .           }
        .           
        .           impl<'a> ParentScope<'a> {
        .               /// Creates a parent scope with the passed argument used as the module scope component,
        .               /// and other scope components set to default empty values.
        .               pub fn module(module: Module<'a>, resolver: &Resolver<'a>) -> ParentScope<'a> {
        8 ( 0.00%)          ParentScope {
        .                       module,
        .                       expansion: LocalExpnId::ROOT,
    1,138 ( 0.00%)              macro_rules: resolver.arenas.alloc_macro_rules_scope(MacroRulesScope::Empty),
        .                       derives: &[],
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Copy, Debug, Clone)]
        .           enum ImplTraitContext {
        .               Existential,
-- line 176 ----------------------------------------
-- line 303 ----------------------------------------
        .           
        .               fn names_to_string(segments: &[Segment]) -> String {
        .                   names_to_string(&segments.iter().map(|seg| seg.ident.name).collect::<Vec<_>>())
        .               }
        .           }
        .           
        .           impl<'a> From<&'a ast::PathSegment> for Segment {
        .               fn from(seg: &'a ast::PathSegment) -> Segment {
       50 ( 0.00%)          Segment { ident: seg.ident, id: Some(seg.id), has_generic_args: seg.args.is_some() }
        .               }
        .           }
        .           
        .           struct UsePlacementFinder {
        .               target_module: NodeId,
        .               span: Option<Span>,
        .               found_use: bool,
        .           }
-- line 319 ----------------------------------------
-- line 391 ----------------------------------------
        .           #[derive(Debug)]
        .           enum LexicalScopeBinding<'a> {
        .               Item(&'a NameBinding<'a>),
        .               Res(Res),
        .           }
        .           
        .           impl<'a> LexicalScopeBinding<'a> {
        .               fn res(self) -> Res {
      256 ( 0.00%)          match self {
        .                       LexicalScopeBinding::Item(binding) => binding.res(),
      384 ( 0.00%)              LexicalScopeBinding::Res(res) => res,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Copy, Clone, Debug)]
        .           enum ModuleOrUniformRoot<'a> {
        .               /// Regular module.
        .               Module(Module<'a>),
-- line 409 ----------------------------------------
-- line 418 ----------------------------------------
        .               /// Virtual module that denotes resolution in current scope.
        .               /// Used only for resolving single-segment imports. The reason it exists is that import paths
        .               /// are always split into two parts, the first of which should be some kind of module.
        .               CurrentScope,
        .           }
        .           
        .           impl ModuleOrUniformRoot<'_> {
        .               fn same_def(lhs: Self, rhs: Self) -> bool {
       40 ( 0.00%)          match (lhs, rhs) {
        .                       (ModuleOrUniformRoot::Module(lhs), ModuleOrUniformRoot::Module(rhs)) => {
        .                           ptr::eq(lhs, rhs)
        .                       }
        .                       (
        .                           ModuleOrUniformRoot::CrateRootAndExternPrelude,
        .                           ModuleOrUniformRoot::CrateRootAndExternPrelude,
        .                       )
        .                       | (ModuleOrUniformRoot::ExternPrelude, ModuleOrUniformRoot::ExternPrelude)
-- line 434 ----------------------------------------
-- line 491 ----------------------------------------
        .           /// A key that identifies a binding in a given `Module`.
        .           ///
        .           /// Multiple bindings in the same module can have the same key (in a valid
        .           /// program) if all but one of them come from glob imports.
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
        .           struct BindingKey {
        .               /// The identifier for the binding, aways the `normalize_to_macros_2_0` version of the
        .               /// identifier.
  393,696 ( 0.01%)      ident: Ident,
  130,892 ( 0.00%)      ns: Namespace,
        .               /// 0 if ident is not `_`, otherwise a value that's unique to the specific
        .               /// `_` in the expanded AST that introduced this binding.
   97,914 ( 0.00%)      disambiguator: u32,
        .           }
        .           
        .           type Resolutions<'a> = RefCell<FxIndexMap<BindingKey, &'a RefCell<NameResolution<'a>>>>;
        .           
        .           /// One node in the tree of modules.
        .           ///
        .           /// Note that a "module" in resolve is broader than a `mod` that you declare in Rust code. It may be one of these:
        .           ///
-- line 511 ----------------------------------------
-- line 551 ----------------------------------------
        .           impl<'a> ModuleData<'a> {
        .               fn new(
        .                   parent: Option<Module<'a>>,
        .                   kind: ModuleKind,
        .                   expansion: ExpnId,
        .                   span: Span,
        .                   no_implicit_prelude: bool,
        .               ) -> Self {
    2,569 ( 0.00%)          let is_foreign = match kind {
        .                       ModuleKind::Def(_, def_id, _) => !def_id.is_local(),
        .                       ModuleKind::Block(_) => false,
        .                   };
    8,441 ( 0.00%)          ModuleData {
        .                       parent,
        .                       kind,
        .                       lazy_resolutions: Default::default(),
        .                       populate_on_access: Cell::new(is_foreign),
        .                       unexpanded_invocations: Default::default(),
        .                       no_implicit_prelude,
        .                       glob_importers: RefCell::new(Vec::new()),
        .                       globs: RefCell::new(Vec::new()),
        .                       traits: RefCell::new(None),
        .                       span,
        .                       expansion,
        .                   }
        .               }
        .           
       91 ( 0.00%)      fn for_each_child<R, F>(&'a self, resolver: &mut R, mut f: F)
        .               where
        .                   R: AsMut<Resolver<'a>>,
        .                   F: FnMut(&mut R, Ident, Namespace, &'a NameBinding<'a>),
        .               {
       40 ( 0.00%)          for (key, name_resolution) in resolver.as_mut().resolutions(self).borrow().iter() {
    2,908 ( 0.00%)              if let Some(binding) = name_resolution.borrow().binding {
      363 ( 0.00%)                  f(resolver, key.ident, key.ns, binding);
        .                       }
        .                   }
       72 ( 0.00%)      }
        .           
        .               /// This modifies `self` in place. The traits will be stored in `self.traits`.
        .               fn ensure_traits<R>(&'a self, resolver: &mut R)
        .               where
        .                   R: AsMut<Resolver<'a>>,
        .               {
        .                   let mut traits = self.traits.borrow_mut();
   20,564 ( 0.00%)          if traits.is_none() {
        .                       let mut collected_traits = Vec::new();
        .                       self.for_each_child(resolver, |_, name, ns, binding| {
      149 ( 0.00%)                  if ns != TypeNS {
        .                               return;
        .                           }
      264 ( 0.00%)                  if let Res::Def(DefKind::Trait | DefKind::TraitAlias, _) = binding.res() {
        .                               collected_traits.push((name, binding))
        .                           }
        .                       });
       30 ( 0.00%)              *traits = Some(collected_traits.into_boxed_slice());
        .                   }
        .               }
        .           
        .               fn res(&self) -> Option<Res> {
    3,250 ( 0.00%)          match self.kind {
    5,137 ( 0.00%)              ModuleKind::Def(kind, def_id, _) => Some(Res::Def(kind, def_id)),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               // Public for rustdoc.
        .               pub fn def_id(&self) -> DefId {
        .                   self.opt_def_id().expect("`ModuleData::def_id` is called on a block module")
        .               }
        .           
        .               fn opt_def_id(&self) -> Option<DefId> {
    1,460 ( 0.00%)          match self.kind {
        .                       ModuleKind::Def(_, def_id, _) => Some(def_id),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               // `self` resolves to the first module ancestor that `is_normal`.
        .               fn is_normal(&self) -> bool {
   50,555 ( 0.00%)          matches!(self.kind, ModuleKind::Def(DefKind::Mod, _, _))
        .               }
        .           
        .               fn is_trait(&self) -> bool {
        2 ( 0.00%)          matches!(self.kind, ModuleKind::Def(DefKind::Trait, _, _))
        .               }
        .           
        .               fn nearest_item_scope(&'a self) -> Module<'a> {
   84,215 ( 0.00%)          match self.kind {
        .                       ModuleKind::Def(DefKind::Enum | DefKind::Trait, ..) => {
        .                           self.parent.expect("enum or trait module without a parent")
        .                       }
        .                       _ => self,
        .                   }
        .               }
        .           
        .               /// The [`DefId`] of the nearest `mod` item ancestor (which may be this module).
        .               /// This may be the crate root.
   11,618 ( 0.00%)      fn nearest_parent_mod(&self) -> DefId {
   46,180 ( 0.00%)          match self.kind {
   22,944 ( 0.00%)              ModuleKind::Def(DefKind::Mod, def_id, _) => def_id,
      292 ( 0.00%)              _ => self.parent.expect("non-root module without parent").nearest_parent_mod(),
        .                   }
   23,236 ( 0.00%)      }
        .           
        .               fn is_ancestor_of(&self, mut other: &Self) -> bool {
        .                   while !ptr::eq(self, other) {
        .                       if let Some(parent) = other.parent {
        .                           other = parent;
        .                       } else {
        .                           return false;
        .                       }
-- line 662 ----------------------------------------
-- line 773 ----------------------------------------
        .               b1: &'a NameBinding<'a>,
        .               b2: &'a NameBinding<'a>,
        .               misc1: AmbiguityErrorMisc,
        .               misc2: AmbiguityErrorMisc,
        .           }
        .           
        .           impl<'a> NameBinding<'a> {
        .               fn module(&self) -> Option<Module<'a>> {
1,498,875 ( 0.04%)          match self.kind {
  278,264 ( 0.01%)              NameBindingKind::Module(module) => Some(module),
   10,974 ( 0.00%)              NameBindingKind::Import { binding, .. } => binding.module(),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               fn res(&self) -> Res {
  119,878 ( 0.00%)          match self.kind {
   70,407 ( 0.00%)              NameBindingKind::Res(res, _) => res,
    1,480 ( 0.00%)              NameBindingKind::Module(module) => module.res().unwrap(),
      221 ( 0.00%)              NameBindingKind::Import { binding, .. } => binding.res(),
        .                   }
        .               }
        .           
        .               fn is_ambiguity(&self) -> bool {
       55 ( 0.00%)          self.ambiguity.is_some()
       58 ( 0.00%)              || match self.kind {
       26 ( 0.00%)                  NameBindingKind::Import { binding, .. } => binding.is_ambiguity(),
        .                           _ => false,
        .                       }
        .               }
        .           
        .               fn is_possibly_imported_variant(&self) -> bool {
        .                   match self.kind {
        .                       NameBindingKind::Import { binding, .. } => binding.is_possibly_imported_variant(),
        .                       NameBindingKind::Res(
-- line 807 ----------------------------------------
-- line 822 ----------------------------------------
        .                           kind: ModuleKind::Def(DefKind::Mod, def_id, _),
        .                           ..
        .                       }) => def_id.index == CRATE_DEF_INDEX,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               fn is_import(&self) -> bool {
      242 ( 0.00%)          matches!(self.kind, NameBindingKind::Import { .. })
        .               }
        .           
        .               fn is_glob_import(&self) -> bool {
    4,400 ( 0.00%)          match self.kind {
       31 ( 0.00%)              NameBindingKind::Import { import, .. } => import.is_glob(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               fn is_importable(&self) -> bool {
       20 ( 0.00%)          !matches!(
        .                       self.res(),
        .                       Res::Def(DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy, _)
        .                   )
        .               }
        .           
        .               fn is_macro_def(&self) -> bool {
       96 ( 0.00%)          matches!(self.kind, NameBindingKind::Res(Res::Def(DefKind::Macro(..), _), _))
        .               }
        .           
        .               fn macro_kind(&self) -> Option<MacroKind> {
        .                   self.res().macro_kind()
        .               }
        .           
        .               // Suppose that we resolved macro invocation with `invoc_parent_expansion` to binding `binding`
        .               // at some expansion round `max(invoc, binding)` when they both emerged from macros.
-- line 856 ----------------------------------------
-- line 1065 ----------------------------------------
        .               /// they are declared in the static array generated by proc_macro_harness.
        .               proc_macros: Vec<NodeId>,
        .               confused_type_with_std_module: FxHashMap<Span, Span>,
        .           
        .               access_levels: AccessLevels,
        .           }
        .           
        .           /// Nothing really interesting here; it just provides memory for the rest of the crate.
        7 ( 0.00%)  #[derive(Default)]
        .           pub struct ResolverArenas<'a> {
        .               modules: TypedArena<ModuleData<'a>>,
        .               local_modules: RefCell<Vec<Module<'a>>>,
        .               imports: TypedArena<Import<'a>>,
        .               name_resolutions: TypedArena<RefCell<NameResolution<'a>>>,
        .               ast_paths: TypedArena<ast::Path>,
        .               dropless: DroplessArena,
        .           }
        .           
        .           impl<'a> ResolverArenas<'a> {
    4,771 ( 0.00%)      fn new_module(
        .                   &'a self,
        .                   parent: Option<Module<'a>>,
        .                   kind: ModuleKind,
        .                   expn_id: ExpnId,
        .                   span: Span,
        .                   no_implicit_prelude: bool,
        .                   module_map: &mut FxHashMap<DefId, Module<'a>>,
        .               ) -> Module<'a> {
        .                   let module =
        .                       self.modules.alloc(ModuleData::new(parent, kind, expn_id, span, no_implicit_prelude));
        .                   let def_id = module.opt_def_id();
    1,101 ( 0.00%)          if def_id.map_or(true, |def_id| def_id.is_local()) {
        .                       self.local_modules.borrow_mut().push(module);
        .                   }
      367 ( 0.00%)          if let Some(def_id) = def_id {
        .                       module_map.insert(def_id, module);
        .                   }
        .                   module
    3,303 ( 0.00%)      }
        .               fn local_modules(&'a self) -> std::cell::Ref<'a, Vec<Module<'a>>> {
        .                   self.local_modules.borrow()
        .               }
        .               fn alloc_name_binding(&'a self, name_binding: NameBinding<'a>) -> &'a NameBinding<'a> {
        .                   self.dropless.alloc(name_binding)
        .               }
       14 ( 0.00%)      fn alloc_import(&'a self, import: Import<'a>) -> &'a Import<'_> {
      268 ( 0.00%)          self.imports.alloc(import)
       14 ( 0.00%)      }
        .               fn alloc_name_resolution(&'a self) -> &'a RefCell<NameResolution<'a>> {
    1,888 ( 0.00%)          self.name_resolutions.alloc(Default::default())
        .               }
        .               fn alloc_macro_rules_scope(&'a self, scope: MacroRulesScope<'a>) -> MacroRulesScopeRef<'a> {
        .                   PtrKey(self.dropless.alloc(Cell::new(scope)))
        .               }
        .               fn alloc_macro_rules_binding(
        .                   &'a self,
        .                   binding: MacroRulesBinding<'a>,
        .               ) -> &'a MacroRulesBinding<'a> {
-- line 1122 ----------------------------------------
-- line 1133 ----------------------------------------
        .           impl<'a> AsMut<Resolver<'a>> for Resolver<'a> {
        .               fn as_mut(&mut self) -> &mut Resolver<'a> {
        .                   self
        .               }
        .           }
        .           
        .           impl<'a, 'b> DefIdTree for &'a Resolver<'b> {
        .               fn parent(self, id: DefId) -> Option<DefId> {
      248 ( 0.00%)          match id.as_local() {
        .                       Some(id) => self.definitions.def_key(id).parent,
        .                       None => self.cstore().def_key(id).parent,
        .                   }
        .                   .map(|index| DefId { index, ..id })
        .               }
        .           }
        .           
        .           /// This interface is used through the AST→HIR step, to embed full paths into the HIR. After that
        .           /// the resolver is no longer needed as all the relevant information is inline.
        .           impl ResolverAstLowering for Resolver<'_> {
       90 ( 0.00%)      fn def_key(&mut self, id: DefId) -> DefKey {
       54 ( 0.00%)          if let Some(id) = id.as_local() {
        .                       self.definitions().def_key(id)
        .                   } else {
    3,700 ( 0.00%)              self.cstore().def_key(id)
        .                   }
       72 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn def_span(&self, id: LocalDefId) -> Span {
        .                   self.definitions.def_span(id)
        .               }
        .           
   61,446 ( 0.00%)      fn item_generics_num_lifetimes(&self, def_id: DefId) -> usize {
   30,381 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
   10,070 ( 0.00%)              self.item_generics_num_lifetimes[&def_id]
        .                   } else {
    1,368 ( 0.00%)              self.cstore().item_generics_num_lifetimes(def_id, self.session)
        .                   }
   40,280 ( 0.00%)      }
        .           
   20,206 ( 0.00%)      fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>> {
   10,103 ( 0.00%)          self.legacy_const_generic_args(expr)
   30,309 ( 0.00%)      }
        .           
   33,955 ( 0.00%)      fn get_partial_res(&self, id: NodeId) -> Option<PartialRes> {
        .                   self.partial_res_map.get(&id).cloned()
  101,865 ( 0.00%)      }
        .           
       64 ( 0.00%)      fn get_import_res(&mut self, id: NodeId) -> PerNS<Option<Res>> {
       16 ( 0.00%)          self.import_res_map.get(&id).cloned().unwrap_or_default()
       80 ( 0.00%)      }
        .           
        .               fn get_label_res(&mut self, id: NodeId) -> Option<NodeId> {
        .                   self.label_res_map.get(&id).cloned()
        .               }
        .           
        .               fn definitions(&mut self) -> &mut Definitions {
      216 ( 0.00%)          &mut self.definitions
      216 ( 0.00%)      }
        .           
    2,084 ( 0.00%)      fn create_stable_hashing_context(&self) -> StableHashingContext<'_> {
    3,377 ( 0.00%)          StableHashingContext::new(self.session, &self.definitions, self.crate_loader.cstore())
    2,605 ( 0.00%)      }
        .           
        .               fn lint_buffer(&mut self) -> &mut LintBuffer {
        .                   &mut self.lint_buffer
        .               }
        .           
        .               fn next_node_id(&mut self) -> NodeId {
        .                   self.next_node_id()
        .               }
        .           
  396,224 ( 0.01%)      fn take_trait_map(&mut self, node: NodeId) -> Option<Vec<TraitCandidate>> {
        .                   self.trait_map.remove(&node)
  396,224 ( 0.01%)      }
        .           
  397,086 ( 0.01%)      fn opt_local_def_id(&self, node: NodeId) -> Option<LocalDefId> {
    2,269 ( 0.00%)          self.node_id_to_def_id.get(&node).copied()
  397,086 ( 0.01%)      }
        .           
    1,096 ( 0.00%)      fn local_def_id(&self, node: NodeId) -> LocalDefId {
        .                   self.opt_local_def_id(node).unwrap_or_else(|| panic!("no entry for node id: `{:?}`", node))
    1,096 ( 0.00%)      }
        .           
        .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash {
        .                   match def_id.as_local() {
        .                       Some(def_id) => self.definitions.def_path_hash(def_id),
        .                       None => self.cstore().def_path_hash(def_id),
        .                   }
        .               }
        .           
        .               /// Adds a definition with a parent definition.
    5,595 ( 0.00%)      fn create_def(
        .                   &mut self,
        .                   parent: LocalDefId,
        .                   node_id: ast::NodeId,
        .                   data: DefPathData,
        .                   expn_id: ExpnId,
        .                   span: Span,
        .               ) -> LocalDefId {
      746 ( 0.00%)          assert!(
      746 ( 0.00%)              !self.node_id_to_def_id.contains_key(&node_id),
        .                       "adding a def'n for node-id {:?} and data {:?} but a previous def'n exists: {:?}",
        .                       node_id,
        .                       data,
        .                       self.definitions.def_key(self.node_id_to_def_id[&node_id]),
        .                   );
        .           
        .                   // Find the next free disambiguator for this key.
      373 ( 0.00%)          let next_disambiguator = &mut self.next_disambiguator;
        .                   let next_disambiguator = |parent, data| {
    1,865 ( 0.00%)              let next_disamb = next_disambiguator.entry((parent, data)).or_insert(0);
      373 ( 0.00%)              let disambiguator = *next_disamb;
      373 ( 0.00%)              *next_disamb = next_disamb.checked_add(1).expect("disambiguator overflow");
        .                       disambiguator
        .                   };
        .           
    3,730 ( 0.00%)          let def_id = self.definitions.create_def(parent, data, expn_id, next_disambiguator, span);
        .           
        .                   // Some things for which we allocate `LocalDefId`s don't correspond to
        .                   // anything in the AST, so they don't have a `NodeId`. For these cases
        .                   // we don't need a mapping from `NodeId` to `LocalDefId`.
    1,119 ( 0.00%)          if node_id != ast::DUMMY_NODE_ID {
        .                       debug!("create_def: def_id_to_node_id[{:?}] <-> {:?}", def_id, node_id);
        .                       self.node_id_to_def_id.insert(node_id, def_id);
        .                   }
    1,119 ( 0.00%)          assert_eq!(self.def_id_to_node_id.push(node_id), def_id);
        .           
        .                   def_id
    3,357 ( 0.00%)      }
        .           }
        .           
        .           impl<'a> Resolver<'a> {
       16 ( 0.00%)      pub fn new(
        .                   session: &'a Session,
        .                   krate: &Crate,
        .                   crate_name: &str,
        .                   metadata_loader: Box<MetadataLoaderDyn>,
        .                   arenas: &'a ResolverArenas<'a>,
        .               ) -> Resolver<'a> {
        .                   let root_def_id = CRATE_DEF_ID.to_def_id();
        .                   let mut module_map = FxHashMap::default();
       14 ( 0.00%)          let graph_root = arenas.new_module(
        .                       None,
        .                       ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty),
        1 ( 0.00%)              ExpnId::root(),
        1 ( 0.00%)              krate.span,
        2 ( 0.00%)              session.contains_name(&krate.attrs, sym::no_implicit_prelude),
        .                       &mut module_map,
        .                   );
       12 ( 0.00%)          let empty_module = arenas.new_module(
        .                       None,
        .                       ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty),
        1 ( 0.00%)              ExpnId::root(),
        .                       DUMMY_SP,
        .                       true,
        .                       &mut FxHashMap::default(),
        .                   );
        .           
        4 ( 0.00%)          let definitions = Definitions::new(session.local_stable_crate_id(), krate.span);
        2 ( 0.00%)          let root = definitions.get_root_def();
        .           
        .                   let mut visibilities = FxHashMap::default();
        .                   visibilities.insert(CRATE_DEF_ID, ty::Visibility::Public);
        .           
        .                   let mut def_id_to_node_id = IndexVec::default();
        2 ( 0.00%)          assert_eq!(def_id_to_node_id.push(CRATE_NODE_ID), root);
        .                   let mut node_id_to_def_id = FxHashMap::default();
        .                   node_id_to_def_id.insert(CRATE_NODE_ID, root);
        .           
        .                   let mut invocation_parents = FxHashMap::default();
        .                   invocation_parents.insert(LocalExpnId::ROOT, (root, ImplTraitContext::Existential));
        .           
        3 ( 0.00%)          let mut extern_prelude: FxHashMap<Ident, ExternPreludeEntry<'_>> = session
        .                       .opts
        .                       .externs
        .                       .iter()
        .                       .filter(|(_, entry)| entry.add_prelude)
        .                       .map(|(name, _)| (Ident::from_str(name), Default::default()))
        .                       .collect();
        .           
        9 ( 0.00%)          if !session.contains_name(&krate.attrs, sym::no_core) {
        .                       extern_prelude.insert(Ident::with_dummy_span(sym::core), Default::default());
        7 ( 0.00%)              if !session.contains_name(&krate.attrs, sym::no_std) {
        .                           extern_prelude.insert(Ident::with_dummy_span(sym::std), Default::default());
        .                       }
        .                   }
        .           
        8 ( 0.00%)          let (registered_attrs, registered_tools) =
        4 ( 0.00%)              macros::registered_attrs_and_tools(session, &krate.attrs);
        .           
        .                   let features = session.features_untracked();
        .           
      237 ( 0.00%)          let mut resolver = Resolver {
        .                       session,
        .           
        2 ( 0.00%)              definitions,
        .           
        .                       // The outermost module has def ID 0; this is not reflected in the
        .                       // AST.
        .                       graph_root,
        .                       prelude: None,
        4 ( 0.00%)              extern_prelude,
        .           
        .                       has_self: FxHashSet::default(),
        .                       field_names: FxHashMap::default(),
        .           
        .                       determined_imports: Vec::new(),
        .                       indeterminate_imports: Vec::new(),
        .           
        .                       last_import_segment: false,
-- line 1343 ----------------------------------------
-- line 1347 ----------------------------------------
        .                       partial_res_map: Default::default(),
        .                       import_res_map: Default::default(),
        .                       label_res_map: Default::default(),
        .                       extern_crate_map: Default::default(),
        .                       reexport_map: FxHashMap::default(),
        .                       trait_map: NodeMap::default(),
        .                       underscore_disambiguator: 0,
        .                       empty_module,
        4 ( 0.00%)              module_map,
        .                       block_map: Default::default(),
        .                       binding_parent_modules: FxHashMap::default(),
        .                       ast_transform_scopes: FxHashMap::default(),
        .           
        .                       glob_map: Default::default(),
        4 ( 0.00%)              visibilities,
        .                       used_imports: FxHashSet::default(),
        .                       maybe_unused_trait_imports: Default::default(),
        .                       maybe_unused_extern_crates: Vec::new(),
        .           
        .                       privacy_errors: Vec::new(),
        .                       ambiguity_errors: Vec::new(),
        .                       use_injections: Vec::new(),
        .                       macro_expanded_macro_export_errors: BTreeSet::new(),
-- line 1369 ----------------------------------------
-- line 1372 ----------------------------------------
        .                       dummy_binding: arenas.alloc_name_binding(NameBinding {
        .                           kind: NameBindingKind::Res(Res::Err, false),
        .                           ambiguity: None,
        .                           expansion: LocalExpnId::ROOT,
        .                           span: DUMMY_SP,
        .                           vis: ty::Visibility::Public,
        .                       }),
        .           
        6 ( 0.00%)              crate_loader: CrateLoader::new(session, metadata_loader, crate_name),
        .                       macro_names: FxHashSet::default(),
        .                       builtin_macros: Default::default(),
        4 ( 0.00%)              registered_attrs,
        4 ( 0.00%)              registered_tools,
        .                       macro_use_prelude: FxHashMap::default(),
        .                       all_macros: FxHashMap::default(),
        .                       macro_map: FxHashMap::default(),
        7 ( 0.00%)              dummy_ext_bang: Lrc::new(SyntaxExtension::dummy_bang(session.edition())),
        6 ( 0.00%)              dummy_ext_derive: Lrc::new(SyntaxExtension::dummy_derive(session.edition())),
        5 ( 0.00%)              non_macro_attr: Lrc::new(SyntaxExtension::non_macro_attr(session.edition())),
        .                       invocation_parent_scopes: Default::default(),
        .                       output_macro_rules_scopes: Default::default(),
        .                       helper_attrs: Default::default(),
        .                       derive_data: Default::default(),
        .                       local_macro_def_scopes: FxHashMap::default(),
        .                       name_already_seen: FxHashMap::default(),
        .                       potentially_unused_imports: Vec::new(),
        .                       struct_constructors: Default::default(),
-- line 1398 ----------------------------------------
-- line 1405 ----------------------------------------
        .                       active_features: features
        .                           .declared_lib_features
        .                           .iter()
        .                           .map(|(feat, ..)| *feat)
        .                           .chain(features.declared_lang_features.iter().map(|(feat, ..)| *feat))
        .                           .collect(),
        .                       lint_buffer: LintBuffer::default(),
        .                       next_node_id: CRATE_NODE_ID,
        4 ( 0.00%)              node_id_to_def_id,
        4 ( 0.00%)              def_id_to_node_id,
        .                       placeholder_field_indices: Default::default(),
        4 ( 0.00%)              invocation_parents,
        .                       next_disambiguator: Default::default(),
        .                       trait_impl_items: Default::default(),
        .                       legacy_const_generic_args: Default::default(),
        .                       item_generics_num_lifetimes: Default::default(),
        .                       main_def: Default::default(),
        .                       trait_impls: Default::default(),
        .                       proc_macros: Default::default(),
        .                       confused_type_with_std_module: Default::default(),
        .                       access_levels: Default::default(),
        .                   };
        .           
        .                   let root_parent_scope = ParentScope::module(graph_root, &resolver);
        .                   resolver.invocation_parent_scopes.insert(LocalExpnId::ROOT, root_parent_scope);
        .           
        .                   resolver
        9 ( 0.00%)      }
        .           
        .               fn new_module(
        .                   &mut self,
        .                   parent: Option<Module<'a>>,
        .                   kind: ModuleKind,
        .                   expn_id: ExpnId,
        .                   span: Span,
        .                   no_implicit_prelude: bool,
        .               ) -> Module<'a> {
        3 ( 0.00%)          let module_map = &mut self.module_map;
    3,625 ( 0.00%)          self.arenas.new_module(parent, kind, expn_id, span, no_implicit_prelude, module_map)
        .               }
        .           
        .               pub fn next_node_id(&mut self) -> NodeId {
        .                   let next =
   99,700 ( 0.00%)              self.next_node_id.as_u32().checked_add(1).expect("input too large; ran out of NodeIds");
        .                   mem::replace(&mut self.next_node_id, ast::NodeId::from_u32(next))
        .               }
        .           
        .               pub fn lint_buffer(&mut self) -> &mut LintBuffer {
        3 ( 0.00%)          &mut self.lint_buffer
        3 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn arenas() -> ResolverArenas<'a> {
        .                   Default::default()
        1 ( 0.00%)      }
        .           
        9 ( 0.00%)      pub fn into_outputs(self) -> ResolverOutputs {
        .                   let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();
        1 ( 0.00%)          let definitions = self.definitions;
        4 ( 0.00%)          let visibilities = self.visibilities;
        4 ( 0.00%)          let extern_crate_map = self.extern_crate_map;
        4 ( 0.00%)          let reexport_map = self.reexport_map;
        4 ( 0.00%)          let maybe_unused_trait_imports = self.maybe_unused_trait_imports;
        4 ( 0.00%)          let maybe_unused_extern_crates = self.maybe_unused_extern_crates;
        4 ( 0.00%)          let glob_map = self.glob_map;
        6 ( 0.00%)          let main_def = self.main_def;
        4 ( 0.00%)          let confused_type_with_std_module = self.confused_type_with_std_module;
        6 ( 0.00%)          let access_levels = self.access_levels;
       37 ( 0.00%)          ResolverOutputs {
        2 ( 0.00%)              definitions,
       11 ( 0.00%)              cstore: Box::new(self.crate_loader.into_cstore()),
        4 ( 0.00%)              visibilities,
        4 ( 0.00%)              access_levels,
        4 ( 0.00%)              extern_crate_map,
        4 ( 0.00%)              reexport_map,
        4 ( 0.00%)              glob_map,
        4 ( 0.00%)              maybe_unused_trait_imports,
        4 ( 0.00%)              maybe_unused_extern_crates,
        .                       extern_prelude: self
        .                           .extern_prelude
        .                           .iter()
        3 ( 0.00%)                  .map(|(ident, entry)| (ident.name, entry.introduced_by_item))
        .                           .collect(),
        6 ( 0.00%)              main_def,
        4 ( 0.00%)              trait_impls: self.trait_impls,
        4 ( 0.00%)              proc_macros,
        4 ( 0.00%)              confused_type_with_std_module,
        5 ( 0.00%)              registered_tools: self.registered_tools,
        .                   }
       19 ( 0.00%)      }
        .           
        .               pub fn clone_outputs(&self) -> ResolverOutputs {
        .                   let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();
        .                   ResolverOutputs {
        .                       definitions: self.definitions.clone(),
        .                       access_levels: self.access_levels.clone(),
        .                       cstore: Box::new(self.cstore().clone()),
        .                       visibilities: self.visibilities.clone(),
-- line 1501 ----------------------------------------
-- line 1513 ----------------------------------------
        .                       trait_impls: self.trait_impls.clone(),
        .                       proc_macros,
        .                       confused_type_with_std_module: self.confused_type_with_std_module.clone(),
        .                       registered_tools: self.registered_tools.clone(),
        .                   }
        .               }
        .           
        .               pub fn cstore(&self) -> &CStore {
   10,094 ( 0.00%)          self.crate_loader.cstore()
        .               }
        .           
        .               fn dummy_ext(&self, macro_kind: MacroKind) -> Lrc<SyntaxExtension> {
        .                   match macro_kind {
        .                       MacroKind::Bang => self.dummy_ext_bang.clone(),
        .                       MacroKind::Derive => self.dummy_ext_derive.clone(),
        .                       MacroKind::Attr => self.non_macro_attr.clone(),
        .                   }
        .               }
        .           
        .               /// Runs the function on each namespace.
       68 ( 0.00%)      fn per_ns<F: FnMut(&mut Self, Namespace)>(&mut self, mut f: F) {
      118 ( 0.00%)          f(self, TypeNS);
      112 ( 0.00%)          f(self, ValueNS);
      112 ( 0.00%)          f(self, MacroNS);
       60 ( 0.00%)      }
        .           
        .               fn is_builtin_macro(&mut self, res: Res) -> bool {
        .                   self.get_macro(res).map_or(false, |ext| ext.builtin_name.is_some())
        .               }
        .           
        .               fn macro_def(&self, mut ctxt: SyntaxContext) -> DefId {
        .                   loop {
        .                       match ctxt.outer_expn_data().macro_def_id {
        .                           Some(def_id) => return def_id,
        .                           None => ctxt.remove_mark(),
        .                       };
        .                   }
        .               }
        .           
        .               /// Entry point to crate resolution.
        2 ( 0.00%)      pub fn resolve_crate(&mut self, krate: &Crate) {
        4 ( 0.00%)          self.session.time("resolve_crate", || {
        3 ( 0.00%)              self.session.time("finalize_imports", || ImportResolver { r: self }.finalize_imports());
        .                       self.session.time("resolve_access_levels", || {
        3 ( 0.00%)                  AccessLevelsVisitor::compute_access_levels(self, krate)
        .                       });
        2 ( 0.00%)              self.session.time("finalize_macro_resolutions", || self.finalize_macro_resolutions());
        3 ( 0.00%)              self.session.time("late_resolve_crate", || self.late_resolve_crate(krate));
        2 ( 0.00%)              self.session.time("resolve_main", || self.resolve_main());
        3 ( 0.00%)              self.session.time("resolve_check_unused", || self.check_unused(krate));
        3 ( 0.00%)              self.session.time("resolve_report_errors", || self.report_errors(krate));
        4 ( 0.00%)              self.session.time("resolve_postprocess", || self.crate_loader.postprocess(krate));
        .                   });
        .               }
        .           
  123,108 ( 0.00%)      pub fn traits_in_scope(
        .                   &mut self,
        .                   current_trait: Option<Module<'a>>,
        .                   parent_scope: &ParentScope<'a>,
        .                   ctxt: SyntaxContext,
        .                   assoc_item: Option<(Symbol, Namespace)>,
        .               ) -> Vec<TraitCandidate> {
        .                   let mut found_traits = Vec::new();
        .           
   20,518 ( 0.00%)          if let Some(module) = current_trait {
        .                       if self.trait_may_have_item(Some(module), assoc_item) {
        .                           let def_id = module.def_id();
       18 ( 0.00%)                  found_traits.push(TraitCandidate { def_id, import_ids: smallvec![] });
        .                       }
        .                   }
        .           
        .                   self.visit_scopes(ScopeSet::All(TypeNS, false), parent_scope, ctxt, |this, scope, _, _| {
        .                       match scope {
        .                           Scope::Module(module, _) => {
        .                               this.traits_in_module(module, assoc_item, &mut found_traits);
        .                           }
        .                           Scope::StdLibPrelude => {
   30,777 ( 0.00%)                      if let Some(module) = this.prelude {
        .                                   this.traits_in_module(module, assoc_item, &mut found_traits);
        .                               }
        .                           }
        .                           Scope::ExternPrelude | Scope::ToolPrelude | Scope::BuiltinTypes => {}
        .                           _ => unreachable!(),
        .                       }
        .                       None::<()>
        .                   });
        .           
        .                   found_traits
   82,072 ( 0.00%)      }
        .           
        .               fn traits_in_module(
        .                   &mut self,
        .                   module: Module<'a>,
        .                   assoc_item: Option<(Symbol, Namespace)>,
        .                   found_traits: &mut Vec<TraitCandidate>,
        .               ) {
        .                   module.ensure_traits(self);
        .                   let traits = module.traits.borrow();
  575,830 ( 0.01%)          for (trait_name, trait_binding) in traits.as_ref().unwrap().iter() {
        .                       if self.trait_may_have_item(trait_binding.module(), assoc_item) {
        .                           let def_id = trait_binding.res().def_id();
      225 ( 0.00%)                  let import_ids = self.find_transitive_imports(&trait_binding.kind, *trait_name);
      675 ( 0.00%)                  found_traits.push(TraitCandidate { def_id, import_ids });
        .                       }
        .                   }
        .               }
        .           
        .               // List of traits in scope is pruned on best effort basis. We reject traits not having an
        .               // associated item with the given name and namespace (if specified). This is a conservative
        .               // optimization, proper hygienic type-based resolution of associated items is done in typeck.
        .               // We don't reject trait aliases (`trait_module == None`) because we don't have access to their
        .               // associated items.
        .               fn trait_may_have_item(
        .                   &mut self,
        .                   trait_module: Option<Module<'a>>,
        .                   assoc_item: Option<(Symbol, Namespace)>,
        .               ) -> bool {
  277,809 ( 0.01%)          match (trait_module, assoc_item) {
        .                       (Some(trait_module), Some((name, ns))) => {
  555,530 ( 0.01%)                  self.resolutions(trait_module).borrow().iter().any(|resolution| {
        .                               let (&BindingKey { ident: assoc_ident, ns: assoc_ns, .. }, _) = resolution;
2,107,924 ( 0.05%)                      assoc_ns == ns && assoc_ident.name == name
        .                           })
        .                       }
        .                       _ => true,
        .                   }
        .               }
        .           
        .               fn find_transitive_imports(
        .                   &mut self,
        .                   mut kind: &NameBindingKind<'_>,
        .                   trait_name: Ident,
        .               ) -> SmallVec<[LocalDefId; 1]> {
        .                   let mut import_ids = smallvec![];
      160 ( 0.00%)          while let NameBindingKind::Import { import, binding, .. } = kind {
        6 ( 0.00%)              let id = self.local_def_id(import.id);
        .                       self.maybe_unused_trait_imports.insert(id);
        2 ( 0.00%)              self.add_to_glob_map(&import, trait_name);
        .                       import_ids.push(id);
        2 ( 0.00%)              kind = &binding.kind;
        .                   }
        .                   import_ids
        .               }
        .           
        .               fn new_key(&mut self, ident: Ident, ns: Namespace) -> BindingKey {
  107,260 ( 0.00%)          let ident = ident.normalize_to_macros_2_0();
   34,509 ( 0.00%)          let disambiguator = if ident.name == kw::Underscore {
        .                       self.underscore_disambiguator += 1;
        .                       self.underscore_disambiguator
        .                   } else {
        .                       0
        .                   };
        .                   BindingKey { ident, ns, disambiguator }
        .               }
        .           
2,498,096 ( 0.06%)      fn resolutions(&mut self, module: Module<'a>) -> &'a Resolutions<'a> {
  312,262 ( 0.01%)          if module.populate_on_access.get() {
        .                       module.populate_on_access.set(false);
        .                       self.build_reduced_graph_external(module);
        .                   }
  312,262 ( 0.01%)          &module.lazy_resolutions
2,810,358 ( 0.07%)      }
        .           
  310,734 ( 0.01%)      fn resolution(
        .                   &mut self,
        .                   module: Module<'a>,
        .                   key: BindingKey,
        .               ) -> &'a RefCell<NameResolution<'a>> {
  103,578 ( 0.00%)          *self
        .                       .resolutions(module)
        .                       .borrow_mut()
  207,156 ( 0.01%)              .entry(key)
   69,052 ( 0.00%)              .or_insert_with(|| self.arenas.alloc_name_resolution())
  276,208 ( 0.01%)      }
        .           
  121,638 ( 0.00%)      fn record_use(
        .                   &mut self,
        .                   ident: Ident,
        .                   used_binding: &'a NameBinding<'a>,
        .                   is_lexical_scope: bool,
        .               ) {
   33,174 ( 0.00%)          if let Some((b2, kind)) = used_binding.ambiguity {
        .                       self.ambiguity_errors.push(AmbiguityError {
        .                           kind,
        .                           ident,
        .                           b1: used_binding,
        .                           b2,
        .                           misc1: AmbiguityErrorMisc::None,
        .                           misc2: AmbiguityErrorMisc::None,
        .                       });
        .                   }
   22,266 ( 0.00%)          if let NameBindingKind::Import { import, binding, ref used } = used_binding.kind {
        .                       // Avoid marking `extern crate` items that refer to a name from extern prelude,
        .                       // but not introduce it, as used if they are accessed from lexical scope.
      150 ( 0.00%)              if is_lexical_scope {
       11 ( 0.00%)                  if let Some(entry) = self.extern_prelude.get(&ident.normalize_to_macros_2_0()) {
        5 ( 0.00%)                      if let Some(crate_item) = entry.extern_crate_item {
        2 ( 0.00%)                          if ptr::eq(used_binding, crate_item) && !entry.introduced_by_item {
        .                                       return;
        .                                   }
        .                               }
        .                           }
        .                       }
        .                       used.set(true);
        .                       import.used.set(true);
       75 ( 0.00%)              self.used_imports.insert(import.id);
      375 ( 0.00%)              self.add_to_glob_map(&import, ident);
      450 ( 0.00%)              self.record_use(ident, binding, false);
        .                   }
   88,464 ( 0.00%)      }
        .           
        .               #[inline]
      225 ( 0.00%)      fn add_to_glob_map(&mut self, import: &Import<'_>, ident: Ident) {
       77 ( 0.00%)          if import.is_glob() {
       32 ( 0.00%)              let def_id = self.local_def_id(import.id);
        .                       self.glob_map.entry(def_id).or_default().insert(ident.name);
        .                   }
      236 ( 0.00%)      }
        .           
        .               /// A generic scope visitor.
        .               /// Visits scopes in order to resolve some identifier in them or perform other actions.
        .               /// If the callback returns `Some` result, we stop visiting scopes and return it.
        .               fn visit_scopes<T>(
        .                   &mut self,
        .                   scope_set: ScopeSet<'a>,
        .                   parent_scope: &ParentScope<'a>,
-- line 1738 ----------------------------------------
-- line 1780 ----------------------------------------
        .                   //    ambiguities with `macro_rules`.
        .                   // 4. `macro_use` prelude (open, the open part is from macro expansions, not controlled).
        .                   // 4a. User-defined prelude from macro-use
        .                   //    (open, the open part is from macro expansions, not controlled).
        .                   // 4b. "Standard library prelude" part implemented through `macro-use` (closed, controlled).
        .                   // 4c. Standard library prelude (de-facto closed, controlled).
        .                   // 6. Language prelude: builtin attributes (closed, controlled).
        .           
  221,514 ( 0.01%)          let rust_2015 = ctxt.edition() == Edition::Edition2015;
        .                   let (ns, macro_kind, is_absolute_path) = match scope_set {
        .                       ScopeSet::All(ns, _) => (ns, None, false),
        .                       ScopeSet::AbsolutePath(ns) => (ns, None, true),
        .                       ScopeSet::Macro(macro_kind) => (MacroNS, Some(macro_kind), false),
        .                       ScopeSet::Late(ns, ..) => (ns, None, false),
        .                   };
  593,404 ( 0.02%)          let module = match scope_set {
        .                       // Start with the specified module.
        .                       ScopeSet::Late(_, module, _) => module,
        .                       // Jump out of trait or enum modules, they do not act as scopes.
   10,555 ( 0.00%)              _ => parent_scope.module.nearest_item_scope(),
        .                   };
   42,386 ( 0.00%)          let mut scope = match ns {
  105,965 ( 0.00%)              _ if is_absolute_path => Scope::CrateRoot,
        .                       TypeNS | ValueNS => Scope::Module(module, None),
      834 ( 0.00%)              MacroNS => Scope::DeriveHelpers(parent_scope.expansion),
        .                   };
   62,904 ( 0.00%)          let mut ctxt = ctxt.normalize_to_macros_2_0();
  207,880 ( 0.01%)          let mut use_prelude = !module.no_implicit_prelude;
        .           
        .                   loop {
  675,552 ( 0.02%)              let visit = match scope {
        .                           // Derive helpers are not in scope when resolving derives in the same container.
        .                           Scope::DeriveHelpers(expn_id) => {
      900 ( 0.00%)                      !(expn_id == parent_scope.expansion && macro_kind == Some(MacroKind::Derive))
        .                           }
        .                           Scope::DeriveHelpersCompat => true,
        .                           Scope::MacroRules(macro_rules_scope) => {
        .                               // Use "path compression" on `macro_rules` scope chains. This is an optimization
        .                               // used to avoid long scope chains, see the comments on `MacroRulesScopeRef`.
        .                               // As another consequence of this optimization visitors never observe invocation
        .                               // scopes for macros that were already expanded.
      628 ( 0.00%)                      while let MacroRulesScope::Invocation(invoc_id) = macro_rules_scope.get() {
        .                                   if let Some(next_scope) = self.output_macro_rules_scopes.get(&invoc_id) {
        .                                       macro_rules_scope.set(next_scope.get());
        .                                   } else {
        .                                       break;
        .                                   }
        .                               }
        .                               true
        .                           }
        .                           Scope::CrateRoot => true,
        .                           Scope::Module(..) => true,
      278 ( 0.00%)                  Scope::RegisteredAttrs => use_prelude,
        .                           Scope::MacroUsePrelude => use_prelude || rust_2015,
        .                           Scope::BuiltinAttrs => true,
      738 ( 0.00%)                  Scope::ExternPrelude => use_prelude || is_absolute_path,
      222 ( 0.00%)                  Scope::ToolPrelude => use_prelude,
   85,828 ( 0.00%)                  Scope::StdLibPrelude => use_prelude || ns == MacroNS,
        .                           Scope::BuiltinTypes => true,
        .                       };
        .           
    1,306 ( 0.00%)              if visit {
   34,492 ( 0.00%)                  if let break_result @ Some(..) = visitor(self, scope, use_prelude, ctxt) {
        .                               return break_result;
        .                           }
        .                       }
        .           
  225,590 ( 0.01%)              scope = match scope {
        .                           Scope::DeriveHelpers(LocalExpnId::ROOT) => Scope::DeriveHelpersCompat,
        .                           Scope::DeriveHelpers(expn_id) => {
        .                               // Derive helpers are not visible to code generated by bang or derive macros.
        .                               let expn_data = expn_id.expn_data();
    1,593 ( 0.00%)                      match expn_data.kind {
        .                                   ExpnKind::Root
        .                                   | ExpnKind::Macro(MacroKind::Bang | MacroKind::Derive, _) => {
        .                                       Scope::DeriveHelpersCompat
        .                                   }
       66 ( 0.00%)                          _ => Scope::DeriveHelpers(expn_data.parent.expect_local()),
        .                               }
        .                           }
      834 ( 0.00%)                  Scope::DeriveHelpersCompat => Scope::MacroRules(parent_scope.macro_rules),
      556 ( 0.00%)                  Scope::MacroRules(macro_rules_scope) => match macro_rules_scope.get() {
        .                               MacroRulesScope::Binding(binding) => {
        .                                   Scope::MacroRules(binding.parent_macro_rules_scope)
        .                               }
        .                               MacroRulesScope::Invocation(invoc_id) => {
        .                                   Scope::MacroRules(self.invocation_parent_scopes[&invoc_id].macro_rules)
        .                               }
        .                               MacroRulesScope::Empty => Scope::Module(module, None),
        .                           },
-- line 1869 ----------------------------------------
-- line 1870 ----------------------------------------
        .                           Scope::CrateRoot => match ns {
        .                               TypeNS => {
        .                                   ctxt.adjust(ExpnId::root());
        .                                   Scope::ExternPrelude
        .                               }
        .                               ValueNS | MacroNS => break,
        .                           },
        .                           Scope::Module(module, prev_lint_id) => {
   65,278 ( 0.00%)                      use_prelude = !module.no_implicit_prelude;
        .                               let derive_fallback_lint_id = match scope_set {
        .                                   ScopeSet::Late(.., lint_id) => lint_id,
        .                                   _ => None,
        .                               };
  139,137 ( 0.00%)                      match self.hygienic_lexical_parent(module, &mut ctxt, derive_fallback_lint_id) {
        .                                   Some((parent_module, lint_id)) => {
        .                                       Scope::Module(parent_module, lint_id.or(prev_lint_id))
        .                                   }
        .                                   None => {
  116,104 ( 0.00%)                              ctxt.adjust(ExpnId::root());
   43,148 ( 0.00%)                              match ns {
        .                                           TypeNS => Scope::ExternPrelude,
        .                                           ValueNS => Scope::StdLibPrelude,
        .                                           MacroNS => Scope::RegisteredAttrs,
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                           Scope::RegisteredAttrs => Scope::MacroUsePrelude,
        .                           Scope::MacroUsePrelude => Scope::StdLibPrelude,
        .                           Scope::BuiltinAttrs => break, // nowhere else to search
      444 ( 0.00%)                  Scope::ExternPrelude if is_absolute_path => break,
        .                           Scope::ExternPrelude => Scope::ToolPrelude,
        .                           Scope::ToolPrelude => Scope::StdLibPrelude,
   42,350 ( 0.00%)                  Scope::StdLibPrelude => match ns {
        .                               TypeNS => Scope::BuiltinTypes,
        .                               ValueNS => break, // nowhere else to search
        .                               MacroNS => Scope::BuiltinAttrs,
        .                           },
        .                           Scope::BuiltinTypes => break, // nowhere else to search
        .                       };
        .                   }
        .           
-- line 1911 ----------------------------------------
-- line 1924 ----------------------------------------
        .               ///    let g = || {};
        .               ///    fn g() {}
        .               ///    g(); // This resolves to the local variable `g` since it shadows the item.
        .               /// }
        .               /// ```
        .               ///
        .               /// Invariant: This must only be called during main resolution, not during
        .               /// import resolution.
  217,530 ( 0.01%)      fn resolve_ident_in_lexical_scope(
        .                   &mut self,
        .                   mut ident: Ident,
        .                   ns: Namespace,
        .                   parent_scope: &ParentScope<'a>,
        .                   record_used_id: Option<NodeId>,
        .                   path_span: Span,
        .                   ribs: &[Rib<'a>],
        .               ) -> Option<LexicalScopeBinding<'a>> {
   43,506 ( 0.00%)          assert!(ns == TypeNS || ns == ValueNS);
        .                   let orig_ident = ident;
  152,271 ( 0.00%)          if ident.name == kw::Empty {
        .                       return Some(LexicalScopeBinding::Res(Res::Err));
        .                   }
        .                   let (general_span, normalized_span) = if ident.name == kw::SelfUpper {
        .                       // FIXME(jseyfried) improve `Self` hygiene
        .                       let empty_span = ident.span.with_ctxt(SyntaxContext::root());
        .                       (empty_span, empty_span)
   21,649 ( 0.00%)          } else if ns == TypeNS {
   52,345 ( 0.00%)              let normalized_span = ident.span.normalize_to_macros_2_0();
        .                       (normalized_span, normalized_span)
        .                   } else {
   55,900 ( 0.00%)              (ident.span.normalize_to_macro_rules(), ident.span.normalize_to_macros_2_0())
        .                   };
        .                   ident.span = general_span;
        .                   let normalized_ident = Ident { span: normalized_span, ..ident };
        .           
        .                   // Walk backwards up the ribs in scope.
        .                   let record_used = record_used_id.is_some();
   65,259 ( 0.00%)          let mut module = self.graph_root;
        .                   for i in (0..ribs.len()).rev() {
        .                       debug!("walk rib\n{:?}", ribs[i].bindings);
        .                       // Use the rib kind to determine whether we are resolving parameters
        .                       // (macro 2.0 hygiene) or local variables (`macro_rules` hygiene).
   67,895 ( 0.00%)              let rib_ident = if ribs[i].kind.contains_params() { normalized_ident } else { ident };
        .                       if let Some((original_rib_ident_def, res)) = ribs[i].bindings.get_key_value(&rib_ident)
        .                       {
        .                           // The ident resolves to a type parameter or local variable.
    8,976 ( 0.00%)                  return Some(LexicalScopeBinding::Res(self.validate_res_from_ribs(
        .                               i,
    1,496 ( 0.00%)                      rib_ident,
    3,740 ( 0.00%)                      *res,
        .                               record_used,
        .                               path_span,
        .                               *original_rib_ident_def,
        .                               ribs,
        .                           )));
        .                       }
        .           
  385,369 ( 0.01%)              module = match ribs[i].kind {
   21,165 ( 0.00%)                  ModuleRibKind(module) => module,
        .                           MacroDefinition(def) if def == self.macro_def(ident.span.ctxt()) => {
        .                               // If an invocation of this macro created `ident`, give up on `ident`
        .                               // and switch to `ident`'s source from the macro definition.
        .                               ident.span.remove_mark();
        .                               continue;
        .                           }
        .                           _ => continue,
        .                       };
        .           
   63,495 ( 0.00%)              match module.kind {
        .                           ModuleKind::Block(..) => {} // We can see through blocks
        .                           _ => break,
        .                       }
        .           
        .                       let item = self.resolve_ident_in_module_unadjusted(
        .                           ModuleOrUniformRoot::Module(module),
        .                           ident,
        .                           ns,
        .                           parent_scope,
        .                           record_used,
        .                           path_span,
        .                       );
        .                       if let Ok(binding) = item {
        .                           // The ident resolves to an item.
      132 ( 0.00%)                  return Some(LexicalScopeBinding::Item(binding));
        .                       }
        .                   }
  356,337 ( 0.01%)          self.early_resolve_ident_in_lexical_scope(
        .                       orig_ident,
        .                       ScopeSet::Late(ns, module, record_used_id),
        .                       parent_scope,
        .                       record_used,
        .                       record_used,
        .                       path_span,
        .                   )
        .                   .ok()
        .                   .map(LexicalScopeBinding::Item)
  195,777 ( 0.00%)      }
        .           
  236,192 ( 0.01%)      fn hygienic_lexical_parent(
        .                   &mut self,
        .                   module: Module<'a>,
        .                   ctxt: &mut SyntaxContext,
        .                   derive_fallback_lint_id: Option<NodeId>,
        .               ) -> Option<(Module<'a>, Option<NodeId>)> {
  150,304 ( 0.00%)          if !module.expansion.outer_expn_is_descendant_of(*ctxt) {
    1,470 ( 0.00%)              return Some((self.expn_def_scope(ctxt.remove_mark()), None));
        .                   }
        .           
   42,454 ( 0.00%)          if let ModuleKind::Block(..) = module.kind {
       58 ( 0.00%)              return Some((module.parent.unwrap().nearest_item_scope(), None));
        .                   }
        .           
        .                   // We need to support the next case under a deprecation warning
        .                   // ```
        .                   // struct MyStruct;
        .                   // ---- begin: this comes from a proc macro derive
        .                   // mod implementation_details {
        .                   //     // Note that `MyStruct` is not in scope here.
        .                   //     impl SomeTrait for MyStruct { ... }
        .                   // }
        .                   // ---- end
        .                   // ```
        .                   // So we have to fall back to the module's parent during lexical resolution in this case.
   21,169 ( 0.00%)          if derive_fallback_lint_id.is_some() {
      768 ( 0.00%)              if let Some(parent) = module.parent {
        .                           // Inner module is inside the macro, parent module is outside of the macro.
      215 ( 0.00%)                  if module.expansion != parent.expansion
        .                               && module.expansion.is_descendant_of(parent.expansion)
        .                           {
        .                               // The macro is a proc macro derive
        .                               if let Some(def_id) = module.expansion.expn_data().macro_def_id {
        .                                   let ext = self.get_macro_by_def_id(def_id);
        .                                   if ext.builtin_name.is_none()
        .                                       && ext.macro_kind() == MacroKind::Derive
        .                                       && parent.expansion.outer_expn_is_descendant_of(*ctxt)
-- line 2058 ----------------------------------------
-- line 2060 ----------------------------------------
        .                                       return Some((parent, derive_fallback_lint_id));
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
        .           
        .                   None
  214,720 ( 0.01%)      }
        .           
        .               fn resolve_ident_in_module(
        .                   &mut self,
        .                   module: ModuleOrUniformRoot<'a>,
        .                   ident: Ident,
        .                   ns: Namespace,
        .                   parent_scope: &ParentScope<'a>,
        .                   record_used: bool,
        .                   path_span: Span,
        .               ) -> Result<&'a NameBinding<'a>, Determinacy> {
    5,700 ( 0.00%)          self.resolve_ident_in_module_ext(module, ident, ns, parent_scope, record_used, path_span)
        .                       .map_err(|(determinacy, _)| determinacy)
        .               }
        .           
   12,720 ( 0.00%)      fn resolve_ident_in_module_ext(
        .                   &mut self,
        .                   module: ModuleOrUniformRoot<'a>,
        .                   mut ident: Ident,
        .                   ns: Namespace,
        .                   parent_scope: &ParentScope<'a>,
        .                   record_used: bool,
        .                   path_span: Span,
        .               ) -> Result<&'a NameBinding<'a>, (Determinacy, Weak)> {
        .                   let tmp_parent_scope;
        .                   let mut adjusted_parent_scope = parent_scope;
        .                   match module {
        .                       ModuleOrUniformRoot::Module(m) => {
    3,822 ( 0.00%)                  if let Some(def) = ident.span.normalize_to_macros_2_0_and_adjust(m.expansion) {
    1,120 ( 0.00%)                      tmp_parent_scope =
    1,344 ( 0.00%)                          ParentScope { module: self.expn_def_scope(def), ..*parent_scope };
        .                               adjusted_parent_scope = &tmp_parent_scope;
        .                           }
        .                       }
        .                       ModuleOrUniformRoot::ExternPrelude => {
        .                           ident.span.normalize_to_macros_2_0_and_adjust(ExpnId::root());
        .                       }
        .                       ModuleOrUniformRoot::CrateRootAndExternPrelude | ModuleOrUniformRoot::CurrentScope => {
        .                           // No adjustments
        .                       }
        .                   }
    7,006 ( 0.00%)          self.resolve_ident_in_module_unadjusted_ext(
        .                       module,
    1,274 ( 0.00%)              ident,
        .                       ns,
        .                       adjusted_parent_scope,
        .                       false,
        .                       record_used,
        .                       path_span,
        .                   )
    4,452 ( 0.00%)      }
        .           
    2,440 ( 0.00%)      fn resolve_crate_root(&mut self, ident: Ident) -> Module<'a> {
        .                   debug!("resolve_crate_root({:?})", ident);
      244 ( 0.00%)          let mut ctxt = ident.span.ctxt();
      244 ( 0.00%)          let mark = if ident.name == kw::DollarCrate {
        .                       // When resolving `$crate` from a `macro_rules!` invoked in a `macro`,
        .                       // we don't want to pretend that the `macro_rules!` definition is in the `macro`
        .                       // as described in `SyntaxContext::apply_mark`, so we ignore prepended opaque marks.
        .                       // FIXME: This is only a guess and it doesn't work correctly for `macro_rules!`
        .                       // definitions actually produced by `macro` and `macro` definitions produced by
        .                       // `macro_rules!`, but at least such configurations are not stable yet.
      484 ( 0.00%)              ctxt = ctxt.normalize_to_macro_rules();
        .                       debug!(
        .                           "resolve_crate_root: marks={:?}",
        .                           ctxt.marks().into_iter().map(|(i, t)| (i.expn_data(), t)).collect::<Vec<_>>()
        .                       );
      484 ( 0.00%)              let mut iter = ctxt.marks().into_iter().rev().peekable();
        .                       let mut result = None;
        .                       // Find the last opaque mark from the end if it exists.
    1,428 ( 0.00%)              while let Some(&(mark, transparency)) = iter.peek() {
        .                           if transparency == Transparency::Opaque {
        .                               result = Some(mark);
        .                               iter.next();
        .                           } else {
        .                               break;
        .                           }
        .                       }
        .                       debug!(
        .                           "resolve_crate_root: found opaque mark {:?} {:?}",
        .                           result,
        .                           result.map(|r| r.expn_data())
        .                       );
        .                       // Then find the last semi-transparent mark from the end if it exists.
      726 ( 0.00%)              for (mark, transparency) in iter {
        .                           if transparency == Transparency::SemiTransparent {
        .                               result = Some(mark);
        .                           } else {
        .                               break;
        .                           }
        .                       }
        .                       debug!(
        .                           "resolve_crate_root: found semi-transparent mark {:?} {:?}",
        .                           result,
        .                           result.map(|r| r.expn_data())
        .                       );
        .                       result
        .                   } else {
        .                       debug!("resolve_crate_root: not DollarCrate");
        2 ( 0.00%)              ctxt = ctxt.normalize_to_macros_2_0();
       14 ( 0.00%)              ctxt.adjust(ExpnId::root())
        .                   };
      488 ( 0.00%)          let module = match mark {
    1,195 ( 0.00%)              Some(def) => self.expn_def_scope(def),
        .                       None => {
        .                           debug!(
        .                               "resolve_crate_root({:?}): found no mark (ident.span = {:?})",
        .                               ident, ident.span
        .                           );
       10 ( 0.00%)                  return self.graph_root;
        .                       }
        .                   };
        .                   let module = self.expect_module(
        .                       module.opt_def_id().map_or(LOCAL_CRATE, |def_id| def_id.krate).as_def_id(),
        .                   );
        .                   debug!(
        .                       "resolve_crate_root({:?}): got module {:?} ({:?}) (ident.span = {:?})",
        .                       ident,
        .                       module,
        .                       module.kind.name(),
        .                       ident.span
        .                   );
        .                   module
    1,708 ( 0.00%)      }
        .           
        .               fn resolve_self(&mut self, ctxt: &mut SyntaxContext, module: Module<'a>) -> Module<'a> {
        .                   let mut module = self.expect_module(module.nearest_parent_mod());
        .                   while module.span.ctxt().normalize_to_macros_2_0() != *ctxt {
        .                       let parent = module.parent.unwrap_or_else(|| self.expn_def_scope(ctxt.remove_mark()));
        .                       module = self.expect_module(parent.nearest_parent_mod());
        .                   }
        .                   module
-- line 2199 ----------------------------------------
-- line 2203 ----------------------------------------
        .                   &mut self,
        .                   path: &[Segment],
        .                   opt_ns: Option<Namespace>, // `None` indicates a module path in import
        .                   parent_scope: &ParentScope<'a>,
        .                   record_used: bool,
        .                   path_span: Span,
        .                   crate_lint: CrateLint,
        .               ) -> PathResult<'a> {
      210 ( 0.00%)          self.resolve_path_with_ribs(
        .                       path,
        .                       opt_ns,
        .                       parent_scope,
        .                       record_used,
        .                       path_span,
        .                       crate_lint,
        .                       None,
        .                   )
        .               }
        .           
  323,160 ( 0.01%)      fn resolve_path_with_ribs(
        .                   &mut self,
        .                   path: &[Segment],
        .                   opt_ns: Option<Namespace>, // `None` indicates a module path in import
        .                   parent_scope: &ParentScope<'a>,
        .                   record_used: bool,
        .                   path_span: Span,
        .                   crate_lint: CrateLint,
        .                   ribs: Option<&PerNS<Vec<Rib<'a>>>>,
        .               ) -> PathResult<'a> {
   21,544 ( 0.00%)          let mut module = None;
        .                   let mut allow_super = true;
        .                   let mut second_binding = None;
        .           
        .                   debug!(
        .                       "resolve_path(path={:?}, opt_ns={:?}, record_used={:?}, \
        .                        path_span={:?}, crate_lint={:?})",
        .                       path, opt_ns, record_used, path_span, crate_lint,
        .                   );
        .           
  132,792 ( 0.00%)          for (i, &Segment { ident, id, has_generic_args: _ }) in path.iter().enumerate() {
        .                       debug!("resolve_path ident {} {:?} {:?}", i, ident, id);
  114,572 ( 0.00%)              let record_segment_res = |this: &mut Self, res| {
    3,912 ( 0.00%)                  if record_used {
    6,415 ( 0.00%)                      if let Some(id) = id {
    2,566 ( 0.00%)                          if !this.partial_res_map.contains_key(&id) {
    2,338 ( 0.00%)                              assert!(id != ast::DUMMY_NODE_ID, "Trying to resolve dummy id");
    4,676 ( 0.00%)                              this.record_partial_res(id, PartialRes::new(res));
        .                                   }
        .                               }
        .                           }
    5,216 ( 0.00%)              };
        .           
   65,368 ( 0.00%)              let is_last = i == path.len() - 1;
  110,660 ( 0.00%)              let ns = if is_last { opt_ns.unwrap_or(TypeNS) } else { TypeNS };
   22,132 ( 0.00%)              let name = ident.name;
        .           
   33,262 ( 0.00%)              allow_super &= ns == TypeNS && (name == kw::SelfLower || name == kw::Super);
        .           
        .                       if ns == TypeNS {
   22,260 ( 0.00%)                  if allow_super && name == kw::Super {
        .                               let mut ctxt = ident.span.ctxt().normalize_to_macros_2_0();
        .                               let self_module = match i {
        .                                   0 => Some(self.resolve_self(&mut ctxt, parent_scope.module)),
        .                                   _ => match module {
        .                                       Some(ModuleOrUniformRoot::Module(module)) => Some(module),
        .                                       _ => None,
        .                                   },
        .                               };
-- line 2270 ----------------------------------------
-- line 2279 ----------------------------------------
        .                               let msg = "there are too many leading `super` keywords".to_string();
        .                               return PathResult::Failed {
        .                                   span: ident.span,
        .                                   label: msg,
        .                                   suggestion: None,
        .                                   is_error_from_last_segment: false,
        .                               };
        .                           }
   22,260 ( 0.00%)                  if i == 0 {
   32,061 ( 0.00%)                      if name == kw::SelfLower {
        .                                   let mut ctxt = ident.span.ctxt().normalize_to_macros_2_0();
        .                                   module = Some(ModuleOrUniformRoot::Module(
        .                                       self.resolve_self(&mut ctxt, parent_scope.module),
        .                                   ));
        .                                   continue;
        .                               }
        .                               if name == kw::PathRoot && ident.span.rust_2018() {
        .                                   module = Some(ModuleOrUniformRoot::ExternPrelude);
-- line 2296 ----------------------------------------
-- line 2298 ----------------------------------------
        .                               }
        .                               if name == kw::PathRoot && ident.span.rust_2015() && self.session.rust_2018() {
        .                                   // `::a::b` from 2015 macro on 2018 global edition
        .                                   module = Some(ModuleOrUniformRoot::CrateRootAndExternPrelude);
        .                                   continue;
        .                               }
        .                               if name == kw::PathRoot || name == kw::Crate || name == kw::DollarCrate {
        .                                   // `::a::b`, `crate::a::b` or `$crate::a::b`
      804 ( 0.00%)                          module = Some(ModuleOrUniformRoot::Module(self.resolve_crate_root(ident)));
        .                                   continue;
        .                               }
        .                           }
        .                       }
        .           
        .                       // Report special messages for path segment keywords in wrong positions.
  109,989 ( 0.00%)              if ident.is_path_segment_keyword() && i != 0 {
        .                           let name_str = if name == kw::PathRoot {
        .                               "crate root".to_string()
        .                           } else {
        .                               format!("`{}`", name)
        .                           };
        .                           let label = if i == 1 && path[0].ident.name == kw::PathRoot {
        .                               format!("global paths cannot start with {}", name_str)
        .                           } else {
-- line 2321 ----------------------------------------
-- line 2328 ----------------------------------------
        .                               is_error_from_last_segment: false,
        .                           };
        .                       }
        .           
        .                       enum FindBindingResult<'a> {
        .                           Binding(Result<&'a NameBinding<'a>, Determinacy>),
        .                           PathResult(PathResult<'a>),
        .                       }
  701,792 ( 0.02%)              let find_binding_in_ns = |this: &mut Self, ns| {
   88,312 ( 0.00%)                  let binding = if let Some(module) = module {
        .                               this.resolve_ident_in_module(
        .                                   module,
    1,764 ( 0.00%)                          ident,
        .                                   ns,
        .                                   parent_scope,
    1,176 ( 0.00%)                          record_used,
      588 ( 0.00%)                          path_span,
        .                               )
  127,986 ( 0.00%)                  } else if ribs.is_none() || opt_ns.is_none() || opt_ns == Some(MacroNS) {
        .                               let scopes = ScopeSet::All(ns, opt_ns.is_none());
      306 ( 0.00%)                      this.early_resolve_ident_in_lexical_scope(
       54 ( 0.00%)                          ident,
        .                                   scopes,
       18 ( 0.00%)                          parent_scope,
       36 ( 0.00%)                          record_used,
        .                                   record_used,
       18 ( 0.00%)                          path_span,
        .                               )
        .                           } else {
   85,300 ( 0.00%)                      let record_used_id = if record_used {
   11,247 ( 0.00%)                          crate_lint.node_id().or(Some(CRATE_NODE_ID))
        .                               } else {
        .                                   None
        .                               };
  318,529 ( 0.01%)                      match this.resolve_ident_in_lexical_scope(
   63,975 ( 0.00%)                          ident,
        .                                   ns,
   21,325 ( 0.00%)                          parent_scope,
        .                                   record_used_id,
   42,650 ( 0.00%)                          path_span,
        .                                   &ribs.unwrap()[ns],
        .                               ) {
        .                                   // we found a locally-imported or available item/module
   31,731 ( 0.00%)                          Some(LexicalScopeBinding::Item(binding)) => Ok(binding),
        .                                   // we found a local variable or type param
        .                                   Some(LexicalScopeBinding::Res(res))
    1,346 ( 0.00%)                              if opt_ns == Some(TypeNS) || opt_ns == Some(ValueNS) =>
        .                                   {
    6,057 ( 0.00%)                              record_segment_res(this, res);
    5,384 ( 0.00%)                              return FindBindingResult::PathResult(PathResult::NonModule(
    4,711 ( 0.00%)                                  PartialRes::with_unresolved_segments(res, path.len() - 1),
        .                                       ));
        .                                   }
   30,225 ( 0.00%)                          _ => Err(Determinacy::determined(record_used)),
        .                               }
        .                           };
  148,806 ( 0.00%)                  FindBindingResult::Binding(binding)
  175,448 ( 0.00%)              };
  153,517 ( 0.00%)              let binding = match find_binding_in_ns(self, ns) {
    9,422 ( 0.00%)                  FindBindingResult::PathResult(x) => return x,
        .                           FindBindingResult::Binding(binding) => binding,
        .                       };
   72,741 ( 0.00%)              match binding {
        .                           Ok(binding) => {
   55,915 ( 0.00%)                      if i == 1 {
        .                                   second_binding = Some(binding);
        .                               }
        .                               let res = binding.res();
  111,830 ( 0.00%)                      let maybe_assoc = opt_ns != Some(MacroNS) && PathSource::Type.is_expected(res);
        .                               if let Some(next_module) = binding.module() {
    1,262 ( 0.00%)                          module = Some(ModuleOrUniformRoot::Module(next_module));
    5,679 ( 0.00%)                          record_segment_res(self, res);
   73,864 ( 0.00%)                      } else if res == Res::ToolMod && i + 1 != path.len() {
        .                                   if binding.is_import() {
        .                                       self.session
        .                                           .struct_span_err(
        .                                               ident.span,
        .                                               "cannot use a tool module through an import",
        .                                           )
        .                                           .span_note(binding.span, "the tool module imported here")
        .                                           .emit();
        .                                   }
        .                                   let res = Res::NonMacroAttr(NonMacroAttrKind::Tool);
        .                                   return PathResult::NonModule(PartialRes::new(res));
   52,760 ( 0.00%)                      } else if res == Res::Err {
        .                                   return PathResult::NonModule(PartialRes::new(Res::Err));
   31,656 ( 0.00%)                      } else if opt_ns.is_some() && (is_last || maybe_assoc) {
   73,864 ( 0.00%)                          self.lint_if_path_starts_with_module(
   21,104 ( 0.00%)                              crate_lint,
        .                                       path,
   10,552 ( 0.00%)                              path_span,
        .                                       second_binding,
        .                                   );
   31,656 ( 0.00%)                          return PathResult::NonModule(PartialRes::with_unresolved_segments(
   42,208 ( 0.00%)                              res,
   42,208 ( 0.00%)                              path.len() - i - 1,
        .                                   ));
        .                               } else {
        .                                   let label = format!(
        .                                       "`{}` is {} {}, not a module",
        .                                       ident,
        .                                       res.article(),
        .                                       res.descr(),
        .                                   );
-- line 2431 ----------------------------------------
-- line 2433 ----------------------------------------
        .                                   return PathResult::Failed {
        .                                       span: ident.span,
        .                                       label,
        .                                       suggestion: None,
        .                                       is_error_from_last_segment: is_last,
        .                                   };
        .                               }
        .                           }
   20,150 ( 0.00%)                  Err(Undetermined) => return PathResult::Indeterminate,
        .                           Err(Determined) => {
        .                               if let Some(ModuleOrUniformRoot::Module(module)) = module {
        .                                   if opt_ns.is_some() && !module.is_normal() {
        .                                       return PathResult::NonModule(PartialRes::with_unresolved_segments(
        .                                           module.res().unwrap(),
        .                                           path.len() - i,
        .                                       ));
        .                                   }
-- line 2449 ----------------------------------------
-- line 2612 ----------------------------------------
        .                                   label,
        .                                   suggestion,
        .                                   is_error_from_last_segment: is_last,
        .                               };
        .                           }
        .                       }
        .                   }
        .           
    2,684 ( 0.00%)          self.lint_if_path_starts_with_module(crate_lint, path, path_span, second_binding);
        .           
    1,464 ( 0.00%)          PathResult::Module(match module {
      488 ( 0.00%)              Some(module) => module,
        .                       None if path.is_empty() => ModuleOrUniformRoot::CurrentScope,
        .                       _ => span_bug!(path_span, "resolve_path: non-empty path `{:?}` has no module", path),
        .                   })
  193,896 ( 0.00%)      }
        .           
  129,576 ( 0.00%)      fn lint_if_path_starts_with_module(
        .                   &mut self,
        .                   crate_lint: CrateLint,
        .                   path: &[Segment],
        .                   path_span: Span,
        .                   second_binding: Option<&NameBinding<'_>>,
        .               ) {
   53,990 ( 0.00%)          let (diag_id, diag_span) = match crate_lint {
        .                       CrateLint::No => return,
        .                       CrateLint::SimplePath(id) => (id, path_span),
        .                       CrateLint::UsePath { root_id, root_span } => (root_id, root_span),
        .                       CrateLint::QPathTrait { qpath_id, qpath_span } => (qpath_id, qpath_span),
        .                   };
        .           
   10,795 ( 0.00%)          let first_name = match path.get(0) {
        .                       // In the 2018 edition this lint is a hard error, so nothing to do
   21,590 ( 0.00%)              Some(seg) if seg.ident.span.rust_2015() && self.session.rust_2015() => seg.ident.name,
        .                       _ => return,
        .                   };
        .           
        .                   // We're only interested in `use` paths which should start with
        .                   // `{{root}}` currently.
        .                   if first_name != kw::PathRoot {
        .                       return;
        .                   }
-- line 2653 ----------------------------------------
-- line 2679 ----------------------------------------
        .                   self.lint_buffer.buffer_lint_with_diagnostic(
        .                       lint::builtin::ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,
        .                       diag_id,
        .                       diag_span,
        .                       "absolute paths must start with `self`, `super`, \
        .                        `crate`, or an external crate name in the 2018 edition",
        .                       diag,
        .                   );
   86,384 ( 0.00%)      }
        .           
        .               // Validate a local resolution (from ribs).
        .               fn validate_res_from_ribs(
        .                   &mut self,
        .                   rib_index: usize,
        .                   rib_ident: Ident,
        .                   mut res: Res,
        .                   record_used: bool,
        .                   span: Span,
        .                   original_rib_ident_def: Ident,
        .                   all_ribs: &[Rib<'a>],
        .               ) -> Res {
        .                   const CG_BUG_STR: &str = "min_const_generics resolve check didn't stop compilation";
        .                   debug!("validate_res_from_ribs({:?})", res);
    1,496 ( 0.00%)          let ribs = &all_ribs[rib_index + 1..];
        .           
        .                   // An invalid forward use of a generic parameter from a previous default.
    2,992 ( 0.00%)          if let ForwardGenericParamBanRibKind = all_ribs[rib_index].kind {
        .                       if record_used {
        .                           let res_error = if rib_ident.name == kw::SelfUpper {
        .                               ResolutionError::SelfInGenericParamDefault
        .                           } else {
        .                               ResolutionError::ForwardDeclaredGenericParam
        .                           };
        .                           self.report_error(span, res_error);
        .                       }
        .                       assert_eq!(res, Res::Err);
        .                       return Res::Err;
        .                   }
        .           
    5,039 ( 0.00%)          match res {
        .                       Res::Local(_) => {
        .                           use ResolutionError::*;
      633 ( 0.00%)                  let mut res_err = None;
        .           
        .                           for rib in ribs {
    6,240 ( 0.00%)                      match rib.kind {
        .                                   NormalRibKind
        .                                   | ClosureOrAsyncRibKind
        .                                   | ModuleRibKind(..)
        .                                   | MacroDefinition(..)
        .                                   | ForwardGenericParamBanRibKind => {
        .                                       // Nothing to do. Continue.
        .                                   }
        .                                   ItemRibKind(_) | FnItemRibKind | AssocItemRibKind => {
        .                                       // This was an attempt to access an upvar inside a
        .                                       // named function item. This is not allowed, so we
        .                                       // report an error.
      505 ( 0.00%)                              if record_used {
        .                                           // We don't immediately trigger a resolve error, because
        .                                           // we want certain other resolution errors (namely those
        .                                           // emitted for `ConstantItemRibKind` below) to take
        .                                           // precedence.
        .                                           res_err = Some(CannotCaptureDynamicEnvironmentInFnItem);
        .                                       }
        .                                   }
        .                                   ConstantItemRibKind(_, item) => {
-- line 2744 ----------------------------------------
-- line 2773 ----------------------------------------
        .                                   ConstParamTyRibKind => {
        .                                       if record_used {
        .                                           self.report_error(span, ParamInTyOfConstParam(rib_ident.name));
        .                                       }
        .                                       return Res::Err;
        .                                   }
        .                               }
        .                           }
      998 ( 0.00%)                  if let Some(res_err) = res_err {
        .                               self.report_error(span, res_err);
        .                               return Res::Err;
        .                           }
        .                       }
        .                       Res::Def(DefKind::TyParam, _) | Res::SelfTy(..) => {
        .                           for rib in ribs {
      728 ( 0.00%)                      let has_generic_params: HasGenericParams = match rib.kind {
        .                                   NormalRibKind
        .                                   | ClosureOrAsyncRibKind
        .                                   | AssocItemRibKind
        .                                   | ModuleRibKind(..)
        .                                   | MacroDefinition(..)
        .                                   | ForwardGenericParamBanRibKind => {
        .                                       // Nothing to do. Continue.
        .                                       continue;
-- line 2796 ----------------------------------------
-- line 2799 ----------------------------------------
        .                                   ConstantItemRibKind(trivial, _) => {
        .                                       let features = self.session.features_untracked();
        .                                       // HACK(min_const_generics): We currently only allow `N` or `{ N }`.
        .                                       if !(trivial || features.generic_const_exprs) {
        .                                           // HACK(min_const_generics): If we encounter `Self` in an anonymous constant
        .                                           // we can't easily tell if it's generic at this stage, so we instead remember
        .                                           // this and then enforce the self type to be concrete later on.
        .                                           if let Res::SelfTy(trait_def, Some((impl_def, _))) = res {
      104 ( 0.00%)                                      res = Res::SelfTy(trait_def, Some((impl_def, true)));
        .                                           } else {
        .                                               if record_used {
        .                                                   self.report_error(
        .                                                       span,
        .                                                       ResolutionError::ParamInNonTrivialAnonConst {
        .                                                           name: rib_ident.name,
        .                                                           is_type: true,
        .                                                       },
-- line 2815 ----------------------------------------
-- line 2912 ----------------------------------------
        .                                       ),
        .                                   );
        .                               }
        .                               return Res::Err;
        .                           }
        .                       }
        .                       _ => {}
        .                   }
    2,992 ( 0.00%)          res
        .               }
        .           
        .               fn record_partial_res(&mut self, node_id: NodeId, resolution: PartialRes) {
        .                   debug!("(recording res) recording {:?} for {}", resolution, node_id);
   26,654 ( 0.00%)          if let Some(prev_res) = self.partial_res_map.insert(node_id, resolution) {
        .                       panic!("path resolved multiple times ({:?} before, {:?} now)", prev_res, resolution);
        .                   }
        .               }
        .           
        .               fn record_pat_span(&mut self, node: NodeId, span: Span) {
        .                   debug!("(recording pat) recording {:?} for {:?}", node, span);
        .                   self.pat_span_map.insert(node, span);
        .               }
        .           
      160 ( 0.00%)      fn is_accessible_from(&self, vis: ty::Visibility, module: Module<'a>) -> bool {
   67,416 ( 0.00%)          vis.is_accessible_from(module.nearest_parent_mod(), self)
      144 ( 0.00%)      }
        .           
        .               fn set_binding_parent_module(&mut self, binding: &'a NameBinding<'a>, module: Module<'a>) {
    5,024 ( 0.00%)          if let Some(old_module) = self.binding_parent_modules.insert(PtrKey(binding), module) {
        .                       if !ptr::eq(module, old_module) {
        .                           span_bug!(binding.span, "parent module is reset for binding");
        .                       }
        .                   }
        .               }
        .           
        .               fn disambiguate_macro_rules_vs_modularized(
        .                   &self,
-- line 2948 ----------------------------------------
-- line 2959 ----------------------------------------
        .                       (Some(macro_rules), Some(modularized)) => {
        .                           macro_rules.nearest_parent_mod() == modularized.nearest_parent_mod()
        .                               && modularized.is_ancestor_of(macro_rules)
        .                       }
        .                       _ => false,
        .                   }
        .               }
        .           
        7 ( 0.00%)      fn report_errors(&mut self, krate: &Crate) {
        .                   self.report_with_use_injections(krate);
        .           
        6 ( 0.00%)          for &(span_use, span_def) in &self.macro_expanded_macro_export_errors {
        .                       let msg = "macro-expanded `macro_export` macros from the current crate \
        .                                  cannot be referred to by absolute paths";
        .                       self.lint_buffer.buffer_lint_with_diagnostic(
        .                           lint::builtin::MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS,
        .                           CRATE_NODE_ID,
        .                           span_use,
        .                           msg,
        .                           BuiltinLintDiagnostics::MacroExpandedMacroExportsAccessedByAbsolutePaths(span_def),
-- line 2978 ----------------------------------------
-- line 2984 ----------------------------------------
        .                   }
        .           
        .                   let mut reported_spans = FxHashSet::default();
        .                   for error in &self.privacy_errors {
        .                       if reported_spans.insert(error.dedup_span) {
        .                           self.report_privacy_error(error);
        .                       }
        .                   }
        8 ( 0.00%)      }
        .           
        .               fn report_with_use_injections(&mut self, krate: &Crate) {
        .                   for UseError { mut err, candidates, def_id, instead, suggestion } in
       10 ( 0.00%)              self.use_injections.drain(..)
        .                   {
        .                       let (span, found_use) = if let Some(def_id) = def_id.as_local() {
        .                           UsePlacementFinder::check(krate, self.def_id_to_node_id[def_id])
        .                       } else {
        .                           (None, false)
        .                       };
        .                       if !candidates.is_empty() {
        .                           diagnostics::show_candidates(
-- line 3004 ----------------------------------------
-- line 3284 ----------------------------------------
        .                       }
        .           
        .                       return;
        .                   }
        .           
        .                   err.span_suggestion(span, message, String::new(), Applicability::MachineApplicable);
        .               }
        .           
    2,440 ( 0.00%)      fn extern_prelude_get(
        .                   &mut self,
        .                   ident: Ident,
        .                   speculative: bool,
        .               ) -> Option<&'a NameBinding<'a>> {
    1,220 ( 0.00%)          if ident.is_path_segment_keyword() {
        .                       // Make sure `self`, `super` etc produce an error when passed to here.
        .                       return None;
        .                   }
    2,196 ( 0.00%)          self.extern_prelude.get(&ident.normalize_to_macros_2_0()).cloned().and_then(|entry| {
       64 ( 0.00%)              if let Some(binding) = entry.extern_crate_item {
        .                           if !speculative && entry.introduced_by_item {
        .                               self.record_use(ident, binding, false);
        .                           }
        .                           Some(binding)
        .                       } else {
       64 ( 0.00%)                  let crate_id = if !speculative {
       16 ( 0.00%)                      let Some(crate_id) =
       24 ( 0.00%)                          self.crate_loader.process_path_extern(ident.name, ident.span) else { return Some(self.dummy_binding); };
        .                               crate_id
        .                           } else {
       96 ( 0.00%)                      self.crate_loader.maybe_process_path_extern(ident.name)?
        .                           };
        .                           let crate_root = self.expect_module(crate_id.as_def_id());
        .                           Some(
        .                               (crate_root, ty::Visibility::Public, DUMMY_SP, LocalExpnId::ROOT)
       32 ( 0.00%)                          .to_name_binding(self.arenas),
        .                           )
        .                       }
        .                   })
    1,952 ( 0.00%)      }
        .           
        .               /// Rustdoc uses this to resolve things in a recoverable way. `ResolutionError<'a>`
        .               /// isn't something that can be returned because it can't be made to live that long,
        .               /// and also it's a private type. Fortunately rustdoc doesn't need to know the error,
        .               /// just that an error occurred.
        .               // FIXME(Manishearth): intra-doc links won't get warned of epoch changes.
        .               pub fn resolve_str_path_error(
        .                   &mut self,
-- line 3330 ----------------------------------------
-- line 3422 ----------------------------------------
        .               #[inline]
        .               pub fn opt_span(&self, def_id: DefId) -> Option<Span> {
        .                   def_id.as_local().map(|def_id| self.definitions.def_span(def_id))
        .               }
        .           
        .               /// Checks if an expression refers to a function marked with
        .               /// `#[rustc_legacy_const_generics]` and returns the argument index list
        .               /// from the attribute.
  161,648 ( 0.00%)      pub fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>> {
   80,824 ( 0.00%)          if let ExprKind::Path(None, path) = &expr.kind {
        .                       // Don't perform legacy const generics rewriting if the path already
        .                       // has generic arguments.
   20,206 ( 0.00%)              if path.segments.last().unwrap().args.is_some() {
        .                           return None;
        .                       }
        .           
        .                       let partial_res = self.partial_res_map.get(&expr.id)?;
   40,412 ( 0.00%)              if partial_res.unresolved_segments() != 0 {
        .                           return None;
        .                       }
        .           
    1,152 ( 0.00%)              if let Res::Def(def::DefKind::Fn, def_id) = partial_res.base_res() {
        .                           // We only support cross-crate argument rewriting. Uses
        .                           // within the same crate should be updated to use the new
        .                           // const generics style.
      126 ( 0.00%)                  if def_id.is_local() {
        .                               return None;
        .                           }
        .           
        .                           if let Some(v) = self.legacy_const_generic_args.get(&def_id) {
        .                               return v.clone();
        .                           }
        .           
      156 ( 0.00%)                  let attr = self
        .                               .cstore()
       52 ( 0.00%)                      .item_attrs_untracked(def_id, self.session)
        .                               .find(|a| a.has_name(sym::rustc_legacy_const_generics))?;
        .                           let mut ret = Vec::new();
        .                           for meta in attr.meta_item_list()? {
        .                               match meta.literal()?.kind {
        .                                   LitKind::Int(a, _) => ret.push(a as usize),
        .                                   _ => panic!("invalid arg index"),
        .                               }
        .                           }
        .                           // Cache the lookup to avoid parsing attributes for an iterm multiple times.
        .                           self.legacy_const_generic_args.insert(def_id, Some(ret.clone()));
        .                           return Some(ret);
        .                       }
        .                   }
        .                   None
  181,854 ( 0.00%)      }
        .           
        7 ( 0.00%)      fn resolve_main(&mut self) {
        2 ( 0.00%)          let module = self.graph_root;
        .                   let ident = Ident::with_dummy_span(sym::main);
        .                   let parent_scope = &ParentScope::module(module, self);
        .           
        .                   let name_binding = match self.resolve_ident_in_module(
        .                       ModuleOrUniformRoot::Module(module),
        .                       ident,
        .                       ValueNS,
        .                       parent_scope,
-- line 3483 ----------------------------------------
-- line 3490 ----------------------------------------
        .           
        .                   let res = name_binding.res();
        .                   let is_import = name_binding.is_import();
        .                   let span = name_binding.span;
        .                   if let Res::Def(DefKind::Fn, _) = res {
        .                       self.record_use(ident, name_binding, false);
        .                   }
        .                   self.main_def = Some(MainDefinition { res, is_import, span });
        8 ( 0.00%)      }
        .           }
        .           
        .           fn names_to_string(names: &[Symbol]) -> String {
        .               let mut result = String::new();
        .               for (i, name) in names.iter().filter(|name| **name != kw::PathRoot).enumerate() {
        .                   if i > 0 {
        .                       result.push_str("::");
        .                   }
-- line 3506 ----------------------------------------
-- line 3558 ----------------------------------------
        .               /// This is the "trait item" from a fully qualified path. For example,
        .               /// we might be resolving  `X::Y::Z` from a path like `<T as X::Y>::Z`.
        .               /// The `path_span` is the span of the to the trait itself (`X::Y`).
        .               QPathTrait { qpath_id: NodeId, qpath_span: Span },
        .           }
        .           
        .           impl CrateLint {
        .               fn node_id(&self) -> Option<NodeId> {
   33,741 ( 0.00%)          match *self {
        .                       CrateLint::No => None,
        .                       CrateLint::SimplePath(id)
        .                       | CrateLint::UsePath { root_id: id, .. }
        .                       | CrateLint::QPathTrait { qpath_id: id, .. } => Some(id),
        .                   }
        .               }
        .           }
        .           
        .           pub fn provide(providers: &mut Providers) {
        .               late::lifetimes::provide(providers);
        1 ( 0.00%)  }

1,904,150 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_pretty/src/pp/ring.rs
--------------------------------------------------------------------------------
Ir                 

-- line 22 ----------------------------------------
        .                   RingBuffer { data: VecDeque::new(), offset: 0 }
        .               }
        .           
        .               pub fn is_empty(&self) -> bool {
        .                   self.data.is_empty()
        .               }
        .           
        .               pub fn push(&mut self, value: T) -> usize {
  734,502 ( 0.02%)          let index = self.offset + self.data.len();
2,264,854 ( 0.06%)          self.data.push_back(value);
        .                   index
        .               }
        .           
        .               pub fn clear(&mut self) {
       52 ( 0.00%)          self.data.clear();
        .               }
        .           
        .               pub fn index_of_first(&self) -> usize {
        .                   self.offset
        .               }
        .           
        .               pub fn first(&self) -> Option<&T> {
        .                   self.data.front()
        .               }
        .           
        .               pub fn first_mut(&mut self) -> Option<&mut T> {
        .                   self.data.front_mut()
        .               }
        .           
1,836,255 ( 0.05%)      pub fn pop_first(&mut self) -> Option<T> {
        .                   let first = self.data.pop_front()?;
1,469,004 ( 0.04%)          self.offset += 1;
2,203,506 ( 0.06%)          Some(first)
2,570,757 ( 0.07%)      }
        .           
        .               pub fn last(&self) -> Option<&T> {
        .                   self.data.back()
        .               }
        .           
        .               pub fn last_mut(&mut self) -> Option<&mut T> {
        .                   self.data.back_mut()
        .               }
-- line 63 ----------------------------------------

1,836,255 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_pretty/src/pp/ring.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs
--------------------------------------------------------------------------------
Ir                 

-- line 55 ----------------------------------------
        .                   Immediate::Scalar(ScalarMaybeUninit::from_pointer(p, cx))
        .               }
        .           
        .               pub fn from_maybe_pointer(p: Pointer<Option<Tag>>, cx: &impl HasDataLayout) -> Self {
        .                   Immediate::Scalar(ScalarMaybeUninit::from_maybe_pointer(p, cx))
        .               }
        .           
        .               pub fn new_slice(val: Scalar<Tag>, len: u64, cx: &impl HasDataLayout) -> Self {
    8,078 ( 0.00%)          Immediate::ScalarPair(val.into(), Scalar::from_machine_usize(len, cx).into())
        .               }
        .           
        .               pub fn new_dyn_trait(
        .                   val: Scalar<Tag>,
        .                   vtable: Pointer<Option<Tag>>,
        .                   cx: &impl HasDataLayout,
        .               ) -> Self {
        .                   Immediate::ScalarPair(val.into(), ScalarMaybeUninit::from_maybe_pointer(vtable, cx))
        .               }
        .           
        .               #[inline]
        .               pub fn to_scalar_or_uninit(self) -> ScalarMaybeUninit<Tag> {
  301,056 ( 0.01%)          match self {
  120,432 ( 0.00%)              Immediate::Scalar(val) => val,
        .                       Immediate::ScalarPair(..) => bug!("Got a scalar pair where a scalar was expected"),
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn to_scalar(self) -> InterpResult<'tcx, Scalar<Tag>> {
        .                   self.to_scalar_or_uninit().check_init()
        .               }
-- line 85 ----------------------------------------
-- line 159 ----------------------------------------
        .               fn deref(&self) -> &Immediate<Tag> {
        .                   &self.imm
        .               }
        .           }
        .           
        .           /// An `Operand` is the result of computing a `mir::Operand`. It can be immediate,
        .           /// or still in memory. The latter is an optimization, to delay reading that chunk of
        .           /// memory and to avoid having to store arbitrary-sized data here.
    9,933 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, HashStable, Hash, Debug)]
        .           pub enum Operand<Tag: Provenance = AllocId> {
        .               Immediate(Immediate<Tag>),
        .               Indirect(MemPlace<Tag>),
        .           }
        .           
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
        .           pub struct OpTy<'tcx, Tag: Provenance = AllocId> {
        .               op: Operand<Tag>, // Keep this private; it helps enforce invariants.
-- line 175 ----------------------------------------
-- line 185 ----------------------------------------
        .               fn deref(&self) -> &Operand<Tag> {
        .                   &self.op
        .               }
        .           }
        .           
        .           impl<'tcx, Tag: Provenance> From<MPlaceTy<'tcx, Tag>> for OpTy<'tcx, Tag> {
        .               #[inline(always)]
        .               fn from(mplace: MPlaceTy<'tcx, Tag>) -> Self {
    4,752 ( 0.00%)          OpTy { op: Operand::Indirect(*mplace), layout: mplace.layout }
        .               }
        .           }
        .           
        .           impl<'tcx, Tag: Provenance> From<&'_ MPlaceTy<'tcx, Tag>> for OpTy<'tcx, Tag> {
        .               #[inline(always)]
        .               fn from(mplace: &MPlaceTy<'tcx, Tag>) -> Self {
        .                   OpTy { op: Operand::Indirect(**mplace), layout: mplace.layout }
        .               }
-- line 201 ----------------------------------------
-- line 248 ----------------------------------------
        .           
        .           impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {
        .               /// Try reading an immediate in memory; this is interesting particularly for `ScalarPair`.
        .               /// Returns `None` if the layout does not permit loading this as a value.
        .               fn try_read_immediate_from_mplace(
        .                   &self,
        .                   mplace: &MPlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, Option<ImmTy<'tcx, M::PointerTag>>> {
  152,984 ( 0.00%)          if mplace.layout.is_unsized() {
        .                       // Don't touch unsized
        .                       return Ok(None);
        .                   }
        .           
  215,514 ( 0.01%)          let alloc = match self.get_alloc(mplace)? {
  359,185 ( 0.01%)              Some(ptr) => ptr,
        .                       None => {
        .                           return Ok(Some(ImmTy {
        .                               // zero-sized type
        9 ( 0.00%)                      imm: Scalar::ZST.into(),
        .                               layout: mplace.layout,
        .                           }));
        .                       }
        .                   };
        .           
  572,388 ( 0.01%)          match mplace.layout.abi {
        .                       Abi::Scalar(..) => {
   30,111 ( 0.00%)                  let scalar = alloc.read_scalar(alloc_range(Size::ZERO, mplace.layout.size))?;
        .                           Ok(Some(ImmTy { imm: scalar.into(), layout: mplace.layout }))
        .                       }
    3,462 ( 0.00%)              Abi::ScalarPair(a, b) => {
        .                           // We checked `ptr_align` above, so all fields will have the alignment they need.
        .                           // We would anyway check against `ptr_align.restrict_for_offset(b_offset)`,
        .                           // which `ptr.offset(b_offset)` cannot possibly fail to satisfy.
        .                           let (a, b) = (a.value, b.value);
        .                           let (a_size, b_size) = (a.size(self), b.size(self));
        .                           let b_offset = a_size.align_to(b.align(self).abi);
    2,308 ( 0.00%)                  assert!(b_offset.bytes() > 0); // we later use the offset to tell apart the fields
        .                           let a_val = alloc.read_scalar(alloc_range(Size::ZERO, a_size))?;
    3,462 ( 0.00%)                  let b_val = alloc.read_scalar(alloc_range(b_offset, b_size))?;
    5,770 ( 0.00%)                  Ok(Some(ImmTy { imm: Immediate::ScalarPair(a_val, b_val), layout: mplace.layout }))
        .                       }
        .                       _ => Ok(None),
        .                   }
        .               }
        .           
        .               /// Try returning an immediate for the operand.
        .               /// If the layout does not permit loading this as an immediate, return where in memory
        .               /// we can find the data.
        .               /// Note that for a given layout, this operation will either always fail or always
        .               /// succeed!  Whether it succeeds depends on whether the layout can be represented
        .               /// in an `Immediate`, not on which data is stored there currently.
2,819,349 ( 0.07%)      pub fn try_read_immediate(
        .                   &self,
        .                   src: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, Result<ImmTy<'tcx, M::PointerTag>, MPlaceTy<'tcx, M::PointerTag>>> {
5,638,698 ( 0.14%)          Ok(match src.try_as_mplace() {
        .                       Ok(ref mplace) => {
  143,676 ( 0.00%)                  if let Some(val) = self.try_read_immediate_from_mplace(mplace)? {
        .                               Ok(val)
        .                           } else {
        .                               Err(*mplace)
        .                           }
        .                       }
2,414,230 ( 0.06%)              Err(val) => Ok(val),
        .                   })
2,819,349 ( 0.07%)      }
        .           
        .               /// Read an immediate from a place, asserting that that is possible with the given layout.
        .               #[inline(always)]
        .               pub fn read_immediate(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, ImmTy<'tcx, M::PointerTag>> {
  788,524 ( 0.02%)          if let Ok(imm) = self.try_read_immediate(op)? {
1,093,060 ( 0.03%)              Ok(imm)
        .                   } else {
        .                       span_bug!(self.cur_span(), "primitive read failed for type: {:?}", op.layout.ty);
        .                   }
        .               }
        .           
        .               /// Read a scalar from a place
  331,188 ( 0.01%)      pub fn read_scalar(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, ScalarMaybeUninit<M::PointerTag>> {
   30,108 ( 0.00%)          Ok(self.read_immediate(op)?.to_scalar_or_uninit())
  270,972 ( 0.01%)      }
        .           
        .               /// Read a pointer from a place.
        .               pub fn read_pointer(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, Pointer<Option<M::PointerTag>>> {
        .                   Ok(self.scalar_to_ptr(self.read_scalar(op)?.check_init()?))
        .               }
-- line 342 ----------------------------------------
-- line 345 ----------------------------------------
        .               pub fn read_str(&self, mplace: &MPlaceTy<'tcx, M::PointerTag>) -> InterpResult<'tcx, &str> {
        .                   let len = mplace.len(self)?;
        .                   let bytes = self.memory.read_bytes(mplace.ptr, Size::from_bytes(len))?;
        .                   let str = std::str::from_utf8(bytes).map_err(|err| err_ub!(InvalidStr(err)))?;
        .                   Ok(str)
        .               }
        .           
        .               /// Projection functions
  116,710 ( 0.00%)      pub fn operand_field(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .                   field: usize,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   let base = match op.try_as_mplace() {
        .                       Ok(ref mplace) => {
        .                           // We can reuse the mplace field computation logic for indirect operands.
        .                           let field = self.mplace_field(mplace, field)?;
  128,381 ( 0.00%)                  return Ok(field.into());
        .                       }
        .                       Err(value) => value,
        .                   };
        .           
        .                   let field_layout = op.layout.field(self, field);
        .                   if field_layout.is_zst() {
        .                       let immediate = Scalar::ZST.into();
        .                       return Ok(OpTy { op: Operand::Immediate(immediate), layout: field_layout });
-- line 370 ----------------------------------------
-- line 381 ----------------------------------------
        .                       Immediate::Scalar(val) => span_bug!(
        .                           self.cur_span(),
        .                           "field access on non aggregate {:#?}, {:#?}",
        .                           val,
        .                           op.layout
        .                       ),
        .                   };
        .                   Ok(OpTy { op: Operand::Immediate(immediate), layout: field_layout })
  105,039 ( 0.00%)      }
        .           
        .               pub fn operand_index(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .                   index: u64,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   if let Ok(index) = usize::try_from(index) {
        .                       // We can just treat this as a field.
-- line 397 ----------------------------------------
-- line 413 ----------------------------------------
        .                       Ok(ref mplace) => self.mplace_downcast(mplace, variant)?.into(),
        .                       Err(..) => {
        .                           let layout = op.layout.for_variant(self, variant);
        .                           OpTy { layout, ..*op }
        .                       }
        .                   })
        .               }
        .           
  120,420 ( 0.00%)      pub fn operand_projection(
        .                   &self,
        .                   base: &OpTy<'tcx, M::PointerTag>,
        .                   proj_elem: mir::PlaceElem<'tcx>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   use rustc_middle::mir::ProjectionElem::*;
  481,680 ( 0.01%)          Ok(match proj_elem {
        .                       Field(field, _) => self.operand_field(base, field.index())?,
        .                       Downcast(_, variant) => self.operand_downcast(base, variant)?,
        .                       Deref => self.deref_operand(base)?.into(),
        .                       Subslice { .. } | ConstantIndex { .. } | Index(_) => {
        .                           // The rest should only occur as mplace, we do not use Immediates for types
        .                           // allowing such operations.  This matches place_projection forcing an allocation.
        .                           let mplace = base.assert_mem_place();
  240,840 ( 0.01%)                  self.mplace_projection(&mplace, proj_elem)?.into()
        .                       }
        .                   })
  120,420 ( 0.00%)      }
        .           
        .               /// Converts a repr(simd) operand into an operand where `place_index` accesses the SIMD elements.
        .               /// Also returns the number of elements.
        .               pub fn operand_to_simd(
        .                   &self,
        .                   base: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, (MPlaceTy<'tcx, M::PointerTag>, u64)> {
        .                   // Basically we just transmute this place into an array following simd_size_and_type.
-- line 446 ----------------------------------------
-- line 449 ----------------------------------------
        .                   self.mplace_to_simd(&base.assert_mem_place())
        .               }
        .           
        .               /// Read from a local. Will not actually access the local if reading from a ZST.
        .               /// Will not access memory, instead an indirect `Operand` is returned.
        .               ///
        .               /// This is public because it is used by [priroda](https://github.com/oli-obk/priroda) to get an
        .               /// OpTy from a local
2,261,799 ( 0.06%)      pub fn access_local(
        .                   &self,
        .                   frame: &super::Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>,
        .                   local: mir::Local,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   let layout = self.layout_of_local(frame, local, layout)?;
   70,678 ( 0.00%)          let op = if layout.is_zst() {
        .                       // Do not read from ZST, they might not be initialized
        5 ( 0.00%)              Operand::Immediate(Scalar::ZST.into())
        .                   } else {
        .                       M::access_local(&self, frame, local)?
        .                   };
3,267,043 ( 0.08%)          Ok(OpTy { op, layout })
2,010,488 ( 0.05%)      }
        .           
        .               /// Every place can be read from, so we can turn them into an operand.
        .               /// This will definitely return `Indirect` if the place is a `Ptr`, i.e., this
        .               /// will never actually read from memory.
        .               #[inline(always)]
        .               pub fn place_to_op(
        .                   &self,
        .                   place: &PlaceTy<'tcx, M::PointerTag>,
-- line 479 ----------------------------------------
-- line 484 ----------------------------------------
        .                           *self.access_local(&self.stack()[frame], local, None)?
        .                       }
        .                   };
        .                   Ok(OpTy { op, layout: place.layout })
        .               }
        .           
        .               // Evaluate a place with the goal of reading from it.  This lets us sometimes
        .               // avoid allocations.
1,690,144 ( 0.04%)      pub fn eval_place_to_op(
        .                   &self,
        .                   place: mir::Place<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   // Do not use the layout passed in as argument if the base we are looking at
        .                   // here is not the entire place.
  211,268 ( 0.01%)          let layout = if place.projection.is_empty() { layout } else { None };
        .           
  633,804 ( 0.02%)          let base_op = self.access_local(self.frame(), place.local, layout)?;
        .           
        .                   let op = place
        .                       .projection
        .                       .iter()
  270,945 ( 0.01%)              .try_fold(base_op, |op, elem| self.operand_projection(&op, elem))?;
        .           
        .                   trace!("eval_place_to_op: got {:?}", *op);
        .                   // Sanity-check the type we ended up with.
        .                   debug_assert!(mir_assign_valid_types(
        .                       *self.tcx,
        .                       self.param_env,
        .                       self.layout_of(self.subst_from_current_frame_and_normalize_erasing_regions(
        .                           place.ty(&self.frame().body.local_decls, *self.tcx).ty
        .                       )?)?,
        .                       op.layout,
        .                   ));
  633,804 ( 0.02%)          Ok(op)
1,901,412 ( 0.05%)      }
        .           
        .               /// Evaluate the operand, returning a place where you can then find the data.
        .               /// If you already know the layout, you can save two table lookups
        .               /// by passing it in here.
        .               #[inline]
2,448,522 ( 0.06%)      pub fn eval_operand(
        .                   &self,
        .                   mir_op: &mir::Operand<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   use rustc_middle::mir::Operand::*;
  563,958 ( 0.01%)          let op = match *mir_op {
        .                       // FIXME: do some more logic on `move` to invalidate the old location
1,046,419 ( 0.03%)              Copy(place) | Move(place) => self.eval_place_to_op(place, layout)?,
        .           
        .                       Constant(ref constant) => {
        .                           let val =
1,060,665 ( 0.03%)                      self.subst_from_current_frame_and_normalize_erasing_regions(constant.literal)?;
        .                           // This can still fail:
        .                           // * During ConstProp, with `TooGeneric` or since the `requried_consts` were not all
        .                           //   checked yet.
        .                           // * During CTFE, since promoteds in `const`/`static` initializer bodies can fail.
        .           
        .                           self.mir_const_to_op(&val, layout)?
        .                       }
        .                   };
        .                   trace!("{:?}: {:?}", mir_op, *op);
3,635,964 ( 0.09%)          Ok(op)
1,632,348 ( 0.04%)      }
        .           
        .               /// Evaluate a bunch of operands at once
        .               pub(super) fn eval_operands(
        .                   &self,
        .                   ops: &[mir::Operand<'tcx>],
        .               ) -> InterpResult<'tcx, Vec<OpTy<'tcx, M::PointerTag>>> {
        .                   ops.iter().map(|op| self.eval_operand(op, None)).collect()
        .               }
        .           
        .               // Used when the miri-engine runs into a constant and for extracting information from constants
        .               // in patterns via the `const_eval` module
        .               /// The `val` and `layout` are assumed to already be in our interpreter
        .               /// "universe" (param_env).
  848,532 ( 0.02%)      pub fn const_to_op(
        .                   &self,
        .                   val: &ty::Const<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
  353,555 ( 0.01%)          match val.val {
        .                       ty::ConstKind::Param(_) | ty::ConstKind::Bound(..) => throw_inval!(TooGeneric),
        .                       ty::ConstKind::Error(_) => throw_inval!(AlreadyReported(ErrorReported)),
        .                       ty::ConstKind::Unevaluated(uv) => {
        .                           let instance = self.resolve(uv.def, uv.substs)?;
        .                           Ok(self.eval_to_allocation(GlobalId { instance, promoted: uv.promoted })?.into())
        .                       }
        .                       ty::ConstKind::Infer(..) | ty::ConstKind::Placeholder(..) => {
        .                           span_bug!(self.cur_span(), "const_to_op: Unexpected ConstKind {:?}", val)
        .                       }
  707,110 ( 0.02%)              ty::ConstKind::Value(val_val) => self.const_val_to_op(val_val, val.ty, layout),
        .                   }
  636,399 ( 0.02%)      }
        .           
        .               pub fn mir_const_to_op(
        .                   &self,
        .                   val: &mir::ConstantKind<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
  141,422 ( 0.00%)          match val {
  282,844 ( 0.01%)              mir::ConstantKind::Ty(ct) => self.const_to_op(ct, layout),
        .                       mir::ConstantKind::Val(val, ty) => self.const_val_to_op(*val, ty, layout),
        .                   }
        .               }
        .           
  707,110 ( 0.02%)      crate fn const_val_to_op(
        .                   &self,
        .                   val_val: ConstValue<'tcx>,
        .                   ty: Ty<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   // Other cases need layout.
        .                   let tag_scalar = |scalar| -> InterpResult<'tcx, _> {
  420,804 ( 0.01%)              Ok(match scalar {
        .                           Scalar::Ptr(ptr, size) => Scalar::Ptr(self.global_base_pointer(ptr)?, size),
  210,402 ( 0.01%)                  Scalar::Int(int) => Scalar::Int(int),
        .                       })
        .                   };
  120,156 ( 0.00%)          let layout = from_known_layout(self.tcx, self.param_env, layout, || self.layout_of(ty))?;
  213,287 ( 0.01%)          let op = match val_val {
        .                       ConstValue::ByRef { alloc, offset } => {
        .                           let id = self.tcx.create_memory_alloc(alloc);
        .                           // We rely on mutability being set correctly in that allocation to prevent writes
        .                           // where none should happen.
        .                           let ptr = self.global_base_pointer(Pointer::new(id, offset))?;
        .                           Operand::Indirect(MemPlace::from_ptr(ptr.into(), layout.align.abi))
        .                       }
  631,206 ( 0.02%)              ConstValue::Scalar(x) => Operand::Immediate(tag_scalar(x)?.into()),
    1,731 ( 0.00%)              ConstValue::Slice { data, start, end } => {
        .                           // We rely on mutability being set correctly in `data` to prevent writes
        .                           // where none should happen.
        .                           let ptr = Pointer::new(
    1,731 ( 0.00%)                      self.tcx.create_memory_alloc(data),
        .                               Size::from_bytes(start), // offset: `start`
        .                           );
        .                           Operand::Immediate(Immediate::new_slice(
        .                               Scalar::from_pointer(self.global_base_pointer(ptr)?, &*self.tcx),
        .                               u64::try_from(end.checked_sub(start).unwrap()).unwrap(), // len: `end - start`
        .                               self,
        .                           ))
        .                       }
        .                   };
1,484,931 ( 0.04%)          Ok(OpTy { op, layout })
  565,688 ( 0.01%)      }
        .           
        .               /// Read discriminant, return the runtime value as well as the variant index.
        .               /// Can also legally be called on non-enums (e.g. through the discriminant_value intrinsic)!
        .               pub fn read_discriminant(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, (Scalar<M::PointerTag>, VariantIdx)> {
        .                   trace!("read_discriminant_value {:#?}", op.layout);
-- line 638 ----------------------------------------

6,407,706 ( 0.16%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 38 ----------------------------------------
        .           #[derive(Debug)]
        .           pub struct Token {
        .               pub kind: TokenKind,
        .               pub len: usize,
        .           }
        .           
        .           impl Token {
        .               fn new(kind: TokenKind, len: usize) -> Token {
1,653,165 ( 0.04%)          Token { kind, len }
        .               }
        .           }
        .           
        .           /// Enum representing common lexeme types.
        .           // perf note: Changing all `usize` to `u32` doesn't change performance. See #77629
  220,660 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
        .           pub enum TokenKind {
        .               // Multi-char tokens:
        .               /// "// comment"
        .               LineComment { doc_style: Option<DocStyle> },
        .               /// `/* block comment */`
        .               ///
        .               /// Block comments can be recursive, so the sequence like `/* /* */`
        .               /// will not be considered terminated and will result in a parsing error.
-- line 60 ----------------------------------------
-- line 192 ----------------------------------------
        .               /// Literal starts with "0x".
        .               Hexadecimal,
        .               /// Literal doesn't contain a prefix.
        .               Decimal,
        .           }
        .           
        .           /// `rustc` allows files to have a shebang, e.g. "#!/usr/bin/rustrun",
        .           /// but shebang isn't a part of rust syntax.
       14 ( 0.00%)  pub fn strip_shebang(input: &str) -> Option<usize> {
        .               // Shebang must start with `#!` literally, without any preceding whitespace.
        .               // For simplicity we consider any line starting with `#!` a shebang,
        .               // regardless of restrictions put on shebangs by specific platforms.
        .               if let Some(input_tail) = input.strip_prefix("#!") {
        .                   // Ok, this is a shebang but if the next non-whitespace token is `[`,
        .                   // then it may be valid Rust code, so consider it Rust code.
        .                   let next_non_whitespace_token = tokenize(input_tail).map(|tok| tok.kind).find(|tok| {
        .                       !matches!(
        .                           tok,
        .                           TokenKind::Whitespace
        .                               | TokenKind::LineComment { doc_style: None }
        .                               | TokenKind::BlockComment { doc_style: None, .. }
        .                       )
        .                   });
        1 ( 0.00%)          if next_non_whitespace_token != Some(TokenKind::OpenBracket) {
        .                       // No other choice than to consider this a shebang.
        .                       return Some(2 + input_tail.lines().next().unwrap_or_default().len());
        .                   }
        .               }
        .               None
       16 ( 0.00%)  }
        .           
        .           /// Parses the first token from the provided input string.
  551,052 ( 0.01%)  pub fn first_token(input: &str) -> Token {
        .               debug_assert!(!input.is_empty());
  183,684 ( 0.00%)      Cursor::new(input).advance_token()
  734,736 ( 0.02%)  }
        .           
        .           /// Creates an iterator that produces tokens from the input string.
        .           pub fn tokenize(input: &str) -> impl Iterator<Item = Token> + '_ {
        .               let mut cursor = Cursor::new(input);
        .               std::iter::from_fn(move || {
        1 ( 0.00%)          if cursor.is_eof() {
        .                       None
        .                   } else {
        .                       cursor.reset_len_consumed();
       14 ( 0.00%)              Some(cursor.advance_token())
        .                   }
        .               })
        .           }
        .           
        .           /// True if `c` is considered a whitespace according to Rust language definition.
        .           /// See [Rust language reference](https://doc.rust-lang.org/reference/whitespace.html)
        .           /// for definitions of these classes.
        .           pub fn is_whitespace(c: char) -> bool {
        .               // This is Pattern_White_Space.
        .               //
        .               // Note that this set is stable (ie, it doesn't change with different
        .               // Unicode versions), so it's ok to just hard-code the values.
        .           
  249,600 ( 0.01%)      matches!(
        .                   c,
        .                   // Usual ASCII suspects
        .                   '\u{0009}'   // \t
        .                   | '\u{000A}' // \n
        .                   | '\u{000B}' // vertical tab
        .                   | '\u{000C}' // form feed
        .                   | '\u{000D}' // \r
        .                   | '\u{0020}' // space
-- line 259 ----------------------------------------
-- line 271 ----------------------------------------
        .               )
        .           }
        .           
        .           /// True if `c` is valid as a first character of an identifier.
        .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
        .           /// a formal definition of valid identifier name.
        .           pub fn is_id_start(c: char) -> bool {
        .               // This is XID_Start OR '_' (which formally is not a XID_Start).
   61,788 ( 0.00%)      c == '_' || unicode_xid::UnicodeXID::is_xid_start(c)
        .           }
        .           
        .           /// True if `c` is valid as a non-first character of an identifier.
        .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
        .           /// a formal definition of valid identifier name.
        .           pub fn is_id_continue(c: char) -> bool {
        .               unicode_xid::UnicodeXID::is_xid_continue(c)
        .           }
-- line 287 ----------------------------------------
-- line 293 ----------------------------------------
        .                   is_id_start(start) && chars.all(is_id_continue)
        .               } else {
        .                   false
        .               }
        .           }
        .           
        .           impl Cursor<'_> {
        .               /// Parses a token from the input string.
1,469,480 ( 0.04%)      fn advance_token(&mut self) -> Token {
        .                   let first_char = self.bump().unwrap();
  752,459 ( 0.02%)          let token_kind = match first_char {
        .                       // Slash, comment or block comment.
    1,236 ( 0.00%)              '/' => match self.first() {
        .                           '/' => self.line_comment(),
        .                           '*' => self.block_comment(),
        .                           _ => Slash,
        .                       },
        .           
        .                       // Whitespace sequence.
        .                       c if is_whitespace(c) => self.whitespace(),
        .           
        .                       // Raw identifier, raw string literal or identifier.
      240 ( 0.00%)              'r' => match (self.first(), self.second()) {
        .                           ('#', c1) if is_id_start(c1) => self.raw_ident(),
        .                           ('#', _) | ('"', _) => {
        .                               let (n_hashes, err) = self.raw_double_quoted_string(1);
        .                               let suffix_start = self.len_consumed();
        .                               if err.is_none() {
        .                                   self.eat_literal_suffix();
        .                               }
        .                               let kind = RawStr { n_hashes, err };
        .                               Literal { kind, suffix_start }
        .                           }
        .                           _ => self.ident_or_unknown_prefix(),
        .                       },
        .           
        .                       // Byte literal, byte string literal, raw byte string literal or identifier.
      308 ( 0.00%)              'b' => match (self.first(), self.second()) {
        .                           ('\'', _) => {
        .                               self.bump();
       15 ( 0.00%)                      let terminated = self.single_quoted_string();
        .                               let suffix_start = self.len_consumed();
       10 ( 0.00%)                      if terminated {
        .                                   self.eat_literal_suffix();
        .                               }
        .                               let kind = Byte { terminated };
       10 ( 0.00%)                      Literal { kind, suffix_start }
        .                           }
        .                           ('"', _) => {
        .                               self.bump();
        .                               let terminated = self.double_quoted_string();
        .                               let suffix_start = self.len_consumed();
        .                               if terminated {
        .                                   self.eat_literal_suffix();
        .                               }
-- line 347 ----------------------------------------
-- line 361 ----------------------------------------
        .                           _ => self.ident_or_unknown_prefix(),
        .                       },
        .           
        .                       // Identifier (this should be checked after other variant that can
        .                       // start as identifier).
        .                       c if is_id_start(c) => self.ident_or_unknown_prefix(),
        .           
        .                       // Numeric literal.
  380,568 ( 0.01%)              c @ '0'..='9' => {
        .                           let literal_kind = self.number(c);
        .                           let suffix_start = self.len_consumed();
        .                           self.eat_literal_suffix();
      485 ( 0.00%)                  TokenKind::Literal { kind: literal_kind, suffix_start }
        .                       }
        .           
        .                       // One-symbol tokens.
      408 ( 0.00%)              ';' => Semi,
   62,742 ( 0.00%)              ',' => Comma,
      644 ( 0.00%)              '.' => Dot,
   22,552 ( 0.00%)              '(' => OpenParen,
   22,552 ( 0.00%)              ')' => CloseParen,
      470 ( 0.00%)              '{' => OpenBrace,
      470 ( 0.00%)              '}' => CloseBrace,
   20,066 ( 0.00%)              '[' => OpenBracket,
   20,064 ( 0.00%)              ']' => CloseBracket,
        .                       '@' => At,
       52 ( 0.00%)              '#' => Pound,
        .                       '~' => Tilde,
        6 ( 0.00%)              '?' => Question,
   40,316 ( 0.00%)              ':' => Colon,
        .                       '$' => Dollar,
      488 ( 0.00%)              '=' => Eq,
       38 ( 0.00%)              '!' => Bang,
      128 ( 0.00%)              '<' => Lt,
      272 ( 0.00%)              '>' => Gt,
      124 ( 0.00%)              '-' => Minus,
      372 ( 0.00%)              '&' => And,
      124 ( 0.00%)              '|' => Or,
       36 ( 0.00%)              '+' => Plus,
       10 ( 0.00%)              '*' => Star,
        .                       '^' => Caret,
        .                       '%' => Percent,
        .           
        .                       // Lifetime or character literal.
   90,528 ( 0.00%)              '\'' => self.lifetime_or_char(),
        .           
        .                       // String literal.
        .                       '"' => {
    1,848 ( 0.00%)                  let terminated = self.double_quoted_string();
        .                           let suffix_start = self.len_consumed();
    1,232 ( 0.00%)                  if terminated {
        .                               self.eat_literal_suffix();
        .                           }
        .                           let kind = Str { terminated };
    1,232 ( 0.00%)                  Literal { kind, suffix_start }
        .                       }
        .                       // Identifier starting with an emoji. Only lexed for graceful error recovery.
        .                       c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
        .                           self.fake_ident_or_unknown_prefix()
        .                       }
        .                       _ => Unknown,
        .                   };
        .                   Token::new(token_kind, self.len_consumed())
1,653,165 ( 0.04%)      }
        .           
        .               fn line_comment(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == '/' && self.first() == '/');
        .                   self.bump();
        .           
      798 ( 0.00%)          let doc_style = match self.first() {
        .                       // `//!` is an inner line doc comment.
        .                       '!' => Some(DocStyle::Inner),
        .                       // `////` (more than 3 slashes) is not considered a doc comment.
      657 ( 0.00%)              '/' if self.second() != '/' => Some(DocStyle::Outer),
        .                       _ => None,
        .                   };
        .           
   12,372 ( 0.00%)          self.eat_while(|c| c != '\n');
      927 ( 0.00%)          LineComment { doc_style }
        .               }
        .           
        .               fn block_comment(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == '/' && self.first() == '*');
        .                   self.bump();
        .           
        .                   let doc_style = match self.first() {
        .                       // `/*!` is an inner block doc comment.
-- line 447 ----------------------------------------
-- line 474 ----------------------------------------
        .                   }
        .           
        .                   BlockComment { doc_style, terminated: depth == 0 }
        .               }
        .           
        .               fn whitespace(&mut self) -> TokenKind {
        .                   debug_assert!(is_whitespace(self.prev()));
        .                   self.eat_while(is_whitespace);
   34,449 ( 0.00%)          Whitespace
        .               }
        .           
        .               fn raw_ident(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == 'r' && self.first() == '#' && is_id_start(self.second()));
        .                   // Eat "#" symbol.
        .                   self.bump();
        .                   // Eat the identifier part of RawIdent.
        .                   self.eat_identifier();
        .                   RawIdent
        .               }
        .           
  110,330 ( 0.00%)      fn ident_or_unknown_prefix(&mut self) -> TokenKind {
        .                   debug_assert!(is_id_start(self.prev()));
        .                   // Start is already eaten, eat the rest of identifier.
   44,132 ( 0.00%)          self.eat_while(is_id_continue);
        .                   // Known prefixes must have been handled earlier. So if
        .                   // we see a prefix here, it is definitely an unknown prefix.
   44,132 ( 0.00%)          match self.first() {
        .                       '#' | '"' | '\'' => UnknownPrefix,
   22,066 ( 0.00%)              c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
        .                           self.fake_ident_or_unknown_prefix()
        .                       }
   22,066 ( 0.00%)              _ => Ident,
        .                   }
   88,264 ( 0.00%)      }
        .           
        .               fn fake_ident_or_unknown_prefix(&mut self) -> TokenKind {
        .                   // Start is already eaten, eat the rest of identifier.
        .                   self.eat_while(|c| {
        .                       unicode_xid::UnicodeXID::is_xid_continue(c)
        .                           || (!c.is_ascii() && unic_emoji_char::is_emoji(c))
        .                           || c == '\u{200d}'
        .                   });
-- line 515 ----------------------------------------
-- line 519 ----------------------------------------
        .                       '#' | '"' | '\'' => UnknownPrefix,
        .                       _ => InvalidIdent,
        .                   }
        .               }
        .           
        .               fn number(&mut self, first_digit: char) -> LiteralKind {
        .                   debug_assert!('0' <= self.prev() && self.prev() <= '9');
        .                   let mut base = Base::Decimal;
      194 ( 0.00%)          if first_digit == '0' {
        .                       // Attempt to parse encoding base.
       89 ( 0.00%)              let has_digits = match self.first() {
        .                           'b' => {
        .                               base = Base::Binary;
        .                               self.bump();
        .                               self.eat_decimal_digits()
        .                           }
        .                           'o' => {
        .                               base = Base::Octal;
        .                               self.bump();
-- line 537 ----------------------------------------
-- line 538 ----------------------------------------
        .                               self.eat_decimal_digits()
        .                           }
        .                           'x' => {
        .                               base = Base::Hexadecimal;
        .                               self.bump();
        .                               self.eat_hexadecimal_digits()
        .                           }
        .                           // Not a base prefix.
       63 ( 0.00%)                  '0'..='9' | '_' | '.' | 'e' | 'E' => {
        .                               self.eat_decimal_digits();
        .                               true
        .                           }
        .                           // Just a 0.
        .                           _ => return Int { base, empty_int: false },
        .                       };
        .                       // Base prefix was provided, but there were no digits
        .                       // after it, e.g. "0x".
-- line 554 ----------------------------------------
-- line 555 ----------------------------------------
        .                       if !has_digits {
        .                           return Int { base, empty_int: true };
        .                       }
        .                   } else {
        .                       // No base prefix, parse number in the usual way.
        .                       self.eat_decimal_digits();
        .                   };
        .           
      424 ( 0.00%)          match self.first() {
        .                       // Don't be greedy if this is actually an
        .                       // integer literal followed by field/method access or a range pattern
        .                       // (`0..2` and `12.foo()`)
       22 ( 0.00%)              '.' if self.second() != '.' && !is_id_start(self.second()) => {
        .                           // might have stuff after the ., and if it does, it needs to start
        .                           // with a number
        .                           self.bump();
        .                           let mut empty_exponent = false;
        .                           if self.first().is_digit(10) {
        .                               self.eat_decimal_digits();
        .                               match self.first() {
        .                                   'e' | 'E' => {
-- line 575 ----------------------------------------
-- line 585 ----------------------------------------
        .                           self.bump();
        .                           let empty_exponent = !self.eat_float_exponent();
        .                           Float { base, empty_exponent }
        .                       }
        .                       _ => Int { base, empty_int: false },
        .                   }
        .               }
        .           
  211,232 ( 0.01%)      fn lifetime_or_char(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == '\'');
        .           
   60,352 ( 0.00%)          let can_be_a_lifetime = if self.second() == '\'' {
        .                       // It's surely not a lifetime.
        .                       false
        .                   } else {
        .                       // If the first symbol is valid for identifier, it can be a lifetime.
        .                       // Also check if it's a number for a better error reporting (so '0 will
        .                       // be reported as invalid lifetime and not as unterminated char literal).
        .                       is_id_start(self.first()) || self.first().is_digit(10)
        .                   };
        .           
        .                   if !can_be_a_lifetime {
   90,414 ( 0.00%)              let terminated = self.single_quoted_string();
        .                       let suffix_start = self.len_consumed();
   60,276 ( 0.00%)              if terminated {
        .                           self.eat_literal_suffix();
        .                       }
        .                       let kind = Char { terminated };
  120,552 ( 0.00%)              return Literal { kind, suffix_start };
        .                   }
        .           
        .                   // Either a lifetime or a character literal with
        .                   // length greater than 1.
        .           
        .                   let starts_with_number = self.first().is_digit(10);
        .           
        .                   // Skip the literal contents.
        .                   // First symbol can be a number (which isn't a valid identifier start),
        .                   // so skip it without any checks.
        .                   self.bump();
       76 ( 0.00%)          self.eat_while(is_id_continue);
        .           
        .                   // Check if after skipping literal contents we've met a closing
        .                   // single quote (which means that user attempted to create a
        .                   // string with single quotes).
       76 ( 0.00%)          if self.first() == '\'' {
        .                       self.bump();
        .                       let kind = Char { terminated: true };
        .                       Literal { kind, suffix_start: self.len_consumed() }
        .                   } else {
       76 ( 0.00%)              Lifetime { starts_with_number }
        .                   }
  181,056 ( 0.00%)      }
        .           
        .               fn single_quoted_string(&mut self) -> bool {
        .                   debug_assert!(self.prev() == '\'');
        .                   // Check if it's a one-symbol literal.
  120,572 ( 0.00%)          if self.second() == '\'' && self.first() != '\\' {
        .                       self.bump();
        .                       self.bump();
        .                       return true;
        .                   }
        .           
        .                   // Literal has more than one symbol.
        .           
        .                   // Parse until either quotes are terminated or error is detected.
-- line 650 ----------------------------------------
-- line 670 ----------------------------------------
        .                           // Skip the character.
        .                           _ => {
        .                               self.bump();
        .                           }
        .                       }
        .                   }
        .                   // String was not terminated.
        .                   false
   30,143 ( 0.00%)      }
        .           
        .               /// Eats double-quoted string and returns true
        .               /// if string is terminated.
        .               fn double_quoted_string(&mut self) -> bool {
        .                   debug_assert!(self.prev() == '"');
        .                   while let Some(c) = self.bump() {
   17,976 ( 0.00%)              match c {
        .                           '"' => {
        .                               return true;
        .                           }
        .                           '\\' if self.first() == '\\' || self.first() == '"' => {
        .                               // Bump again to skip escaped character.
        .                               self.bump();
        .                           }
        .                           _ => (),
        .                       }
        .                   }
        .                   // End of file reached.
        .                   false
      616 ( 0.00%)      }
        .           
        .               /// Eats the double-quoted string and returns `n_hashes` and an error if encountered.
        .               fn raw_double_quoted_string(&mut self, prefix_len: usize) -> (u16, Option<RawStrError>) {
        .                   // Wrap the actual function to handle the error with too many hashes.
        .                   // This way, it eats the whole raw string.
        .                   let (n_hashes, err) = self.raw_string_unvalidated(prefix_len);
        .                   // Only up to 65535 `#`s are allowed in raw strings
        .                   match u16::try_from(n_hashes) {
-- line 706 ----------------------------------------
-- line 773 ----------------------------------------
        .                           max_hashes = n_end_hashes;
        .                       }
        .                   }
        .               }
        .           
        .               fn eat_decimal_digits(&mut self) -> bool {
        .                   let mut has_digits = false;
        .                   loop {
      202 ( 0.00%)              match self.first() {
        .                           '_' => {
        .                               self.bump();
        .                           }
      303 ( 0.00%)                  '0'..='9' => {
        .                               has_digits = true;
        .                               self.bump();
        .                           }
        .                           _ => break,
        .                       }
        .                   }
        .                   has_digits
      156 ( 0.00%)      }
        .           
        .               fn eat_hexadecimal_digits(&mut self) -> bool {
        .                   let mut has_digits = false;
        .                   loop {
        .                       match self.first() {
        .                           '_' => {
        .                               self.bump();
        .                           }
-- line 801 ----------------------------------------
-- line 816 ----------------------------------------
        .                   if self.first() == '-' || self.first() == '+' {
        .                       self.bump();
        .                   }
        .                   self.eat_decimal_digits()
        .               }
        .           
        .               // Eats the suffix of the literal, e.g. "_u8".
        .               fn eat_literal_suffix(&mut self) {
   61,712 ( 0.00%)          self.eat_identifier();
        .               }
        .           
        .               // Eats the identifier.
   92,568 ( 0.00%)      fn eat_identifier(&mut self) {
        .                   if !is_id_start(self.first()) {
        .                       return;
        .                   }
        .                   self.bump();
        .           
        .                   self.eat_while(is_id_continue);
  123,424 ( 0.00%)      }
        .           }

2,349,300 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 70 ----------------------------------------
         .           
         .                   impl<'a, T> $name<'a, T> {
         .                       // Helper function for creating a slice from the iterator.
         .                       #[inline(always)]
         .                       fn make_slice(&self) -> &'a [T] {
         .                           // SAFETY: the iterator was created from a slice with pointer
         .                           // `self.ptr` and length `len!(self)`. This guarantees that all
         .                           // the prerequisites for `from_raw_parts` are fulfilled.
   261,351 ( 0.01%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
         .                       }
         .           
         .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
         .                       // returning the old start.
         .                       // Unsafe because the offset must not exceed `self.len()`.
         .                       #[inline(always)]
         .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
         .                           if mem::size_of::<T>() == 0 {
         .                               zst_shrink!(self, offset);
         .                               self.ptr.as_ptr()
         .                           } else {
         .                               let old = self.ptr.as_ptr();
         .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
         .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
   766,529 ( 0.02%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
         .                               old
         .                           }
         .                       }
         .           
         .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
         .                       // returning the new end.
         .                       // Unsafe because the offset must not exceed `self.len()`.
         .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
         .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
         .                           if mem::size_of::<T>() == 0 {
         .                               zst_shrink!(self, offset);
         .                               self.ptr.as_ptr()
         .                           } else {
         .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
         .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
         .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
        19 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
         .                               self.end
         .                           }
         .                       }
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<T> ExactSizeIterator for $name<'_, T> {
         .                       #[inline(always)]
         .                       fn len(&self) -> usize {
    30,093 ( 0.00%)                  len!(self)
         .                       }
         .           
         .                       #[inline(always)]
         .                       fn is_empty(&self) -> bool {
         .                           is_empty!(self)
         .                       }
         .                   }
         .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
         .                       fn next(&mut self) -> Option<$elem> {
         .                           // could be implemented with slices, but this avoids bounds checks
         .           
         .                           // SAFETY: `assume` calls are safe since a slice's start pointer
         .                           // must be non-null, and slices over non-ZSTs must also have a
         .                           // non-null end pointer. The call to `next_unchecked!` is safe
         .                           // since we check if the iterator is empty first.
         .                           unsafe {
   233,549 ( 0.01%)                      assume(!self.ptr.as_ptr().is_null());
         .                               if mem::size_of::<T>() != 0 {
   199,893 ( 0.01%)                          assume(!self.end.is_null());
         .                               }
64,231,359 ( 1.63%)                      if is_empty!(self) {
         .                                   None
         .                               } else {
         .                                   Some(next_unchecked!(self))
         .                               }
         .                           }
         .                       }
         .           
         .                       #[inline]
         .                       fn size_hint(&self) -> (usize, Option<usize>) {
 2,449,806 ( 0.06%)                  let exact = len!(self);
         .                           (exact, Some(exact))
         .                       }
         .           
         .                       #[inline]
         .                       fn count(self) -> usize {
         .                           len!(self)
         .                       }
         .           
         .                       #[inline]
         .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    64,277 ( 0.00%)                  if n >= len!(self) {
         .                               // This iterator is now empty.
         .                               if mem::size_of::<T>() == 0 {
         .                                   // We have to do it this way as `ptr` may never be 0, but `end`
         .                                   // could be (due to wrapping).
         .                                   self.end = self.ptr.as_ptr();
         .                               } else {
         .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
         .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
         .                       // faster to compile.
         .                       #[inline]
         .                       fn for_each<F>(mut self, mut f: F)
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item),
         .                       {
         .                           while let Some(x) = self.next() {
     1,395 ( 0.00%)                      f(x);
         .                           }
         .                       }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         .                       fn all<F>(&mut self, mut f: F) -> bool
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> bool,
         .                       {
       458 ( 0.00%)                  while let Some(x) = self.next() {
     4,411 ( 0.00%)                      if !f(x) {
         .                                   return false;
         .                               }
         .                           }
         .                           true
         .                       }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         8 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> bool,
         .                       {
   979,330 ( 0.02%)                  while let Some(x) = self.next() {
   815,344 ( 0.02%)                      if f(x) {
         .                                   return true;
         .                               }
         .                           }
         .                           false
         8 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
         .                       where
         .                           Self: Sized,
         .                           P: FnMut(&Self::Item) -> bool,
         .                       {
   105,305 ( 0.00%)                  while let Some(x) = self.next() {
   106,307 ( 0.00%)                      if predicate(&x) {
         .                                   return Some(x);
         .                               }
         .                           }
         .                           None
       328 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> Option<B>,
         .                       {
     7,253 ( 0.00%)                  while let Some(x) = self.next() {
   216,391 ( 0.01%)                      if let Some(y) = f(x) {
     3,706 ( 0.00%)                          return Some(y);
         .                               }
         .                           }
         .                           None
     1,205 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile. Also, the `assume` avoids a bounds check.
         .                       #[inline]
         .                       #[rustc_inherit_overflow_checks]
         .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
         .                           Self: Sized,
         .                           P: FnMut(Self::Item) -> bool,
         .                       {
         .                           let n = len!(self);
         .                           let mut i = 0;
         .                           while let Some(x) = self.next() {
   103,490 ( 0.00%)                      if predicate(x) {
         .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
         .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
         .                                   unsafe { assume(i < n) };
         .                                   return Some(i);
         .                               }
         .                               i += 1;
         .                           }
         .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
         .                       // faster to compile. Also, the `assume` avoids a bounds check.
         .                       #[inline]
         .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
         .                           P: FnMut(Self::Item) -> bool,
         .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
         .                       {
         .                           let n = len!(self);
         .                           let mut i = n;
     4,138 ( 0.00%)                  while let Some(x) = self.next_back() {
    53,294 ( 0.00%)                      i -= 1;
    41,679 ( 0.00%)                      if predicate(x) {
         .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
         .                                   // and is only decreasing.
         .                                   unsafe { assume(i < n) };
         .                                   return Some(i);
         .                               }
         .                           }
         .                           None
         .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
         .                           // the returned references is guaranteed to refer to an element
         .                           // of the slice and thus guaranteed to be valid.
         .                           //
         .                           // Also note that the caller also guarantees that we're never
         .                           // called with the same index again, and that no other methods
         .                           // that will access this subslice are called, so it is valid
         .                           // for the returned reference to be mutable in the case of
         .                           // `IterMut`
    30,537 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
         .                       }
         .           
         .                       $($extra)*
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
         .                       #[inline]
-- line 348 ----------------------------------------
-- line 351 ----------------------------------------
         .           
         .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
         .                           // and slices over non-ZSTs must also have a non-null end pointer.
         .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
         .                           // empty first.
         .                           unsafe {
         .                               assume(!self.ptr.as_ptr().is_null());
         .                               if mem::size_of::<T>() != 0 {
        20 ( 0.00%)                          assume(!self.end.is_null());
         .                               }
 1,149,849 ( 0.03%)                      if is_empty!(self) {
         .                                   None
         .                               } else {
         .                                   Some(next_back_unchecked!(self))
         .                               }
         .                           }
         .                       }
         .           
         .                       #[inline]
-- line 369 ----------------------------------------

15,147,657 ( 0.38%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs
--------------------------------------------------------------------------------
Ir                 

-- line 504 ----------------------------------------
        .           use crate::panicking::{panic, panic_str};
        .           use crate::pin::Pin;
        .           use crate::{
        .               convert, hint, mem,
        .               ops::{self, ControlFlow, Deref, DerefMut},
        .           };
        .           
        .           /// The `Option` type. See [the module level documentation](self) for more.
4,440,969 ( 0.11%)  #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
        .           #[rustc_diagnostic_item = "Option"]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           pub enum Option<T> {
        .               /// No value.
        .               #[lang = "None"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               None,
        .               /// Some value of type `T`.
        .               #[lang = "Some"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      462 ( 0.00%)      Some(#[stable(feature = "rust1", since = "1.0.0")] T),
        .           }
        .           
        .           /////////////////////////////////////////////////////////////////////////////
        .           // Type implementation
        .           /////////////////////////////////////////////////////////////////////////////
        .           
        .           impl<T> Option<T> {
        .               /////////////////////////////////////////////////////////////////////////
-- line 531 ----------------------------------------
-- line 543 ----------------------------------------
        .               /// let x: Option<u32> = None;
        .               /// assert_eq!(x.is_some(), false);
        .               /// ```
        .               #[must_use = "if you intended to assert that this has a value, consider `.unwrap()` instead"]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
        .               pub const fn is_some(&self) -> bool {
5,243,322 ( 0.13%)          matches!(*self, Some(_))
        .               }
        .           
        .               /// Returns `true` if the option is a [`Some`] wrapping a value matching the predicate.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(is_some_with)]
-- line 559 ----------------------------------------
-- line 616 ----------------------------------------
        .               /// // then consume *that* with `map`, leaving `text` on the stack.
        .               /// let text_length: Option<usize> = text.as_ref().map(|s| s.len());
        .               /// println!("still can print text: {:?}", text);
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub const fn as_ref(&self) -> Option<&T> {
5,429,147 ( 0.14%)          match *self {
        .                       Some(ref x) => Some(x),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Converts from `&mut Option<T>` to `Option<&mut T>`.
        .               ///
        .               /// # Examples
-- line 632 ----------------------------------------
-- line 638 ----------------------------------------
        .               ///     None => {},
        .               /// }
        .               /// assert_eq!(x, Some(42));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
        .               pub const fn as_mut(&mut self) -> Option<&mut T> {
1,901,136 ( 0.05%)          match *self {
        .                       Some(ref mut x) => Some(x),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Converts from <code>[Pin]<[&]Option\<T>></code> to <code>Option<[Pin]<[&]T>></code>.
        .               ///
        .               /// [&]: reference "shared reference"
-- line 654 ----------------------------------------
-- line 705 ----------------------------------------
        .               /// let x: Option<&str> = None;
        .               /// x.expect("fruits are healthy"); // panics with `fruits are healthy`
        .               /// ```
        .               #[inline]
        .               #[track_caller]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
        .               pub const fn expect(self, msg: &str) -> T {
2,770,138 ( 0.07%)          match self {
  848,639 ( 0.02%)              Some(val) => val,
        .                       None => expect_failed(msg),
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Some`] value, consuming the `self` value.
        .               ///
        .               /// Because this function may panic, its use is generally discouraged.
        .               /// Instead, prefer to use pattern matching and handle the [`None`]
-- line 722 ----------------------------------------
-- line 742 ----------------------------------------
        .               /// let x: Option<&str> = None;
        .               /// assert_eq!(x.unwrap(), "air"); // fails
        .               /// ```
        .               #[inline]
        .               #[track_caller]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
        .               pub const fn unwrap(self) -> T {
4,535,279 ( 0.12%)          match self {
5,586,203 ( 0.14%)              Some(val) => val,
        .                       None => panic("called `Option::unwrap()` on a `None` value"),
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Some`] value or a provided default.
        .               ///
        .               /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing
        .               /// the result of a function call, it is recommended to use [`unwrap_or_else`],
-- line 759 ----------------------------------------
-- line 769 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn unwrap_or(self, default: T) -> T
        .               where
        .                   T: ~const Drop,
        .               {
2,406,446 ( 0.06%)          match self {
        .                       Some(x) => x,
      492 ( 0.00%)              None => default,
        .                   }
      525 ( 0.00%)      }
        .           
        .               /// Returns the contained [`Some`] value or computes it from a closure.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let k = 10;
        .               /// assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4);
        .               /// assert_eq!(None.unwrap_or_else(|| 2 * k), 20);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
       85 ( 0.00%)      pub const fn unwrap_or_else<F>(self, f: F) -> T
        .               where
        .                   F: ~const FnOnce() -> T,
        .                   F: ~const Drop,
        .               {
2,957,233 ( 0.08%)          match self {
  360,971 ( 0.01%)              Some(x) => x,
   25,236 ( 0.00%)              None => f(),
        .                   }
      131 ( 0.00%)      }
        .           
        .               /// Returns the contained [`Some`] value or a default.
        .               ///
        .               /// Consumes the `self` argument then, if [`Some`], returns the contained
        .               /// value, otherwise if [`None`], returns the [default value] for that
        .               /// type.
        .               ///
        .               /// # Examples
-- line 812 ----------------------------------------
-- line 831 ----------------------------------------
        .               /// [`FromStr`]: crate::str::FromStr
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn unwrap_or_default(self) -> T
        .               where
        .                   T: ~const Default,
        .               {
   21,075 ( 0.00%)          match self {
      769 ( 0.00%)              Some(x) => x,
        .                       None => Default::default(),
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Some`] value, consuming the `self` value,
        .               /// without checking that the value is not [`None`].
        .               ///
        .               /// # Safety
-- line 848 ----------------------------------------
-- line 892 ----------------------------------------
        .               /// // `Option::map` takes self *by value*, consuming `maybe_some_string`
        .               /// let maybe_some_len = maybe_some_string.map(|s| s.len());
        .               ///
        .               /// assert_eq!(maybe_some_len, Some(13));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
      518 ( 0.00%)      pub const fn map<U, F>(self, f: F) -> Option<U>
        .               where
        .                   F: ~const FnOnce(T) -> U,
        .                   F: ~const Drop,
        .               {
3,039,696 ( 0.08%)          match self {
3,821,498 ( 0.10%)              Some(x) => Some(f(x)),
   44,704 ( 0.00%)              None => None,
        .                   }
  157,609 ( 0.00%)      }
        .           
        .               /// Calls the provided closure with a reference to the contained value (if [`Some`]).
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(result_option_inspect)]
        .               ///
-- line 917 ----------------------------------------
-- line 960 ----------------------------------------
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn map_or<U, F>(self, default: U, f: F) -> U
        .               where
        .                   F: ~const FnOnce(T) -> U,
        .                   F: ~const Drop,
        .                   U: ~const Drop,
        .               {
  904,611 ( 0.02%)          match self {
    8,374 ( 0.00%)              Some(t) => f(t),
   80,942 ( 0.00%)              None => default,
        .                   }
        .               }
        .           
        .               /// Computes a default function result (if none), or
        .               /// applies a different function to the contained value (if any).
        .               ///
        .               /// # Examples
        .               ///
-- line 978 ----------------------------------------
-- line 990 ----------------------------------------
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn map_or_else<U, D, F>(self, default: D, f: F) -> U
        .               where
        .                   D: ~const FnOnce() -> U,
        .                   D: ~const Drop,
        .                   F: ~const FnOnce(T) -> U,
        .                   F: ~const Drop,
        .               {
   87,563 ( 0.00%)          match self {
   35,226 ( 0.00%)              Some(t) => f(t),
        .                       None => default(),
        .                   }
        .               }
        .           
        .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
        .               /// [`Ok(v)`] and [`None`] to [`Err(err)`].
        .               ///
        .               /// Arguments passed to `ok_or` are eagerly evaluated; if you are passing the
-- line 1007 ----------------------------------------
-- line 1024 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn ok_or<E>(self, err: E) -> Result<T, E>
        .               where
        .                   E: ~const Drop,
        .               {
  345,336 ( 0.01%)          match self {
      500 ( 0.00%)              Some(v) => Ok(v),
      250 ( 0.00%)              None => Err(err),
        .                   }
        .               }
        .           
        .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
        .               /// [`Ok(v)`] and [`None`] to [`Err(err())`].
        .               ///
        .               /// [`Ok(v)`]: Ok
        .               /// [`Err(err())`]: Err
-- line 1042 ----------------------------------------
-- line 1054 ----------------------------------------
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn ok_or_else<E, F>(self, err: F) -> Result<T, E>
        .               where
        .                   F: ~const FnOnce() -> E,
        .                   F: ~const Drop,
        .               {
  114,266 ( 0.00%)          match self {
  106,756 ( 0.00%)              Some(v) => Ok(v),
   35,713 ( 0.00%)              None => Err(err()),
        .                   }
        .               }
        .           
        .               /// Converts from `Option<T>` (or `&Option<T>`) to `Option<&T::Target>`.
        .               ///
        .               /// Leaves the original Option in-place, creating a new one with a reference
        .               /// to the original one, additionally coercing the contents via [`Deref`].
        .               ///
-- line 1072 ----------------------------------------
-- line 1080 ----------------------------------------
        .               /// assert_eq!(x.as_deref(), None);
        .               /// ```
        .               #[stable(feature = "option_deref", since = "1.40.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn as_deref(&self) -> Option<&T::Target>
        .               where
        .                   T: ~const Deref,
        .               {
    4,186 ( 0.00%)          match self.as_ref() {
        .                       Some(t) => Some(t.deref()),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Converts from `Option<T>` (or `&mut Option<T>`) to `Option<&mut T::Target>`.
        .               ///
        .               /// Leaves the original `Option` in-place, creating a new one containing a mutable reference to
-- line 1096 ----------------------------------------
-- line 1213 ----------------------------------------
        .               /// assert_eq!(Some(2).and_then(sq).and_then(sq), Some(16));
        .               /// assert_eq!(Some(2).and_then(sq).and_then(nope), None);
        .               /// assert_eq!(Some(2).and_then(nope).and_then(sq), None);
        .               /// assert_eq!(None.and_then(sq).and_then(sq), None);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
      304 ( 0.00%)      pub const fn and_then<U, F>(self, f: F) -> Option<U>
        .               where
        .                   F: ~const FnOnce(T) -> Option<U>,
        .                   F: ~const Drop,
        .               {
  807,529 ( 0.02%)          match self {
  102,136 ( 0.00%)              Some(x) => f(x),
        .                       None => None,
        .                   }
  313,395 ( 0.01%)      }
        .           
        .               /// Returns [`None`] if the option is [`None`], otherwise calls `predicate`
        .               /// with the wrapped value and returns:
        .               ///
        .               /// - [`Some(t)`] if `predicate` returns `true` (where `t` is the wrapped
        .               ///   value), and
        .               /// - [`None`] if `predicate` returns `false`.
        .               ///
-- line 1238 ----------------------------------------
-- line 1257 ----------------------------------------
        .               #[stable(feature = "option_filter", since = "1.27.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn filter<P>(self, predicate: P) -> Self
        .               where
        .                   T: ~const Drop,
        .                   P: ~const FnOnce(&T) -> bool,
        .                   P: ~const Drop,
        .               {
   20,659 ( 0.00%)          if let Some(x) = self {
   79,829 ( 0.00%)              if predicate(&x) {
        .                           return Some(x);
        .                       }
        .                   }
        .                   None
        .               }
        .           
        .               /// Returns the option if it contains a value, otherwise returns `optb`.
        .               ///
-- line 1274 ----------------------------------------
-- line 1299 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn or(self, optb: Option<T>) -> Option<T>
        .               where
        .                   T: ~const Drop,
        .               {
   11,916 ( 0.00%)          match self {
      210 ( 0.00%)              Some(x) => Some(x),
        .                       None => optb,
        .                   }
        .               }
        .           
        .               /// Returns the option if it contains a value, otherwise calls `f` and
        .               /// returns the result.
        .               ///
        .               /// # Examples
-- line 1316 ----------------------------------------
-- line 1326 ----------------------------------------
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn or_else<F>(self, f: F) -> Option<T>
        .               where
        .                   F: ~const FnOnce() -> Option<T>,
        .                   F: ~const Drop,
        .               {
  495,931 ( 0.01%)          match self {
  162,741 ( 0.00%)              Some(x) => Some(x),
        .                       None => f(),
        .                   }
        .               }
        .           
        .               /// Returns [`Some`] if exactly one of `self`, `optb` is [`Some`], otherwise returns [`None`].
        .               ///
        .               /// # Examples
        .               ///
-- line 1343 ----------------------------------------
-- line 1431 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "option_entry", since = "1.20.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn get_or_insert(&mut self, value: T) -> &mut T
        .               where
        .                   T: ~const Drop,
        .               {
   16,008 ( 0.00%)          if let None = *self {
   37,352 ( 0.00%)              *self = Some(value);
        .                   }
        .           
        .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
        .                   // variant in the code above.
        .                   unsafe { self.as_mut().unwrap_unchecked() }
        .               }
        .           
        .               /// Inserts the default value into the option if it is [`None`], then
-- line 1448 ----------------------------------------
-- line 1499 ----------------------------------------
        .               #[inline]
        .               #[stable(feature = "option_entry", since = "1.20.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn get_or_insert_with<F>(&mut self, f: F) -> &mut T
        .               where
        .                   F: ~const FnOnce() -> T,
        .                   F: ~const Drop,
        .               {
  425,786 ( 0.01%)          if let None = *self {
        .                       // the compiler isn't smart enough to know that we are not dropping a `T`
        .                       // here and wants us to ensure `T` can be dropped at compile time.
        .                       mem::forget(mem::replace(self, Some(f())))
        .                   }
        .           
        .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
        .                   // variant in the code above.
        .                   unsafe { self.as_mut().unwrap_unchecked() }
-- line 1515 ----------------------------------------
-- line 1558 ----------------------------------------
        .               /// let old = x.replace(3);
        .               /// assert_eq!(x, Some(3));
        .               /// assert_eq!(old, None);
        .               /// ```
        .               #[inline]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
        .               #[stable(feature = "option_replace", since = "1.31.0")]
        .               pub const fn replace(&mut self, value: T) -> Option<T> {
      588 ( 0.00%)          mem::replace(self, Some(value))
        .               }
        .           
        .               /// Returns `true` if the option is a [`Some`] value containing the given value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(option_result_contains)]
-- line 1574 ----------------------------------------
-- line 1712 ----------------------------------------
        .               #[stable(feature = "copied", since = "1.35.0")]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
        .               pub const fn copied(self) -> Option<T>
        .               where
        .                   T: Copy,
        .               {
        .                   // FIXME: this implementation, which sidesteps using `Option::map` since it's not const
        .                   // ready yet, should be reverted when possible to avoid code repetition
   68,853 ( 0.00%)          match self {
  772,153 ( 0.02%)              Some(&v) => Some(v),
   10,657 ( 0.00%)              None => None,
        .                   }
        6 ( 0.00%)      }
        .           
        .               /// Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the
        .               /// option.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = 12;
-- line 1732 ----------------------------------------
-- line 1733 ----------------------------------------
        .               /// let opt_x = Some(&x);
        .               /// assert_eq!(opt_x, Some(&12));
        .               /// let cloned = opt_x.cloned();
        .               /// assert_eq!(cloned, Some(12));
        .               /// ```
        .               #[must_use = "`self` will be dropped if the result is not used"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_cloned", issue = "91582")]
    4,952 ( 0.00%)      pub const fn cloned(self) -> Option<T>
        .               where
        .                   T: ~const Clone,
        .               {
  166,519 ( 0.00%)          match self {
  633,516 ( 0.02%)              Some(t) => Some(t.clone()),
   22,269 ( 0.00%)              None => None,
        .                   }
  259,075 ( 0.01%)      }
        .           }
        .           
        .           impl<T> Option<&mut T> {
        .               /// Maps an `Option<&mut T>` to an `Option<T>` by copying the contents of the
        .               /// option.
        .               ///
        .               /// # Examples
        .               ///
-- line 1757 ----------------------------------------
-- line 1843 ----------------------------------------
        .           /////////////////////////////////////////////////////////////////////////////
        .           // Trait implementations
        .           /////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone> Clone for Option<T> {
        .               #[inline]
        .               fn clone(&self) -> Self {
2,926,943 ( 0.07%)          match self {
   11,293 ( 0.00%)              Some(x) => Some(x.clone()),
      596 ( 0.00%)              None => None,
        .                   }
  589,227 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn clone_from(&mut self, source: &Self) {
        .                   match (self, source) {
        .                       (Some(to), Some(from)) => to.clone_from(from),
        .                       (to, from) => *to = from.clone(),
        .                   }
        .               }
-- line 1863 ----------------------------------------
-- line 2006 ----------------------------------------
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<A> {
        .                   self.opt.take()
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
   20,065 ( 0.00%)          match self.opt {
        .                       Some(_) => (1, Some(1)),
        .                       None => (0, Some(0)),
        .                   }
        .               }
        .           }
        .           
        .           impl<A> DoubleEndedIterator for Item<A> {
        .               #[inline]
-- line 2022 ----------------------------------------
-- line 2136 ----------------------------------------
        .               type Item = A;
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<A> {
        .                   self.inner.next()
        .               }
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
       19 ( 0.00%)          self.inner.size_hint()
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<A> DoubleEndedIterator for IntoIter<A> {
        .               #[inline]
        .               fn next_back(&mut self) -> Option<A> {
        .                   self.inner.next_back()
-- line 2152 ----------------------------------------
-- line 2241 ----------------------------------------
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T> const ops::Try for Option<T> {
        .               type Output = T;
        .               type Residual = Option<convert::Infallible>;
        .           
        .               #[inline]
        .               fn from_output(output: Self::Output) -> Self {
        .                   Some(output)
      735 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
1,447,637 ( 0.04%)          match self {
   60,229 ( 0.00%)              Some(v) => ControlFlow::Continue(v),
        .                       None => ControlFlow::Break(None),
        .                   }
        .               }
        .           }
        .           
        .           #[unstable(feature = "try_trait_v2", issue = "84277")]
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T> const ops::FromResidual for Option<T> {
        .               #[inline]
        .               fn from_residual(residual: Option<convert::Infallible>) -> Self {
        .                   match residual {
  140,108 ( 0.00%)              None => None,
        .                   }
        .               }
        .           }
        .           
        .           #[unstable(feature = "try_trait_v2_residual", issue = "91285")]
        .           impl<T> ops::Residual<T> for Option<convert::Infallible> {
        .               type TryType = Option<T>;
        .           }
-- line 2274 ----------------------------------------
-- line 2297 ----------------------------------------
        .               /// let x: Option<Option<Option<u32>>> = Some(Some(Some(6)));
        .               /// assert_eq!(Some(Some(6)), x.flatten());
        .               /// assert_eq!(Some(6), x.flatten().flatten());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "option_flattening", since = "1.40.0")]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
        .               pub const fn flatten(self) -> Option<T> {
       24 ( 0.00%)          match self {
      132 ( 0.00%)              Some(inner) => inner,
        .                       None => None,
        .                   }
        .               }
        .           }

9,077,587 ( 0.23%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/coercion.rs
--------------------------------------------------------------------------------
Ir               

-- line 73 ----------------------------------------
      .               /// See #47489 and #48598
      .               /// See docs on the "AllowTwoPhase" type for a more detailed discussion
      .               allow_two_phase: AllowTwoPhase,
      .           }
      .           
      .           impl<'a, 'tcx> Deref for Coerce<'a, 'tcx> {
      .               type Target = FnCtxt<'a, 'tcx>;
      .               fn deref(&self) -> &Self::Target {
255,004 ( 0.01%)          &self.fcx
      .               }
      .           }
      .           
      .           type CoerceResult<'tcx> = InferResult<'tcx, (Vec<Adjustment<'tcx>>, Ty<'tcx>)>;
      .           
      .           /// Coercing a mutable reference to an immutable works, while
      .           /// coercing `&T` to `&mut T` should be forbidden.
      .           fn coerce_mutbls<'tcx>(
      .               from_mutbl: hir::Mutability,
      .               to_mutbl: hir::Mutability,
      .           ) -> RelateResult<'tcx, ()> {
  4,749 ( 0.00%)      match (from_mutbl, to_mutbl) {
      .                   (hir::Mutability::Mut, hir::Mutability::Mut | hir::Mutability::Not)
      .                   | (hir::Mutability::Not, hir::Mutability::Not) => Ok(()),
      .                   (hir::Mutability::Not, hir::Mutability::Mut) => Err(TypeError::Mutability),
      .               }
      .           }
      .           
      .           /// Do not require any adjustments, i.e. coerce `x -> x`.
      .           fn identity(_: Ty<'_>) -> Vec<Adjustment<'_>> {
      .               vec![]
      .           }
      .           
      .           fn simple<'tcx>(kind: Adjust<'tcx>) -> impl FnOnce(Ty<'tcx>) -> Vec<Adjustment<'tcx>> {
    117 ( 0.00%)      move |target| vec![Adjustment { kind, target }]
      .           }
      .           
      .           /// This always returns `Ok(...)`.
      .           fn success<'tcx>(
      .               adj: Vec<Adjustment<'tcx>>,
      .               target: Ty<'tcx>,
      .               obligations: traits::PredicateObligations<'tcx>,
      .           ) -> CoerceResult<'tcx> {
 69,773 ( 0.00%)      Ok(InferOk { value: (adj, target), obligations })
      .           }
      .           
      .           impl<'f, 'tcx> Coerce<'f, 'tcx> {
      .               fn new(
      .                   fcx: &'f FnCtxt<'f, 'tcx>,
      .                   cause: ObligationCause<'tcx>,
      .                   allow_two_phase: AllowTwoPhase,
      .               ) -> Self {
184,383 ( 0.00%)          Coerce { fcx, cause, allow_two_phase, use_lub: false }
      .               }
      .           
502,348 ( 0.01%)      fn unify(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> InferResult<'tcx, Ty<'tcx>> {
      .                   debug!("unify(a: {:?}, b: {:?}, use_lub: {})", a, b, self.use_lub);
      .                   self.commit_if_ok(|_| {
 91,336 ( 0.00%)              if self.use_lub {
    152 ( 0.00%)                  self.at(&self.cause, self.fcx.param_env).lub(b, a)
      .                       } else {
 91,184 ( 0.00%)                  self.at(&self.cause, self.fcx.param_env)
      .                               .sup(b, a)
      .                               .map(|InferOk { value: (), obligations }| InferOk { value: a, obligations })
      .                       }
      .                   })
365,344 ( 0.01%)      }
      .           
      .               /// Unify two types (using sub or lub) and produce a specific coercion.
 88,800 ( 0.00%)      fn unify_and<F>(&self, a: Ty<'tcx>, b: Ty<'tcx>, f: F) -> CoerceResult<'tcx>
      .               where
      .                   F: FnOnce(Ty<'tcx>) -> Vec<Adjustment<'tcx>>,
      .               {
112,916 ( 0.00%)          self.unify(&a, &b)
 90,628 ( 0.00%)              .and_then(|InferOk { value: ty, obligations }| success(f(ty), ty, obligations))
 66,600 ( 0.00%)      }
      .           
484,386 ( 0.01%)      #[instrument(skip(self))]
      .               fn coerce(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> CoerceResult<'tcx> {
      .                   // First, remove any resolved type variables (at the top level, at least):
 23,066 ( 0.00%)          let a = self.shallow_resolve(a);
 23,066 ( 0.00%)          let b = self.shallow_resolve(b);
      .                   debug!("Coerce.tys({:?} => {:?})", a, b);
      .           
      .                   // Just ignore error types.
 46,132 ( 0.00%)          if a.references_error() || b.references_error() {
      .                       return success(vec![], self.fcx.tcx.ty_error(), vec![]);
      .                   }
      .           
      .                   // Coercing from `!` to any type is allowed:
 23,066 ( 0.00%)          if a.is_never() {
      .                       return success(simple(Adjust::NeverToAny)(b), b, vec![]);
      .                   }
      .           
      .                   // Coercing *from* an unresolved inference variable means that
      .                   // we have no information about the source type. This will always
      .                   // ultimately fall back to some form of subtyping.
 23,133 ( 0.00%)          if a.is_ty_var() {
      .                       return self.coerce_from_inference_variable(a, b, identity);
      .                   }
      .           
      .                   // Consider coercing the subtype to a DST
      .                   //
      .                   // NOTE: this is wrapped in a `commit_if_ok` because it creates
      .                   // a "spurious" type variable, and we don't want to have that
      .                   // type variable in memory if the coercion fails.
      .                   let unsize = self.commit_if_ok(|_| self.coerce_unsized(a, b));
 92,042 ( 0.00%)          match unsize {
      .                       Ok(_) => {
      .                           debug!("coerce: unsize successful");
    345 ( 0.00%)                  return unsize;
      .                       }
      .                       Err(TypeError::ObjectUnsafeCoercion(did)) => {
      .                           debug!("coerce: unsize not object safe");
      .                           return Err(TypeError::ObjectUnsafeCoercion(did));
      .                       }
      .                       Err(error) => {
      .                           debug!(?error, "coerce: unsize failed");
      .                       }
      .                   }
      .           
      .                   // Examine the supertype and consider auto-borrowing.
113,435 ( 0.00%)          match *b.kind() {
      .                       ty::RawPtr(mt_b) => {
      .                           return self.coerce_unsafe_ptr(a, b, mt_b.mutbl);
      .                       }
  1,560 ( 0.00%)              ty::Ref(r_b, _, mutbl_b) => {
  4,680 ( 0.00%)                  return self.coerce_borrowed_pointer(a, b, r_b, mutbl_b);
      .                       }
      .                       _ => {}
      .                   }
      .           
155,533 ( 0.00%)          match *a.kind() {
      .                       ty::FnDef(..) => {
      .                           // Function items are coercible to any closure
      .                           // type; function pointers are not (that would
      .                           // require double indirection).
      .                           // Additionally, we permit coercion of function
      .                           // items to drop the unsafe qualifier.
      .                           self.coerce_from_fn_item(a, b)
      .                       }
      .                       ty::FnPtr(a_f) => {
      .                           // We permit coercion of fn pointers to drop the
      .                           // unsafe qualifier.
      .                           self.coerce_from_fn_pointer(a, a_f, b)
      .                       }
     57 ( 0.00%)              ty::Closure(closure_def_id_a, substs_a) => {
      .                           // Non-capturing closures are coercible to
      .                           // function pointers or unsafe function pointers.
      .                           // It cannot convert closures that require unsafe.
    152 ( 0.00%)                  self.coerce_closure_to_fn(a, closure_def_id_a, substs_a, b)
      .                       }
      .                       _ => {
      .                           // Otherwise, just use unification rules.
111,000 ( 0.00%)                  self.unify_and(a, b, identity)
      .                       }
      .                   }
 46,132 ( 0.00%)      }
      .           
      .               /// Coercing *from* an inference variable. In this case, we have no information
      .               /// about the source type, so we can't really do a true coercion and we always
      .               /// fall back to subtyping (`unify_and`).
      .               fn coerce_from_inference_variable(
      .                   &self,
      .                   a: Ty<'tcx>,
      .                   b: Ty<'tcx>,
      .                   make_adjustments: impl FnOnce(Ty<'tcx>) -> Vec<Adjustment<'tcx>>,
      .               ) -> CoerceResult<'tcx> {
      .                   debug!("coerce_from_inference_variable(a={:?}, b={:?})", a, b);
      5 ( 0.00%)          assert!(a.is_ty_var() && self.infcx.shallow_resolve(a) == a);
      5 ( 0.00%)          assert!(self.infcx.shallow_resolve(b) == b);
      .           
      7 ( 0.00%)          if b.is_ty_var() {
      .                       // Two unresolved type variables: create a `Coerce` predicate.
      3 ( 0.00%)              let target_ty = if self.use_lub {
      .                           self.infcx.next_ty_var(TypeVariableOrigin {
      .                               kind: TypeVariableOriginKind::LatticeVariable,
      .                               span: self.cause.span,
      .                           })
      .                       } else {
      .                           b
      .                       };
      .           
      .                       let mut obligations = Vec::with_capacity(2);
      .                       for &source_ty in &[a, b] {
      2 ( 0.00%)                  if source_ty != target_ty {
      .                               obligations.push(Obligation::new(
      .                                   self.cause.clone(),
      1 ( 0.00%)                          self.param_env,
      4 ( 0.00%)                          ty::Binder::dummy(ty::PredicateKind::Coerce(ty::CoercePredicate {
      .                                       a: source_ty,
      .                                       b: target_ty,
      .                                   }))
      .                                   .to_predicate(self.tcx()),
      .                               ));
      .                           }
      .                       }
      .           
      .                       debug!(
      .                           "coerce_from_inference_variable: two inference variables, target_ty={:?}, obligations={:?}",
      .                           target_ty, obligations
      .                       );
      .                       let adjustments = make_adjustments(target_ty);
      6 ( 0.00%)              InferResult::Ok(InferOk { value: (adjustments, target_ty), obligations })
      .                   } else {
      .                       // One unresolved type variable: just apply subtyping, we may be able
      .                       // to do something useful.
      .                       self.unify_and(a, b, make_adjustments)
      .                   }
      .               }
      .           
      .               /// Reborrows `&mut A` to `&mut B` and `&(mut) A` to `&B`.
      .               /// To match `A` with `B`, autoderef will be performed,
      .               /// calling `deref`/`deref_mut` where necessary.
  7,800 ( 0.00%)      fn coerce_borrowed_pointer(
      .                   &self,
      .                   a: Ty<'tcx>,
      .                   b: Ty<'tcx>,
      .                   r_b: ty::Region<'tcx>,
      .                   mutbl_b: hir::Mutability,
      .               ) -> CoerceResult<'tcx> {
      .                   debug!("coerce_borrowed_pointer(a={:?}, b={:?})", a, b);
      .           
      .                   // If we have a parameter of type `&M T_a` and the value
      .                   // provided is `expr`, we will be adding an implicit borrow,
      .                   // meaning that we convert `f(expr)` to `f(&M *expr)`.  Therefore,
      .                   // to type check, we will construct the type that `&M*expr` would
      .                   // yield.
      .           
  1,560 ( 0.00%)          let (r_a, mt_a) = match *a.kind() {
  2,340 ( 0.00%)              ty::Ref(r_a, ty, mutbl) => {
      .                           let mt_a = ty::TypeAndMut { ty, mutbl };
      .                           coerce_mutbls(mt_a.mutbl, mutbl_b)?;
      .                           (r_a, mt_a)
      .                       }
      .                       _ => return self.unify_and(a, b, identity),
      .                   };
      .           
  1,560 ( 0.00%)          let span = self.cause.span;
      .           
      .                   let mut first_error = None;
      .                   let mut r_borrow_var = None;
      .                   let mut autoderef = self.autoderef(span, a);
      .                   let mut found = None;
      .           
  3,136 ( 0.00%)          for (referent_ty, autoderefs) in autoderef.by_ref() {
  3,136 ( 0.00%)              if autoderefs == 0 {
      .                           // Don't let this pass, otherwise it would cause
      .                           // &T to autoref to &&T.
      .                           continue;
      .                       }
      .           
      .                       // At this point, we have deref'd `a` to `referent_ty`.  So
      .                       // imagine we are coercing from `&'a mut Vec<T>` to `&'b mut [T]`.
      .                       // In the autoderef loop for `&'a mut Vec<T>`, we would get
-- line 326 ----------------------------------------
-- line 386 ----------------------------------------
      .                       //     this extra edge causes the region `'a` to be inferred to something
      .                       //     too big, which then results in borrowck errors.)
      .                       //   - We could track the innermost shared reference, but there is already
      .                       //     code in regionck that has the job of creating links between
      .                       //     the region of a borrow and the regions in the thing being
      .                       //     borrowed (here, `'a` and `'x`), and it knows how to handle
      .                       //     all the various cases. So instead we just make a region variable
      .                       //     and let regionck figure it out.
  1,576 ( 0.00%)              let r = if !self.use_lub {
      .                           r_b // [2] above
     14 ( 0.00%)              } else if autoderefs == 1 {
      .                           r_a // [3] above
      .                       } else {
      .                           if r_borrow_var.is_none() {
      .                               // create var lazily, at most once
      .                               let coercion = Coercion(span);
      .                               let r = self.next_region_var(coercion);
      .                               r_borrow_var = Some(r); // [4] above
      .                           }
      .                           r_borrow_var.unwrap()
      .                       };
    788 ( 0.00%)              let derefd_ty_a = self.tcx.mk_ref(
      .                           r,
      .                           TypeAndMut {
      .                               ty: referent_ty,
      .                               mutbl: mutbl_b, // [1] above
      .                           },
      .                       );
  5,516 ( 0.00%)              match self.unify(derefd_ty_a, b) {
      .                           Ok(ok) => {
  3,120 ( 0.00%)                      found = Some(ok);
      .                               break;
      .                           }
     24 ( 0.00%)                  Err(err) => {
      8 ( 0.00%)                      if first_error.is_none() {
     40 ( 0.00%)                          first_error = Some(err);
      .                               }
      .                           }
      .                       }
      .                   }
      .           
      .                   // Extract type or return an error. We return the first error
      .                   // we got, which should be from relating the "base" type
      .                   // (e.g., in example above, the failure from relating `Vec<T>`
      .                   // to the target type), since that should be the least
      .                   // confusing.
  6,240 ( 0.00%)          let InferOk { value: ty, mut obligations } = match found {
      .                       Some(d) => d,
      .                       None => {
      .                           let err = first_error.expect("coerce_borrowed_pointer had no error");
      .                           debug!("coerce_borrowed_pointer: failed with err = {:?}", err);
      .                           return Err(err);
      .                       }
      .                   };
      .           
  3,610 ( 0.00%)          if ty == a && mt_a.mutbl == hir::Mutability::Not && autoderef.step_count() == 1 {
      .                       // As a special case, if we would produce `&'a *x`, that's
      .                       // a total no-op. We end up with the type `&'a T` just as
      .                       // we started with.  In that case, just skip it
      .                       // altogether. This is just an optimization.
      .                       //
      .                       // Note that for `&mut`, we DO want to reborrow --
      .                       // otherwise, this would be a move, which might be an
      .                       // error. For example `foo(self.x)` where `self` and
      .                       // `self.x` both have `&mut `type would be a move of
      .                       // `self.x`, but we auto-coerce it to `foo(&mut *self.x)`,
      .                       // which is a borrow.
  1,132 ( 0.00%)              assert_eq!(mutbl_b, hir::Mutability::Not); // can only coerce &T -> &U
  2,264 ( 0.00%)              return success(vec![], ty, obligations);
      .                   }
      .           
  1,498 ( 0.00%)          let InferOk { value: mut adjustments, obligations: o } =
    214 ( 0.00%)              self.adjust_steps_as_infer_ok(&autoderef);
      .                   obligations.extend(o);
  4,066 ( 0.00%)          obligations.extend(autoderef.into_obligations());
      .           
      .                   // Now apply the autoref. We have to extract the region out of
      .                   // the final ref type we got.
    428 ( 0.00%)          let r_borrow = match ty.kind() {
      .                       ty::Ref(r_borrow, _, _) => r_borrow,
      .                       _ => span_bug!(span, "expected a ref type, got {:?}", ty),
      .                   };
    856 ( 0.00%)          let mutbl = match mutbl_b {
      .                       hir::Mutability::Not => AutoBorrowMutability::Not,
      .                       hir::Mutability::Mut => {
      .                           AutoBorrowMutability::Mut { allow_two_phase_borrow: self.allow_two_phase }
      .                       }
      .                   };
      .                   adjustments.push(Adjustment {
    214 ( 0.00%)              kind: Adjust::Borrow(AutoBorrow::Ref(r_borrow, mutbl)),
      .                       target: ty,
      .                   });
      .           
      .                   debug!("coerce_borrowed_pointer: succeeded ty={:?} adjustments={:?}", ty, adjustments);
      .           
  1,712 ( 0.00%)          success(adjustments, ty, obligations)
  6,240 ( 0.00%)      }
      .           
      .               // &[T; n] or &mut [T; n] -> &[T]
      .               // or &mut [T; n] -> &mut [T]
      .               // or &Concrete -> &Trait, etc.
      .               #[instrument(skip(self), level = "debug")]
      .               fn coerce_unsized(&self, mut source: Ty<'tcx>, mut target: Ty<'tcx>) -> CoerceResult<'tcx> {
      .                   source = self.shallow_resolve(source);
      .                   target = self.shallow_resolve(target);
-- line 490 ----------------------------------------
-- line 506 ----------------------------------------
      .                   // would need to be generic over the self-type (`impl<T> CoerceUnsized<SomeType> for T`)
      .                   // or generic over the `CoerceUnsized` type parameter (`impl<T> CoerceUnsized<T> for
      .                   // SomeType`).
      .                   //
      .                   // However, these are exactly the kinds of impls which are forbidden by
      .                   // the compiler! Therefore, we can be sure that coercion will always fail
      .                   // when either the source or target type is a type variable. This allows us
      .                   // to skip performing any trait selection, and immediately bail out.
 23,118 ( 0.00%)          if source.is_ty_var() {
      .                       debug!("coerce_unsized: source is a TyVar, bailing out");
      .                       return Err(TypeError::Mismatch);
      .                   }
 23,770 ( 0.00%)          if target.is_ty_var() {
      .                       debug!("coerce_unsized: target is a TyVar, bailing out");
      .                       return Err(TypeError::Mismatch);
      .                   }
      .           
      .                   let traits =
271,884 ( 0.01%)              (self.tcx.lang_items().unsize_trait(), self.tcx.lang_items().coerce_unsized_trait());
 90,628 ( 0.00%)          let (Some(unsize_did), Some(coerce_unsized_did)) = traits else {
      .                       debug!("missing Unsize or CoerceUnsized traits");
      .                       return Err(TypeError::Mismatch);
      .                   };
      .           
      .                   // Note, we want to avoid unnecessary unsizing. We don't want to coerce to
      .                   // a DST unless we have to. This currently comes out in the wash since
      .                   // we can't unify [T] with U. But to properly support DST, we need to allow
      .                   // that, at which point we will need extra checks on the target here.
      .           
      .                   // Handle reborrows before selecting `Source: CoerceUnsized<Target>`.
 47,723 ( 0.00%)          let reborrow = match (source.kind(), target.kind()) {
  2,409 ( 0.00%)              (&ty::Ref(_, ty_a, mutbl_a), &ty::Ref(_, _, mutbl_b)) => {
      .                           coerce_mutbls(mutbl_a, mutbl_b)?;
      .           
    803 ( 0.00%)                  let coercion = Coercion(self.cause.span);
  4,015 ( 0.00%)                  let r_borrow = self.next_region_var(coercion);
      .                           let mutbl = match mutbl_b {
      .                               hir::Mutability::Not => AutoBorrowMutability::Not,
      .                               hir::Mutability::Mut => AutoBorrowMutability::Mut {
      .                                   // We don't allow two-phase borrows here, at least for initial
      .                                   // implementation. If it happens that this coercion is a function argument,
      .                                   // the reborrow in coerce_borrowed_ptr will pick it up.
      .                                   allow_two_phase_borrow: AllowTwoPhase::No,
      .                               },
      .                           };
      .                           Some((
      .                               Adjustment { kind: Adjust::Deref(None), target: ty_a },
      .                               Adjustment {
      .                                   kind: Adjust::Borrow(AutoBorrow::Ref(r_borrow, mutbl)),
    803 ( 0.00%)                          target: self
      .                                       .tcx
      .                                       .mk_ref(r_borrow, ty::TypeAndMut { mutbl: mutbl_b, ty: ty_a }),
      .                               },
      .                           ))
      .                       }
      .                       (&ty::Ref(_, ty_a, mt_a), &ty::RawPtr(ty::TypeAndMut { mutbl: mt_b, .. })) => {
      .                           coerce_mutbls(mt_a, mt_b)?;
      .           
-- line 563 ----------------------------------------
-- line 574 ----------------------------------------
      .                   let coerce_source = reborrow.as_ref().map_or(source, |&(_, ref r)| r.target);
      .           
      .                   // Setup either a subtyping or a LUB relationship between
      .                   // the `CoerceUnsized` target type and the expected type.
      .                   // We only have the latter, so we use an inference variable
      .                   // for the former and let type inference do the rest.
      .                   let origin = TypeVariableOrigin {
      .                       kind: TypeVariableOriginKind::MiscVariable,
 22,657 ( 0.00%)              span: self.cause.span,
      .                   };
113,285 ( 0.00%)          let coerce_target = self.next_ty_var(origin);
 90,628 ( 0.00%)          let mut coercion = self.unify_and(coerce_target, target, |target| {
      .                       let unsize = Adjustment { kind: Adjust::Pointer(PointerCast::Unsize), target };
 45,314 ( 0.00%)              match reborrow {
109,270 ( 0.00%)                  None => vec![unsize],
 11,242 ( 0.00%)                  Some((ref deref, ref autoref)) => vec![deref.clone(), autoref.clone(), unsize],
      .                       }
      .                   })?;
      .           
 22,657 ( 0.00%)          let mut selcx = traits::SelectionContext::new(self);
      .           
      .                   // Create an obligation for `Source: CoerceUnsized<Target>`.
      .                   let cause = ObligationCause::new(
 45,314 ( 0.00%)              self.cause.span,
 45,314 ( 0.00%)              self.body_id,
      .                       ObligationCauseCode::Coercion { source, target },
      .                   );
      .           
      .                   // Use a FIFO queue for this custom fulfillment procedure.
      .                   //
      .                   // A Vec (or SmallVec) is not a natural choice for a queue. However,
      .                   // this code path is hot, and this queue usually has a max length of 1
      .                   // and almost never more than 3. By using a SmallVec we avoid an
      .                   // allocation, at the (very small) cost of (occasionally) having to
      .                   // shift subsequent elements down when removing the front element.
317,198 ( 0.01%)          let mut queue: SmallVec<[_; 4]> = smallvec![traits::predicate_for_trait_def(
 45,314 ( 0.00%)              self.tcx,
 22,657 ( 0.00%)              self.fcx.param_env,
113,285 ( 0.00%)              cause,
      .                       coerce_unsized_did,
      .                       0,
      .                       coerce_source,
113,285 ( 0.00%)              &[coerce_target.into()]
      .                   )];
      .           
      .                   let mut has_unsized_tuple_coercion = false;
      .                   let mut has_trait_upcasting_coercion = false;
      .           
      .                   // Keep resolving `CoerceUnsized` and `Unsize` predicates to avoid
      .                   // emitting a coercion in cases like `Foo<$1>` -> `Foo<$2>`, where
      .                   // inference might unify those two inner type variables later.
      .                   let traits = [coerce_unsized_did, unsize_did];
 48,536 ( 0.00%)          while !queue.is_empty() {
      .                       let obligation = queue.remove(0);
      .                       debug!("coerce_unsized resolve step: {:?}", obligation);
 24,245 ( 0.00%)              let bound_predicate = obligation.predicate.kind();
121,225 ( 0.00%)              let trait_pred = match bound_predicate.skip_binder() {
140,844 ( 0.00%)                  ty::PredicateKind::Trait(trait_pred) if traits.contains(&trait_pred.def_id()) => {
211,140 ( 0.01%)                      if unsize_did == trait_pred.def_id() {
  4,818 ( 0.00%)                          let self_ty = trait_pred.self_ty();
  3,212 ( 0.00%)                          let unsize_ty = trait_pred.trait_ref.substs[1].expect_ty();
  4,015 ( 0.00%)                          if let (ty::Dynamic(ref data_a, ..), ty::Dynamic(ref data_b, ..)) =
      .                                       (self_ty.kind(), unsize_ty.kind())
      .                                   {
      .                                       if data_a.principal_def_id() != data_b.principal_def_id() {
      .                                           debug!("coerce_unsized: found trait upcasting coercion");
      .                                           has_trait_upcasting_coercion = true;
      .                                       }
      .                                   }
  4,818 ( 0.00%)                          if let ty::Tuple(..) = unsize_ty.kind() {
      .                                       debug!("coerce_unsized: found unsized tuple coercion");
      .                                       has_unsized_tuple_coercion = true;
      .                                   }
      .                               }
 46,920 ( 0.00%)                      bound_predicate.rebind(trait_pred)
      .                           }
      .                           _ => {
  4,710 ( 0.00%)                      coercion.obligations.push(obligation);
      .                               continue;
      .                           }
      .                       };
258,060 ( 0.01%)              match selcx.select(&obligation.with(trait_pred)) {
      .                           // Uncertain or unimplemented.
      .                           Ok(None) => {
    455 ( 0.00%)                      if trait_pred.def_id() == unsize_did {
    210 ( 0.00%)                          let trait_pred = self.resolve_vars_if_possible(trait_pred);
     70 ( 0.00%)                          let self_ty = trait_pred.skip_binder().self_ty();
    210 ( 0.00%)                          let unsize_ty = trait_pred.skip_binder().trait_ref.substs[1].expect_ty();
      .                                   debug!("coerce_unsized: ambiguous unsize case for {:?}", trait_pred);
     70 ( 0.00%)                          match (&self_ty.kind(), &unsize_ty.kind()) {
      .                                       (ty::Infer(ty::TyVar(v)), ty::Dynamic(..))
      .                                           if self.type_var_is_sized(*v) =>
      .                                       {
      .                                           debug!("coerce_unsized: have sized infer {:?}", v);
      .                                           coercion.obligations.push(obligation);
      .                                           // `$0: Unsize<dyn Trait>` where we know that `$0: Sized`, try going
      .                                           // for unsizing.
      .                                       }
-- line 671 ----------------------------------------
-- line 679 ----------------------------------------
      .                                   }
      .                               } else {
      .                                   debug!("coerce_unsized: early return - ambiguous");
      .                                   return Err(TypeError::Mismatch);
      .                               }
      .                           }
      .                           Err(traits::Unimplemented) => {
      .                               debug!("coerce_unsized: early return - can't prove obligation");
135,594 ( 0.00%)                      return Err(TypeError::Mismatch);
      .                           }
      .           
      .                           // Object safety violations or miscellaneous.
      .                           Err(err) => {
      .                               self.report_selection_error(obligation.clone(), &obligation, &err, false);
      .                               // Treat this like an obligation and follow through
      .                               // with the unsizing - the lack of a coercion should
      .                               // be silent, as it causes a type mismatch later.
      .                           }
      .           
 15,694 ( 0.00%)                  Ok(Some(impl_source)) => queue.extend(impl_source.nested_obligations()),
      .                       }
 45,268 ( 0.00%)          }
      .           
     46 ( 0.00%)          if has_unsized_tuple_coercion && !self.tcx.features().unsized_tuple_coercion {
      .                       feature_err(
      .                           &self.tcx.sess.parse_sess,
      .                           sym::unsized_tuple_coercion,
      .                           self.cause.span,
      .                           "unsized tuple coercion is not stable enough for use and is subject to change",
      .                       )
      .                       .emit();
      .                   }
      .           
     46 ( 0.00%)          if has_trait_upcasting_coercion && !self.tcx().features().trait_upcasting {
      .                       feature_err(
      .                           &self.tcx.sess.parse_sess,
      .                           sym::trait_upcasting,
      .                           self.cause.span,
      .                           "trait upcasting coercion is experimental",
      .                       )
      .                       .emit();
      .                   }
      .           
    253 ( 0.00%)          Ok(coercion)
      .               }
      .           
      .               fn coerce_from_safe_fn<F, G>(
      .                   &self,
      .                   a: Ty<'tcx>,
      .                   fn_ty_a: ty::PolyFnSig<'tcx>,
      .                   b: Ty<'tcx>,
      .                   to_unsafe: F,
-- line 730 ----------------------------------------
-- line 819 ----------------------------------------
      .           
      .                           obligations.extend(o2);
      .                           Ok(InferOk { value, obligations })
      .                       }
      .                       _ => self.unify_and(a, b, identity),
      .                   }
      .               }
      .           
    266 ( 0.00%)      fn coerce_closure_to_fn(
      .                   &self,
      .                   a: Ty<'tcx>,
      .                   closure_def_id_a: DefId,
      .                   substs_a: SubstsRef<'tcx>,
      .                   b: Ty<'tcx>,
      .               ) -> CoerceResult<'tcx> {
      .                   //! Attempts to coerce from the type of a non-capturing closure
      .                   //! into a function pointer.
      .                   //!
      .           
      .                   let b = self.shallow_resolve(b);
      .           
     38 ( 0.00%)          match b.kind() {
      .                       // At this point we haven't done capture analysis, which means
      .                       // that the ClosureSubsts just contains an inference variable instead
      .                       // of tuple of captured types.
      .                       //
      .                       // All we care here is if any variable is being captured and not the exact paths,
      .                       // so we check `upvars_mentioned` for root variables being captured.
      .                       ty::FnPtr(fn_ty)
      .                           if self
-- line 848 ----------------------------------------
-- line 864 ----------------------------------------
      .                           self.unify_and(
      .                               pointer_ty,
      .                               b,
      .                               simple(Adjust::Pointer(PointerCast::ClosureFnPointer(unsafety))),
      .                           )
      .                       }
      .                       _ => self.unify_and(a, b, identity),
      .                   }
    152 ( 0.00%)      }
      .           
      .               fn coerce_unsafe_ptr(
      .                   &self,
      .                   a: Ty<'tcx>,
      .                   b: Ty<'tcx>,
      .                   mutbl_b: hir::Mutability,
      .               ) -> CoerceResult<'tcx> {
      .                   debug!("coerce_unsafe_ptr(a={:?}, b={:?})", a, b);
-- line 880 ----------------------------------------
-- line 906 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> FnCtxt<'a, 'tcx> {
      .               /// Attempt to coerce an expression to a type, and return the
      .               /// adjusted type of the expression, if successful.
      .               /// Adjustments are only recorded if the coercion succeeded.
      .               /// The expressions *must not* have any pre-existing adjustments.
322,238 ( 0.01%)      pub fn try_coerce(
      .                   &self,
      .                   expr: &hir::Expr<'_>,
      .                   expr_ty: Ty<'tcx>,
      .                   target: Ty<'tcx>,
      .                   allow_two_phase: AllowTwoPhase,
      .                   cause: Option<ObligationCause<'tcx>>,
      .               ) -> RelateResult<'tcx, Ty<'tcx>> {
 69,051 ( 0.00%)          let source = self.resolve_vars_with_obligations(expr_ty);
      .                   debug!("coercion::try({:?}: {:?} -> {:?})", expr, source, target);
      .           
      .                   let cause =
 23,017 ( 0.00%)              cause.unwrap_or_else(|| self.cause(expr.span, ObligationCauseCode::ExprAssignable));
      .                   let coerce = Coerce::new(self, cause, allow_two_phase);
276,144 ( 0.01%)          let ok = self.commit_if_ok(|_| coerce.coerce(source, target))?;
      .           
 92,020 ( 0.00%)          let (adjustments, _) = self.register_infer_ok_obligations(ok);
230,050 ( 0.01%)          self.apply_adjustments(expr, adjustments);
 69,015 ( 0.00%)          Ok(if expr_ty.references_error() { self.tcx.ty_error() } else { target })
207,153 ( 0.01%)      }
      .           
      .               /// Same as `try_coerce()`, but without side-effects.
      .               ///
      .               /// Returns false if the coercion creates any obligations that result in
      .               /// errors.
     18 ( 0.00%)      pub fn can_coerce(&self, expr_ty: Ty<'tcx>, target: Ty<'tcx>) -> bool {
      4 ( 0.00%)          let source = self.resolve_vars_with_obligations(expr_ty);
      .                   debug!("coercion::can_with_predicates({:?} -> {:?})", source, target);
      .           
      .                   let cause = self.cause(rustc_span::DUMMY_SP, ObligationCauseCode::ExprAssignable);
      .                   // We don't ever need two-phase here since we throw out the result of the coercion
      .                   let coerce = Coerce::new(self, cause, AllowTwoPhase::No);
     14 ( 0.00%)          self.probe(|_| {
      6 ( 0.00%)              let ok = match coerce.coerce(source, target) {
     18 ( 0.00%)                  Ok(ok) => ok,
      .                           _ => return false,
      .                       };
      2 ( 0.00%)              let mut fcx = traits::FulfillmentContext::new_in_snapshot();
      8 ( 0.00%)              fcx.register_predicate_obligations(self, ok.obligations);
      4 ( 0.00%)              fcx.select_where_possible(&self).is_empty()
      2 ( 0.00%)          })
     16 ( 0.00%)      }
      .           
      .               /// Given a type and a target type, this function will calculate and return
      .               /// how many dereference steps needed to achieve `expr_ty <: target`. If
      .               /// it's not possible, return `None`.
      .               pub fn deref_steps(&self, expr_ty: Ty<'tcx>, target: Ty<'tcx>) -> Option<usize> {
      .                   let cause = self.cause(rustc_span::DUMMY_SP, ObligationCauseCode::ExprAssignable);
      .                   // We don't ever need two-phase here since we throw out the result of the coercion
      .                   let coerce = Coerce::new(self, cause, AllowTwoPhase::No);
-- line 963 ----------------------------------------
-- line 967 ----------------------------------------
      .               }
      .           
      .               /// Given some expressions, their known unified type and another expression,
      .               /// tries to unify the types, potentially inserting coercions on any of the
      .               /// provided expressions and returns their LUB (aka "common supertype").
      .               ///
      .               /// This is really an internal helper. From outside the coercion
      .               /// module, you should instantiate a `CoerceMany` instance.
389,298 ( 0.01%)      fn try_find_coercion_lub<E>(
      .                   &self,
      .                   cause: &ObligationCause<'tcx>,
      .                   exprs: &[E],
      .                   prev_ty: Ty<'tcx>,
      .                   new: &hir::Expr<'_>,
      .                   new_ty: Ty<'tcx>,
      .               ) -> RelateResult<'tcx, Ty<'tcx>>
      .               where
      .                   E: AsCoercionSite,
      .               {
179,676 ( 0.00%)          let prev_ty = self.resolve_vars_with_obligations(prev_ty);
 89,838 ( 0.00%)          let new_ty = self.resolve_vars_with_obligations(new_ty);
      .                   debug!(
      .                       "coercion::try_find_coercion_lub({:?}, {:?}, exprs={:?} exprs)",
      .                       prev_ty,
      .                       new_ty,
      .                       exprs.len()
      .                   );
      .           
      .                   // The following check fixes #88097, where the compiler erroneously
      .                   // attempted to coerce a closure type to itself via a function pointer.
 29,946 ( 0.00%)          if prev_ty == new_ty {
 29,855 ( 0.00%)              return Ok(prev_ty);
      .                   }
      .           
      .                   // Special-case that coercion alone cannot handle:
      .                   // Function items or non-capturing closures of differing IDs or InternalSubsts.
    376 ( 0.00%)          let (a_sig, b_sig) = {
    376 ( 0.00%)              let is_capturing_closure = |ty| {
    188 ( 0.00%)                  if let &ty::Closure(closure_def_id, _substs) = ty {
      .                               self.tcx.upvars_mentioned(closure_def_id.expect_local()).is_some()
      .                           } else {
      .                               false
      .                           }
    376 ( 0.00%)              };
    564 ( 0.00%)              if is_capturing_closure(prev_ty.kind()) || is_capturing_closure(new_ty.kind()) {
      .                           (None, None)
      .                       } else {
    282 ( 0.00%)                  match (prev_ty.kind(), new_ty.kind()) {
      .                               (ty::FnDef(..), ty::FnDef(..)) => {
      .                                   // Don't reify if the function types have a LUB, i.e., they
      .                                   // are the same function and their parameters have a LUB.
      .                                   match self
      .                                       .commit_if_ok(|_| self.at(cause, self.param_env).lub(prev_ty, new_ty))
      .                                   {
      .                                       // We have a LUB of prev_ty and new_ty, just return it.
      .                                       Ok(ok) => return Ok(self.register_infer_ok_obligations(ok)),
-- line 1022 ----------------------------------------
-- line 1048 ----------------------------------------
      .                                       substs_b.as_closure().sig(),
      .                                       hir::Unsafety::Normal,
      .                                   )),
      .                               ),
      .                               _ => (None, None),
      .                           }
      .                       }
      .                   };
    188 ( 0.00%)          if let (Some(a_sig), Some(b_sig)) = (a_sig, b_sig) {
      .                       // Intrinsics are not coercible to function pointers.
      .                       if a_sig.abi() == Abi::RustIntrinsic
      .                           || a_sig.abi() == Abi::PlatformIntrinsic
      .                           || b_sig.abi() == Abi::RustIntrinsic
      .                           || b_sig.abi() == Abi::PlatformIntrinsic
      .                       {
      .                           return Err(TypeError::IntrinsicCast);
      .                       }
-- line 1064 ----------------------------------------
-- line 1094 ----------------------------------------
      .                   }
      .           
      .                   // Configure a Coerce instance to compute the LUB.
      .                   // We don't allow two-phase borrows on any autorefs this creates since we
      .                   // probably aren't processing function arguments here and even if we were,
      .                   // they're going to get autorefed again anyway and we can apply 2-phase borrows
      .                   // at that time.
      .                   let mut coerce = Coerce::new(self, cause.clone(), AllowTwoPhase::No);
     47 ( 0.00%)          coerce.use_lub = true;
      .           
      .                   // First try to coerce the new expression to the type of the previous ones,
      .                   // but only if the new expression has no coercion already applied to it.
      .                   let mut first_error = None;
    376 ( 0.00%)          if !self.typeck_results.borrow().adjustments().contains_key(new.hir_id) {
 23,440 ( 0.00%)              let result = self.commit_if_ok(|_| coerce.coerce(new_ty, prev_ty));
     94 ( 0.00%)              match result {
      .                           Ok(ok) => {
    376 ( 0.00%)                      let (adjustments, target) = self.register_infer_ok_obligations(ok);
    376 ( 0.00%)                      self.apply_adjustments(new, adjustments);
      .                               debug!(
      .                                   "coercion::try_find_coercion_lub: was able to coerce from previous type {:?} to new type {:?}",
      .                                   prev_ty, new_ty,
      .                               );
     94 ( 0.00%)                      return Ok(target);
      .                           }
      .                           Err(e) => first_error = Some(e),
      .                       }
      .                   }
      .           
      .                   // Then try to coerce the previous expressions to the type of the new one.
      .                   // This requires ensuring there are no coercions applied to *any* of the
      .                   // previous expressions, other than noop reborrows (ignoring lifetimes).
-- line 1125 ----------------------------------------
-- line 1175 ----------------------------------------
      .                           let (adjustments, target) = self.register_infer_ok_obligations(ok);
      .                           for expr in exprs {
      .                               let expr = expr.as_coercion_site();
      .                               self.apply_adjustments(expr, adjustments.clone());
      .                           }
      .                           Ok(target)
      .                       }
      .                   }
269,514 ( 0.01%)      }
      .           }
      .           
      .           /// CoerceMany encapsulates the pattern you should use when you have
      .           /// many expressions that are all getting coerced to a common
      .           /// type. This arises, for example, when you have a match (the result
      .           /// of each arm is coerced to a common type). It also arises in less
      .           /// obvious places, such as when you have many `break foo` expressions
      .           /// that target the same loop, or the various `return` expressions in
-- line 1191 ----------------------------------------
-- line 1253 ----------------------------------------
      .               /// expected to pass each element in the slice to `coerce(...)` in
      .               /// order. This is used with arrays in particular to avoid
      .               /// needlessly cloning the slice.
      .               pub fn with_coercion_sites(expected_ty: Ty<'tcx>, coercion_sites: &'exprs [E]) -> Self {
      .                   Self::make(expected_ty, Expressions::UpFront(coercion_sites))
      .               }
      .           
      .               fn make(expected_ty: Ty<'tcx>, expressions: Expressions<'tcx, 'exprs, E>) -> Self {
 60,571 ( 0.00%)          CoerceMany { expected_ty, final_ty: None, expressions, pushed: 0 }
      .               }
      .           
      .               /// Returns the "expected type" with which this coercion was
      .               /// constructed. This represents the "downward propagated" type
      .               /// that was given to us at the start of typing whatever construct
      .               /// we are typing (e.g., the match expression).
      .               ///
      .               /// Typically, this is used as the expected type when
-- line 1269 ----------------------------------------
-- line 1281 ----------------------------------------
      .                   self.final_ty.unwrap_or(self.expected_ty)
      .               }
      .           
      .               /// Indicates that the value generated by `expression`, which is
      .               /// of type `expression_ty`, is one of the possibilities that we
      .               /// could coerce from. This will record `expression`, and later
      .               /// calls to `coerce` may come back and add adjustments and things
      .               /// if necessary.
476,856 ( 0.01%)      pub fn coerce<'a>(
      .                   &mut self,
      .                   fcx: &FnCtxt<'a, 'tcx>,
      .                   cause: &ObligationCause<'tcx>,
      .                   expression: &'tcx hir::Expr<'tcx>,
      .                   expression_ty: Ty<'tcx>,
      .               ) {
  3,738 ( 0.00%)          self.coerce_inner(fcx, cause, Some(expression), expression_ty, None, false)
317,904 ( 0.01%)      }
      .           
      .               /// Indicates that one of the inputs is a "forced unit". This
      .               /// occurs in a case like `if foo { ... };`, where the missing else
      .               /// generates a "forced unit". Another example is a `loop { break;
      .               /// }`, where the `break` has no argument expression. We treat
      .               /// these cases slightly differently for error-reporting
      .               /// purposes. Note that these tend to correspond to cases where
      .               /// the `()` expression is implicit in the source, and hence we do
-- line 1305 ----------------------------------------
-- line 1310 ----------------------------------------
      .               /// removing a `;`).
      .               pub fn coerce_forced_unit<'a>(
      .                   &mut self,
      .                   fcx: &FnCtxt<'a, 'tcx>,
      .                   cause: &ObligationCause<'tcx>,
      .                   augment_error: &mut dyn FnMut(&mut DiagnosticBuilder<'_>),
      .                   label_unit_as_expected: bool,
      .               ) {
    756 ( 0.00%)          self.coerce_inner(
      .                       fcx,
      .                       cause,
      .                       None,
     84 ( 0.00%)              fcx.tcx.mk_unit(),
      .                       Some(augment_error),
      .                       label_unit_as_expected,
      .                   )
      .               }
      .           
      .               /// The inner coercion "engine". If `expression` is `None`, this
      .               /// is a forced-unit case, and hence `expression_ty` must be
      .               /// `Nil`.
 14,574 ( 0.00%)      #[instrument(skip(self, fcx, augment_error, label_expression_as_expected), level = "debug")]
      .               crate fn coerce_inner<'a>(
      .                   &mut self,
      .                   fcx: &FnCtxt<'a, 'tcx>,
      .                   cause: &ObligationCause<'tcx>,
      .                   expression: Option<&'tcx hir::Expr<'tcx>>,
      .                   mut expression_ty: Ty<'tcx>,
      .                   augment_error: Option<&mut dyn FnMut(&mut DiagnosticBuilder<'_>)>,
      .                   label_expression_as_expected: bool,
      .               ) {
      .                   // Incorporate whatever type inference information we have
      .                   // until now; in principle we might also want to process
      .                   // pending obligations, but doing so should only improve
      .                   // compatibility (hopefully that is true) by helping us
      .                   // uncover never types better.
 40,466 ( 0.00%)          if expression_ty.is_ty_var() {
      .                       expression_ty = fcx.infcx.shallow_resolve(expression_ty);
      .                   }
      .           
      .                   // If we see any error types, just propagate that error
      .                   // upwards.
161,728 ( 0.00%)          if expression_ty.references_error() || self.merged_ty().references_error() {
      .                       self.final_ty = Some(fcx.tcx.ty_error());
      .                       return;
      .                   }
      .           
      .                   // Handle the actual type unification etc.
  2,082 ( 0.00%)          let result = if let Some(expression) = expression {
121,044 ( 0.00%)              if self.pushed == 0 {
      .                           // Special-case the first expression we are coercing.
      .                           // To be honest, I'm not entirely sure why we do this.
      .                           // We don't allow two-phase borrows, see comment in try_find_coercion_lub for why
 93,618 ( 0.00%)                  fcx.try_coerce(
      .                               expression,
      .                               expression_ty,
      .                               self.expected_ty,
      .                               AllowTwoPhase::No,
 41,608 ( 0.00%)                      Some(cause.clone()),
      .                           )
      .                       } else {
 59,892 ( 0.00%)                  match self.expressions {
    150 ( 0.00%)                      Expressions::Dynamic(ref exprs) => fcx.try_find_coercion_lub(
      .                                   cause,
      .                                   exprs,
      .                                   self.merged_ty(),
      .                                   expression,
      .                                   expression_ty,
      .                               ),
179,296 ( 0.00%)                      Expressions::UpFront(ref coercion_sites) => fcx.try_find_coercion_lub(
      .                                   cause,
 89,613 ( 0.00%)                          &coercion_sites[0..self.pushed],
      .                                   self.merged_ty(),
      .                                   expression,
      .                                   expression_ty,
      .                               ),
      .                           }
      .                       }
      .                   } else {
      .                       // this is a hack for cases where we default to `()` because
-- line 1389 ----------------------------------------
-- line 1394 ----------------------------------------
      .                       //
      .                       // we wind up with a second match arm that is like `_ =>
      .                       // ()`.  That is the case we are considering here. We take
      .                       // a different path to get the right "expected, found"
      .                       // message and so forth (and because we know that
      .                       // `expression_ty` will be unit).
      .                       //
      .                       // Another example is `break` with no argument expression.
     84 ( 0.00%)              assert!(expression_ty.is_unit(), "if let hack without unit type");
    168 ( 0.00%)              fcx.at(cause, fcx.param_env)
      .                           .eq_exp(label_expression_as_expected, expression_ty, self.merged_ty())
      .                           .map(|infer_ok| {
      .                               fcx.register_infer_ok_obligations(infer_ok);
      .                               expression_ty
      .                           })
      .                   };
      .           
 80,925 ( 0.00%)          match result {
 40,516 ( 0.00%)              Ok(v) => {
 40,348 ( 0.00%)                  self.final_ty = Some(v);
      .                           if let Some(e) = expression {
 80,696 ( 0.00%)                      match self.expressions {
      .                                   Expressions::Dynamic(ref mut buffer) => buffer.push(e),
 80,146 ( 0.00%)                          Expressions::UpFront(coercion_sites) => {
      .                                       // if the user gave us an array to validate, check that we got
      .                                       // the next expression in the list, as expected
159,957 ( 0.00%)                              assert_eq!(
120,219 ( 0.00%)                                  coercion_sites[self.pushed].as_coercion_site().hir_id,
      .                                           e.hir_id
      .                                       );
      .                                   }
      .                               }
161,667 ( 0.00%)                      self.pushed += 1;
      .                           }
      .                       }
      .                       Err(coercion_error) => {
      .                           let (expected, found) = if label_expression_as_expected {
      .                               // In the case where this is a "forced unit", like
      .                               // `break`, we want to call the `()` "expected"
      .                               // since it is implied by the syntax.
      .                               // (Note: not all force-units work this way.)"
-- line 1434 ----------------------------------------
-- line 1707 ----------------------------------------
      .                           if let ty::Dynamic(..) = ty.kind() {
      .                               return true;
      .                           }
      .                       }
      .                   }
      .                   false
      .               }
      .           
 40,356 ( 0.00%)      pub fn complete<'a>(self, fcx: &FnCtxt<'a, 'tcx>) -> Ty<'tcx> {
 31,413 ( 0.00%)          if let Some(final_ty) = self.final_ty {
      .                       final_ty
      .                   } else {
      .                       // If we only had inputs that were of type `!` (or no
      .                       // inputs at all), then the final type is `!`.
     60 ( 0.00%)              assert_eq!(self.pushed, 0);
     30 ( 0.00%)              fcx.tcx.types.never
      .                   }
 50,445 ( 0.00%)      }
      .           }
      .           
      .           /// Something that can be converted into an expression to which we can
      .           /// apply a coercion.
      .           pub trait AsCoercionSite {
      .               fn as_coercion_site(&self) -> &hir::Expr<'_>;
      .           }
      .           
-- line 1732 ----------------------------------------
-- line 1736 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'a, T> AsCoercionSite for &'a T
      .           where
      .               T: AsCoercionSite,
      .           {
      .               fn as_coercion_site(&self) -> &hir::Expr<'_> {
    202 ( 0.00%)          (**self).as_coercion_site()
      .               }
      .           }
      .           
      .           impl AsCoercionSite for ! {
      .               fn as_coercion_site(&self) -> &hir::Expr<'_> {
      .                   unreachable!()
      .               }
      .           }
      .           
      .           impl AsCoercionSite for hir::Arm<'_> {
      .               fn as_coercion_site(&self) -> &hir::Expr<'_> {
    266 ( 0.00%)          &self.body
      .               }
      .           }

853,054 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/coercion.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/terminator.rs
--------------------------------------------------------------------------------
Ir                 

-- line 12 ----------------------------------------
        .           use rustc_span::Span;
        .           use std::borrow::Cow;
        .           use std::fmt::{self, Debug, Formatter, Write};
        .           use std::iter;
        .           use std::slice;
        .           
        .           pub use super::query::*;
        .           
    1,611 ( 0.00%)  #[derive(Debug, Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq, PartialOrd)]
        .           pub struct SwitchTargets {
        .               /// Possible values. The locations to branch to in each case
        .               /// are found in the corresponding indices from the `targets` vector.
        .               values: SmallVec<[u128; 1]>,
        .           
        .               /// Possible branch sites. The last element of this vector is used
        .               /// for the otherwise branch, so targets.len() == values.len() + 1
        .               /// should hold.
-- line 28 ----------------------------------------
-- line 38 ----------------------------------------
        .               targets: SmallVec<[BasicBlock; 2]>,
        .           }
        .           
        .           impl SwitchTargets {
        .               /// Creates switch targets from an iterator of values and target blocks.
        .               ///
        .               /// The iterator may be empty, in which case the `SwitchInt` instruction is equivalent to
        .               /// `goto otherwise;`.
      413 ( 0.00%)      pub fn new(targets: impl Iterator<Item = (u128, BasicBlock)>, otherwise: BasicBlock) -> Self {
      472 ( 0.00%)          let (values, mut targets): (SmallVec<_>, SmallVec<_>) = targets.unzip();
        .                   targets.push(otherwise);
      472 ( 0.00%)          Self { values, targets }
      413 ( 0.00%)      }
        .           
        .               /// Builds a switch targets definition that jumps to `then` if the tested value equals `value`,
        .               /// and to `else_` if not.
        .               pub fn static_if(value: u128, then: BasicBlock, else_: BasicBlock) -> Self {
        .                   Self { values: smallvec![value], targets: smallvec![then, else_] }
        .               }
        .           
        .               /// Returns the fallback target that is jumped to when none of the values match the operand.
       75 ( 0.00%)      pub fn otherwise(&self) -> BasicBlock {
       75 ( 0.00%)          *self.targets.last().unwrap()
      150 ( 0.00%)      }
        .           
        .               /// Returns an iterator over the switch targets.
        .               ///
        .               /// The iterator will yield tuples containing the value and corresponding target to jump to, not
        .               /// including the `otherwise` fallback target.
        .               ///
        .               /// Note that this may yield 0 elements. Only the `otherwise` branch is mandatory.
       75 ( 0.00%)      pub fn iter(&self) -> SwitchTargetsIter<'_> {
      525 ( 0.00%)          SwitchTargetsIter { inner: iter::zip(&self.values, &self.targets) }
       75 ( 0.00%)      }
        .           
        .               /// Returns a slice with all possible jump targets (including the fallback target).
      958 ( 0.00%)      pub fn all_targets(&self) -> &[BasicBlock] {
        .                   &self.targets
      958 ( 0.00%)      }
        .           
        .               pub fn all_targets_mut(&mut self) -> &mut [BasicBlock] {
        .                   &mut self.targets
        .               }
        .           
        .               /// Finds the `BasicBlock` to which this `SwitchInt` will branch given the
        .               /// specific value.  This cannot fail, as it'll return the `otherwise`
        .               /// branch if there's not a specific match for the value.
-- line 84 ----------------------------------------
-- line 90 ----------------------------------------
        .           pub struct SwitchTargetsIter<'a> {
        .               inner: iter::Zip<slice::Iter<'a, u128>, slice::Iter<'a, BasicBlock>>,
        .           }
        .           
        .           impl<'a> Iterator for SwitchTargetsIter<'a> {
        .               type Item = (u128, BasicBlock);
        .           
        .               fn next(&mut self) -> Option<Self::Item> {
      284 ( 0.00%)          self.inner.next().map(|(val, bb)| (*val, *bb))
      217 ( 0.00%)      }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           
        .           impl<'a> ExactSizeIterator for SwitchTargetsIter<'a> {}
        .           
1,028,496 ( 0.03%)  #[derive(Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq)]
        .           pub enum TerminatorKind<'tcx> {
        .               /// Block should have one successor in the graph; we jump there.
    5,385 ( 0.00%)      Goto { target: BasicBlock },
        .           
        .               /// Operand evaluates to an integer; jump depending on its value
        .               /// to one of the targets, and otherwise fallback to `otherwise`.
        .               SwitchInt {
        .                   /// The discriminant value being tested.
        .                   discr: Operand<'tcx>,
        .           
        .                   /// The type of value being tested.
        .                   /// This is always the same as the type of `discr`.
        .                   /// FIXME: remove this redundant information. Currently, it is relied on by pretty-printing.
      179 ( 0.00%)          switch_ty: Ty<'tcx>,
        .           
        .                   targets: SwitchTargets,
        .               },
        .           
        .               /// Indicates that the landing pad is finished and unwinding should
        .               /// continue. Emitted by `build::scope::diverge_cleanup`.
        .               Resume,
        .           
-- line 130 ----------------------------------------
-- line 136 ----------------------------------------
        .               /// been filled in before this executes. This can occur multiple times
        .               /// in different basic blocks.
        .               Return,
        .           
        .               /// Indicates a terminator that can never be reached.
        .               Unreachable,
        .           
        .               /// Drop the `Place`.
    1,440 ( 0.00%)      Drop { place: Place<'tcx>, target: BasicBlock, unwind: Option<BasicBlock> },
        .           
        .               /// Drop the `Place` and assign the new value over it. This ensures
        .               /// that the assignment to `P` occurs *even if* the destructor for
        .               /// place unwinds. Its semantics are best explained by the
        .               /// elaboration:
        .               ///
        .               /// ```
        .               /// BB0 {
-- line 152 ----------------------------------------
-- line 181 ----------------------------------------
        .               /// Block ends with a call of a function.
        .               Call {
        .                   /// The function that’s being called.
        .                   func: Operand<'tcx>,
        .                   /// Arguments the function is called with.
        .                   /// These are owned by the callee, which is free to modify them.
        .                   /// This allows the memory occupied by "by-value" arguments to be
        .                   /// reused across function calls without duplicating the contents.
   60,753 ( 0.00%)          args: Vec<Operand<'tcx>>,
        .                   /// Destination for the return value. If some, the call is converging.
        .                   destination: Option<(Place<'tcx>, BasicBlock)>,
        .                   /// Cleanups to be done if the call unwinds.
   40,502 ( 0.00%)          cleanup: Option<BasicBlock>,
        .                   /// `true` if this is from a call in HIR rather than from an overloaded
        .                   /// operator. True for overloaded function call.
        .                   from_hir_call: bool,
        .                   /// This `Span` is the span of the function, without the dot and receiver
        .                   /// (e.g. `foo(a, b)` in `x.foo(a, b)`
        .                   fn_span: Span,
        .               },
        .           
        .               /// Jump to the target if the condition has the expected value,
        .               /// otherwise panic with a message and a cleanup target.
        .               Assert {
        .                   cond: Operand<'tcx>,
       47 ( 0.00%)          expected: bool,
        .                   msg: AssertMessage<'tcx>,
       94 ( 0.00%)          target: BasicBlock,
       67 ( 0.00%)          cleanup: Option<BasicBlock>,
        .               },
        .           
        .               /// A suspend point.
        .               Yield {
        .                   /// The value to return.
        .                   value: Operand<'tcx>,
        .                   /// Where to resume to.
        .                   resume: BasicBlock,
-- line 217 ----------------------------------------
-- line 223 ----------------------------------------
        .           
        .               /// Indicates the end of the dropping of a generator.
        .               GeneratorDrop,
        .           
        .               /// A block where control flow only ever takes one real path, but borrowck
        .               /// needs to be more conservative.
        .               FalseEdge {
        .                   /// The target normal control flow will take.
      190 ( 0.00%)          real_target: BasicBlock,
        .                   /// A block control flow could conceptually jump to, but won't in
        .                   /// practice.
      285 ( 0.00%)          imaginary_target: BasicBlock,
        .               },
        .               /// A terminator for blocks that only take one path in reality, but where we
        .               /// reserve the right to unwind in borrowck, even if it won't happen in practice.
        .               /// This can arise in infinite loops with no function calls for example.
        .               FalseUnwind {
        .                   /// The target normal control flow will take.
       14 ( 0.00%)          real_target: BasicBlock,
        .                   /// The imaginary cleanup block link. This particular path will never be taken
        .                   /// in practice, but in order to avoid fragility we want to always
        .                   /// consider it in borrowck. We don't want to accept programs which
        .                   /// pass borrowck only when `panic=abort` or some assertions are disabled
        .                   /// due to release vs. debug mode builds. This needs to be an `Option` because
        .                   /// of the `remove_noop_landing_pads` and `abort_unwinding_calls` passes.
       14 ( 0.00%)          unwind: Option<BasicBlock>,
        .               },
        .           
        .               /// Block ends with an inline assembly block. This is a terminator since
        .               /// inline assembly is allowed to diverge.
        .               InlineAsm {
        .                   /// The template for the inline assembly, with placeholders.
        .                   template: &'tcx [InlineAsmTemplatePiece],
        .           
-- line 256 ----------------------------------------
-- line 268 ----------------------------------------
        .                   /// diverging (InlineAsmOptions::NORETURN).
        .                   destination: Option<BasicBlock>,
        .           
        .                   /// Cleanup to be done if the inline assembly unwinds. This is present
        .                   /// if and only if InlineAsmOptions::MAY_UNWIND is set.
        .                   cleanup: Option<BasicBlock>,
        .               },
        .           }
  802,326 ( 0.02%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable)]
        .           pub struct Terminator<'tcx> {
        .               pub source_info: SourceInfo,
        .               pub kind: TerminatorKind<'tcx>,
        .           }
        .           
        .           impl<'tcx> Terminator<'tcx> {
  154,622 ( 0.00%)      pub fn successors(&self) -> Successors<'_> {
  503,695 ( 0.01%)          self.kind.successors()
  231,933 ( 0.01%)      }
        .           
  148,904 ( 0.00%)      pub fn successors_mut(&mut self) -> SuccessorsMut<'_> {
   74,452 ( 0.00%)          self.kind.successors_mut()
  223,356 ( 0.01%)      }
        .           
        .               pub fn unwind(&self) -> Option<&Option<BasicBlock>> {
        .                   self.kind.unwind()
        .               }
        .           
        .               pub fn unwind_mut(&mut self) -> Option<&mut Option<BasicBlock>> {
        .                   self.kind.unwind_mut()
   10,636 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TerminatorKind<'tcx> {
      120 ( 0.00%)      pub fn if_(
        .                   tcx: TyCtxt<'tcx>,
        .                   cond: Operand<'tcx>,
        .                   t: BasicBlock,
        .                   f: BasicBlock,
        .               ) -> TerminatorKind<'tcx> {
    1,200 ( 0.00%)          TerminatorKind::SwitchInt {
      240 ( 0.00%)              discr: cond,
      120 ( 0.00%)              switch_ty: tcx.types.bool,
        .                       targets: SwitchTargets::static_if(0, f, t),
        .                   }
      120 ( 0.00%)      }
        .           
  344,645 ( 0.01%)      pub fn successors(&self) -> Successors<'_> {
        .                   use self::TerminatorKind::*;
4,326,293 ( 0.11%)          match *self {
        .                       Resume
        .                       | Abort
        .                       | GeneratorDrop
        .                       | Return
        .                       | Unreachable
        .                       | Call { destination: None, cleanup: None, .. }
        .                       | InlineAsm { destination: None, cleanup: None, .. } => None.into_iter().chain(&[]),
   19,518 ( 0.00%)              Goto { target: ref t }
        .                       | Call { destination: None, cleanup: Some(ref t), .. }
        .                       | Call { destination: Some((_, ref t)), cleanup: None, .. }
        .                       | Yield { resume: ref t, drop: None, .. }
        .                       | DropAndReplace { target: ref t, unwind: None, .. }
        .                       | Drop { target: ref t, unwind: None, .. }
        .                       | Assert { target: ref t, cleanup: None, .. }
        .                       | FalseUnwind { real_target: ref t, unwind: None }
        .                       | InlineAsm { destination: Some(ref t), cleanup: None, .. }
-- line 332 ----------------------------------------
-- line 338 ----------------------------------------
        .                       | DropAndReplace { target: ref t, unwind: Some(ref u), .. }
        .                       | Drop { target: ref t, unwind: Some(ref u), .. }
        .                       | Assert { target: ref t, cleanup: Some(ref u), .. }
        .                       | FalseUnwind { real_target: ref t, unwind: Some(ref u) }
        .                       | InlineAsm { destination: Some(ref t), cleanup: Some(ref u), .. } => {
        .                           Some(t).into_iter().chain(slice::from_ref(u))
        .                       }
        .                       SwitchInt { ref targets, .. } => None.into_iter().chain(&targets.targets),
    3,212 ( 0.00%)              FalseEdge { ref real_target, ref imaginary_target } => {
        .                           Some(real_target).into_iter().chain(slice::from_ref(imaginary_target))
        .                       }
        .                   }
  344,645 ( 0.01%)      }
        .           
   74,452 ( 0.00%)      pub fn successors_mut(&mut self) -> SuccessorsMut<'_> {
        .                   use self::TerminatorKind::*;
  939,652 ( 0.02%)          match *self {
        .                       Resume
        .                       | Abort
        .                       | GeneratorDrop
        .                       | Return
        .                       | Unreachable
        .                       | Call { destination: None, cleanup: None, .. }
        .                       | InlineAsm { destination: None, cleanup: None, .. } => None.into_iter().chain(&mut []),
    3,912 ( 0.00%)              Goto { target: ref mut t }
        .                       | Call { destination: None, cleanup: Some(ref mut t), .. }
        .                       | Call { destination: Some((_, ref mut t)), cleanup: None, .. }
        .                       | Yield { resume: ref mut t, drop: None, .. }
        .                       | DropAndReplace { target: ref mut t, unwind: None, .. }
        .                       | Drop { target: ref mut t, unwind: None, .. }
        .                       | Assert { target: ref mut t, cleanup: None, .. }
        .                       | FalseUnwind { real_target: ref mut t, unwind: None }
        .                       | InlineAsm { destination: Some(ref mut t), cleanup: None, .. }
-- line 370 ----------------------------------------
-- line 376 ----------------------------------------
        .                       | DropAndReplace { target: ref mut t, unwind: Some(ref mut u), .. }
        .                       | Drop { target: ref mut t, unwind: Some(ref mut u), .. }
        .                       | Assert { target: ref mut t, cleanup: Some(ref mut u), .. }
        .                       | FalseUnwind { real_target: ref mut t, unwind: Some(ref mut u) }
        .                       | InlineAsm { destination: Some(ref mut t), cleanup: Some(ref mut u), .. } => {
        .                           Some(t).into_iter().chain(slice::from_mut(u))
        .                       }
        .                       SwitchInt { ref mut targets, .. } => None.into_iter().chain(&mut targets.targets),
      540 ( 0.00%)              FalseEdge { ref mut real_target, ref mut imaginary_target } => {
        .                           Some(real_target).into_iter().chain(slice::from_mut(imaginary_target))
        .                       }
        .                   }
   74,452 ( 0.00%)      }
        .           
        .               pub fn unwind(&self) -> Option<&Option<BasicBlock>> {
        .                   match *self {
        .                       TerminatorKind::Goto { .. }
        .                       | TerminatorKind::Resume
        .                       | TerminatorKind::Abort
        .                       | TerminatorKind::Return
        .                       | TerminatorKind::Unreachable
-- line 396 ----------------------------------------
-- line 403 ----------------------------------------
        .                       | TerminatorKind::DropAndReplace { ref unwind, .. }
        .                       | TerminatorKind::Drop { ref unwind, .. }
        .                       | TerminatorKind::FalseUnwind { ref unwind, .. }
        .                       | TerminatorKind::InlineAsm { cleanup: ref unwind, .. } => Some(unwind),
        .                   }
        .               }
        .           
        .               pub fn unwind_mut(&mut self) -> Option<&mut Option<BasicBlock>> {
   63,816 ( 0.00%)          match *self {
        .                       TerminatorKind::Goto { .. }
        .                       | TerminatorKind::Resume
        .                       | TerminatorKind::Abort
        .                       | TerminatorKind::Return
        .                       | TerminatorKind::Unreachable
        .                       | TerminatorKind::GeneratorDrop
        .                       | TerminatorKind::Yield { .. }
        .                       | TerminatorKind::SwitchInt { .. }
        .                       | TerminatorKind::FalseEdge { .. } => None,
   20,420 ( 0.00%)              TerminatorKind::Call { cleanup: ref mut unwind, .. }
        .                       | TerminatorKind::Assert { cleanup: ref mut unwind, .. }
        .                       | TerminatorKind::DropAndReplace { ref mut unwind, .. }
        .                       | TerminatorKind::Drop { ref mut unwind, .. }
        .                       | TerminatorKind::FalseUnwind { ref mut unwind, .. }
        .                       | TerminatorKind::InlineAsm { cleanup: ref mut unwind, .. } => Some(unwind),
        .                   }
        .               }
        .           
-- line 429 ----------------------------------------

1,465,363 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/terminator.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 36 ----------------------------------------
        .           use rustc_session::parse::ParseSess;
        .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use tracing::debug;
        .           
        .           use std::ops::Range;
        .           use std::{cmp, mem, slice};
        .           
  167,282 ( 0.00%)  bitflags::bitflags! {
        .               struct Restrictions: u8 {
        .                   const STMT_EXPR         = 1 << 0;
        .                   const NO_STRUCT_LITERAL = 1 << 1;
        .                   const CONST_EXPR        = 1 << 2;
        .               }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
        .                               $self.bump();
        .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
        .                           }
        .                       }
        .                   }
        .               };
        .           }
        .           
    1,638 ( 0.00%)  #[derive(Clone)]
        .           pub struct Parser<'a> {
       36 ( 0.00%)      pub sess: &'a ParseSess,
        .               /// The current token.
       22 ( 0.00%)      pub token: Token,
        .               /// The spacing for the current token
       25 ( 0.00%)      pub token_spacing: Spacing,
        .               /// The previous token.
       33 ( 0.00%)      pub prev_token: Token,
       39 ( 0.00%)      pub capture_cfg: bool,
       92 ( 0.00%)      restrictions: Restrictions,
       50 ( 0.00%)      expected_tokens: Vec<TokenType>,
        .               // Important: This must only be advanced from `next_tok`
        .               // to ensure that `token_cursor.num_next_calls` is updated properly
        .               token_cursor: TokenCursor,
       50 ( 0.00%)      desugar_doc_comments: bool,
        .               /// This field is used to keep track of how many left angle brackets we have seen. This is
        .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
        .               /// appropriately.
        .               ///
        .               /// See the comments in the `parse_path_segment` function for more details.
       50 ( 0.00%)      unmatched_angle_bracket_count: u32,
       75 ( 0.00%)      max_angle_bracket_count: u32,
        .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
        .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
        .               /// error.
       25 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
        .               last_unexpected_token_span: Option<Span>,
        .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
        .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
        .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
        .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
        .               subparser_name: Option<&'static str>,
        .               capture_state: CaptureState,
        .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
        .           /// the first macro inner attribute to invoke a proc-macro).
        .           /// When create a `TokenStream`, the inner attributes get inserted
        .           /// into the proper place in the token stream.
        .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
        .           
        .           /// Controls how we capture tokens. Capturing can be expensive,
        .           /// so we try to avoid performing capturing in cases where
        .           /// we will never need an `AttrAnnotatedTokenStream`
       25 ( 0.00%)  #[derive(Copy, Clone)]
        .           pub enum Capturing {
        .               /// We aren't performing any capturing - this is the default mode.
        .               No,
        .               /// We are capturing tokens
        .               Yes,
        .           }
        .           
      100 ( 0.00%)  #[derive(Clone)]
        .           struct CaptureState {
      100 ( 0.00%)      capturing: Capturing,
       25 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
        .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
        .           }
        .           
        .           impl<'a> Drop for Parser<'a> {
        .               fn drop(&mut self) {
      232 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
        .               }
        .           }
        .           
    9,594 ( 0.00%)  #[derive(Clone)]
        .           struct TokenCursor {
        .               frame: TokenCursorFrame,
    2,277 ( 0.00%)      stack: Vec<TokenCursorFrame>,
        .               desugar_doc_comments: bool,
        .               // Counts the number of calls to `next` or `next_desugared`,
        .               // depending on whether `desugar_doc_comments` is set.
      696 ( 0.00%)      num_next_calls: usize,
        .               // During parsing, we may sometimes need to 'unglue' a
        .               // glued token into two component tokens
        .               // (e.g. '>>' into '>' and '>), so that the parser
        .               // can consume them one at a time. This process
        .               // bypasses the normal capturing mechanism
        .               // (e.g. `num_next_calls` will not be incremented),
        .               // since the 'unglued' tokens due not exist in
        .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
        .               // in `Option<Vec<u8>>` requires us to unglue
        .               // the trailing `>>` token. The `break_last_token`
        .               // field is used to track this token - it gets
        .               // appended to the captured stream when
        .               // we evaluate a `LazyTokenStream`
        .               break_last_token: bool,
        .           }
        .           
    4,427 ( 0.00%)  #[derive(Clone)]
        .           struct TokenCursorFrame {
    1,673 ( 0.00%)      delim: token::DelimToken,
        .               span: DelimSpan,
        .               open_delim: bool,
    3,346 ( 0.00%)      tree_cursor: tokenstream::Cursor,
        .               close_delim: bool,
        .           }
        .           
        .           impl TokenCursorFrame {
        .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
      195 ( 0.00%)          TokenCursorFrame {
        .                       delim,
        .                       span,
        .                       open_delim: false,
   21,684 ( 0.00%)              tree_cursor: tts.into_trees(),
        .                       close_delim: false,
        .                   }
        .               }
        .           }
        .           
        .           impl TokenCursor {
1,674,216 ( 0.04%)      fn next(&mut self) -> (Token, Spacing) {
        .                   loop {
  848,770 ( 0.02%)              let (tree, spacing) = if !self.frame.open_delim {
   21,606 ( 0.00%)                  self.frame.open_delim = true;
  108,030 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
1,630,765 ( 0.04%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
        .                           tree
   86,386 ( 0.00%)              } else if !self.frame.close_delim {
   21,575 ( 0.00%)                  self.frame.close_delim = true;
  107,875 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
   43,150 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
  280,475 ( 0.01%)                  self.frame = frame;
        .                           continue;
        .                       } else {
      774 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
        .                       };
        .           
  322,248 ( 0.01%)              match tree {
        .                           TokenTree::Token(token) => {
1,116,144 ( 0.03%)                      return (token, spacing);
        .                           }
        .                           TokenTree::Delimited(sp, delim, tts) => {
        .                               let frame = TokenCursorFrame::new(sp, delim, tts);
        .                               self.stack.push(mem::replace(&mut self.frame, frame));
        .                           }
        .                       }
        .                   }
1,116,144 ( 0.03%)      }
        .           
    1,440 ( 0.00%)      fn next_desugared(&mut self) -> (Token, Spacing) {
      432 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
        .                       (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
        .                           (data, attr_style, span)
        .                       }
      720 ( 0.00%)              tok => return tok,
        .                   };
        .           
        .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
        .                   // required to wrap the text.
        .                   let mut num_of_hashes = 0;
        .                   let mut count = 0;
        .                   for ch in data.as_str().chars() {
        .                       count = match ch {
-- line 298 ----------------------------------------
-- line 332 ----------------------------------------
        .                                   .iter()
        .                                   .cloned()
        .                                   .collect::<TokenStream>()
        .                           },
        .                       ),
        .                   ));
        .           
        .                   self.next()
    1,296 ( 0.00%)      }
        .           }
        .           
    2,670 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
        .           enum TokenType {
    2,136 ( 0.00%)      Token(TokenKind),
        .               Keyword(Symbol),
        .               Operator,
        .               Lifetime,
        .               Ident,
        .               Path,
        .               Type,
        .               Const,
        .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
        .               /// The separator token.
        .               sep: Option<TokenKind>,
        .               /// `true` if a trailing separator is allowed.
        .               trailing_sep_allowed: bool,
        .           }
        .           
        .           impl SeqSep {
        .               fn trailing_allowed(t: TokenKind) -> SeqSep {
       57 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
        .               }
        .           
        .               fn none() -> SeqSep {
        .                   SeqSep { sep: None, trailing_sep_allowed: false }
        .               }
        .           }
        .           
        .           pub enum FollowedByType {
        .               Yes,
        .               No,
        .           }
        .           
        .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
      162 ( 0.00%)      Some(match token.kind {
      324 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
      324 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
      324 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
        .                   token::DocComment(..) => "doc comment",
        .                   _ => return None,
        .               })
        .           }
        .           
      567 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
      162 ( 0.00%)      let token_str = pprust::token_to_string(token);
        .               match token_descr_opt(token) {
        .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
      567 ( 0.00%)          _ => format!("`{}`", token_str),
        .               }
      405 ( 0.00%)  }
        .           
        .           impl<'a> Parser<'a> {
      546 ( 0.00%)      pub fn new(
        .                   sess: &'a ParseSess,
        .                   tokens: TokenStream,
        .                   desugar_doc_comments: bool,
        .                   subparser_name: Option<&'static str>,
        .               ) -> Self {
       39 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
       78 ( 0.00%)          start_frame.open_delim = true;
        .                   start_frame.close_delim = true;
        .           
    1,209 ( 0.00%)          let mut parser = Parser {
        .                       sess,
       39 ( 0.00%)              token: Token::dummy(),
        .                       token_spacing: Spacing::Alone,
       39 ( 0.00%)              prev_token: Token::dummy(),
        .                       capture_cfg: false,
        .                       restrictions: Restrictions::empty(),
        .                       expected_tokens: Vec::new(),
        .                       token_cursor: TokenCursor {
      234 ( 0.00%)                  frame: start_frame,
        .                           stack: Vec::new(),
        .                           num_next_calls: 0,
        .                           desugar_doc_comments,
        .                           break_last_token: false,
        .                       },
        .                       desugar_doc_comments,
        .                       unmatched_angle_bracket_count: 0,
        .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
        .                           capturing: Capturing::No,
        .                           replace_ranges: Vec::new(),
        .                           inner_attr_ranges: Default::default(),
        .                       },
        .                       current_closure: None,
        .                   };
        .           
        .                   // Make parser point to the first token.
       78 ( 0.00%)          parser.bump();
        .           
        .                   parser
      351 ( 0.00%)      }
        .           
        .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
        .                   loop {
  835,830 ( 0.02%)              let (mut next, spacing) = if self.desugar_doc_comments {
      576 ( 0.00%)                  self.token_cursor.next_desugared()
        .                       } else {
  417,483 ( 0.01%)                  self.token_cursor.next()
        .                       };
  557,220 ( 0.01%)              self.token_cursor.num_next_calls += 1;
        .                       // We've retrieved an token from the underlying
        .                       // cursor, so we no longer need to worry about
        .                       // an unglued token. See `break_and_eat` for more details
  139,305 ( 0.00%)              self.token_cursor.break_last_token = false;
  557,220 ( 0.01%)              if next.span.is_dummy() {
        .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
      164 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
        .                       }
  482,640 ( 0.01%)              if matches!(
  278,610 ( 0.01%)                  next.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
  557,220 ( 0.01%)              return (next, spacing);
        .                   }
        .               }
        .           
        .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
        .                   match self.expect_one_of(&[], &[]) {
        .                       Err(e) => Err(e),
        .                       // We can get `Ok(true)` from `recover_closing_delimiter`
        .                       // which is called in `expected_one_of_not_found`.
        .                       Ok(_) => FatalError.raise(),
        .                   }
        .               }
        .           
        .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
  295,677 ( 0.01%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
   32,853 ( 0.00%)          if self.expected_tokens.is_empty() {
      342 ( 0.00%)              if self.token == *t {
      285 ( 0.00%)                  self.bump();
        .                           Ok(false)
        .                       } else {
        .                           self.unexpected_try_recover(t)
        .                       }
        .                   } else {
  393,552 ( 0.01%)              self.expect_one_of(slice::from_ref(t), &[])
        .                   }
  492,795 ( 0.01%)      }
        .           
        .               /// Expect next token to be edible or inedible token.  If edible,
        .               /// then consume it; if inedible, then return without consuming
        .               /// anything.  Signal a fatal error if next token is unexpected.
  396,324 ( 0.01%)      pub fn expect_one_of(
        .                   &mut self,
        .                   edible: &[TokenKind],
        .                   inedible: &[TokenKind],
        .               ) -> PResult<'a, bool /* recovered */> {
   66,054 ( 0.00%)          if edible.contains(&self.token.kind) {
   98,508 ( 0.00%)              self.bump();
        .                       Ok(false)
        .                   } else if inedible.contains(&self.token.kind) {
        .                       // leave it in the input
        .                       Ok(false)
        .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
        .                       FatalError.raise();
        .                   } else {
        .                       self.expected_one_of_not_found(edible, inedible)
        .                   }
  495,405 ( 0.01%)      }
        .           
        .               // Public for rustfmt usage.
        .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
   85,601 ( 0.00%)          self.parse_ident_common(true)
        .               }
        .           
        .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
   64,353 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
        .                       TokenKind::DocComment(..) => {
        .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
        .                       }
        .                       _ => self.expected_ident_found(),
        .                   })
        .               }
        .           
  149,884 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
   21,412 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
  128,472 ( 0.00%)          if !is_raw && ident.is_reserved() {
        .                       let mut err = self.expected_ident_found();
        .                       if recover {
        .                           err.emit();
        .                       } else {
        .                           return Err(err);
        .                       }
        .                   }
   85,648 ( 0.00%)          self.bump();
        .                   Ok(ident)
  214,120 ( 0.01%)      }
        .           
        .               /// Checks if the next token is `tok`, and returns `true` if so.
        .               ///
        .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
        .               /// encountered.
3,647,847 ( 0.09%)      fn check(&mut self, tok: &TokenKind) -> bool {
1,584,551 ( 0.04%)          let is_present = self.token == *tok;
1,083,628 ( 0.03%)          if !is_present {
2,223,348 ( 0.06%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
        .                   }
        .                   is_present
3,647,847 ( 0.09%)      }
        .           
        .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
        4 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
  651,896 ( 0.02%)          let is_present = self.check(tok);
  447,348 ( 0.01%)          if is_present {
   85,241 ( 0.00%)              self.bump()
        .                   }
        .                   is_present
        5 ( 0.00%)      }
        .           
        .               /// If the next token is the given keyword, returns `true` without eating it.
        .               /// An expectation is also added for diagnostics purposes.
    7,145 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
    1,387 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
   42,176 ( 0.00%)          self.token.is_keyword(kw)
        .               }
        .           
        .               /// If the next token is the given keyword, eats it and returns `true`.
        .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
        .               // Public for rustfmt usage.
   13,100 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
    9,502 ( 0.00%)          if self.check_keyword(kw) {
      986 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
   13,100 ( 0.00%)      }
        .           
        .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
    1,076 ( 0.00%)          if self.token.is_keyword(kw) {
      248 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// If the given word is not a keyword, signals an error.
        .               /// If the next token is not the given word, signals an error.
        .               /// Otherwise, eats it.
      115 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
        .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
       92 ( 0.00%)      }
        .           
        .               /// Is the given keyword `kw` followed by a non-reserved identifier?
    8,600 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
    4,300 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
    9,675 ( 0.00%)      }
        .           
   68,004 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
   23,206 ( 0.00%)          if ok {
        .                       true
        .                   } else {
    1,496 ( 0.00%)              self.expected_tokens.push(typ);
        .                       false
        .                   }
   68,004 ( 0.00%)      }
        .           
        .               fn check_ident(&mut self) -> bool {
    1,772 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
        .               }
        .           
   43,192 ( 0.00%)      fn check_path(&mut self) -> bool {
   87,362 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
   53,990 ( 0.00%)      }
        .           
        .               fn check_type(&mut self) -> bool {
      408 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
        .               }
        .           
        .               fn check_const_arg(&mut self) -> bool {
      408 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
        .               }
        .           
    2,358 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
    1,310 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
        .                       && self.look_ahead(dist + 1, |t| match t.kind {
        .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
        .                           token::OpenDelim(DelimToken::Brace) => true,
        .                           _ => false,
        .                       })
    2,358 ( 0.00%)      }
        .           
        .               /// Checks to see if the next token is either `+` or `+=`.
        .               /// Otherwise returns `false`.
        .               fn check_plus(&mut self) -> bool {
      652 ( 0.00%)          self.check_or_expected(
      326 ( 0.00%)              self.token.is_like_plus(),
      326 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
        .                   )
        .               }
        .           
        .               /// Eats the expected token if it's present possibly breaking
        .               /// compound tokens like multi-character operators in process.
        .               /// Returns `true` if the token was eaten.
  132,168 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
   77,098 ( 0.00%)          if self.token.kind == expected {
      474 ( 0.00%)              self.bump();
        .                       return true;
        .                   }
   53,885 ( 0.00%)          match self.token.kind.break_two_token_op() {
        7 ( 0.00%)              Some((first, second)) if first == expected => {
        4 ( 0.00%)                  let first_span = self.sess.source_map().start_point(self.token.span);
        5 ( 0.00%)                  let second_span = self.token.span.with_lo(first_span.hi());
        9 ( 0.00%)                  self.token = Token::new(first, first_span);
        .                           // Keep track of this token - if we end token capturing now,
        .                           // we'll want to append this token to the captured stream.
        .                           //
        .                           // If we consume any additional tokens, then this token
        .                           // is not needed (we'll capture the entire 'glued' token),
        .                           // and `next_tok` will set this field to `None`
        1 ( 0.00%)                  self.token_cursor.break_last_token = true;
        .                           // Use the spacing of the glued token as the spacing
        .                           // of the unglued second token.
       14 ( 0.00%)                  self.bump_with((Token::new(second, second_span), self.token_spacing));
        .                           true
        .                       }
        .                       _ => {
   32,328 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
        .                           false
        .                       }
        .                   }
  142,230 ( 0.00%)      }
        .           
        .               /// Eats `+` possibly breaking tokens like `+=` in process.
        .               fn eat_plus(&mut self) -> bool {
       84 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
        .               }
        .           
        .               /// Eats `&` possibly breaking tokens like `&&` in process.
        .               /// Signals an error if `&` is not eaten.
        .               fn expect_and(&mut self) -> PResult<'a, ()> {
      660 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `|` possibly breaking tokens like `||` in process.
        .               /// Signals an error if `|` was not eaten.
        .               fn expect_or(&mut self) -> PResult<'a, ()> {
      114 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
      570 ( 0.00%)      fn eat_lt(&mut self) -> bool {
   32,559 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
   21,666 ( 0.00%)          if ate {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
      204 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
      215 ( 0.00%)              self.max_angle_bracket_count += 1;
        .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
        .                   }
        .                   ate
      570 ( 0.00%)      }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
        .               /// Signals an error if `<` was not eaten.
        .               fn expect_lt(&mut self) -> PResult<'a, ()> {
        .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `>` possibly breaking tokens like `>>` in process.
        .               /// Signals an error if `>` was not eaten.
        .               fn expect_gt(&mut self) -> PResult<'a, ()> {
      306 ( 0.00%)          if self.break_and_eat(token::Gt) {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
      153 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
      102 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
        .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
        .                       }
        .                       Ok(())
        .                   } else {
        .                       self.unexpected()
        .                   }
        .               }
        .           
        .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
        .                   kets.iter().any(|k| match expect {
  255,264 ( 0.01%)              TokenExpectType::Expect => self.check(k),
      285 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
        .                   })
        .               }
        .           
        .               fn parse_seq_to_before_tokens<T>(
        .                   &mut self,
        .                   kets: &[&TokenKind],
        .                   sep: SeqSep,
        .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
        .                   let mut first = true;
        .                   let mut recovered = false;
        .                   let mut trailing = false;
        .                   let mut v = vec![];
        .                   let unclosed_delims = !self.unclosed_delims.is_empty();
        .           
        .                   while !self.expect_any_with_type(kets, expect) {
  223,211 ( 0.01%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
        .                           break;
        .                       }
  149,051 ( 0.00%)              if let Some(ref t) = sep.sep {
  176,446 ( 0.00%)                  if first {
        .                               first = false;
        .                           } else {
  169,244 ( 0.00%)                      match self.expect(t) {
        .                                   Ok(false) => {
        .                                       self.current_closure.take();
        .                                   }
        .                                   Ok(true) => {
        .                                       self.current_closure.take();
        .                                       recovered = true;
        .                                       break;
        .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
        .                                               e.cancel();
        .                                               break;
        .                                           }
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                       }
   84,842 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
        .                           trailing = true;
        .                           break;
        .                       }
        .           
   42,095 ( 0.00%)              let t = f(self)?;
      488 ( 0.00%)              v.push(t);
        .                   }
        .           
   84,888 ( 0.00%)          Ok((v, trailing, recovered))
        .               }
        .           
        .               fn recover_missing_braces_around_closure_body(
        .                   &mut self,
        .                   closure_spans: ClosureSpans,
        .                   mut expect_err: DiagnosticBuilder<'_>,
        .               ) -> PResult<'a, ()> {
        .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_seq_to_before_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
   74,093 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
        .               }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
  102,560 ( 0.00%)      fn parse_seq_to_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
   52,665 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
   32,147 ( 0.00%)          if !recovered {
        .                       self.eat(ket);
        .                   }
  114,377 ( 0.00%)          Ok((val, trailing))
   82,048 ( 0.00%)      }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_unspanned_seq<T>(
        .                   &mut self,
        .                   bra: &TokenKind,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
   30,949 ( 0.00%)          self.expect(bra)?;
   82,048 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
        .               }
        .           
        .               fn parse_delim_comma_seq<T>(
        .                   &mut self,
        .                   delim: DelimToken,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_unspanned_seq(
   10,375 ( 0.00%)              &token::OpenDelim(delim),
   10,497 ( 0.00%)              &token::CloseDelim(delim),
        .                       SeqSep::trailing_allowed(token::Comma),
        .                       f,
        .                   )
        .               }
        .           
        .               fn parse_paren_comma_seq<T>(
        .                   &mut self,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_delim_comma_seq(token::Paren, f)
        .               }
        .           
        .               /// Advance the parser by one token using provided token as the next one.
1,810,978 ( 0.05%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
        .                   // Bumping after EOF is a bad sign, usually an infinite loop.
  835,836 ( 0.02%)          if self.prev_token.kind == TokenKind::Eof {
        .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
        .                       self.span_bug(self.token.span, msg);
        .                   }
        .           
        .                   // Update the current and previous tokens.
  557,224 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
  139,306 ( 0.00%)          self.token_spacing = next_spacing;
        .           
        .                   // Diagnostics.
  139,306 ( 0.00%)          self.expected_tokens.clear();
        .               }
        .           
        .               /// Advance the parser by one token.
1,114,440 ( 0.03%)      pub fn bump(&mut self) {
  557,220 ( 0.01%)          let next_token = self.next_tok(self.token.span);
  835,830 ( 0.02%)          self.bump_with(next_token);
1,114,440 ( 0.03%)      }
        .           
        .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
        .               /// When `dist == 0` then the current token is looked at.
        .               pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
      758 ( 0.00%)          if dist == 0 {
      326 ( 0.00%)              return looker(&self.token);
        .                   }
        .           
   73,920 ( 0.00%)          let frame = &self.token_cursor.frame;
   84,122 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
        .                       let all_normal = (0..dist).all(|i| {
  242,039 ( 0.01%)                  let token = frame.tree_cursor.look_ahead(i);
  325,084 ( 0.01%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
        .                       });
        .                       if all_normal {
  409,652 ( 0.01%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
  146,330 ( 0.00%)                      Some(tree) => match tree {
   62,928 ( 0.00%)                          TokenTree::Token(token) => looker(token),
        .                                   TokenTree::Delimited(dspan, delim, _) => {
   71,859 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
        .                                   }
        .                               },
   75,465 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
        .                           };
        .                       }
        .                   }
        .           
        .                   let mut cursor = self.token_cursor.clone();
        .                   let mut i = 0;
      215 ( 0.00%)          let mut token = Token::dummy();
      152 ( 0.00%)          while i < dist {
    1,555 ( 0.00%)              token = cursor.next().0;
      717 ( 0.00%)              if matches!(
      426 ( 0.00%)                  token.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
       80 ( 0.00%)              i += 1;
        .                   }
        6 ( 0.00%)          return looker(&token);
        .               }
        .           
        .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
    3,177 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
      838 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
    3,177 ( 0.00%)      }
        .           
        .               /// Parses asyncness: `async` or nothing.
        .               fn parse_asyncness(&mut self) -> Async {
        .                   if self.eat_keyword(kw::Async) {
        .                       let span = self.prev_token.uninterpolated_span();
        .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
        .                   } else {
        .                       Async::No
        .                   }
        .               }
        .           
        .               /// Parses unsafety: `unsafe` or nothing.
      160 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
        .                   if self.eat_keyword(kw::Unsafe) {
        .                       Unsafe::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Unsafe::No
        .                   }
      640 ( 0.00%)      }
        .           
        .               /// Parses constness: `const` or nothing.
    2,088 ( 0.00%)      fn parse_constness(&mut self) -> Const {
        .                   // Avoid const blocks to be parsed as const items
      604 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
        .                       && self.eat_keyword(kw::Const)
        .                   {
       85 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Const::No
        .                   }
    3,654 ( 0.00%)      }
        .           
        .               /// Parses inline const expressions.
        .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
        .                   if pat {
        .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
        .                   } else {
        .                       self.sess.gated_spans.gate(sym::inline_const, span);
        .                   }
-- line 1104 ----------------------------------------
-- line 1110 ----------------------------------------
        .                   };
        .                   let blk_span = anon_const.value.span;
        .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
        .               }
        .           
        .               /// Parses mutability (`mut` or nothing).
        .               fn parse_mutability(&mut self) -> Mutability {
        .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
      220 ( 0.00%)      }
        .           
        .               /// Possibly parses mutability (`const` or `mut`).
        .               fn parse_const_or_mut(&mut self) -> Option<Mutability> {
        .                   if self.eat_keyword(kw::Mut) {
        .                       Some(Mutability::Mut)
        .                   } else if self.eat_keyword(kw::Const) {
        .                       Some(Mutability::Not)
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
       36 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
        .                   {
        .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
        .                       self.bump();
        .                       Ok(Ident::new(symbol, self.prev_token.span))
        .                   } else {
       54 ( 0.00%)              self.parse_ident_common(true)
        .                   }
        .               }
        .           
        .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
        2 ( 0.00%)          self.parse_mac_args_common(true).map(P)
        .               }
        .           
        .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
       84 ( 0.00%)          self.parse_mac_args_common(false)
        .               }
        .           
      261 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
      232 ( 0.00%)          Ok(
      209 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
       48 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
       48 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
        .                       {
       52 ( 0.00%)                  match self.parse_token_tree() {
       65 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
        .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
        .                               {
       26 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
        .                               }
        .                               _ => unreachable!(),
        .                           }
       32 ( 0.00%)              } else if !delimited_only {
        .                           if self.eat(&token::Eq) {
        .                               let eq_span = self.prev_token.span;
        .           
        .                               // Collect tokens because they are used during lowering to HIR.
        .                               let expr = self.parse_expr_force_collect()?;
        .                               let span = expr.span;
        .           
        .                               let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
-- line 1172 ----------------------------------------
-- line 1173 ----------------------------------------
        .                               MacArgs::Eq(eq_span, Token::new(token_kind, span))
        .                           } else {
        .                               MacArgs::Empty
        .                           }
        .                       } else {
        .                           return self.unexpected();
        .                       },
        .                   )
      203 ( 0.00%)      }
        .           
        .               fn parse_or_use_outer_attributes(
        .                   &mut self,
        .                   already_parsed_attrs: Option<AttrWrapper>,
        .               ) -> PResult<'a, AttrWrapper> {
  157,407 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
        .                       Ok(attrs)
        .                   } else {
  104,430 ( 0.00%)              self.parse_outer_attributes()
        .                   }
        .               }
        .           
        .               /// Parses a single token tree from the input.
      296 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
      111 ( 0.00%)          match self.token.kind {
        .                       token::OpenDelim(..) => {
        .                           let depth = self.token_cursor.stack.len();
        .           
        .                           // We keep advancing the token cursor until we hit
        .                           // the matching `CloseDelim` token.
      806 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
        .                               && matches!(self.token.kind, token::CloseDelim(_)))
        .                           {
        .                               // Advance one token at a time, so `TokenCursor::next()`
        .                               // can capture these tokens if necessary.
      390 ( 0.00%)                      self.bump();
        .                           }
        .                           // We are still inside the frame corresponding
        .                           // to the delimited stream we captured, so grab
        .                           // the tokens from this frame.
        .                           let frame = &self.token_cursor.frame;
       74 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
       74 ( 0.00%)                  let span = frame.span;
       37 ( 0.00%)                  let delim = frame.delim;
        .                           // Consume close delimiter
       74 ( 0.00%)                  self.bump();
      185 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
        .                       }
        .                       token::CloseDelim(_) | token::Eof => unreachable!(),
        .                       _ => {
        .                           self.bump();
        .                           TokenTree::Token(self.prev_token.clone())
        .                       }
        .                   }
      259 ( 0.00%)      }
        .           
        .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
        .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
        .                   let mut tts = Vec::new();
        .                   while self.token != token::Eof {
        .                       tts.push(self.parse_token_tree());
        .                   }
        .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
        .                   }
        .                   TokenStream::new(result)
        .               }
        .           
        .               /// Evaluates the closure with restrictions in place.
        .               ///
        .               /// Afters the closure is evaluated, restrictions are reset.
        .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
   52,499 ( 0.00%)          let old = self.restrictions;
   52,945 ( 0.00%)          self.restrictions = res;
        .                   let res = f(self);
   52,918 ( 0.00%)          self.restrictions = old;
        .                   res
        .               }
        .           
    3,456 ( 0.00%)      fn is_crate_vis(&self) -> bool {
    2,160 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
    3,888 ( 0.00%)      }
        .           
        .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
        .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
        .               /// If the following element can't be a tuple (i.e., it's a function definition), then
        .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
        .               /// so emit a proper diagnostic.
        .               // Public for rustfmt usage.
    2,910 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
      582 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
        .           
      291 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
    1,164 ( 0.00%)          if self.is_crate_vis() {
        .                       self.bump(); // `crate`
        .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
        .                       return Ok(Visibility {
        .                           span: self.prev_token.span,
        .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
        .                           tokens: None,
        .                       });
        .                   }
        .           
        .                   if !self.eat_keyword(kw::Pub) {
        .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
        .                       // keyword to grab a span from for inherited visibility; an empty span at the
        .                       // beginning of the current token would seem to be the "Schelling span".
      251 ( 0.00%)              return Ok(Visibility {
      753 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
        .                           kind: VisibilityKind::Inherited,
        .                           tokens: None,
        .                       });
        .                   }
       40 ( 0.00%)          let lo = self.prev_token.span;
        .           
      200 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
        .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
        .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
        .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
        .                       // by the following tokens.
        .                       if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
        .                       // account for `pub(crate::foo)`
        .                       {
        .                           // Parse `pub(crate)`.
-- line 1303 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       } else if let FollowedByType::No = fbt {
        .                           // Provide this diagnostic if a type cannot follow;
        .                           // in particular, if this is not a tuple struct.
        .                           self.recover_incorrect_vis_restriction()?;
        .                           // Emit diagnostic, but continue with public visibility.
        .                       }
        .                   }
        .           
      120 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
    2,619 ( 0.00%)      }
        .           
        .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
        .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
        .                   self.bump(); // `(`
        .                   let path = self.parse_path(PathStyle::Mod)?;
        .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
        .           
        .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
        .                       )
        .                       .emit();
        .           
        .                   Ok(())
        .               }
        .           
        .               /// Parses `extern string_literal?`.
        .               fn parse_extern(&mut self) -> Extern {
       57 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
        .               }
        .           
        .               /// Parses a string literal as an ABI spec.
        .               fn parse_abi(&mut self) -> Option<StrLit> {
        .                   match self.parse_str_lit() {
        .                       Ok(str_lit) => Some(str_lit),
        .                       Err(Some(lit)) => match lit.kind {
        .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1409 ----------------------------------------
        .                   self.collect_tokens_trailing_token(
        .                       AttrWrapper::empty(),
        .                       ForceCollect::Yes,
        .                       |this, _attrs| Ok((f(this)?, TrailingToken::None)),
        .                   )
        .               }
        .           
        .               /// `::{` or `::*`
  168,096 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
   84,048 ( 0.00%)          self.check(&token::ModSep)
        .                       && self.look_ahead(1, |t| {
  160,336 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
        .                       })
   99,018 ( 0.00%)      }
        .           
        .               pub fn clear_expected_tokens(&mut self) {
        .                   self.expected_tokens.clear();
        .               }
        .           }
        .           
        .           crate fn make_unclosed_delims_error(
        .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
        .                   err.span_label(sp, "closing delimiter possibly meant for this");
        .               }
        .               if let Some(sp) = unmatched.unclosed_span {
        .                   err.span_label(sp, "unclosed delimiter");
        .               }
        .               Some(err)
        .           }
        .           
      512 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
      256 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
        .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
      256 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
        .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
        .                       e.emit();
        .                   }
        .               }
      512 ( 0.00%)  }
        .           
        .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
        .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
        .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
        .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
        .           /// `AttrAnnotatedTokenTree::Delimited` tokens
        .           #[derive(Debug, Clone)]
        .           pub enum FlatToken {
-- line 1474 ----------------------------------------

  941,480 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/middle/region.rs
--------------------------------------------------------------------------------
Ir                 

-- line 77 ----------------------------------------
        .           //
        .           // FIXME(pnkfelix): this currently derives `PartialOrd` and `Ord` to
        .           // placate the same deriving in `ty::FreeRegion`, but we may want to
        .           // actually attach a more meaningful ordering to scopes than the one
        .           // generated via deriving here.
        .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Copy, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct Scope {
   65,805 ( 0.00%)      pub id: hir::ItemLocalId,
1,208,624 ( 0.03%)      pub data: ScopeData,
        .           }
        .           
        .           impl fmt::Debug for Scope {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   match self.data {
        .                       ScopeData::Node => write!(fmt, "Node({:?})", self.id),
        .                       ScopeData::CallSite => write!(fmt, "CallSite({:?})", self.id),
        .                       ScopeData::Arguments => write!(fmt, "Arguments({:?})", self.id),
-- line 94 ----------------------------------------
-- line 99 ----------------------------------------
        .                           "Remainder {{ block: {:?}, first_statement_index: {}}}",
        .                           self.id,
        .                           fsi.as_u32(),
        .                       ),
        .                   }
        .               }
        .           }
        .           
5,557,180 ( 0.14%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Debug, Copy, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum ScopeData {
        .               Node,
        .           
        .               /// Scope of the call-site for a function or closure
        .               /// (outlives the arguments as well as the body).
        .               CallSite,
        .           
-- line 115 ----------------------------------------
-- line 159 ----------------------------------------
        .               ///
        .               /// N.B., likely to be replaced as API is refined; e.g., pnkfelix
        .               /// anticipates `fn entry_node_id` and `fn each_exit_node_id`.
        .               pub fn item_local_id(&self) -> hir::ItemLocalId {
        .                   self.id
        .               }
        .           
        .               pub fn hir_id(&self, scope_tree: &ScopeTree) -> Option<hir::HirId> {
   22,532 ( 0.00%)          scope_tree
        .                       .root_body
        .                       .map(|hir_id| hir::HirId { owner: hir_id.owner, local_id: self.item_local_id() })
        .               }
        .           
        .               /// Returns the span of this `Scope`. Note that in general the
        .               /// returned span may not correspond to the span of any `NodeId` in
        .               /// the AST.
  157,724 ( 0.00%)      pub fn span(&self, tcx: TyCtxt<'_>, scope_tree: &ScopeTree) -> Span {
   45,064 ( 0.00%)          let hir_id = match self.hir_id(scope_tree) {
        .                       Some(hir_id) => hir_id,
        .                       None => return DUMMY_SP,
        .                   };
   90,128 ( 0.00%)          let span = tcx.hir().span(hir_id);
   90,128 ( 0.00%)          if let ScopeData::Remainder(first_statement_index) = self.data {
      804 ( 0.00%)              if let Node::Block(ref blk) = tcx.hir().get(hir_id) {
        .                           // Want span for scope starting after the
        .                           // indexed statement and ending at end of
        .                           // `blk`; reuse span of `blk` and shift `lo`
        .                           // forward to end of indexed statement.
        .                           //
        .                           // (This is the special case alluded to in the
        .                           // doc-comment for this method)
        .           
    1,072 ( 0.00%)                  let stmt_span = blk.stmts[first_statement_index.index()].span;
        .           
        .                           // To avoid issues with macro-generated spans, the span
        .                           // of the statement must be nested in that of the block.
      265 ( 0.00%)                  if span.lo() <= stmt_span.lo() && stmt_span.lo() <= span.hi() {
      464 ( 0.00%)                      return span.with_lo(stmt_span.lo());
        .                           }
        .                       }
        .                   }
        .                   span
  202,788 ( 0.01%)      }
        .           }
        .           
        .           pub type ScopeDepth = u32;
        .           
        .           /// The region scope tree encodes information about region relationships.
        .           #[derive(Default, Debug)]
        .           pub struct ScopeTree {
        .               /// If not empty, this body is the root of this region hierarchy.
-- line 209 ----------------------------------------
-- line 321 ----------------------------------------
        .               /// The `Span` of the yield.
        .               pub span: Span,
        .               /// The number of expressions and patterns appearing before the `yield` in the body, plus one.
        .               pub expr_and_pat_count: usize,
        .               pub source: hir::YieldSource,
        .           }
        .           
        .           impl ScopeTree {
  399,642 ( 0.01%)      pub fn record_scope_parent(&mut self, child: Scope, parent: Option<(Scope, ScopeDepth)>) {
        .                   debug!("{:?}.parent = {:?}", child, parent);
        .           
  133,214 ( 0.00%)          if let Some(p) = parent {
        .                       let prev = self.parent_map.insert(child, p);
   66,315 ( 0.00%)              assert!(prev.is_none());
        .                   }
        .           
        .                   // Record the destruction scopes for later so we can query them.
  133,214 ( 0.00%)          if let ScopeData::Destruction = child.data {
        .                       self.destruction_scopes.insert(child.item_local_id(), child);
        .                   }
  263,292 ( 0.01%)      }
        .           
  129,062 ( 0.00%)      pub fn opt_destruction_scope(&self, n: hir::ItemLocalId) -> Option<Scope> {
        .                   self.destruction_scopes.get(&n).cloned()
  129,062 ( 0.00%)      }
        .           
        .               pub fn record_var_scope(&mut self, var: hir::ItemLocalId, lifetime: Scope) {
        .                   debug!("record_var_scope(sub={:?}, sup={:?})", var, lifetime);
      331 ( 0.00%)          assert!(var != lifetime.item_local_id());
        .                   self.var_map.insert(var, lifetime);
        .               }
        .           
        .               pub fn record_rvalue_scope(&mut self, var: hir::ItemLocalId, lifetime: Option<Scope>) {
        .                   debug!("record_rvalue_scope(sub={:?}, sup={:?})", var, lifetime);
       16 ( 0.00%)          if let Some(lifetime) = lifetime {
        .                       assert!(var != lifetime.item_local_id());
        .                   }
        .                   self.rvalue_scopes.insert(var, lifetime);
        .               }
        .           
        .               /// Returns the narrowest scope that encloses `id`, if any.
        .               pub fn opt_encl_scope(&self, id: Scope) -> Option<Scope> {
        .                   self.parent_map.get(&id).cloned().map(|(p, _)| p)
        .               }
        .           
        .               /// Returns the lifetime of the local variable `var_id`
      748 ( 0.00%)      pub fn var_scope(&self, var_id: hir::ItemLocalId) -> Scope {
        .                   self.var_map
        .                       .get(&var_id)
        .                       .cloned()
        .                       .unwrap_or_else(|| bug!("no enclosing scope for id {:?}", var_id))
      748 ( 0.00%)      }
        .           
        .               /// Returns the scope when the temp created by `expr_id` will be cleaned up.
  898,688 ( 0.02%)      pub fn temporary_scope(&self, expr_id: hir::ItemLocalId) -> Option<Scope> {
        .                   // Check for a designated rvalue scope.
       30 ( 0.00%)          if let Some(&s) = self.rvalue_scopes.get(&expr_id) {
        .                       debug!("temporary_scope({:?}) = {:?} [custom]", expr_id, s);
        .                       return s;
        .                   }
        .           
        .                   // Otherwise, locate the innermost terminating scope
        .                   // if there's one. Static items, for instance, won't
        .                   // have an enclosing scope, hence no scope will be
        .                   // returned.
  128,374 ( 0.00%)          let mut id = Scope { id: expr_id, data: ScopeData::Node };
        .           
2,952,081 ( 0.07%)          while let Some(&(p, _)) = self.parent_map.get(&id) {
1,007,362 ( 0.03%)              match p.data {
        .                           ScopeData::Destruction => {
        .                               debug!("temporary_scope({:?}) = {:?} [enclosing]", expr_id, id);
        .                               return Some(id);
        .                           }
  311,691 ( 0.01%)                  _ => id = p,
        .                       }
        .                   }
        .           
        .                   debug!("temporary_scope({:?}) = None", expr_id);
        .                   None
1,027,072 ( 0.03%)      }
        .           
        .               /// Returns `true` if `subscope` is equal to or is lexically nested inside `superscope`, and
        .               /// `false` otherwise.
        .               ///
        .               /// Used by clippy.
        .               pub fn is_subscope_of(&self, subscope: Scope, superscope: Scope) -> bool {
        .                   let mut s = subscope;
        .                   debug!("is_subscope_of({:?}, {:?})", subscope, superscope);
-- line 408 ----------------------------------------

2,092,253 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/middle/region.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 91 ----------------------------------------
        .           // maximum of number bytes needed to fill an 8-byte-sized element on which
        .           // SipHash operates. Note that for variable-sized copies which are known to be
        .           // less than 8 bytes, this function will perform more work than necessary unless
        .           // the compiler is able to optimize the extra work away.
        .           #[inline]
        .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
        .               debug_assert!(count <= 8);
        .           
   38,647 ( 0.00%)      if count == 8 {
        .                   ptr::copy_nonoverlapping(src, dst, 8);
        .                   return;
        .               }
        .           
        .               let mut i = 0;
   51,630 ( 0.00%)      if i + 3 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
        .                   i += 4;
        .               }
        .           
  108,707 ( 0.00%)      if i + 1 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
   17,035 ( 0.00%)          i += 2
        .               }
        .           
   51,630 ( 0.00%)      if i < count {
   44,743 ( 0.00%)          *dst.add(i) = *src.add(i);
        .                   i += 1;
        .               }
        .           
        .               debug_assert_eq!(i, count);
        .           }
        .           
        .           // # Implementation
        .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
        .           
        .                   hasher
        .               }
        .           
        .               // A specialized write function for values with size <= 8.
        .               #[inline]
        .               fn short_write<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
1,026,185 ( 0.03%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
6,606,498 ( 0.17%)          if nbuf + size < BUFFER_SIZE {
        .                       unsafe {
        .                           // The memcpy call is optimized away because the size is known.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .                       }
        .           
2,169,074 ( 0.06%)              self.nbuf = nbuf + size;
        .           
        .                       return;
        .                   }
        .           
  273,078 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
        .               }
        .           
        .               // A specialized write function for values with size <= 8 that should only
        .               // be called when the write would cause the buffer to fill.
        .               //
        .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
        .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
        .               // overflow) if it wasn't already.
        .               #[inline(never)]
   91,034 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
   91,034 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
        .                   // Copy first part of input into end of buffer, possibly into spill
        .                   // element. The memcpy call is optimized away because the size is known.
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .           
        .                   // Process buffer.
        .                   for i in 0..BUFFER_CAPACITY {
  910,340 ( 0.02%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  728,272 ( 0.02%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
  819,306 ( 0.02%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer by copying size - 1
        .                   // elements from spill (at most size - 1 bytes could have overflowed
        .                   // into the spill). The memcpy call is optimized away because the size
        .                   // is known. And the whole copy is optimized away for size == 1.
        .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
        .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
        .           
        .                   // This function should only be called when the write fills the buffer.
        .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
        .                   // is statically known, so the branch is optimized away.
  429,858 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
  364,136 ( 0.01%)          self.processed += BUFFER_SIZE;
  182,068 ( 0.00%)      }
        .           
        .               // A write function for byte slices.
        .               #[inline]
        .               fn slice_write(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
   10,489 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .           
  157,024 ( 0.00%)          if nbuf + length < BUFFER_SIZE {
        .                       unsafe {
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .           
   53,232 ( 0.00%)                  if length <= 8 {
        .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
        .                           } else {
        .                               // This memcpy is *not* optimized away.
        .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
        .                           }
        .                       }
        .           
   26,822 ( 0.00%)              self.nbuf = nbuf + length;
        .           
        .                       return;
        .                   }
        .           
   39,509 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
        .               }
        .           
        .               // A write function for byte slices that should only be called when the
        .               // write would cause the buffer to fill.
        .               //
        .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
        .               // and `msg` must contain enough bytes to initialize the rest of the element
        .               // containing the byte offset `self.nbuf`.
        .               #[inline(never)]
   23,145 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
    4,629 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
        .           
        .                   // Always copy first part of input into current element of buffer.
        .                   // This function should only be called when the write fills the buffer,
        .                   // so we know that there is enough input to fill the current element.
   13,887 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    4,629 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
        .           
        .                   let src = msg.as_ptr();
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
        .           
        .                   // Process buffer.
        .           
        .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
        .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
        .                   // We know that is true, because last step ensured we have a full
        .                   // element in the buffer.
    9,258 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
        .           
        .                   for i in 0..last {
   35,546 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
   40,175 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
   71,092 ( 0.00%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Process the remaining element-sized chunks of input.
        .                   let mut processed = needed_in_elem;
    9,258 ( 0.00%)          let input_left = length - processed;
    8,325 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
        .                   let extra_bytes_left = input_left % ELEM_SIZE;
        .           
        .                   for _ in 0..elems_left {
    2,970 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    2,970 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
    2,970 ( 0.00%)              self.state.v0 ^= elem;
    5,940 ( 0.00%)              processed += ELEM_SIZE;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer.
        .                   let src = msg.as_ptr().add(processed);
        .                   let dst = self.buf.as_mut_ptr() as *mut u8;
        .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
        .           
    4,629 ( 0.00%)          self.nbuf = extra_bytes_left;
   23,145 ( 0.00%)          self.processed += nbuf + processed;
   27,774 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn finish128(mut self) -> (u64, u64) {
        .                   debug_assert!(self.nbuf < BUFFER_SIZE);
        .           
        .                   // Process full elements in buffer.
   36,483 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
        .           
        .                   // Since we're consuming self, avoid updating members for a potential
        .                   // performance gain.
   48,644 ( 0.00%)          let mut state = self.state;
        .           
        .                   for i in 0..last {
   15,914 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
   15,914 ( 0.00%)              state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut state);
   15,914 ( 0.00%)              state.v0 ^= elem;
        .                   }
        .           
        .                   // Get remaining partial element.
   24,322 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
        .                       unsafe {
        .                           // Ensure element is initialized by writing zero bytes. At most
        .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
        .                           // to write this many because we have the spill and we maintain
        .                           // `self.nbuf` such that this write will start before the spill.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
        .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
   11,890 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
        .                       }
        .                   } else {
        .                       0
        .                   };
        .           
        .                   // Finalize the hash.
   36,212 ( 0.00%)          let length = self.processed + self.nbuf;
   24,320 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
        .           
   12,160 ( 0.00%)          state.v3 ^= b;
        .                   Sip24Rounds::c_rounds(&mut state);
   12,160 ( 0.00%)          state.v0 ^= b;
        .           
   12,160 ( 0.00%)          state.v2 ^= 0xee;
        .                   Sip24Rounds::d_rounds(&mut state);
   46,564 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
   22,242 ( 0.00%)          state.v1 ^= 0xdd;
        .                   Sip24Rounds::d_rounds(&mut state);
   22,242 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
        .                   (_0, _1)
        .               }
        .           }
        .           
        .           impl Hasher for SipHasher128 {
        .               #[inline]
        .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
        .           }
        .           
        .           #[derive(Debug, Clone, Default)]
        .           struct Sip24Rounds;
        .           
        .           impl Sip24Rounds {
        .               #[inline]
        .               fn c_rounds(state: &mut State) {
3,284,369 ( 0.08%)          compress!(state);
3,559,188 ( 0.09%)          compress!(state);
        .               }
        .           
        .               #[inline]
        .               fn d_rounds(state: &mut State) {
   93,124 ( 0.00%)          compress!(state);
   93,124 ( 0.00%)          compress!(state);
   93,124 ( 0.00%)          compress!(state);
   80,965 ( 0.00%)          compress!(state);
        .               }
        .           }

  740,210 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
1,842,943,446 (46.81%)  events annotated

